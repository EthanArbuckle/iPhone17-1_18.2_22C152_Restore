void boost::unit_test::output::xml_log_formatter::log_entry_value(uint64_t a1, void *a2, long long *a3)
{
  long long v3;

  v3 = *a3;
  boost::unit_test::utils::print_escaped_cdata(a2, (char **)&v3);
}

void boost::unit_test::output::xml_log_formatter::log_entry_finish(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    std::string::basic_string[abi:ne180100](&__p, "]]>", 3uLL);
    if ((v14 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = v13;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v5);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
  std::string::basic_string[abi:ne180100](&__p, "</", 2uLL);
  if ((v14 & 0x80u) == 0) {
    v6 = &__p;
  }
  else {
    v6 = __p;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v7 = v14;
  }
  else {
    uint64_t v7 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
  if ((char)v14 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100](&__p, *(void **)(a1 + 16), *(void *)(a1 + 24) - *(void *)(a1 + 16));
  if ((v14 & 0x80u) == 0) {
    v8 = &__p;
  }
  else {
    v8 = __p;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v9 = v14;
  }
  else {
    uint64_t v9 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v8, v9);
  if ((char)v14 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100](&__p, ">", 1uLL);
  if ((v14 & 0x80u) == 0) {
    v10 = &__p;
  }
  else {
    v10 = __p;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = v13;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v10, v11);
  if ((char)v14 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 16) = *(void *)(a1 + 24);
}

void sub_22426C2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::entry_context_start(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    std::string::basic_string[abi:ne180100](&__p, "]]>", 3uLL);
    if ((v10 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v10 & 0x80u) == 0) {
      uint64_t v5 = v10;
    }
    else {
      uint64_t v5 = v9;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v5);
    if ((char)v10 < 0) {
      operator delete(__p);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
  std::string::basic_string[abi:ne180100](&__p, "<Context>", 9uLL);
  if ((v10 & 0x80u) == 0) {
    v6 = &__p;
  }
  else {
    v6 = __p;
  }
  if ((v10 & 0x80u) == 0) {
    uint64_t v7 = v10;
  }
  else {
    uint64_t v7 = v9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
  if ((char)v10 < 0) {
    operator delete(__p);
  }
}

void sub_22426C3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::entry_context_finish(uint64_t a1, void *a2)
{
  std::string::basic_string[abi:ne180100](__p, "</Context>", 0xAuLL);
  if ((v6 & 0x80u) == 0) {
    v3 = __p;
  }
  else {
    v3 = (void **)__p[0];
  }
  if ((v6 & 0x80u) == 0) {
    uint64_t v4 = v6;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
  if ((char)v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22426C474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::log_entry_context(uint64_t a1, void *a2, uint64_t a3, long long *a4)
{
  std::string::basic_string[abi:ne180100](&__p, "<Frame>", 7uLL);
  if ((v15 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v7 = v15;
  }
  else {
    uint64_t v7 = v14;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)p_p, v7);
  if ((char)v15 < 0) {
    operator delete(__p);
  }
  v12 = a2;
  long long v11 = *a4;
  v8 = boost::unit_test::utils::operator<<(&v12, &v11);
  std::string::basic_string[abi:ne180100](&__p, "</Frame>", 8uLL);
  if ((v15 & 0x80u) == 0) {
    uint64_t v9 = &__p;
  }
  else {
    uint64_t v9 = __p;
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v10 = v15;
  }
  else {
    uint64_t v10 = v14;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  if ((char)v15 < 0) {
    operator delete(__p);
  }
}

void sub_22426C570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::unit_test::output::xml_log_formatter::~xml_log_formatter(boost::unit_test::output::xml_log_formatter *this)
{
}

const char *boost::thread_detail::future_error_category::name(boost::thread_detail::future_error_category *this)
{
  return "future";
}

void *boost::thread_detail::future_error_category::message@<X0>(int a1@<W1>, void *a2@<X8>)
{
  if ((a1 - 1) > 3) {
    v3 = "unspecified future_errc value\n";
  }
  else {
    v3 = off_2646D74E8[a1 - 1];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

BOOL CoreML::hasSufficientBytesInQuantizedWeightParam(CoreML *this, const CoreML::Specification::WeightParams *a2)
{
  v2 = &CoreML::Specification::_QuantizationParams_default_instance_;
  uint64_t v3 = *((void *)this + 8);
  if (v3) {
    v2 = (uint64_t *)*((void *)this + 8);
  }
  uint64_t v4 = *((void *)this + 5);
  LODWORD(v5) = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0) {
    uint64_t v6 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 23);
  }
  uint64_t v7 = *((void *)this + 6);
  LODWORD(v8) = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
  }
  int v10 = *((_DWORD *)this + 4);
  uint64_t v11 = *((void *)this + 7);
  LODWORD(v12) = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  uint64_t v14 = v2[2];
  if (v10 <= 0) {
    int v15 = 1;
  }
  else {
    int v15 = 2;
  }
  if (v6) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v10 > 0;
  }
  if (v9) {
    ++v16;
  }
  if (v13) {
    ++v16;
  }
  if (v16 > 1)
  {
LABEL_23:
    LODWORD(v5) = 0;
    return (int)v5 >= (unint64_t)(v14 * (void)a2 + 7) >> 3;
  }
  if (v10 <= 0 && v16)
  {
    if ((v5 & 0x80) != 0)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        return (int)v5 >= (unint64_t)(v14 * (void)a2 + 7) >> 3;
      }
    }
    else if (*(unsigned char *)(v4 + 23))
    {
      return (int)v5 >= (unint64_t)(v14 * (void)a2 + 7) >> 3;
    }
    if ((v8 & 0x80) != 0)
    {
      BOOL v18 = this != (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
      BOOL v19 = v3 != 0;
      if (!v3) {
        goto LABEL_43;
      }
      if (this == (CoreML *)&CoreML::Specification::_WeightParams_default_instance_) {
        goto LABEL_43;
      }
      uint64_t v8 = *(void *)(v7 + 8);
      if (!v8) {
        goto LABEL_43;
      }
    }
    else
    {
      BOOL v18 = this != (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
      BOOL v19 = v3 != 0;
      if (!v3 || this == (CoreML *)&CoreML::Specification::_WeightParams_default_instance_ || !*(unsigned char *)(v7 + 23))
      {
LABEL_43:
        if ((v12 & 0x80) != 0)
        {
          uint64_t v12 = *(void *)(v11 + 8);
          BOOL v20 = v12 == 0;
        }
        else
        {
          BOOL v20 = v12 == 0;
        }
        BOOL v21 = !v20 && v18;
        if (v19 && v21)
        {
          LODWORD(v5) = v12;
          return (int)v5 >= (unint64_t)(v14 * (void)a2 + 7) >> 3;
        }
        goto LABEL_23;
      }
    }
    LODWORD(v5) = v8;
    return (int)v5 >= (unint64_t)(v14 * (void)a2 + 7) >> 3;
  }
  if (v16) {
    LODWORD(v5) = 4 * v10;
  }
  else {
    LODWORD(v5) = 0;
  }
  return (int)v5 >= (unint64_t)(v14 * (void)a2 + 7) >> 3;
}

BOOL CoreML::hasValidQuantizationParams(CoreML *this, const CoreML::Specification::WeightParams *a2)
{
  uint64_t v2 = *((void *)this + 8);
  if (this == (CoreML *)&CoreML::Specification::_WeightParams_default_instance_ || v2 == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if ((unint64_t)(v4 - 1) > 7) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 + 36);
  if (v5 == 102) {
    return *(_DWORD *)(*(void *)(v2 + 24) + 16) == 1 << v4;
  }
  if (v5 != 101) {
    return 0;
  }
  uint64_t v6 = *(void *)(v2 + 24);
  int v7 = *(_DWORD *)(v6 + 16);
  if (v7 != 1 && v7 != a2) {
    return 0;
  }
  int v9 = *(_DWORD *)(v6 + 40);
  return !v9 || v9 == v7;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  *(void *)a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  return a1;
}

void boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *this)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5);
  *(void *)this = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::bad_alloc_::~bad_alloc_(std::bad_alloc *this)
{
  std::bad_alloc::~bad_alloc(this);
  *(void *)(v1 - 40) = &unk_26D754388;
  uint64_t v2 = (uint64_t *)(v1 - 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
}

void non-virtual thunk to'boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *this)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)(a1 + 40));
  *(void *)a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone()
{
}

void sub_22426DFB4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C4085500448);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl((uint64_t)exception, a1);
}

void sub_22426E020(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow(void *a1)
{
}

uint64_t *virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  std::bad_alloc::~bad_alloc((std::bad_alloc *)v1 + 5);
  *(void *)uint64_t v1 = &unk_26D754388;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(void *a1)
{
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  *(void *)a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  return a1;
}

void boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *this)
{
  std::bad_exception::~bad_exception((std::bad_exception *)this + 5);
  *(void *)this = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::bad_exception_::~bad_exception_(std::bad_exception *this)
{
  std::bad_exception::~bad_exception(this);
  *(void *)(v1 - 40) = &unk_26D754388;
  uint64_t v2 = (uint64_t *)(v1 - 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(v2);
}

void non-virtual thunk to'boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *this)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  std::bad_exception::~bad_exception((std::bad_exception *)(a1 + 40));
  *(void *)a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone()
{
}

void sub_22426E314(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C4085500448);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl((uint64_t)exception, a1);
}

void sub_22426E380(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow(void *a1)
{
}

uint64_t *virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  std::bad_exception::~bad_exception((std::bad_exception *)v1 + 5);
  *(void *)uint64_t v1 = &unk_26D754388;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(void *a1)
{
}

void turi::style_transfer::DataIterator::Next(turi::style_transfer::DataIterator *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  int v4 = *((_DWORD *)this + 10) + 1;
  *((_DWORD *)this + 10) = v4;
  *(_DWORD *)a2 = v4;
  (*(void (**)(long long *__return_ptr, void, void))(**((void **)this + 3) + 24))(&v5, *((void *)this + 3), *((void *)this + 4));
  std::vector<turi::style_transfer::st_example>::__vdeallocate(v3);
  *(_OWORD *)(a2 + 8) = v5;
  *(void *)(a2 + 24) = v6;
  uint64_t v6 = 0;
  long long v5 = 0uLL;
  int v7 = (void **)&v5;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_22426E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t turi::style_transfer::InferenceDataIterator::HasNext(turi::style_transfer::InferenceDataIterator *this)
{
  if (*((void *)this + 8) == *((void *)this + 6)) {
    return (*(uint64_t (**)(void))(**((void **)this + 3) + 16))();
  }
  else {
    return 1;
  }
}

void *turi::style_transfer::InferenceDataIterator::Next@<X0>(turi::style_transfer::InferenceDataIterator *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = (int *)*((void *)this + 8);
  if (v4 == *((int **)this + 6))
  {
    if ((*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3)))
    {
      (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 3) + 24))(&v10);
      *((_DWORD *)this + 18) = v10;
      std::vector<turi::style_transfer::st_example>::__vdeallocate((uint64_t *)this + 10);
      *((_OWORD *)this + 5) = v11;
      *((void *)this + 12) = v12;
      uint64_t v12 = 0;
      long long v11 = 0uLL;
      uint64_t v13 = (void **)&v11;
      std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v13);
      int v4 = (int *)*((void *)this + 5);
      *((void *)this + 8) = v4;
    }
    else
    {
      int v4 = (int *)*((void *)this + 8);
    }
  }
  uint64_t v5 = *((void *)this + 10);
  uint64_t v6 = *((void *)this + 11);
  if (v4 != *((int **)this + 6))
  {
    if (v5 != v6)
    {
      uint64_t v7 = *v4;
      uint64_t v8 = *((void *)this + 10);
      do
      {
        *(void *)(v8 + 128) = v7;
        v8 += 136;
      }
      while (v8 != v6);
    }
    *((void *)this + 8) = v4 + 1;
  }
  *(_DWORD *)a2 = *((_DWORD *)this + 18);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  return std::vector<turi::style_transfer::st_example>::__init_with_size[abi:ne180100]<turi::style_transfer::st_example*,turi::style_transfer::st_example*>((void *)(a2 + 8), v5, v6, 0xF0F0F0F0F0F0F0F1 * ((v6 - v5) >> 3));
}

uint64_t turi::style_transfer::ProgressUpdater::Invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t)(a2 + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "loss");
  uint64_t v5 = std::map<std::string,turi::neural_net::shared_float_array>::at(v4, (const void **)__p);
  uint64_t v6 = (float *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  uint64_t v8 = (float *)(v7 + 4 * (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5));
  float v9 = 0.0;
  while (v6 != v8)
  {
    float v10 = *v6++;
    float v9 = v9 + v10;
  }
  float v11 = (float)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = *(float **)(a1 + 8);
  float v13 = v9 / v11;
  if (!v12) {
    operator new();
  }
  *(float *)&unsigned int v14 = (float)(*v12 * 0.9) + (float)(v13 * 0.1);
  float *v12 = *(float *)&v14;
  uint64_t v15 = v14;
  uint64_t v16 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "style_loss");
  uint64_t v17 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v4, (const void **)__p);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  BOOL v18 = a2 + 4;
  if (a2 + 4 != (unsigned int *)v17)
  {
    uint64_t v20 = *(void *)(v17 + 56);
    uint64_t v19 = v17 + 56;
    BOOL v21 = (float *)(*(uint64_t (**)(uint64_t))(v20 + 16))(v19);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
    v23 = (float *)(v22 + 4 * (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19));
    float v24 = 0.0;
    while (v21 != v23)
    {
      float v25 = *v21++;
      float v24 = v24 + v25;
    }
    (*(uint64_t (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "content_loss");
  uint64_t v26 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v4, (const void **)__p);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v18 != (unsigned int *)v26)
  {
    uint64_t v28 = *(void *)(v26 + 56);
    uint64_t v27 = v26 + 56;
    v29 = (float *)(*(uint64_t (**)(uint64_t))(v28 + 16))(v27);
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 16))(v27);
    v31 = (float *)(v30 + 4 * (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24))(v27));
    float v32 = 0.0;
    while (v29 != v31)
    {
      float v33 = *v29++;
      float v32 = v32 + v33;
    }
    (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24))(v27);
  }
  return v16 | (v15 << 32);
}

void sub_22426EAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::style_transfer::Checkpoint::ExtractWeights(turi::neural_net::model_spec **a1@<X0>, void *a2@<X8>)
{
  turi::neural_net::model_spec::export_params_view(*a1, (uint64_t)a2);
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      turi::neural_net::shared_float_array::copy((uint64_t)(v3 + 7), (uint64_t)&v10);
      long long v4 = v11;
      long long v11 = 0uLL;
      uint64_t v5 = (std::__shared_weak_count *)v3[9];
      *((_OWORD *)v3 + 4) = v4;
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        uint64_t v5 = (std::__shared_weak_count *)*((void *)&v11 + 1);
      }
      long long v6 = v13;
      *((_OWORD *)v3 + 5) = v12;
      *((_OWORD *)v3 + 6) = v6;
      float v10 = &unk_26D752D58;
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      uint64_t v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v3[2];
          BOOL v9 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v9);
      }
      uint64_t v3 = v8;
    }
    while (v8 != a2 + 1);
  }
}

void sub_22426EBB4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X8>)
{
  int v35 = a4;
  std::allocate_shared[abi:ne180100]<turi::style_transfer::DataIterator,std::allocator<turi::style_transfer::DataIterator>,std::unique_ptr<turi::style_transfer::data_iterator>,int &,int &,void>(a2, (int *)(a1 + 16), &v35, &v33);
  uint64_t v12 = *(void *)(a1 + 20);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(&v31, a1, a3, a6);
  uint64_t v14 = v31;
  long long v13 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x28uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7759A8;
  uint64_t v16 = *a5;
  *a5 = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7758E0;
  v15[1].__shared_owners_ = v16;
  turi::neural_net::Iterator<turi::style_transfer::DataBatch>::AsPublisher(v33, &v29);
  uint64_t v17 = v29;
  BOOL v18 = operator new(0x28uLL);
  v18[1] = 0;
  v18[2] = 0;
  *BOOL v18 = &unk_26D775B58;
  v18[3] = &unk_26D775BA8;
  v18[4] = v12;
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v36, (void *)(v17 + 8));
  uint64_t v19 = operator new(0x50uLL);
  v19[1] = 0;
  v19[2] = 0;
  *uint64_t v19 = &unk_26D775BF8;
  long long v20 = v36;
  long long v36 = 0uLL;
  v19[5] = 0;
  v19[4] = 0;
  v19[3] = &unk_26D775C48;
  *((_OWORD *)v19 + 3) = v20;
  v19[8] = v18 + 3;
  v19[9] = v18;
  v37 = (char *)(v19 + 3);
  v38 = (std::__shared_weak_count *)v19;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)&v37, v19 + 4, (uint64_t)(v19 + 3));
  uint64_t v22 = v37;
  BOOL v21 = v38;
  v37 = 0;
  v38 = 0;
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v23 = operator new(0x30uLL);
  v23[1] = 0;
  v23[2] = 0;
  void *v23 = &unk_26D775D70;
  v23[3] = &unk_26D775DC0;
  v23[4] = v14;
  v23[5] = v13;
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v36, (void *)v22 + 1);
  float v24 = operator new(0x50uLL);
  v24[1] = 0;
  v24[2] = 0;
  *float v24 = &unk_26D775E10;
  long long v25 = v36;
  long long v36 = 0uLL;
  v24[5] = 0;
  v24[4] = 0;
  v24[3] = &unk_26D775E60;
  *((_OWORD *)v24 + 3) = v25;
  v24[8] = v23 + 3;
  v24[9] = v23;
  v37 = (char *)(v24 + 3);
  v38 = (std::__shared_weak_count *)v24;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)&v37, v24 + 4, (uint64_t)(v24 + 3));
  uint64_t v27 = (uint64_t)v37;
  uint64_t v26 = v38;
  v37 = 0;
  v38 = 0;
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  *(void *)&long long v28 = v15 + 1;
  *((void *)&v28 + 1) = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>::Map<turi::style_transfer::ProgressUpdater>(v27, &v28, a7);
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
}

void sub_22426EF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void sub_22426EFF4()
{
  if (!v0) {
    JUMPOUT(0x22426EFD4);
  }
  JUMPOUT(0x22426EFCCLL);
}

void sub_22426F000()
{
}

void turi::neural_net::Iterator<turi::style_transfer::DataBatch>::AsPublisher(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v3, (void *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>>,void>(&v3, a2);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_22426F058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>::Map<turi::style_transfer::ProgressUpdater>(uint64_t a1@<X0>, long long *a2@<X1>, _OWORD *a3@<X8>)
{
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v5, (void *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>>,std::shared_ptr<turi::style_transfer::ProgressUpdater>,void>(&v5, a2, &v6);
  *a3 = v6;
  long long v6 = 0uLL;
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_22426F0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  LODWORD(v27) = 1;
  LODWORD(v26) = 0;
  std::allocate_shared[abi:ne180100]<turi::style_transfer::DataIterator,std::allocator<turi::style_transfer::DataIterator>,std::unique_ptr<turi::style_transfer::data_iterator>,int &,int &,void>(a2, (int *)&v27, (int *)&v26, &v24);
  std::allocate_shared[abi:ne180100]<turi::style_transfer::InferenceDataIterator,std::allocator<turi::style_transfer::InferenceDataIterator>,std::shared_ptr<turi::style_transfer::DataIterator> &,std::vector<int>,void>(&v24, a3, &v22);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 56))(&v20, a1, a4);
  uint64_t v10 = v20;
  BOOL v9 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::neural_net::Iterator<turi::style_transfer::DataBatch>::AsPublisher(v22, &v17);
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Map<turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>(v17, (uint64_t)turi::style_transfer::EncodeInferenceBatch, &v19);
  uint64_t v11 = v19;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  void *v12 = &unk_26D776310;
  v12[3] = &unk_26D776360;
  v12[4] = v10;
  v12[5] = v9;
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v26, (void *)(v11 + 8));
  long long v13 = operator new(0x50uLL);
  v13[1] = 0;
  v13[2] = 0;
  *long long v13 = &unk_26D7763B0;
  long long v14 = v26;
  long long v26 = 0uLL;
  v13[5] = 0;
  v13[4] = 0;
  v13[3] = &unk_26D776400;
  *((_OWORD *)v13 + 3) = v14;
  v13[8] = v12 + 3;
  v13[9] = v12;
  uint64_t v27 = (char *)(v13 + 3);
  long long v28 = (std::__shared_weak_count *)v13;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)&v27, v13 + 4, (uint64_t)(v13 + 3));
  uint64_t v16 = (uint64_t)v27;
  uint64_t v15 = v28;
  uint64_t v27 = 0;
  long long v28 = 0;
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Map<turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>(v16, (uint64_t)turi::style_transfer::DecodeInferenceBatch, a5);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_22426F334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Map<turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26D776108;
  v6[3] = &unk_26D776158;
  v6[4] = a2;
  *(void *)&long long v7 = v6 + 3;
  *((void *)&v7 + 1) = v6;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Map<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>(a1, &v7, a3);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_22426F480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::style_transfer::EncodeInferenceBatch(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = a2 + 16;
  *(void *)(a2 + 8) = a2 + 16;
  long long v5 = (void *)(a2 + 8);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = -1;
  *(_DWORD *)a2 = *(_DWORD *)a1;
  turi::style_transfer::prepare_predict(*(void *)(a1 + 8), (uint64_t)&v8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v5, *(void **)(a2 + 16));
  long long v6 = v9;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v6;
  uint64_t v7 = v10;
  *(void *)(a2 + 24) = v10;
  if (v7)
  {
    v6[2] = v4;
    uint64_t v8 = &v9;
    BOOL v9 = 0;
    uint64_t v10 = 0;
    long long v6 = 0;
  }
  else
  {
    *long long v5 = v4;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v8, v6);
  *(_DWORD *)(a2 + 32) = *(void *)(*(void *)(a1 + 8) + 128);
}

void sub_22426F558(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Map<turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v6 = operator new(0x28uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26D7764F0;
  v6[3] = &unk_26D776540;
  v6[4] = a2;
  *(void *)&long long v7 = v6 + 3;
  *((void *)&v7 + 1) = v6;
  turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Map<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>(a1, &v7, a3);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_22426F610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::style_transfer::DecodeInferenceBatch(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)a2 = *a1;
  *(void *)(a2 + 8) = 0;
  long long v3 = (uint64_t *)(a2 + 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "output");
  uint64_t v4 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(a1 + 2), (const void **)__p);
  uint64_t v6 = *(void *)(v4 + 8);
  long long v5 = *(std::__shared_weak_count **)(v4 + 16);
  v26[0] = &unk_26D752D58;
  v26[1] = v6;
  uint64_t v27 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = *(_OWORD *)(v4 + 40);
  long long v28 = *(_OWORD *)(v4 + 24);
  long long v29 = v7;
  if (SBYTE7(v31) < 0) {
    operator delete(__p[0]);
  }
  turi::style_transfer::process_output((turi::style_transfer *)v26, (const turi::neural_net::shared_float_array *)(int)a1[8], &v24);
  std::vector<turi::style_transfer::st_example>::resize(v3, 0x8E38E38E38E38E39 * ((v25 - v24) >> 3));
  uint64_t v8 = v24;
  uint64_t v23 = v25;
  if (v24 != v25)
  {
    uint64_t v9 = *v3;
    do
    {
      LOBYTE(v33) = 0;
      long long v10 = 0uLL;
      long long v31 = 0u;
      long long v32 = 0u;
      *(_OWORD *)__p = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      LOBYTE(v37) = 0;
      *((void *)&v33 + 1) = 3;
      *((void *)&v37 + 1) = 3;
      uint64_t v38 = *(void *)v8;
      uint64_t v12 = *(void *)(v8 + 8);
      uint64_t v11 = *(void *)(v8 + 16);
      if (v11)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
        long long v10 = v34;
      }
      *(void *)&long long v34 = v12;
      *((void *)&v34 + 1) = v11;
      v39[0] = v10;
      boost::detail::shared_count::~shared_count((atomic_uint **)v39 + 1);
      long long v13 = *(_OWORD *)(v8 + 24);
      long long v14 = *(_OWORD *)(v8 + 56);
      long long v36 = *(_OWORD *)(v8 + 40);
      long long v37 = v14;
      long long v35 = v13;
      long long v15 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&v39[0] = *(void *)v9;
      uint64_t v16 = *(void *)(v9 + 8);
      *(_OWORD *)uint64_t v9 = v15;
      *((void *)&v39[0] + 1) = v16;
      boost::detail::shared_count::~shared_count((atomic_uint **)v39 + 1);
      long long v17 = v31;
      long long v18 = v33;
      *(_OWORD *)(v9 + 32) = v32;
      *(_OWORD *)(v9 + 48) = v18;
      *(_OWORD *)(v9 + 16) = v17;
      long long v19 = v34;
      long long v34 = 0uLL;
      long long v20 = *(_OWORD *)(v9 + 64);
      *(_OWORD *)(v9 + 64) = v19;
      v39[0] = v20;
      boost::detail::shared_count::~shared_count((atomic_uint **)v39 + 1);
      long long v21 = v35;
      long long v22 = v37;
      *(_OWORD *)(v9 + 96) = v36;
      *(_OWORD *)(v9 + 112) = v22;
      *(_OWORD *)(v9 + 80) = v21;
      *(void *)(v9 + 128) = v38;
      boost::detail::shared_count::~shared_count((atomic_uint **)&v34 + 1);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      v8 += 72;
      v9 += 136;
    }
    while (v8 != v23);
  }
  __p[0] = &v24;
  std::vector<std::pair<long long,turi::image_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v26[0] = &unk_26D752D58;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_22426F884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __p = &a11;
  std::vector<std::pair<long long,turi::image_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a14 = a9;
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void turi::style_transfer::EncodeTrainingBatch(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 16) = 0;
  uint64_t v5 = a4 + 16;
  *(void *)(a4 + 8) = a4 + 16;
  uint64_t v6 = (void *)(a4 + 8);
  *(void *)(a4 + 24) = 0;
  *(_DWORD *)a4 = *(_DWORD *)a1;
  turi::style_transfer::prepare_batch((uint64_t *)(a1 + 8), a2, a3, 1, (uint64_t)&v9);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)v6, *(void **)(a4 + 16));
  long long v7 = v10;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v7;
  uint64_t v8 = v11;
  *(void *)(a4 + 24) = v11;
  if (v8)
  {
    v7[2] = v5;
    uint64_t v9 = &v10;
    long long v10 = 0;
    uint64_t v11 = 0;
    long long v7 = 0;
  }
  else
  {
    void *v6 = v5;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v9, v7);
}

void sub_22426F990(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void std::vector<turi::style_transfer::st_example>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::style_transfer::st_example>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::style_transfer::st_example>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1 + 136 * a2);
  }
}

void turi::style_transfer::DataIterator::~DataIterator(turi::style_transfer::DataIterator *this)
{
  *(void *)this = &unk_26D775860;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D775860;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::style_transfer::DataIterator::HasNext(turi::style_transfer::DataIterator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 3) + 16))();
}

void turi::style_transfer::ProgressUpdater::~ProgressUpdater(turi::style_transfer::ProgressUpdater *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26D7758E0;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x22A614FA0](v2, 0x1000C4052888210);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26D7758E0;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x22A614FA0](v2, 0x1000C4052888210);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::style_transfer::InferenceDataIterator::~InferenceDataIterator(turi::style_transfer::InferenceDataIterator *this)
{
  *(void *)this = &unk_26D775830;
  uint64_t v5 = (void **)((char *)this + 80);
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void **v5;

  *(void *)this = &unk_26D775830;
  uint64_t v5 = (void **)((char *)this + 80);
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x22A614FA0](this, 0x10F1C403B732CD7);
}

void *std::vector<turi::style_transfer::st_example>::__init_with_size[abi:ne180100]<turi::style_transfer::st_example*,turi::style_transfer::st_example*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::style_transfer::st_example>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*,turi::style_transfer::st_example*,turi::style_transfer::st_example*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22426FD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::style_transfer::st_example>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[136 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*,turi::style_transfer::st_example*,turi::style_transfer::st_example*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v15 = a4;
  uint64_t v14 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a2 != a3)
  {
    do
    {
      *(void *)uint64_t v4 = *(void *)a2;
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)(v4 + 8) = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
      }
      long long v6 = *(_OWORD *)(a2 + 16);
      long long v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v4 + 48) = v7;
      *(_OWORD *)(v4 + 16) = v6;
      *(void *)(v4 + 64) = *(void *)(a2 + 64);
      uint64_t v8 = *(void *)(a2 + 72);
      *(void *)(v4 + 72) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
      }
      long long v9 = *(_OWORD *)(a2 + 80);
      long long v10 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(v4 + 112) = v10;
      *(_OWORD *)(v4 + 80) = v9;
      *(void *)(v4 + 128) = *(void *)(a2 + 128);
      v4 += 136;
      a2 += 136;
    }
    while (a2 != a3);
    uint64_t v15 = v4;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,turi::style_transfer::st_example*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  uint64_t v3 = *v1;
  for (uint64_t i = *v2; v3 != i; v3 -= 136)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(v3 - 64));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v3 - 128));
  }
}

void std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<turi::style_transfer::st_example>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<turi::style_transfer::st_example>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 136)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(i - 64));
    boost::detail::shared_count::~shared_count((atomic_uint **)(i - 128));
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<turi::style_transfer::st_example>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<turi::style_transfer::st_example>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::allocate_shared[abi:ne180100]<turi::style_transfer::DataIterator,std::allocator<turi::style_transfer::DataIterator>,std::unique_ptr<turi::style_transfer::data_iterator>,int &,int &,void>(uint64_t *a1@<X1>, int *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x48uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_26D775958;
  uint64_t v9 = *a1;
  *a1 = 0;
  uint64_t v10 = *a2;
  int v11 = *a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[6] = v9;
  v8[3] = &unk_26D775860;
  v8[7] = v10;
  *((_DWORD *)v8 + 16) = v11;
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void std::__shared_ptr_emplace<turi::style_transfer::DataIterator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::style_transfer::DataIterator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::style_transfer::DataIterator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<turi::style_transfer::ProgressUpdater>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7759A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::style_transfer::ProgressUpdater>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7759A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::style_transfer::ProgressUpdater>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>>,void>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_26D7759F8;
  long long v5 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  v4[5] = 0;
  v4[3] = &unk_26D775A48;
  *((_OWORD *)v4 + 3) = v5;
  *a2 = v4 + 3;
  a2[1] = v4;
  v4[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7759F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7759F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::~IteratorPublisher(void *a1)
{
  *a1 = &unk_26D775A48;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::~IteratorPublisher(void *a1)
{
  *a1 = &unk_26D775A48;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::Receive(uint64_t a1, uint64_t *a2)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>> &,void>(a2, (uint64_t *)(a1 + 24), &v5);
  uint64_t v3 = *a2;
  long long v4 = v5;
  long long v5 = 0uLL;
  (*(void (**)(uint64_t, long long *))(*(void *)v3 + 16))(v3, &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_2242704BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>> &,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_224270530(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Iterator<turi::style_transfer::DataBatch>> &,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>,0>(void *result, uint64_t *a2, uint64_t *a3)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26D775AC0;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  result[3] = &unk_26D775B10;
  result[4] = v4;
  result[5] = v3;
  result[6] = v6;
  result[7] = v5;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription,std::allocator<turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription::~IteratorSubscription(void *a1)
{
  *a1 = &unk_26D775B10;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription::~IteratorSubscription(void *a1)
{
  *a1 = &unk_26D775B10;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::IteratorPublisher<turi::style_transfer::DataBatch>::IteratorSubscription::Request(uint64_t a1, int w1_0)
{
  int v2 = w1_0;
  v19[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 8)) {
    BOOL v3 = w1_0 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    do
    {
      v17.__ptr_ = 0;
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24)))
      {
        uint64_t v5 = v19;
        (*(void (**)(void *__return_ptr))(**(void **)(a1 + 24) + 24))(v19);
      }
      else
      {
        uint64_t v5 = 0;
      }
      if (v17.__ptr_)
      {
        uint64_t v6 = *(void *)(a1 + 8);
        std::exception_ptr::exception_ptr(&v15, &v17);
        turi::neural_net::Completion::Failure(&v15, v20, &v16);
        (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v6 + 32))(v6, &v16);
        std::exception_ptr::~exception_ptr(&v16);
        long long v7 = &v15;
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 8);
        if (v5)
        {
          int v11 = *(_DWORD *)v5;
          long long v12 = *(_OWORD *)(v5 + 1);
          uint64_t v13 = v5[3];
          v5[1] = 0;
          v5[2] = 0;
          v5[3] = 0;
          int v9 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 24))(v8, &v11);
          int v10 = v2 - (v2 > 0);
          v18.__ptr_ = &v12;
          std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
          if ((v10 | v9) < 0) {
            int v2 = -1;
          }
          else {
            int v2 = v9 + v10;
          }
          v18.__ptr_ = v5 + 1;
          std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
          goto LABEL_18;
        }
        v18.__ptr_ = 0;
        long long v7 = &v14;
        std::exception_ptr::exception_ptr(&v14, &v18);
        std::exception_ptr::~exception_ptr(&v18);
        (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v8 + 32))(v8, &v14);
      }
      std::exception_ptr::~exception_ptr(v7);
      (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
LABEL_18:
      std::exception_ptr::~exception_ptr(&v17);
    }
    while (*(void *)(a1 + 8) && v2);
  }
}

void sub_2242709C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception_ptr a13, char a14, std::exception_ptr a15, std::exception_ptr a16, uint64_t a17)
{
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775B58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>::~CallableTransform()
{
}

void turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_0>::Invoke(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a2;
  uint64_t v4 = *((void *)a2 + 3);
  long long v5 = *(_OWORD *)(a2 + 2);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 1) = 0;
  LODWORD(v7) = v3;
  long long v8 = v5;
  uint64_t v9 = v4;
  memset(v6, 0, sizeof(v6));
  turi::style_transfer::EncodeTrainingBatch((uint64_t)&v7, *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 8), a3);
  int v10 = (void **)&v8;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v10);
  long long v7 = (void **)v6;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_224270B54(_Unwind_Exception *a1)
{
  uint64_t v4 = v1;
  *(void *)(v3 - 40) = v2;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  *(void *)(v3 - 40) = v4;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775BF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775BF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D775C48;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D775C48;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::Receive(uint64_t a1, __n128 *a2)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,void>((unint64_t *)(a1 + 40), a2, &v5);
  uint64_t v3 = *(void *)(a1 + 24);
  long long v4 = v5;
  long long v5 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(v3, &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_224270D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 16))(a1, &v2);
  if (*((void *)&v2 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v2 + 1));
  }
}

void sub_224270DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,void>(unint64_t *a1@<X1>, __n128 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (__n128 *)operator new(0x48uLL);
  std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,0>(v6, a1, a2);
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
}

void sub_224270E5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,0>(__n128 *a1, unint64_t *a2, __n128 *a3)
{
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = (unint64_t)&unk_26D775CC0;
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a1[1].n128_u64[1] = (unint64_t)&unk_26D775D10;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v3;
  a1[3] = result;
  a1[4].n128_u64[0] = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D775D10;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D775D10;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::Receive(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    long long v3 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v2 + 16))(v2, &v3);
    if (*((void *)&v3 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
    }
  }
}

void sub_2242710BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::Receive(void *a1, int *x1_0)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 3;
  if (!a1[3]) {
    return 0;
  }
  uint64_t v4 = a1[1];
  int v14 = *x1_0;
  long long v15 = *(_OWORD *)(x1_0 + 2);
  uint64_t v16 = *((void *)x1_0 + 3);
  v17.__ptr_ = 0;
  *((void *)x1_0 + 1) = 0;
  *((void *)x1_0 + 2) = 0;
  *((void *)x1_0 + 3) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 16))(&v19);
  std::exception_ptr v18 = (void **)&v15;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint64_t v5 = *v2;
  if (v17.__ptr_)
  {
    uint64_t v6 = (std::__shared_weak_count *)a1[4];
    uint64_t *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v12, &v17);
    turi::neural_net::Completion::Failure(&v12, v24, &v13);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v5 + 32))(v5, &v13);
    std::exception_ptr::~exception_ptr(&v13);
    std::exception_ptr::~exception_ptr(&v12);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v7 = 0;
  }
  else
  {
    int v9 = v19;
    int v10 = v20;
    v11[0] = v21;
    v11[1] = v22;
    if (v22)
    {
      v21[2] = v11;
      std::exception_ptr v20 = &v21;
      long long v21 = 0;
      long long v22 = 0;
    }
    else
    {
      int v10 = v11;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 24))(v5, &v9);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v10, v11[0]);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v20, v21);
  }
  std::exception_ptr::~exception_ptr(&v17);
  return v7;
}

void sub_2242712C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, std::exception_ptr a14, std::exception_ptr a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v20, a12);
  std::exception_ptr::~exception_ptr(&a20);
  _Unwind_Resume(a1);
}

void sub_224271310(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  if (a2)
  {
    *(void *)(v21 - 80) = v20;
    std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 80));
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=(&a20, (const std::exception_ptr *)(v21 - 80));
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v21 - 80));
    __cxa_end_catch();
    JUMPOUT(0x224271174);
  }
  JUMPOUT(0x224271308);
}

void sub_224271354()
{
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::Receive(uint64_t a1, const std::exception_ptr *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    std::exception_ptr::exception_ptr(&v3, a2);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v2 + 32))(v2, &v3);
    std::exception_ptr::~exception_ptr(&v3);
  }
}

void sub_2242713C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>::~CallableTransform(void *a1)
{
  *a1 = &unk_26D775DC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>::~CallableTransform(void *a1)
{
  *a1 = &unk_26D775DC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedBatch,turi::style_transfer::ModelTrainer::AsTrainingBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::string const&,int,std::unique_ptr<float>,turi::neural_net::compute_context *)::$_1>::Invoke(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a2;
  uint64_t v5 = a2 + 4;
  uint64_t v6 = (void *)*((void *)a2 + 2);
  int v10 = (void **)*((void *)a2 + 1);
  int v11 = v6;
  if (*((void *)a2 + 3))
  {
    v6[2] = &v11;
    *((void *)a2 + 1) = v5;
    *uint64_t v5 = 0;
    *((void *)a2 + 3) = 0;
  }
  else
  {
    int v10 = &v11;
  }
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = a3 + 16;
  *(void *)(a3 + 8) = a3 + 16;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)a3 = v4;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 40))(&v13);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a3 + 8, *(void **)(a3 + 16));
  long long v8 = v14;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 16) = v8;
  uint64_t v9 = v15;
  *(void *)(a3 + 24) = v15;
  if (v9)
  {
    v8[2] = v7;
    std::exception_ptr v13 = &v14;
    int v14 = 0;
    uint64_t v15 = 0;
    long long v8 = 0;
  }
  else
  {
    *(void *)(a3 + 8) = v7;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v13, v8);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v10, v11);
}

void sub_224271644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v13, *v14);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775E10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775E10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D775E60;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::exception_ptr v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D775E60;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::exception_ptr v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::Receive(uint64_t a1, __n128 *a2)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,void>((unint64_t *)(a1 + 40), a2, &v5);
  uint64_t v3 = *(void *)(a1 + 24);
  long long v4 = v5;
  long long v5 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>::Subscribe(v3, &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_224271858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>::Subscribe(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 16))(a1, &v2);
  if (*((void *)&v2 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v2 + 1));
  }
}

void sub_2242718E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,void>(unint64_t *a1@<X1>, __n128 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (__n128 *)operator new(0x48uLL);
  std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,0>(v6, a1, a2);
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
}

void sub_224271948(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>,0>(__n128 *a1, unint64_t *a2, __n128 *a3)
{
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = (unint64_t)&unk_26D775EA0;
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a1[1].n128_u64[1] = (unint64_t)&unk_26D775EF0;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v3;
  a1[3] = result;
  a1[4].n128_u64[0] = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D775EF0;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D775EF0;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::EncodedBatch>::MapSubscriber::Receive(void *a1, int *x1_0)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v2 = a1 + 3;
  if (!a1[3]) {
    return 0;
  }
  v20.__ptr_ = 0;
  uint64_t v4 = a1[1];
  int v16 = *x1_0;
  long long v5 = x1_0 + 4;
  uint64_t v6 = (void *)*((void *)x1_0 + 2);
  std::exception_ptr v17 = (void **)*((void *)x1_0 + 1);
  std::exception_ptr v18 = v6;
  if (*((void *)x1_0 + 3))
  {
    v6[2] = &v18;
    *((void *)x1_0 + 1) = v5;
    *long long v5 = 0;
    *((void *)x1_0 + 3) = 0;
  }
  else
  {
    std::exception_ptr v17 = &v18;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 16))(&v21);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v17, v18);
  uint64_t v8 = *v2;
  if (v20.__ptr_)
  {
    uint64_t v9 = (std::__shared_weak_count *)a1[4];
    uint64_t *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v14, &v20);
    turi::neural_net::Completion::Failure(&v14, v26, &v15);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v8 + 32))(v8, &v15);
    std::exception_ptr::~exception_ptr(&v15);
    std::exception_ptr::~exception_ptr(&v14);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v7 = 0;
  }
  else
  {
    int v11 = v21;
    uint64_t v12 = v22;
    v13[0] = v23;
    v13[1] = v24;
    if (v24)
    {
      v23[2] = v13;
      long long v22 = &v23;
      uint64_t v23 = 0;
      std::exception_ptr v24 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 24))(v8, &v11);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v12, v13[0]);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v22, v23);
  }
  std::exception_ptr::~exception_ptr(&v20);
  return v7;
}

void sub_224271D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v15, a12);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v16 - 80));
  _Unwind_Resume(a1);
}

void sub_224271D98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception_ptr a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v19, a19);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v20 - 80), &a16);
    std::exception_ptr::~exception_ptr(&a16);
    __cxa_end_catch();
    JUMPOUT(0x224271C04);
  }
  JUMPOUT(0x224271D90);
}

void sub_224271DDC()
{
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>>,std::shared_ptr<turi::style_transfer::ProgressUpdater>,void>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26D775F50;
  long long v7 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  long long v8 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v6[5] = 0;
  void v6[3] = &unk_26D775FA0;
  *((_OWORD *)v6 + 3) = v7;
  *((_OWORD *)v6 + 4) = v8;
  *a3 = v6 + 3;
  a3[1] = v6;
  v6[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D775F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D775FA0;
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D775FA0;
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::Receive(uint64_t a1, __n128 *a2)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::TrainingProgress>>,void>((unint64_t *)(a1 + 40), a2, &v5);
  uint64_t v3 = *(void *)(a1 + 24);
  long long v4 = v5;
  long long v5 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::EncodedBatch>::Subscribe(v3, &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_224272084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::TrainingProgress>>,void>(unint64_t *a1@<X1>, __n128 *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (__n128 *)operator new(0x48uLL);
  std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::TrainingProgress>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>,0>(v6, a1, a2);
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
}

void sub_2242720F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::TrainingProgress>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>,0>(__n128 *a1, unint64_t *a2, __n128 *a3)
{
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = (unint64_t)&unk_26D776018;
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a1[1].n128_u64[1] = (unint64_t)&unk_26D776068;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v3;
  a1[3] = result;
  a1[4].n128_u64[0] = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D776068;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D776068;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber::Receive(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    long long v3 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v2 + 16))(v2, &v3);
    if (*((void *)&v3 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
    }
  }
}

void sub_224272358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber::Receive(void *a1, int *x1_0)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 3;
  if (!a1[3]) {
    return 0;
  }
  uint64_t v4 = a1[1];
  int v13 = *x1_0;
  long long v5 = x1_0 + 4;
  uint64_t v6 = (void *)*((void *)x1_0 + 2);
  std::exception_ptr v14 = (void **)*((void *)x1_0 + 1);
  uint64_t v15 = v6;
  uint64_t v16 = *((void *)x1_0 + 3);
  v17.__ptr_ = 0;
  if (v16)
  {
    v6[2] = &v15;
    *((void *)x1_0 + 1) = v5;
    *long long v5 = 0;
    *((void *)x1_0 + 3) = 0;
  }
  else
  {
    std::exception_ptr v14 = &v15;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v4 + 16))(v4, &v13);
  uint64_t v19 = v8;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v14, v15);
  uint64_t v9 = *v2;
  if (v17.__ptr_)
  {
    long long v7 = (std::__shared_weak_count *)a1[4];
    uint64_t *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v11, &v17);
    turi::neural_net::Completion::Failure(&v11, v21, &v12);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v9 + 32))(v9, &v12);
    std::exception_ptr::~exception_ptr(&v12);
    std::exception_ptr::~exception_ptr(&v11);
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      long long v7 = 0;
    }
  }
  else
  {
    long long v7 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, v18, v19);
  }
  std::exception_ptr::~exception_ptr(&v17);
  return v7;
}

void sub_22427251C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, std::exception_ptr a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception_ptr a17)
{
}

void sub_22427255C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception_ptr a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, std::exception_ptr a17)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v17, a15);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=(&a17, &a12);
    std::exception_ptr::~exception_ptr(&a12);
    __cxa_end_catch();
    JUMPOUT(0x224272434);
  }
  JUMPOUT(0x224272554);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedBatch,turi::style_transfer::TrainingProgress>::MapSubscriber::Receive(uint64_t a1, const std::exception_ptr *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    std::exception_ptr::exception_ptr(&v3, a2);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v2 + 32))(v2, &v3);
    std::exception_ptr::~exception_ptr(&v3);
  }
}

void sub_22427260C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::allocate_shared[abi:ne180100]<turi::style_transfer::InferenceDataIterator,std::allocator<turi::style_transfer::InferenceDataIterator>,std::shared_ptr<turi::style_transfer::DataIterator> &,std::vector<int>,void>(unint64_t *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x80uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26D7760B8;
  std::allocator<turi::style_transfer::InferenceDataIterator>::construct[abi:ne180100]<turi::style_transfer::InferenceDataIterator,std::shared_ptr<turi::style_transfer::DataIterator> &,std::vector<int>>((uint64_t)&v7, (__n128 *)(v6 + 24), a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, (void *)v6 + 4, (uint64_t)(v6 + 24));
}

void std::__shared_ptr_emplace<turi::style_transfer::InferenceDataIterator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7760B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::style_transfer::InferenceDataIterator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7760B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::style_transfer::InferenceDataIterator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

__n128 std::allocator<turi::style_transfer::InferenceDataIterator>::construct[abi:ne180100]<turi::style_transfer::InferenceDataIterator,std::shared_ptr<turi::style_transfer::DataIterator> &,std::vector<int>>(uint64_t a1, __n128 *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v5 = *a3;
  unint64_t v4 = a3[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = *(void *)a4;
  __n128 result = *(__n128 *)(a4 + 8);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  a2->n128_u64[0] = (unint64_t)&unk_26D775830;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = v5;
  a2[2].n128_u64[0] = v4;
  a2[2].n128_u64[1] = v6;
  a2[3] = result;
  a2[4].n128_u64[0] = result.n128_u64[0];
  a2[4].n128_u32[2] = 0;
  a2[5].n128_u64[1] = 0;
  a2[6].n128_u64[0] = 0;
  a2[5].n128_u64[0] = 0;
  return result;
}

void turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Map<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>(uint64_t a1@<X0>, long long *a2@<X1>, _OWORD *a3@<X8>)
{
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v5, (void *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>,void>(&v5, a2, &v6);
  *a3 = v6;
  long long v6 = 0uLL;
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_224272818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>::Invoke(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void (**)(int *))(a1 + 8);
  int v3 = *a2;
  long long v4 = *(_OWORD *)(a2 + 2);
  uint64_t v5 = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  v2(&v3);
  long long v6 = (void **)&v4;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_224272930(_Unwind_Exception *a1)
{
  uint64_t v3 = v1;
  *(void *)(v2 - 24) = v3;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::CallableTransform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch (*)(turi::style_transfer::DataBatch)>>,void>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26D7761A8;
  long long v7 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  long long v8 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v6[5] = 0;
  void v6[3] = &unk_26D7761F8;
  *((_OWORD *)v6 + 3) = v7;
  *((_OWORD *)v6 + 4) = v8;
  *a3 = v6 + 3;
  a3[1] = v6;
  v6[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7761A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7761A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D7761F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D7761F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::Receive(uint64_t a1, __n128 *a2)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,void>((unint64_t *)(a1 + 40), a2, &v5);
  uint64_t v3 = *(void *)(a1 + 24);
  long long v4 = v5;
  long long v5 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::DataBatch>::Subscribe(v3, &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_224272BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,void>(unint64_t *a1@<X1>, __n128 *a2@<X2>, void *a3@<X8>)
{
  long long v6 = (__n128 *)operator new(0x48uLL);
  std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,0>(v6, a1, a2);
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
}

void sub_224272C60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,0>(__n128 *a1, unint64_t *a2, __n128 *a3)
{
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = (unint64_t)&unk_26D776270;
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a1[1].n128_u64[1] = (unint64_t)&unk_26D7762C0;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v3;
  a1[3] = result;
  a1[4].n128_u64[0] = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D7762C0;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D7762C0;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::Receive(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    long long v3 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v2 + 16))(v2, &v3);
    if (*((void *)&v3 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
    }
  }
}

void sub_224272EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::Receive(void *a1, int *x1_0)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 3;
  if (!a1[3]) {
    return 0;
  }
  uint64_t v4 = a1[1];
  int v15 = *x1_0;
  long long v16 = *(_OWORD *)(x1_0 + 2);
  uint64_t v17 = *((void *)x1_0 + 3);
  v18.__ptr_ = 0;
  *((void *)x1_0 + 1) = 0;
  *((void *)x1_0 + 2) = 0;
  *((void *)x1_0 + 3) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 16))(&v20);
  uint64_t v19 = (void **)&v16;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v5 = *v2;
  if (v18.__ptr_)
  {
    long long v6 = (std::__shared_weak_count *)a1[4];
    uint64_t *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v13, &v18);
    turi::neural_net::Completion::Failure(&v13, v26, &v14);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v5 + 32))(v5, &v14);
    std::exception_ptr::~exception_ptr(&v14);
    std::exception_ptr::~exception_ptr(&v13);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v7 = 0;
  }
  else
  {
    int v9 = v20;
    int v10 = v21;
    v11[0] = v22;
    v11[1] = v23;
    if (v23)
    {
      v22[2] = v11;
      std::exception_ptr v21 = &v22;
      long long v22 = 0;
      uint64_t v23 = 0;
    }
    else
    {
      int v10 = v11;
    }
    int v12 = v24;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 24))(v5, &v9);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v10, v11[0]);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v21, v22);
  }
  std::exception_ptr::~exception_ptr(&v18);
  return v7;
}

void sub_2242730D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::exception_ptr a15, std::exception_ptr a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::exception_ptr a21)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v21, a12);
  std::exception_ptr::~exception_ptr(&a21);
  _Unwind_Resume(a1);
}

void sub_22427311C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::exception_ptr a21)
{
  if (a2)
  {
    *(void *)(v22 - 88) = v21;
    std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 88));
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=(&a21, (const std::exception_ptr *)(v22 - 88));
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v22 - 88));
    __cxa_end_catch();
    JUMPOUT(0x224272F78);
  }
  JUMPOUT(0x224273114);
}

void sub_224273160()
{
}

void turi::neural_net::MapPublisher<turi::style_transfer::DataBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::Receive(uint64_t a1, const std::exception_ptr *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    std::exception_ptr::exception_ptr(&v3, a2);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v2 + 32))(v2, &v3);
    std::exception_ptr::~exception_ptr(&v3);
  }
}

void sub_2242731D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>::~CallableTransform(void *a1)
{
  *a1 = &unk_26D776360;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>::~CallableTransform(void *a1)
{
  *a1 = &unk_26D776360;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::ModelTrainer::AsInferenceBatchPublisher(std::unique_ptr<turi::style_transfer::data_iterator>,std::vector<int>,turi::neural_net::compute_context *)::$_0>::Invoke(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a2;
  uint64_t v5 = a2 + 4;
  long long v6 = (void *)*((void *)a2 + 2);
  int v10 = (void **)*((void *)a2 + 1);
  std::exception_ptr v11 = v6;
  if (*((void *)a2 + 3))
  {
    v6[2] = &v11;
    *((void *)a2 + 1) = v5;
    *uint64_t v5 = 0;
    *((void *)a2 + 3) = 0;
  }
  else
  {
    int v10 = &v11;
  }
  int v13 = a2[8];
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = a3 + 16;
  *(void *)(a3 + 8) = a3 + 16;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = -1;
  *(_DWORD *)a3 = v4;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 24))(&v14);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(a3 + 8, *(void **)(a3 + 16));
  long long v8 = v15;
  *(void *)(a3 + 8) = v14;
  *(void *)(a3 + 16) = v8;
  uint64_t v9 = v16;
  *(void *)(a3 + 24) = v16;
  if (v9)
  {
    v8[2] = v7;
    std::exception_ptr v14 = &v15;
    int v15 = 0;
    uint64_t v16 = 0;
    long long v8 = 0;
  }
  else
  {
    *(void *)(a3 + 8) = v7;
  }
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v14, v8);
  *(_DWORD *)(a3 + 32) = v13;
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v10, v11);
}

void sub_224273468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v12, *v13);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7763B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7763B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D776400;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::exception_ptr v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D776400;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::exception_ptr v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::Receive(uint64_t a1, __n128 *a2)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,void>((unint64_t *)(a1 + 40), a2, &v5);
  uint64_t v3 = *(void *)(a1 + 24);
  long long v4 = v5;
  long long v5 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Subscribe(v3, &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_22427367C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Subscribe(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 16))(a1, &v2);
  if (*((void *)&v2 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v2 + 1));
  }
}

void sub_224273704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,void>(unint64_t *a1@<X1>, __n128 *a2@<X2>, void *a3@<X8>)
{
  long long v6 = (__n128 *)operator new(0x48uLL);
  std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,0>(v6, a1, a2);
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
}

void sub_22427376C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::EncodedInferenceBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>,0>(__n128 *a1, unint64_t *a2, __n128 *a3)
{
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = (unint64_t)&unk_26D776440;
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a1[1].n128_u64[1] = (unint64_t)&unk_26D776490;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v3;
  a1[3] = result;
  a1[4].n128_u64[0] = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776440;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776440;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D776490;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D776490;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::EncodedInferenceBatch>::MapSubscriber::Receive(void *a1, int *x1_0)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v2 = a1 + 3;
  if (!a1[3]) {
    return 0;
  }
  v22.__ptr_ = 0;
  uint64_t v4 = a1[1];
  int v17 = *x1_0;
  long long v5 = x1_0 + 4;
  long long v6 = (void *)*((void *)x1_0 + 2);
  std::exception_ptr v18 = (void **)*((void *)x1_0 + 1);
  uint64_t v19 = v6;
  if (*((void *)x1_0 + 3))
  {
    v6[2] = &v19;
    *((void *)x1_0 + 1) = v5;
    *long long v5 = 0;
    *((void *)x1_0 + 3) = 0;
  }
  else
  {
    std::exception_ptr v18 = &v19;
  }
  int v21 = x1_0[8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 16))(&v23);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v18, v19);
  uint64_t v8 = *v2;
  if (v22.__ptr_)
  {
    uint64_t v9 = (std::__shared_weak_count *)a1[4];
    uint64_t *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v15, &v22);
    turi::neural_net::Completion::Failure(&v15, v29, &v16);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v8 + 32))(v8, &v16);
    std::exception_ptr::~exception_ptr(&v16);
    std::exception_ptr::~exception_ptr(&v15);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v7 = 0;
  }
  else
  {
    int v11 = v23;
    uint64_t v12 = v24;
    v13[0] = v25;
    v13[1] = v26;
    if (v26)
    {
      v25[2] = v13;
      int v24 = &v25;
      uint64_t v25 = 0;
      std::exception_ptr v26 = 0;
    }
    else
    {
      uint64_t v12 = v13;
    }
    int v14 = v27;
    uint64_t v7 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 24))(v8, &v11);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v12, v13[0]);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v24, v25);
  }
  std::exception_ptr::~exception_ptr(&v22);
  return v7;
}

void sub_224273B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, std::exception_ptr a14, std::exception_ptr a15)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v15, a11);
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(v16 - 88));
  _Unwind_Resume(a1);
}

void sub_224273BCC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception_ptr a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v19, a19);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=((std::exception_ptr *)(v20 - 88), &a16);
    std::exception_ptr::~exception_ptr(&a16);
    __cxa_end_catch();
    JUMPOUT(0x224273A30);
  }
  JUMPOUT(0x224273BC4);
}

void sub_224273C10()
{
}

void turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Map<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>(uint64_t a1@<X0>, long long *a2@<X1>, _OWORD *a3@<X8>)
{
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&v5, (void *)(a1 + 8));
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>>,std::shared_ptr<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>,void>(&v5, a2, &v6);
  *a3 = v6;
  long long v6 = 0uLL;
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_224273C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7764F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7764F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>::Invoke(uint64_t a1, int *a2)
{
  long long v2 = *(void (**)(int *))(a1 + 8);
  int v5 = *a2;
  unint64_t v3 = a2 + 4;
  uint64_t v4 = (void *)*((void *)a2 + 2);
  long long v6 = (void **)*((void *)a2 + 1);
  uint64_t v7 = v4;
  if (*((void *)a2 + 3))
  {
    v4[2] = &v7;
    *((void *)a2 + 1) = v3;
    void *v3 = 0;
    *((void *)a2 + 3) = 0;
  }
  else
  {
    long long v6 = &v7;
  }
  int v9 = a2[8];
  v2(&v5);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v6, v7);
}

void sub_224273DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>,std::shared_ptr<turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>>,std::shared_ptr<turi::neural_net::CallableTransform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch (*)(turi::style_transfer::EncodedInferenceBatch)>>,void>(long long *a1@<X1>, long long *a2@<X2>, void *a3@<X8>)
{
  long long v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_26D776590;
  long long v7 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  long long v8 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  v6[5] = 0;
  void v6[3] = &unk_26D7765E0;
  *((_OWORD *)v6 + 3) = v7;
  *((_OWORD *)v6 + 4) = v8;
  *a3 = v6 + 3;
  a3[1] = v6;
  v6[4] = 0;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776590;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776590;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D7765E0;
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::~MapPublisher(void *a1)
{
  *a1 = &unk_26D7765E0;
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::Receive(uint64_t a1, __n128 *a2)
{
  std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>>,void>((unint64_t *)(a1 + 40), a2, &v5);
  uint64_t v3 = *(void *)(a1 + 24);
  long long v4 = v5;
  long long v5 = 0uLL;
  turi::neural_net::Publisher<turi::style_transfer::EncodedInferenceBatch>::Subscribe(v3, &v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_224274070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>,std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>>,void>(unint64_t *a1@<X1>, __n128 *a2@<X2>, void *a3@<X8>)
{
  long long v6 = (__n128 *)operator new(0x48uLL);
  std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>,0>(v6, a1, a2);
  *a3 = (char *)v6 + 24;
  a3[1] = v6;
}

void sub_2242740E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::neural_net::Transform<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>> &,std::shared_ptr<turi::neural_net::Subscriber<turi::style_transfer::DataBatch>>,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>,0>(__n128 *a1, unint64_t *a2, __n128 *a3)
{
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = (unint64_t)&unk_26D776620;
  unint64_t v4 = *a2;
  unint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a1[1].n128_u64[1] = (unint64_t)&unk_26D776670;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v3;
  a1[3] = result;
  a1[4].n128_u64[0] = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber,std::allocator<turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

std::exception_ptr *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D776670;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber::~MapSubscriber(std::exception_ptr *a1)
{
  a1->__ptr_ = &unk_26D776670;
  std::exception_ptr::~exception_ptr(a1 + 5);
  ptr = (std::__shared_weak_count *)a1[4].__ptr_;
  if (ptr) {
    std::__shared_weak_count::__release_shared[abi:ne180100](ptr);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2].__ptr_;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber::Receive(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    long long v3 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v2 + 16))(v2, &v3);
    if (*((void *)&v3 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
    }
  }
}

void sub_224274344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber::Receive(void *a1, int *x1_0)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 3;
  if (!a1[3]) {
    return 0;
  }
  v20.__ptr_ = 0;
  uint64_t v4 = a1[1];
  int v15 = *x1_0;
  long long v5 = x1_0 + 4;
  long long v6 = (void *)*((void *)x1_0 + 2);
  uint64_t v16 = (void **)*((void *)x1_0 + 1);
  int v17 = v6;
  if (*((void *)x1_0 + 3))
  {
    v6[2] = &v17;
    *((void *)x1_0 + 1) = v5;
    *long long v5 = 0;
    *((void *)x1_0 + 3) = 0;
  }
  else
  {
    uint64_t v16 = &v17;
  }
  int v19 = x1_0[8];
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 16))(&v22);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy((uint64_t)&v16, v17);
  uint64_t v8 = *v2;
  if (v20.__ptr_)
  {
    long long v7 = (std::__shared_weak_count *)a1[4];
    uint64_t *v2 = 0;
    v2[1] = 0;
    std::exception_ptr::exception_ptr(&v13, &v20);
    turi::neural_net::Completion::Failure(&v13, v26, &v14);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v8 + 32))(v8, &v14);
    std::exception_ptr::~exception_ptr(&v14);
    std::exception_ptr::~exception_ptr(&v13);
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      long long v7 = 0;
    }
  }
  else
  {
    int v10 = v22;
    long long v11 = v23;
    uint64_t v12 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    long long v7 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 24))(v8, &v10);
    int v21 = (void **)&v11;
    std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v21);
    int v21 = (void **)&v23;
    std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100](&v21);
  }
  std::exception_ptr::~exception_ptr(&v20);
  return v7;
}

void sub_224274558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception_ptr a13, std::exception_ptr a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  *(void *)(v21 - 80) = v20;
  std::vector<turi::style_transfer::st_example>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 80));
  std::exception_ptr::~exception_ptr(&a20);
  _Unwind_Resume(a1);
}

void sub_2242745A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, std::exception_ptr a20)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::destroy(v20, a17);
    __cxa_begin_catch(a1);
    std::current_exception();
    std::exception_ptr::operator=(&a20, (const std::exception_ptr *)(v21 - 80));
    std::exception_ptr::~exception_ptr((std::exception_ptr *)(v21 - 80));
    __cxa_end_catch();
    JUMPOUT(0x22427442CLL);
  }
  JUMPOUT(0x22427459CLL);
}

void sub_2242745E8()
{
}

void turi::neural_net::MapPublisher<turi::style_transfer::EncodedInferenceBatch,turi::style_transfer::DataBatch>::MapSubscriber::Receive(uint64_t a1, const std::exception_ptr *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    std::exception_ptr::exception_ptr(&v3, a2);
    (*(void (**)(uint64_t, std::exception_ptr *))(*(void *)v2 + 32))(v2, &v3);
    std::exception_ptr::~exception_ptr(&v3);
  }
}

void sub_224274658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

void std::vector<std::pair<long long,turi::image_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (atomic_uint **)**a1;
  if (v2)
  {
    uint64_t v4 = (atomic_uint **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 9;
        boost::detail::shared_count::~shared_count(v4 - 7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<turi::style_transfer::st_example>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 136 * a2;
      do
      {
        *(_OWORD *)(v7 + 96) = 0uLL;
        *(_OWORD *)(v7 + 112) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)(v7 + 48) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        *(_OWORD *)(v7 + 80) = 0uLL;
        *(void *)(v7 + 56) = 3;
        *(unsigned char *)(v7 + 112) = 0;
        *(void *)(v7 + 120) = 3;
        *(void *)(v7 + 128) = 0;
        v7 += 136;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1E1E1E1E1E1E1E1) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    std::exception_ptr v14 = &v12[136 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[136 * v11];
    int v15 = &v14[136 * a2];
    do
    {
      *((_OWORD *)v14 + 6) = 0uLL;
      *((_OWORD *)v14 + 7) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *(_OWORD *)std::exception_ptr v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      *((_OWORD *)v14 + 5) = 0uLL;
      *((void *)v14 + 7) = 3;
      v14[112] = 0;
      *((void *)v14 + 15) = 3;
      *((void *)v14 + 16) = 0;
      v14 += 136;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::style_transfer::st_example>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::style_transfer::st_example>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_22427485C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::style_transfer::st_example>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::style_transfer::st_example>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>,std::reverse_iterator<turi::style_transfer::st_example*>,std::reverse_iterator<turi::style_transfer::st_example*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>,std::reverse_iterator<turi::style_transfer::st_example*>,std::reverse_iterator<turi::style_transfer::st_example*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v21 = a6;
  *((void *)&v21 + 1) = a7;
  long long v20 = v21;
  v18[0] = a1;
  v18[1] = &v20;
  v18[2] = &v21;
  if (a3 == a5)
  {
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 128) = 0;
      long long v10 = *(_OWORD *)(a3 + v7 - 136);
      *(void *)(v9 - 128) = 0;
      *(_OWORD *)(v8 - 136) = v10;
      *(void *)(v9 - 136) = 0;
      long long v11 = *(_OWORD *)(a3 + v7 - 120);
      long long v12 = *(_OWORD *)(a3 + v7 - 104);
      *(_OWORD *)(v8 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(_OWORD *)(v8 - 104) = v12;
      *(_OWORD *)(v8 - 120) = v11;
      *(void *)(v8 - 64) = 0;
      long long v13 = *(_OWORD *)(a3 + v7 - 72);
      *(void *)(v9 - 64) = 0;
      *(_OWORD *)(v8 - 72) = v13;
      *(void *)(v9 - 72) = 0;
      long long v14 = *(_OWORD *)(a3 + v7 - 56);
      long long v15 = *(_OWORD *)(a3 + v7 - 40);
      *(_OWORD *)(v8 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v15;
      *(_OWORD *)(v8 - 56) = v14;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      v7 -= 136;
    }
    while (a3 + v7 != a5);
    *((void *)&v21 + 1) = a7 + v7;
    uint64_t v16 = v21;
  }
  char v19 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v18);
  return v16;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::style_transfer::st_example>,std::reverse_iterator<turi::style_transfer::st_example*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 72));
    boost::detail::shared_count::~shared_count((atomic_uint **)(v1 + 8));
    v1 += 136;
  }
}

uint64_t std::__split_buffer<turi::style_transfer::st_example>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<turi::style_transfer::st_example>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    boost::detail::shared_count::~shared_count((atomic_uint **)(i - 64));
    boost::detail::shared_count::~shared_count((atomic_uint **)(i - 128));
  }
}

void *_tc_google::protobuf::Arena::thread_cache(_tc_google::protobuf::Arena *this)
{
  {
    operator new();
  }
  uint64_t v1 = (pthread_key_t *)_tc_google::protobuf::Arena::thread_cache(void)::thread_cache_;
  return _tc_google::protobuf::internal::ThreadLocalStorage<_tc_google::protobuf::Arena::ThreadCache>::Get(v1);
}

void sub_224274B88(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

void *_tc_google::protobuf::internal::ThreadLocalStorage<_tc_google::protobuf::Arena::ThreadCache>::Get(pthread_key_t *a1)
{
  uint64_t v1 = pthread_getspecific(*a1);
  if (!v1) {
    operator new();
  }
  return v1;
}

void *_tc_google::protobuf::Arena::NewBlock(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  if (a3)
  {
    if (2 * *(void *)(a3 + 24) >= a6) {
      a5 = a6;
    }
    else {
      a5 = 2 * *(void *)(a3 + 24);
    }
  }
  if (a4 >= 0xFFFFFFFFFFFFFFE0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/arena.cc", 133);
    long long v10 = _tc_google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (n) <= (std::numeric_limits<size_t>::max() - kHeaderSize): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v14, (_tc_google::protobuf::internal::LogMessage *)v10);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  unint64_t v11 = a4 + 32;
  if (a5 <= a4 + 32) {
    unint64_t v12 = a4 + 32;
  }
  else {
    unint64_t v12 = a5;
  }
  uint64_t result = (void *)(*(uint64_t (**)(unint64_t))(a1 + 96))(v12);
  result[2] = v11;
  result[3] = v12;
  *uint64_t result = a2;
  return result;
}

void sub_224274CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::Arena::AddBlock(uint64_t a1, void *a2)
{
  uint64_t v4 = (pthread_mutex_t **)(a1 + 48);
  _tc_google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)(a1 + 48));
  a2[1] = *(void *)(a1 + 8);
  atomic_store((unint64_t)a2, (unint64_t *)(a1 + 8));
  uint64_t v5 = a2[3];
  if (v5 != a2[2])
  {
    atomic_store((unint64_t)a2, (unint64_t *)(a1 + 16));
    uint64_t v5 = a2[3];
  }
  *(void *)(a1 + 24) += v5;
  _tc_google::protobuf::internal::Mutex::Unlock(v4);
}

void *_tc_google::protobuf::Arena::AddListNode(_tc_google::protobuf::Arena *this, void *a2, void (*a3)(void *))
{
  uint64_t result = _tc_google::protobuf::Arena::AllocateAligned(this, 0, 24);
  *uint64_t result = a2;
  result[1] = a3;
  uint64_t v7 = (unint64_t *)((char *)this + 32);
  do
    unint64_t v8 = __ldxr(v7);
  while (__stxr((unint64_t)result, v7));
  result[2] = v8;
  return result;
}

void *_tc_google::protobuf::Arena::AllocateAligned(_tc_google::protobuf::Arena *this, const std::type_info *a2, uint64_t a3)
{
  std::exception_ptr v3 = (unint64_t *)this;
  unint64_t v4 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*((void *)this + 7))
  {
    unint64_t v11 = (uint64_t (*)(const std::type_info *, unint64_t))*((void *)this + 17);
    if (v11) {
      this = (_tc_google::protobuf::Arena *)v11(a2, v4);
    }
  }
  uint64_t v5 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(this);
  if (*(void *)v5 == *v3
    && (uint64_t v5 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(v5), *((void *)v5 + 1)))
  {
    uint64_t v6 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(v5);
    if (*(void *)(*((void *)v6 + 1) + 24) - *(void *)(*((void *)v6 + 1) + 16) >= v4)
    {
      uint64_t v7 = (void **)*((void *)_tc_google::protobuf::Arena::thread_cache(v6) + 1);
      unint64_t v8 = v7[2];
LABEL_12:
      v7[2] = &v8[v4];
      return &v8[(void)v7];
    }
  }
  else
  {
    uint64_t v9 = _tc_google::protobuf::Arena::thread_cache(v5);
    uint64_t v7 = (void **)atomic_load(v3 + 2);
    if (v7)
    {
      if (*v7 == v9)
      {
        unint64_t v8 = v7[2];
        if ((unsigned char *)v7[3] - v8 >= v4) {
          goto LABEL_12;
        }
      }
    }
  }
  return _tc_google::protobuf::Arena::SlowAlloc((_tc_google::protobuf::Arena *)v3, v4);
}

void *_tc_google::protobuf::Arena::SlowAlloc(_tc_google::protobuf::Arena *this, unint64_t a2)
{
  unint64_t v4 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(this);
  uint64_t v5 = (_tc_google::protobuf::Arena **)atomic_load((unint64_t *)this + 1);
  if (!v5) {
    goto LABEL_6;
  }
  while (*v5 != v4)
  {
    uint64_t v5 = (_tc_google::protobuf::Arena **)v5[1];
    if (!v5) {
      goto LABEL_6;
    }
  }
  if (v5[3] - v5[2] >= a2)
  {
    unint64_t v11 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(v4);
    *((void *)v11 + 1) = v5;
    uint64_t v12 = *(void *)this;
    *(void *)_tc_google::protobuf::Arena::thread_cache(v11) = v12;
    *((void *)this + 2) = v5;
    long long v13 = v5[2];
    v5[2] = (_tc_google::protobuf::Arena *)((char *)v13 + a2);
    return (void *)((char *)v13 + (void)v5);
  }
  else
  {
LABEL_6:
    uint64_t v6 = _tc_google::protobuf::Arena::NewBlock((uint64_t)this, (uint64_t)v4, (uint64_t)v5, a2, *((void *)this + 8), *((void *)this + 9));
    _tc_google::protobuf::Arena::AddBlock((uint64_t)this, v6);
    unint64_t v8 = (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::thread_cache(v7);
    *((void *)v8 + 1) = v6;
    uint64_t v9 = *(void *)this;
    *(void *)_tc_google::protobuf::Arena::thread_cache(v8) = v9;
    return v6 + 4;
  }
}

uint64_t _tc_google::protobuf::internal::ThreadLocalStorage<_tc_google::protobuf::Arena::ThreadCache>::Delete(uint64_t result)
{
  if (result) {
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void _tc_google::protobuf::internal::DeleteEmptyString(_tc_google::protobuf::internal *this)
{
  if (byte_26808D530)
  {
    byte_26808D530 = 0;
    if (byte_26808D52F < 0) {
      operator delete((void *)_tc_google::protobuf::internal::fixed_address_empty_string);
    }
  }
}

void _tc_google::protobuf::internal::InitEmptyString(_tc_google::protobuf::internal *this, void (*a2)(void))
{
  _tc_google::protobuf::internal::fixed_address_empty_string = 0;
  qword_26808D520 = 0;
  unk_26808D528 = 0;
  byte_26808D530 = 1;
  _tc_google::protobuf::internal::OnShutdown((_tc_google::protobuf::internal *)_tc_google::protobuf::internal::DeleteEmptyString, a2);
}

void _tc_google::protobuf::internal::InitProtobufDefaults(_tc_google::protobuf::internal *this)
{
  unint64_t v1 = atomic_load(&_tc_google::protobuf::internal::empty_string_once_init_);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = _tc_google::protobuf::internal::InitEmptyString;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&_tc_google::protobuf::internal::empty_string_once_init_, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_224275078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::io::CodedInputStream::~CodedInputStream(_tc_google::protobuf::io::CodedInputStream *this)
{
  if (*((void *)this + 2)) {
    _tc_google::protobuf::io::CodedInputStream::BackUpInputToCurrentPosition((uint64_t)this);
  }
}

uint64_t _tc_google::protobuf::io::CodedInputStream::BackUpInputToCurrentPosition(uint64_t this)
{
  if (*(_DWORD *)(this + 28) + *(_DWORD *)(this + 44) + *(_DWORD *)(this + 8) - *(_DWORD *)this >= 1)
  {
    uint64_t v1 = this;
    this = (*(uint64_t (**)(void))(**(void **)(this + 16) + 24))(*(void *)(this + 16));
    unsigned int v2 = *(_DWORD *)(v1 + 24) - *(_DWORD *)(v1 + 44) + *(void *)v1 - *(_DWORD *)(v1 + 8);
    *(void *)(v1 + 8) = *(void *)v1;
    *(_DWORD *)(v1 + 44) = 0;
    *(void *)(v1 + 24) = v2;
  }
  return this;
}

uint64_t _tc_google::protobuf::io::CodedInputStream::PushLimit(_tc_google::protobuf::io::CodedInputStream *this, int a2)
{
  uint64_t result = *((unsigned int *)this + 10);
  if ((a2 & 0x80000000) == 0)
  {
    int v4 = *((_DWORD *)this + 6);
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = *((int *)this + 11);
    int v7 = v4 - v6 + *(_DWORD *)this - v5;
    if ((v7 ^ 0x7FFFFFFF) >= a2 && (int)result - v7 > a2)
    {
      int v9 = v7 + a2;
      *((_DWORD *)this + 10) = v9;
      uint64_t v10 = v5 + v6;
      *((void *)this + 1) = v10;
      int v11 = *((_DWORD *)this + 12);
      if (v11 >= v9) {
        int v11 = v9;
      }
      BOOL v12 = __OFSUB__(v4, v11);
      int v13 = v4 - v11;
      if ((v13 < 0) ^ v12 | (v13 == 0)) {
        int v13 = 0;
      }
      else {
        *((void *)this + 1) = v10 - v13;
      }
      *((_DWORD *)this + 11) = v13;
    }
  }
  return result;
}

uint64_t _tc_google::protobuf::io::CodedInputStream::PopLimit(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  int v2 = *(_DWORD *)(this + 48);
  uint64_t v3 = *(void *)(this + 8) + *(int *)(this + 44);
  *(void *)(this + 8) = v3;
  if (v2 >= a2) {
    int v4 = a2;
  }
  else {
    int v4 = v2;
  }
  int v5 = *(_DWORD *)(this + 24);
  BOOL v6 = __OFSUB__(v5, v4);
  int v7 = v5 - v4;
  if ((v7 < 0) ^ v6 | (v7 == 0)) {
    int v7 = 0;
  }
  else {
    *(void *)(this + 8) = v3 - v7;
  }
  *(_DWORD *)(this + 44) = v7;
  *(unsigned char *)(this + 36) = 0;
  return this;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(_tc_google::protobuf::io::CodedInputStream *this, int a2)
{
  unsigned int v3 = _tc_google::protobuf::io::CodedInputStream::PushLimit(this, a2);
  uint64_t v4 = (*((_DWORD *)this + 13) - 1);
  *((_DWORD *)this + 13) = v4;
  return v3 | (unint64_t)(v4 << 32);
}

BOOL _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(_tc_google::protobuf::io::CodedInputStream *this, int a2)
{
  int v2 = *((unsigned __int8 *)this + 36);
  *((_DWORD *)this + 10) = a2;
  int v3 = *((_DWORD *)this + 12);
  uint64_t v4 = *((void *)this + 1) + *((int *)this + 11);
  *((void *)this + 1) = v4;
  if (v3 >= a2) {
    int v5 = a2;
  }
  else {
    int v5 = v3;
  }
  int v6 = *((_DWORD *)this + 6);
  BOOL v7 = __OFSUB__(v6, v5);
  int v8 = v6 - v5;
  if ((v8 < 0) ^ v7 | (v8 == 0)) {
    int v8 = 0;
  }
  else {
    *((void *)this + 1) = v4 - v8;
  }
  *((_DWORD *)this + 11) = v8;
  *((unsigned char *)this + 36) = 0;
  ++*((_DWORD *)this + 13);
  return v2 != 0;
}

uint64_t _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(_tc_google::protobuf::io::CodedInputStream *this)
{
  int v1 = *((_DWORD *)this + 10);
  if (v1 == 0x7FFFFFFF) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v1 - *((_DWORD *)this + 6) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this);
  }
}

uint64_t _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit(_tc_google::protobuf::io::CodedInputStream *this)
{
  int v1 = *((_DWORD *)this + 12);
  if (v1 == 0x7FFFFFFF) {
    return 0xFFFFFFFFLL;
  }
  else {
    return (v1 - *((_DWORD *)this + 6) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this);
  }
}

void _tc_google::protobuf::io::CodedInputStream::PrintTotalBytesLimitError(_tc_google::protobuf::io::CodedInputStream *this)
{
  _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/coded_stream.cc", 193);
  int v2 = _tc_google::protobuf::internal::LogMessage::operator<<(v6, "A protocol message was rejected because it was too big (more than ");
  int v3 = _tc_google::protobuf::internal::LogMessage::operator<<(v2, *((_DWORD *)this + 12));
  uint64_t v4 = _tc_google::protobuf::internal::LogMessage::operator<<(v3, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.");
  _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v5, (_tc_google::protobuf::internal::LogMessage *)v4);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
}

void sub_2242753A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::io::CodedInputStream::Skip(_tc_google::protobuf::io::CodedInputStream *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 1) - *(void *)this;
  BOOL v5 = __OFSUB__(a2, v4);
  int v6 = a2 - v4;
  if ((v6 < 0) ^ v5 | (v6 == 0))
  {
    *(void *)this = v3 + a2;
    return 1;
  }
  if (*((int *)this + 11) >= 1)
  {
    uint64_t v7 = 0;
    *(void *)this = v3 + (int)v4;
    return v7;
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  int v8 = *((_DWORD *)this + 10);
  if (*((_DWORD *)this + 12) < v8) {
    int v8 = *((_DWORD *)this + 12);
  }
  int v9 = *((_DWORD *)this + 6);
  uint64_t v10 = (v8 - v9);
  if ((int)v10 < v6)
  {
    if ((int)v10 >= 1)
    {
      *((_DWORD *)this + 6) = v8;
      (*(void (**)(void, uint64_t))(**((void **)this + 2) + 32))(*((void *)this + 2), v10);
    }
    return 0;
  }
  *((_DWORD *)this + 6) = v9 + v6;
  BOOL v12 = *(uint64_t (**)(void))(**((void **)this + 2) + 32);
  return v12();
}

uint64_t _tc_google::protobuf::io::CodedInputStream::Refresh(_tc_google::protobuf::io::CodedInputStream *this)
{
  int v2 = *((_DWORD *)this + 11);
  if (v2 > 0 || *((int *)this + 7) > 0 || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))
  {
    int v3 = *((_DWORD *)this + 6) - v2;
    int v4 = *((_DWORD *)this + 12);
    if (v3 >= v4 && v4 != *((_DWORD *)this + 10)) {
      _tc_google::protobuf::io::CodedInputStream::PrintTotalBytesLimitError(this);
    }
    return 0;
  }
  else
  {
    uint64_t v23 = 0;
    int v22 = 0;
    uint64_t v7 = *((void *)this + 2);
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(void *)v7 + 16))(v7, &v23, &v22);
      if (!v5)
      {
        *(void *)this = 0;
        *((void *)this + 1) = 0;
        return v5;
      }
      int v8 = v22;
    }
    while (!v22);
    uint64_t v9 = v23 + v22;
    *(void *)this = v23;
    *((void *)this + 1) = v9;
    if (v8 < 0)
    {
      _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/coded_stream.cc", 599);
      uint64_t v10 = _tc_google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (buffer_size) >= (0): ");
      _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, (_tc_google::protobuf::internal::LogMessage *)v10);
      _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
      int v8 = v22;
    }
    int v11 = *((_DWORD *)this + 6);
    int v12 = v11 - (v8 ^ 0x7FFFFFFF);
    if (v11 <= (v8 ^ 0x7FFFFFFF))
    {
      int v14 = v8 + v11;
      uint64_t v13 = *((void *)this + 1);
    }
    else
    {
      *((_DWORD *)this + 7) = v12;
      uint64_t v13 = *((void *)this + 1) - v12;
      *((void *)this + 1) = v13;
      int v14 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 6) = v14;
    int v15 = *((_DWORD *)this + 10);
    uint64_t v16 = v13 + *((int *)this + 11);
    *((void *)this + 1) = v16;
    int v17 = *((_DWORD *)this + 12);
    if (v17 >= v15) {
      int v17 = v15;
    }
    BOOL v18 = __OFSUB__(v14, v17);
    int v19 = v14 - v17;
    if ((v19 < 0) ^ v18 | (v19 == 0)) {
      int v19 = 0;
    }
    else {
      *((void *)this + 1) = v16 - v19;
    }
    *((_DWORD *)this + 11) = v19;
  }
  return v5;
}

void sub_224275660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadRaw(_tc_google::protobuf::io::CodedInputStream *this, char *__dst, int a3)
{
  while (1)
  {
    int v6 = a3;
    uint64_t v7 = *(const void **)this;
    uint64_t v8 = *((void *)this + 1) - *(void *)this;
    BOOL v9 = __OFSUB__(a3, v8);
    a3 -= v8;
    if ((a3 < 0) ^ v9 | (a3 == 0)) {
      break;
    }
    memcpy(__dst, v7, (int)v8);
    __dst += (int)v8;
    *(void *)this += (int)v8;
    if ((_tc_google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0) {
      return v6 <= (int)v8;
    }
  }
  memcpy(__dst, v7, v6);
  *(void *)this += v6;
  return v6 <= (int)v8;
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadStringFallback(_tc_google::protobuf::io::CodedInputStream *this, std::string *a2, std::string::size_type __requested_capacity)
{
  int v3 = __requested_capacity;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if (a2->__r_.__value_.__l.__size_)
    {
      *a2->__r_.__value_.__l.__data_ = 0;
      a2->__r_.__value_.__l.__size_ = 0;
    }
  }
  else if (*((unsigned char *)&a2->__r_.__value_.__s + 23))
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&a2->__r_.__value_.__s + 23) = 0;
  }
  int v6 = *((_DWORD *)this + 12);
  if (v6 >= *((_DWORD *)this + 10)) {
    int v6 = *((_DWORD *)this + 10);
  }
  if (v6 != 0x7FFFFFFF)
  {
    int v7 = v6 - *((_DWORD *)this + 6) + *((_DWORD *)this + 11) + *((_DWORD *)this + 2) - *(_DWORD *)this;
    BOOL v8 = v7 < (int)__requested_capacity || (int)__requested_capacity < 1;
    if (!v8 && v7 >= 1) {
      std::string::reserve(a2, __requested_capacity);
    }
  }
  while (1)
  {
    int v10 = v3;
    int v11 = *(const std::string::value_type **)this;
    uint64_t v12 = *((void *)this + 1) - *(void *)this;
    BOOL v13 = __OFSUB__(v3, v12);
    v3 -= v12;
    if ((v3 < 0) ^ v13 | (v3 == 0)) {
      break;
    }
    if (v12)
    {
      std::string::append(a2, v11, (int)v12);
      int v11 = *(const std::string::value_type **)this;
    }
    *(void *)this = &v11[(int)v12];
    if ((_tc_google::protobuf::io::CodedInputStream::Refresh(this) & 1) == 0) {
      return v10 <= (int)v12;
    }
  }
  std::string::append(a2, v11, v10);
  *(void *)this += v10;
  return v10 <= (int)v12;
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(unsigned int **this, unsigned int *a2)
{
  int v3 = *this;
  if (((*((_DWORD *)this + 2) - *this) & 0xFFFFFFFC) != 0)
  {
    *this = v3 + 1;
  }
  else
  {
    int v3 = (unsigned int *)__dst;
    BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)this, __dst, 4);
    if (!result) {
      return result;
    }
  }
  *a2 = *v3;
  return 1;
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(unint64_t **this, unint64_t *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v3 = *this;
  if (((*((_DWORD *)this + 2) - *this) & 0xFFFFFFF8) != 0)
  {
    *this = v3 + 1;
  }
  else
  {
    int v3 = (unint64_t *)v5;
    BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)this, v5, 8);
    if (!result) {
      return result;
    }
  }
  *a2 = *v3;
  return 1;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(_tc_google::protobuf::io::CodedInputStream *this)
{
  int v2 = *(char **)this;
  unint64_t v1 = *((void *)this + 1);
  if ((int)(v1 - *(void *)this) <= 9 && (v1 <= (unint64_t)v2 || *(char *)(v1 - 1) < 0))
  {
    unint64_t v9 = 0;
    _tc_google::protobuf::io::CodedInputStream::ReadVarint64Slow((char **)this, &v9);
    return v9;
  }
  else
  {
    int v3 = (unsigned __int8 *)(v2 + 1);
    unsigned int v4 = *v2;
    if (*v2 < 0)
    {
      unsigned int v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        unsigned int v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          unsigned int v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            unsigned int v5 = v2[4];
            if (v2[4] < 0)
            {
              unsigned int v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                unsigned int v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  unsigned int v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    uint64_t v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0) {
                        return 0;
                      }
                      int v3 = (unsigned __int8 *)(v2 + 10);
                      uint64_t v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      int v3 = (unsigned __int8 *)(v2 + 9);
                    }
                  }
                  else
                  {
                    uint64_t v6 = 0;
                    int v3 = (unsigned __int8 *)(v2 + 8);
                  }
                }
                else
                {
                  uint64_t v6 = 0;
                  int v3 = (unsigned __int8 *)(v2 + 7);
                }
              }
              else
              {
                uint64_t v6 = 0;
                int v3 = (unsigned __int8 *)(v2 + 6);
              }
            }
            else
            {
              uint64_t v6 = 0;
              int v3 = (unsigned __int8 *)(v2 + 5);
            }
          }
          else
          {
            unsigned int v5 = 0;
            uint64_t v6 = 0;
            int v3 = (unsigned __int8 *)(v2 + 4);
          }
        }
        else
        {
          unsigned int v5 = 0;
          uint64_t v6 = 0;
          int v3 = (unsigned __int8 *)(v2 + 3);
        }
      }
      else
      {
        unsigned int v5 = 0;
        uint64_t v6 = 0;
        int v3 = (unsigned __int8 *)(v2 + 2);
      }
    }
    else
    {
      unsigned int v5 = 0;
      uint64_t v6 = 0;
    }
    unint64_t v7 = v4 | ((unint64_t)v5 << 28) | (v6 << 56);
    *(void *)this = v3;
  }
  return v7;
}

uint64_t _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(_tc_google::protobuf::io::CodedInputStream *this, int a2)
{
  unint64_t v3 = *(void *)this;
  unint64_t v2 = *((void *)this + 1);
  if ((int)(v2 - *(void *)this) <= 9 && (v2 <= v3 || *(char *)(v2 - 1) < 0))
  {
    uint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v7 & 1) == 0) {
      return -1;
    }
  }
  else
  {
    unsigned int v4 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
    if (*(char *)(v3 + 1) < 0)
    {
      unsigned int v4 = v4 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
      if (*(char *)(v3 + 2) < 0)
      {
        unsigned int v4 = v4 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
        if (*(char *)(v3 + 3) < 0)
        {
          int v8 = *(char *)(v3 + 4);
          unsigned int v4 = v4 + (v8 << 28) - 0x10000000;
          if (v8 < 0)
          {
            uint64_t v9 = 0;
            while (*(char *)(v3 + v9 + 5) < 0)
            {
              ++v9;
              uint64_t Varint64Fallback = -1;
              if (v9 == 5) {
                return Varint64Fallback;
              }
            }
            uint64_t v5 = v3 + v9 + 6;
          }
          else
          {
            uint64_t v5 = v3 + 5;
          }
        }
        else
        {
          uint64_t v5 = v3 + 4;
        }
      }
      else
      {
        uint64_t v5 = v3 + 3;
      }
    }
    else
    {
      uint64_t v5 = v3 + 2;
    }
    *(void *)this = v5;
    return v4;
  }
  return Varint64Fallback;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(_tc_google::protobuf::io::CodedInputStream *this)
{
  unint64_t v2 = *(char **)this;
  unint64_t v1 = *((void *)this + 1);
  if ((int)(v1 - *(void *)this) > 9 || v1 > (unint64_t)v2 && (*(char *)(v1 - 1) & 0x80000000) == 0)
  {
    unint64_t v3 = (unsigned __int8 *)(v2 + 1);
    unsigned int v4 = *v2;
    if (*v2 < 0)
    {
      unsigned int v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        unsigned int v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          unsigned int v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            unsigned int v5 = v2[4];
            if (v2[4] < 0)
            {
              unsigned int v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                unsigned int v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  unsigned int v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    uint64_t v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0) {
                        return 0xFFFFFFFFLL;
                      }
                      unint64_t v3 = (unsigned __int8 *)(v2 + 10);
                      uint64_t v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      unint64_t v3 = (unsigned __int8 *)(v2 + 9);
                    }
                  }
                  else
                  {
                    uint64_t v6 = 0;
                    unint64_t v3 = (unsigned __int8 *)(v2 + 8);
                  }
                }
                else
                {
                  uint64_t v6 = 0;
                  unint64_t v3 = (unsigned __int8 *)(v2 + 7);
                }
              }
              else
              {
                uint64_t v6 = 0;
                unint64_t v3 = (unsigned __int8 *)(v2 + 6);
              }
            }
            else
            {
              uint64_t v6 = 0;
              unint64_t v3 = (unsigned __int8 *)(v2 + 5);
            }
          }
          else
          {
            unsigned int v5 = 0;
            uint64_t v6 = 0;
            unint64_t v3 = (unsigned __int8 *)(v2 + 4);
          }
        }
        else
        {
          unsigned int v5 = 0;
          uint64_t v6 = 0;
          unint64_t v3 = (unsigned __int8 *)(v2 + 3);
        }
      }
      else
      {
        unsigned int v5 = 0;
        uint64_t v6 = 0;
        unint64_t v3 = (unsigned __int8 *)(v2 + 2);
      }
    }
    else
    {
      unsigned int v5 = 0;
      uint64_t v6 = 0;
    }
    unint64_t v10 = v4 | ((unint64_t)v5 << 28);
    if (!((v10 | (v6 << 56)) >> 31))
    {
      *(void *)this = v3;
      return v10;
    }
    return 0xFFFFFFFFLL;
  }
  unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
  if ((Varint64Fallback & 0xFFFFFFFF80000000) != 0 || (v8 & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return Varint64Fallback;
  }
}

unint64_t _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(_tc_google::protobuf::io::CodedInputStream *this)
{
  unint64_t v2 = *(char **)this;
  unint64_t v3 = *((void *)this + 1);
  if (*(void *)this != v3)
  {
LABEL_4:
    if ((unint64_t)v2 >= v3 || *v2 < 0)
    {
      unint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      if ((v5 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      unint64_t result = *v2;
      *(void *)this = v2 + 1;
    }
    return result;
  }
  if (_tc_google::protobuf::io::CodedInputStream::Refresh(this))
  {
    unint64_t v2 = *(char **)this;
    unint64_t v3 = *((void *)this + 1);
    goto LABEL_4;
  }
  int v6 = *((_DWORD *)this + 12);
  unint64_t result = 0;
  BOOL v7 = *((_DWORD *)this + 6) - *((_DWORD *)this + 11) < v6 || *((_DWORD *)this + 10) == v6;
  *((unsigned char *)this + 36) = v7;
  return result;
}

unint64_t _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(_tc_google::protobuf::io::CodedInputStream *this, uint64_t a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  int v4 = v2 - *(void *)this;
  if (v4 > 9)
  {
LABEL_4:
    if (a2)
    {
      uint64_t v5 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
      if (*(char *)(v3 + 1) < 0)
      {
        uint64_t v5 = v5 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
        if (*(char *)(v3 + 2) < 0)
        {
          uint64_t v5 = v5 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
          if (*(char *)(v3 + 3) < 0)
          {
            int v10 = *(char *)(v3 + 4);
            uint64_t v5 = (v5 + (v10 << 28) - 0x10000000);
            if (v10 < 0)
            {
              uint64_t v11 = 0;
              while (*(char *)(v3 + v11 + 5) < 0)
              {
                a2 = 0;
                if (++v11 == 5) {
                  return a2;
                }
              }
              uint64_t v6 = v3 + v11 + 6;
            }
            else
            {
              uint64_t v6 = v3 + 5;
            }
          }
          else
          {
            uint64_t v6 = v3 + 4;
          }
        }
        else
        {
          uint64_t v6 = v3 + 3;
        }
      }
      else
      {
        uint64_t v6 = v3 + 2;
      }
      *(void *)this = v6;
      return v5;
    }
    else
    {
      *(void *)this = v3 + 1;
    }
    return a2;
  }
  if (v4 >= 1)
  {
    if ((*(char *)(v2 - 1) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    return _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  }
  if (v4) {
    return _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  }
  int v8 = *((_DWORD *)this + 11);
  int v9 = *((_DWORD *)this + 6);
  if (v8 <= 0 && v9 != *((_DWORD *)this + 10)) {
    return _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  }
  if (v9 - v8 >= *((_DWORD *)this + 12)) {
    return _tc_google::protobuf::io::CodedInputStream::ReadTagSlow(this);
  }
  a2 = 0;
  *((unsigned char *)this + 36) = 1;
  return a2;
}

BOOL _tc_google::protobuf::io::CodedInputStream::ReadVarint64Slow(char **this, unint64_t *a2)
{
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  while (1)
  {
    BOOL v6 = v4 != 10;
    if (v4 == 10) {
      break;
    }
    while (1)
    {
      BOOL v7 = *this;
      if (*this != this[1]) {
        break;
      }
      if ((_tc_google::protobuf::io::CodedInputStream::Refresh((_tc_google::protobuf::io::CodedInputStream *)this) & 1) == 0)
      {
        unint64_t v5 = 0;
        BOOL v6 = 0;
        goto LABEL_7;
      }
    }
    char v8 = *v7;
    v5 |= (unint64_t)(*v7 & 0x7F) << (7 * v4);
    *this = v7 + 1;
    ++v4;
    if ((v8 & 0x80) == 0) {
      goto LABEL_7;
    }
  }
  unint64_t v5 = 0;
LABEL_7:
  *a2 = v5;
  return v6;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::Refresh(_tc_google::protobuf::io::CodedOutputStream *this)
{
  uint64_t v4 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t *, char *))(**(void **)this + 16))(*(void *)this, &v4, (char *)this + 16);
  if (result)
  {
    uint64_t v3 = v4;
    *((_DWORD *)this + 5) += *((_DWORD *)this + 4);
  }
  else
  {
    uint64_t v3 = 0;
    *((_DWORD *)this + 4) = 0;
    *((unsigned char *)this + 24) = 1;
  }
  *((void *)this + 1) = v3;
  return result;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::CodedOutputStream(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 23) = 0;
  _tc_google::protobuf::io::CodedOutputStream::Refresh((_tc_google::protobuf::io::CodedOutputStream *)a1);
  *(unsigned char *)(a1 + 24) = 0;
  return a1;
}

int *_tc_google::protobuf::io::CodedOutputStream::Trim(int *this)
{
  if (this[4] >= 1)
  {
    unint64_t v1 = this;
    this = (int *)(*(uint64_t (**)(void))(**(void **)this + 24))(*(void *)this);
    int v2 = v1[5] - v1[4];
    v1[4] = 0;
    v1[5] = v2;
    *((void *)v1 + 1) = 0;
  }
  return this;
}

void _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream(_tc_google::protobuf::io::CodedOutputStream *this)
{
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteRaw(_tc_google::protobuf::io::CodedOutputStream *this, char *__src, int a3)
{
  while (1)
  {
    size_t v6 = *((int *)this + 4);
    BOOL v7 = (void *)*((void *)this + 1);
    if ((int)v6 >= a3) {
      break;
    }
    memcpy(v7, __src, v6);
    uint64_t v8 = *((int *)this + 4);
    a3 -= v8;
    __src += v8;
    uint64_t result = _tc_google::protobuf::io::CodedOutputStream::Refresh(this);
    if ((result & 1) == 0) {
      return result;
    }
  }
  uint64_t result = (uint64_t)memcpy(v7, __src, a3);
  *((void *)this + 1) += a3;
  *((_DWORD *)this + 4) -= a3;
  return result;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteAliasedRaw(_tc_google::protobuf::io::CodedOutputStream *this, char *__src, uint64_t a3)
{
  if (*((_DWORD *)this + 4) <= (int)a3)
  {
    _tc_google::protobuf::io::CodedOutputStream::Trim((int *)this);
    *((_DWORD *)this + 5) += a3;
    uint64_t result = (*(uint64_t (**)(void, char *, uint64_t))(**(void **)this + 40))(*(void *)this, __src, a3);
    *((unsigned char *)this + 24) |= result ^ 1;
  }
  else
  {
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, __src, a3);
  }
  return result;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteLittleEndian32(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 16) < 4u)
  {
    int __src = a2;
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw((_tc_google::protobuf::io::CodedOutputStream *)this, (char *)&__src, 4);
  }
  else
  {
    **(_DWORD **)(this + 8) = a2;
    *(void *)(this + 8) += 4;
    *(_DWORD *)(this + 16) -= 4;
  }
  return this;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteLittleEndian64(uint64_t this, uint64_t a2)
{
  v2[1] = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(this + 16) < 8u)
  {
    v2[0] = a2;
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw((_tc_google::protobuf::io::CodedOutputStream *)this, (char *)v2, 8);
  }
  else
  {
    **(void **)(this + 8) = a2;
    *(void *)(this + 8) += 8;
    *(_DWORD *)(this + 16) -= 8;
  }
  return this;
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(_tc_google::protobuf::io::CodedOutputStream *this, unsigned int a2)
{
  int v2 = __src;
  if (a2 >= 0x80)
  {
    unsigned int v3 = a2;
    do
    {
      *v2++ = v3 | 0x80;
      a2 = v3 >> 7;
      unsigned int v4 = v3 >> 14;
      v3 >>= 7;
    }
    while (v4);
  }
  char *v2 = a2;
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, __src, v2 - (&vars0 - 5) + 1);
}

uint64_t _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(_tc_google::protobuf::io::CodedOutputStream *this, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = __src;
  if (a2 >= 0x80)
  {
    unint64_t v3 = a2;
    do
    {
      *v2++ = v3 | 0x80;
      a2 = v3 >> 7;
      unint64_t v4 = v3 >> 14;
      v3 >>= 7;
    }
    while (v4);
  }
  char *v2 = a2;
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, __src, v2 - __src + 1);
}

char *_tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(const void **a1, unsigned char *a2)
{
  if (*((char *)a1 + 23) >= 0) {
    unsigned int v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unsigned int v3 = *((_DWORD *)a1 + 2);
  }
  if (v3 < 0x80)
  {
    LOBYTE(v4) = v3;
  }
  else
  {
    do
    {
      *a2++ = v3 | 0x80;
      unsigned int v4 = v3 >> 7;
      unsigned int v5 = v3 >> 14;
      v3 >>= 7;
    }
    while (v5);
  }
  *a2 = v4;
  size_t v6 = a2 + 1;
  int v7 = *((char *)a1 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *a1;
  }
  if (v7 >= 0) {
    LODWORD(v9) = *((unsigned __int8 *)a1 + 23);
  }
  else {
    int v9 = a1[1];
  }
  memcpy(v6, v8, (int)v9);
  return &v6[(int)v9];
}

uint64_t _tc_google::protobuf::io::ZeroCopyOutputStream::WriteAliasedRaw(_tc_google::protobuf::io::ZeroCopyOutputStream *this, const void *a2)
{
  _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream.cc", 50);
  int v2 = _tc_google::protobuf::internal::LogMessage::operator<<(v5, "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.");
  _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (_tc_google::protobuf::internal::LogMessage *)v2);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  return 0;
}

void sub_224276530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *_tc_google::protobuf::io::OstreamOutputStream::OstreamOutputStream(void *a1, uint64_t a2, int a3)
{
  *a1 = &unk_26D7766D0;
  a1[1] = &unk_26D776718;
  a1[2] = a2;
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor((uint64_t)(a1 + 3), (uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_2242765BC(_Unwind_Exception *a1)
{
  turi::neural_net::float_scalar::~float_scalar(v2);
  turi::neural_net::float_scalar::~float_scalar(v1);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::io::OstreamOutputStream::~OstreamOutputStream(_tc_google::protobuf::io::OstreamOutputStream *this)
{
  *(void *)this = &unk_26D7766D0;
  int v2 = (_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24);
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::Flush((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24));
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(v2);
  turi::neural_net::float_scalar::~float_scalar((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 8));
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  uint64_t vars8;

  _tc_google::protobuf::io::OstreamOutputStream::~OstreamOutputStream(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t _tc_google::protobuf::io::OstreamOutputStream::Next(_tc_google::protobuf::io::OstreamOutputStream *this, void **a2, int *a3)
{
  return _tc_google::protobuf::io::CopyingOutputStreamAdaptor::Next((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24), a2, a3);
}

void _tc_google::protobuf::io::OstreamOutputStream::BackUp(_tc_google::protobuf::io::OstreamOutputStream *this, int a2)
{
}

uint64_t _tc_google::protobuf::io::OstreamOutputStream::ByteCount(_tc_google::protobuf::io::OstreamOutputStream *this)
{
  return _tc_google::protobuf::io::CopyingOutputStreamAdaptor::ByteCount((_tc_google::protobuf::io::OstreamOutputStream *)((char *)this + 24));
}

void _tc_google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream::~CopyingOstreamOutputStream(_tc_google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x22A614FA0);
}

BOOL _tc_google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream::Write(_tc_google::protobuf::io::OstreamOutputStream::CopyingOstreamOutputStream *this, const void *a2)
{
  return *(_DWORD *)(*((void *)this + 1) + *(void *)(**((void **)this + 1) - 24) + 32) == 0;
}

uint64_t _tc_google::protobuf::io::ArrayOutputStream::ArrayOutputStream(uint64_t this, void *a2, int a3, int a4)
{
  *(void *)this = &unk_26D776770;
  *(void *)(this + 8) = a2;
  if (a4 <= 0) {
    int v4 = a3;
  }
  else {
    int v4 = a4;
  }
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = v4;
  *(void *)(this + 24) = 0;
  return this;
}

void _tc_google::protobuf::io::ArrayOutputStream::~ArrayOutputStream(_tc_google::protobuf::io::ArrayOutputStream *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x22A614FA0);
}

BOOL _tc_google::protobuf::io::ArrayOutputStream::Next(_tc_google::protobuf::io::ArrayOutputStream *this, void **a2, int *a3)
{
  uint64_t v3 = *((int *)this + 6);
  int v4 = *((_DWORD *)this + 4);
  if ((int)v3 >= v4)
  {
    *((_DWORD *)this + 7) = 0;
  }
  else
  {
    int v5 = v4 - v3;
    if (v4 - (int)v3 >= *((_DWORD *)this + 5)) {
      int v5 = *((_DWORD *)this + 5);
    }
    *((_DWORD *)this + 7) = v5;
    *a2 = (void *)(*((void *)this + 1) + v3);
    *a3 = v5;
    *((_DWORD *)this + 6) += *((_DWORD *)this + 7);
  }
  return (int)v3 < v4;
}

void _tc_google::protobuf::io::ArrayOutputStream::BackUp(_tc_google::protobuf::io::ArrayOutputStream *this, int a2)
{
  int v4 = *((_DWORD *)this + 7);
  if (v4 <= 0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 138);
    int v5 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (last_returned_size_) > (0): ");
    size_t v6 = _tc_google::protobuf::internal::LogMessage::operator<<(v5, "BackUp() can only be called after a successful Next().");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (_tc_google::protobuf::internal::LogMessage *)v6);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    int v4 = *((_DWORD *)this + 7);
  }
  if (v4 < a2)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 140);
    int v7 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) <= (last_returned_size_): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (_tc_google::protobuf::internal::LogMessage *)v7);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  if (a2 < 0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 141);
    uint64_t v8 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (count) >= (0): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (_tc_google::protobuf::internal::LogMessage *)v8);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  *((void *)this + 3) = (*((_DWORD *)this + 6) - a2);
}

void sub_224276904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::io::ArrayOutputStream::ByteCount(_tc_google::protobuf::io::ArrayOutputStream *this)
{
  return *((int *)this + 6);
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::CopyingOutputStreamAdaptor(uint64_t result, uint64_t a2, int a3)
{
  *(void *)uint64_t result = &unk_26D7767B8;
  *(void *)(result + 8) = a2;
  *(_WORD *)(result + 16) = 0;
  if (a3 <= 0) {
    int v3 = 0x2000;
  }
  else {
    int v3 = a3;
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = v3;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void _tc_google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  *(void *)this = &unk_26D7767B8;
  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(this);
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    MEMORY[0x22A614F80](v3, 0x1000C8077774924);
  }
  turi::neural_net::float_scalar::~float_scalar(this);
}

{
  uint64_t vars8;

  _tc_google::protobuf::io::CopyingOutputStreamAdaptor::~CopyingOutputStreamAdaptor(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  if (*((unsigned char *)this + 17)) {
    return 0;
  }
  if (!*((_DWORD *)this + 11)) {
    return 1;
  }
  if ((*(unsigned int (**)(void, void))(**((void **)this + 1) + 16))(*((void *)this + 1), *((void *)this + 4)))
  {
    *((void *)this + 3) += *((int *)this + 11);
    *((_DWORD *)this + 11) = 0;
    return 1;
  }
  *((unsigned char *)this + 17) = 1;
  *((_DWORD *)this + 11) = 0;
  uint64_t result = *((void *)this + 4);
  if (result)
  {
    MEMORY[0x22A614F80](result, 0x1000C8077774924);
    uint64_t result = 0;
    *((void *)this + 4) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::Next(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this, void **a2, int *a3)
{
  if (*((_DWORD *)this + 11) != *((_DWORD *)this + 10)
    || (uint64_t result = _tc_google::protobuf::io::CopyingOutputStreamAdaptor::WriteBuffer(this), result))
  {
    _tc_google::protobuf::io::CopyingOutputStreamAdaptor::AllocateBufferIfNeeded((uint64_t)this);
    int v7 = *((_DWORD *)this + 10);
    uint64_t v8 = *((int *)this + 11);
    *a2 = (void *)(*((void *)this + 4) + v8);
    *a3 = v7 - v8;
    *((_DWORD *)this + 11) = *((_DWORD *)this + 10);
    return 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::AllocateBufferIfNeeded(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new[]();
  }
  return this;
}

void _tc_google::protobuf::io::CopyingOutputStreamAdaptor::BackUp(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this, int a2)
{
  if (a2 < 0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 390);
    int v4 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (count) >= (0): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (_tc_google::protobuf::internal::LogMessage *)v4);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  int v5 = *((_DWORD *)this + 11);
  if (v5 != *((_DWORD *)this + 10))
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 391);
    size_t v6 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (buffer_used_) == (buffer_size_): ");
    int v7 = _tc_google::protobuf::internal::LogMessage::operator<<(v6, " BackUp() can only be called after Next().");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (_tc_google::protobuf::internal::LogMessage *)v7);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    int v5 = *((_DWORD *)this + 11);
  }
  if (v5 < a2)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/io/zero_copy_stream_impl_lite.cc", 393);
    uint64_t v8 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (count) <= (buffer_used_): ");
    char v9 = _tc_google::protobuf::internal::LogMessage::operator<<(v8, " Can't back up over more bytes than were returned by the last call to Next().");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (_tc_google::protobuf::internal::LogMessage *)v9);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    int v5 = *((_DWORD *)this + 11);
  }
  *((_DWORD *)this + 11) = v5 - a2;
}

void sub_224276D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::io::CopyingOutputStreamAdaptor::ByteCount(_tc_google::protobuf::io::CopyingOutputStreamAdaptor *this)
{
  return *((void *)this + 3) + *((int *)this + 11);
}

void *_tc_google::protobuf::MessageLite::InitializationErrorString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "(cannot determine missing fields for lite message)");
}

BOOL _tc_google::protobuf::MessageLite::ParseFromArray(_tc_google::protobuf::MessageLite *this, char *a2, int a3)
{
  v7[0] = a2;
  v7[1] = &a2[a3];
  v7[2] = 0;
  int v8 = a3;
  uint64_t v9 = 0;
  __int16 v10 = 0;
  int v11 = a3;
  uint64_t v12 = 0x7FFFFFFF00000000;
  int v13 = _tc_google::protobuf::io::CodedInputStream::default_recursion_limit_;
  int v14 = _tc_google::protobuf::io::CodedInputStream::default_recursion_limit_;
  char v15 = 1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  (*(void (**)(_tc_google::protobuf::MessageLite *))(*(void *)this + 56))(this);
  if (!(*(unsigned int (**)(_tc_google::protobuf::MessageLite *, void *))(*(void *)this + 88))(this, v7))
  {
LABEL_7:
    BOOL v4 = 0;
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(void *)this + 64))(this) & 1) == 0)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 121);
    int v5 = _tc_google::protobuf::internal::LogMessage::operator<<(v20, (const std::string::value_type *)&__p);
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (_tc_google::protobuf::internal::LogMessage *)v5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    goto LABEL_7;
  }
  BOOL v4 = (_BYTE)v10 != 0;
LABEL_8:
  _tc_google::protobuf::io::CodedInputStream::~CodedInputStream((_tc_google::protobuf::io::CodedInputStream *)v7);
  return v4;
}

void sub_224276EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)(v25 - 64));
  _tc_google::protobuf::io::CodedInputStream::~CodedInputStream((_tc_google::protobuf::io::CodedInputStream *)&a9);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::MessageLite::SerializeWithCachedSizesToArray(_tc_google::protobuf::MessageLite *this, unsigned __int8 *a2)
{
  unint64_t v2 = atomic_load((unint64_t *)&_tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_);
  return (*(uint64_t (**)(_tc_google::protobuf::MessageLite *, BOOL, unsigned __int8 *))(*(void *)this
                                                                                                 + 128))(this, v2 != 0, a2);
}

unsigned __int8 *_tc_google::protobuf::MessageLite::InternalSerializeWithCachedSizesToArray(_tc_google::protobuf::MessageLite *this, char a2, unsigned __int8 *a3)
{
  int v6 = (*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(void *)this + 120))(this);
  _tc_google::protobuf::io::ArrayOutputStream::ArrayOutputStream((uint64_t)v12, a3, v6, -1);
  _tc_google::protobuf::io::CodedOutputStream::CodedOutputStream((uint64_t)v11, (uint64_t)v12);
  v11[26] = 1;
  v11[27] = a2;
  (*(void (**)(_tc_google::protobuf::MessageLite *, unsigned char *))(*(void *)this + 104))(this, v11);
  if (v11[24])
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 239);
    int v7 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: !coded_out.HadError(): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (_tc_google::protobuf::internal::LogMessage *)v7);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream((_tc_google::protobuf::io::CodedOutputStream *)v11);
  _tc_google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((_tc_google::protobuf::io::ArrayOutputStream *)v12);
  return &a3[v6];
}

void sub_224277050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  int v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream((_tc_google::protobuf::io::CodedOutputStream *)va1);
  _tc_google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((_tc_google::protobuf::io::ArrayOutputStream *)(v3 - 64));
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::anonymous namespace'::InitializationErrorMessage(_tc_google::protobuf::_anonymous_namespace_ *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "Can't ");
  std::string::append(a2, "parse");
  std::string::append(a2, " message of type \"");
  (*(void (**)(void **__return_ptr, _tc_google::protobuf::_anonymous_namespace_ *))(*(void *)this + 16))(&__p, this);
  if ((v12 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = v11;
  }
  std::string::append(a2, p_p, v7);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
  std::string::append(a2, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, _tc_google::protobuf::_anonymous_namespace_ *))(*(void *)this + 72))(&__p, this);
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = v11;
  }
  std::string::append(a2, v8, v9);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
}

void sub_2242771C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::MessageLite::SerializePartialToCodedStream(_tc_google::protobuf::MessageLite *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v4 = (*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(void *)this + 96))(this);
  int v5 = (_tc_google::protobuf::_anonymous_namespace_ *)v4;
  if (v4 >> 31)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 252);
    int v6 = _tc_google::protobuf::internal::LogMessage::operator<<(v20, "Exceeded maximum protobuf size of 2GB: ");
    std::string::size_type v7 = _tc_google::protobuf::internal::LogMessage::operator<<(v6, (uint64_t)v5);
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v19, (_tc_google::protobuf::internal::LogMessage *)v7);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    return 0;
  }
  int v8 = *((_DWORD *)a2 + 4);
  int v9 = v8 - v4;
  if (v8 >= (int)v4)
  {
    uint64_t v10 = *((void *)a2 + 1);
    *((void *)a2 + 1) = v10 + v4;
    *((_DWORD *)a2 + 4) = v9;
    if (v10)
    {
      if (*((unsigned char *)a2 + 26)) {
        BOOL v11 = *((unsigned char *)a2 + 27) == 0;
      }
      else {
        BOOL v11 = _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ == 0;
      }
      uint64_t v16 = !v11;
      uint64_t v15 = (_tc_google::protobuf::_anonymous_namespace_ *)((*(uint64_t (**)(_tc_google::protobuf::MessageLite *, uint64_t, uint64_t))(*(void *)this + 128))(this, v16, v10)- v10);
      if (v15 == v5) {
        return 1;
      }
      goto LABEL_17;
    }
    int v8 = v9;
  }
  int v12 = *((_DWORD *)a2 + 5);
  (*(void (**)(_tc_google::protobuf::MessageLite *, _tc_google::protobuf::io::CodedOutputStream *))(*(void *)this + 104))(this, a2);
  if (*((unsigned char *)a2 + 24)) {
    return 0;
  }
  int v14 = v8 + *((_DWORD *)a2 + 5) - (v12 + *((_DWORD *)a2 + 4));
  if (v5 != (_tc_google::protobuf::_anonymous_namespace_ *)v14)
  {
    uint64_t v15 = (_tc_google::protobuf::_anonymous_namespace_ *)v14;
LABEL_17:
    uint64_t v17 = (_tc_google::protobuf::_anonymous_namespace_ *)(*(uint64_t (**)(_tc_google::protobuf::MessageLite *))(*(void *)this + 96))(this);
  }
  return 1;
}

void sub_2242773E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::anonymous namespace'::ByteSizeConsistencyError(_tc_google::protobuf::_anonymous_namespace_ *this, _tc_google::protobuf::_anonymous_namespace_ *a2, _tc_google::protobuf::_anonymous_namespace_ *a3, uint64_t a4, const _tc_google::protobuf::MessageLite *a5)
{
  if (this != a2)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 68);
    int v8 = _tc_google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ");
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a4 + 16))(__p, a4);
    int v9 = _tc_google::protobuf::internal::LogMessage::operator<<(v8, (const std::string::value_type *)__p);
    uint64_t v10 = _tc_google::protobuf::internal::LogMessage::operator<<(v9, " was modified concurrently during serialization.");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (_tc_google::protobuf::internal::LogMessage *)v10);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  if (a3 != this)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 71);
    BOOL v11 = _tc_google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ");
    int v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of ");
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a4 + 16))(__p, a4);
    int v13 = _tc_google::protobuf::internal::LogMessage::operator<<(v12, (const std::string::value_type *)__p);
    int v14 = _tc_google::protobuf::internal::LogMessage::operator<<(v13, ".");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (_tc_google::protobuf::internal::LogMessage *)v14);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/message_lite.cc", 75);
  uint64_t v15 = _tc_google::protobuf::internal::LogMessage::operator<<(v19, "This shouldn't be called if all the sizes are equal.");
  _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)__p, (_tc_google::protobuf::internal::LogMessage *)v15);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
}

void sub_2242775B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _tc_google::protobuf::internal::LogMessage::~LogMessage(&a16);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::MessageLite::SerializeToZeroCopyStream(_tc_google::protobuf::MessageLite *this, _tc_google::protobuf::io::ZeroCopyOutputStream *a2)
{
  _tc_google::protobuf::io::CodedOutputStream::CodedOutputStream((uint64_t)v5, (uint64_t)a2);
  uint64_t v3 = _tc_google::protobuf::MessageLite::SerializePartialToCodedStream(this, (_tc_google::protobuf::io::CodedOutputStream *)v5);
  _tc_google::protobuf::io::CodedOutputStream::~CodedOutputStream((_tc_google::protobuf::io::CodedOutputStream *)v5);
  return v3;
}

void sub_224277648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned int *_tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this, int a2)
{
  int v2 = *((_DWORD *)this + 2);
  int v3 = *((_DWORD *)this + 3);
  int v4 = v2 + a2;
  int v5 = (unsigned int *)*((void *)this + 2);
  if (v3 < v2 + a2)
  {
    uint64_t v7 = *(void *)this;
    int v8 = 2 * v3;
    if (2 * v3 <= v4) {
      int v8 = v4;
    }
    if (v8 <= 4) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = v8;
    }
    uint64_t v10 = 8 * v9;
    if (v7) {
      Aligned = (unsigned int *)_tc_google::protobuf::Arena::AllocateAligned(*(_tc_google::protobuf::Arena **)this, MEMORY[0x263F8C238], v10 + 8);
    }
    else {
      Aligned = (unsigned int *)operator new(v10 + 8);
    }
    *((void *)this + 2) = Aligned;
    *((_DWORD *)this + 3) = v9;
    if (v5 && (uint64_t v12 = *v5, (int)v12 >= 1))
    {
      memcpy(Aligned + 2, v5 + 2, 8 * v12);
      Aligned = (unsigned int *)*((void *)this + 2);
      unsigned int *Aligned = *v5;
      if (!v7) {
        goto LABEL_15;
      }
    }
    else
    {
      unsigned int *Aligned = 0;
      if (!v7)
      {
LABEL_15:
        operator delete(v5);
        Aligned = (unsigned int *)*((void *)this + 2);
      }
    }
    int v2 = *((_DWORD *)this + 2);
    int v5 = Aligned;
  }
  return &v5[2 * v2 + 2];
}

unsigned int *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve(unsigned int *this, int a2)
{
  unsigned int v2 = this[2];
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0))) {
    return _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)this, v4);
  }
  return this;
}

turi::neural_net::CoreImageImage *turi::neural_net::CoreImageImage::CoreImageImage(turi::neural_net::CoreImageImage *this, CIImage *a2)
{
  BOOL v3 = a2;
  *(void *)this = &unk_26D776850;
  *((void *)this + 1) = v3;
  return this;
}

void *turi::neural_net::CoreImageImage::CoreImageImage(void *a1, uint64_t *a2)
{
  *a1 = &unk_26D776850;
  a1[1] = 0;
  int v4 = (void *)MEMORY[0x22A615770]();
  int v5 = NSURL;
  if (*((char *)a2 + 23) >= 0) {
    int v6 = a2;
  }
  else {
    int v6 = (uint64_t *)*a2;
  }
  uint64_t v7 = [NSString stringWithUTF8String:v6];
  int v8 = [v5 fileURLWithPath:v7];

  uint64_t v9 = [MEMORY[0x263F00650] imageWithContentsOfURL:v8];
  uint64_t v10 = (void *)a1[1];
  a1[1] = v9;

  return a1;
}

void sub_224277858(_Unwind_Exception *a1)
{
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::CoreImageImage::~CoreImageImage(id *this)
{
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
}

{
  uint64_t vars8;

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
  JUMPOUT(0x22A614FA0);
}

unint64_t turi::neural_net::CoreImageImage::Height(id *this)
{
  unsigned int v2 = (void *)MEMORY[0x22A615770]();
  [this[1] extent];
  unint64_t v4 = (unint64_t)v3;
  return v4;
}

unint64_t turi::neural_net::CoreImageImage::Width(id *this)
{
  unsigned int v2 = (void *)MEMORY[0x22A615770]();
  [this[1] extent];
  unint64_t v4 = (unint64_t)v3;
  return v4;
}

void turi::neural_net::CoreImageImage::WriteCHW(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v40 = a2;
  unint64_t v41 = a3;
  int v5 = (void *)MEMORY[0x22A615770]();
  [*(id *)(a1 + 8) extent];
  uint64_t v7 = (unint64_t)v6;
  [*(id *)(a1 + 8) extent];
  uint64_t v9 = (unint64_t)v8;
  uint64_t v25 = v7;
  unint64_t v10 = (unint64_t)v8 * v7;
  if (a3 != 3 * v10)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v39, 0, sizeof(v39));
    turi::TuriException::TuriException(exception, 4, v39);
  }
  std::vector<float>::vector(&v37, 4 * v10);
  if (v38 == v37) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = (uint64_t)v37;
  }
  std::vector<float>::vector(&v35, v10);
  memset(&srcARGB, 0, sizeof(srcARGB));
  if (v38 == v37) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = (uint64_t)v37;
  }
  turi::Span<float,18446744073709551615ul>::IterateSlices(&v40, v41 / 3, &v28);
  long long v13 = v28;
  long long v14 = v29;
  if (v28 == v29)
  {
    p_vImage_Buffer destA = &destA;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = &destA;
    while (1)
    {
      if (*((void *)&v13 + 1)) {
        uint64_t v18 = v13 + v16;
      }
      else {
        uint64_t v18 = 0;
      }
      p_vImage_Buffer destA = v17 + 1;
      long long v19 = v27[1];
      *(_OWORD *)&v17->data = v27[0];
      *(_OWORD *)&v17->width = v19;
      uint64_t v20 = v13 + 4 * *((void *)&v13 + 1) + v16;
      v16 += 4 * *((void *)&v13 + 1);
      ++v17;
      if (v20 == (void)v14)
      {
        uint64_t v17 = p_destA;
        if (*((void *)&v13 + 1) == *((void *)&v14 + 1)) {
          break;
        }
      }
    }
  }
  if (v36 == v35) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = (uint64_t)v35;
  }
  long long v22 = v29;
  *(_OWORD *)&p_destA->data = v28;
  *(_OWORD *)&p_destA->width = v22;
  if (vImageConvert_ARGBFFFFtoPlanarF(&srcARGB, &destA, &v31, &v32, &v33, 0x10u))
  {
    uint64_t v24 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v26, "unexpected error converting RGBA bitmap to planar RGB");
    turi::TuriException::TuriException(v24, 10, v26);
  }
  if (v35)
  {
    long long v36 = v35;
    operator delete(v35);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
}

void sub_224277C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      uint64_t v21 = *(void **)(v19 - 184);
      if (v21)
      {
        *(void *)(v19 - 176) = v21;
        operator delete(v21);
      }
      long long v22 = *(void **)(v19 - 160);
      if (v22)
      {
        *(void *)(v19 - 152) = v22;
        operator delete(v22);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void turi::neural_net::anonymous namespace'::RenderRgba(void *a1, uint64_t a2, uint64_t a3)
{
  v17[2] = *MEMORY[0x263EF8340];
  id v5 = a1;
  [v5 extent];
  double v7 = v6;
  [v5 extent];
  unint64_t v9 = (unint64_t)v8;
  if (a3 != 4 * (unint64_t)v7 * (unint64_t)v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v15, 0, sizeof(v15));
    turi::TuriException::TuriException(exception, 4, v15);
  }
  uint64_t v10 = *MEMORY[0x263F00858];
  v16[0] = *MEMORY[0x263F00850];
  v16[1] = v10;
  v17[0] = MEMORY[0x263EFFA88];
  uint64_t v11 = [MEMORY[0x263EFF9D0] null];
  v17[1] = v11;
  uint64_t v12 = [NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];

  long long v13 = [MEMORY[0x263F00628] contextWithOptions:v12];

  [v5 extent];
  objc_msgSend(v13, "render:toBitmap:rowBytes:bounds:format:colorSpace:", v5, a2, 16 * v9, *MEMORY[0x263F008B8], 0);
}

void sub_224277E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

uint64_t turi::neural_net::anonymous namespace'::WrapSpan@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (a2 != a5 * a4 * a3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v7, 0, sizeof(v7));
    turi::TuriException::TuriException(exception, 4, v7);
  }
  *a6 = result;
  a6[1] = a3;
  a6[2] = a4;
  a6[3] = 4 * a5 * a4;
  return result;
}

void sub_224277F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::CoreImageImage::WriteHWC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = (void *)MEMORY[0x22A615770]();
  [*(id *)(a1 + 8) extent];
  uint64_t v8 = (unint64_t)v7;
  [*(id *)(a1 + 8) extent];
  uint64_t v10 = (unint64_t)v9;
  unint64_t v11 = (unint64_t)v9 * v8;
  if (a3 != 3 * v11)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v21, 0, sizeof(v21));
    turi::TuriException::TuriException(exception, 4, v21);
  }
  std::vector<float>::vector(&__p, 4 * v11);
  if (v20 == __p) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = __p;
  }
  memset(&src, 0, sizeof(src));
  if (v20 == __p) {
    long long v13 = 0;
  }
  else {
    long long v13 = __p;
  }
  memset(&dest, 0, sizeof(dest));
  if (vImageConvert_RGBAFFFFtoRGBFFF(&src, &dest, 0x10u))
  {
    uint64_t v15 = __cxa_allocate_exception(0x40uLL);
    std::string::basic_string[abi:ne180100]<0>(v16, "converting RGBA bitmap to RGB");
    turi::TuriException::TuriException(v15, 10, v16);
  }
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

void sub_22427815C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a24) {
        operator delete(a24);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void sub_2242781B8()
{
  if (*(char *)(v2 - 49) < 0) {
    operator delete(*(void **)(v2 - 72));
  }
  if (v1) {
    __cxa_free_exception(v0);
  }
  JUMPOUT(0x2242781B0);
}

void *turi::Span<float,18446744073709551615ul>::IterateSlices@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = result[1];
  if (v3 % a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    memset(v6, 0, sizeof(v6));
    turi::TuriException::TuriException(exception, 2, v6);
  }
  uint64_t v4 = *result + 4 * v3;
  *a3 = *result;
  a3[1] = a2;
  a3[2] = v4;
  a3[3] = a2;
  return result;
}

void sub_224278274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void _tc_google::protobuf::internal::VerifyVersion(_tc_google::protobuf::internal *this, _tc_google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if ((int)a2 > 3003000)
  {
    int v21 = 3;
    long long v22 = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/stubs/common.cc";
    int v23 = 67;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    _tc_google::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0) {
      double v7 = (const std::string::value_type *)&v18;
    }
    else {
      double v7 = (const std::string::value_type *)v18;
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v8 = v20;
    }
    else {
      std::string::size_type v8 = v19;
    }
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 3, 0);
    char v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v10 = v17;
    }
    else {
      std::string::size_type v10 = v16;
    }
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    _tc_google::protobuf::internal::LogMessage::Finish((_tc_google::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
    if ((char)v20 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  if ((int)this < 3003000)
  {
    int v21 = 3;
    long long v22 = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/stubs/common.cc";
    int v23 = 78;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    _tc_google::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0) {
      unint64_t v11 = (const std::string::value_type *)&v18;
    }
    else {
      unint64_t v11 = (const std::string::value_type *)v18;
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v12 = v20;
    }
    else {
      std::string::size_type v12 = v19;
    }
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 3, 0);
    char v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0) {
      long long v13 = (const std::string::value_type *)&__p;
    }
    else {
      long long v13 = (const std::string::value_type *)__p;
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v14 = v17;
    }
    else {
      std::string::size_type v14 = v16;
    }
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    _tc_google::protobuf::internal::LogMessage::Finish((_tc_google::protobuf::internal::LogMessage *)&v21);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
    if ((char)v20 < 0) {
      operator delete(v18);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
}

void sub_224278590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::internal::LogMessage::LogMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

std::string *_tc_google::protobuf::internal::LogMessage::operator<<(std::string *a1, const std::string::value_type *a2)
{
  return a1;
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  unint64_t v3 = a1 + 1;
  uint64_t v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    id v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    id v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

void *_tc_google::protobuf::internal::VersionString@<X0>(_tc_google::protobuf::internal *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x80uLL, "%d.%d.%d", (int)this / 1000000, (int)this / 1000 % 1000, (int)this % 1000);
  char __str[127] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void _tc_google::protobuf::internal::LogFinisher::operator=(uint64_t a1, _tc_google::protobuf::internal::LogMessage *a2)
{
}

void _tc_google::protobuf::internal::LogMessage::~LogMessage(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
}

uint64_t _tc_google::protobuf::internal::DefaultLogHandler(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  if ((result & 0x80000000) == 0)
  {
    uint64_t v4 = (FILE **)MEMORY[0x263EF8348];
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v5 = (const char *)a4;
    }
    else {
      uint64_t v5 = *(const char **)a4;
    }
    fprintf((FILE *)*MEMORY[0x263EF8348], "[libprotobuf %s %s:%d] %s\n", _tc_google::protobuf::internal::DefaultLogHandler(_tc_google::protobuf::LogLevel,char const*,int,std::string const&)::level_names[result], a2, a3, v5);
    double v6 = *v4;
    return fflush(v6);
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::DeleteLogSilencerCount(_tc_google::protobuf::internal *this)
{
  uint64_t result = _tc_google::protobuf::internal::log_silencer_count_mutex_;
  if (_tc_google::protobuf::internal::log_silencer_count_mutex_)
  {
    _tc_google::protobuf::internal::Mutex::~Mutex((pthread_mutex_t **)_tc_google::protobuf::internal::log_silencer_count_mutex_);
    uint64_t result = MEMORY[0x22A614FA0]();
  }
  _tc_google::protobuf::internal::log_silencer_count_mutex_ = 0;
  return result;
}

void _tc_google::protobuf::internal::InitLogSilencerCount(_tc_google::protobuf::internal *this)
{
}

void sub_2242788D8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::OnShutdown(_tc_google::protobuf::internal *this, void (*a2)(void))
{
  unint64_t v3 = atomic_load(&_tc_google::protobuf::internal::shutdown_functions_init);
  if (v3 != 2)
  {
    v19[0] = &unk_26D7768F8;
    v19[1] = _tc_google::protobuf::internal::InitShutdownFunctions;
    char v20 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&_tc_google::protobuf::internal::shutdown_functions_init, (uint64_t)v19);
  }
  uint64_t v4 = (pthread_mutex_t **)_tc_google::protobuf::internal::shutdown_functions_mutex;
  _tc_google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)_tc_google::protobuf::internal::shutdown_functions_mutex);
  uint64_t v5 = (void **)_tc_google::protobuf::internal::shutdown_functions;
  double v6 = *(void **)(_tc_google::protobuf::internal::shutdown_functions + 8);
  unint64_t v7 = *(void *)(_tc_google::protobuf::internal::shutdown_functions + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = ((uint64_t)v6 - *(void *)_tc_google::protobuf::internal::shutdown_functions) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v7 - *(void *)_tc_google::protobuf::internal::shutdown_functions;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(_tc_google::protobuf::internal::shutdown_functions + 16, v12);
    }
    else {
      long long v13 = 0;
    }
    std::string::size_type v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)std::string::size_type v14 = this;
    std::string::size_type v8 = v14 + 8;
    unsigned __int8 v17 = (char *)*v5;
    std::string::size_type v16 = (char *)v5[1];
    if (v16 != *v5)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      std::string::size_type v16 = (char *)*v5;
    }
    *uint64_t v5 = v14;
    v5[1] = v8;
    std::string v5[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = this;
    std::string::size_type v8 = v6 + 1;
  }
  v5[1] = v8;
  _tc_google::protobuf::internal::Mutex::Unlock(v4);
}

void sub_224278A58(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::Mutex::Unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t *_tc_google::protobuf::internal::InitLogSilencerCountOnce(_tc_google::protobuf::internal *this)
{
  unint64_t v1 = atomic_load(&_tc_google::protobuf::internal::log_silencer_count_init_);
  if (v1 != 2)
  {
    v3[0] = &unk_26D7768F8;
    v3[1] = _tc_google::protobuf::internal::InitLogSilencerCount;
    char v4 = 0;
    return _tc_google::protobuf::GoogleOnceInitImpl(&_tc_google::protobuf::internal::log_silencer_count_init_, (uint64_t)v3);
  }
  return result;
}

std::string *_tc_google::protobuf::internal::LogMessage::operator<<(std::string *a1, int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x80uLL, "%d", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *_tc_google::protobuf::internal::LogMessage::operator<<(std::string *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  snprintf(__str, 0x80uLL, "%lu", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

void _tc_google::protobuf::internal::LogMessage::Finish(_tc_google::protobuf::internal::LogMessage *this)
{
  if (*(_DWORD *)this == 3)
  {
    uint64_t v2 = 3;
  }
  else
  {
    _tc_google::protobuf::internal::InitLogSilencerCountOnce(this);
    unint64_t v3 = (pthread_mutex_t **)_tc_google::protobuf::internal::log_silencer_count_mutex_;
    _tc_google::protobuf::internal::Mutex::Lock((pthread_mutex_t **)_tc_google::protobuf::internal::log_silencer_count_mutex_);
    int v4 = _tc_google::protobuf::internal::log_silencer_count_;
    _tc_google::protobuf::internal::Mutex::Unlock(v3);
    if (v4 > 0) {
      goto LABEL_6;
    }
    uint64_t v2 = *(unsigned int *)this;
  }
  _tc_google::protobuf::internal::log_handler_(v2, *((const char **)this + 1), *((_DWORD *)this + 4), (uint64_t)this + 24);
LABEL_6:
  if (*(_DWORD *)this == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    _tc_google::protobuf::FatalException::FatalException(exception, *((void *)this + 1), *((unsigned int *)this + 4), (char *)this + 24);
  }
}

void sub_224278CB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0(_tc_google::protobuf::internal::FunctionClosure0 *this)
{
}

void _tc_google::protobuf::internal::Mutex::~Mutex(pthread_mutex_t **this)
{
  if (*this) {
    MEMORY[0x22A614FA0](*this, 0x1000C40FA0F61DDLL);
  }
}

void _tc_google::protobuf::internal::Mutex::Lock(pthread_mutex_t **this)
{
  int v1 = pthread_mutex_lock(*this);
  if (v1)
  {
    int v2 = v1;
    int v4 = 3;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/stubs/common.cc";
    int v6 = 377;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_lock: ");
    unint64_t v3 = strerror(v2);
    std::string::append(&__p, v3);
    _tc_google::protobuf::internal::LogMessage::Finish((_tc_google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_224278DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _tc_google::protobuf::internal::Mutex::Unlock(pthread_mutex_t **this)
{
  int v1 = pthread_mutex_unlock(*this);
  if (v1)
  {
    int v2 = v1;
    int v4 = 3;
    uint64_t v5 = "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/stubs/common.cc";
    int v6 = 384;
    memset(&__p, 0, sizeof(__p));
    std::string::append(&__p, "pthread_mutex_unlock: ");
    unint64_t v3 = strerror(v2);
    std::string::append(&__p, v3);
    _tc_google::protobuf::internal::LogMessage::Finish((_tc_google::protobuf::internal::LogMessage *)&v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_224278E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _tc_google::protobuf::internal::InitShutdownFunctions(_tc_google::protobuf::internal *this)
{
}

void sub_224278F3C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void _tc_google::protobuf::FatalException::~FatalException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26D7768C0;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

{
  uint64_t vars8;

  _tc_google::protobuf::FatalException::~FatalException(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t _tc_google::protobuf::FatalException::what(_tc_google::protobuf::FatalException *this)
{
  uint64_t result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::FunctionClosure0::Run(uint64_t (**this)(void))
{
  int v2 = *((unsigned __int8 *)this + 16);
  uint64_t result = this[1]();
  if (this && v2)
  {
    int v4 = (uint64_t (*)(uint64_t (**)(void)))*((void *)*this + 1);
    return v4(this);
  }
  return result;
}

uint64_t _tc_google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  *(void *)a1 = &unk_26D7768C0;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((void *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_2242790F4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void turi::neural_net::anonymous namespace'::create_mlc_compute_context(turi::neural_net::_anonymous_namespace_ *this)
{
}

void sub_224279178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

turi::neural_net::mlc_compute_context *turi::neural_net::mlc_compute_context::mlc_compute_context(turi::neural_net::mlc_compute_context *this, MLCDevice *a2)
{
  unint64_t v3 = a2;
  *(void *)this = &unk_26D776938;
  *((void *)this + 1) = v3;
  return this;
}

void turi::neural_net::mlc_compute_context::~mlc_compute_context(id *this)
{
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
}

{
  uint64_t vars8;

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
}

{
  uint64_t vars8;

  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)this);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::neural_net::mlc_compute_context::memory_budget(turi::neural_net::mlc_compute_context *this)
{
  return 0x40000000;
}

void turi::neural_net::mlc_compute_context::print_training_device_info(id *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  memset(&v48, 0, sizeof(v48));
  if ([this[1] type])
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    int v2 = [this[1] gpuDevices];
    uint64_t v3 = [v2 countByEnumeratingWithState:&v44 objects:v50 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v3; ++i)
        {
          if (*(void *)v45 != v4) {
            objc_enumerationMutation(v2);
          }
          id v6 = [*(id *)(*((void *)&v44 + 1) + 8 * i) name];
          unint64_t v7 = (char *)[v6 cStringUsingEncoding:4];

          if (v7)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, v7);
            std::vector<std::string>::pointer end = v48.__end_;
            if (v48.__end_ >= v48.__end_cap_.__value_)
            {
              unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3);
              unint64_t v11 = v10 + 1;
              if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) > v11) {
                unint64_t v11 = 0x5555555555555556 * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_cap_.__value_ - (char *)v48.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v12 = v11;
              }
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v48.__end_cap_;
              if (v12) {
                long long v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v48.__end_cap_, v12);
              }
              else {
                long long v13 = 0;
              }
              std::string::size_type v14 = v13 + v10;
              __v.__first_ = v13;
              __v.__begin_ = v14;
              __v.__end_cap_.__value_ = &v13[v12];
              long long v15 = *(_OWORD *)__p;
              v14->__r_.__value_.__r.__words[2] = v43;
              *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
              __p[1] = 0;
              int64_t v43 = 0;
              __p[0] = 0;
              __v.__end_ = v14 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v48, &__v);
              std::string::size_type v16 = v48.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v48.__end_ = v16;
              if (SHIBYTE(v43) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v9 = *(_OWORD *)__p;
              v48.__end_->__r_.__value_.__r.__words[2] = v43;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
              v48.__end_ = end + 1;
            }
          }
        }
        uint64_t v3 = [v2 countByEnumeratingWithState:&v44 objects:v50 count:16];
      }
      while (v3);
    }
  }
  std::vector<std::string>::pointer begin = v48.__begin_;
  std::vector<std::string>::pointer v18 = v48.__end_;
  if (v48.__begin_ == v48.__end_)
  {
    char v20 = (int *)global_logger();
    if (v20[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v20)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      int v21 = (file_logger *)global_logger();
      started = file_logger::start_stream(v21, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mlc_compute_context.mm", "print_training_device_info", 86, 1);
      int v23 = pthread_getspecific(*((void *)started + 74));
      if (v23 && *((unsigned char *)v23 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"Using CPU to create model", 25);
      }
    }
  }
  else
  {
    if (SHIBYTE(v48.__begin_->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__v, v48.__begin_->__r_.__value_.__l.__data_, v48.__begin_->__r_.__value_.__l.__size_);
      std::vector<std::string>::pointer begin = v48.__begin_;
      std::vector<std::string>::pointer v18 = v48.__end_;
    }
    else
    {
      long long v19 = *(_OWORD *)&v48.__begin_->__r_.__value_.__l.__data_;
      __v.__end_ = (std::__split_buffer<std::string>::pointer)v48.__begin_->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__v.__first_ = v19;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)begin) >> 3) >= 2)
    {
      unint64_t v24 = 1;
      uint64_t v25 = 24;
      do
      {
        std::operator+<char>();
        if (v43 >= 0) {
          char v26 = __p;
        }
        else {
          char v26 = (void **)__p[0];
        }
        if (v43 >= 0) {
          std::string::size_type v27 = HIBYTE(v43);
        }
        else {
          std::string::size_type v27 = (std::string::size_type)__p[1];
        }
        std::string::append((std::string *)&__v, (const std::string::value_type *)v26, v27);
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[0]);
        }
        ++v24;
        v25 += 24;
      }
      while (v24 < 0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3));
    }
    long long v28 = (int *)global_logger();
    if (v28[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v28)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      long long v29 = (file_logger *)global_logger();
      uint64_t v30 = (pthread_key_t *)file_logger::start_stream(v29, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/neural_net/mlc_compute_context.mm", "print_training_device_info", 92, 1);
      vImage_Buffer v31 = pthread_getspecific(v30[74]);
      if (v31 && *((unsigned char *)v31 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"Using ", 6);
      }
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48.__end_ - (char *)v48.__begin_) >> 3);
      if (v32 <= 1) {
        vImage_Buffer v33 = "GPU";
      }
      else {
        vImage_Buffer v33 = "GPUs";
      }
      long long v34 = (char *)pthread_getspecific(v30[74]);
      if (v34 && v34[280])
      {
        long long v35 = v34 + 16;
        if (v32 <= 1) {
          uint64_t v36 = 3;
        }
        else {
          uint64_t v36 = 4;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v33, v36);
        uint64_t v37 = 2;
        if (v32 > 1) {
          uint64_t v37 = 3;
        }
        if (v33[v37] == 10) {
          file_logger::stream_flush((file_logger *)v30);
        }
      }
      uint64_t v38 = pthread_getspecific(v30[74]);
      if (v38 && *((unsigned char *)v38 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)" to create model (", 18);
      }
      if (SHIBYTE(__v.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(&v41, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
      }
      else
      {
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
      }
      uint64_t v39 = file_logger::operator<<<std::string>((uint64_t)v30, (uint64_t)&v41);
      uint64_t v40 = pthread_getspecific(*(void *)(v39 + 592));
      if (v40 && *((unsigned char *)v40 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)")", 1);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_2242797C4(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *a7, uint64_t a8, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,std::__split_buffer<std::string> *a25,uint64_t a26,char a27)
{
  a15 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(__p);
}

void turi::neural_net::mlc_compute_context::create_style_transfer(void *a1@<X8>)
{
  *a1 = 0;
}

id turi::neural_net::mlc_compute_context::GetDevice(turi::neural_net::mlc_compute_context *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1)
  {
    id v2 = v1;
  }
  else
  {
    id v2 = [MEMORY[0x263F105C0] deviceWithType:2];
  }
  return v2;
}

unint64_t *_tc_google::protobuf::GoogleOnceInitImpl(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = atomic_load(result);
  if (v2 != 2)
  {
    uint64_t v3 = result;
    do
      unint64_t v4 = __ldxr(result);
    while (!v4 && __stxr(1uLL, result));
    __dmb(0xBu);
    if (v4)
    {
      while (v4 == 1)
      {
        uint64_t result = (unint64_t *)sched_yield();
        unint64_t v4 = atomic_load(v3);
      }
    }
    else
    {
      uint64_t result = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      atomic_store(2uLL, v3);
    }
  }
  return result;
}

void CoreML::validate<(MLModelType)2000>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a1 + 44) != 2000)
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "Model not a text classifier.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0) {
      return;
    }
    long long v9 = v18;
    goto LABEL_34;
  }
  CoreML::Result::Result((CoreML::Result *)&v18);
  uint64_t v5 = operator new(4uLL);
  unint64_t v12 = v5;
  *uint64_t v5 = 3;
  long long v13 = v5 + 1;
  std::string::size_type v14 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v12, (uint64_t)&v15);
  std::vector<std::string>::pointer v18 = v15;
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v16;
  uint64_t v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    long long v13 = v12;
    operator delete(v12);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v18)) {
    goto LABEL_31;
  }
  id v6 = operator new(4uLL);
  unint64_t v12 = v6;
  _DWORD *v6 = 3;
  long long v13 = v6 + 1;
  std::string::size_type v14 = v6 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v12, (uint64_t)&v15);
  std::vector<std::string>::pointer v18 = v15;
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v16;
  uint64_t v20 = v17;
  HIBYTE(v17) = 0;
  LOBYTE(v16) = 0;
  if (v12)
  {
    long long v13 = v12;
    operator delete(v12);
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v18);
  if (!v7) {
    goto LABEL_31;
  }
  if (*(_DWORD *)(a1 + 44) == 2000) {
    std::string::size_type v8 = *(uint64_t **)(a1 + 32);
  }
  else {
    std::string::size_type v8 = CoreML::Specification::CoreMLModels::TextClassifier::default_instance((CoreML::Specification::CoreMLModels::TextClassifier *)v7);
  }
  if (!*((_DWORD *)v8 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model revision number not set. Must be >= 1");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  if (*((_DWORD *)v8 + 13) != 200 || *(int *)(v8[5] + 24) <= 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model output class label not set. Must have at least one class label");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  uint64_t v10 = v8[3];
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "Model parameter data not set");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_27:
    if (SHIBYTE(v16) < 0) {
      operator delete(v15);
    }
    goto LABEL_32;
  }
LABEL_31:
  *(void *)a2 = v18;
  *(_OWORD *)(a2 + 8) = __p;
  *(void *)(a2 + 24) = v20;
  long long __p = 0uLL;
  uint64_t v20 = 0;
LABEL_32:
  if ((SHIBYTE(v20) & 0x80000000) == 0) {
    return;
  }
  long long v9 = (void *)__p;
LABEL_34:
  operator delete(v9);
}

void sub_224279BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

double turi::neural_net::TaskQueue::GetGlobalConcurrentQueue@<D0>(_OWORD *a1@<X8>)
{
  turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(&v4);
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

CoreML::Result *CoreML::validate<(MLModelType)402>@<X0>(CoreML::TreeEnsembles *a1@<X0>, CoreML::Result *a2@<X8>)
{
  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(a1, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return CoreML::Result::Result(a2);
}

CoreML::Result *CoreML::validate<(MLModelType)302>@<X0>(CoreML::TreeEnsembles *a1@<X0>, CoreML::Result *a2@<X8>)
{
  CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(a1, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return CoreML::Result::Result(a2);
}

void _tc_google::protobuf::util::Status::~Status(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

std::string *_tc_google::protobuf::StringAppendV(std::string *a1, char *__format, va_list a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  double result = (std::string *)vsnprintf(__str, 0x400uLL, __format, a3);
  if ((int)result > 1023) {
    operator new[]();
  }
  if ((result & 0x80000000) == 0) {
    return std::string::append(a1, __str, result);
  }
  return result;
}

std::string *_tc_google::protobuf::StringPrintf@<X0>(_tc_google::protobuf *this@<X0>, std::string *a2@<X8>, ...)
{
  va_start(va, a2);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return _tc_google::protobuf::StringAppendV(a2, (char *)this, va);
}

void sub_224279FF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::internal::UTF8GenericScan(unsigned int *a1, unsigned char *a2, int a3, _DWORD *a4)
{
  *a4 = 0;
  if (!a3) {
    return 241;
  }
  unint64_t v4 = (unint64_t)&a2[a3];
  unint64_t v5 = v4 - 7;
  uint64_t v6 = *((void *)a1 + 4) + *a1;
  uint64_t v7 = *((void *)a1 + 7);
  std::string::size_type v8 = a2;
  while (2)
  {
    uint64_t v9 = v8 & 7;
    if ((v8 & 7) != 0 && (unint64_t)v8 < v4)
    {
      char v10 = (_BYTE)v8 + 1;
      while (!*(unsigned char *)(v7 + *v8))
      {
        ++v8;
        uint64_t v9 = v10 & 7;
        if ((v10 & 7) != 0)
        {
          ++v10;
          if ((unint64_t)v8 < v4) {
            continue;
          }
        }
        goto LABEL_9;
      }
LABEL_17:
      uint64_t v11 = v8;
      goto LABEL_18;
    }
LABEL_9:
    if (v9 || (unint64_t)v8 >= v5) {
      goto LABEL_17;
    }
    uint64_t v11 = v8 + 4;
    while (1)
    {
      unint64_t v12 = *(v11 - 1);
      if ((((v12 - a1[6]) | (v12 + a1[7]) | (*v11 - a1[6]) | (*v11 + a1[7])) & 0x80808080) != 0) {
        break;
      }
LABEL_15:
      long long v13 = v11 + 2;
      std::string::size_type v14 = v11 + 1;
      v11 += 2;
      if ((unint64_t)v14 >= v5)
      {
        uint64_t v11 = v13 - 1;
        goto LABEL_18;
      }
    }
    if (!(*(unsigned __int8 *)(v7 + BYTE1(v12)) | *(unsigned __int8 *)(v7 + v12) | *(unsigned __int8 *)(v7 + BYTE2(v12)) | *(unsigned __int8 *)(v7 + (v12 >> 24))))
    {
      if (*(unsigned __int8 *)(v7 + BYTE1(*v11)) | *(unsigned __int8 *)(v7 + *v11) | *(unsigned __int8 *)(v7 + BYTE2(*v11)) | *(unsigned __int8 *)(v7 + ((unint64_t)*v11 >> 24))) {
        goto LABEL_18;
      }
      goto LABEL_15;
    }
    --v11;
LABEL_18:
    if ((unint64_t)v11 < v4)
    {
      unint64_t v15 = v4 - (void)v11;
      long long v16 = (char *)v11 - 1;
      uint64_t v17 = *((void *)a1 + 4) + *a1;
      std::string::size_type v8 = v11;
      while (1)
      {
        uint64_t v18 = *(unsigned __int8 *)(v17 + *v8);
        if (v18 > 0xEF) {
          break;
        }
        ++v8;
        uint64_t v17 = v6 + (int)(v18 << a1[4]);
        ++v16;
        if (!--v15)
        {
          LODWORD(v8) = v4;
          goto LABEL_29;
        }
      }
      if (a1[1] <= (int)v17 - (int)v6)
      {
        do
        {
          std::string::size_type v8 = v16;
          if (v16 <= a2) {
            break;
          }
          --v16;
        }
        while ((*v8 & 0xC0) == 0x80);
      }
      if (v18 != 253) {
        goto LABEL_39;
      }
      continue;
    }
    break;
  }
  LODWORD(v8) = v11;
  LODWORD(v17) = a1[8] + *a1;
LABEL_29:
  if (a1[1] <= (int)v17 - (int)v6)
  {
    if ((unint64_t)v11 <= v4) {
      long long v19 = (_DWORD *)v4;
    }
    else {
      long long v19 = v11;
    }
    uint64_t v20 = (char *)v19 - 1;
    do
    {
      std::string::size_type v8 = v20;
      if (v20 <= a2) {
        break;
      }
      --v20;
    }
    while ((*v8 & 0xC0) == 0x80);
    uint64_t v18 = 240;
  }
  else
  {
    uint64_t v18 = 241;
  }
LABEL_39:
  *a4 = v8 - a2;
  return v18;
}

uint64_t _tc_google::protobuf::internal::UTF8GenericScanFastAscii(unsigned int *a1, unint64_t a2, int a3, _DWORD *a4)
{
  *a4 = 0;
  if (!a3) {
    return 241;
  }
  unint64_t v8 = a2 + a3;
  int v14 = 0;
  unint64_t v9 = a2;
  do
  {
    unint64_t v10 = v9 & 7;
    if ((v9 & 7) != 0 && v9 < v8)
    {
      char v11 = v9 + 1;
      while ((*(char *)v9 & 0x80000000) == 0)
      {
        ++v9;
        unint64_t v10 = v11 & 7;
        if ((v11 & 7) != 0)
        {
          ++v11;
          if (v9 < v8) {
            continue;
          }
        }
        goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if (!v10)
      {
        while (v9 < v8 - 7 && ((*(_DWORD *)(v9 + 4) | *(_DWORD *)v9) & 0x80808080) == 0)
          v9 += 8;
      }
    }
    if (v9 < v8)
    {
      unint64_t v12 = v8 - v9;
      while ((*(char *)v9 & 0x80000000) == 0)
      {
        ++v9;
        if (!--v12)
        {
          unint64_t v9 = v8;
          break;
        }
      }
    }
    uint64_t result = _tc_google::protobuf::internal::UTF8GenericScan(a1, (unsigned char *)(a2 + (int)v9 - (int)a2), a3 - ((int)v9 - (int)a2), &v14);
    v9 += v14;
  }
  while (result == 253);
  *a4 = v9 - a2;
  return result;
}

BOOL _tc_google::protobuf::internal::IsStructurallyValidUTF8(_tc_google::protobuf::internal *this, const char *a2)
{
    return 1;
  int v2 = (int)a2;
  int v4 = 0;
  _tc_google::protobuf::internal::UTF8GenericScanFastAscii(_tc_google::protobuf::internal::utf8acceptnonsurrogates_obj, (unint64_t)this, (int)a2, &v4);
  return v4 == v2;
}

std::string *std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(std::string *this, char *a2, char *a3)
{
  int v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    unint64_t v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    int v14 = this;
    if ((v6 & 0x80) != 0) {
      int v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    unint64_t v15 = (char *)v14 + size;
    while (v4 != a3)
    {
      char v16 = *v4++;
      *v15++ = v16;
    }
    *unint64_t v15 = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_22427A504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::SkipField(_tc_google::protobuf::internal::WireFormatLite *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  if (a2 < 8) {
    return 0;
  }
  int v4 = (int)a2;
  uint64_t result = 0;
  switch(a2 & 7)
  {
    case 0:
      unint64_t v6 = *(char **)this;
      if (*(void *)this < *((void *)this + 1) && (*v6 & 0x80000000) == 0)
      {
        uint64_t v7 = (uint64_t)(v6 + 1);
        goto LABEL_19;
      }
      _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      return v13 & 1;
    case 1:
      unint64_t v16 = 0;
      if ((int)(*((_DWORD *)this + 2) - *(void *)this) >= 8)
      {
        uint64_t v7 = *(void *)this + 8;
        goto LABEL_19;
      }
      return _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v16);
    case 2:
      unint64_t v8 = *(char **)this;
      if (*(void *)this >= *((void *)this + 1))
      {
        unsigned int v9 = 0;
      }
      else
      {
        unsigned int v9 = *v8;
        if ((*v8 & 0x80000000) == 0)
        {
          *(void *)this = v8 + 1;
          goto LABEL_25;
        }
      }
      uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v9);
      unsigned int v9 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_25:
      return _tc_google::protobuf::io::CodedInputStream::Skip(this, v9);
    case 3:
      int v10 = *((_DWORD *)this + 13);
      BOOL v11 = __OFSUB__(v10--, 1);
      *((_DWORD *)this + 13) = v10;
      if (v10 < 0 != v11) {
        return 0;
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::SkipMessage((char **)this, a2, a3);
      if (result)
      {
        int v12 = *((_DWORD *)this + 13);
        if (v12 < *((_DWORD *)this + 14)) {
          *((_DWORD *)this + 13) = v12 + 1;
        }
        return *((_DWORD *)this + 8) == (v4 & 0xFFFFFFF8 | 4);
      }
      return result;
    case 5:
      unsigned int v15 = 0;
      if ((int)(*((_DWORD *)this + 2) - *(void *)this) < 4) {
        return _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)this, &v15);
      }
      uint64_t v7 = *(void *)this + 4;
LABEL_19:
      *(void *)this = v7;
      return 1;
    default:
      return result;
  }
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::SkipMessage(char **this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  do
  {
    int v4 = *this;
    if (*this >= this[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if ((*v4 & 0x80000000) == 0)
      {
        *((_DWORD *)this + 8) = TagFallback;
        *this = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)this, TagFallback);
    *((_DWORD *)this + 8) = TagFallback;
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteFloatArray(_tc_google::protobuf::internal::WireFormatLite *this, const float *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(a3, (char *)this, 4 * (int)a2);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(_tc_google::protobuf::internal::WireFormatLite *this, const double *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(a3, (char *)this, 8 * (int)a2);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteBoolArray(_tc_google::protobuf::internal::WireFormatLite *this, const BOOL *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(a3, (char *)this, (int)a2);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteInt32(uint64_t this, signed int a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = 8 * this;
  if (*((int *)a3 + 4) < 5)
  {
    this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
    int v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    uint64_t v7 = *((void *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = 8 * this;
      unint64_t v8 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unint64_t v8 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        unsigned int v9 = v6 >> 7;
        unsigned int v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    unsigned char *v8 = v9;
    int v12 = v8 - v7 + 1;
    *((void *)a3 + 1) += v12;
    int v11 = *((_DWORD *)a3 + 4) - v12;
    *((_DWORD *)a3 + 4) = v11;
  }
  unint64_t v13 = a2;
  if (v11 < 10)
  {
    return _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a3, a2);
  }
  else
  {
    uint64_t v14 = *((void *)a3 + 1);
    if (a2 < 0x80)
    {
      LOBYTE(v16) = a2;
      unsigned int v15 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unsigned int v15 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v15++ = v13 | 0x80;
        unint64_t v16 = v13 >> 7;
        unint64_t v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *unsigned int v15 = v16;
    int v18 = v15 - v14 + 1;
    *((void *)a3 + 1) += v18;
    *((_DWORD *)a3 + 4) -= v18;
  }
  return this;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteInt64(uint64_t this, unint64_t a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = 8 * this;
  if (*((int *)a3 + 4) < 5)
  {
    this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
    int v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    uint64_t v7 = *((void *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = 8 * this;
      unint64_t v8 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unint64_t v8 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        unsigned int v9 = v6 >> 7;
        unsigned int v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    unsigned char *v8 = v9;
    int v12 = v8 - v7 + 1;
    *((void *)a3 + 1) += v12;
    int v11 = *((_DWORD *)a3 + 4) - v12;
    *((_DWORD *)a3 + 4) = v11;
  }
  if (v11 < 10)
  {
    return _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a3, a2);
  }
  else
  {
    uint64_t v13 = *((void *)a3 + 1);
    if (a2 < 0x80)
    {
      LOBYTE(v15) = a2;
      uint64_t v14 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      uint64_t v14 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v14++ = a2 | 0x80;
        unint64_t v15 = a2 >> 7;
        unint64_t v16 = a2 >> 14;
        a2 >>= 7;
      }
      while (v16);
    }
    *uint64_t v14 = v15;
    int v17 = v14 - v13 + 1;
    *((void *)a3 + 1) += v17;
    *((_DWORD *)a3 + 4) -= v17;
  }
  return this;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(uint64_t this, unsigned int a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = 8 * this;
  if (*((int *)a3 + 4) < 5)
  {
    this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
    int v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    uint64_t v7 = *((void *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = 8 * this;
      unint64_t v8 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unint64_t v8 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        unsigned int v9 = v6 >> 7;
        unsigned int v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    unsigned char *v8 = v9;
    int v12 = v8 - v7 + 1;
    *((void *)a3 + 1) += v12;
    int v11 = *((_DWORD *)a3 + 4) - v12;
    *((_DWORD *)a3 + 4) = v11;
  }
  if (v11 < 5)
  {
    return _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, a2);
  }
  else
  {
    uint64_t v13 = *((void *)a3 + 1);
    if (a2 < 0x80)
    {
      LOBYTE(v15) = a2;
      uint64_t v14 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      uint64_t v14 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v14++ = a2 | 0x80;
        unsigned int v15 = a2 >> 7;
        unsigned int v16 = a2 >> 14;
        a2 >>= 7;
      }
      while (v16);
    }
    *uint64_t v14 = v15;
    int v17 = v14 - v13 + 1;
    *((void *)a3 + 1) += v17;
    *((_DWORD *)a3 + 4) -= v17;
  }
  return this;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteFloat(_tc_google::protobuf::internal::WireFormatLite *this, _tc_google::protobuf::io::CodedOutputStream *a2, float a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = (8 * this) | 5;
  if (*((int *)a2 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v6);
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = (8 * (_BYTE)this) | 5;
      unint64_t v8 = (unsigned char *)*((void *)a2 + 1);
    }
    else
    {
      unint64_t v8 = (unsigned char *)*((void *)a2 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        unsigned int v9 = v6 >> 7;
        unsigned int v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    unsigned char *v8 = v9;
    int v11 = v8 - v7 + 1;
    *((void *)a2 + 1) += v11;
    *((_DWORD *)a2 + 4) -= v11;
  }
  return _tc_google::protobuf::io::CodedOutputStream::WriteLittleEndian32((uint64_t)a2, SLODWORD(a3));
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteDouble(_tc_google::protobuf::internal::WireFormatLite *this, _tc_google::protobuf::io::CodedOutputStream *a2, double a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = (8 * this) | 1;
  if (*((int *)a2 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v6);
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = (8 * (_BYTE)this) | 1;
      unint64_t v8 = (unsigned char *)*((void *)a2 + 1);
    }
    else
    {
      unint64_t v8 = (unsigned char *)*((void *)a2 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        unsigned int v9 = v6 >> 7;
        unsigned int v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    unsigned char *v8 = v9;
    int v11 = v8 - v7 + 1;
    *((void *)a2 + 1) += v11;
    *((_DWORD *)a2 + 4) -= v11;
  }
  return _tc_google::protobuf::io::CodedOutputStream::WriteLittleEndian64((uint64_t)a2, *(uint64_t *)&a3);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteBool(uint64_t this, unsigned int a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = 8 * this;
  if (*((int *)a3 + 4) < 5)
  {
    this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
    int v11 = *((_DWORD *)a3 + 4);
  }
  else
  {
    uint64_t v7 = *((void *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = 8 * this;
      unint64_t v8 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unint64_t v8 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        unsigned int v9 = v6 >> 7;
        unsigned int v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    unsigned char *v8 = v9;
    int v12 = v8 - v7 + 1;
    *((void *)a3 + 1) += v12;
    int v11 = *((_DWORD *)a3 + 4) - v12;
    *((_DWORD *)a3 + 4) = v11;
  }
  if (v11 < 5)
  {
    return _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, a2);
  }
  else
  {
    *(unsigned char *)(*((void *)a3 + 1))++ = a2;
    --*((_DWORD *)a3 + 4);
  }
  return this;
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteString(int a1, uint64_t a2, _tc_google::protobuf::io::CodedOutputStream *this)
{
  unsigned int v5 = (8 * a1) | 2;
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v5);
  }
  else
  {
    uint64_t v6 = *((void *)this + 1);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      uint64_t v7 = (unsigned char *)*((void *)this + 1);
    }
    else
    {
      uint64_t v7 = (unsigned char *)*((void *)this + 1);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *((void *)this + 1) += v10;
    *((_DWORD *)this + 4) -= v10;
  }
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(void *)(a2 + 8) >> 31)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/wire_format_lite.cc", 510);
    int v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (_tc_google::protobuf::internal::LogMessage *)v12);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    LOBYTE(v11) = *(unsigned char *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
  }
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v13);
  }
  else
  {
    uint64_t v14 = *((void *)this + 1);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      unsigned int v15 = (unsigned char *)*((void *)this + 1);
    }
    else
    {
      unsigned int v15 = (unsigned char *)*((void *)this + 1);
      do
      {
        *v15++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *unsigned int v15 = v16;
    int v18 = v15 - v14 + 1;
    *((void *)this + 1) += v18;
    *((_DWORD *)this + 4) -= v18;
  }
  int v19 = *(char *)(a2 + 23);
  if (v19 >= 0) {
    unsigned __int8 v20 = (char *)a2;
  }
  else {
    unsigned __int8 v20 = *(char **)a2;
  }
  if (v19 >= 0) {
    int v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v21 = *(_DWORD *)(a2 + 8);
  }
  return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, v20, v21);
}

void sub_22427AEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(int a1, uint64_t a2, _tc_google::protobuf::io::CodedOutputStream *this)
{
  unsigned int v5 = (8 * a1) | 2;
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v5);
  }
  else
  {
    uint64_t v6 = *((void *)this + 1);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      uint64_t v7 = (unsigned char *)*((void *)this + 1);
    }
    else
    {
      uint64_t v7 = (unsigned char *)*((void *)this + 1);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *((void *)this + 1) += v10;
    *((_DWORD *)this + 4) -= v10;
  }
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(void *)(a2 + 8) >> 31)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/wire_format_lite.cc", 519);
    int v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (_tc_google::protobuf::internal::LogMessage *)v12);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    LOBYTE(v11) = *(unsigned char *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
  }
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v13);
  }
  else
  {
    uint64_t v14 = *((void *)this + 1);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      unsigned int v15 = (unsigned char *)*((void *)this + 1);
    }
    else
    {
      unsigned int v15 = (unsigned char *)*((void *)this + 1);
      do
      {
        *v15++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *unsigned int v15 = v16;
    int v18 = v15 - v14 + 1;
    *((void *)this + 1) += v18;
    *((_DWORD *)this + 4) -= v18;
  }
  int v19 = *(char *)(a2 + 23);
  if (v19 >= 0) {
    unsigned __int8 v20 = (char *)a2;
  }
  else {
    unsigned __int8 v20 = *(char **)a2;
  }
  if (v19 >= 0) {
    uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v21 = *(unsigned int *)(a2 + 8);
  }
  if (*((unsigned char *)this + 25)) {
    return _tc_google::protobuf::io::CodedOutputStream::WriteAliasedRaw(this, v20, v21);
  }
  else {
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, v20, v21);
  }
}

void sub_22427B0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(int a1, uint64_t a2, _tc_google::protobuf::io::CodedOutputStream *this)
{
  unsigned int v5 = (8 * a1) | 2;
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v5);
  }
  else
  {
    uint64_t v6 = *((void *)this + 1);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      uint64_t v7 = (unsigned char *)*((void *)this + 1);
    }
    else
    {
      uint64_t v7 = (unsigned char *)*((void *)this + 1);
      do
      {
        *v7++ = v5 | 0x80;
        unsigned int v8 = v5 >> 7;
        unsigned int v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *uint64_t v7 = v8;
    int v10 = v7 - v6 + 1;
    *((void *)this + 1) += v10;
    *((_DWORD *)this + 4) -= v10;
  }
  int v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(void *)(a2 + 8) >> 31)
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/wire_format_lite.cc", 534);
    int v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (_tc_google::protobuf::internal::LogMessage *)v12);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    LOBYTE(v11) = *(unsigned char *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
  }
  if (*((int *)this + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(this, v13);
  }
  else
  {
    uint64_t v14 = *((void *)this + 1);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      unsigned int v15 = (unsigned char *)*((void *)this + 1);
    }
    else
    {
      unsigned int v15 = (unsigned char *)*((void *)this + 1);
      do
      {
        *v15++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *unsigned int v15 = v16;
    int v18 = v15 - v14 + 1;
    *((void *)this + 1) += v18;
    *((_DWORD *)this + 4) -= v18;
  }
  int v19 = *(char *)(a2 + 23);
  if (v19 >= 0) {
    unsigned __int8 v20 = (char *)a2;
  }
  else {
    unsigned __int8 v20 = *(char **)a2;
  }
  if (v19 >= 0) {
    uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v21 = *(unsigned int *)(a2 + 8);
  }
  if (*((unsigned char *)this + 25)) {
    return _tc_google::protobuf::io::CodedOutputStream::WriteAliasedRaw(this, v20, v21);
  }
  else {
    return _tc_google::protobuf::io::CodedOutputStream::WriteRaw(this, v20, v21);
  }
}

void sub_22427B294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteMessage(_tc_google::protobuf::internal::WireFormatLite *this, uint64_t a2, const _tc_google::protobuf::MessageLite *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = (8 * this) | 2;
  if (*((int *)a3 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
  }
  else
  {
    uint64_t v7 = *((void *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = (8 * (_BYTE)this) | 2;
      unsigned int v8 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unsigned int v8 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        unsigned int v9 = v6 >> 7;
        unsigned int v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    unsigned char *v8 = v9;
    int v11 = v8 - v7 + 1;
    *((void *)a3 + 1) += v11;
    *((_DWORD *)a3 + 4) -= v11;
  }
  unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  unsigned int v13 = v12;
  if (*((int *)a3 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v12);
  }
  else
  {
    uint64_t v14 = *((void *)a3 + 1);
    if (v12 < 0x80)
    {
      LOBYTE(v16) = v12;
      unsigned int v15 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unsigned int v15 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v15++ = v13 | 0x80;
        unsigned int v16 = v13 >> 7;
        unsigned int v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *unsigned int v15 = v16;
    int v18 = v15 - v14 + 1;
    *((void *)a3 + 1) += v18;
    *((_DWORD *)a3 + 4) -= v18;
  }
  int v19 = *(uint64_t (**)(uint64_t, const _tc_google::protobuf::MessageLite *))(*(void *)a2 + 104);
  return v19(a2, a3);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(_tc_google::protobuf::internal::WireFormatLite *this, uint64_t a2, const _tc_google::protobuf::MessageLite *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = (8 * this) | 2;
  if (*((int *)a3 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v6);
  }
  else
  {
    uint64_t v7 = *((void *)a3 + 1);
    if (v6 < 0x80)
    {
      LOBYTE(v9) = (8 * (_BYTE)this) | 2;
      unsigned int v8 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unsigned int v8 = (unsigned char *)*((void *)a3 + 1);
      do
      {
        *v8++ = v6 | 0x80;
        unsigned int v9 = v6 >> 7;
        unsigned int v10 = v6 >> 14;
        v6 >>= 7;
      }
      while (v10);
    }
    unsigned char *v8 = v9;
    int v11 = v8 - v7 + 1;
    *((void *)a3 + 1) += v11;
    *((_DWORD *)a3 + 4) -= v11;
  }
  unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  signed int v13 = v12;
  if (*((int *)a3 + 4) < 5)
  {
    _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a3, v12);
    int v19 = *((_DWORD *)a3 + 4);
  }
  else
  {
    uint64_t v14 = *((void *)a3 + 1);
    if (v12 < 0x80)
    {
      LOBYTE(v17) = v12;
      unsigned int v15 = (unsigned char *)*((void *)a3 + 1);
    }
    else
    {
      unsigned int v15 = (unsigned char *)*((void *)a3 + 1);
      unsigned int v16 = v12;
      do
      {
        *v15++ = v16 | 0x80;
        unsigned int v17 = v16 >> 7;
        unsigned int v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
    }
    *unsigned int v15 = v17;
    int v20 = v15 - v14 + 1;
    *((void *)a3 + 1) += v20;
    int v19 = *((_DWORD *)a3 + 4) - v20;
    *((_DWORD *)a3 + 4) = v19;
  }
  BOOL v21 = __OFSUB__(v19, v13);
  int v22 = v19 - v13;
  if (v22 < 0 != v21 || (uint64_t v23 = *((void *)a3 + 1), *((void *)a3 + 1) = v23 + v13, *((_DWORD *)a3 + 4) = v22, !v23))
  {
    uint64_t v25 = *(uint64_t (**)(uint64_t, const _tc_google::protobuf::MessageLite *))(*(void *)a2 + 104);
    return v25(a2, a3);
  }
  else
  {
    if (*((unsigned char *)a3 + 26)) {
      BOOL v24 = *((unsigned char *)a3 + 27) == 0;
    }
    else {
      BOOL v24 = _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ == 0;
    }
    uint64_t v27 = !v24;
    long long v28 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 128);
    return v28(a2, v27);
  }
}

BOOL _tc_google::protobuf::internal::WireFormatLite::ReadBytes(char **this, std::string *a2)
{
  unsigned int v5 = *this;
  int v4 = this[1];
  if (*this >= v4)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    std::string::size_type v6 = *v5;
    if ((*v5 & 0x80000000) == 0)
    {
      uint64_t v7 = (unsigned __int8 *)(v5 + 1);
      *this = (char *)v7;
      goto LABEL_4;
    }
  }
  uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)this, v6);
  if ((Varint32Fallback & 0x8000000080000000) != 0) {
    return 0;
  }
  std::string::size_type v6 = Varint32Fallback;
  uint64_t v7 = (unsigned __int8 *)*this;
  int v4 = this[1];
LABEL_4:
  if ((int)v6 <= (int)v4 - (int)v7)
  {
    size_t v9 = v6;
    std::string::resize(a2, v6, 0);
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
      a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    memcpy(a2, *this, v9);
    *this += v9;
    return 1;
  }
  else
  {
    return _tc_google::protobuf::io::CodedInputStream::ReadStringFallback((_tc_google::protobuf::io::CodedInputStream *)this, a2, v6);
  }
}

BOOL _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(_tc_google::protobuf::internal *a1, const char *a2, int a3, uint64_t a4)
{
  BOOL IsStructurallyValidUTF8 = _tc_google::protobuf::internal::IsStructurallyValidUTF8(a1, a2);
  if (!IsStructurallyValidUTF8)
  {
    uint64_t v7 = "serializing";
    if (a3 != 1) {
      uint64_t v7 = 0;
    }
    if (a3) {
      unsigned int v8 = v7;
    }
    else {
      unsigned int v8 = "parsing";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    if (a4)
    {
      _tc_google::protobuf::StringPrintf((_tc_google::protobuf *)" '%s'", v19, a4);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v19[0];
    }
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/wire_format_lite.cc", 629);
    size_t v9 = _tc_google::protobuf::internal::LogMessage::operator<<(v19, "String field");
    unsigned int v10 = _tc_google::protobuf::internal::LogMessage::operator<<(v9, (const std::string::value_type *)&__p);
    int v11 = _tc_google::protobuf::internal::LogMessage::operator<<(v10, " contains invalid ");
    unsigned int v12 = _tc_google::protobuf::internal::LogMessage::operator<<(v11, "UTF-8 data when ");
    signed int v13 = _tc_google::protobuf::internal::LogMessage::operator<<(v12, v8);
    uint64_t v14 = _tc_google::protobuf::internal::LogMessage::operator<<(v13, " a protocol ");
    unsigned int v15 = _tc_google::protobuf::internal::LogMessage::operator<<(v14, "buffer. Use the 'bytes' type if you intend to send raw ");
    unsigned int v16 = _tc_google::protobuf::internal::LogMessage::operator<<(v15, "bytes. ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (_tc_google::protobuf::internal::LogMessage *)v16);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return IsStructurallyValidUTF8;
}

void sub_22427B858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _tc_google::protobuf::internal::WireFormatLite::Int32Size(unsigned int *a1)
{
  uint64_t v1 = *a1;
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v4 = (int *)(*((void *)a1 + 1) + 8);
  do
  {
    int v6 = *v4++;
    int v5 = v6;
    if (v6 < 0) {
      uint64_t v7 = 10;
    }
    else {
      uint64_t v7 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    }
    result += v7;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t jpeg_abort(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t result = (*(uint64_t (**)(void))(v1 + 72))();
    if (*(_DWORD *)(v2 + 32))
    {
      *(_DWORD *)(v2 + 36) = 200;
      *(void *)(v2 + 408) = 0;
    }
    else
    {
      *(_DWORD *)(v2 + 36) = 100;
    }
  }
  return result;
}

uint64_t jpeg_destroy(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  if (v2) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(v2 + 80))(result);
  }
  *(void *)(v1 + 8) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  return result;
}

uint64_t jpeg_alloc_quant_table(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_DWORD *)(result + 128) = 0;
  return result;
}

uint64_t jpeg_alloc_huff_table(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(_DWORD *)(result + 276) = 0;
  return result;
}

uint64_t jpeg_std_huff_table(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4 = a1 + 192;
  if (a2) {
    uint64_t v4 = a1 + 160;
  }
  uint64_t v5 = a1 + 264;
  if (a2) {
    uint64_t v5 = a1 + 232;
  }
  if (*(_DWORD *)(a1 + 32)) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  if (a3 == 1)
  {
    BOOL v7 = a2 == 0;
    if (a2) {
      unsigned int v8 = (char *)&jpeg_std_huff_table_bits_dc_chrominance;
    }
    else {
      unsigned int v8 = (char *)&jpeg_std_huff_table_bits_ac_chrominance;
    }
    size_t v9 = &jpeg_std_huff_table_val_dc_chrominance;
    unsigned int v10 = &jpeg_std_huff_table_val_ac_chrominance;
LABEL_18:
    if (v7) {
      int v11 = v10;
    }
    else {
      int v11 = v9;
    }
    uint64_t v12 = *(void *)(v6 + 8 * a3);
    if (!v12)
    {
      uint64_t v13 = a3;
      uint64_t v12 = (**(uint64_t (***)(uint64_t, void, uint64_t))(a1 + 8))(a1, 0, 280);
      *(_DWORD *)(v12 + 276) = 0;
      *(void *)(v6 + 8 * v13) = v12;
    }
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v8;
    *(unsigned char *)(v12 + 16) = v8[16];
    uint8x16_t v14 = *(uint8x16_t *)(v8 + 1);
    uint16x8_t v15 = vmovl_high_u8(v14);
    uint16x8_t v16 = vmovl_u8(*(uint8x8_t *)v14.i8);
    unsigned int v17 = vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v16.i8, *(uint16x4_t *)v15.i8), (int32x4_t)vaddl_high_u16(v16, v15)));
    size_t v18 = v17;
    if (v17 < 0x101)
    {
      if (!v17)
      {
LABEL_28:
        *(_DWORD *)(v12 + 276) = 0;
        return v12;
      }
    }
    else
    {
      int v19 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v19 + 10) = 9;
      (*v19)(a1);
    }
    memcpy((void *)(v12 + 17), v11, v18);
    goto LABEL_28;
  }
  if (!a3)
  {
    BOOL v7 = a2 == 0;
    if (a2) {
      unsigned int v8 = (char *)&jpeg_std_huff_table_bits_dc_luminance;
    }
    else {
      unsigned int v8 = (char *)&jpeg_std_huff_table_bits_ac_luminance;
    }
    size_t v9 = &jpeg_std_huff_table_val_dc_luminance;
    unsigned int v10 = &jpeg_std_huff_table_val_ac_luminance;
    goto LABEL_18;
  }
  int v20 = *(void (***)(uint64_t))a1;
  *((_DWORD *)v20 + 10) = 52;
  *((_DWORD *)v20 + 11) = a3;
  (**(void (***)(uint64_t))a1)(a1);
  return 0;
}

uint64_t jpeg_CreateDecompress(char *a1, int a2, uint64_t a3)
{
  *((void *)a1 + 1) = 0;
  if (a2 != 90)
  {
    *(void *)(*(void *)a1 + 40) = 0x5A0000000DLL;
    *(_DWORD *)(*(void *)a1 + 48) = a2;
    (**(void (***)(char *))a1)(a1);
  }
  if (a3 != 664)
  {
    *(void *)(*(void *)a1 + 40) = 0x29800000016;
    *(_DWORD *)(*(void *)a1 + 48) = a3;
    (**(void (***)(char *))a1)(a1);
  }
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *((void *)a1 + 3);
  bzero(a1, 0x298uLL);
  *(void *)a1 = v5;
  *((void *)a1 + 3) = v6;
  *((_DWORD *)a1 + 8) = 1;
  jinit_memory_mgr((turi::neural_net::float_scalar *)a1);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 51) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  jinit_marker_reader((uint64_t)a1);
  uint64_t result = jinit_input_controller((uint64_t)a1);
  *((_DWORD *)a1 + 9) = 200;
  return result;
}

uint64_t jpeg_read_header(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 36);
  if ((v4 & 0xFFFFFFFE) != 0xC8)
  {
    uint64_t v5 = *(void (***)(void))a1;
    *((_DWORD *)v5 + 10) = 21;
    *((_DWORD *)v5 + 11) = v4;
    (**(void (***)(uint64_t))a1)(a1);
  }
  uint64_t v6 = jpeg_consume_input((uint64_t *)a1);
  if (v6 == 2)
  {
    if (a2)
    {
      uint64_t v7 = *(void *)a1;
      *(_DWORD *)(v7 + 40) = 53;
      (*(void (**)(uint64_t))v7)(a1);
    }
    jpeg_abort(a1);
  }
  return v6;
}

uint64_t jpeg_consume_input(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 9);
  uint64_t result = 1;
  switch(v2)
  {
    case 200:
      (*(void (**)(uint64_t *))(a1[76] + 8))(a1);
      (*(void (**)(uint64_t *))(a1[5] + 16))(a1);
      *((_DWORD *)a1 + 9) = 201;
      goto LABEL_6;
    case 201:
LABEL_6:
      uint64_t result = (*(uint64_t (**)(uint64_t *))a1[76])(a1);
      if (result != 1) {
        return result;
      }
      int v5 = *((_DWORD *)a1 + 14);
      switch(v5)
      {
        case 1:
          int v12 = 1;
          break;
        case 4:
          if (*((_DWORD *)a1 + 97) && (int v14 = *((unsigned __int8 *)a1 + 392), *((unsigned char *)a1 + 392)))
          {
            if (v14 != 2)
            {
              uint64_t v15 = *a1;
              *(_DWORD *)(v15 + 40) = 116;
              *(_DWORD *)(v15 + 44) = v14;
              (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
            }
            int v12 = 4;
            int v5 = 5;
          }
          else
          {
            int v5 = 4;
            int v12 = 4;
          }
          break;
        case 3:
          uint64_t v6 = (int *)a1[38];
          int v7 = *v6;
          int v8 = v6[24];
          int v9 = v6[48];
          if (v7 != 1 || v8 != 2 || v9 != 3)
          {
            if (v7 == 1 && v8 == 34 && v9 == 35)
            {
              int v12 = 2;
              int v5 = 7;
              break;
            }
            if (v7 == 82 && v8 == 71 && v9 == 66) {
              goto LABEL_33;
            }
            if (v7 == 114 && v8 == 103 && v9 == 98)
            {
              int v12 = 2;
              int v5 = 6;
              break;
            }
            if (!*((_DWORD *)a1 + 94))
            {
              if (*((_DWORD *)a1 + 97))
              {
                int v16 = *((unsigned __int8 *)a1 + 392);
                if (!*((unsigned char *)a1 + 392))
                {
LABEL_33:
                  int v5 = 2;
                  int v12 = 2;
                  break;
                }
                if (v16 != 1)
                {
                  uint64_t v17 = *a1;
                  *(_DWORD *)(v17 + 40) = 116;
                  *(_DWORD *)(v17 + 44) = v16;
                  (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
                }
              }
              else
              {
                uint64_t v18 = *a1;
                *(_DWORD *)(v18 + 48) = v8;
                *(_DWORD *)(v18 + 52) = v9;
                *(_DWORD *)(v18 + 40) = 113;
                *(_DWORD *)(v18 + 44) = v7;
                (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(a1, 1);
              }
            }
          }
          int v12 = 2;
          int v5 = 3;
          break;
        default:
          int v5 = 0;
          int v12 = 0;
          break;
      }
      *((_DWORD *)a1 + 15) = v5;
      *((_DWORD *)a1 + 16) = v12;
      int v19 = *((_DWORD *)a1 + 139);
      *((_DWORD *)a1 + 17) = v19;
      *((_DWORD *)a1 + 18) = v19;
      a1[10] = 0x3FF0000000000000;
      *(_OWORD *)(a1 + 11) = xmmword_2246ECB90;
      *(_OWORD *)(a1 + 13) = xmmword_2246ECBB0;
      a1[20] = 0;
      *(_OWORD *)(a1 + 15) = xmmword_2246ECBC0;
      uint64_t result = 1;
      *((_DWORD *)a1 + 9) = 202;
      return result;
    case 202:
      return result;
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
      int v4 = *(uint64_t (**)(uint64_t *))a1[76];
      return v4(a1);
    default:
      uint64_t v13 = *a1;
      *(_DWORD *)(v13 + 40) = 21;
      *(_DWORD *)(v13 + 44) = v2;
      (*(void (**)(uint64_t *))*a1)(a1);
      return 0;
  }
}

uint64_t jpeg_finish_decompress(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if ((v2 - 205) > 1 || *(_DWORD *)(a1 + 88))
  {
    if (v2 == 210) {
      goto LABEL_10;
    }
    if (v2 != 207)
    {
      uint64_t v3 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v3 + 10) = 21;
      *((_DWORD *)v3 + 11) = v2;
      (**(void (***)(uint64_t))a1)(a1);
      goto LABEL_10;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 168) < *(_DWORD *)(a1 + 140))
    {
      int v4 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v4 + 10) = 69;
      (*v4)(a1);
    }
    (*(void (**)(uint64_t))(*(void *)(a1 + 576) + 8))(a1);
  }
  *(_DWORD *)(a1 + 36) = 210;
LABEL_10:
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 608);
    if (*(_DWORD *)(v5 + 36)) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))v5)(a1);
    if (!result) {
      return result;
    }
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 48))(a1);
  jpeg_abort(a1);
  return 1;
}

uint64_t jpeg_start_decompress(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2 == 204) {
    goto LABEL_22;
  }
  if (v2 != 203)
  {
    if (v2 != 202)
    {
      int v4 = *(void (***)(void))a1;
      *((_DWORD *)v4 + 10) = 21;
      *((_DWORD *)v4 + 11) = v2;
      (**(void (***)(uint64_t))a1)(a1);
LABEL_22:
      return output_pass_setup(a1);
    }
    jinit_master_decompress(a1);
    if (*(_DWORD *)(a1 + 88))
    {
      *(_DWORD *)(a1 + 36) = 207;
      return 1;
    }
    *(_DWORD *)(a1 + 36) = 203;
  }
  if (!*(_DWORD *)(*(void *)(a1 + 608) + 32))
  {
LABEL_21:
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a1 + 172);
    goto LABEL_22;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  while (1)
  {
    if (v5) {
      (*(void (**)(uint64_t))v5)(a1);
    }
    uint64_t result = (**(uint64_t (***)(uint64_t))(a1 + 608))(a1);
    if (!result) {
      return result;
    }
    if (result == 2) {
      goto LABEL_21;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    if ((result & 0xFFFFFFFD) == 1 && v5 != 0)
    {
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 8) + 1;
      *(void *)(v5 + 8) = v8;
      if (v8 >= v7) {
        *(void *)(v5 + 16) = v7 + *(unsigned int *)(a1 + 432);
      }
    }
  }
}

uint64_t output_pass_setup(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 36) != 204)
  {
    (**(void (***)(uint64_t))(a1 + 576))(a1);
    *(_DWORD *)(a1 + 168) = 0;
    *(_DWORD *)(a1 + 36) = 204;
  }
  if (*(_DWORD *)(*(void *)(a1 + 576) + 16))
  {
    unint64_t v2 = *(unsigned int *)(a1 + 168);
    do
    {
      while (1)
      {
        unint64_t v3 = *(unsigned int *)(a1 + 140);
        if (v2 < v3) {
          break;
        }
        (*(void (**)(uint64_t))(*(void *)(a1 + 576) + 8))(a1);
        (**(void (***)(uint64_t))(a1 + 576))(a1);
        unint64_t v2 = 0;
        *(_DWORD *)(a1 + 168) = 0;
        if (!*(_DWORD *)(*(void *)(a1 + 576) + 16)) {
          goto LABEL_12;
        }
      }
      uint64_t v4 = *(void *)(a1 + 16);
      if (v4)
      {
        *(void *)(v4 + 8) = v2;
        *(void *)(v4 + 16) = v3;
        (*(void (**)(uint64_t))v4)(a1);
        unint64_t v2 = *(unsigned int *)(a1 + 168);
      }
      (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)(a1 + 584) + 8))(a1, 0, a1 + 168, 0);
      BOOL v5 = *(unsigned int *)(a1 + 168) == v2;
      unint64_t v2 = *(unsigned int *)(a1 + 168);
    }
    while (!v5);
    return 0;
  }
  else
  {
LABEL_12:
    if (*(_DWORD *)(a1 + 92)) {
      int v6 = 206;
    }
    else {
      int v6 = 205;
    }
    *(_DWORD *)(a1 + 36) = v6;
    return 1;
  }
}

uint64_t jpeg_read_scanlines(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 36);
  if (v6 != 205)
  {
    uint64_t v7 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v7 + 10) = 21;
    *((_DWORD *)v7 + 11) = v6;
    (**(void (***)(uint64_t))a1)(a1);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 168);
  uint64_t v9 = *(unsigned int *)(a1 + 140);
  if (v8 >= v9)
  {
    int v12 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v12 + 10) = 126;
    ((void (*)(uint64_t, uint64_t))v12[1])(a1, 0xFFFFFFFFLL);
    return 0;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    if (v10)
    {
      *(void *)(v10 + 8) = v8;
      *(void *)(v10 + 16) = v9;
      (*(void (**)(uint64_t))v10)(a1);
    }
    unsigned int v13 = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(void *)(a1 + 584) + 8))(a1, a2, &v13, a3);
    uint64_t result = v13;
    *(_DWORD *)(a1 + 168) += v13;
  }
  return result;
}

void CoreML::NeuralNetworkSpecValidator::validateConvolutionLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v168);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v166);
  std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v170) < 0) {
    operator delete((void *)v169);
  }
  long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
  uint64_t v170 = v167;
  if (!CoreML::Result::good((CoreML::Result *)&v168)) {
    goto LABEL_61;
  }
  CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v166);
  std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v170) < 0) {
    operator delete((void *)v169);
  }
  long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
  uint64_t v170 = v167;
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v168);
  if (!v6) {
    goto LABEL_61;
  }
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v164, "Convolution");
    uint64_t v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v164, (uint64_t)v8, (CoreML::Result *)&v166);
    std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0) {
      operator delete((void *)v169);
    }
    long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    uint64_t v170 = v167;
    HIBYTE(v167) = 0;
    v166.__r_.__value_.__s.__data_[8] = 0;
    if (v165 < 0) {
      operator delete(v164[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v168)) {
      goto LABEL_61;
    }
    std::string::basic_string[abi:ne180100]<0>(&v163, "Convolution");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v163, 4, -1, (uint64_t)v8, (uint64_t)&v166);
    std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0) {
      operator delete((void *)v169);
    }
    long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    uint64_t v170 = v167;
    HIBYTE(v167) = 0;
    v166.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    BOOL v6 = CoreML::Result::good((CoreML::Result *)&v168);
    if (!v6) {
      goto LABEL_61;
    }
  }
  else if (*((_DWORD *)a2 + 6) != 1)
  {
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v163, "' does not support weight as input tensor when RANK5_ARRAY_MAPPING == true.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v166.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    goto LABEL_41;
  }
  if (*((_DWORD *)a2 + 35) == 100) {
    uint64_t v9 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v9 = CoreML::Specification::ConvolutionLayerParams::default_instance((CoreML::Specification::ConvolutionLayerParams *)v6);
  }
  if (!*((_DWORD *)v9 + 43))
  {
    std::operator+<char>();
    unsigned int v13 = std::string::append(&v166, "' is not set.");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v166.__r_.__value_.__l.__data_);
    }
    goto LABEL_31;
  }
  if (*((_DWORD *)a2 + 35) == 100) {
    int v12 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v12 = CoreML::Specification::ConvolutionLayerParams::default_instance((CoreML::Specification::ConvolutionLayerParams *)v9);
  }
  int v18 = *((unsigned __int8 *)v12 + 152);
  int v19 = *((_DWORD *)a2 + 6);
  if (*((unsigned char *)v12 + 152) && v19 != 1)
  {
    std::operator+<char>();
    int v20 = std::string::append(&v163, "' does not support weight as input tensor.");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v166.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
LABEL_41:
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    uint64_t v17 = (void *)v166.__r_.__value_.__r.__words[0];
    goto LABEL_43;
  }
  if (v19 != 1)
  {
    int v22 = *((_DWORD *)v12 + 16);
    if (v22 >= 1)
    {
      uint64_t v23 = v12[9];
      if (*(void *)(v23 + 8) > 1uLL || v22 >= 2 && *(void *)(v23 + 16) >= 2uLL)
      {
        std::operator+<char>();
        BOOL v24 = std::string::append(&v163, "' , dilated convolution does not support weight as input tensor.");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v166.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v163.__r_.__value_.__l.__data_);
        }
        goto LABEL_41;
      }
    }
  }
  if ((unint64_t)v12[18] <= 1) {
    uint64_t v26 = 1;
  }
  else {
    uint64_t v26 = v12[18];
  }
  int v27 = *((_DWORD *)v12 + 4);
  if (v27 < 1)
  {
    uint64_t v29 = 3;
  }
  else
  {
    uint64_t v28 = v12[3];
    uint64_t v29 = *(void *)(v28 + 8);
    if (v27 != 1)
    {
      uint64_t v30 = *(void *)(v28 + 16);
      goto LABEL_60;
    }
  }
  uint64_t v30 = 3;
LABEL_60:
  if (v19 > 1)
  {
LABEL_61:
    *(void *)a3 = v168;
    *(_OWORD *)(a3 + 8) = v169;
    *(void *)(a3 + 24) = v170;
    long long v169 = 0uLL;
    uint64_t v170 = 0;
    goto LABEL_62;
  }
  unint64_t v142 = v26;
  unint64_t __val = v12[17];
  unint64_t v147 = v12[16];
  int v31 = *((unsigned __int8 *)v12 + 153);
  if (v19 != 1 && *((unsigned char *)v12 + 153))
  {
    std::operator+<char>();
    unint64_t v32 = std::string::append(&v166, "' with dynamic weight does not support static bias.");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v166.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(&v166, 13);
    std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0) {
      operator delete((void *)v169);
    }
    long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    uint64_t v170 = v167;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v143 = v30;
  unint64_t v144 = v29;
  long long v34 = &CoreML::Specification::_WeightParams_default_instance_;
  if (v12[14]) {
    long long v35 = (CoreML *)v12[14];
  }
  else {
    long long v35 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
  }
  unsigned int v37 = CoreML::valueType(v35, v7);
  if (v12[15]) {
    uint64_t v38 = (CoreML *)v12[15];
  }
  else {
    uint64_t v38 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
  }
  unsigned int v39 = CoreML::valueType(v38, v36);
  unsigned int v40 = v39;
  if (v31) {
    BOOL v41 = v39 == 4;
  }
  else {
    BOOL v41 = 0;
  }
  int v42 = v41;
  if (v37 == 4 || v42)
  {
    std::operator+<char>();
    long long v45 = std::string::append(&v166, "'  has invalid weights/bias fields.");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v166.__r_.__value_.__l.__data_);
    }
LABEL_31:
    CoreML::Result::Result(&v166, 13);
    goto LABEL_32;
  }
  if (v31 && (v37 == 1 && !v39 || !v37 && v39 == 1))
  {
    std::operator+<char>();
    int64_t v43 = std::string::append(&v162, "has unmatched precisions of weights/bias They should either be half or full precision.");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v166, 13);
LABEL_117:
    std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0) {
      operator delete((void *)v169);
    }
    long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    uint64_t v170 = v167;
    HIBYTE(v167) = 0;
    v166.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v162.__r_.__value_.__l.__data_);
    }
    goto LABEL_61;
  }
  unint64_t v47 = v147;
  if (v18) {
    unint64_t v47 = v147 / v142;
  }
  unint64_t v48 = v143 * v144 * v47 * __val;
  if (v37 > 1)
  {
    if (v37 != 2)
    {
      std::operator+<char>();
      v54 = std::string::append(&v162, "has not specified weights.");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v163.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(&v166, 13);
      goto LABEL_117;
    }
    unint64_t __vala = v143 * v144 * v47 * __val;
    if (v12[14]) {
      v52 = (uint64_t *)v12[14];
    }
    else {
      v52 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(&v163, "Convolution");
    uint64_t v53 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(&v162, "weight");
    CoreML::validateGeneralWeightParams((uint64_t)v52, (const CoreML::Specification::WeightParams *)__vala, (const CoreML::Specification::WeightParams *)v147, (const void **)&v163.__r_.__value_.__l.__data_, v53, (uint64_t)&v162, (uint64_t)&v166);
    std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v170) < 0) {
      operator delete((void *)v169);
    }
    long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
    uint64_t v170 = v167;
    HIBYTE(v167) = 0;
    v166.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v162.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v163.__r_.__value_.__l.__data_);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v168)) {
      goto LABEL_61;
    }
  }
  else
  {
    v49 = (uint64_t *)v12[14];
    if (!v49) {
      v49 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    if (v37)
    {
      uint64_t v50 = v49[5];
      if (*(char *)(v50 + 23) < 0) {
        unint64_t v51 = *(void *)(v50 + 8);
      }
      else {
        unint64_t v51 = *(unsigned __int8 *)(v50 + 23);
      }
      unint64_t v56 = v51 >> 1;
    }
    else
    {
      unint64_t v56 = *((int *)v49 + 4);
    }
    if (v56 != v48)
    {
      if (v18)
      {
        std::operator+<char>();
        v60 = std::string::append(&v153, "' has weight matrix of size ");
        long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v152, v56);
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v62 = &v152;
        }
        else {
          v62 = (std::string *)v152.__r_.__value_.__r.__words[0];
        }
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v152.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v152.__r_.__value_.__l.__size_;
        }
        v64 = std::string::append(&v154, (const std::string::value_type *)v62, size);
        long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        v66 = std::string::append(&v155, " to encode a ");
        long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v156.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v151, __val);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v68 = &v151;
        }
        else {
          v68 = (std::string *)v151.__r_.__value_.__r.__words[0];
        }
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v69 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v69 = v151.__r_.__value_.__l.__size_;
        }
        v70 = std::string::append(&v156, (const std::string::value_type *)v68, v69);
        long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        v72 = std::string::append(&v157, " × ");
        long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        v158.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v150, v147 / v142);
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v74 = &v150;
        }
        else {
          v74 = (std::string *)v150.__r_.__value_.__r.__words[0];
        }
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v75 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v75 = v150.__r_.__value_.__l.__size_;
        }
        v76 = std::string::append(&v158, (const std::string::value_type *)v74, v75);
        long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
        v159.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v77;
        v76->__r_.__value_.__l.__size_ = 0;
        v76->__r_.__value_.__r.__words[2] = 0;
        v76->__r_.__value_.__r.__words[0] = 0;
        v78 = std::string::append(&v159, " × ");
        long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        v160.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v149, v144);
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v80 = &v149;
        }
        else {
          v80 = (std::string *)v149.__r_.__value_.__r.__words[0];
        }
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v81 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v81 = v149.__r_.__value_.__l.__size_;
        }
        v82 = std::string::append(&v160, (const std::string::value_type *)v80, v81);
        long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        v161.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v83;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        v84 = std::string::append(&v161, " × ");
        long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        v162.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v148, v143);
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v86 = &v148;
        }
        else {
          v86 = (std::string *)v148.__r_.__value_.__r.__words[0];
        }
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v87 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v87 = v148.__r_.__value_.__l.__size_;
        }
        v88 = std::string::append(&v162, (const std::string::value_type *)v86, v87);
        long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v166.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        v90 = std::string::append(&v166, " convolution.");
        long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        v163.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v166.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v148.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v161.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v149.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v160.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v159.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v150.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v151.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v156.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v152.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v153.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::operator+<char>();
        v93 = std::string::append(&v153, "' has weight matrix of size ");
        long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        v154.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v152, v56);
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v95 = &v152;
        }
        else {
          v95 = (std::string *)v152.__r_.__value_.__r.__words[0];
        }
        if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v96 = HIBYTE(v152.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v96 = v152.__r_.__value_.__l.__size_;
        }
        v97 = std::string::append(&v154, (const std::string::value_type *)v95, v96);
        long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
        v155.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v98;
        v97->__r_.__value_.__l.__size_ = 0;
        v97->__r_.__value_.__r.__words[2] = 0;
        v97->__r_.__value_.__r.__words[0] = 0;
        v99 = std::string::append(&v155, " to encode a ");
        long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v156.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v151, v147);
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v101 = &v151;
        }
        else {
          v101 = (std::string *)v151.__r_.__value_.__r.__words[0];
        }
        if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v102 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v102 = v151.__r_.__value_.__l.__size_;
        }
        v103 = std::string::append(&v156, (const std::string::value_type *)v101, v102);
        long long v104 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
        v157.__r_.__value_.__r.__words[2] = v103->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v104;
        v103->__r_.__value_.__l.__size_ = 0;
        v103->__r_.__value_.__r.__words[2] = 0;
        v103->__r_.__value_.__r.__words[0] = 0;
        v105 = std::string::append(&v157, " × ");
        long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
        v158.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v106;
        v105->__r_.__value_.__l.__size_ = 0;
        v105->__r_.__value_.__r.__words[2] = 0;
        v105->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v150, __val);
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v107 = &v150;
        }
        else {
          v107 = (std::string *)v150.__r_.__value_.__r.__words[0];
        }
        if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v108 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v108 = v150.__r_.__value_.__l.__size_;
        }
        v109 = std::string::append(&v158, (const std::string::value_type *)v107, v108);
        long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        v159.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v110;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        v111 = std::string::append(&v159, " × ");
        long long v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        v160.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v149, v144);
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v113 = &v149;
        }
        else {
          v113 = (std::string *)v149.__r_.__value_.__r.__words[0];
        }
        if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v114 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v114 = v149.__r_.__value_.__l.__size_;
        }
        v115 = std::string::append(&v160, (const std::string::value_type *)v113, v114);
        long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        v161.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        v117 = std::string::append(&v161, " × ");
        long long v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
        v162.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v118;
        v117->__r_.__value_.__l.__size_ = 0;
        v117->__r_.__value_.__r.__words[2] = 0;
        v117->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v148, v143);
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v119 = &v148;
        }
        else {
          v119 = (std::string *)v148.__r_.__value_.__r.__words[0];
        }
        if ((v148.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v120 = HIBYTE(v148.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v120 = v148.__r_.__value_.__l.__size_;
        }
        v121 = std::string::append(&v162, (const std::string::value_type *)v119, v120);
        long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
        v166.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v122;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        v123 = std::string::append(&v166, " convolution.");
        long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        v163.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v166.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v148.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v162.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v161.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v149.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v160.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v159.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v150.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v158.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v151.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v156.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v155.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v152.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v154.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v153.__r_.__value_.__l.__data_);
        }
      }
      CoreML::Result::Result(&v166, 13);
      goto LABEL_32;
    }
  }
  if (!v31) {
    goto LABEL_61;
  }
  if (v40 > 1)
  {
    if (v40 == 2)
    {
      if (v12[15]) {
        long long v34 = (uint64_t *)v12[15];
      }
      std::string::basic_string[abi:ne180100]<0>(&v163, "Convolution");
      uint64_t v92 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v162, "bias");
      CoreML::validateGeneralWeightParams((uint64_t)v34, (const CoreML::Specification::WeightParams *)v147, (const CoreML::Specification::WeightParams *)1, (const void **)&v163.__r_.__value_.__l.__data_, v92, (uint64_t)&v162, (uint64_t)&v166);
      std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v170) < 0) {
        operator delete((void *)v169);
      }
      long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
      uint64_t v170 = v167;
      HIBYTE(v167) = 0;
      v166.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v162.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v163.__r_.__value_.__l.__data_);
      }
      CoreML::Result::good((CoreML::Result *)&v168);
      goto LABEL_61;
    }
    std::operator+<char>();
    v125 = std::string::append(&v162, "has not specified bias.");
    long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v166, 13);
    goto LABEL_117;
  }
  v57 = (uint64_t *)v12[15];
  if (!v57) {
    v57 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v40)
  {
    uint64_t v58 = v57[5];
    if (*(char *)(v58 + 23) < 0) {
      unint64_t v59 = *(void *)(v58 + 8);
    }
    else {
      unint64_t v59 = *(unsigned __int8 *)(v58 + 23);
    }
    unint64_t v127 = v59 >> 1;
  }
  else
  {
    unint64_t v127 = *((int *)v57 + 4);
  }
  if (v127 == v147) {
    goto LABEL_61;
  }
  std::operator+<char>();
  v128 = std::string::append(&v159, "' has a bias vector of size ");
  long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
  v160.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v160.__r_.__value_.__l.__data_ = v129;
  v128->__r_.__value_.__l.__size_ = 0;
  v128->__r_.__value_.__r.__words[2] = 0;
  v128->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v158, v127);
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v130 = &v158;
  }
  else {
    v130 = (std::string *)v158.__r_.__value_.__r.__words[0];
  }
  if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v131 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v131 = v158.__r_.__value_.__l.__size_;
  }
  v132 = std::string::append(&v160, (const std::string::value_type *)v130, v131);
  long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
  v161.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v133;
  v132->__r_.__value_.__l.__size_ = 0;
  v132->__r_.__value_.__r.__words[2] = 0;
  v132->__r_.__value_.__r.__words[0] = 0;
  v134 = std::string::append(&v161, " but should be ");
  long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
  v162.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v135;
  v134->__r_.__value_.__l.__size_ = 0;
  v134->__r_.__value_.__r.__words[2] = 0;
  v134->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v157, v147);
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v136 = &v157;
  }
  else {
    v136 = (std::string *)v157.__r_.__value_.__r.__words[0];
  }
  if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v137 = HIBYTE(v157.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v137 = v157.__r_.__value_.__l.__size_;
  }
  v138 = std::string::append(&v162, (const std::string::value_type *)v136, v137);
  long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
  v166.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v139;
  v138->__r_.__value_.__l.__size_ = 0;
  v138->__r_.__value_.__r.__words[2] = 0;
  v138->__r_.__value_.__r.__words[0] = 0;
  v140 = std::string::append(&v166, ".");
  long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
  v163.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v141;
  v140->__r_.__value_.__l.__size_ = 0;
  v140->__r_.__value_.__r.__words[2] = 0;
  v140->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v157.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v162.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v161.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v158.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v159.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result(&v166, 13);
LABEL_32:
  std::string::size_type v15 = v166.__r_.__value_.__r.__words[0];
  std::string::size_type v168 = v166.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v170) < 0)
  {
    operator delete((void *)v169);
    std::string::size_type v15 = v168;
  }
  long long v169 = *(_OWORD *)&v166.__r_.__value_.__r.__words[1];
  uint64_t v16 = v167;
  *(void *)a3 = v15;
  *(_OWORD *)(a3 + 8) = v169;
  *(void *)(a3 + 24) = v16;
  long long v169 = 0uLL;
  uint64_t v170 = 0;
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v17 = (void *)v163.__r_.__value_.__r.__words[0];
LABEL_43:
    operator delete(v17);
  }
LABEL_62:
  if (SHIBYTE(v170) < 0) {
    operator delete((void *)v169);
  }
}

void sub_22427D600(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 185) < 0) {
    operator delete(*(void **)(v1 - 208));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

void CoreML::validateInputCount(CoreML *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, int a3@<W2>, CoreML::Result *a4@<X8>)
{
  int v5 = (int)a2;
  v82[2] = *MEMORY[0x263EF8340];
  v80 = 0;
  long long v81 = 0uLL;
  if (a3 >= 1 && a3 == a2 && *((_DWORD *)this + 6) != a3)
  {
    int v12 = (long long *)*((void *)this + 14);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v13 = *v12;
      v72.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v13;
    }
    long long v14 = std::string::insert(&v72, 0, "Layer '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v73, "' of type ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)this + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &v71;
    }
    else {
      int v18 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v71.__r_.__value_.__l.__size_;
    }
    int v20 = std::string::append(&v74, (const std::string::value_type *)v18, size);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = std::string::append(&v75, " has ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)this + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v24 = &v70;
    }
    else {
      BOOL v24 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = v70.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = std::string::append(&v76, (const std::string::value_type *)v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = std::string::append(&v77, " inputs but expects exactly ");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a3);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v69;
    }
    else {
      uint64_t v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v69.__r_.__value_.__l.__size_;
    }
  }
  else if ((int)a2 < 1 || *((_DWORD *)this + 6) >= (int)a2)
  {
    if (a3 < 1 || *((_DWORD *)this + 6) <= a3)
    {
      CoreML::Result::Result(a4);
      goto LABEL_97;
    }
    uint64_t v10 = (long long *)*((void *)this + 14);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      v72.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v11;
    }
    unint64_t v48 = std::string::insert(&v72, 0, "Layer '");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    uint64_t v50 = std::string::append(&v73, "' of type ");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)this + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v52 = &v71;
    }
    else {
      v52 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v53 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v53 = v71.__r_.__value_.__l.__size_;
    }
    v54 = std::string::append(&v74, (const std::string::value_type *)v52, v53);
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    unint64_t v56 = std::string::append(&v75, " has ");
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)this + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v58 = &v70;
    }
    else {
      uint64_t v58 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v59 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v59 = v70.__r_.__value_.__l.__size_;
    }
    v60 = std::string::append(&v76, (const std::string::value_type *)v58, v59);
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&v77, " inputs but expects at most ");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, a3);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v69;
    }
    else {
      uint64_t v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v69.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    uint64_t v8 = (long long *)*((void *)this + 14);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      v72.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v9;
    }
    unint64_t v32 = std::string::insert(&v72, 0, "Layer '");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    long long v34 = std::string::append(&v73, "' of type ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v71, *((_DWORD *)this + 35));
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &v71;
    }
    else {
      uint64_t v36 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v37 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v37 = v71.__r_.__value_.__l.__size_;
    }
    uint64_t v38 = std::string::append(&v74, (const std::string::value_type *)v36, v37);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    unsigned int v40 = std::string::append(&v75, " has ");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v70, *((_DWORD *)this + 6));
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v42 = &v70;
    }
    else {
      int v42 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = v70.__r_.__value_.__l.__size_;
    }
    long long v44 = std::string::append(&v76, (const std::string::value_type *)v42, v43);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    long long v46 = std::string::append(&v77, " inputs but expects at least ");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v69, v5);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v69;
    }
    else {
      uint64_t v30 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v31 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v31 = v69.__r_.__value_.__l.__size_;
    }
  }
  v64 = std::string::append(&v78, (const std::string::value_type *)v30, v31);
  long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v79, ".");
  long long v67 = (void *)v66->__r_.__value_.__r.__words[0];
  v82[0] = v66->__r_.__value_.__l.__size_;
  *(void *)((char *)v82 + 7) = *(std::string::size_type *)((char *)&v66->__r_.__value_.__r.__words[1] + 7);
  char v68 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v81) < 0) {
    operator delete(v80);
  }
  v80 = v67;
  *(void *)&long long v81 = v82[0];
  *(void *)((char *)&v81 + 7) = *(void *)((char *)v82 + 7);
  HIBYTE(v81) = v68;
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v70.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result(a4, 13);
LABEL_97:
  if (SHIBYTE(v81) < 0) {
    operator delete(v80);
  }
}

void sub_22427E0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 73) < 0) {
    operator delete(*(void **)(v61 - 96));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateOutputCount(CoreML *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, int a3@<W2>, CoreML::Result *a4@<X8>)
{
  int v5 = (int)a2;
  v69[2] = *MEMORY[0x263EF8340];
  long long v67 = 0;
  long long v68 = 0uLL;
  if (a3 >= 1 && a3 == a2 && *((_DWORD *)this + 12) != a3)
  {
    std::operator+<char>();
    uint64_t v38 = std::string::append(&v60, "' of type ");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v59, *((_DWORD *)this + 35));
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v40 = &v59;
    }
    else {
      unsigned int v40 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v59.__r_.__value_.__l.__size_;
    }
    int v42 = std::string::append(&v61, (const std::string::value_type *)v40, size);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    long long v44 = std::string::append(&v62, " has ");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, *((_DWORD *)this + 12));
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v46 = &v58;
    }
    else {
      long long v46 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v47 = v58.__r_.__value_.__l.__size_;
    }
    unint64_t v48 = std::string::append(&v63, (const std::string::value_type *)v46, v47);
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    uint64_t v50 = std::string::append(&v64, " outputs but expects exactly ");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
    }
  }
  else if ((int)a2 < 1 || *((_DWORD *)this + 12) >= (int)a2)
  {
    if (a3 < 1 || *((_DWORD *)this + 12) <= a3)
    {
      CoreML::Result::Result(a4);
      goto LABEL_86;
    }
    std::operator+<char>();
    BOOL v24 = std::string::append(&v60, "' of type ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v59, *((_DWORD *)this + 35));
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v59;
    }
    else {
      uint64_t v26 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v27 = v59.__r_.__value_.__l.__size_;
    }
    uint64_t v28 = std::string::append(&v61, (const std::string::value_type *)v26, v27);
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    uint64_t v30 = std::string::append(&v62, " has ");
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, *((_DWORD *)this + 12));
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v32 = &v58;
    }
    else {
      unint64_t v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v58.__r_.__value_.__l.__size_;
    }
    long long v34 = std::string::append(&v63, (const std::string::value_type *)v32, v33);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    uint64_t v36 = std::string::append(&v64, " outputs but expects at most ");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v60, "' of type ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v59, *((_DWORD *)this + 35));
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v59;
    }
    else {
      uint64_t v10 = (std::string *)v59.__r_.__value_.__r.__words[0];
    }
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v11 = v59.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v61, (const std::string::value_type *)v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = std::string::append(&v62, " has ");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v58, *((_DWORD *)this + 12));
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v58;
    }
    else {
      uint64_t v16 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v17 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v17 = v58.__r_.__value_.__l.__size_;
    }
    int v18 = std::string::append(&v63, (const std::string::value_type *)v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = std::string::append(&v64, " outputs but expects at least ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v5);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
    }
  }
  v52 = std::string::append(&v65, (const std::string::value_type *)p_p, v23);
  long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  v54 = std::string::append(&v66, ".");
  long long v55 = (void *)v54->__r_.__value_.__r.__words[0];
  v69[0] = v54->__r_.__value_.__l.__size_;
  *(void *)((char *)v69 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
  char v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
  v54->__r_.__value_.__l.__size_ = 0;
  v54->__r_.__value_.__r.__words[2] = 0;
  v54->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v68) < 0) {
    operator delete(v67);
  }
  long long v67 = v55;
  *(void *)&long long v68 = v69[0];
  *(void *)((char *)&v68 + 7) = *(void *)((char *)v69 + 7);
  HIBYTE(v68) = v56;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v66.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result(a4, 13);
LABEL_86:
  if (SHIBYTE(v68) < 0) {
    operator delete(v67);
  }
}

void sub_22427E870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v59 - 137) < 0) {
    operator delete(*(void **)(v59 - 160));
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v59 - 73) < 0) {
    operator delete(*(void **)(v59 - 96));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateInputOutputRankEquality(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CoreML::Result *a4@<X8>)
{
  v30[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = a3 + 8;
  if (a3 + 8 == std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, *(const void ***)(a1[4] + 8))|| v8 == std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, *(const void ***)(a1[7] + 8))|| (int v9 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a3, *(const void ***)(a1[4] + 8)), v9 == *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a3, *(const void ***)(a1[7] + 8))))
  {
    CoreML::Result::Result(a4);
  }
  else
  {
    uint64_t v28 = 0;
    long long v29 = 0uLL;
    uint64_t v10 = (long long *)a1[14];
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      __p.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    }
    int v12 = std::string::insert(&__p, 0, "Layer '");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = std::string::append(&v25, "' of type '");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    int v16 = *(char *)(a2 + 23);
    if (v16 >= 0) {
      std::string::size_type v17 = (const std::string::value_type *)a2;
    }
    else {
      std::string::size_type v17 = *(const std::string::value_type **)a2;
    }
    if (v16 >= 0) {
      std::string::size_type v18 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v18 = *(void *)(a2 + 8);
    }
    long long v19 = std::string::append(&v26, v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    long long v21 = std::string::append(&v27, "' expects equal ranks for its input and output, but they are not equal.");
    int v22 = (void *)v21->__r_.__value_.__r.__words[0];
    v30[0] = v21->__r_.__value_.__l.__size_;
    *(void *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v29 + 7) = *(void *)((char *)v30 + 7);
    uint64_t v28 = v22;
    *(void *)&long long v29 = v30[0];
    HIBYTE(v29) = v23;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(a4, 13);
    if (SHIBYTE(v29) < 0) {
      operator delete(v28);
    }
  }
}

void sub_22427EC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void CoreML::validateRankCount(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a6);
  if (a5 + 8 != std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a5, *(const void ***)(*(void *)(a1 + 32) + 8)))
  {
    int v12 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a5, *(const void ***)(*(void *)(a1 + 32) + 8));
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    CoreML::checkRank(a2, a3, a4, (uint64_t)__p, v12, (CoreML::Result *)&v18);
    *(void *)a6 = v18;
    long long v13 = (void **)(a6 + 8);
    if (*(char *)(a6 + 31) < 0) {
      operator delete(*v13);
    }
    *(_OWORD *)long long v13 = v19;
    *(void *)(a6 + 24) = v20;
    HIBYTE(v20) = 0;
    LOBYTE(v19) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  if (CoreML::Result::good((CoreML::Result *)a6)
    && a5 + 8 != std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a5, *(const void ***)(*(void *)(a1 + 56) + 8)))
  {
    int v14 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a5, *(const void ***)(*(void *)(a1 + 56) + 8));
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    CoreML::checkRank(a2, a3, a4, (uint64_t)__p, v14, (CoreML::Result *)&v18);
    *(void *)a6 = v18;
    long long v15 = (void **)(a6 + 8);
    if (*(char *)(a6 + 31) < 0) {
      operator delete(*v15);
    }
    *(_OWORD *)long long v15 = v19;
    *(void *)(a6 + 24) = v20;
    HIBYTE(v20) = 0;
    LOBYTE(v19) = 0;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_22427EE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::valueType(CoreML *this, const CoreML::Specification::WeightParams *a2)
{
  uint64_t v2 = *((void *)this + 5);
  if (*(char *)(v2 + 23) < 0) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  }
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  if (*(char *)(v4 + 23) < 0) {
    uint64_t v6 = *(void *)(v4 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v4 + 23);
  }
  int v7 = *((_DWORD *)this + 4);
  uint64_t v8 = *((void *)this + 7);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v10 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v8 + 23);
  }
  if (v7 <= 0) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  if (v3) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v7 > 0;
  }
  if (v6) {
    ++v12;
  }
  if (v10) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v13 > 1) {
    return 4;
  }
  if (v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = 5;
  }
  if (v7 <= 0 && v13)
  {
    if ((*(unsigned char *)(v2 + 23) & 0x80) != 0)
    {
      if (*(void *)(v2 + 8)) {
        return 1;
      }
    }
    else if (*(unsigned char *)(v2 + 23))
    {
      return 1;
    }
    if ((v5 & 0x80) != 0) {
      uint64_t v5 = *(void *)(v4 + 8);
    }
    uint64_t v15 = *((void *)this + 8);
    if (this != (CoreML *)&CoreML::Specification::_WeightParams_default_instance_ && v5 && v15)
    {
      return 2;
    }
    else
    {
      if ((v9 & 0x80) != 0) {
        uint64_t v9 = *(void *)(v8 + 8);
      }
      if (v15) {
        BOOL v16 = v9 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16 || this == (CoreML *)&CoreML::Specification::_WeightParams_default_instance_) {
        return 5;
      }
      else {
        return 3;
      }
    }
  }
  return v14;
}

void CoreML::validateGeneralWeightParams(uint64_t a1@<X0>, const CoreML::Specification::WeightParams *a2@<X1>, const CoreML::Specification::WeightParams *a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v141);
  uint64_t v14 = *(void *)(a1 + 40);
  unint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v16 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
  }
  unint64_t v17 = *(int *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0) {
    uint64_t v20 = *(void *)(v18 + 8);
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
  }
  uint64_t v21 = *(void *)(a1 + 56);
  if (*(char *)(v21 + 23) < 0) {
    uint64_t v22 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
  }
  if ((int)v17 <= 0) {
    int v23 = 1;
  }
  else {
    int v23 = 2;
  }
  if (v16) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = (int)v17 > 0;
  }
  if (v20) {
    ++v24;
  }
  if (v22) {
    ++v24;
  }
  if (v24 <= 1)
  {
    if ((int)v17 <= 0 && v24)
    {
      if ((v15 & 0x80) != 0)
      {
        unint64_t v15 = *(void *)(v14 + 8);
        if (v15) {
          goto LABEL_56;
        }
      }
      else if (*(unsigned char *)(v14 + 23))
      {
LABEL_56:
        unint64_t v17 = v15 >> 1;
        goto LABEL_58;
      }
      if ((v19 & 0x80) != 0) {
        uint64_t v19 = *(void *)(v18 + 8);
      }
      if ((uint64_t *)a1 != &CoreML::Specification::_WeightParams_default_instance_ && v19 && *(void *)(a1 + 64))
      {
        if (!CoreML::hasSufficientBytesInQuantizedWeightParam((CoreML *)a1, a2))
        {
          if (*((char *)a4 + 23) >= 0) {
            size_t v106 = *((unsigned __int8 *)a4 + 23);
          }
          else {
            size_t v106 = (size_t)a4[1];
          }
          v107 = &v133;
          std::string::basic_string[abi:ne180100]((uint64_t)&v133, v106 + 7);
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v107 = (std::string *)v133.__r_.__value_.__r.__words[0];
          }
          if (v106)
          {
            if (*((char *)a4 + 23) >= 0) {
              std::string::size_type v108 = a4;
            }
            else {
              std::string::size_type v108 = *a4;
            }
            memmove(v107, v108, v106);
          }
          strcpy((char *)v107 + v106, "Layer '");
          int v109 = *(char *)(a5 + 23);
          if (v109 >= 0) {
            long long v110 = (const std::string::value_type *)a5;
          }
          else {
            long long v110 = *(const std::string::value_type **)a5;
          }
          if (v109 >= 0) {
            std::string::size_type v111 = *(unsigned __int8 *)(a5 + 23);
          }
          else {
            std::string::size_type v111 = *(void *)(a5 + 8);
          }
          long long v112 = std::string::append(&v133, v110, v111);
          long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v134.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v114 = std::string::append(&v134, "' has insufficient bytes for quantized ");
          long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
          v135.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v115;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          int v116 = *(char *)(a6 + 23);
          if (v116 >= 0) {
            v117 = (const std::string::value_type *)a6;
          }
          else {
            v117 = *(const std::string::value_type **)a6;
          }
          if (v116 >= 0) {
            std::string::size_type v118 = *(unsigned __int8 *)(a6 + 23);
          }
          else {
            std::string::size_type v118 = *(void *)(a6 + 8);
          }
          v119 = std::string::append(&v135, v117, v118);
          long long v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
          v136.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v120;
          v119->__r_.__value_.__l.__size_ = 0;
          v119->__r_.__value_.__r.__words[2] = 0;
          v119->__r_.__value_.__r.__words[0] = 0;
          v121 = std::string::append(&v136, " with ");
          long long v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          v137.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v132, (unint64_t)a2);
          if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v123 = &v132;
          }
          else {
            v123 = (std::string *)v132.__r_.__value_.__r.__words[0];
          }
          if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v132.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v132.__r_.__value_.__l.__size_;
          }
          v125 = std::string::append(&v137, (const std::string::value_type *)v123, size);
          long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v126;
          v125->__r_.__value_.__l.__size_ = 0;
          v125->__r_.__value_.__r.__words[2] = 0;
          v125->__r_.__value_.__r.__words[0] = 0;
          unint64_t v127 = std::string::append(&v138, "units.");
          long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          std::string::size_type v140 = v127->__r_.__value_.__r.__words[2];
          long long v139 = v128;
          v127->__r_.__value_.__l.__size_ = 0;
          v127->__r_.__value_.__r.__words[2] = 0;
          v127->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v135.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v134.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result((_DWORD *)a7, 13);
          goto LABEL_185;
        }
        if (!CoreML::hasValidQuantizationParams((CoreML *)a1, a3))
        {
          if (*((char *)a4 + 23) >= 0) {
            size_t v72 = *((unsigned __int8 *)a4 + 23);
          }
          else {
            size_t v72 = (size_t)a4[1];
          }
          std::string v73 = &v135;
          std::string::basic_string[abi:ne180100]((uint64_t)&v135, v72 + 7);
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string v73 = (std::string *)v135.__r_.__value_.__r.__words[0];
          }
          if (v72)
          {
            if (*((char *)a4 + 23) >= 0) {
              std::string v74 = a4;
            }
            else {
              std::string v74 = *a4;
            }
            memmove(v73, v74, v72);
          }
          strcpy((char *)v73 + v72, "Layer '");
          int v75 = *(char *)(a5 + 23);
          if (v75 >= 0) {
            std::string v76 = (const std::string::value_type *)a5;
          }
          else {
            std::string v76 = *(const std::string::value_type **)a5;
          }
          if (v75 >= 0) {
            std::string::size_type v77 = *(unsigned __int8 *)(a5 + 23);
          }
          else {
            std::string::size_type v77 = *(void *)(a5 + 8);
          }
          std::string v78 = std::string::append(&v135, v76, v77);
          long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v136.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v79;
          v78->__r_.__value_.__l.__size_ = 0;
          v78->__r_.__value_.__r.__words[2] = 0;
          v78->__r_.__value_.__r.__words[0] = 0;
          v80 = std::string::append(&v136, "' has invalid quantization parameters for quantized ");
          long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v137.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          int v82 = *(char *)(a6 + 23);
          if (v82 >= 0) {
            long long v83 = (const std::string::value_type *)a6;
          }
          else {
            long long v83 = *(const std::string::value_type **)a6;
          }
          if (v82 >= 0) {
            std::string::size_type v84 = *(unsigned __int8 *)(a6 + 23);
          }
          else {
            std::string::size_type v84 = *(void *)(a6 + 8);
          }
          long long v85 = std::string::append(&v137, v83, v84);
          long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v87 = std::string::append(&v138, ".");
          long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
          std::string::size_type v140 = v87->__r_.__value_.__r.__words[2];
          long long v139 = v88;
          v87->__r_.__value_.__l.__size_ = 0;
          v87->__r_.__value_.__r.__words[2] = 0;
          v87->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v135.__r_.__value_.__l.__data_);
          }
          goto LABEL_184;
        }
LABEL_59:
        uint64_t v42 = v143;
        *(void *)a7 = v141;
        *(_OWORD *)(a7 + 8) = v142;
        *(void *)(a7 + 24) = v42;
        long long v142 = 0uLL;
        uint64_t v143 = 0;
        goto LABEL_187;
      }
    }
    else if (v24)
    {
LABEL_58:
      if ((const CoreML::Specification::WeightParams *)v17 != a2)
      {
        if (*((char *)a4 + 23) >= 0) {
          size_t v43 = *((unsigned __int8 *)a4 + 23);
        }
        else {
          size_t v43 = (size_t)a4[1];
        }
        long long v44 = &v131;
        std::string::basic_string[abi:ne180100]((uint64_t)&v131, v43 + 7);
        if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v44 = (std::string *)v131.__r_.__value_.__r.__words[0];
        }
        if (v43)
        {
          if (*((char *)a4 + 23) >= 0) {
            long long v45 = a4;
          }
          else {
            long long v45 = *a4;
          }
          memmove(v44, v45, v43);
        }
        strcpy((char *)v44 + v43, "Layer '");
        int v46 = *(char *)(a5 + 23);
        if (v46 >= 0) {
          std::string::size_type v47 = (const std::string::value_type *)a5;
        }
        else {
          std::string::size_type v47 = *(const std::string::value_type **)a5;
        }
        if (v46 >= 0) {
          std::string::size_type v48 = *(unsigned __int8 *)(a5 + 23);
        }
        else {
          std::string::size_type v48 = *(void *)(a5 + 8);
        }
        long long v49 = std::string::append(&v131, v47, v48);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v132.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        long long v51 = std::string::append(&v132, "' has incorrect ");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v133.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        int v53 = *(char *)(a6 + 23);
        if (v53 >= 0) {
          v54 = (const std::string::value_type *)a6;
        }
        else {
          v54 = *(const std::string::value_type **)a6;
        }
        if (v53 >= 0) {
          std::string::size_type v55 = *(unsigned __int8 *)(a6 + 23);
        }
        else {
          std::string::size_type v55 = *(void *)(a6 + 8);
        }
        char v56 = std::string::append(&v133, v54, v55);
        long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v134.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        std::string v58 = std::string::append(&v134, " size ");
        long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v135.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v130, v17);
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v60 = &v130;
        }
        else {
          std::string v60 = (std::string *)v130.__r_.__value_.__r.__words[0];
        }
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v61 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v61 = v130.__r_.__value_.__l.__size_;
        }
        std::string v62 = std::string::append(&v135, (const std::string::value_type *)v60, v61);
        long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        std::string v64 = std::string::append(&v136, " (expected ");
        long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v129, (unint64_t)a2);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v66 = &v129;
        }
        else {
          std::string v66 = (std::string *)v129.__r_.__value_.__r.__words[0];
        }
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v67 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v67 = v129.__r_.__value_.__l.__size_;
        }
        long long v68 = std::string::append(&v137, (const std::string::value_type *)v66, v67);
        long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        v138.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        std::string v70 = std::string::append(&v138, ").");
        long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        std::string::size_type v140 = v70->__r_.__value_.__r.__words[2];
        long long v139 = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v138.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v129.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v137.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v136.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v135.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        CoreML::Result::Result((_DWORD *)a7, 13);
        goto LABEL_185;
      }
      goto LABEL_59;
    }
    if (*((char *)a4 + 23) >= 0) {
      size_t v89 = *((unsigned __int8 *)a4 + 23);
    }
    else {
      size_t v89 = (size_t)a4[1];
    }
    v90 = &v135;
    std::string::basic_string[abi:ne180100]((uint64_t)&v135, v89 + 7);
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v90 = (std::string *)v135.__r_.__value_.__r.__words[0];
    }
    if (v89)
    {
      if (*((char *)a4 + 23) >= 0) {
        long long v91 = a4;
      }
      else {
        long long v91 = *a4;
      }
      memmove(v90, v91, v89);
    }
    strcpy((char *)v90 + v89, "Layer '");
    int v92 = *(char *)(a5 + 23);
    if (v92 >= 0) {
      v93 = (const std::string::value_type *)a5;
    }
    else {
      v93 = *(const std::string::value_type **)a5;
    }
    if (v92 >= 0) {
      std::string::size_type v94 = *(unsigned __int8 *)(a5 + 23);
    }
    else {
      std::string::size_type v94 = *(void *)(a5 + 8);
    }
    v95 = std::string::append(&v135, v93, v94);
    long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v136.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    v97 = std::string::append(&v136, "' has empty ");
    long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
    v137.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v98;
    v97->__r_.__value_.__l.__size_ = 0;
    v97->__r_.__value_.__r.__words[2] = 0;
    v97->__r_.__value_.__r.__words[0] = 0;
    int v99 = *(char *)(a6 + 23);
    if (v99 >= 0) {
      long long v100 = (const std::string::value_type *)a6;
    }
    else {
      long long v100 = *(const std::string::value_type **)a6;
    }
    if (v99 >= 0) {
      std::string::size_type v101 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      std::string::size_type v101 = *(void *)(a6 + 8);
    }
    std::string::size_type v102 = std::string::append(&v137, v100, v101);
    long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    v138.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    long long v104 = std::string::append(&v138, ".");
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    std::string::size_type v140 = v104->__r_.__value_.__r.__words[2];
    long long v139 = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v138.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v137.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v136.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    goto LABEL_184;
  }
  if (*((char *)a4 + 23) >= 0) {
    size_t v25 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v25 = (size_t)a4[1];
  }
  std::string v26 = &v135;
  std::string::basic_string[abi:ne180100]((uint64_t)&v135, v25 + 7);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v26 = (std::string *)v135.__r_.__value_.__r.__words[0];
  }
  if (v25)
  {
    if (*((char *)a4 + 23) >= 0) {
      std::string v27 = a4;
    }
    else {
      std::string v27 = *a4;
    }
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, "Layer '");
  int v28 = *(char *)(a5 + 23);
  if (v28 >= 0) {
    long long v29 = (const std::string::value_type *)a5;
  }
  else {
    long long v29 = *(const std::string::value_type **)a5;
  }
  if (v28 >= 0) {
    std::string::size_type v30 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v30 = *(void *)(a5 + 8);
  }
  long long v31 = std::string::append(&v135, v29, v30);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v136.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v33 = std::string::append(&v136, "' has unspecified ");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  int v35 = *(char *)(a6 + 23);
  if (v35 >= 0) {
    uint64_t v36 = (const std::string::value_type *)a6;
  }
  else {
    uint64_t v36 = *(const std::string::value_type **)a6;
  }
  if (v35 >= 0) {
    std::string::size_type v37 = *(unsigned __int8 *)(a6 + 23);
  }
  else {
    std::string::size_type v37 = *(void *)(a6 + 8);
  }
  uint64_t v38 = std::string::append(&v137, v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  unsigned int v40 = std::string::append(&v138, ".");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  std::string::size_type v140 = v40->__r_.__value_.__r.__words[2];
  long long v139 = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v138.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v135.__r_.__value_.__l.__data_);
  }
LABEL_184:
  CoreML::Result::Result((_DWORD *)a7, 13);
LABEL_185:
  if (SHIBYTE(v140) < 0) {
    operator delete((void *)v139);
  }
LABEL_187:
  if (SHIBYTE(v143) < 0) {
    operator delete((void *)v142);
  }
}

void sub_22427FB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (*(char *)(v61 - 81) < 0) {
    operator delete(*(void **)(v61 - 104));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConvolution3DLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v118);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v118);
  if (!v6) {
    goto LABEL_206;
  }
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v114, "Convolution3D");
    int v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v114, (uint64_t)v7, (CoreML::Result *)&v116);
    std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v120) < 0) {
      operator delete((void *)v119);
    }
    long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
    uint64_t v120 = v117;
    HIBYTE(v117) = 0;
    v116.__r_.__value_.__s.__data_[8] = 0;
    if (v115 < 0) {
      operator delete(v114[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v118)) {
      goto LABEL_206;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "Convolution3D");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&__p, 5, -1, (uint64_t)v7, (uint64_t)&v116);
    std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v120) < 0) {
      operator delete((void *)v119);
    }
    long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
    uint64_t v120 = v117;
    HIBYTE(v117) = 0;
    v116.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    BOOL v6 = CoreML::Result::good((CoreML::Result *)&v118);
    if (!v6) {
      goto LABEL_206;
    }
  }
  if (*((_DWORD *)a2 + 35) == 1471) {
    uint64_t v8 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v8 = CoreML::Specification::Convolution3DLayerParams::default_instance((CoreML::Specification::Convolution3DLayerParams *)v6);
  }
  if (*((_DWORD *)a2 + 6) != 1)
  {
    std::operator+<char>();
    long long v34 = std::string::append(&__p, "', convolution3D does not support weight as input tensor.");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_116:
    CoreML::Result::Result((_DWORD *)a3, 13);
LABEL_117:
    if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_207;
    }
    uint64_t v36 = (void *)v116.__r_.__value_.__r.__words[0];
    goto LABEL_119;
  }
  int v9 = *((_DWORD *)v8 + 14);
  int v10 = *((_DWORD *)v8 + 15);
  int v11 = *((_DWORD *)v8 + 16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Input Channels");
  CoreML::validatePositive(v10, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Output Channels");
  CoreML::validatePositive(v9, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Groups");
  CoreML::validatePositive(v11, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  int v12 = *((_DWORD *)v8 + 17);
  int v105 = *((_DWORD *)v8 + 19);
  int v106 = *((_DWORD *)v8 + 18);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Kernel Depth");
  CoreML::validatePositive(v12, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Kernel Height");
  CoreML::validatePositive(v106, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Kernel Width");
  CoreML::validatePositive(v105, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  int v13 = *((_DWORD *)v8 + 20);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Stride Depth");
  CoreML::validatePositive(v13, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  int v14 = *((_DWORD *)v8 + 21);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Stride Height");
  CoreML::validatePositive(v14, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  int v15 = *((_DWORD *)v8 + 22);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Stride Width");
  CoreML::validatePositive(v15, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  int v16 = *((_DWORD *)v8 + 23);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Dilation Depth");
  CoreML::validatePositive(v16, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  int v17 = *((_DWORD *)v8 + 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Dilation Height");
  CoreML::validatePositive(v17, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  int v18 = *((_DWORD *)v8 + 25);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Dilation Width");
  CoreML::validatePositive(v18, (const void **)&__p.__r_.__value_.__l.__data_, (CoreML::Result *)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118)) {
    goto LABEL_206;
  }
  int v20 = *((_DWORD *)v8 + 28);
  if (v20 < 0)
  {
    std::to_string(&v112, v20);
    std::string::size_type v37 = std::string::insert(&v112, 0, "Custom Padding Front must be non-negative, got '");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    long long v39 = std::string::append(&__p, "'.");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    goto LABEL_149;
  }
  int v21 = *((_DWORD *)v8 + 29);
  if (v21 < 0)
  {
    std::to_string(&v112, v21);
    long long v41 = std::string::insert(&v112, 0, "Custom Padding Back must be non-negative, got '");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    size_t v43 = std::string::append(&__p, "'.");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    goto LABEL_149;
  }
  int v22 = *((_DWORD *)v8 + 30);
  if (v22 < 0)
  {
    std::to_string(&v112, v22);
    long long v45 = std::string::insert(&v112, 0, "Custom Padding Top must be non-negative, got '");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v47 = std::string::append(&__p, "'.");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    goto LABEL_149;
  }
  int v23 = *((_DWORD *)v8 + 31);
  if (v23 < 0)
  {
    std::to_string(&v112, v23);
    long long v49 = std::string::insert(&v112, 0, "Custom Padding Bottom must be non-negative, got '");
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    long long v51 = std::string::append(&__p, "'.");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    goto LABEL_149;
  }
  int v24 = *((_DWORD *)v8 + 32);
  if (v24 < 0)
  {
    std::to_string(&v112, v24);
    int v53 = std::string::insert(&v112, 0, "customPadding Left must be non-negative, got '");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v55 = std::string::append(&__p, "'.");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    goto LABEL_149;
  }
  int v25 = *((_DWORD *)v8 + 33);
  if (v25 < 0)
  {
    std::to_string(&v112, v25);
    long long v57 = std::string::insert(&v112, 0, "customPadding Right must be non-negative, got '");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    long long v59 = std::string::append(&__p, "'.");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
LABEL_149:
    CoreML::Result::Result((_DWORD *)a3, 13);
    goto LABEL_117;
  }
  if (v8[5]) {
    std::string v26 = (CoreML *)v8[5];
  }
  else {
    std::string v26 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
  }
  int v28 = CoreML::valueType(v26, v19);
  if (v8[6]) {
    long long v29 = (CoreML *)v8[6];
  }
  else {
    long long v29 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
  }
  unsigned int v104 = CoreML::valueType(v29, v27);
  int v103 = *((unsigned __int8 *)v8 + 104);
  if (*((unsigned char *)v8 + 104)) {
    BOOL v30 = v104 == 4;
  }
  else {
    BOOL v30 = 0;
  }
  int v31 = v30;
  if (v28 == 4 || v31)
  {
    std::operator+<char>();
    uint64_t v61 = std::string::append(&v116, "'  has invalid weights/bias fields.");
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(&v116, 13);
    goto LABEL_153;
  }
  if (*((unsigned char *)v8 + 104) && (v28 == 1 && !v104 || !v28 && v104 == 1))
  {
    std::operator+<char>();
    long long v32 = std::string::append(&v112, "' has unmatched precisions of weights/bias They should either be half or full precision.");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v116, 13);
LABEL_108:
    std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v120) < 0) {
      operator delete((void *)v119);
    }
    long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
    uint64_t v120 = v117;
    HIBYTE(v117) = 0;
    v116.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
LABEL_206:
    *(void *)a3 = v118;
    *(_OWORD *)(a3 + 8) = v119;
    *(void *)(a3 + 24) = v120;
    long long v119 = 0uLL;
    uint64_t v120 = 0;
    goto LABEL_207;
  }
  int v65 = *((_DWORD *)v8 + 4);
  if (v65)
  {
    if (*((unsigned char *)v8 + 105))
    {
      if (v65 == 3)
      {
        int v102 = v9;
        if (v28 != 2) {
          goto LABEL_179;
        }
LABEL_163:
        std::operator+<char>();
        std::string v66 = std::string::append(&v112, "' has invalid weights field. Quantized ");
        long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        v116.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        long long v68 = std::string::append(&v116, "weights are not supported.");
        long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v69;
        v68->__r_.__value_.__l.__size_ = 0;
        v68->__r_.__value_.__r.__words[2] = 0;
        v68->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v116.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v112.__r_.__value_.__l.__data_);
        }
LABEL_167:
        CoreML::Result::Result(&v116, 13);
        goto LABEL_153;
      }
      std::operator+<char>();
      size_t v72 = std::string::append(&__p, "' , if set, output shape must be of length 3.");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::operator+<char>();
      std::string v70 = std::string::append(&__p, "' Output Shape is supported for Deconvolution layer.");
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_116;
  }
  if (v28 == 2) {
    goto LABEL_163;
  }
  if (*((unsigned char *)v8 + 105)) {
    int v74 = v9;
  }
  else {
    int v74 = v10;
  }
  int v102 = v74;
  if (!*((unsigned char *)v8 + 105)) {
    int v10 = v9;
  }
LABEL_179:
  int v75 = (uint64_t *)v8[5];
  if (!v75) {
    int v75 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v101 = (uint64_t)v75;
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convolution3D ");
  uint64_t v76 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(&v112, "weights");
  CoreML::validateGeneralWeightParams(v101, (const CoreML::Specification::WeightParams *)(v106 * v12 * v105 * v102 / v11 * v10), (const CoreML::Specification::WeightParams *)v9, (const void **)&__p.__r_.__value_.__l.__data_, v76, (uint64_t)&v112, (uint64_t)&v116);
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v120 = v117;
  HIBYTE(v117) = 0;
  v116.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v118) || !v103) {
    goto LABEL_206;
  }
  if (v104 > 1)
  {
    if (v104 != 2)
    {
      std::operator+<char>();
      std::string::size_type v84 = std::string::append(&v112, "has not specified bias.");
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result(&v116, 13);
      goto LABEL_108;
    }
    std::operator+<char>();
    v80 = std::string::append(&v112, "' has invalid bias field. Quantized ");
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    int v82 = std::string::append(&v116, "bias is not supported.");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v116.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    goto LABEL_167;
  }
  std::string::size_type v77 = (uint64_t *)v8[6];
  if (!v77) {
    std::string::size_type v77 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  if (v104)
  {
    uint64_t v78 = v77[5];
    if (*(char *)(v78 + 23) < 0) {
      unint64_t v79 = *(void *)(v78 + 8);
    }
    else {
      unint64_t v79 = *(unsigned __int8 *)(v78 + 23);
    }
    unint64_t v86 = v79 >> 1;
  }
  else
  {
    LODWORD(v86) = *((_DWORD *)v77 + 4);
  }
  if (v86 == v9) {
    goto LABEL_206;
  }
  std::operator+<char>();
  std::string::size_type v87 = std::string::append(&v109, "' has a bias vector of size ");
  long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
  v110.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v88;
  v87->__r_.__value_.__l.__size_ = 0;
  v87->__r_.__value_.__r.__words[2] = 0;
  v87->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v108, v86);
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v89 = &v108;
  }
  else {
    size_t v89 = (std::string *)v108.__r_.__value_.__r.__words[0];
  }
  if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v108.__r_.__value_.__l.__size_;
  }
  long long v91 = std::string::append(&v110, (const std::string::value_type *)v89, size);
  long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
  v111.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v92;
  v91->__r_.__value_.__l.__size_ = 0;
  v91->__r_.__value_.__r.__words[2] = 0;
  v91->__r_.__value_.__r.__words[0] = 0;
  v93 = std::string::append(&v111, " but should be ");
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v112.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v107, v9);
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v95 = &v107;
  }
  else {
    v95 = (std::string *)v107.__r_.__value_.__r.__words[0];
  }
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v96 = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v96 = v107.__r_.__value_.__l.__size_;
  }
  v97 = std::string::append(&v112, (const std::string::value_type *)v95, v96);
  long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  v116.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  int v99 = std::string::append(&v116, ".");
  long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v116.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v112.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v111.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v108.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v110.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v109.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result(&v116, 13);
LABEL_153:
  std::string::size_type v63 = v116.__r_.__value_.__r.__words[0];
  std::string::size_type v118 = v116.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v120) < 0)
  {
    operator delete((void *)v119);
    std::string::size_type v63 = v118;
  }
  long long v119 = *(_OWORD *)&v116.__r_.__value_.__r.__words[1];
  uint64_t v64 = v117;
  *(void *)a3 = v63;
  *(_OWORD *)(a3 + 8) = v119;
  *(void *)(a3 + 24) = v64;
  long long v119 = 0uLL;
  uint64_t v120 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v36 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_119:
    operator delete(v36);
  }
LABEL_207:
  if (SHIBYTE(v120) < 0) {
    operator delete((void *)v119);
  }
}

void sub_22428103C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 97) < 0) {
    operator delete(*(void **)(v58 - 120));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validatePositive(int a1@<W0>, const void **a2@<X1>, CoreML::Result *a3@<X8>)
{
  if (a1 <= 0)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v6 = (size_t)a2[1];
    }
    int v7 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v6 + 23);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v8 = a2;
      }
      else {
        uint64_t v8 = *a2;
      }
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, " must be positive, got ");
    std::to_string(&__p, a1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    int v11 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = std::string::append(&v17, ".");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v19 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)int v18 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(a3, 13);
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
  }
  else
  {
    CoreML::Result::Result(a3);
  }
}

void sub_22428148C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateInnerProductLayer@<D0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v19);
  *(void *)a3 = v19;
  size_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)size_t v6 = v20;
  *(void *)(a3 + 24) = v21;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v19);
    *(void *)a3 = v19;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)size_t v6 = v20;
    *(void *)(a3 + 24) = v21;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "InnerProduct");
    int v9 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v9, (CoreML::Result *)&v19);
    *(void *)a3 = v19;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)size_t v6 = v20;
    *(void *)(a3 + 24) = v21;
    HIBYTE(v21) = 0;
    LOBYTE(v20) = 0;
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "InnerProduct");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v15, 1, 5, (uint64_t)v9, (uint64_t)&v19);
      *(void *)a3 = v19;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)size_t v6 = v20;
      *(void *)(a3 + 24) = v21;
      HIBYTE(v21) = 0;
      LOBYTE(v20) = 0;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 140) {
          int v10 = a2[16];
        }
        else {
          int v10 = CoreML::Specification::InnerProductLayerParams::default_instance((CoreML::Specification::InnerProductLayerParams *)v7);
        }
        if (!*((unsigned char *)v10 + 49)) {
          goto LABEL_42;
        }
        int v11 = (uint64_t *)v10[2];
        std::string::basic_string[abi:ne180100]<0>(v15, "InnerProduct");
        if (v11) {
          long long v12 = v11;
        }
        else {
          long long v12 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        CoreML::validateInt8Requirements((uint64_t)v12, (uint64_t)v15, (CoreML::Result *)&v19);
        *(void *)a3 = v19;
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v6);
        }
        *(_OWORD *)size_t v6 = v20;
        *(void *)(a3 + 24) = v21;
        HIBYTE(v21) = 0;
        LOBYTE(v20) = 0;
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        if (CoreML::Result::good((CoreML::Result *)a3))
        {
LABEL_42:
          if (v10[2]) {
            int v13 = (const CoreML::Specification::WeightParams *)v10[2];
          }
          else {
            int v13 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
          }
          if (v10[3]) {
            long long v14 = (const CoreML::Specification::WeightParams *)v10[3];
          }
          else {
            long long v14 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
          }
          validateInnerProductWeightsBias((const CoreML::Specification::NeuralNetworkLayer *)a2, v13, v14, (uint64_t)&v19);
          *(void *)a3 = v19;
          if (*(char *)(a3 + 31) < 0) {
            operator delete(*v6);
          }
          double result = *(double *)&v20;
          *(_OWORD *)size_t v6 = v20;
          *(void *)(a3 + 24) = v21;
        }
      }
    }
  }
  return result;
}

void sub_2242817A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateInt8Requirements(uint64_t a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v9 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
  }
  int v10 = *(_DWORD *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v13 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
  }
  if (v10 <= 0) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  if (v6) {
    int v15 = v14;
  }
  else {
    int v15 = v10 > 0;
  }
  if (v9) {
    ++v15;
  }
  if (v13) {
    ++v15;
  }
  if (v10 > 0 || v15 != 1) {
    goto LABEL_47;
  }
  if ((*(unsigned char *)(v5 + 23) & 0x80) != 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_26;
    }
LABEL_47:
    std::operator+<char>();
    std::string v27 = std::string::append(&v63, "' of type '");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    int v29 = *(char *)(a2 + 23);
    if (v29 >= 0) {
      BOOL v30 = (const std::string::value_type *)a2;
    }
    else {
      BOOL v30 = *(const std::string::value_type **)a2;
    }
    if (v29 >= 0) {
      std::string::size_type v31 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v31 = *(void *)(a2 + 8);
    }
    long long v32 = std::string::append(&v64, v30, v31);
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    long long v34 = std::string::append(&v65, " :                            when flag 'int8DynamicQuantize' is set to true, weights must be stored in the int8 format.");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v34->__r_.__value_.__r.__words[2];
    long long v66 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 13);
    goto LABEL_54;
  }
  if (*(unsigned char *)(v5 + 23)) {
    goto LABEL_47;
  }
LABEL_26:
  if ((v8 & 0x80) != 0) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  uint64_t v16 = *(void *)(a1 + 64);
  if ((uint64_t *)a1 != &CoreML::Specification::_WeightParams_default_instance_ && v8 && v16) {
    goto LABEL_47;
  }
  if ((v12 & 0x80) != 0) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  if ((uint64_t *)a1 == &CoreML::Specification::_WeightParams_default_instance_ || !v12 || !v16) {
    goto LABEL_47;
  }
  if (*(void *)(v16 + 16) != 8)
  {
    std::operator+<char>();
    uint64_t v36 = std::string::append(&v63, "' of type '");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    int v38 = *(char *)(a2 + 23);
    if (v38 >= 0) {
      long long v39 = (const std::string::value_type *)a2;
    }
    else {
      long long v39 = *(const std::string::value_type **)a2;
    }
    if (v38 >= 0) {
      std::string::size_type v40 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v40 = *(void *)(a2 + 8);
    }
    long long v41 = std::string::append(&v64, v39, v40);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    size_t v43 = std::string::append(&v65, " :                           Number of bits must equal 8 when flag 'int8DynamicQuantize' is set to true.");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v43->__r_.__value_.__r.__words[2];
    long long v66 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 13);
    goto LABEL_54;
  }
  if (*(_DWORD *)(v16 + 36) != 101)
  {
    std::operator+<char>();
    long long v45 = std::string::append(&v63, "' of type '");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    int v47 = *(char *)(a2 + 23);
    if (v47 >= 0) {
      long long v48 = (const std::string::value_type *)a2;
    }
    else {
      long long v48 = *(const std::string::value_type **)a2;
    }
    if (v47 >= 0) {
      std::string::size_type v49 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v49 = *(void *)(a2 + 8);
    }
    long long v50 = std::string::append(&v64, v48, v49);
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    long long v52 = std::string::append(&v65, " :                           Linear quantization must be used when flag 'int8DynamicQuantize' is set to true.");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v52->__r_.__value_.__r.__words[2];
    long long v66 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 13);
    goto LABEL_54;
  }
  uint64_t v17 = *(void *)(v16 + 24);
  if (*(_DWORD *)(v17 + 16) != 1)
  {
    std::operator+<char>();
    long long v54 = std::string::append(&v63, "' of type '");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    int v56 = *(char *)(a2 + 23);
    if (v56 >= 0) {
      long long v57 = (const std::string::value_type *)a2;
    }
    else {
      long long v57 = *(const std::string::value_type **)a2;
    }
    if (v56 >= 0) {
      std::string::size_type v58 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v58 = *(void *)(a2 + 8);
    }
    long long v59 = std::string::append(&v64, v57, v58);
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    uint64_t v61 = std::string::append(&v65, " :                           Linear quantization scale must be size 1 when flag 'int8DynamicQuantize' is set to true.");
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v61->__r_.__value_.__r.__words[2];
    long long v66 = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 13);
    goto LABEL_54;
  }
  if (*(_DWORD *)(v17 + 40))
  {
    std::operator+<char>();
    char v18 = std::string::append(&v63, "' of type '");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      uint64_t v21 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v21 = *(const std::string::value_type **)a2;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a2 + 8);
    }
    int v23 = std::string::append(&v64, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    int v25 = std::string::append(&v65, " :                           Linear quantization bias must be empty when flag 'int8DynamicQuantize' is set to true.");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    std::string::size_type v67 = v25->__r_.__value_.__r.__words[2];
    long long v66 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(a3, 13);
LABEL_54:
    if (SHIBYTE(v67) < 0) {
      operator delete((void *)v66);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    return;
  }
  CoreML::Result::Result(a3);
}

void sub_224281D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void validateInnerProductWeightsBias(const CoreML::Specification::NeuralNetworkLayer *a1@<X0>, const CoreML::Specification::WeightParams *a2@<X1>, const CoreML::Specification::WeightParams *a3@<X2>, uint64_t a4@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a4);
  long long v139 = 0;
  size_t v140 = 0;
  uint64_t v141 = 0;
  int v8 = *((_DWORD *)a1 + 35);
  if (v8 == 1045)
  {
    uint64_t v13 = *((void *)a1 + 16);
    unint64_t v11 = *(void *)(v13 + 32);
    unint64_t v10 = *(void *)(v13 + 40);
    int v12 = *(unsigned __int8 *)(v13 + 50);
    MEMORY[0x22A614700](&v139, "BatchedMatMul");
  }
  else
  {
    if (v8 != 140) {
      goto LABEL_156;
    }
    uint64_t v9 = *((void *)a1 + 16);
    unint64_t v11 = *(void *)(v9 + 32);
    unint64_t v10 = *(void *)(v9 + 40);
    int v12 = *(unsigned __int8 *)(v9 + 48);
    MEMORY[0x22A614700](&v139, "Inner product");
  }
  uint64_t v14 = *((void *)a2 + 5);
  unint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v16 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
  }
  unint64_t v17 = *((int *)a2 + 4);
  uint64_t v18 = *((void *)a2 + 6);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0) {
    uint64_t v20 = *(void *)(v18 + 8);
  }
  else {
    uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
  }
  uint64_t v21 = *((void *)a2 + 7);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
  if (*(char *)(v21 + 23) < 0) {
    uint64_t v23 = *(void *)(v21 + 8);
  }
  else {
    uint64_t v23 = *(unsigned __int8 *)(v21 + 23);
  }
  if ((int)v17 <= 0) {
    int v24 = 1;
  }
  else {
    int v24 = 2;
  }
  if (v16) {
    unsigned int v25 = v24;
  }
  else {
    unsigned int v25 = (int)v17 > 0;
  }
  if (v20) {
    ++v25;
  }
  if (v23) {
    unsigned int v26 = v25 + 1;
  }
  else {
    unsigned int v26 = v25;
  }
  if (v26 > 1)
  {
    unsigned int v27 = 4;
    goto LABEL_53;
  }
  if (v26) {
    unsigned int v27 = 0;
  }
  else {
    unsigned int v27 = 5;
  }
  if ((int)v17 <= 0 && v26)
  {
    if ((v15 & 0x80) != 0)
    {
      if (*(void *)(v14 + 8)) {
        goto LABEL_34;
      }
    }
    else if (*(unsigned char *)(v14 + 23))
    {
LABEL_34:
      unsigned int v27 = 1;
      goto LABEL_53;
    }
    if ((v19 & 0x80) != 0) {
      uint64_t v19 = *(void *)(v18 + 8);
    }
    uint64_t v28 = *((void *)a2 + 8);
    if (a2 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v19
      && v28)
    {
      unsigned int v27 = 2;
    }
    else
    {
      if ((v22 & 0x80) != 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      if (v28) {
        BOOL v29 = v22 == 0;
      }
      else {
        BOOL v29 = 1;
      }
      if (v29
        || a2 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        unsigned int v27 = 5;
      }
      else
      {
        unsigned int v27 = 3;
      }
    }
  }
LABEL_53:
  uint64_t v31 = *((void *)a3 + 5);
  if (*(char *)(v31 + 23) < 0) {
    uint64_t v32 = *(void *)(v31 + 8);
  }
  else {
    uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
  }
  uint64_t v33 = *((void *)a3 + 6);
  uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
  if (*(char *)(v33 + 23) < 0) {
    uint64_t v35 = *(void *)(v33 + 8);
  }
  else {
    uint64_t v35 = *(unsigned __int8 *)(v33 + 23);
  }
  int v36 = *((_DWORD *)a3 + 4);
  uint64_t v37 = *((void *)a3 + 7);
  uint64_t v38 = *(unsigned __int8 *)(v37 + 23);
  if (*(char *)(v37 + 23) < 0) {
    uint64_t v39 = *(void *)(v37 + 8);
  }
  else {
    uint64_t v39 = *(unsigned __int8 *)(v37 + 23);
  }
  if (v36 <= 0) {
    int v40 = 1;
  }
  else {
    int v40 = 2;
  }
  if (v32) {
    unsigned int v41 = v40;
  }
  else {
    unsigned int v41 = v36 > 0;
  }
  if (v35) {
    ++v41;
  }
  if (v39) {
    ++v41;
  }
  if (v41 > 1)
  {
    unsigned int v42 = 4;
    goto LABEL_100;
  }
  if (v41) {
    unsigned int v42 = 0;
  }
  else {
    unsigned int v42 = 5;
  }
  if (v36 <= 0 && v41)
  {
    if ((*(unsigned char *)(v31 + 23) & 0x80) != 0)
    {
      if (*(void *)(v31 + 8)) {
        goto LABEL_81;
      }
    }
    else if (*(unsigned char *)(v31 + 23))
    {
LABEL_81:
      unsigned int v42 = 1;
      goto LABEL_100;
    }
    if ((v34 & 0x80) != 0) {
      uint64_t v34 = *(void *)(v33 + 8);
    }
    uint64_t v43 = *((void *)a3 + 8);
    if (a3 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v34
      && v43)
    {
      unsigned int v42 = 2;
    }
    else
    {
      if ((v38 & 0x80) != 0) {
        uint64_t v38 = *(void *)(v37 + 8);
      }
      if (v43) {
        BOOL v44 = v38 == 0;
      }
      else {
        BOOL v44 = 1;
      }
      if (v44
        || a3 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        unsigned int v42 = 5;
      }
      else
      {
        unsigned int v42 = 3;
      }
    }
  }
LABEL_100:
  if (v12) {
    BOOL v46 = v42 == 4;
  }
  else {
    BOOL v46 = 0;
  }
  int v47 = v46;
  if (v27 == 4 || v47)
  {
    if (v141 >= 0) {
      size_t v59 = HIBYTE(v141);
    }
    else {
      size_t v59 = v140;
    }
    long long v60 = &v133;
    std::string::basic_string[abi:ne180100]((uint64_t)&v133, v59 + 8);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v60 = (std::string *)v133.__r_.__value_.__r.__words[0];
    }
    if (v59)
    {
      if (v141 >= 0) {
        uint64_t v61 = (void **)&v139;
      }
      else {
        uint64_t v61 = v139;
      }
      memmove(v60, v61, v59);
    }
    strcpy((char *)v60 + v59, " layer '");
    uint64_t v62 = *((void *)a1 + 14);
    int v63 = *(char *)(v62 + 23);
    if (v63 >= 0) {
      std::string v64 = (const std::string::value_type *)*((void *)a1 + 14);
    }
    else {
      std::string v64 = *(const std::string::value_type **)v62;
    }
    if (v63 >= 0) {
      std::string::size_type v65 = *(unsigned __int8 *)(v62 + 23);
    }
    else {
      std::string::size_type v65 = *(void *)(v62 + 8);
    }
    long long v66 = std::string::append(&v133, v64, v65);
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    long long v68 = std::string::append(&v134, "' has invalid weights/bias fields.");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    std::string::size_type v136 = v68->__r_.__value_.__r.__words[2];
    long long v135 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v137, 13);
LABEL_147:
    *(void *)a4 = v137.__r_.__value_.__r.__words[0];
    std::string v70 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0) {
      operator delete(*v70);
    }
    *(_OWORD *)std::string v70 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
    *(void *)(a4 + 24) = v138;
    HIBYTE(v138) = 0;
    v137.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v136) < 0) {
      operator delete((void *)v135);
    }
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v134.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v71 = (void *)v133.__r_.__value_.__r.__words[0];
LABEL_155:
      operator delete(v71);
      goto LABEL_156;
    }
    goto LABEL_156;
  }
  if (v12 && (v27 == 1 && !v42 || !v27 && v42 == 1))
  {
    if (v141 >= 0) {
      size_t v48 = HIBYTE(v141);
    }
    else {
      size_t v48 = v140;
    }
    std::string::size_type v49 = &v133;
    std::string::basic_string[abi:ne180100]((uint64_t)&v133, v48 + 8);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v49 = (std::string *)v133.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if (v141 >= 0) {
        long long v50 = (void **)&v139;
      }
      else {
        long long v50 = v139;
      }
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, " layer '");
    uint64_t v51 = *((void *)a1 + 14);
    int v52 = *(char *)(v51 + 23);
    if (v52 >= 0) {
      long long v53 = (const std::string::value_type *)*((void *)a1 + 14);
    }
    else {
      long long v53 = *(const std::string::value_type **)v51;
    }
    if (v52 >= 0) {
      std::string::size_type v54 = *(unsigned __int8 *)(v51 + 23);
    }
    else {
      std::string::size_type v54 = *(void *)(v51 + 8);
    }
    long long v55 = std::string::append(&v133, v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v134.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    long long v57 = std::string::append(&v134, "has unmatched precisions of weights/bias They should either be half or full precision.");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    std::string::size_type v136 = v57->__r_.__value_.__r.__words[2];
    long long v135 = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v137, 13);
    goto LABEL_147;
  }
  if (v27 > 1)
  {
    if (v27 == 2)
    {
      uint64_t v99 = *((void *)a1 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v135, "weight");
      CoreML::validateGeneralWeightParams((uint64_t)a2, (const CoreML::Specification::WeightParams *)(v10 * v11), (const CoreML::Specification::WeightParams *)v10, (const void **)&v139, v99, (uint64_t)&v135, (uint64_t)&v137);
      *(void *)a4 = v137.__r_.__value_.__r.__words[0];
      long long v100 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v100);
      }
      *(_OWORD *)long long v100 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
      *(void *)(a4 + 24) = v138;
      HIBYTE(v138) = 0;
      v137.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v136) < 0) {
        operator delete((void *)v135);
      }
      BOOL v101 = CoreML::Result::good((CoreML::Result *)a4);
      if (v12) {
        BOOL v102 = v101;
      }
      else {
        BOOL v102 = 0;
      }
      if (!v102) {
        goto LABEL_156;
      }
      goto LABEL_228;
    }
LABEL_227:
    if (!v12) {
      goto LABEL_156;
    }
LABEL_228:
    if (v42 > 1)
    {
      if (v42 == 2)
      {
        uint64_t v105 = *((void *)a1 + 14);
        std::string::basic_string[abi:ne180100]<0>(&v135, "bias");
        CoreML::validateGeneralWeightParams((uint64_t)a3, (const CoreML::Specification::WeightParams *)v10, (const CoreML::Specification::WeightParams *)1, (const void **)&v139, v105, (uint64_t)&v135, (uint64_t)&v137);
        *(void *)a4 = v137.__r_.__value_.__r.__words[0];
        int v106 = (void **)(a4 + 8);
        if (*(char *)(a4 + 31) < 0) {
          operator delete(*v106);
        }
        *(_OWORD *)int v106 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
        *(void *)(a4 + 24) = v138;
        HIBYTE(v138) = 0;
        v137.__r_.__value_.__s.__data_[8] = 0;
        if (SHIBYTE(v136) < 0) {
          operator delete((void *)v135);
        }
        CoreML::Result::good((CoreML::Result *)a4);
      }
    }
    else
    {
      if (v42)
      {
        uint64_t v103 = *((void *)a3 + 5);
        if (*(char *)(v103 + 23) < 0) {
          unint64_t v104 = *(void *)(v103 + 8);
        }
        else {
          unint64_t v104 = *(unsigned __int8 *)(v103 + 23);
        }
        unint64_t v107 = v104 >> 1;
      }
      else
      {
        unint64_t v107 = *((int *)a3 + 4);
      }
      if (v107 != v10)
      {
        std::operator+<char>();
        std::string v108 = std::string::append(&v131, "' has incorrect bias vector size ");
        long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v132.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v130, v107);
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v110 = &v130;
        }
        else {
          std::string v110 = (std::string *)v130.__r_.__value_.__r.__words[0];
        }
        if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v130.__r_.__value_.__l.__size_;
        }
        std::string v112 = std::string::append(&v132, (const std::string::value_type *)v110, size);
        long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
        v133.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v113;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v114 = std::string::append(&v133, " (expected ");
        long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
        v134.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v115;
        v114->__r_.__value_.__l.__size_ = 0;
        v114->__r_.__value_.__r.__words[2] = 0;
        v114->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v129, v10);
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v116 = &v129;
        }
        else {
          std::string v116 = (std::string *)v129.__r_.__value_.__r.__words[0];
        }
        if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v117 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v117 = v129.__r_.__value_.__l.__size_;
        }
        std::string::size_type v118 = std::string::append(&v134, (const std::string::value_type *)v116, v117);
        long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v119;
        v118->__r_.__value_.__l.__size_ = 0;
        v118->__r_.__value_.__r.__words[2] = 0;
        v118->__r_.__value_.__r.__words[0] = 0;
        uint64_t v120 = std::string::append(&v137, ").");
        long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
        std::string::size_type v136 = v120->__r_.__value_.__r.__words[2];
        long long v135 = v121;
        v120->__r_.__value_.__l.__size_ = 0;
        v120->__r_.__value_.__r.__words[2] = 0;
        v120->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v137.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v129.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v134.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v133.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v130.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v132.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v131.__r_.__value_.__l.__data_);
        }
        CoreML::Result::Result(&v137, 13);
        *(void *)a4 = v137.__r_.__value_.__r.__words[0];
        long long v122 = (void **)(a4 + 8);
        if (*(char *)(a4 + 31) < 0) {
          operator delete(*v122);
        }
        *(_OWORD *)long long v122 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
        *(void *)(a4 + 24) = v138;
        if (SHIBYTE(v136) < 0)
        {
          long long v71 = (void *)v135;
          goto LABEL_155;
        }
      }
    }
    goto LABEL_156;
  }
  if (v27)
  {
    if ((v15 & 0x80) != 0) {
      unint64_t v15 = *(void *)(v14 + 8);
    }
    unint64_t v17 = v15 >> 1;
  }
  if (v10 * v11 == v17) {
    goto LABEL_227;
  }
  std::operator+<char>();
  size_t v72 = std::string::append(&v126, " has incorrect weight matrix size ");
  long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v125, v17);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v74 = &v125;
  }
  else {
    int v74 = (std::string *)v125.__r_.__value_.__r.__words[0];
  }
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v75 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v75 = v125.__r_.__value_.__l.__size_;
  }
  uint64_t v76 = std::string::append(&v127, (const std::string::value_type *)v74, v75);
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v128.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  uint64_t v78 = std::string::append(&v128, " to encode a ");
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v129.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v124, v11);
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v80 = &v124;
  }
  else {
    v80 = (std::string *)v124.__r_.__value_.__r.__words[0];
  }
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v81 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v81 = v124.__r_.__value_.__l.__size_;
  }
  int v82 = std::string::append(&v129, (const std::string::value_type *)v80, v81);
  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v83;
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v84 = std::string::append(&v130, " × ");
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v131.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v10);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v87 = __p.__r_.__value_.__l.__size_;
  }
  long long v88 = std::string::append(&v131, (const std::string::value_type *)p_p, v87);
  long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  v132.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v89;
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  v90 = std::string::append(&v132, " ");
  long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
  v133.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v91;
  v90->__r_.__value_.__l.__size_ = 0;
  v90->__r_.__value_.__r.__words[2] = 0;
  v90->__r_.__value_.__r.__words[0] = 0;
  if (v141 >= 0) {
    long long v92 = (const std::string::value_type *)&v139;
  }
  else {
    long long v92 = (const std::string::value_type *)v139;
  }
  if (v141 >= 0) {
    std::string::size_type v93 = HIBYTE(v141);
  }
  else {
    std::string::size_type v93 = v140;
  }
  long long v94 = std::string::append(&v133, v92, v93);
  long long v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
  v134.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v95;
  v94->__r_.__value_.__l.__size_ = 0;
  v94->__r_.__value_.__r.__words[2] = 0;
  v94->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v96 = std::string::append(&v134, ".");
  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  std::string::size_type v136 = v96->__r_.__value_.__r.__words[2];
  long long v135 = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  CoreML::Result::Result(&v137, 13);
  *(void *)a4 = v137.__r_.__value_.__r.__words[0];
  long long v98 = (void **)(a4 + 8);
  if (*(char *)(a4 + 31) < 0) {
    operator delete(*v98);
  }
  *(_OWORD *)long long v98 = *(_OWORD *)&v137.__r_.__value_.__r.__words[1];
  *(void *)(a4 + 24) = v138;
  HIBYTE(v138) = 0;
  v137.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v136) < 0) {
    operator delete((void *)v135);
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v124.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v129.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v128.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v127.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v71 = (void *)v126.__r_.__value_.__r.__words[0];
    goto LABEL_155;
  }
LABEL_156:
  if (SHIBYTE(v141) < 0) {
    operator delete(v139);
  }
}

void sub_224282978(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 169) < 0) {
    operator delete(*(void **)(v2 - 192));
  }
  if (*(char *)(v2 - 97) < 0) {
    operator delete(*(void **)(v2 - 120));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateBatchnormLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v186);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v184);
  uint64_t v186 = *(void *)v184;
  if (SHIBYTE(v188) < 0) {
    operator delete((void *)v187);
  }
  long long v187 = *(_OWORD *)&v184[8];
  uint64_t v188 = v185;
  if (CoreML::Result::good((CoreML::Result *)&v186))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v184);
    uint64_t v186 = *(void *)v184;
    if (SHIBYTE(v188) < 0) {
      operator delete((void *)v187);
    }
    long long v187 = *(_OWORD *)&v184[8];
    uint64_t v188 = v185;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v186);
  if (!v6) {
    goto LABEL_396;
  }
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Batchnorm");
    uint64_t v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)v184);
    uint64_t v186 = *(void *)v184;
    if (SHIBYTE(v188) < 0) {
      operator delete((void *)v187);
    }
    long long v187 = *(_OWORD *)&v184[8];
    uint64_t v188 = v185;
    HIBYTE(v185) = 0;
    v184[8] = 0;
    if (v183 < 0) {
      operator delete(__p[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v186)) {
      goto LABEL_396;
    }
    std::string::basic_string[abi:ne180100]<0>(&v181, "Batchnorm");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v181, 3, -1, (uint64_t)v7, (uint64_t)v184);
    uint64_t v186 = *(void *)v184;
    if (SHIBYTE(v188) < 0) {
      operator delete((void *)v187);
    }
    long long v187 = *(_OWORD *)&v184[8];
    uint64_t v188 = v185;
    HIBYTE(v185) = 0;
    v184[8] = 0;
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    BOOL v6 = CoreML::Result::good((CoreML::Result *)&v186);
    if (!v6) {
      goto LABEL_396;
    }
  }
  if (*((_DWORD *)a2 + 35) == 160) {
    int v8 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v8 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v6);
  }
  if (v8[2]) {
    uint64_t v9 = (uint64_t *)v8[2];
  }
  else {
    uint64_t v9 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v10 = v9[5];
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  uint64_t v12 = v9[6];
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  int v14 = *((_DWORD *)v9 + 4);
  uint64_t v15 = v9[7];
  if (*(char *)(v15 + 23) < 0) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  }
  int v17 = 1;
  if (v14 <= 0) {
    int v18 = 1;
  }
  else {
    int v18 = 2;
  }
  if (v11) {
    int v19 = v18;
  }
  else {
    int v19 = v14 > 0;
  }
  if (v13) {
    ++v19;
  }
  if (v16) {
    int v20 = v19 + 1;
  }
  else {
    int v20 = v19;
  }
  int v21 = *((_DWORD *)a2 + 35);
  if (v14 < 1 || v20 != 1)
  {
    if (v21 == 160) {
      int v8 = (uint64_t *)*((void *)a2 + 16);
    }
    else {
      int v8 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v8);
    }
    if (v8[3]) {
      uint64_t v22 = (uint64_t *)v8[3];
    }
    else {
      uint64_t v22 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v23 = v22[5];
    if (*(char *)(v23 + 23) < 0) {
      uint64_t v24 = *(void *)(v23 + 8);
    }
    else {
      uint64_t v24 = *(unsigned __int8 *)(v23 + 23);
    }
    uint64_t v25 = v22[6];
    if (*(char *)(v25 + 23) < 0) {
      uint64_t v26 = *(void *)(v25 + 8);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
    }
    int v27 = *((_DWORD *)v22 + 4);
    uint64_t v28 = v22[7];
    if (*(char *)(v28 + 23) < 0) {
      uint64_t v29 = *(void *)(v28 + 8);
    }
    else {
      uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
    }
    if (v27 <= 0) {
      int v30 = 1;
    }
    else {
      int v30 = 2;
    }
    if (v24) {
      int v31 = v30;
    }
    else {
      int v31 = v27 > 0;
    }
    if (v26) {
      ++v31;
    }
    if (v29) {
      int v32 = v31 + 1;
    }
    else {
      int v32 = v31;
    }
    int v21 = *((_DWORD *)a2 + 35);
    if (v27 < 1 || v32 != 1)
    {
      if (v21 == 160) {
        int v8 = (uint64_t *)*((void *)a2 + 16);
      }
      else {
        int v8 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v8);
      }
      if (v8[4]) {
        uint64_t v33 = (uint64_t *)v8[4];
      }
      else {
        uint64_t v33 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v34 = v33[5];
      if (*(char *)(v34 + 23) < 0) {
        uint64_t v35 = *(void *)(v34 + 8);
      }
      else {
        uint64_t v35 = *(unsigned __int8 *)(v34 + 23);
      }
      uint64_t v36 = v33[6];
      if (*(char *)(v36 + 23) < 0) {
        uint64_t v37 = *(void *)(v36 + 8);
      }
      else {
        uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
      }
      int v38 = *((_DWORD *)v33 + 4);
      uint64_t v39 = v33[7];
      if (*(char *)(v39 + 23) < 0) {
        uint64_t v40 = *(void *)(v39 + 8);
      }
      else {
        uint64_t v40 = *(unsigned __int8 *)(v39 + 23);
      }
      if (v38 <= 0) {
        int v41 = 1;
      }
      else {
        int v41 = 2;
      }
      if (v35) {
        int v42 = v41;
      }
      else {
        int v42 = v38 > 0;
      }
      if (v37) {
        ++v42;
      }
      if (v40) {
        int v43 = v42 + 1;
      }
      else {
        int v43 = v42;
      }
      int v21 = *((_DWORD *)a2 + 35);
      if (v38 < 1 || v43 != 1)
      {
        if (v21 == 160) {
          int v8 = (uint64_t *)*((void *)a2 + 16);
        }
        else {
          int v8 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v8);
        }
        if (v8[5]) {
          BOOL v44 = (uint64_t *)v8[5];
        }
        else {
          BOOL v44 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v45 = v44[5];
        if (*(char *)(v45 + 23) < 0) {
          uint64_t v46 = *(void *)(v45 + 8);
        }
        else {
          uint64_t v46 = *(unsigned __int8 *)(v45 + 23);
        }
        uint64_t v47 = v44[6];
        if (*(char *)(v47 + 23) < 0) {
          uint64_t v48 = *(void *)(v47 + 8);
        }
        else {
          uint64_t v48 = *(unsigned __int8 *)(v47 + 23);
        }
        int v49 = *((_DWORD *)v44 + 4);
        uint64_t v50 = v44[7];
        if (*(char *)(v50 + 23) < 0) {
          uint64_t v51 = *(void *)(v50 + 8);
        }
        else {
          uint64_t v51 = *(unsigned __int8 *)(v50 + 23);
        }
        if (v49 <= 0) {
          int v52 = 1;
        }
        else {
          int v52 = 2;
        }
        if (v46) {
          int v53 = v52;
        }
        else {
          int v53 = v49 > 0;
        }
        if (v48) {
          ++v53;
        }
        if (v51) {
          ++v53;
        }
        BOOL v54 = v53 == 1;
        int v17 = v49 > 0 && v54;
        int v21 = *((_DWORD *)a2 + 35);
      }
    }
  }
  if (v21 == 160) {
    long long v55 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v55 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v8);
  }
  if (v55[2]) {
    long long v56 = (uint64_t *)v55[2];
  }
  else {
    long long v56 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v57 = v56[5];
  if (*(char *)(v57 + 23) < 0) {
    uint64_t v58 = *(void *)(v57 + 8);
  }
  else {
    uint64_t v58 = *(unsigned __int8 *)(v57 + 23);
  }
  uint64_t v59 = v56[6];
  if (*(char *)(v59 + 23) < 0) {
    uint64_t v60 = *(void *)(v59 + 8);
  }
  else {
    uint64_t v60 = *(unsigned __int8 *)(v59 + 23);
  }
  int v61 = *((_DWORD *)v56 + 4);
  uint64_t v62 = v56[7];
  if (*(char *)(v62 + 23) < 0) {
    uint64_t v63 = *(void *)(v62 + 8);
  }
  else {
    uint64_t v63 = *(unsigned __int8 *)(v62 + 23);
  }
  if (v61 <= 0) {
    int v64 = 1;
  }
  else {
    int v64 = 2;
  }
  if (v58) {
    int v65 = v64;
  }
  else {
    int v65 = v61 > 0;
  }
  if (v60) {
    ++v65;
  }
  if (v63) {
    ++v65;
  }
  if (v61 <= 0 && v65 == 1)
  {
    if ((*(unsigned char *)(v57 + 23) & 0x80) != 0)
    {
      if (!*(void *)(v57 + 8)) {
        goto LABEL_163;
      }
    }
    else if (!*(unsigned char *)(v57 + 23))
    {
      goto LABEL_163;
    }
LABEL_223:
    BOOL v88 = 1;
    goto LABEL_224;
  }
LABEL_163:
  if (*((_DWORD *)a2 + 35) == 160) {
    long long v55 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v55 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v55);
  }
  if (v55[3]) {
    long long v66 = (uint64_t *)v55[3];
  }
  else {
    long long v66 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v67 = v66[5];
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  if (*(char *)(v67 + 23) < 0) {
    uint64_t v69 = *(void *)(v67 + 8);
  }
  else {
    uint64_t v69 = *(unsigned __int8 *)(v67 + 23);
  }
  uint64_t v70 = v66[6];
  if (*(char *)(v70 + 23) < 0) {
    uint64_t v71 = *(void *)(v70 + 8);
  }
  else {
    uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  }
  int v72 = *((_DWORD *)v66 + 4);
  uint64_t v73 = v66[7];
  if (*(char *)(v73 + 23) < 0) {
    uint64_t v74 = *(void *)(v73 + 8);
  }
  else {
    uint64_t v74 = *(unsigned __int8 *)(v73 + 23);
  }
  if (v72 <= 0) {
    int v75 = 1;
  }
  else {
    int v75 = 2;
  }
  if (v69) {
    int v76 = v75;
  }
  else {
    int v76 = v72 > 0;
  }
  if (v71) {
    ++v76;
  }
  if (v74) {
    ++v76;
  }
  if (v72 <= 0 && v76 == 1)
  {
    if ((v68 & 0x80) != 0) {
      uint64_t v68 = *(void *)(v67 + 8);
    }
    if (v68) {
      goto LABEL_223;
    }
  }
  if (*((_DWORD *)a2 + 35) == 160) {
    long long v55 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v55 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v55);
  }
  if (v55[4]) {
    long long v77 = (uint64_t *)v55[4];
  }
  else {
    long long v77 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v78 = v77[5];
  uint64_t v79 = *(unsigned __int8 *)(v78 + 23);
  if (*(char *)(v78 + 23) < 0) {
    uint64_t v80 = *(void *)(v78 + 8);
  }
  else {
    uint64_t v80 = *(unsigned __int8 *)(v78 + 23);
  }
  uint64_t v81 = v77[6];
  if (*(char *)(v81 + 23) < 0) {
    uint64_t v82 = *(void *)(v81 + 8);
  }
  else {
    uint64_t v82 = *(unsigned __int8 *)(v81 + 23);
  }
  int v83 = *((_DWORD *)v77 + 4);
  uint64_t v84 = v77[7];
  if (*(char *)(v84 + 23) < 0) {
    uint64_t v85 = *(void *)(v84 + 8);
  }
  else {
    uint64_t v85 = *(unsigned __int8 *)(v84 + 23);
  }
  if (v83 <= 0) {
    int v86 = 1;
  }
  else {
    int v86 = 2;
  }
  if (v80) {
    int v87 = v86;
  }
  else {
    int v87 = v83 > 0;
  }
  if (v82) {
    ++v87;
  }
  if (v85) {
    ++v87;
  }
  if (v83 <= 0 && v87 == 1)
  {
    if ((v79 & 0x80) != 0) {
      uint64_t v79 = *(void *)(v78 + 8);
    }
    if (v79) {
      goto LABEL_223;
    }
  }
  if (*((_DWORD *)a2 + 35) == 160) {
    long long v55 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v55 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v55);
  }
  if (v55[5]) {
    long long v115 = (uint64_t *)v55[5];
  }
  else {
    long long v115 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v116 = v115[5];
  uint64_t v117 = *(unsigned __int8 *)(v116 + 23);
  if (*(char *)(v116 + 23) < 0) {
    uint64_t v118 = *(void *)(v116 + 8);
  }
  else {
    uint64_t v118 = *(unsigned __int8 *)(v116 + 23);
  }
  uint64_t v122 = v115[6];
  if (*(char *)(v122 + 23) < 0) {
    uint64_t v123 = *(void *)(v122 + 8);
  }
  else {
    uint64_t v123 = *(unsigned __int8 *)(v122 + 23);
  }
  int v124 = *((_DWORD *)v115 + 4);
  uint64_t v125 = v115[7];
  if (*(char *)(v125 + 23) < 0) {
    uint64_t v126 = *(void *)(v125 + 8);
  }
  else {
    uint64_t v126 = *(unsigned __int8 *)(v125 + 23);
  }
  BOOL v88 = 0;
  if (v124 <= 0) {
    int v127 = 1;
  }
  else {
    int v127 = 2;
  }
  if (v118) {
    int v128 = v127;
  }
  else {
    int v128 = v124 > 0;
  }
  if (v123) {
    ++v128;
  }
  if (v126) {
    ++v128;
  }
  if (v124 <= 0 && v128 == 1)
  {
    if ((v117 & 0x80) != 0) {
      uint64_t v117 = *(void *)(v116 + 8);
    }
    BOOL v88 = v117 != 0;
  }
LABEL_224:
  if (*((_DWORD *)a2 + 35) == 160) {
    long long v89 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v89 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v55);
  }
  if (v89[2]) {
    v90 = (uint64_t *)v89[2];
  }
  else {
    v90 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v91 = v90[5];
  if (*(char *)(v91 + 23) < 0) {
    uint64_t v92 = *(void *)(v91 + 8);
  }
  else {
    uint64_t v92 = *(unsigned __int8 *)(v91 + 23);
  }
  uint64_t v93 = v90[6];
  if (*(char *)(v93 + 23) < 0) {
    uint64_t v94 = *(void *)(v93 + 8);
  }
  else {
    uint64_t v94 = *(unsigned __int8 *)(v93 + 23);
  }
  int v95 = *((_DWORD *)v90 + 4);
  uint64_t v96 = v90[7];
  if (*(char *)(v96 + 23) < 0) {
    uint64_t v97 = *(void *)(v96 + 8);
  }
  else {
    uint64_t v97 = *(unsigned __int8 *)(v96 + 23);
  }
  BOOL v98 = v95 <= 0;
  BOOL v99 = v95 > 0;
  if (v98) {
    int v100 = 1;
  }
  else {
    int v100 = 2;
  }
  if (v92) {
    unsigned int v101 = v100;
  }
  else {
    unsigned int v101 = v99;
  }
  if (v94) {
    ++v101;
  }
  if (v97) {
    ++v101;
  }
  if (v101 > 1) {
    goto LABEL_332;
  }
  if (*((_DWORD *)a2 + 35) == 160) {
    BOOL v102 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    BOOL v102 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v89);
  }
  if (v102[3]) {
    uint64_t v103 = (uint64_t *)v102[3];
  }
  else {
    uint64_t v103 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v104 = v103[5];
  if (*(char *)(v104 + 23) < 0) {
    uint64_t v105 = *(void *)(v104 + 8);
  }
  else {
    uint64_t v105 = *(unsigned __int8 *)(v104 + 23);
  }
  uint64_t v106 = v103[6];
  if (*(char *)(v106 + 23) < 0) {
    uint64_t v107 = *(void *)(v106 + 8);
  }
  else {
    uint64_t v107 = *(unsigned __int8 *)(v106 + 23);
  }
  int v108 = *((_DWORD *)v103 + 4);
  uint64_t v109 = v103[7];
  if (*(char *)(v109 + 23) < 0) {
    uint64_t v110 = *(void *)(v109 + 8);
  }
  else {
    uint64_t v110 = *(unsigned __int8 *)(v109 + 23);
  }
  BOOL v98 = v108 <= 0;
  BOOL v111 = v108 > 0;
  if (v98) {
    int v112 = 1;
  }
  else {
    int v112 = 2;
  }
  if (v105) {
    unsigned int v113 = v112;
  }
  else {
    unsigned int v113 = v111;
  }
  if (v107) {
    ++v113;
  }
  if (v110) {
    ++v113;
  }
  if (v113 > 1) {
    goto LABEL_332;
  }
  if (*((_DWORD *)a2 + 35) == 160) {
    std::string::size_type v114 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    std::string::size_type v114 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v102);
  }
  if (v114[4]) {
    long long v119 = (uint64_t *)v114[4];
  }
  else {
    long long v119 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v120 = v119[5];
  if (*(char *)(v120 + 23) < 0) {
    uint64_t v121 = *(void *)(v120 + 8);
  }
  else {
    uint64_t v121 = *(unsigned __int8 *)(v120 + 23);
  }
  uint64_t v129 = v119[6];
  if (*(char *)(v129 + 23) < 0) {
    uint64_t v130 = *(void *)(v129 + 8);
  }
  else {
    uint64_t v130 = *(unsigned __int8 *)(v129 + 23);
  }
  int v131 = *((_DWORD *)v119 + 4);
  uint64_t v132 = v119[7];
  if (*(char *)(v132 + 23) < 0) {
    uint64_t v133 = *(void *)(v132 + 8);
  }
  else {
    uint64_t v133 = *(unsigned __int8 *)(v132 + 23);
  }
  BOOL v98 = v131 <= 0;
  BOOL v134 = v131 > 0;
  if (v98) {
    int v135 = 1;
  }
  else {
    int v135 = 2;
  }
  if (v121) {
    unsigned int v136 = v135;
  }
  else {
    unsigned int v136 = v134;
  }
  if (v130) {
    ++v136;
  }
  if (v133) {
    ++v136;
  }
  if (v136 > 1) {
    goto LABEL_332;
  }
  if (*((_DWORD *)a2 + 35) == 160) {
    long long v139 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v139 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v114);
  }
  if (v139[5]) {
    size_t v140 = (uint64_t *)v139[5];
  }
  else {
    size_t v140 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v141 = v140[5];
  if (*(char *)(v141 + 23) < 0) {
    uint64_t v142 = *(void *)(v141 + 8);
  }
  else {
    uint64_t v142 = *(unsigned __int8 *)(v141 + 23);
  }
  uint64_t v143 = v140[6];
  if (*(char *)(v143 + 23) < 0) {
    uint64_t v144 = *(void *)(v143 + 8);
  }
  else {
    uint64_t v144 = *(unsigned __int8 *)(v143 + 23);
  }
  int v145 = *((_DWORD *)v140 + 4);
  uint64_t v146 = v140[7];
  if (*(char *)(v146 + 23) < 0) {
    uint64_t v147 = *(void *)(v146 + 8);
  }
  else {
    uint64_t v147 = *(unsigned __int8 *)(v146 + 23);
  }
  BOOL v98 = v145 <= 0;
  BOOL v148 = v145 > 0;
  if (v98) {
    int v149 = 1;
  }
  else {
    int v149 = 2;
  }
  if (v142) {
    unsigned int v150 = v149;
  }
  else {
    unsigned int v150 = v148;
  }
  if (v144) {
    ++v150;
  }
  if (v147) {
    ++v150;
  }
  if (v150 > 1 || (v17 & v88) != 0)
  {
LABEL_332:
    std::operator+<char>();
    std::string v137 = std::string::append(&v181, "' parameters have values for both full and half precision. Parameters should either be specified in half or full precision, mixed parameters are not supported.");
    long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
    *(void *)&v184[16] = *((void *)&v137->__r_.__value_.__l + 2);
    *(_OWORD *)v184 = v138;
    v137->__r_.__value_.__l.__size_ = 0;
    v137->__r_.__value_.__r.__words[2] = 0;
    v137->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  else
  {
    if (*((_DWORD *)a2 + 35) == 160)
    {
      std::string v151 = (uint64_t *)*((void *)a2 + 16);
      std::string v152 = (const CoreML::Specification::WeightParams *)v151[6];
    }
    else
    {
      std::string v153 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v139);
      std::string v152 = (const CoreML::Specification::WeightParams *)v153[6];
      if (*((_DWORD *)a2 + 35) == 160) {
        std::string v151 = (uint64_t *)*((void *)a2 + 16);
      }
      else {
        std::string v151 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v153);
      }
    }
    if (v151[2]) {
      std::string v154 = (uint64_t *)v151[2];
    }
    else {
      std::string v154 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(&v181, "BatchNorm");
    uint64_t v155 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v179, "gamma");
    CoreML::validateGeneralWeightParams((uint64_t)v154, v152, (const CoreML::Specification::WeightParams *)1, (const void **)&v181.__r_.__value_.__l.__data_, v155, (uint64_t)v179, (uint64_t)v184);
    uint64_t v186 = *(void *)v184;
    if (SHIBYTE(v188) < 0) {
      operator delete((void *)v187);
    }
    long long v187 = *(_OWORD *)&v184[8];
    uint64_t v188 = v185;
    HIBYTE(v185) = 0;
    v184[8] = 0;
    if (v180 < 0) {
      operator delete(v179[0]);
    }
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    BOOL v156 = CoreML::Result::good((CoreML::Result *)&v186);
    if (!v156) {
      goto LABEL_396;
    }
    if (*((_DWORD *)a2 + 35) == 160) {
      std::string v157 = (uint64_t *)*((void *)a2 + 16);
    }
    else {
      std::string v157 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v156);
    }
    if (v157[3]) {
      std::string v158 = (uint64_t *)v157[3];
    }
    else {
      std::string v158 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(&v181, "BatchNorm");
    uint64_t v159 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v179, "beta");
    CoreML::validateGeneralWeightParams((uint64_t)v158, v152, (const CoreML::Specification::WeightParams *)1, (const void **)&v181.__r_.__value_.__l.__data_, v159, (uint64_t)v179, (uint64_t)v184);
    uint64_t v186 = *(void *)v184;
    if (SHIBYTE(v188) < 0) {
      operator delete((void *)v187);
    }
    long long v187 = *(_OWORD *)&v184[8];
    uint64_t v188 = v185;
    HIBYTE(v185) = 0;
    v184[8] = 0;
    if (v180 < 0) {
      operator delete(v179[0]);
    }
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    BOOL v160 = CoreML::Result::good((CoreML::Result *)&v186);
    if (!v160) {
      goto LABEL_396;
    }
    std::string v162 = *((_DWORD *)a2 + 35) == 160
         ? (uint64_t *)*((void *)a2 + 16)
         : CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v160);
    if (*((unsigned char *)v162 + 56)) {
      goto LABEL_396;
    }
    if (*((_DWORD *)a2 + 35) == 160) {
      std::string v163 = (uint64_t *)*((void *)a2 + 16);
    }
    else {
      std::string v163 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v162);
    }
    if (v163[4]) {
      v164 = (CoreML *)v163[4];
    }
    else {
      v164 = (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
    }
    char v165 = (CoreML::Specification::BatchnormLayerParams *)CoreML::valueType(v164, v161);
    if (v165 != 5)
    {
      uint64_t v167 = *((_DWORD *)a2 + 35) == 160
           ? (uint64_t *)*((void *)a2 + 16)
           : CoreML::Specification::BatchnormLayerParams::default_instance(v165);
      std::string::size_type v168 = v167[4] ? (CoreML *)v167[4] : (CoreML *)&CoreML::Specification::_WeightParams_default_instance_;
      long long v169 = (CoreML::Specification::BatchnormLayerParams *)CoreML::valueType(v168, v166);
      if (v169 != 5)
      {
        if (*((_DWORD *)a2 + 35) == 160) {
          v172 = (uint64_t *)*((void *)a2 + 16);
        }
        else {
          v172 = CoreML::Specification::BatchnormLayerParams::default_instance(v169);
        }
        if (v172[4]) {
          v173 = (uint64_t *)v172[4];
        }
        else {
          v173 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v181, "BatchNorm");
        uint64_t v174 = *((void *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v179, "mean");
        CoreML::validateGeneralWeightParams((uint64_t)v173, v152, (const CoreML::Specification::WeightParams *)1, (const void **)&v181.__r_.__value_.__l.__data_, v174, (uint64_t)v179, (uint64_t)v184);
        uint64_t v186 = *(void *)v184;
        if (SHIBYTE(v188) < 0) {
          operator delete((void *)v187);
        }
        long long v187 = *(_OWORD *)&v184[8];
        uint64_t v188 = v185;
        HIBYTE(v185) = 0;
        v184[8] = 0;
        if (v180 < 0) {
          operator delete(v179[0]);
        }
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v181.__r_.__value_.__l.__data_);
        }
        BOOL v175 = CoreML::Result::good((CoreML::Result *)&v186);
        if (v175)
        {
          if (*((_DWORD *)a2 + 35) == 160) {
            v176 = (uint64_t *)*((void *)a2 + 16);
          }
          else {
            v176 = CoreML::Specification::BatchnormLayerParams::default_instance((CoreML::Specification::BatchnormLayerParams *)v175);
          }
          if (v176[5]) {
            v177 = (uint64_t *)v176[5];
          }
          else {
            v177 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v181, "BatchNorm");
          uint64_t v178 = *((void *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(v179, "variance");
          CoreML::validateGeneralWeightParams((uint64_t)v177, v152, (const CoreML::Specification::WeightParams *)1, (const void **)&v181.__r_.__value_.__l.__data_, v178, (uint64_t)v179, (uint64_t)v184);
          uint64_t v186 = *(void *)v184;
          if (SHIBYTE(v188) < 0) {
            operator delete((void *)v187);
          }
          long long v187 = *(_OWORD *)&v184[8];
          uint64_t v188 = v185;
          HIBYTE(v185) = 0;
          v184[8] = 0;
          if (v180 < 0) {
            operator delete(v179[0]);
          }
          if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v181.__r_.__value_.__l.__data_);
          }
          CoreML::Result::good((CoreML::Result *)&v186);
        }
LABEL_396:
        *(void *)a3 = v186;
        *(_OWORD *)(a3 + 8) = v187;
        *(void *)(a3 + 24) = v188;
        long long v187 = 0uLL;
        uint64_t v188 = 0;
        goto LABEL_397;
      }
    }
    std::operator+<char>();
    uint64_t v170 = std::string::append(&v181, "' is missing mean and variance.");
    long long v171 = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
    *(void *)&v184[16] = *((void *)&v170->__r_.__value_.__l + 2);
    *(_OWORD *)v184 = v171;
    v170->__r_.__value_.__l.__size_ = 0;
    v170->__r_.__value_.__r.__words[2] = 0;
    v170->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v181.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  if ((v184[23] & 0x80000000) != 0) {
    operator delete(*(void **)v184);
  }
LABEL_397:
  if (SHIBYTE(v188) < 0) {
    operator delete((void *)v187);
  }
}

void sub_224283ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 65) < 0) {
    operator delete(*(void **)(v33 - 88));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateActivation(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v19);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  uint64_t v19 = v16;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  long long v20 = v17;
  uint64_t v21 = v18;
  if (CoreML::Result::good((CoreML::Result *)&v19))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    uint64_t v19 = v16;
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)v20);
    }
    long long v20 = v17;
    uint64_t v21 = v18;
  }
  BOOL v6 = (CoreML::Specification::ActivationParams *)CoreML::Result::good((CoreML::Result *)&v19);
  if ((v6 & 1) == 0) {
    goto LABEL_39;
  }
  if (!*(unsigned char *)this) {
    goto LABEL_37;
  }
  uint64_t v7 = *((_DWORD *)a2 + 35) == 130 ? a2[16] : CoreML::Specification::ActivationParams::default_instance(v6);
  if (*((_DWORD *)v7 + 7) == 25)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ActivationPReLU");
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v16);
    uint64_t v19 = v16;
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)v20);
    }
    long long v20 = v17;
    uint64_t v21 = v18;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v19)) {
      goto LABEL_39;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "ActivationPReLU");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 3, -1, (uint64_t)this + 32, (uint64_t)&v16);
    uint64_t v19 = v16;
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)v20);
    }
    long long v20 = v17;
    uint64_t v21 = v18;
    HIBYTE(v18) = 0;
    LOBYTE(v17) = 0;
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    uint64_t v7 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v19);
    if ((v7 & 1) == 0) {
      goto LABEL_39;
    }
  }
  BOOL v6 = (CoreML::Specification::ActivationParams *)(*((_DWORD *)a2 + 35) == 130
                                                 ? a2[16]
                                                 : CoreML::Specification::ActivationParams::default_instance((CoreML::Specification::ActivationParams *)v7));
  if (*((_DWORD *)v6 + 7) != 71) {
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "ActivationParametricSoftplus");
  int v8 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v10, (uint64_t)v8, (CoreML::Result *)&v16);
  uint64_t v19 = v16;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  long long v20 = v17;
  uint64_t v21 = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v19)) {
    goto LABEL_39;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "ActivationParametricSoftplus");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 3, -1, (uint64_t)v8, (uint64_t)&v16);
  uint64_t v19 = v16;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)v20);
  }
  long long v20 = v17;
  uint64_t v21 = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  BOOL v6 = (CoreML::Specification::ActivationParams *)CoreML::Result::good((CoreML::Result *)&v19);
  if (v6)
  {
LABEL_37:
    if (*((_DWORD *)a2 + 35) == 130) {
      uint64_t v9 = a2[16];
    }
    else {
      uint64_t v9 = CoreML::Specification::ActivationParams::default_instance(v6);
    }
    CoreML::validateActivationParams((CoreML *)v9, (CoreML::Result *)a3);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)v20);
    }
  }
  else
  {
LABEL_39:
    *(void *)a3 = v19;
    *(_OWORD *)(a3 + 8) = v20;
    *(void *)(a3 + 24) = v21;
  }
}

void sub_224283EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 49) < 0) {
    operator delete(*(void **)(v27 - 72));
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateActivationParams@<X0>(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  int v5 = *((_DWORD *)this + 7);
  uint64_t v6 = (v5 - 10);
  if (v6 <= 0x3D)
  {
    if (((1 << (v5 - 10)) & 0x10040100C0300421) != 0)
    {
LABEL_3:
      return CoreML::Result::Result(a2);
    }
    if (v6 == 15)
    {
      char v15 = &CoreML::Specification::_WeightParams_default_instance_;
      if (*(void *)(*((void *)this + 2) + 16)) {
        char v15 = *(uint64_t **)(*((void *)this + 2) + 16);
      }
      uint64_t v16 = v15[5];
      if (*(char *)(v16 + 23) < 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      else {
        uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      }
      uint64_t v21 = v15[6];
      if (*(char *)(v21 + 23) < 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      else {
        uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      }
      int v27 = *((_DWORD *)v15 + 4);
      uint64_t v28 = v15[7];
      if (*(char *)(v28 + 23) < 0) {
        uint64_t v29 = *(void *)(v28 + 8);
      }
      else {
        uint64_t v29 = *(unsigned __int8 *)(v28 + 23);
      }
      BOOL v37 = v27 <= 0;
      BOOL v38 = v27 > 0;
      if (v37) {
        int v39 = 1;
      }
      else {
        int v39 = 2;
      }
      if (v17) {
        unsigned int v40 = v39;
      }
      else {
        unsigned int v40 = v38;
      }
      if (v22) {
        ++v40;
      }
      if (v29) {
        ++v40;
      }
      if (v40 < 2) {
        goto LABEL_3;
      }
      goto LABEL_154;
    }
    if (v6 == 61)
    {
      uint64_t v8 = *((void *)this + 2);
      if (*(void *)(v8 + 16)) {
        uint64_t v9 = *(uint64_t **)(v8 + 16);
      }
      else {
        uint64_t v9 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v10 = v9[5];
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      if (*(char *)(v10 + 23) < 0) {
        uint64_t v12 = *(void *)(v10 + 8);
      }
      else {
        uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
      }
      uint64_t v18 = v9[6];
      uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
      if (*(char *)(v18 + 23) < 0) {
        uint64_t v20 = *(void *)(v18 + 8);
      }
      else {
        uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
      }
      int v23 = *((_DWORD *)v9 + 4);
      uint64_t v24 = v9[7];
      uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
      if (*(char *)(v24 + 23) < 0) {
        uint64_t v26 = *(void *)(v24 + 8);
      }
      else {
        uint64_t v26 = *(unsigned __int8 *)(v24 + 23);
      }
      BOOL v30 = v23 > 0;
      if (v23 <= 0) {
        int v31 = 1;
      }
      else {
        int v31 = 2;
      }
      if (v12) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v23 > 0;
      }
      if (v20) {
        ++v32;
      }
      if (v26) {
        unsigned int v33 = v32 + 1;
      }
      else {
        unsigned int v33 = v32;
      }
      if (v33 <= 1)
      {
        if (v33) {
          int v34 = 0;
        }
        else {
          int v34 = 5;
        }
        if (v23 <= 0 && v33 != 0)
        {
          if ((v11 & 0x80) != 0) {
            uint64_t v36 = *(void *)(v10 + 8);
          }
          else {
            uint64_t v36 = *(unsigned __int8 *)(v10 + 23);
          }
          if (v36)
          {
            int v34 = 1;
          }
          else
          {
            if ((v19 & 0x80) != 0) {
              uint64_t v41 = *(void *)(v18 + 8);
            }
            else {
              uint64_t v41 = *(unsigned __int8 *)(v18 + 23);
            }
            uint64_t v42 = v9[8];
            if (v9 == &CoreML::Specification::_WeightParams_default_instance_
              || (v41 ? (BOOL v43 = v42 == 0) : (BOOL v43 = 1), v43))
            {
              if ((v25 & 0x80) != 0) {
                uint64_t v44 = *(void *)(v24 + 8);
              }
              else {
                uint64_t v44 = *(unsigned __int8 *)(v24 + 23);
              }
              if (v42) {
                BOOL v45 = v44 == 0;
              }
              else {
                BOOL v45 = 1;
              }
              if (v45 || v9 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v34 = 5;
              }
              else {
                int v34 = 3;
              }
            }
            else
            {
              int v34 = 2;
            }
          }
        }
      }
      else
      {
        int v34 = 4;
      }
      uint64_t v47 = *(uint64_t **)(v8 + 24);
      if (!v47) {
        uint64_t v47 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v48 = v47[5];
      uint64_t v49 = *(unsigned __int8 *)(v48 + 23);
      if (*(char *)(v48 + 23) < 0) {
        uint64_t v50 = *(void *)(v48 + 8);
      }
      else {
        uint64_t v50 = *(unsigned __int8 *)(v48 + 23);
      }
      uint64_t v51 = v47[6];
      uint64_t v52 = *(unsigned __int8 *)(v51 + 23);
      if (*(char *)(v51 + 23) < 0) {
        uint64_t v53 = *(void *)(v51 + 8);
      }
      else {
        uint64_t v53 = *(unsigned __int8 *)(v51 + 23);
      }
      int v54 = *((_DWORD *)v47 + 4);
      uint64_t v55 = v47[7];
      uint64_t v56 = *(unsigned __int8 *)(v55 + 23);
      if (*(char *)(v55 + 23) < 0) {
        uint64_t v57 = *(void *)(v55 + 8);
      }
      else {
        uint64_t v57 = *(unsigned __int8 *)(v55 + 23);
      }
      if (v54 <= 0) {
        int v58 = 1;
      }
      else {
        int v58 = 2;
      }
      if (v50) {
        unsigned int v59 = v58;
      }
      else {
        unsigned int v59 = v54 > 0;
      }
      if (v53) {
        ++v59;
      }
      if (v57) {
        unsigned int v60 = v59 + 1;
      }
      else {
        unsigned int v60 = v59;
      }
      if (v60 <= 1)
      {
        if (v60) {
          int v61 = 0;
        }
        else {
          int v61 = 5;
        }
        if (v54 <= 0 && v60)
        {
          if ((v49 & 0x80) != 0) {
            uint64_t v49 = *(void *)(v48 + 8);
          }
          if (v49)
          {
            int v61 = 1;
          }
          else
          {
            if ((v52 & 0x80) != 0) {
              uint64_t v52 = *(void *)(v51 + 8);
            }
            uint64_t v62 = v47[8];
            if (v47 != &CoreML::Specification::_WeightParams_default_instance_ && v52 && v62)
            {
              int v61 = 2;
            }
            else
            {
              if ((v56 & 0x80) != 0) {
                uint64_t v56 = *(void *)(v55 + 8);
              }
              if (v62) {
                BOOL v63 = v56 == 0;
              }
              else {
                BOOL v63 = 1;
              }
              BOOL v64 = v63 || v47 == &CoreML::Specification::_WeightParams_default_instance_;
              uint64_t v56 = 3;
              if (v64) {
                int v61 = 5;
              }
              else {
                int v61 = 3;
              }
            }
          }
        }
      }
      else
      {
        int v61 = 4;
      }
      if (v34 == v61)
      {
        if ((v11 & 0x80) != 0)
        {
          uint64_t v11 = *(void *)(v10 + 8);
          if ((v19 & 0x80) == 0)
          {
LABEL_144:
            if ((v25 & 0x80) == 0) {
              goto LABEL_145;
            }
LABEL_162:
            uint64_t v25 = *(void *)(v24 + 8);
LABEL_145:
            if (v11) {
              unsigned int v65 = v31;
            }
            else {
              unsigned int v65 = v30;
            }
            if (v19) {
              ++v65;
            }
            if (v25) {
              ++v65;
            }
            if (v65 <= 1
              && CoreML::valueType((CoreML *)v47, (const CoreML::Specification::WeightParams *)v56) != 4)
            {
              goto LABEL_3;
            }
            goto LABEL_154;
          }
        }
        else if ((v19 & 0x80) == 0)
        {
          goto LABEL_144;
        }
        uint64_t v19 = *(void *)(v18 + 8);
        if ((v25 & 0x80) == 0) {
          goto LABEL_145;
        }
        goto LABEL_162;
      }
LABEL_154:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Nonlinearity type ", 18);
      long long v66 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)this + 7));
      size_t v67 = strlen(v66);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v66, v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" has inconsistent weight parameter types.", 41);
      std::stringbuf::str();
      CoreML::Result::Result(a2, 13);
      goto LABEL_155;
    }
  }
  if (v5 == 5) {
    goto LABEL_3;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Nonlinearity type ", 18);
  char v13 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)this + 7));
  size_t v14 = strlen(v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" is not supported in this version of CoreML.", 44);
  std::stringbuf::str();
  CoreML::Result::Result(a2, 13);
LABEL_155:
  if (v70 < 0) {
    operator delete(__p);
  }
  v71[0] = *MEMORY[0x263F8C2B8];
  uint64_t v68 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v71 + *(void *)(v71[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v72[0] = v68;
  v72[1] = MEMORY[0x263F8C318] + 16;
  if (v73 < 0) {
    operator delete((void *)v72[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return (CoreML::Result *)MEMORY[0x22A614E30](&v74);
}

void sub_2242845E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validatePoolingLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(void *)a3 = v16.__r_.__value_.__r.__words[0];
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
    BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
    if (v7)
    {
      if (!*(unsigned char *)this) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Pooling");
      uint64_t v8 = (char *)this + 32;
      CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
      *(void *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(void *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (CoreML::Result::good((CoreML::Result *)a3))
      {
        std::string::basic_string[abi:ne180100]<0>(v12, "Pooling");
        CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 4, -1, (uint64_t)v8, (uint64_t)&v16);
        *(void *)a3 = v16.__r_.__value_.__r.__words[0];
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v6);
        }
        *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
        *(void *)(a3 + 24) = v17;
        HIBYTE(v17) = 0;
        v16.__r_.__value_.__s.__data_[8] = 0;
        if (SHIBYTE(v13) < 0) {
          operator delete(v12[0]);
        }
        BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
        if (v7)
        {
LABEL_18:
          if (*((_DWORD *)a2 + 35) == 120) {
            uint64_t v9 = a2[16];
          }
          else {
            uint64_t v9 = CoreML::Specification::PoolingLayerParams::default_instance((CoreML::Specification::PoolingLayerParams *)v7);
          }
          if (!*((_DWORD *)v9 + 21))
          {
            std::operator+<char>();
            uint64_t v10 = std::string::append(&v16, "' is not set.");
            long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
            std::string::size_type v13 = v10->__r_.__value_.__r.__words[2];
            *(_OWORD *)uint64_t v12 = v11;
            v10->__r_.__value_.__l.__size_ = 0;
            v10->__r_.__value_.__r.__words[2] = 0;
            v10->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v16.__r_.__value_.__l.__data_);
            }
            CoreML::Result::Result(&v16, 13);
            *(void *)a3 = v16.__r_.__value_.__r.__words[0];
            if (*(char *)(a3 + 31) < 0) {
              operator delete(*v6);
            }
            *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
            *(void *)(a3 + 24) = v17;
            if (SHIBYTE(v13) < 0) {
              operator delete(v12[0]);
            }
          }
        }
      }
    }
  }
}

void sub_2242848AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 + 31) < 0) {
    operator delete(*(void **)(v26 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePooling3dLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v28);
  *(void *)a3 = v28;
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v29;
  *(void *)(a3 + 24) = v30;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v28);
    *(void *)a3 = v28;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v29;
    *(void *)(a3 + 24) = v30;
    BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
    if (v7)
    {
      if (!*(unsigned char *)this) {
        goto LABEL_18;
      }
      std::string::basic_string[abi:ne180100]<0>(v41, "Pooling3d");
      uint64_t v8 = (char *)this + 32;
      CoreML::validateInputOutputRankEquality(a2, (uint64_t)v41, (uint64_t)v8, (CoreML::Result *)&v28);
      *(void *)a3 = v28;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = v29;
      *(void *)(a3 + 24) = v30;
      HIBYTE(v30) = 0;
      LOBYTE(v29) = 0;
      if (v42 < 0) {
        operator delete(v41[0]);
      }
      if (CoreML::Result::good((CoreML::Result *)a3))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "Pooling3d");
        CoreML::validateRankCount((uint64_t)a2, (uint64_t)&__p, 5, -1, (uint64_t)v8, (uint64_t)&v28);
        *(void *)a3 = v28;
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v6);
        }
        *(_OWORD *)uint64_t v6 = v29;
        *(void *)(a3 + 24) = v30;
        HIBYTE(v30) = 0;
        LOBYTE(v29) = 0;
        if (SHIBYTE(v26) < 0) {
          operator delete(__p);
        }
        BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
        if (v7)
        {
LABEL_18:
          if (*((_DWORD *)a2 + 35) == 1465) {
            uint64_t v9 = a2[16];
          }
          else {
            uint64_t v9 = CoreML::Specification::Pooling3DLayerParams::default_instance((CoreML::Specification::Pooling3DLayerParams *)v7);
          }
          CoreML::Specification::Pooling3DLayerParams::Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&v28, (const CoreML::Specification::Pooling3DLayerParams *)v9);
          int v10 = HIDWORD(v29);
          std::string::basic_string[abi:ne180100]<0>(v23, "Kernel Depth");
          CoreML::validatePositive(v10, (const void **)v23, (CoreML::Result *)&__p);
          *(void *)a3 = __p;
          if (*(char *)(a3 + 31) < 0) {
            operator delete(*v6);
          }
          *(_OWORD *)uint64_t v6 = v26;
          *(void *)(a3 + 24) = v27;
          HIBYTE(v27) = 0;
          LOBYTE(v26) = 0;
          if (v24 < 0) {
            operator delete(v23[0]);
          }
          if (CoreML::Result::good((CoreML::Result *)a3))
          {
            int v11 = v30;
            std::string::basic_string[abi:ne180100]<0>(v23, "Kernel Height");
            CoreML::validatePositive(v11, (const void **)v23, (CoreML::Result *)&__p);
            *(void *)a3 = __p;
            if (*(char *)(a3 + 31) < 0) {
              operator delete(*v6);
            }
            *(_OWORD *)uint64_t v6 = v26;
            *(void *)(a3 + 24) = v27;
            HIBYTE(v27) = 0;
            LOBYTE(v26) = 0;
            if (v24 < 0) {
              operator delete(v23[0]);
            }
            if (CoreML::Result::good((CoreML::Result *)a3))
            {
              int v12 = HIDWORD(v30);
              std::string::basic_string[abi:ne180100]<0>(v23, "Kernel Width");
              CoreML::validatePositive(v12, (const void **)v23, (CoreML::Result *)&__p);
              *(void *)a3 = __p;
              if (*(char *)(a3 + 31) < 0) {
                operator delete(*v6);
              }
              *(_OWORD *)uint64_t v6 = v26;
              *(void *)(a3 + 24) = v27;
              HIBYTE(v27) = 0;
              LOBYTE(v26) = 0;
              if (v24 < 0) {
                operator delete(v23[0]);
              }
              if (CoreML::Result::good((CoreML::Result *)a3))
              {
                int v13 = v31;
                std::string::basic_string[abi:ne180100]<0>(v23, "Stride Depth");
                CoreML::validatePositive(v13, (const void **)v23, (CoreML::Result *)&__p);
                *(void *)a3 = __p;
                if (*(char *)(a3 + 31) < 0) {
                  operator delete(*v6);
                }
                *(_OWORD *)uint64_t v6 = v26;
                *(void *)(a3 + 24) = v27;
                HIBYTE(v27) = 0;
                LOBYTE(v26) = 0;
                if (v24 < 0) {
                  operator delete(v23[0]);
                }
                if (CoreML::Result::good((CoreML::Result *)a3))
                {
                  int v14 = v32;
                  std::string::basic_string[abi:ne180100]<0>(v23, "Stride Height");
                  CoreML::validatePositive(v14, (const void **)v23, (CoreML::Result *)&__p);
                  *(void *)a3 = __p;
                  if (*(char *)(a3 + 31) < 0) {
                    operator delete(*v6);
                  }
                  *(_OWORD *)uint64_t v6 = v26;
                  *(void *)(a3 + 24) = v27;
                  HIBYTE(v27) = 0;
                  LOBYTE(v26) = 0;
                  if (v24 < 0) {
                    operator delete(v23[0]);
                  }
                  if (CoreML::Result::good((CoreML::Result *)a3))
                  {
                    int v15 = v33;
                    std::string::basic_string[abi:ne180100]<0>(v23, "Stride Width");
                    CoreML::validatePositive(v15, (const void **)v23, (CoreML::Result *)&__p);
                    *(void *)a3 = __p;
                    if (*(char *)(a3 + 31) < 0) {
                      operator delete(*v6);
                    }
                    *(_OWORD *)uint64_t v6 = v26;
                    *(void *)(a3 + 24) = v27;
                    HIBYTE(v27) = 0;
                    LOBYTE(v26) = 0;
                    if (v24 < 0) {
                      operator delete(v23[0]);
                    }
                    if (CoreML::Result::good((CoreML::Result *)a3))
                    {
                      int v16 = v40;
                      int v17 = v34;
                      std::string::basic_string[abi:ne180100]<0>(v23, "Front");
                      CoreML::validatePooling3dPadding(v16, v17, (CoreML::Result *)&__p);
                      *(void *)a3 = __p;
                      if (*(char *)(a3 + 31) < 0) {
                        operator delete(*v6);
                      }
                      *(_OWORD *)uint64_t v6 = v26;
                      *(void *)(a3 + 24) = v27;
                      HIBYTE(v27) = 0;
                      LOBYTE(v26) = 0;
                      if (v24 < 0) {
                        operator delete(v23[0]);
                      }
                      if (CoreML::Result::good((CoreML::Result *)a3))
                      {
                        int v18 = v35;
                        std::string::basic_string[abi:ne180100]<0>(v23, "Back");
                        CoreML::validatePooling3dPadding(v16, v18, (CoreML::Result *)&__p);
                        *(void *)a3 = __p;
                        if (*(char *)(a3 + 31) < 0) {
                          operator delete(*v6);
                        }
                        *(_OWORD *)uint64_t v6 = v26;
                        *(void *)(a3 + 24) = v27;
                        HIBYTE(v27) = 0;
                        LOBYTE(v26) = 0;
                        if (v24 < 0) {
                          operator delete(v23[0]);
                        }
                        if (CoreML::Result::good((CoreML::Result *)a3))
                        {
                          int v19 = v36;
                          std::string::basic_string[abi:ne180100]<0>(v23, "Top");
                          CoreML::validatePooling3dPadding(v16, v19, (CoreML::Result *)&__p);
                          *(void *)a3 = __p;
                          if (*(char *)(a3 + 31) < 0) {
                            operator delete(*v6);
                          }
                          *(_OWORD *)uint64_t v6 = v26;
                          *(void *)(a3 + 24) = v27;
                          HIBYTE(v27) = 0;
                          LOBYTE(v26) = 0;
                          if (v24 < 0) {
                            operator delete(v23[0]);
                          }
                          if (CoreML::Result::good((CoreML::Result *)a3))
                          {
                            int v20 = v37;
                            std::string::basic_string[abi:ne180100]<0>(v23, "Bottom");
                            CoreML::validatePooling3dPadding(v16, v20, (CoreML::Result *)&__p);
                            *(void *)a3 = __p;
                            if (*(char *)(a3 + 31) < 0) {
                              operator delete(*v6);
                            }
                            *(_OWORD *)uint64_t v6 = v26;
                            *(void *)(a3 + 24) = v27;
                            HIBYTE(v27) = 0;
                            LOBYTE(v26) = 0;
                            if (v24 < 0) {
                              operator delete(v23[0]);
                            }
                            if (CoreML::Result::good((CoreML::Result *)a3))
                            {
                              int v21 = v38;
                              std::string::basic_string[abi:ne180100]<0>(v23, "Left");
                              CoreML::validatePooling3dPadding(v16, v21, (CoreML::Result *)&__p);
                              *(void *)a3 = __p;
                              if (*(char *)(a3 + 31) < 0) {
                                operator delete(*v6);
                              }
                              *(_OWORD *)uint64_t v6 = v26;
                              *(void *)(a3 + 24) = v27;
                              HIBYTE(v27) = 0;
                              LOBYTE(v26) = 0;
                              if (v24 < 0) {
                                operator delete(v23[0]);
                              }
                              if (CoreML::Result::good((CoreML::Result *)a3))
                              {
                                int v22 = v39;
                                std::string::basic_string[abi:ne180100]<0>(v23, "Right");
                                CoreML::validatePooling3dPadding(v16, v22, (CoreML::Result *)&__p);
                                *(void *)a3 = __p;
                                if (*(char *)(a3 + 31) < 0) {
                                  operator delete(*v6);
                                }
                                *(_OWORD *)uint64_t v6 = v26;
                                *(void *)(a3 + 24) = v27;
                                HIBYTE(v27) = 0;
                                LOBYTE(v26) = 0;
                                if (v24 < 0) {
                                  operator delete(v23[0]);
                                }
                                CoreML::Result::good((CoreML::Result *)a3);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          CoreML::Specification::Pooling3DLayerParams::~Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&v28);
        }
      }
    }
  }
}

void sub_22428506C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  CoreML::Specification::Pooling3DLayerParams::~Pooling3DLayerParams((CoreML::Specification::Pooling3DLayerParams *)&a22);
  if (*(char *)(v22 + 31) < 0) {
    operator delete(*(void **)(v22 + 8));
  }
  _Unwind_Resume(a1);
}

void CoreML::validatePooling3dPadding(int a1@<W0>, int a2@<W1>, CoreML::Result *a3@<X8>)
{
  if (a1)
  {
    if (a2)
    {
      std::operator+<char>();
      uint64_t v6 = std::string::append(&v30, " cannot be non-zero (got ");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v29, a2);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v29;
      }
      else {
        uint64_t v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v29.__r_.__value_.__l.__size_;
      }
      int v10 = std::string::append(&v31, (const std::string::value_type *)v8, size);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      int v12 = std::string::append(&v32, ") unless padding type is CUSTOM (got ");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, a1);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v14 = &v28;
      }
      else {
        int v14 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v15 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v15 = v28.__r_.__value_.__l.__size_;
      }
      int v16 = std::string::append(&v33, (const std::string::value_type *)v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      int v18 = std::string::append(&v34, ").");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v18->__r_.__value_.__r.__words[2];
      long long v35 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      CoreML::Result::Result(a3, 13);
LABEL_49:
      if (SHIBYTE(v36) < 0) {
        operator delete((void *)v35);
      }
      return;
    }
  }
  else if (a2 < 0)
  {
    std::operator+<char>();
    int v20 = std::string::append(&v32, " must be non-negative, got ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v31, a2);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v22 = &v31;
    }
    else {
      uint64_t v22 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v23 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v23 = v31.__r_.__value_.__l.__size_;
    }
    char v24 = std::string::append(&v33, (const std::string::value_type *)v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    long long v26 = std::string::append(&v34, ".");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    std::string::size_type v36 = v26->__r_.__value_.__r.__words[2];
    long long v35 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(a3, 13);
    goto LABEL_49;
  }
  CoreML::Result::Result(a3);
}

void sub_224285478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 57) < 0) {
    operator delete(*(void **)(v47 - 80));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateGlobalPooling3dLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(void *)a3 = v13;
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v14;
  *(void *)(a3 + 24) = v15;
  BOOL result = CoreML::Result::good((CoreML::Result *)a3);
  if (result)
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v14;
    *(void *)(a3 + 24) = v15;
    BOOL result = CoreML::Result::good((CoreML::Result *)a3);
    if (result && *(unsigned char *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Pooling3d");
      uint64_t v8 = (char *)this + 32;
      CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
      *(void *)a3 = v13;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = v14;
      *(void *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      BOOL result = CoreML::Result::good((CoreML::Result *)a3);
      if (result)
      {
        std::string::basic_string[abi:ne180100]<0>(v9, "Pooling3d");
        CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 5, -1, (uint64_t)v8, (uint64_t)&v13);
        *(void *)a3 = v13;
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v6);
        }
        *(_OWORD *)uint64_t v6 = v14;
        *(void *)(a3 + 24) = v15;
        HIBYTE(v15) = 0;
        LOBYTE(v14) = 0;
        if (v10 < 0) {
          operator delete(v9[0]);
        }
        return CoreML::Result::good((CoreML::Result *)a3);
      }
    }
  }
  return result;
}

void sub_22428575C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePaddingLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v29);
  *(void *)a3 = v29.__r_.__value_.__r.__words[0];
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v30;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v29);
    *(void *)a3 = v29.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v30;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Padding");
    uint64_t v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v29);
    *(void *)a3 = v29.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v30;
    HIBYTE(v30) = 0;
    v29.__r_.__value_.__s.__data_[8] = 0;
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "Padding");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v25, 2, -1, (uint64_t)v8, (uint64_t)&v29);
      *(void *)a3 = v29.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
      *(void *)(a3 + 24) = v30;
      HIBYTE(v30) = 0;
      v29.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v26) < 0) {
        operator delete(v25[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 200) {
          uint64_t v9 = a2[16];
        }
        else {
          uint64_t v9 = CoreML::Specification::PaddingLayerParams::default_instance((CoreML::Specification::PaddingLayerParams *)v7);
        }
        char v10 = (uint64_t *)v9[2];
        if (!v10) {
          char v10 = &CoreML::Specification::_BorderAmounts_default_instance_;
        }
        if ((*((_DWORD *)v10 + 6) | 2) == 2)
        {
          if (*((_DWORD *)v9 + 9)) {
            return;
          }
          std::operator+<char>();
          long long v11 = std::string::append(&v29, " padding type is not set.");
          long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          std::string::size_type v26 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v25 = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v29, 13);
        }
        else
        {
          std::operator+<char>();
          uint64_t v13 = std::string::append(&v23, " specifies ");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          v24.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          uint64_t v15 = (uint64_t *)v9[2];
          if (!v15) {
            uint64_t v15 = &CoreML::Specification::_BorderAmounts_default_instance_;
          }
          std::to_string(&v22, *((_DWORD *)v15 + 6));
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v16 = &v22;
          }
          else {
            int v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
          }
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v22.__r_.__value_.__l.__size_;
          }
          int v18 = std::string::append(&v24, (const std::string::value_type *)v16, size);
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          v29.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          uint64_t v20 = std::string::append(&v29, " padding amounts but it must either specify 2 (for x and y axes), or 0 for the default values.");
          long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          std::string::size_type v26 = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v25 = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v24.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v23.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v29, 13);
        }
        *(void *)a3 = v29.__r_.__value_.__r.__words[0];
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v6);
        }
        *(_OWORD *)uint64_t v6 = *(_OWORD *)&v29.__r_.__value_.__r.__words[1];
        *(void *)(a3 + 24) = v30;
        if (SHIBYTE(v26) < 0) {
          operator delete(v25[0]);
        }
      }
    }
  }
}

void sub_224285B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v39 + 31) < 0) {
    operator delete(*(void **)(v39 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLRNLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(void *)a3 = v16.__r_.__value_.__r.__words[0];
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "LRNLayer");
    uint64_t v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
    HIBYTE(v17) = 0;
    v16.__r_.__value_.__s.__data_[8] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "LRNLayer");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 3, -1, (uint64_t)v8, (uint64_t)&v16);
      *(void *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(void *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 180) {
          uint64_t v9 = a2[16];
        }
        else {
          uint64_t v9 = CoreML::Specification::LRNLayerParams::default_instance((CoreML::Specification::LRNLayerParams *)v7);
        }
        if (*((float *)v9 + 8) < 0.0)
        {
          std::operator+<char>();
          char v10 = std::string::append(&v16, "' must be positive.");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          std::string::size_type v13 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v12 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v16, 13);
          *(void *)a3 = v16.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0) {
            operator delete(*v6);
          }
          *(_OWORD *)uint64_t v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
          *(void *)(a3 + 24) = v17;
          if (SHIBYTE(v13) < 0) {
            operator delete(v12[0]);
          }
        }
      }
    }
  }
}

void sub_224285ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 + 31) < 0) {
    operator delete(*(void **)(v26 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSplitLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  v32[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v29);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v26);
  std::string v29 = v26;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v27;
  uint64_t v31 = v28;
  if (CoreML::Result::good((CoreML::Result *)&v29))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)&v26);
    std::string v29 = v26;
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v27;
    uint64_t v31 = v28;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v29) || !*(unsigned char *)this) {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(v24, "Split");
  uint64_t v6 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v24, (uint64_t)this + 32, (CoreML::Result *)&v26);
  std::string v29 = v26;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v27;
  uint64_t v31 = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v29)) {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "Split");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v23, 3, -1, (uint64_t)this + 32, (uint64_t)&v26);
  std::string v29 = v26;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v27;
  uint64_t v31 = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (CoreML::Result::good((CoreML::Result *)&v29)
    && (BOOL v7 = (char *)this + 40,
        (CoreML::NeuralNetworkSpecValidator *)((char *)this + 40) != (CoreML::NeuralNetworkSpecValidator *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, *(const void ***)(*((void *)a2 + 7) + 8)))
    && ((v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 32, *(const void ***)(*((void *)a2 + 7) + 8)), (uint64_t v9 = *((void *)a2 + 7)) != 0)? (v10 = (const void ***)(v9 + 8)): (v10 = 0), v11 = *((int *)a2 + 12), v11))
  {
    int v12 = *v8;
    uint64_t v13 = 8 * v11;
    while (1)
    {
      long long v14 = *v10;
      if (v7 != (char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v6, *v10)&& v12 != *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v6, v14))
      {
        break;
      }
      ++v10;
      v13 -= 8;
      if (!v13) {
        goto LABEL_28;
      }
    }
    char v15 = (long long *)*((void *)a2 + 14);
    if (*((char *)v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v15, *((void *)v15 + 1));
    }
    else
    {
      long long v16 = *v15;
      v22.__r_.__value_.__r.__words[2] = *((void *)v15 + 2);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v16;
    }
    uint64_t v17 = std::string::insert(&v22, 0, "Layer '");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    long long v19 = std::string::append(&v23, "' of type 'Split' must have equal ranks for its outputs, but they are not equal.");
    uint64_t v20 = (void *)v19->__r_.__value_.__r.__words[0];
    v32[0] = v19->__r_.__value_.__l.__size_;
    *(void *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v27 + 7) = *(void *)((char *)v32 + 7);
    uint64_t v26 = v20;
    *(void *)&long long v27 = v32[0];
    HIBYTE(v27) = v21;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v27) < 0) {
      operator delete(v26);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
LABEL_28:
    *(void *)a3 = v29;
    *(_OWORD *)(a3 + 8) = __p;
    *(void *)(a3 + 24) = v31;
  }
}

void sub_2242862E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateAddLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  int v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)int v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)int v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224286458(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateMultiplyLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  int v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)int v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)int v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224286540(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateUnaryFunctionLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v10);
  *(void *)a3 = v10;
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v11;
  *(void *)(a3 + 24) = v12;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v10);
    *(void *)a3 = v10;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v11;
    *(void *)(a3 + 24) = v12;
  }
  BOOL result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Unary");
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v10);
    *(void *)a3 = v10;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v11;
    *(void *)(a3 + 24) = v12;
    HIBYTE(v12) = 0;
    LOBYTE(v11) = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    return CoreML::Result::good((CoreML::Result *)a3);
  }
  return result;
}

void sub_2242866AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*(void **)(v15 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateUpsampleLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, int **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v37);
  *(void *)a3 = v37.__r_.__value_.__r.__words[0];
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v38;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v37);
    *(void *)a3 = v37.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v38;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(v35, "Upsample");
    long long v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v35, (uint64_t)v8, (CoreML::Result *)&v37);
    *(void *)a3 = v37.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v38;
    HIBYTE(v38) = 0;
    v37.__r_.__value_.__s.__data_[8] = 0;
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(&v33, "Upsample");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v33, 3, -1, (uint64_t)v8, (uint64_t)&v37);
      *(void *)a3 = v37.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
      *(void *)(a3 + 24) = v38;
      HIBYTE(v38) = 0;
      v37.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v34) < 0) {
        operator delete((void *)v33);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 210) {
          char v9 = a2[16];
        }
        else {
          char v9 = (int *)CoreML::Specification::UpsampleLayerParams::default_instance((CoreML::Specification::UpsampleLayerParams *)v7);
        }
        int v10 = v9[4];
        int v11 = v9[10];
        if (v10)
        {
          if (v10 != 2 || v11)
          {
LABEL_38:
            std::operator+<char>();
            long long v16 = std::string::append(&v30, "'. Only one of scalingFactor and fractionalScalingFactor can be set, and if set, must be of size 2. Found scalingFactor of size ");
            long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
            v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
            v16->__r_.__value_.__l.__size_ = 0;
            v16->__r_.__value_.__r.__words[2] = 0;
            v16->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v29, v9[4]);
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v18 = &v29;
            }
            else {
              long long v18 = (std::string *)v29.__r_.__value_.__r.__words[0];
            }
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v29.__r_.__value_.__l.__size_;
            }
            uint64_t v20 = std::string::append(&v31, (const std::string::value_type *)v18, size);
            long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v32.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            std::string v22 = std::string::append(&v32, " and fractionalScalingFactor of size ");
            long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            v37.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v23;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v28, v9[10]);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v24 = &v28;
            }
            else {
              std::string v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v25 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v25 = v28.__r_.__value_.__l.__size_;
            }
            uint64_t v26 = std::string::append(&v37, (const std::string::value_type *)v24, v25);
            long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            std::string::size_type v34 = v26->__r_.__value_.__r.__words[2];
            long long v33 = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v28.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v32.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v31.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v30.__r_.__value_.__l.__data_);
            }
            CoreML::Result::Result(&v37, 13);
            goto LABEL_63;
          }
        }
        else if (v11)
        {
          if (v11 != 2) {
            goto LABEL_38;
          }
          if (!v9[15] || !v9[16])
          {
            std::operator+<char>();
            uint64_t v12 = std::string::append(&v37, "'. Fractional upsample only compatible with align_corners=true or align_corners=false");
            long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
            std::string::size_type v34 = v12->__r_.__value_.__r.__words[2];
            long long v33 = v13;
            v12->__r_.__value_.__l.__size_ = 0;
            v12->__r_.__value_.__r.__words[2] = 0;
            v12->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
LABEL_32:
            CoreML::Result::Result(&v37, 13);
LABEL_63:
            *(void *)a3 = v37.__r_.__value_.__r.__words[0];
            if (*(char *)(a3 + 31) < 0) {
              operator delete(*v6);
            }
            *(_OWORD *)uint64_t v6 = *(_OWORD *)&v37.__r_.__value_.__r.__words[1];
            *(void *)(a3 + 24) = v38;
            if (SHIBYTE(v34) < 0) {
              operator delete((void *)v33);
            }
            return;
          }
LABEL_34:
          if (v9[15]) {
            return;
          }
          std::operator+<char>();
          long long v14 = std::string::append(&v37, "' of type Upsample uses Nearest Neighbors but uses linear upsampling mode other than DEFAULT.");
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          std::string::size_type v34 = v14->__r_.__value_.__r.__words[2];
          long long v33 = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          goto LABEL_32;
        }
        if (!v9[16]) {
          return;
        }
        goto LABEL_34;
      }
    }
  }
}

void sub_224286B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (*(char *)(v40 + 31) < 0) {
    operator delete(*(void **)(v40 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBiasLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v50);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v48);
  std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  uint64_t v52 = v49;
  if (CoreML::Result::good((CoreML::Result *)&v50))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v48);
    std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    uint64_t v52 = v49;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v50);
  if (!v6) {
    goto LABEL_64;
  }
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Bias");
    BOOL v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)&v48);
    std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    uint64_t v52 = v49;
    HIBYTE(v49) = 0;
    v48.__r_.__value_.__s.__data_[8] = 0;
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v50)) {
      goto LABEL_64;
    }
    std::string::basic_string[abi:ne180100]<0>(&v45, "Bias");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v45, 3, -1, (uint64_t)v7, (uint64_t)&v48);
    std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    uint64_t v52 = v49;
    HIBYTE(v49) = 0;
    v48.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    BOOL v6 = CoreML::Result::good((CoreML::Result *)&v50);
    if (!v6) {
      goto LABEL_64;
    }
  }
  if (*((_DWORD *)a2 + 35) == 250) {
    long long v8 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    long long v8 = CoreML::Specification::BiasLayerParams::default_instance((CoreML::Specification::BiasLayerParams *)v6);
  }
  if (v8[5]) {
    char v9 = (uint64_t *)v8[5];
  }
  else {
    char v9 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v10 = v9[5];
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  uint64_t v12 = v9[6];
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  int v14 = *((_DWORD *)v9 + 4);
  uint64_t v15 = v9[7];
  if (*(char *)(v15 + 23) < 0) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  }
  BOOL v17 = v14 <= 0;
  BOOL v18 = v14 > 0;
  if (v17) {
    int v19 = 1;
  }
  else {
    int v19 = 2;
  }
  if (v11) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v18;
  }
  if (v13) {
    ++v20;
  }
  if (v16) {
    ++v20;
  }
  if (v20 > 1)
  {
    std::operator+<char>();
    long long v21 = std::string::append(&v48, "' has both full precision and half precision weights and/or bias fields populated");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(&v48, 13);
    std::string::size_type v23 = v48.__r_.__value_.__r.__words[0];
    std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0)
    {
      operator delete((void *)v51);
      std::string::size_type v23 = v50;
    }
    long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    uint64_t v24 = v49;
    *(void *)a3 = v23;
    *(_OWORD *)(a3 + 8) = v51;
    *(void *)(a3 + 24) = v24;
    long long v51 = 0uLL;
    uint64_t v52 = 0;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v25 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_84:
      operator delete(v25);
      goto LABEL_65;
    }
    goto LABEL_65;
  }
  int v26 = *((_DWORD *)v8 + 4);
  if ((v26 | 2) == 3)
  {
    long long v27 = (uint64_t *)(v8[3] + 8);
    uint64_t v28 = 1;
    uint64_t v29 = *((unsigned int *)v8 + 4);
    do
    {
      uint64_t v30 = *v27++;
      v28 *= v30;
      --v29;
    }
    while (v29);
    if (v26 == 3 && (std::string v31 = *(const CoreML::Specification::WeightParams **)(v8[3] + 8), (unint64_t)v31 >= 2))
    {
      std::string::basic_string[abi:ne180100]<0>(&v45, "Bias");
      uint64_t v32 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v44, "bias");
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v28, v31, (const void **)&v45.__r_.__value_.__l.__data_, v32, (uint64_t)&v44, (uint64_t)&v48);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v45, "Bias");
      uint64_t v33 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v44, "bias");
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v28, (const CoreML::Specification::WeightParams *)1, (const void **)&v45.__r_.__value_.__l.__data_, v33, (uint64_t)&v44, (uint64_t)&v48);
    }
    std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    uint64_t v52 = v49;
    HIBYTE(v49) = 0;
    v48.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
LABEL_64:
    *(void *)a3 = v50;
    *(_OWORD *)(a3 + 8) = v51;
    *(void *)(a3 + 24) = v52;
    long long v51 = 0uLL;
    uint64_t v52 = 0;
    goto LABEL_65;
  }
  std::operator+<char>();
  std::string::size_type v34 = std::string::append(&v43, "' cannot be ");
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v42, *((_DWORD *)v8 + 4));
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v36 = &v42;
  }
  else {
    char v36 = (std::string *)v42.__r_.__value_.__r.__words[0];
  }
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v42.__r_.__value_.__l.__size_;
  }
  uint64_t v38 = std::string::append(&v44, (const std::string::value_type *)v36, size);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  uint64_t v40 = std::string::append(&v45, " dimensional. Must be 1D or 3D.");
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v25 = (void *)v48.__r_.__value_.__r.__words[0];
    goto LABEL_84;
  }
LABEL_65:
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
}

void sub_22428723C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v45 - 65) < 0) {
    operator delete(*(void **)(v45 - 88));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateL2NormLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(void *)a3 = v13;
  BOOL v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)BOOL v6 = v14;
  *(void *)(a3 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = v14;
    *(void *)(a3 + 24) = v15;
  }
  BOOL result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "L2Normalize");
    long long v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = v14;
    *(void *)(a3 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    BOOL result = CoreML::Result::good((CoreML::Result *)a3);
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "L2Normalize");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 3, -1, (uint64_t)v8, (uint64_t)&v13);
      *(void *)a3 = v13;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)BOOL v6 = v14;
      *(void *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      return CoreML::Result::good((CoreML::Result *)a3);
    }
  }
  return result;
}

void sub_224287508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(void *)a3 = v16.__r_.__value_.__r.__words[0];
  BOOL v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Reshape");
    long long v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
    HIBYTE(v17) = 0;
    v16.__r_.__value_.__s.__data_[8] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "Reshape");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 5, 5, (uint64_t)v8, (uint64_t)&v16);
      *(void *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(void *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 300) {
          char v9 = a2[16];
        }
        else {
          char v9 = CoreML::Specification::ReshapeLayerParams::default_instance((CoreML::Specification::ReshapeLayerParams *)v7);
        }
        if ((*((_DWORD *)v9 + 4) - 3) >= 2)
        {
          std::operator+<char>();
          char v10 = std::string::append(&v16, "' target shape must be 3D or 4D.");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          std::string::size_type v13 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)char v12 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v16, 13);
          *(void *)a3 = v16.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0) {
            operator delete(*v6);
          }
          *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
          *(void *)(a3 + 24) = v17;
          if (SHIBYTE(v13) < 0) {
            operator delete(v12[0]);
          }
        }
      }
    }
  }
}

void sub_2242877E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 + 31) < 0) {
    operator delete(*(void **)(v26 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateFlattenLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(void *)a3 = v13;
  BOOL v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)BOOL v6 = v14;
  *(void *)(a3 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = v14;
    *(void *)(a3 + 24) = v15;
  }
  BOOL result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Flatten");
    long long v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = v14;
    *(void *)(a3 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    BOOL result = CoreML::Result::good((CoreML::Result *)a3);
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "Flatten");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 3, -1, (uint64_t)v8, (uint64_t)&v13);
      *(void *)a3 = v13;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)BOOL v6 = v14;
      *(void *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      return CoreML::Result::good((CoreML::Result *)a3);
    }
  }
  return result;
}

void sub_224287A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validatePermuteLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(void *)a3 = v16.__r_.__value_.__r.__words[0];
  BOOL v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Permute");
    long long v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
    HIBYTE(v17) = 0;
    v16.__r_.__value_.__s.__data_[8] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "Permute");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 5, 5, (uint64_t)v8, (uint64_t)&v16);
      *(void *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(void *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 310) {
          char v9 = a2[16];
        }
        else {
          char v9 = CoreML::Specification::PermuteLayerParams::default_instance((CoreML::Specification::PermuteLayerParams *)v7);
        }
        if (*((_DWORD *)v9 + 4) != 4)
        {
          std::operator+<char>();
          char v10 = std::string::append(&v16, "' must have 4D axis parameters.");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          std::string::size_type v13 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)char v12 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v16, 13);
          *(void *)a3 = v16.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0) {
            operator delete(*v6);
          }
          *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
          *(void *)(a3 + 24) = v17;
          if (SHIBYTE(v13) < 0) {
            operator delete(v12[0]);
          }
        }
      }
    }
  }
}

void sub_224287CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 + 31) < 0) {
    operator delete(*(void **)(v26 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReduceLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  v31[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v28);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
  uint64_t v28 = v25;
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  long long v29 = v26;
  uint64_t v30 = v27;
  if (CoreML::Result::good((CoreML::Result *)&v28))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
    uint64_t v28 = v25;
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)v29);
    }
    long long v29 = v26;
    uint64_t v30 = v27;
  }
  if (!*(unsigned char *)this || *((int *)a2 + 18) < 1) {
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Reduce");
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v25);
  uint64_t v28 = v25;
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)v29);
  }
  long long v29 = v26;
  uint64_t v30 = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v28);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2[10][1] + 36);
    std::string::size_type v25 = 0;
    long long v26 = 0uLL;
    if (*((_DWORD *)a2 + 35) == 280) {
      long long v8 = a2[16];
    }
    else {
      long long v8 = CoreML::Specification::ReduceLayerParams::default_instance((CoreML::Specification::ReduceLayerParams *)v6);
    }
    int v9 = *((_DWORD *)v8 + 6);
    switch(v9)
    {
      case 0:
        if (v7 > 2) {
          goto LABEL_28;
        }
        goto LABEL_25;
      case 1:
        if (v7 > 1) {
          goto LABEL_28;
        }
        goto LABEL_25;
      case 2:
      case 3:
      case 4:
        if (v7 > 0) {
          goto LABEL_28;
        }
LABEL_25:
        char v12 = a2[14];
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)*v12, v12[1]);
        }
        else
        {
          long long v13 = *(_OWORD *)v12;
          v21.__r_.__value_.__r.__words[2] = v12[2];
          *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
        }
        long long v14 = std::string::insert(&v21, 0, "Reduce layer '");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v22.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        std::string v16 = std::string::append(&v22, "': input's rank is smaller than the dimensions provided in the axis parameter");
        goto LABEL_36;
      default:
        if (v9 != 0x80000000 && v9 != 0x7FFFFFFF)
        {
LABEL_28:
          if (SHIBYTE(v26) < 0) {
            operator delete(v25);
          }
          goto LABEL_30;
        }
        char v10 = a2[14];
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)*v10, v10[1]);
        }
        else
        {
          long long v11 = *(_OWORD *)v10;
          v21.__r_.__value_.__r.__words[2] = v10[2];
          *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
        }
        uint64_t v17 = std::string::insert(&v21, 0, "Reduce layer: '");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v22.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::string v16 = std::string::append(&v22, "': unknown value for parameter 'axis'.");
LABEL_36:
        int v19 = (void *)v16->__r_.__value_.__r.__words[0];
        v31[0] = v16->__r_.__value_.__l.__size_;
        *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
        char v20 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v26) < 0) {
          operator delete(v25);
        }
        std::string::size_type v25 = v19;
        *(void *)&long long v26 = v31[0];
        *(void *)((char *)&v26 + 7) = *(void *)((char *)v31 + 7);
        HIBYTE(v26) = v20;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        CoreML::Result::Result((_DWORD *)a3, 13);
        if (SHIBYTE(v26) < 0) {
          operator delete(v25);
        }
        if (SHIBYTE(v30) < 0) {
          operator delete((void *)v29);
        }
        break;
    }
  }
  else
  {
LABEL_30:
    *(void *)a3 = v28;
    *(_OWORD *)(a3 + 8) = v29;
    *(void *)(a3 + 24) = v30;
  }
}

void sub_224288114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReorganizeDataLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
  *(void *)a3 = v16.__r_.__value_.__r.__words[0];
  BOOL v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v17;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ReorganizeData");
    long long v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v16);
    *(void *)a3 = v16.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v17;
    HIBYTE(v17) = 0;
    v16.__r_.__value_.__s.__data_[8] = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v12, "ReorganizeData");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v12, 3, -1, (uint64_t)v8, (uint64_t)&v16);
      *(void *)a3 = v16.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
      *(void *)(a3 + 24) = v17;
      HIBYTE(v17) = 0;
      v16.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 345) {
          int v9 = a2[16];
        }
        else {
          int v9 = CoreML::Specification::ReorganizeDataLayerParams::default_instance((CoreML::Specification::ReorganizeDataLayerParams *)v7);
        }
        if (*((int *)v9 + 4) <= 1)
        {
          std::operator+<char>();
          char v10 = std::string::append(&v16, "' must be > 1.");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          std::string::size_type v13 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)char v12 = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v16.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v16, 13);
          *(void *)a3 = v16.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0) {
            operator delete(*v6);
          }
          *(_OWORD *)BOOL v6 = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
          *(void *)(a3 + 24) = v17;
          if (SHIBYTE(v13) < 0) {
            operator delete(v12[0]);
          }
        }
      }
    }
  }
}

void sub_224288444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 + 31) < 0) {
    operator delete(*(void **)(v26 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  v40[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v37);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v35);
  std::string::size_type v37 = v35.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  long long v38 = *(_OWORD *)&v35.__r_.__value_.__r.__words[1];
  uint64_t v39 = v36;
  BOOL v6 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v37);
  if (v6)
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v35);
    std::string::size_type v37 = v35.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)v38);
    }
    long long v38 = *(_OWORD *)&v35.__r_.__value_.__r.__words[1];
    uint64_t v39 = v36;
  }
  if (!*(unsigned char *)this || *((int *)a2 + 18) < 1) {
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Slice");
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v35);
  std::string::size_type v37 = v35.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  long long v38 = *(_OWORD *)&v35.__r_.__value_.__r.__words[1];
  uint64_t v39 = v36;
  HIBYTE(v36) = 0;
  v35.__r_.__value_.__s.__data_[8] = 0;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v37);
  if (!v7) {
    goto LABEL_35;
  }
  int v8 = *(_DWORD *)(a2[10][1] + 36);
  memset(&v35, 0, sizeof(v35));
  if (*((_DWORD *)a2 + 35) == 350) {
    BOOL v6 = a2[16];
  }
  else {
    BOOL v6 = CoreML::Specification::SliceLayerParams::default_instance((CoreML::Specification::SliceLayerParams *)v7);
  }
  int v9 = *((_DWORD *)v6 + 10);
  switch(v9)
  {
    case 0:
      if (v8 <= 2) {
        goto LABEL_45;
      }
      goto LABEL_21;
    case 1:
      if (v8 <= 1)
      {
LABEL_45:
        char v20 = a2[14];
        if (*((char *)v20 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)*v20, v20[1]);
        }
        else
        {
          long long v21 = *(_OWORD *)v20;
          v31.__r_.__value_.__r.__words[2] = v20[2];
          *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
        }
        char v24 = std::string::insert(&v31, 0, "Slice layer '");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        uint64_t v26 = std::string::append(&v32, "': input's rank is smaller than the dimension provided in the axis parameter");
        goto LABEL_53;
      }
LABEL_21:
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
LABEL_23:
      if (*((_DWORD *)a2 + 35) == 350) {
        char v10 = a2[16];
      }
      else {
        char v10 = CoreML::Specification::SliceLayerParams::default_instance((CoreML::Specification::SliceLayerParams *)v6);
      }
      if (*((int *)v10 + 8) <= 0)
      {
        std::operator+<char>();
        char v15 = std::string::append(&v35, "' must be > 1.");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
LABEL_38:
        CoreML::Result::Result(&v35, 13);
        std::string::size_type v17 = v35.__r_.__value_.__r.__words[0];
        std::string::size_type v37 = v35.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v39) < 0)
        {
          operator delete((void *)v38);
          std::string::size_type v17 = v37;
        }
        long long v38 = *(_OWORD *)&v35.__r_.__value_.__r.__words[1];
        uint64_t v18 = v36;
        *(void *)a3 = v17;
        *(_OWORD *)(a3 + 8) = v38;
        *(void *)(a3 + 24) = v18;
        long long v38 = 0uLL;
        uint64_t v39 = 0;
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        {
          int v19 = (void *)v32.__r_.__value_.__r.__words[0];
LABEL_61:
          operator delete(v19);
          goto LABEL_62;
        }
        goto LABEL_62;
      }
      uint64_t v11 = v10[2];
      uint64_t v12 = v10[3];
      if (v12 >= 1 && v12 < v11 || v12 < 0 && v11 < 0 && v12 < v11)
      {
        std::operator+<char>();
        std::string::size_type v13 = std::string::append(&v35, " has an end index before the start index.");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        goto LABEL_38;
      }
LABEL_35:
      *(void *)a3 = v37;
      *(_OWORD *)(a3 + 8) = v38;
      *(void *)(a3 + 24) = v39;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      goto LABEL_62;
    case 2:
      if (v8 > 0) {
        goto LABEL_21;
      }
      goto LABEL_45;
  }
  std::string v22 = a2[14];
  if (*((char *)v22 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)*v22, v22[1]);
  }
  else
  {
    long long v23 = *(_OWORD *)v22;
    v31.__r_.__value_.__r.__words[2] = v22[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v23;
  }
  uint64_t v27 = std::string::insert(&v31, 0, "Slice layer: '");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  uint64_t v26 = std::string::append(&v32, "': unknown value for parameter 'axis'.");
LABEL_53:
  std::string::size_type v29 = v26->__r_.__value_.__r.__words[0];
  v40[0] = v26->__r_.__value_.__l.__size_;
  *(void *)((char *)v40 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
  char v30 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  v35.__r_.__value_.__r.__words[0] = v29;
  v35.__r_.__value_.__l.__size_ = v40[0];
  *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v40 + 7);
  *((unsigned char *)&v35.__r_.__value_.__s + 23) = v30;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    int v19 = (void *)v35.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
LABEL_62:
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
}

void sub_224288998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoadConstantLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v38);
  CoreML::Result::Result((CoreML::Result *)&v36);
  std::string::size_type v38 = v36.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  long long v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
  uint64_t v40 = v37;
  if (CoreML::Result::good((CoreML::Result *)&v38))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v36);
    std::string::size_type v38 = v36.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    long long v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
    uint64_t v40 = v37;
  }
  uint64_t v6 = CoreML::Result::good((CoreML::Result *)&v38);
  if ((v6 & 1) == 0) {
    goto LABEL_68;
  }
  if (*(unsigned char *)this)
  {
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, *(const void ***)(*((void *)a2 + 7) + 8));
    if ((CoreML::NeuralNetworkSpecValidator *)((char *)this + 40) != (CoreML::NeuralNetworkSpecValidator *)v6)
    {
      int v7 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 32, *(const void ***)(*((void *)a2 + 7) + 8));
      std::string::basic_string[abi:ne180100]<0>(&v35, "LoadConstant");
      std::string::basic_string[abi:ne180100]<0>(__p, "output");
      CoreML::checkRank((uint64_t)&v35, 5, 5, (uint64_t)__p, v7, (CoreML::Result *)&v36);
      std::string::size_type v38 = v36.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v40) < 0) {
        operator delete((void *)v39);
      }
      long long v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
      uint64_t v40 = v37;
      HIBYTE(v37) = 0;
      v36.__r_.__value_.__s.__data_[8] = 0;
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = CoreML::Result::good((CoreML::Result *)&v38);
      if ((v6 & 1) == 0)
      {
LABEL_68:
        *(void *)a3 = v38;
        *(_OWORD *)(a3 + 8) = v39;
        *(void *)(a3 + 24) = v40;
        long long v39 = 0uLL;
        uint64_t v40 = 0;
        goto LABEL_69;
      }
    }
  }
  if (*((_DWORD *)a2 + 35) == 290) {
    int v8 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v8 = CoreML::Specification::LoadConstantLayerParams::default_instance((CoreML::Specification::LoadConstantLayerParams *)v6);
  }
  if (v8[5]) {
    int v9 = (uint64_t *)v8[5];
  }
  else {
    int v9 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v10 = v9[5];
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  }
  uint64_t v12 = v9[6];
  if (*(char *)(v12 + 23) < 0) {
    uint64_t v13 = *(void *)(v12 + 8);
  }
  else {
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  }
  int v14 = *((_DWORD *)v9 + 4);
  uint64_t v15 = v9[7];
  if (*(char *)(v15 + 23) < 0) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  }
  BOOL v17 = v14 <= 0;
  BOOL v18 = v14 > 0;
  if (v17) {
    int v19 = 1;
  }
  else {
    int v19 = 2;
  }
  if (v11) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v18;
  }
  if (v13) {
    ++v20;
  }
  if (v16) {
    ++v20;
  }
  if (v20 > 1)
  {
    std::operator+<char>();
    long long v21 = std::string::append(&v36, "' has both full precision and half precision weight fields populated");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(&v36, 13);
    std::string::size_type v23 = v36.__r_.__value_.__r.__words[0];
    std::string::size_type v38 = v36.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v40) < 0)
    {
      operator delete((void *)v39);
      std::string::size_type v23 = v38;
    }
    long long v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
    uint64_t v24 = v37;
    *(void *)a3 = v23;
    *(_OWORD *)(a3 + 8) = v39;
    *(void *)(a3 + 24) = v24;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v25 = (void *)v35.__r_.__value_.__r.__words[0];
LABEL_58:
      operator delete(v25);
      goto LABEL_69;
    }
    goto LABEL_69;
  }
  if (*((_DWORD *)v8 + 4) == 3)
  {
    uint64_t v26 = v8[3];
    uint64_t v27 = 1;
    for (uint64_t i = 8; i != 32; i += 8)
      v27 *= *(void *)(v26 + i);
    std::string::size_type v29 = *(const CoreML::Specification::WeightParams **)(v26 + 8);
    std::string::basic_string[abi:ne180100]<0>(&v35, "LoadConstant");
    uint64_t v30 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(__p, "constants");
    if ((unint64_t)v29 < 2) {
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v27, (const CoreML::Specification::WeightParams *)1, (const void **)&v35.__r_.__value_.__l.__data_, v30, (uint64_t)__p, (uint64_t)&v36);
    }
    else {
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v27, v29, (const void **)&v35.__r_.__value_.__l.__data_, v30, (uint64_t)__p, (uint64_t)&v36);
    }
    std::string::size_type v38 = v36.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v40) < 0) {
      operator delete((void *)v39);
    }
    long long v39 = *(_OWORD *)&v36.__r_.__value_.__r.__words[1];
    uint64_t v40 = v37;
    HIBYTE(v37) = 0;
    v36.__r_.__value_.__s.__data_[8] = 0;
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (CoreML::Result::good((CoreML::Result *)&v38))
    {
      CoreML::Result::Result((CoreML::Result *)a3);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  std::operator+<char>();
  std::string v31 = std::string::append(&v35, "' must be a 3D constant.");
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v25 = (void *)v36.__r_.__value_.__r.__words[0];
    goto LABEL_58;
  }
LABEL_69:
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
}

void sub_224288F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::checkRank(uint64_t a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X4>, int a5@<W5>, CoreML::Result *a6@<X8>)
{
  v98[2] = *MEMORY[0x263EF8340];
  uint64_t v96 = 0;
  long long v97 = 0uLL;
  if (a3 < 1 || a3 != a2 || a5 == a3)
  {
    if (a2 < 1 || a5 >= a2)
    {
      if (a3 < 1 || a5 <= a3)
      {
        CoreML::Result::Result(a6);
        goto LABEL_105;
      }
      std::operator+<char>();
      int v58 = std::string::append(&v87, "' of type '");
      long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      int v60 = *(char *)(a1 + 23);
      if (v60 >= 0) {
        int v61 = (const std::string::value_type *)a1;
      }
      else {
        int v61 = *(const std::string::value_type **)a1;
      }
      if (v60 >= 0) {
        std::string::size_type v62 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v62 = *(void *)(a1 + 8);
      }
      BOOL v63 = std::string::append(&v88, v61, v62);
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      unsigned int v65 = std::string::append(&v89, "' has ");
      long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      int v67 = *(char *)(a4 + 23);
      if (v67 >= 0) {
        uint64_t v68 = (const std::string::value_type *)a4;
      }
      else {
        uint64_t v68 = *(const std::string::value_type **)a4;
      }
      if (v67 >= 0) {
        std::string::size_type v69 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v69 = *(void *)(a4 + 8);
      }
      char v70 = std::string::append(&v90, v68, v69);
      long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v71;
      v70->__r_.__value_.__l.__size_ = 0;
      v70->__r_.__value_.__r.__words[2] = 0;
      v70->__r_.__value_.__r.__words[0] = 0;
      int v72 = std::string::append(&v91, " rank ");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, a5);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v74 = &v86;
      }
      else {
        uint64_t v74 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v86.__r_.__value_.__l.__size_;
      }
      int v76 = std::string::append(&v92, (const std::string::value_type *)v74, size);
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      uint64_t v78 = std::string::append(&v93, " but expects rank at most ");
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v85, a3);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v34 = &v85;
      }
      else {
        char v34 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v85.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      std::operator+<char>();
      std::string v36 = std::string::append(&v87, "' of type '");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      int v38 = *(char *)(a1 + 23);
      if (v38 >= 0) {
        long long v39 = (const std::string::value_type *)a1;
      }
      else {
        long long v39 = *(const std::string::value_type **)a1;
      }
      if (v38 >= 0) {
        std::string::size_type v40 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        std::string::size_type v40 = *(void *)(a1 + 8);
      }
      long long v41 = std::string::append(&v88, v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      std::string v43 = std::string::append(&v89, "' has ");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      int v45 = *(char *)(a4 + 23);
      if (v45 >= 0) {
        uint64_t v46 = (const std::string::value_type *)a4;
      }
      else {
        uint64_t v46 = *(const std::string::value_type **)a4;
      }
      if (v45 >= 0) {
        std::string::size_type v47 = *(unsigned __int8 *)(a4 + 23);
      }
      else {
        std::string::size_type v47 = *(void *)(a4 + 8);
      }
      std::string v48 = std::string::append(&v90, v46, v47);
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v50 = std::string::append(&v91, " rank ");
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v86, a5);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v52 = &v86;
      }
      else {
        uint64_t v52 = (std::string *)v86.__r_.__value_.__r.__words[0];
      }
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v53 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v53 = v86.__r_.__value_.__l.__size_;
      }
      int v54 = std::string::append(&v92, (const std::string::value_type *)v52, v53);
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      uint64_t v56 = std::string::append(&v93, " but expects rank at least ");
      long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v85, a2);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v34 = &v85;
      }
      else {
        char v34 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v35 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v35 = v85.__r_.__value_.__l.__size_;
      }
    }
  }
  else
  {
    std::operator+<char>();
    uint64_t v12 = std::string::append(&v87, "' of type '");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = *(char *)(a1 + 23);
    if (v14 >= 0) {
      uint64_t v15 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v15 = *(const std::string::value_type **)a1;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(a1 + 8);
    }
    BOOL v17 = std::string::append(&v88, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    int v19 = std::string::append(&v89, "' has ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    int v21 = *(char *)(a4 + 23);
    if (v21 >= 0) {
      long long v22 = (const std::string::value_type *)a4;
    }
    else {
      long long v22 = *(const std::string::value_type **)a4;
    }
    if (v21 >= 0) {
      std::string::size_type v23 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v23 = *(void *)(a4 + 8);
    }
    uint64_t v24 = std::string::append(&v90, v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v91, " rank ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v86, a5);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v28 = &v86;
    }
    else {
      uint64_t v28 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v29 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = v86.__r_.__value_.__l.__size_;
    }
    uint64_t v30 = std::string::append(&v92, (const std::string::value_type *)v28, v29);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    long long v32 = std::string::append(&v93, " but expects rank exactly ");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v85, a3);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v34 = &v85;
    }
    else {
      char v34 = (std::string *)v85.__r_.__value_.__r.__words[0];
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v35 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v35 = v85.__r_.__value_.__l.__size_;
    }
  }
  uint64_t v80 = std::string::append(&v94, (const std::string::value_type *)v34, v35);
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  uint64_t v82 = std::string::append(&v95, ".");
  int v83 = (void *)v82->__r_.__value_.__r.__words[0];
  v98[0] = v82->__r_.__value_.__l.__size_;
  *(void *)((char *)v98 + 7) = *(std::string::size_type *)((char *)&v82->__r_.__value_.__r.__words[1] + 7);
  char v84 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  v82->__r_.__value_.__l.__size_ = 0;
  v82->__r_.__value_.__r.__words[2] = 0;
  v82->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v97) < 0) {
    operator delete(v96);
  }
  uint64_t v96 = v83;
  *(void *)&long long v97 = v98[0];
  *(void *)((char *)&v97 + 7) = *(void *)((char *)v98 + 7);
  HIBYTE(v97) = v84;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v94.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result(a6, 13);
LABEL_105:
  if (SHIBYTE(v97) < 0) {
    operator delete(v96);
  }
}

void sub_224289710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v61 - 121) < 0) {
    operator delete(*(void **)(v61 - 144));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v61 - 153) < 0) {
    operator delete(*(void **)(v61 - 176));
  }
  if (*(char *)(v61 - 185) < 0) {
    operator delete(*(void **)(v61 - 208));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a61 < 0) {
    operator delete(a56);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v61 - 89) < 0) {
    operator delete(*(void **)(v61 - 112));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateScaleLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v97);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v95);
  std::string::size_type v97 = v95.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v99) < 0) {
    operator delete((void *)v98);
  }
  long long v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
  uint64_t v99 = v96;
  if (CoreML::Result::good((CoreML::Result *)&v97))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v95);
    std::string::size_type v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0) {
      operator delete((void *)v98);
    }
    long long v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    uint64_t v99 = v96;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v97);
  if (!v6) {
    goto LABEL_198;
  }
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Scale");
    int v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)&v95);
    std::string::size_type v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0) {
      operator delete((void *)v98);
    }
    long long v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    uint64_t v99 = v96;
    HIBYTE(v96) = 0;
    v95.__r_.__value_.__s.__data_[8] = 0;
    if (v94 < 0) {
      operator delete(__p[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v97)) {
      goto LABEL_198;
    }
    std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v92, 3, -1, (uint64_t)v7, (uint64_t)&v95);
    std::string::size_type v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0) {
      operator delete((void *)v98);
    }
    long long v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    uint64_t v99 = v96;
    HIBYTE(v96) = 0;
    v95.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    BOOL v6 = CoreML::Result::good((CoreML::Result *)&v97);
    if (!v6) {
      goto LABEL_198;
    }
  }
  if (*((_DWORD *)a2 + 35) == 245) {
    int v8 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v8 = CoreML::Specification::ScaleLayerParams::default_instance((CoreML::Specification::ScaleLayerParams *)v6);
  }
  if (v8[8]) {
    int v9 = (uint64_t *)v8[8];
  }
  else {
    int v9 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v10 = v9[5];
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v12 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
  }
  uint64_t v13 = v9[6];
  uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0) {
    uint64_t v15 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
  }
  int v16 = *((_DWORD *)v9 + 4);
  uint64_t v17 = v9[7];
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0) {
    uint64_t v19 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v19 = *(unsigned __int8 *)(v17 + 23);
  }
  int v20 = *((unsigned __int8 *)v8 + 80);
  if (v16 <= 0) {
    int v21 = 1;
  }
  else {
    int v21 = 2;
  }
  if (v12) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = v16 > 0;
  }
  if (v15) {
    ++v22;
  }
  if (v19) {
    unsigned int v23 = v22 + 1;
  }
  else {
    unsigned int v23 = v22;
  }
  if (v23 <= 1)
  {
    if (v23) {
      int v24 = 0;
    }
    else {
      int v24 = 5;
    }
    if (v16 <= 0 && v23)
    {
      if ((v11 & 0x80) != 0) {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      if (v11)
      {
        int v24 = 1;
      }
      else
      {
        if ((v14 & 0x80) != 0) {
          uint64_t v14 = *(void *)(v13 + 8);
        }
        uint64_t v25 = v9[8];
        if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v25)
        {
          int v24 = 2;
        }
        else
        {
          if ((v18 & 0x80) != 0) {
            uint64_t v18 = *(void *)(v17 + 8);
          }
          if (v25) {
            BOOL v26 = v18 == 0;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26 || v9 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v24 = 5;
          }
          else {
            int v24 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v24 = 4;
  }
  uint64_t v28 = (uint64_t *)v8[9];
  if (!v28) {
    uint64_t v28 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v29 = v28[5];
  uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
  if (*(char *)(v29 + 23) < 0) {
    uint64_t v31 = *(void *)(v29 + 8);
  }
  else {
    uint64_t v31 = *(unsigned __int8 *)(v29 + 23);
  }
  uint64_t v32 = v28[6];
  uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0) {
    uint64_t v34 = *(void *)(v32 + 8);
  }
  else {
    uint64_t v34 = *(unsigned __int8 *)(v32 + 23);
  }
  int v35 = *((_DWORD *)v28 + 4);
  uint64_t v36 = v28[7];
  uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0) {
    uint64_t v38 = *(void *)(v36 + 8);
  }
  else {
    uint64_t v38 = *(unsigned __int8 *)(v36 + 23);
  }
  if (v35 <= 0) {
    int v39 = 1;
  }
  else {
    int v39 = 2;
  }
  if (v31) {
    unsigned int v40 = v39;
  }
  else {
    unsigned int v40 = v35 > 0;
  }
  if (v34) {
    ++v40;
  }
  if (v38) {
    unsigned int v41 = v40 + 1;
  }
  else {
    unsigned int v41 = v40;
  }
  if (v41 <= 1)
  {
    if (v41) {
      int v42 = 0;
    }
    else {
      int v42 = 5;
    }
    if (v35 <= 0 && v41)
    {
      if ((v30 & 0x80) != 0) {
        uint64_t v30 = *(void *)(v29 + 8);
      }
      if (v30)
      {
        int v42 = 1;
      }
      else
      {
        if ((v33 & 0x80) != 0) {
          uint64_t v33 = *(void *)(v32 + 8);
        }
        uint64_t v43 = v28[8];
        if (v28 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
        {
          int v42 = 2;
        }
        else
        {
          if ((v37 & 0x80) != 0) {
            uint64_t v37 = *(void *)(v36 + 8);
          }
          if (v43) {
            BOOL v44 = v37 == 0;
          }
          else {
            BOOL v44 = 1;
          }
          if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v42 = 5;
          }
          else {
            int v42 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v42 = 4;
  }
  if (*((unsigned char *)v8 + 80)) {
    BOOL v46 = v42 == 4;
  }
  else {
    BOOL v46 = 0;
  }
  int v47 = v46;
  if (v24 == 4 || v47)
  {
    std::operator+<char>();
    std::string::size_type v50 = std::string::append(&v95, "' has invalid scale/bias fields.");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
LABEL_141:
    CoreML::Result::Result(&v95, 13);
    std::string::size_type v52 = v95.__r_.__value_.__r.__words[0];
    std::string::size_type v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0)
    {
      operator delete((void *)v98);
      std::string::size_type v52 = v97;
    }
    long long v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    uint64_t v53 = v96;
    *(void *)a3 = v52;
    *(_OWORD *)(a3 + 8) = v98;
    *(void *)(a3 + 24) = v53;
    long long v98 = 0uLL;
    uint64_t v99 = 0;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    {
      int v54 = (void *)v92.__r_.__value_.__r.__words[0];
LABEL_145:
      operator delete(v54);
      goto LABEL_199;
    }
    goto LABEL_199;
  }
  if (*((unsigned char *)v8 + 80) && (v24 == 1 && !v42 || !v24 && v42 == 1))
  {
    std::operator+<char>();
    std::string v48 = std::string::append(&v95, "' has invalid scale/bias fields. Field value types should match and should either be half or full precision.");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    goto LABEL_141;
  }
  int v55 = *((_DWORD *)v8 + 4);
  if ((v55 | 2) == 3)
  {
    uint64_t v56 = (uint64_t *)(v8[3] + 8);
    uint64_t v57 = 1;
    uint64_t v58 = *((unsigned int *)v8 + 4);
    do
    {
      uint64_t v59 = *v56++;
      v57 *= v59;
      --v58;
    }
    while (v58);
    if (v55 == 3 && (int v60 = *(const CoreML::Specification::WeightParams **)(v8[3] + 8), (unint64_t)v60 >= 2))
    {
      std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
      uint64_t v88 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v91, "scale");
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v57, v60, (const void **)&v92.__r_.__value_.__l.__data_, v88, (uint64_t)&v91, (uint64_t)&v95);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
      uint64_t v61 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(&v91, "scale");
      CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)v57, (const CoreML::Specification::WeightParams *)1, (const void **)&v92.__r_.__value_.__l.__data_, v61, (uint64_t)&v91, (uint64_t)&v95);
    }
    std::string::size_type v97 = v95.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v99) < 0) {
      operator delete((void *)v98);
    }
    long long v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
    uint64_t v99 = v96;
    HIBYTE(v96) = 0;
    v95.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v97)) {
      goto LABEL_198;
    }
    if (!v20)
    {
LABEL_197:
      CoreML::Result::Result((CoreML::Result *)a3);
      goto LABEL_199;
    }
    int v62 = *((_DWORD *)v8 + 10);
    if ((v62 | 2) == 3)
    {
      BOOL v63 = (uint64_t *)(v8[6] + 8);
      uint64_t v64 = 1;
      uint64_t v65 = *((unsigned int *)v8 + 10);
      do
      {
        uint64_t v66 = *v63++;
        v64 *= v66;
        --v65;
      }
      while (v65);
      if (v62 == 3 && (int v67 = *(const CoreML::Specification::WeightParams **)(v8[6] + 8), (unint64_t)v67 >= 2))
      {
        if (v8[9]) {
          uint64_t v68 = (uint64_t *)v8[9];
        }
        else {
          uint64_t v68 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
        uint64_t v69 = *((void *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(&v91, "bias");
        CoreML::validateGeneralWeightParams((uint64_t)v68, (const CoreML::Specification::WeightParams *)v64, v67, (const void **)&v92.__r_.__value_.__l.__data_, v69, (uint64_t)&v91, (uint64_t)&v95);
      }
      else
      {
        if (v8[9]) {
          uint64_t v78 = (uint64_t *)v8[9];
        }
        else {
          uint64_t v78 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v92, "Scale");
        uint64_t v79 = *((void *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(&v91, "bias");
        CoreML::validateGeneralWeightParams((uint64_t)v78, (const CoreML::Specification::WeightParams *)v64, (const CoreML::Specification::WeightParams *)1, (const void **)&v92.__r_.__value_.__l.__data_, v79, (uint64_t)&v91, (uint64_t)&v95);
      }
      std::string::size_type v97 = v95.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v99) < 0) {
        operator delete((void *)v98);
      }
      long long v98 = *(_OWORD *)&v95.__r_.__value_.__r.__words[1];
      uint64_t v99 = v96;
      HIBYTE(v96) = 0;
      v95.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (CoreML::Result::good((CoreML::Result *)&v97)) {
        goto LABEL_197;
      }
LABEL_198:
      *(void *)a3 = v97;
      *(_OWORD *)(a3 + 8) = v98;
      *(void *)(a3 + 24) = v99;
      long long v98 = 0uLL;
      uint64_t v99 = 0;
      goto LABEL_199;
    }
    std::operator+<char>();
    uint64_t v80 = std::string::append(&v90, "' is ");
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v89, *((_DWORD *)v8 + 10));
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v82 = &v89;
    }
    else {
      uint64_t v82 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v89.__r_.__value_.__l.__size_;
    }
    char v84 = std::string::append(&v91, (const std::string::value_type *)v82, size);
    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    std::string v86 = std::string::append(&v92, " dimensional but should be either 1D or 3D.");
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::operator+<char>();
    char v70 = std::string::append(&v90, "' is ");
    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v89, *((_DWORD *)v8 + 4));
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v72 = &v89;
    }
    else {
      int v72 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v73 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v73 = v89.__r_.__value_.__l.__size_;
    }
    uint64_t v74 = std::string::append(&v91, (const std::string::value_type *)v72, v73);
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    int v76 = std::string::append(&v92, " dimensional but should be 1D or 3D.");
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
  }
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
  {
    int v54 = (void *)v95.__r_.__value_.__r.__words[0];
    goto LABEL_145;
  }
LABEL_199:
  if (SHIBYTE(v99) < 0) {
    operator delete((void *)v98);
  }
}

void sub_22428A2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v47 - 97) < 0) {
    operator delete(*(void **)(v47 - 120));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSimpleRecurrentLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v92);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v90);
  std::string::size_type v92 = v90.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
  uint64_t v94 = v91;
  if (CoreML::Result::good((CoreML::Result *)&v92))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v90);
    std::string::size_type v92 = v90.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v94) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
    uint64_t v94 = v91;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v92)) {
    goto LABEL_229;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v92);
  if (!v6) {
    goto LABEL_229;
  }
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "SimpleRecurrent");
    int v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v88, (uint64_t)v7, (CoreML::Result *)&v90);
    std::string::size_type v92 = v90.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v94) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
    uint64_t v94 = v91;
    HIBYTE(v91) = 0;
    v90.__r_.__value_.__s.__data_[8] = 0;
    if (v89 < 0) {
      operator delete(v88[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v92)) {
      goto LABEL_229;
    }
    std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRecurrent");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)v86, 5, 5, (uint64_t)v7, (uint64_t)&v90);
    std::string::size_type v92 = v90.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v94) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
    uint64_t v94 = v91;
    HIBYTE(v91) = 0;
    v90.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v87) < 0) {
      operator delete(v86[0]);
    }
    BOOL v6 = CoreML::Result::good((CoreML::Result *)&v92);
    if (!v6) {
      goto LABEL_229;
    }
  }
  if (*((_DWORD *)a2 + 35) == 400) {
    int v8 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v8 = CoreML::Specification::SimpleRecurrentLayerParams::default_instance((CoreML::Specification::SimpleRecurrentLayerParams *)v6);
  }
  if (v8[3]) {
    int v9 = (uint64_t *)v8[3];
  }
  else {
    int v9 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v10 = v9[5];
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v12 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
  }
  uint64_t v13 = v9[6];
  uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0) {
    uint64_t v15 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(v13 + 23);
  }
  int v16 = *((_DWORD *)v9 + 4);
  uint64_t v17 = v9[7];
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0) {
    uint64_t v19 = *(void *)(v17 + 8);
  }
  else {
    uint64_t v19 = *(unsigned __int8 *)(v17 + 23);
  }
  int v20 = *((unsigned __int8 *)v8 + 65);
  if (v16 <= 0) {
    int v21 = 1;
  }
  else {
    int v21 = 2;
  }
  if (v12) {
    unsigned int v22 = v21;
  }
  else {
    unsigned int v22 = v16 > 0;
  }
  if (v15) {
    ++v22;
  }
  if (v19) {
    unsigned int v23 = v22 + 1;
  }
  else {
    unsigned int v23 = v22;
  }
  if (v23 <= 1)
  {
    if (v23) {
      int v24 = 0;
    }
    else {
      int v24 = 5;
    }
    if (v16 <= 0 && v23)
    {
      if ((v11 & 0x80) != 0) {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      if (v11)
      {
        int v24 = 1;
      }
      else
      {
        if ((v14 & 0x80) != 0) {
          uint64_t v14 = *(void *)(v13 + 8);
        }
        uint64_t v25 = v9[8];
        if (v9 != &CoreML::Specification::_WeightParams_default_instance_ && v14 && v25)
        {
          int v24 = 2;
        }
        else
        {
          if ((v18 & 0x80) != 0) {
            uint64_t v18 = *(void *)(v17 + 8);
          }
          if (v25) {
            BOOL v26 = v18 == 0;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26 || v9 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v24 = 5;
          }
          else {
            int v24 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v24 = 4;
  }
  if (v8[4]) {
    uint64_t v28 = (uint64_t *)v8[4];
  }
  else {
    uint64_t v28 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v29 = v28[5];
  uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
  if (*(char *)(v29 + 23) < 0) {
    uint64_t v31 = *(void *)(v29 + 8);
  }
  else {
    uint64_t v31 = *(unsigned __int8 *)(v29 + 23);
  }
  uint64_t v32 = v28[6];
  uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0) {
    uint64_t v34 = *(void *)(v32 + 8);
  }
  else {
    uint64_t v34 = *(unsigned __int8 *)(v32 + 23);
  }
  int v35 = *((_DWORD *)v28 + 4);
  uint64_t v36 = v28[7];
  uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0) {
    uint64_t v38 = *(void *)(v36 + 8);
  }
  else {
    uint64_t v38 = *(unsigned __int8 *)(v36 + 23);
  }
  if (v35 <= 0) {
    int v39 = 1;
  }
  else {
    int v39 = 2;
  }
  if (v31) {
    unsigned int v40 = v39;
  }
  else {
    unsigned int v40 = v35 > 0;
  }
  if (v34) {
    ++v40;
  }
  if (v38) {
    unsigned int v41 = v40 + 1;
  }
  else {
    unsigned int v41 = v40;
  }
  if (v41 <= 1)
  {
    if (v41) {
      int v42 = 0;
    }
    else {
      int v42 = 5;
    }
    if (v35 <= 0 && v41)
    {
      if ((v30 & 0x80) != 0) {
        uint64_t v30 = *(void *)(v29 + 8);
      }
      if (v30)
      {
        int v42 = 1;
      }
      else
      {
        if ((v33 & 0x80) != 0) {
          uint64_t v33 = *(void *)(v32 + 8);
        }
        uint64_t v43 = v28[8];
        if (v28 != &CoreML::Specification::_WeightParams_default_instance_ && v33 && v43)
        {
          int v42 = 2;
        }
        else
        {
          if ((v37 & 0x80) != 0) {
            uint64_t v37 = *(void *)(v36 + 8);
          }
          if (v43) {
            BOOL v44 = v37 == 0;
          }
          else {
            BOOL v44 = 1;
          }
          if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v42 = 5;
          }
          else {
            int v42 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v42 = 4;
  }
  BOOL v46 = (uint64_t *)v8[5];
  if (!v46) {
    BOOL v46 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v47 = v46[5];
  uint64_t v48 = *(unsigned __int8 *)(v47 + 23);
  if (*(char *)(v47 + 23) < 0) {
    uint64_t v49 = *(void *)(v47 + 8);
  }
  else {
    uint64_t v49 = *(unsigned __int8 *)(v47 + 23);
  }
  uint64_t v50 = v46[6];
  uint64_t v51 = *(unsigned __int8 *)(v50 + 23);
  if (*(char *)(v50 + 23) < 0) {
    uint64_t v52 = *(void *)(v50 + 8);
  }
  else {
    uint64_t v52 = *(unsigned __int8 *)(v50 + 23);
  }
  int v53 = *((_DWORD *)v46 + 4);
  uint64_t v54 = v46[7];
  uint64_t v55 = *(unsigned __int8 *)(v54 + 23);
  if (*(char *)(v54 + 23) < 0) {
    uint64_t v56 = *(void *)(v54 + 8);
  }
  else {
    uint64_t v56 = *(unsigned __int8 *)(v54 + 23);
  }
  if (v53 <= 0) {
    int v57 = 1;
  }
  else {
    int v57 = 2;
  }
  if (v49) {
    unsigned int v58 = v57;
  }
  else {
    unsigned int v58 = v53 > 0;
  }
  if (v52) {
    ++v58;
  }
  if (v56) {
    unsigned int v59 = v58 + 1;
  }
  else {
    unsigned int v59 = v58;
  }
  if (v59 <= 1)
  {
    if (v59) {
      int v60 = 0;
    }
    else {
      int v60 = 5;
    }
    if (v53 <= 0 && v59)
    {
      if ((v48 & 0x80) != 0) {
        uint64_t v48 = *(void *)(v47 + 8);
      }
      if (v48)
      {
        int v60 = 1;
      }
      else
      {
        if ((v51 & 0x80) != 0) {
          uint64_t v51 = *(void *)(v50 + 8);
        }
        uint64_t v61 = v46[8];
        if (v46 != &CoreML::Specification::_WeightParams_default_instance_ && v51 && v61)
        {
          int v60 = 2;
        }
        else
        {
          if ((v55 & 0x80) != 0) {
            uint64_t v55 = *(void *)(v54 + 8);
          }
          if (v61) {
            BOOL v62 = v55 == 0;
          }
          else {
            BOOL v62 = 1;
          }
          if (v62 || v46 == &CoreML::Specification::_WeightParams_default_instance_) {
            int v60 = 5;
          }
          else {
            int v60 = 3;
          }
        }
      }
    }
  }
  else
  {
    int v60 = 4;
  }
  if (*((unsigned char *)v8 + 65)) {
    BOOL v64 = v60 == 4;
  }
  else {
    BOOL v64 = 0;
  }
  int v65 = v64;
  if (v24 == 4 || v42 == 4 || v65)
  {
    std::operator+<char>();
    uint64_t v68 = std::string::append(&v90, "' has invalid weightMatrix/recusionMatrix/Bias fields.");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    std::string::size_type v87 = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string v86 = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    goto LABEL_195;
  }
  if (v24 == 2 || v42 == 2 || v24 == v42 && (!*((unsigned char *)v8 + 65) || v60 == 2 || v24 == v60))
  {
    uint64_t v73 = v8[6];
    int v72 = (const CoreML::Specification::WeightParams *)v8[7];
    std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
    uint64_t v74 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v84, "WeightMatrix");
    CoreML::validateGeneralWeightParams((uint64_t)v9, (const CoreML::Specification::WeightParams *)((void)v72 * v73), v72, (const void **)v86, v74, (uint64_t)v84, (uint64_t)&v90);
    std::string::size_type v92 = v90.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v94) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
    uint64_t v94 = v91;
    HIBYTE(v91) = 0;
    v90.__r_.__value_.__s.__data_[8] = 0;
    if (v85 < 0) {
      operator delete(v84[0]);
    }
    if (SHIBYTE(v87) < 0) {
      operator delete(v86[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)&v92))
    {
      long long v75 = (const CoreML::Specification::WeightParams *)v8[7];
      if (v8[4]) {
        int v76 = (uint64_t *)v8[4];
      }
      else {
        int v76 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
      uint64_t v77 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(v84, "RecursionMatrix");
      CoreML::validateGeneralWeightParams((uint64_t)v76, (const CoreML::Specification::WeightParams *)((void)v75 * (void)v75), v75, (const void **)v86, v77, (uint64_t)v84, (uint64_t)&v90);
      std::string::size_type v92 = v90.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v94) < 0) {
        operator delete((void *)__p);
      }
      long long __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
      uint64_t v94 = v91;
      HIBYTE(v91) = 0;
      v90.__r_.__value_.__s.__data_[8] = 0;
      if (v85 < 0) {
        operator delete(v84[0]);
      }
      if (SHIBYTE(v87) < 0) {
        operator delete(v86[0]);
      }
      BOOL v78 = CoreML::Result::good((CoreML::Result *)&v92);
      if (v78)
      {
        if (!v20) {
          goto LABEL_227;
        }
        if (v8[5]) {
          uint64_t v79 = (uint64_t *)v8[5];
        }
        else {
          uint64_t v79 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        uint64_t v80 = (const CoreML::Specification::WeightParams *)v8[7];
        std::string::basic_string[abi:ne180100]<0>(v86, "SimpleRNN");
        uint64_t v81 = *((void *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v84, "BiasVector");
        CoreML::validateGeneralWeightParams((uint64_t)v79, v80, (const CoreML::Specification::WeightParams *)1, (const void **)v86, v81, (uint64_t)v84, (uint64_t)&v90);
        std::string::size_type v92 = v90.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v94) < 0) {
          operator delete((void *)__p);
        }
        long long __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
        uint64_t v94 = v91;
        HIBYTE(v91) = 0;
        v90.__r_.__value_.__s.__data_[8] = 0;
        if (v85 < 0) {
          operator delete(v84[0]);
        }
        if (SHIBYTE(v87) < 0) {
          operator delete(v86[0]);
        }
        BOOL v78 = CoreML::Result::good((CoreML::Result *)&v92);
        if (v78)
        {
LABEL_227:
          if (*((_DWORD *)a2 + 35) == 400) {
            uint64_t v82 = (uint64_t *)*((void *)a2 + 16);
          }
          else {
            uint64_t v82 = CoreML::Specification::SimpleRecurrentLayerParams::default_instance((CoreML::Specification::SimpleRecurrentLayerParams *)v78);
          }
          if (v82[2]) {
            int v83 = (CoreML *)v82[2];
          }
          else {
            int v83 = (CoreML *)&CoreML::Specification::_ActivationParams_default_instance_;
          }
          CoreML::validateRecurrentActivationParams(v83, (CoreML::Result *)a3);
          goto LABEL_230;
        }
      }
    }
LABEL_229:
    *(void *)a3 = v92;
    *(_OWORD *)(a3 + 8) = __p;
    *(void *)(a3 + 24) = v94;
    long long __p = 0uLL;
    uint64_t v94 = 0;
    goto LABEL_230;
  }
  std::operator+<char>();
  uint64_t v66 = std::string::append(&v90, "' has invalid weightMatrix/recusionMatrix/Bias fields. Field value types should match and should either be half or full precision.");
  long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  std::string::size_type v87 = v66->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string v86 = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
LABEL_195:
  CoreML::Result::Result(&v90, 13);
  std::string::size_type v70 = v90.__r_.__value_.__r.__words[0];
  std::string::size_type v92 = v90.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v94) < 0)
  {
    operator delete((void *)__p);
    std::string::size_type v70 = v92;
  }
  long long __p = *(_OWORD *)&v90.__r_.__value_.__r.__words[1];
  uint64_t v71 = v91;
  *(void *)a3 = v70;
  *(_OWORD *)(a3 + 8) = __p;
  *(void *)(a3 + 24) = v71;
  long long __p = 0uLL;
  uint64_t v94 = 0;
  if (SHIBYTE(v87) < 0) {
    operator delete(v86[0]);
  }
LABEL_230:
  if (SHIBYTE(v94) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22428AD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateRecurrentActivationParams@<X0>(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  unsigned int v4 = *((_DWORD *)this + 7);
  BOOL v5 = v4 > 0x29;
  uint64_t v6 = (1 << v4) & 0x300C0000420;
  if (v5 || v6 == 0)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Recurrent non-linearity type ", 29);
    uint64_t v10 = MLActivationParamsNonlinearityType_Name(*((_DWORD *)this + 7));
    size_t v11 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is not supported in this version of CoreML.", 44);
    std::stringbuf::str();
    CoreML::Result::Result(a2, 13);
    if (v14 < 0) {
      operator delete(__p);
    }
    v15[0] = *MEMORY[0x263F8C2B8];
    uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v16[0] = v12;
    v16[1] = MEMORY[0x263F8C318] + 16;
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (CoreML::Result *)MEMORY[0x22A614E30](&v18);
  }
  else
  {
    return CoreML::Result::Result(a2);
  }
}

void sub_22428B018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateGRULayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v311);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)v309);
  uint64_t v311 = *(void *)v309;
  if (SHIBYTE(v313) < 0) {
    operator delete((void *)v312);
  }
  long long v312 = *(_OWORD *)&v309[8];
  uint64_t v313 = v310;
  if (CoreML::Result::good((CoreML::Result *)&v311))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)v309);
    uint64_t v311 = *(void *)v309;
    if (SHIBYTE(v313) < 0) {
      operator delete((void *)v312);
    }
    long long v312 = *(_OWORD *)&v309[8];
    uint64_t v313 = v310;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v311)) {
    goto LABEL_22;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v311);
  if (!v6) {
    goto LABEL_22;
  }
  if (!*(unsigned char *)this) {
    goto LABEL_20;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "GRU");
  int v7 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)v309);
  uint64_t v311 = *(void *)v309;
  if (SHIBYTE(v313) < 0) {
    operator delete((void *)v312);
  }
  long long v312 = *(_OWORD *)&v309[8];
  uint64_t v313 = v310;
  HIBYTE(v310) = 0;
  v309[8] = 0;
  if (v308 < 0) {
    operator delete(__p[0]);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v311)) {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(&v304, "GRU");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v304, 5, 5, (uint64_t)v7, (uint64_t)v309);
  uint64_t v311 = *(void *)v309;
  if (SHIBYTE(v313) < 0) {
    operator delete((void *)v312);
  }
  long long v312 = *(_OWORD *)&v309[8];
  uint64_t v313 = v310;
  HIBYTE(v310) = 0;
  v309[8] = 0;
  if (SHIBYTE(v306) < 0) {
    operator delete(v304);
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v311);
  if (v6)
  {
LABEL_20:
    if (*((_DWORD *)a2 + 35) == 410) {
      int v8 = (uint64_t *)*((void *)a2 + 16);
    }
    else {
      int v8 = CoreML::Specification::GRULayerParams::default_instance((CoreML::Specification::GRULayerParams *)v6);
    }
    int v9 = *((unsigned __int8 *)v8 + 129);
    v305 = 0;
    v306 = 0;
    v304 = 0;
    uint64_t v10 = (uint64_t *)v8[5];
    if (!v10) {
      uint64_t v10 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v11 = v10[5];
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
    if (*(char *)(v11 + 23) < 0) {
      uint64_t v13 = *(void *)(v11 + 8);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v11 + 23);
    }
    uint64_t v14 = v10[6];
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
    if (*(char *)(v14 + 23) < 0) {
      uint64_t v16 = *(void *)(v14 + 8);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
    }
    int v17 = *((_DWORD *)v10 + 4);
    uint64_t v18 = v10[7];
    uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
    if (*(char *)(v18 + 23) < 0) {
      uint64_t v20 = *(void *)(v18 + 8);
    }
    else {
      uint64_t v20 = *(unsigned __int8 *)(v18 + 23);
    }
    if (v17 <= 0) {
      int v21 = 1;
    }
    else {
      int v21 = 2;
    }
    if (v13) {
      unsigned int v22 = v21;
    }
    else {
      unsigned int v22 = v17 > 0;
    }
    if (v16) {
      ++v22;
    }
    if (v20) {
      ++v22;
    }
    if (v22 <= 1)
    {
      if (v22) {
        int v23 = 0;
      }
      else {
        int v23 = 5;
      }
      if (v17 <= 0 && v22)
      {
        if ((v12 & 0x80) != 0) {
          uint64_t v12 = *(void *)(v11 + 8);
        }
        if (v12)
        {
          int v23 = 1;
        }
        else
        {
          if ((v15 & 0x80) != 0) {
            uint64_t v15 = *(void *)(v14 + 8);
          }
          uint64_t v24 = v10[8];
          if (v10 != &CoreML::Specification::_WeightParams_default_instance_ && v15 && v24)
          {
            int v23 = 2;
          }
          else
          {
            if ((v19 & 0x80) != 0) {
              uint64_t v19 = *(void *)(v18 + 8);
            }
            if (v24) {
              BOOL v25 = v19 == 0;
            }
            else {
              BOOL v25 = 1;
            }
            if (v25 || v10 == &CoreML::Specification::_WeightParams_default_instance_) {
              int v23 = 5;
            }
            else {
              int v23 = 3;
            }
          }
        }
      }
    }
    else
    {
      int v23 = 4;
    }
    uint64_t v28 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, 1uLL);
    uint64_t v29 = (char *)v304;
    uint64_t v30 = v305;
    *uint64_t v28 = v23;
    uint64_t v31 = (char *)(v28 + 1);
    uint64_t v32 = (char *)v28;
    while (v30 != v29)
    {
      int v33 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *((_DWORD *)v32 - 1) = v33;
      v32 -= 4;
    }
    v304 = v32;
    v305 = (char *)(v28 + 1);
    v306 = &v28[v27];
    if (v29) {
      operator delete(v29);
    }
    v305 = (char *)(v28 + 1);
    uint64_t v34 = (uint64_t *)v8[8];
    if (!v34) {
      uint64_t v34 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v35 = v34[5];
    uint64_t v36 = *(unsigned __int8 *)(v35 + 23);
    if (*(char *)(v35 + 23) < 0) {
      uint64_t v37 = *(void *)(v35 + 8);
    }
    else {
      uint64_t v37 = *(unsigned __int8 *)(v35 + 23);
    }
    uint64_t v38 = v34[6];
    uint64_t v39 = *(unsigned __int8 *)(v38 + 23);
    if (*(char *)(v38 + 23) < 0) {
      uint64_t v40 = *(void *)(v38 + 8);
    }
    else {
      uint64_t v40 = *(unsigned __int8 *)(v38 + 23);
    }
    int v41 = *((_DWORD *)v34 + 4);
    uint64_t v42 = v34[7];
    uint64_t v43 = *(unsigned __int8 *)(v42 + 23);
    if (*(char *)(v42 + 23) < 0) {
      uint64_t v44 = *(void *)(v42 + 8);
    }
    else {
      uint64_t v44 = *(unsigned __int8 *)(v42 + 23);
    }
    if (v41 <= 0) {
      int v45 = 1;
    }
    else {
      int v45 = 2;
    }
    if (v37) {
      unsigned int v46 = v45;
    }
    else {
      unsigned int v46 = v41 > 0;
    }
    if (v40) {
      ++v46;
    }
    if (v44) {
      ++v46;
    }
    if (v46 <= 1)
    {
      if (v46) {
        int v47 = 0;
      }
      else {
        int v47 = 5;
      }
      if (v41 <= 0 && v46 != 0)
      {
        if ((v36 & 0x80) != 0) {
          uint64_t v36 = *(void *)(v35 + 8);
        }
        if (v36)
        {
          int v47 = 1;
        }
        else
        {
          if ((v39 & 0x80) != 0) {
            uint64_t v39 = *(void *)(v38 + 8);
          }
          uint64_t v49 = v34[8];
          if (v34 == &CoreML::Specification::_WeightParams_default_instance_
            || (v39 ? (BOOL v50 = v49 == 0) : (BOOL v50 = 1), v50))
          {
            if ((v43 & 0x80) != 0) {
              uint64_t v43 = *(void *)(v42 + 8);
            }
            if (v49) {
              BOOL v51 = v43 == 0;
            }
            else {
              BOOL v51 = 1;
            }
            if (v51 || v34 == &CoreML::Specification::_WeightParams_default_instance_) {
              int v47 = 5;
            }
            else {
              int v47 = 3;
            }
          }
          else
          {
            int v47 = 2;
          }
        }
      }
    }
    else
    {
      int v47 = 4;
    }
    if (v31 >= (char *)v306)
    {
      uint64_t v54 = (char *)v304;
      uint64_t v55 = (v31 - (unsigned char *)v304) >> 2;
      unint64_t v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v57 = (char *)v306 - (unsigned char *)v304;
      if (((char *)v306 - (unsigned char *)v304) >> 1 > v56) {
        unint64_t v56 = v57 >> 1;
      }
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v56;
      }
      if (v58)
      {
        unsigned int v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v58);
        uint64_t v54 = (char *)v304;
        uint64_t v31 = v305;
      }
      else
      {
        unsigned int v59 = 0;
      }
      int v60 = (int *)&v59[4 * v55];
      uint64_t v61 = &v59[4 * v58];
      int *v60 = v47;
      int v53 = v60 + 1;
      while (v31 != v54)
      {
        int v62 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--int v60 = v62;
      }
      v304 = v60;
      v305 = (char *)v53;
      v306 = (int *)v61;
      if (v54) {
        operator delete(v54);
      }
    }
    else
    {
      v28[1] = v47;
      int v53 = v28 + 2;
    }
    v305 = (char *)v53;
    BOOL v63 = (uint64_t *)v8[6];
    if (!v63) {
      BOOL v63 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v64 = v63[5];
    uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
    if (*(char *)(v64 + 23) < 0) {
      uint64_t v66 = *(void *)(v64 + 8);
    }
    else {
      uint64_t v66 = *(unsigned __int8 *)(v64 + 23);
    }
    uint64_t v67 = v63[6];
    uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
    if (*(char *)(v67 + 23) < 0) {
      uint64_t v69 = *(void *)(v67 + 8);
    }
    else {
      uint64_t v69 = *(unsigned __int8 *)(v67 + 23);
    }
    int v70 = *((_DWORD *)v63 + 4);
    uint64_t v71 = v63[7];
    uint64_t v72 = *(unsigned __int8 *)(v71 + 23);
    if (*(char *)(v71 + 23) < 0) {
      uint64_t v73 = *(void *)(v71 + 8);
    }
    else {
      uint64_t v73 = *(unsigned __int8 *)(v71 + 23);
    }
    if (v70 <= 0) {
      int v74 = 1;
    }
    else {
      int v74 = 2;
    }
    if (v66) {
      unsigned int v75 = v74;
    }
    else {
      unsigned int v75 = v70 > 0;
    }
    if (v69) {
      ++v75;
    }
    if (v73) {
      ++v75;
    }
    if (v75 <= 1)
    {
      if (v75) {
        int v76 = 0;
      }
      else {
        int v76 = 5;
      }
      if (v70 <= 0 && v75 != 0)
      {
        if ((v65 & 0x80) != 0) {
          uint64_t v65 = *(void *)(v64 + 8);
        }
        if (v65)
        {
          int v76 = 1;
        }
        else
        {
          if ((v68 & 0x80) != 0) {
            uint64_t v68 = *(void *)(v67 + 8);
          }
          uint64_t v78 = v63[8];
          if (v63 == &CoreML::Specification::_WeightParams_default_instance_
            || (v68 ? (BOOL v79 = v78 == 0) : (BOOL v79 = 1), v79))
          {
            if ((v72 & 0x80) != 0) {
              uint64_t v72 = *(void *)(v71 + 8);
            }
            if (v78) {
              BOOL v80 = v72 == 0;
            }
            else {
              BOOL v80 = 1;
            }
            if (v80 || v63 == &CoreML::Specification::_WeightParams_default_instance_) {
              int v76 = 5;
            }
            else {
              int v76 = 3;
            }
          }
          else
          {
            int v76 = 2;
          }
        }
      }
    }
    else
    {
      int v76 = 4;
    }
    if (v53 >= v306)
    {
      int v83 = (int *)v304;
      uint64_t v84 = ((char *)v53 - (unsigned char *)v304) >> 2;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v86 = (char *)v306 - (unsigned char *)v304;
      if (((char *)v306 - (unsigned char *)v304) >> 1 > v85) {
        unint64_t v85 = v86 >> 1;
      }
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v85;
      }
      if (v87)
      {
        uint64_t v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v87);
        int v83 = (int *)v304;
        int v53 = (int *)v305;
      }
      else
      {
        uint64_t v88 = 0;
      }
      char v89 = (int *)&v88[4 * v84];
      std::string v90 = &v88[4 * v87];
      *char v89 = v76;
      uint64_t v82 = v89 + 1;
      while (v53 != v83)
      {
        int v91 = *--v53;
        *--char v89 = v91;
      }
      v304 = v89;
      v305 = (char *)v82;
      v306 = (int *)v90;
      if (v83) {
        operator delete(v83);
      }
    }
    else
    {
      *int v53 = v76;
      uint64_t v82 = v53 + 1;
    }
    v305 = (char *)v82;
    std::string::size_type v92 = (uint64_t *)v8[9];
    if (!v92) {
      std::string::size_type v92 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v93 = v92[5];
    uint64_t v94 = *(unsigned __int8 *)(v93 + 23);
    if (*(char *)(v93 + 23) < 0) {
      uint64_t v95 = *(void *)(v93 + 8);
    }
    else {
      uint64_t v95 = *(unsigned __int8 *)(v93 + 23);
    }
    uint64_t v96 = v92[6];
    uint64_t v97 = *(unsigned __int8 *)(v96 + 23);
    if (*(char *)(v96 + 23) < 0) {
      uint64_t v98 = *(void *)(v96 + 8);
    }
    else {
      uint64_t v98 = *(unsigned __int8 *)(v96 + 23);
    }
    int v99 = *((_DWORD *)v92 + 4);
    uint64_t v100 = v92[7];
    uint64_t v101 = *(unsigned __int8 *)(v100 + 23);
    if (*(char *)(v100 + 23) < 0) {
      uint64_t v102 = *(void *)(v100 + 8);
    }
    else {
      uint64_t v102 = *(unsigned __int8 *)(v100 + 23);
    }
    if (v99 <= 0) {
      int v103 = 1;
    }
    else {
      int v103 = 2;
    }
    if (v95) {
      unsigned int v104 = v103;
    }
    else {
      unsigned int v104 = v99 > 0;
    }
    if (v98) {
      ++v104;
    }
    if (v102) {
      ++v104;
    }
    if (v104 <= 1)
    {
      if (v104) {
        int v105 = 0;
      }
      else {
        int v105 = 5;
      }
      if (v99 <= 0 && v104 != 0)
      {
        if ((v94 & 0x80) != 0) {
          uint64_t v94 = *(void *)(v93 + 8);
        }
        if (v94)
        {
          int v105 = 1;
        }
        else
        {
          if ((v97 & 0x80) != 0) {
            uint64_t v97 = *(void *)(v96 + 8);
          }
          uint64_t v107 = v92[8];
          if (v92 == &CoreML::Specification::_WeightParams_default_instance_
            || (v97 ? (BOOL v108 = v107 == 0) : (BOOL v108 = 1), v108))
          {
            if ((v101 & 0x80) != 0) {
              uint64_t v101 = *(void *)(v100 + 8);
            }
            if (v107) {
              BOOL v109 = v101 == 0;
            }
            else {
              BOOL v109 = 1;
            }
            if (v109 || v92 == &CoreML::Specification::_WeightParams_default_instance_) {
              int v105 = 5;
            }
            else {
              int v105 = 3;
            }
          }
          else
          {
            int v105 = 2;
          }
        }
      }
    }
    else
    {
      int v105 = 4;
    }
    if (v82 >= v306)
    {
      int v112 = (int *)v304;
      uint64_t v113 = ((char *)v82 - (unsigned char *)v304) >> 2;
      unint64_t v114 = v113 + 1;
      if ((unint64_t)(v113 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v115 = (char *)v306 - (unsigned char *)v304;
      if (((char *)v306 - (unsigned char *)v304) >> 1 > v114) {
        unint64_t v114 = v115 >> 1;
      }
      if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v116 = v114;
      }
      if (v116)
      {
        uint64_t v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v116);
        int v112 = (int *)v304;
        uint64_t v82 = (int *)v305;
      }
      else
      {
        uint64_t v117 = 0;
      }
      uint64_t v118 = (int *)&v117[4 * v113];
      long long v119 = &v117[4 * v116];
      *uint64_t v118 = v105;
      BOOL v111 = v118 + 1;
      while (v82 != v112)
      {
        int v120 = *--v82;
        *--uint64_t v118 = v120;
      }
      v304 = v118;
      v305 = (char *)v111;
      v306 = (int *)v119;
      if (v112) {
        operator delete(v112);
      }
    }
    else
    {
      int *v82 = v105;
      BOOL v111 = v82 + 1;
    }
    v305 = (char *)v111;
    uint64_t v121 = (uint64_t *)v8[7];
    if (!v121) {
      uint64_t v121 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v122 = v121[5];
    uint64_t v123 = *(unsigned __int8 *)(v122 + 23);
    if (*(char *)(v122 + 23) < 0) {
      uint64_t v124 = *(void *)(v122 + 8);
    }
    else {
      uint64_t v124 = *(unsigned __int8 *)(v122 + 23);
    }
    uint64_t v125 = v121[6];
    uint64_t v126 = *(unsigned __int8 *)(v125 + 23);
    if (*(char *)(v125 + 23) < 0) {
      uint64_t v127 = *(void *)(v125 + 8);
    }
    else {
      uint64_t v127 = *(unsigned __int8 *)(v125 + 23);
    }
    int v128 = *((_DWORD *)v121 + 4);
    uint64_t v129 = v121[7];
    uint64_t v130 = *(unsigned __int8 *)(v129 + 23);
    if (*(char *)(v129 + 23) < 0) {
      uint64_t v131 = *(void *)(v129 + 8);
    }
    else {
      uint64_t v131 = *(unsigned __int8 *)(v129 + 23);
    }
    if (v128 <= 0) {
      int v132 = 1;
    }
    else {
      int v132 = 2;
    }
    if (v124) {
      unsigned int v133 = v132;
    }
    else {
      unsigned int v133 = v128 > 0;
    }
    if (v127) {
      ++v133;
    }
    if (v131) {
      ++v133;
    }
    if (v133 <= 1)
    {
      if (v133) {
        int v134 = 0;
      }
      else {
        int v134 = 5;
      }
      if (v128 <= 0 && v133 != 0)
      {
        if ((v123 & 0x80) != 0) {
          uint64_t v123 = *(void *)(v122 + 8);
        }
        if (v123)
        {
          int v134 = 1;
        }
        else
        {
          if ((v126 & 0x80) != 0) {
            uint64_t v126 = *(void *)(v125 + 8);
          }
          uint64_t v136 = v121[8];
          if (v121 == &CoreML::Specification::_WeightParams_default_instance_
            || (v126 ? (BOOL v137 = v136 == 0) : (BOOL v137 = 1), v137))
          {
            if ((v130 & 0x80) != 0) {
              uint64_t v130 = *(void *)(v129 + 8);
            }
            if (v136) {
              BOOL v138 = v130 == 0;
            }
            else {
              BOOL v138 = 1;
            }
            if (v138 || v121 == &CoreML::Specification::_WeightParams_default_instance_) {
              int v134 = 5;
            }
            else {
              int v134 = 3;
            }
          }
          else
          {
            int v134 = 2;
          }
        }
      }
    }
    else
    {
      int v134 = 4;
    }
    if (v111 >= v306)
    {
      uint64_t v141 = (int *)v304;
      uint64_t v142 = ((char *)v111 - (unsigned char *)v304) >> 2;
      unint64_t v143 = v142 + 1;
      if ((unint64_t)(v142 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v144 = (char *)v306 - (unsigned char *)v304;
      if (((char *)v306 - (unsigned char *)v304) >> 1 > v143) {
        unint64_t v143 = v144 >> 1;
      }
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v145 = v143;
      }
      if (v145)
      {
        uint64_t v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v145);
        uint64_t v141 = (int *)v304;
        BOOL v111 = (int *)v305;
      }
      else
      {
        uint64_t v146 = 0;
      }
      uint64_t v147 = (int *)&v146[4 * v142];
      BOOL v148 = &v146[4 * v145];
      *uint64_t v147 = v134;
      size_t v140 = v147 + 1;
      while (v111 != v141)
      {
        int v149 = *--v111;
        *--uint64_t v147 = v149;
      }
      v304 = v147;
      v305 = (char *)v140;
      v306 = (int *)v148;
      if (v141) {
        operator delete(v141);
      }
    }
    else
    {
      int *v111 = v134;
      size_t v140 = v111 + 1;
    }
    v305 = (char *)v140;
    unsigned int v150 = (uint64_t *)v8[10];
    if (!v150) {
      unsigned int v150 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v151 = v150[5];
    uint64_t v152 = *(unsigned __int8 *)(v151 + 23);
    if (*(char *)(v151 + 23) < 0) {
      uint64_t v153 = *(void *)(v151 + 8);
    }
    else {
      uint64_t v153 = *(unsigned __int8 *)(v151 + 23);
    }
    uint64_t v154 = v150[6];
    uint64_t v155 = *(unsigned __int8 *)(v154 + 23);
    if (*(char *)(v154 + 23) < 0) {
      uint64_t v156 = *(void *)(v154 + 8);
    }
    else {
      uint64_t v156 = *(unsigned __int8 *)(v154 + 23);
    }
    int v157 = *((_DWORD *)v150 + 4);
    uint64_t v158 = v150[7];
    uint64_t v159 = *(unsigned __int8 *)(v158 + 23);
    if (*(char *)(v158 + 23) < 0) {
      uint64_t v160 = *(void *)(v158 + 8);
    }
    else {
      uint64_t v160 = *(unsigned __int8 *)(v158 + 23);
    }
    if (v157 <= 0) {
      int v161 = 1;
    }
    else {
      int v161 = 2;
    }
    if (v153) {
      unsigned int v162 = v161;
    }
    else {
      unsigned int v162 = v157 > 0;
    }
    if (v156) {
      ++v162;
    }
    if (v160) {
      ++v162;
    }
    if (v162 <= 1)
    {
      if (v162) {
        int v163 = 0;
      }
      else {
        int v163 = 5;
      }
      if (v157 <= 0 && v162 != 0)
      {
        if ((v152 & 0x80) != 0) {
          uint64_t v152 = *(void *)(v151 + 8);
        }
        if (v152)
        {
          int v163 = 1;
        }
        else
        {
          if ((v155 & 0x80) != 0) {
            uint64_t v155 = *(void *)(v154 + 8);
          }
          uint64_t v165 = v150[8];
          if (v150 == &CoreML::Specification::_WeightParams_default_instance_
            || (v155 ? (BOOL v166 = v165 == 0) : (BOOL v166 = 1), v166))
          {
            if ((v159 & 0x80) != 0) {
              uint64_t v159 = *(void *)(v158 + 8);
            }
            if (v165) {
              BOOL v167 = v159 == 0;
            }
            else {
              BOOL v167 = 1;
            }
            if (v167 || v150 == &CoreML::Specification::_WeightParams_default_instance_) {
              int v163 = 5;
            }
            else {
              int v163 = 3;
            }
          }
          else
          {
            int v163 = 2;
          }
        }
      }
    }
    else
    {
      int v163 = 4;
    }
    if (v140 >= v306)
    {
      uint64_t v170 = (int *)v304;
      uint64_t v171 = ((char *)v140 - (unsigned char *)v304) >> 2;
      unint64_t v172 = v171 + 1;
      if ((unint64_t)(v171 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v173 = (char *)v306 - (unsigned char *)v304;
      if (((char *)v306 - (unsigned char *)v304) >> 1 > v172) {
        unint64_t v172 = v173 >> 1;
      }
      if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v174 = v172;
      }
      if (v174)
      {
        BOOL v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v174);
        uint64_t v170 = (int *)v304;
        size_t v140 = (int *)v305;
      }
      else
      {
        BOOL v175 = 0;
      }
      v176 = (int *)&v175[4 * v171];
      v177 = &v175[4 * v174];
      int *v176 = v163;
      long long v169 = v176 + 1;
      while (v140 != v170)
      {
        int v178 = *--v140;
        *--v176 = v178;
      }
      v304 = v176;
      v305 = (char *)v169;
      v306 = (int *)v177;
      if (v170) {
        operator delete(v170);
      }
    }
    else
    {
      int *v140 = v163;
      long long v169 = v140 + 1;
    }
    v305 = (char *)v169;
    if (v9)
    {
      v179 = (uint64_t *)v8[11];
      if (!v179) {
        v179 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v180 = v179[5];
      uint64_t v181 = *(unsigned __int8 *)(v180 + 23);
      if (*(char *)(v180 + 23) < 0) {
        uint64_t v182 = *(void *)(v180 + 8);
      }
      else {
        uint64_t v182 = *(unsigned __int8 *)(v180 + 23);
      }
      uint64_t v183 = v179[6];
      uint64_t v184 = *(unsigned __int8 *)(v183 + 23);
      if (*(char *)(v183 + 23) < 0) {
        uint64_t v185 = *(void *)(v183 + 8);
      }
      else {
        uint64_t v185 = *(unsigned __int8 *)(v183 + 23);
      }
      int v186 = *((_DWORD *)v179 + 4);
      uint64_t v187 = v179[7];
      uint64_t v188 = *(unsigned __int8 *)(v187 + 23);
      if (*(char *)(v187 + 23) < 0) {
        uint64_t v189 = *(void *)(v187 + 8);
      }
      else {
        uint64_t v189 = *(unsigned __int8 *)(v187 + 23);
      }
      if (v186 <= 0) {
        int v190 = 1;
      }
      else {
        int v190 = 2;
      }
      if (v182) {
        unsigned int v191 = v190;
      }
      else {
        unsigned int v191 = v186 > 0;
      }
      if (v185) {
        ++v191;
      }
      if (v189) {
        ++v191;
      }
      if (v191 <= 1)
      {
        if (v191) {
          int v192 = 0;
        }
        else {
          int v192 = 5;
        }
        if (v186 <= 0 && v191 != 0)
        {
          if ((v181 & 0x80) != 0) {
            uint64_t v181 = *(void *)(v180 + 8);
          }
          if (v181)
          {
            int v192 = 1;
          }
          else
          {
            if ((v184 & 0x80) != 0) {
              uint64_t v184 = *(void *)(v183 + 8);
            }
            uint64_t v194 = v179[8];
            if (v179 == &CoreML::Specification::_WeightParams_default_instance_
              || (v184 ? (BOOL v195 = v194 == 0) : (BOOL v195 = 1), v195))
            {
              if ((v188 & 0x80) != 0) {
                uint64_t v188 = *(void *)(v187 + 8);
              }
              if (v194) {
                BOOL v196 = v188 == 0;
              }
              else {
                BOOL v196 = 1;
              }
              if (v196 || v179 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v192 = 5;
              }
              else {
                int v192 = 3;
              }
            }
            else
            {
              int v192 = 2;
            }
          }
        }
      }
      else
      {
        int v192 = 4;
      }
      if (v169 >= v306)
      {
        v199 = (int *)v304;
        uint64_t v200 = ((char *)v169 - (unsigned char *)v304) >> 2;
        unint64_t v201 = v200 + 1;
        if ((unint64_t)(v200 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v202 = (char *)v306 - (unsigned char *)v304;
        if (((char *)v306 - (unsigned char *)v304) >> 1 > v201) {
          unint64_t v201 = v202 >> 1;
        }
        if ((unint64_t)v202 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v203 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v203 = v201;
        }
        if (v203)
        {
          v204 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v203);
          v199 = (int *)v304;
          long long v169 = (int *)v305;
        }
        else
        {
          v204 = 0;
        }
        v205 = (int *)&v204[4 * v200];
        v206 = &v204[4 * v203];
        int *v205 = v192;
        v198 = v205 + 1;
        while (v169 != v199)
        {
          int v207 = *--v169;
          *--v205 = v207;
        }
        v304 = v205;
        v305 = (char *)v198;
        v306 = (int *)v206;
        if (v199) {
          operator delete(v199);
        }
      }
      else
      {
        *long long v169 = v192;
        v198 = v169 + 1;
      }
      v305 = (char *)v198;
      v208 = (uint64_t *)v8[12];
      if (!v208) {
        v208 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v209 = v208[5];
      uint64_t v210 = *(unsigned __int8 *)(v209 + 23);
      if (*(char *)(v209 + 23) < 0) {
        uint64_t v211 = *(void *)(v209 + 8);
      }
      else {
        uint64_t v211 = *(unsigned __int8 *)(v209 + 23);
      }
      uint64_t v212 = v208[6];
      uint64_t v213 = *(unsigned __int8 *)(v212 + 23);
      if (*(char *)(v212 + 23) < 0) {
        uint64_t v214 = *(void *)(v212 + 8);
      }
      else {
        uint64_t v214 = *(unsigned __int8 *)(v212 + 23);
      }
      int v215 = *((_DWORD *)v208 + 4);
      uint64_t v216 = v208[7];
      uint64_t v217 = *(unsigned __int8 *)(v216 + 23);
      if (*(char *)(v216 + 23) < 0) {
        uint64_t v218 = *(void *)(v216 + 8);
      }
      else {
        uint64_t v218 = *(unsigned __int8 *)(v216 + 23);
      }
      if (v215 <= 0) {
        int v219 = 1;
      }
      else {
        int v219 = 2;
      }
      if (v211) {
        unsigned int v220 = v219;
      }
      else {
        unsigned int v220 = v215 > 0;
      }
      if (v214) {
        ++v220;
      }
      if (v218) {
        ++v220;
      }
      if (v220 <= 1)
      {
        if (v220) {
          int v221 = 0;
        }
        else {
          int v221 = 5;
        }
        if (v215 <= 0 && v220 != 0)
        {
          if ((v210 & 0x80) != 0) {
            uint64_t v210 = *(void *)(v209 + 8);
          }
          if (v210)
          {
            int v221 = 1;
          }
          else
          {
            if ((v213 & 0x80) != 0) {
              uint64_t v213 = *(void *)(v212 + 8);
            }
            uint64_t v223 = v208[8];
            if (v208 == &CoreML::Specification::_WeightParams_default_instance_
              || (v213 ? (BOOL v224 = v223 == 0) : (BOOL v224 = 1), v224))
            {
              if ((v217 & 0x80) != 0) {
                uint64_t v217 = *(void *)(v216 + 8);
              }
              if (v223) {
                BOOL v225 = v217 == 0;
              }
              else {
                BOOL v225 = 1;
              }
              if (v225 || v208 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v221 = 5;
              }
              else {
                int v221 = 3;
              }
            }
            else
            {
              int v221 = 2;
            }
          }
        }
      }
      else
      {
        int v221 = 4;
      }
      if (v198 >= v306)
      {
        v228 = (int *)v304;
        uint64_t v229 = ((char *)v198 - (unsigned char *)v304) >> 2;
        unint64_t v230 = v229 + 1;
        if ((unint64_t)(v229 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v231 = (char *)v306 - (unsigned char *)v304;
        if (((char *)v306 - (unsigned char *)v304) >> 1 > v230) {
          unint64_t v230 = v231 >> 1;
        }
        if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v232 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v232 = v230;
        }
        if (v232)
        {
          v233 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v232);
          v228 = (int *)v304;
          v198 = (int *)v305;
        }
        else
        {
          v233 = 0;
        }
        v234 = (int *)&v233[4 * v229];
        v235 = &v233[4 * v232];
        int *v234 = v221;
        v227 = v234 + 1;
        while (v198 != v228)
        {
          int v236 = *--v198;
          *--v234 = v236;
        }
        v304 = v234;
        v305 = (char *)v227;
        v306 = (int *)v235;
        if (v228) {
          operator delete(v228);
        }
      }
      else
      {
        int *v198 = v221;
        v227 = v198 + 1;
      }
      v305 = (char *)v227;
      v237 = (uint64_t *)v8[13];
      if (!v237) {
        v237 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      uint64_t v238 = v237[5];
      uint64_t v239 = *(unsigned __int8 *)(v238 + 23);
      if (*(char *)(v238 + 23) < 0) {
        uint64_t v240 = *(void *)(v238 + 8);
      }
      else {
        uint64_t v240 = *(unsigned __int8 *)(v238 + 23);
      }
      uint64_t v241 = v237[6];
      uint64_t v242 = *(unsigned __int8 *)(v241 + 23);
      if (*(char *)(v241 + 23) < 0) {
        uint64_t v243 = *(void *)(v241 + 8);
      }
      else {
        uint64_t v243 = *(unsigned __int8 *)(v241 + 23);
      }
      int v244 = *((_DWORD *)v237 + 4);
      uint64_t v245 = v237[7];
      uint64_t v246 = *(unsigned __int8 *)(v245 + 23);
      if (*(char *)(v245 + 23) < 0) {
        uint64_t v247 = *(void *)(v245 + 8);
      }
      else {
        uint64_t v247 = *(unsigned __int8 *)(v245 + 23);
      }
      if (v244 <= 0) {
        int v248 = 1;
      }
      else {
        int v248 = 2;
      }
      if (v240) {
        unsigned int v249 = v248;
      }
      else {
        unsigned int v249 = v244 > 0;
      }
      if (v243) {
        ++v249;
      }
      if (v247) {
        ++v249;
      }
      if (v249 <= 1)
      {
        if (v249) {
          int v250 = 0;
        }
        else {
          int v250 = 5;
        }
        if (v244 <= 0 && v249 != 0)
        {
          if ((v239 & 0x80) != 0) {
            uint64_t v239 = *(void *)(v238 + 8);
          }
          if (v239)
          {
            int v250 = 1;
          }
          else
          {
            if ((v242 & 0x80) != 0) {
              uint64_t v242 = *(void *)(v241 + 8);
            }
            uint64_t v252 = v237[8];
            if (v237 == &CoreML::Specification::_WeightParams_default_instance_
              || (v242 ? (BOOL v253 = v252 == 0) : (BOOL v253 = 1), v253))
            {
              if ((v246 & 0x80) != 0) {
                uint64_t v246 = *(void *)(v245 + 8);
              }
              if (v252) {
                BOOL v254 = v246 == 0;
              }
              else {
                BOOL v254 = 1;
              }
              if (v254 || v237 == &CoreML::Specification::_WeightParams_default_instance_) {
                int v250 = 5;
              }
              else {
                int v250 = 3;
              }
            }
            else
            {
              int v250 = 2;
            }
          }
        }
      }
      else
      {
        int v250 = 4;
      }
      if (v227 >= v306)
      {
        v256 = (int *)v304;
        uint64_t v257 = ((char *)v227 - (unsigned char *)v304) >> 2;
        unint64_t v258 = v257 + 1;
        if ((unint64_t)(v257 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v259 = (char *)v306 - (unsigned char *)v304;
        if (((char *)v306 - (unsigned char *)v304) >> 1 > v258) {
          unint64_t v258 = v259 >> 1;
        }
        if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v260 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v260 = v258;
        }
        if (v260)
        {
          v261 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v306, v260);
          v256 = (int *)v304;
          v227 = (int *)v305;
        }
        else
        {
          v261 = 0;
        }
        v262 = (int *)&v261[4 * v257];
        v263 = &v261[4 * v260];
        int *v262 = v250;
        long long v169 = v262 + 1;
        while (v227 != v256)
        {
          int v264 = *--v227;
          *--v262 = v264;
        }
        v304 = v262;
        v305 = (char *)v169;
        v306 = (int *)v263;
        if (v256) {
          operator delete(v256);
        }
      }
      else
      {
        int *v227 = v250;
        long long v169 = v227 + 1;
      }
      v305 = (char *)v169;
    }
    v265 = v304;
    if (v304 == v169)
    {
LABEL_643:
      uint64_t v270 = v8[14];
      v269 = (const CoreML::Specification::WeightParams *)v8[15];
      if (v8[5]) {
        v271 = (uint64_t *)v8[5];
      }
      else {
        v271 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
      uint64_t v272 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(v301, "update gate weight matrix");
      v273 = (const CoreML::Specification::WeightParams *)((void)v269 * v270);
      CoreML::validateGeneralWeightParams((uint64_t)v271, v273, v269, (const void **)&v303.__r_.__value_.__l.__data_, v272, (uint64_t)v301, (uint64_t)v309);
      uint64_t v311 = *(void *)v309;
      if (SHIBYTE(v313) < 0) {
        operator delete((void *)v312);
      }
      long long v312 = *(_OWORD *)&v309[8];
      uint64_t v313 = v310;
      HIBYTE(v310) = 0;
      v309[8] = 0;
      if (v302 < 0) {
        operator delete(v301[0]);
      }
      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v303.__r_.__value_.__l.__data_);
      }
      if (CoreML::Result::good((CoreML::Result *)&v311))
      {
        if (v8[6]) {
          v274 = (uint64_t *)v8[6];
        }
        else {
          v274 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
        uint64_t v275 = *((void *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v301, "reset gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)v274, v273, v269, (const void **)&v303.__r_.__value_.__l.__data_, v275, (uint64_t)v301, (uint64_t)v309);
        uint64_t v311 = *(void *)v309;
        if (SHIBYTE(v313) < 0) {
          operator delete((void *)v312);
        }
        long long v312 = *(_OWORD *)&v309[8];
        uint64_t v313 = v310;
        HIBYTE(v310) = 0;
        v309[8] = 0;
        if (v302 < 0) {
          operator delete(v301[0]);
        }
        if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v303.__r_.__value_.__l.__data_);
        }
        if (CoreML::Result::good((CoreML::Result *)&v311))
        {
          if (v8[7]) {
            v276 = (uint64_t *)v8[7];
          }
          else {
            v276 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
          uint64_t v277 = *((void *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(v301, "output gate weight matrix");
          CoreML::validateGeneralWeightParams((uint64_t)v276, v273, v269, (const void **)&v303.__r_.__value_.__l.__data_, v277, (uint64_t)v301, (uint64_t)v309);
          uint64_t v311 = *(void *)v309;
          if (SHIBYTE(v313) < 0) {
            operator delete((void *)v312);
          }
          long long v312 = *(_OWORD *)&v309[8];
          uint64_t v313 = v310;
          HIBYTE(v310) = 0;
          v309[8] = 0;
          if (v302 < 0) {
            operator delete(v301[0]);
          }
          if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v303.__r_.__value_.__l.__data_);
          }
          if (CoreML::Result::good((CoreML::Result *)&v311))
          {
            uint64_t v278 = v8[15];
            if (v8[8]) {
              v279 = (uint64_t *)v8[8];
            }
            else {
              v279 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
            uint64_t v280 = *((void *)a2 + 14);
            std::string::basic_string[abi:ne180100]<0>(v301, "update gate recursion matrix");
            v281 = (const CoreML::Specification::WeightParams *)(v278 * v278);
            CoreML::validateGeneralWeightParams((uint64_t)v279, v281, v269, (const void **)&v303.__r_.__value_.__l.__data_, v280, (uint64_t)v301, (uint64_t)v309);
            uint64_t v311 = *(void *)v309;
            if (SHIBYTE(v313) < 0) {
              operator delete((void *)v312);
            }
            long long v312 = *(_OWORD *)&v309[8];
            uint64_t v313 = v310;
            HIBYTE(v310) = 0;
            v309[8] = 0;
            if (v302 < 0) {
              operator delete(v301[0]);
            }
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v303.__r_.__value_.__l.__data_);
            }
            if (CoreML::Result::good((CoreML::Result *)&v311))
            {
              if (v8[9]) {
                v282 = (uint64_t *)v8[9];
              }
              else {
                v282 = &CoreML::Specification::_WeightParams_default_instance_;
              }
              std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
              uint64_t v283 = *((void *)a2 + 14);
              std::string::basic_string[abi:ne180100]<0>(v301, "reset gate recursion matrix");
              CoreML::validateGeneralWeightParams((uint64_t)v282, v281, v269, (const void **)&v303.__r_.__value_.__l.__data_, v283, (uint64_t)v301, (uint64_t)v309);
              uint64_t v311 = *(void *)v309;
              if (SHIBYTE(v313) < 0) {
                operator delete((void *)v312);
              }
              long long v312 = *(_OWORD *)&v309[8];
              uint64_t v313 = v310;
              HIBYTE(v310) = 0;
              v309[8] = 0;
              if (v302 < 0) {
                operator delete(v301[0]);
              }
              if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v303.__r_.__value_.__l.__data_);
              }
              if (CoreML::Result::good((CoreML::Result *)&v311))
              {
                if (v8[10]) {
                  v284 = (uint64_t *)v8[10];
                }
                else {
                  v284 = &CoreML::Specification::_WeightParams_default_instance_;
                }
                std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
                uint64_t v285 = *((void *)a2 + 14);
                std::string::basic_string[abi:ne180100]<0>(v301, "output gate recursion matrix");
                CoreML::validateGeneralWeightParams((uint64_t)v284, v281, v269, (const void **)&v303.__r_.__value_.__l.__data_, v285, (uint64_t)v301, (uint64_t)v309);
                uint64_t v311 = *(void *)v309;
                if (SHIBYTE(v313) < 0) {
                  operator delete((void *)v312);
                }
                long long v312 = *(_OWORD *)&v309[8];
                uint64_t v313 = v310;
                HIBYTE(v310) = 0;
                v309[8] = 0;
                if (v302 < 0) {
                  operator delete(v301[0]);
                }
                if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v303.__r_.__value_.__l.__data_);
                }
                if (CoreML::Result::good((CoreML::Result *)&v311))
                {
                  if (!v9) {
                    goto LABEL_734;
                  }
                  v286 = (const CoreML::Specification::WeightParams *)v8[15];
                  if (v8[11]) {
                    v287 = (uint64_t *)v8[11];
                  }
                  else {
                    v287 = &CoreML::Specification::_WeightParams_default_instance_;
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
                  uint64_t v288 = *((void *)a2 + 14);
                  std::string::basic_string[abi:ne180100]<0>(v301, "update gate bias vector");
                  CoreML::validateGeneralWeightParams((uint64_t)v287, v286, (const CoreML::Specification::WeightParams *)1, (const void **)&v303.__r_.__value_.__l.__data_, v288, (uint64_t)v301, (uint64_t)v309);
                  uint64_t v311 = *(void *)v309;
                  if (SHIBYTE(v313) < 0) {
                    operator delete((void *)v312);
                  }
                  long long v312 = *(_OWORD *)&v309[8];
                  uint64_t v313 = v310;
                  HIBYTE(v310) = 0;
                  v309[8] = 0;
                  if (v302 < 0) {
                    operator delete(v301[0]);
                  }
                  if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v303.__r_.__value_.__l.__data_);
                  }
                  if (CoreML::Result::good((CoreML::Result *)&v311))
                  {
                    if (v8[12]) {
                      v289 = (uint64_t *)v8[12];
                    }
                    else {
                      v289 = &CoreML::Specification::_WeightParams_default_instance_;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
                    uint64_t v290 = *((void *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v301, "reset gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v289, v286, (const CoreML::Specification::WeightParams *)1, (const void **)&v303.__r_.__value_.__l.__data_, v290, (uint64_t)v301, (uint64_t)v309);
                    uint64_t v311 = *(void *)v309;
                    if (SHIBYTE(v313) < 0) {
                      operator delete((void *)v312);
                    }
                    long long v312 = *(_OWORD *)&v309[8];
                    uint64_t v313 = v310;
                    HIBYTE(v310) = 0;
                    v309[8] = 0;
                    if (v302 < 0) {
                      operator delete(v301[0]);
                    }
                    if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v303.__r_.__value_.__l.__data_);
                    }
                    if (CoreML::Result::good((CoreML::Result *)&v311))
                    {
                      if (v8[13]) {
                        v291 = (uint64_t *)v8[13];
                      }
                      else {
                        v291 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v303, "GRU");
                      uint64_t v292 = *((void *)a2 + 14);
                      std::string::basic_string[abi:ne180100]<0>(v301, "output gate bias vector");
                      CoreML::validateGeneralWeightParams((uint64_t)v291, v286, (const CoreML::Specification::WeightParams *)1, (const void **)&v303.__r_.__value_.__l.__data_, v292, (uint64_t)v301, (uint64_t)v309);
                      uint64_t v311 = *(void *)v309;
                      if (SHIBYTE(v313) < 0) {
                        operator delete((void *)v312);
                      }
                      long long v312 = *(_OWORD *)&v309[8];
                      uint64_t v313 = v310;
                      HIBYTE(v310) = 0;
                      v309[8] = 0;
                      if (v302 < 0) {
                        operator delete(v301[0]);
                      }
                      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v303.__r_.__value_.__l.__data_);
                      }
                      if (CoreML::Result::good((CoreML::Result *)&v311))
                      {
LABEL_734:
                        uint64_t v293 = v8[4];
                        if (v293) {
                          v294 = (CoreML **)(v293 + 8);
                        }
                        else {
                          v294 = 0;
                        }
                        uint64_t v295 = *((int *)v8 + 6);
                        if (v295)
                        {
                          uint64_t v296 = 8 * v295 - 8;
                          do
                          {
                            CoreML::validateRecurrentActivationParams(*v294, (CoreML::Result *)v309);
                            uint64_t v311 = *(void *)v309;
                            if (SHIBYTE(v313) < 0) {
                              operator delete((void *)v312);
                            }
                            long long v312 = *(_OWORD *)&v309[8];
                            uint64_t v313 = v310;
                            BOOL v297 = CoreML::Result::good((CoreML::Result *)&v311);
                            ++v294;
                            if (v296) {
                              BOOL v298 = v297;
                            }
                            else {
                              BOOL v298 = 0;
                            }
                            v296 -= 8;
                          }
                          while (v298);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      *(void *)a3 = v311;
      *(_OWORD *)(a3 + 8) = v312;
      *(void *)(a3 + 24) = v313;
      long long v312 = 0uLL;
      uint64_t v313 = 0;
    }
    else
    {
      int v266 = 0;
      int v267 = 0;
      while (1)
      {
        int v268 = *v265 ? v266 : v266 + 1;
        if (*v265 == 1) {
          ++v267;
        }
        else {
          int v266 = v268;
        }
        if (v266 * v267 >= 1) {
          break;
        }
        if (++v265 == v169) {
          goto LABEL_643;
        }
      }
      std::operator+<char>();
      v299 = std::string::append(&v303, "' has invalid weight/recursion matrix or bias fields. Field value types should match and should be either half or full precision");
      long long v300 = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
      *(void *)&v309[16] = *((void *)&v299->__r_.__value_.__l + 2);
      *(_OWORD *)v309 = v300;
      v299->__r_.__value_.__l.__size_ = 0;
      v299->__r_.__value_.__r.__words[2] = 0;
      v299->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v303.__r_.__value_.__l.__data_);
      }
      CoreML::Result::Result((_DWORD *)a3, 13);
      if ((v309[23] & 0x80000000) != 0) {
        operator delete(*(void **)v309);
      }
    }
    if (v304)
    {
      v305 = (char *)v304;
      operator delete(v304);
    }
    if (SHIBYTE(v313) < 0) {
      operator delete((void *)v312);
    }
  }
  else
  {
LABEL_22:
    *(void *)a3 = v311;
    *(_OWORD *)(a3 + 8) = v312;
    *(void *)(a3 + 24) = v313;
  }
}

void sub_22428C978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a21) {
    operator delete(a21);
  }
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateUniDirectionalLSTMLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v102);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 3, (CoreML::Result *)&v92);
  uint64_t v102 = v92;
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
  long long v103 = v93;
  uint64_t v104 = v94;
  if (CoreML::Result::good((CoreML::Result *)&v102))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v92);
    uint64_t v102 = v92;
    if (SHIBYTE(v104) < 0) {
      operator delete((void *)v103);
    }
    long long v103 = v93;
    uint64_t v104 = v94;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v102)) {
    goto LABEL_52;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v102);
  if (!v6) {
    goto LABEL_52;
  }
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v100, "UniDirectionalLSTM");
    int v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v100, (uint64_t)v7, (CoreML::Result *)&v92);
    uint64_t v102 = v92;
    if (SHIBYTE(v104) < 0) {
      operator delete((void *)v103);
    }
    long long v103 = v93;
    uint64_t v104 = v94;
    HIBYTE(v94) = 0;
    LOBYTE(v93) = 0;
    if (v101 < 0) {
      operator delete(v100[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v102)) {
      goto LABEL_52;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "UniDirectionalLSTM");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)__p, 5, 5, (uint64_t)v7, (uint64_t)&v92);
    uint64_t v102 = v92;
    if (SHIBYTE(v104) < 0) {
      operator delete((void *)v103);
    }
    long long v103 = v93;
    uint64_t v104 = v94;
    HIBYTE(v94) = 0;
    LOBYTE(v93) = 0;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    BOOL v6 = CoreML::Result::good((CoreML::Result *)&v102);
    if (!v6) {
      goto LABEL_52;
    }
  }
  if (*((_DWORD *)a2 + 35) == 420) {
    int v8 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    int v8 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v6);
  }
  uint64_t v9 = v8[4];
  if (v9) {
    uint64_t v10 = (CoreML **)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((int *)v8 + 6);
  if (v11)
  {
    uint64_t v12 = 8 * v11 - 8;
    do
    {
      CoreML::validateRecurrentActivationParams(*v10, (CoreML::Result *)&v92);
      uint64_t v102 = v92;
      if (SHIBYTE(v104) < 0) {
        operator delete((void *)v103);
      }
      long long v103 = v93;
      uint64_t v104 = v94;
      int v8 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v102);
      ++v10;
      if (v12) {
        char v13 = (char)v8;
      }
      else {
        char v13 = 0;
      }
      v12 -= 8;
    }
    while ((v13 & 1) != 0);
  }
  if (*((_DWORD *)a2 + 35) == 420)
  {
    uint64_t v14 = (uint64_t *)*((void *)a2 + 16);
    if (v14[6]) {
      uint64_t v15 = (uint64_t *)v14[6];
    }
    else {
      uint64_t v15 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
  }
  else
  {
    uint64_t v16 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v8);
    if (v16[6]) {
      uint64_t v15 = (uint64_t *)v16[6];
    }
    else {
      uint64_t v15 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
    if (*((_DWORD *)a2 + 35) == 420) {
      uint64_t v14 = (uint64_t *)*((void *)a2 + 16);
    }
    else {
      uint64_t v14 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v16);
    }
  }
  if (v14[5]) {
    int v17 = (const CoreML::Specification::LSTMParams *)v14[5];
  }
  else {
    int v17 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  }
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)v99, v17);
  CoreML::validateLSTMWeightParams(v15, (uint64_t)v99, (CoreML::Result *)&v92);
  uint64_t v102 = v92;
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
  long long v103 = v93;
  uint64_t v104 = v94;
  HIBYTE(v94) = 0;
  LOBYTE(v93) = 0;
  CoreML::Specification::LSTMParams::~LSTMParams((CoreML::Specification::LSTMParams *)v99);
  BOOL v18 = CoreML::Result::good((CoreML::Result *)&v102);
  if (!v18)
  {
LABEL_52:
    *(void *)a3 = v102;
    *(_OWORD *)(a3 + 8) = v103;
    *(void *)(a3 + 24) = v104;
    return;
  }
  if (*((_DWORD *)a2 + 35) == 420) {
    uint64_t v19 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v19 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v18);
  }
  CoreML::Specification::UniDirectionalLSTMLayerParams::UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&v92, (const CoreML::Specification::UniDirectionalLSTMLayerParams *)v19);
  if (v94 != 3)
  {
    std::operator+<char>();
    unint64_t v85 = std::string::append(&v91, " must provide 3 activations");
    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v85->__r_.__value_.__l + 2);
    *(_OWORD *)long long __p = v86;
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_249;
  }
  uint64_t v21 = v97;
  uint64_t v20 = v98;
  unsigned int v22 = v96;
  if (!v96) {
    unsigned int v22 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
  }
  int v23 = (uint64_t *)v22[2];
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
  uint64_t v25 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v87, "input gate weight matrix");
  BOOL v26 = (const CoreML::Specification::WeightParams *)(v21 * (void)v20);
  CoreML::validateGeneralWeightParams((uint64_t)v24, v26, v20, (const void **)&v91.__r_.__value_.__l.__data_, v25, (uint64_t)v87, (uint64_t)__p);
  uint64_t v102 = *(void *)__p;
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
  long long v103 = *(_OWORD *)&__p[8];
  uint64_t v104 = v90;
  HIBYTE(v90) = 0;
  __p[8] = 0;
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  if (CoreML::Result::good((CoreML::Result *)&v102))
  {
    uint64_t v27 = v96;
    if (!v96) {
      uint64_t v27 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
    uint64_t v28 = (uint64_t *)v27[3];
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
    uint64_t v30 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v87, "forget gate weight matrix");
    CoreML::validateGeneralWeightParams((uint64_t)v29, v26, v20, (const void **)&v91.__r_.__value_.__l.__data_, v30, (uint64_t)v87, (uint64_t)__p);
    uint64_t v102 = *(void *)__p;
    if (SHIBYTE(v104) < 0) {
      operator delete((void *)v103);
    }
    long long v103 = *(_OWORD *)&__p[8];
    uint64_t v104 = v90;
    HIBYTE(v90) = 0;
    __p[8] = 0;
    if (v88 < 0) {
      operator delete(v87[0]);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (CoreML::Result::good((CoreML::Result *)&v102))
    {
      uint64_t v31 = v96;
      if (!v96) {
        uint64_t v31 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
      }
      uint64_t v32 = (uint64_t *)v31[4];
      if (v32) {
        int v33 = v32;
      }
      else {
        int v33 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
      uint64_t v34 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(v87, "block input gate weight matrix");
      CoreML::validateGeneralWeightParams((uint64_t)v33, v26, v20, (const void **)&v91.__r_.__value_.__l.__data_, v34, (uint64_t)v87, (uint64_t)__p);
      uint64_t v102 = *(void *)__p;
      if (SHIBYTE(v104) < 0) {
        operator delete((void *)v103);
      }
      long long v103 = *(_OWORD *)&__p[8];
      uint64_t v104 = v90;
      HIBYTE(v90) = 0;
      __p[8] = 0;
      if (v88 < 0) {
        operator delete(v87[0]);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (CoreML::Result::good((CoreML::Result *)&v102))
      {
        uint64_t v35 = v96;
        if (!v96) {
          uint64_t v35 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
        }
        uint64_t v36 = (uint64_t *)v35[5];
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
        uint64_t v38 = *((void *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v87, "output gate weight matrix");
        CoreML::validateGeneralWeightParams((uint64_t)v37, v26, v20, (const void **)&v91.__r_.__value_.__l.__data_, v38, (uint64_t)v87, (uint64_t)__p);
        uint64_t v102 = *(void *)__p;
        if (SHIBYTE(v104) < 0) {
          operator delete((void *)v103);
        }
        long long v103 = *(_OWORD *)&__p[8];
        uint64_t v104 = v90;
        HIBYTE(v90) = 0;
        __p[8] = 0;
        if (v88 < 0) {
          operator delete(v87[0]);
        }
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v91.__r_.__value_.__l.__data_);
        }
        if (CoreML::Result::good((CoreML::Result *)&v102))
        {
          uint64_t v39 = v96;
          if (!v96) {
            uint64_t v39 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
          }
          uint64_t v40 = (uint64_t *)v39[6];
          if (v40) {
            int v41 = v40;
          }
          else {
            int v41 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
          uint64_t v42 = *((void *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(v87, "input gate recursion matrix");
          CoreML::validateGeneralWeightParams((uint64_t)v41, (const CoreML::Specification::WeightParams *)((void)v20 * (void)v20), v20, (const void **)&v91.__r_.__value_.__l.__data_, v42, (uint64_t)v87, (uint64_t)__p);
          uint64_t v102 = *(void *)__p;
          if (SHIBYTE(v104) < 0) {
            operator delete((void *)v103);
          }
          long long v103 = *(_OWORD *)&__p[8];
          uint64_t v104 = v90;
          HIBYTE(v90) = 0;
          __p[8] = 0;
          if (v88 < 0) {
            operator delete(v87[0]);
          }
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v91.__r_.__value_.__l.__data_);
          }
          if (CoreML::Result::good((CoreML::Result *)&v102))
          {
            uint64_t v43 = v96;
            if (!v96) {
              uint64_t v43 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
            }
            uint64_t v44 = (uint64_t *)v43[7];
            if (v44) {
              int v45 = v44;
            }
            else {
              int v45 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
            uint64_t v46 = *((void *)a2 + 14);
            std::string::basic_string[abi:ne180100]<0>(v87, "forget gate recursion matrix");
            CoreML::validateGeneralWeightParams((uint64_t)v45, (const CoreML::Specification::WeightParams *)((void)v20 * (void)v20), v20, (const void **)&v91.__r_.__value_.__l.__data_, v46, (uint64_t)v87, (uint64_t)__p);
            uint64_t v102 = *(void *)__p;
            if (SHIBYTE(v104) < 0) {
              operator delete((void *)v103);
            }
            long long v103 = *(_OWORD *)&__p[8];
            uint64_t v104 = v90;
            HIBYTE(v90) = 0;
            __p[8] = 0;
            if (v88 < 0) {
              operator delete(v87[0]);
            }
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91.__r_.__value_.__l.__data_);
            }
            if (CoreML::Result::good((CoreML::Result *)&v102))
            {
              int v47 = v96;
              if (!v96) {
                int v47 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
              }
              uint64_t v48 = (uint64_t *)v47[8];
              if (v48) {
                uint64_t v49 = v48;
              }
              else {
                uint64_t v49 = &CoreML::Specification::_WeightParams_default_instance_;
              }
              std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
              uint64_t v50 = *((void *)a2 + 14);
              std::string::basic_string[abi:ne180100]<0>(v87, "block input gate recursion matrix");
              CoreML::validateGeneralWeightParams((uint64_t)v49, (const CoreML::Specification::WeightParams *)((void)v20 * (void)v20), v20, (const void **)&v91.__r_.__value_.__l.__data_, v50, (uint64_t)v87, (uint64_t)__p);
              uint64_t v102 = *(void *)__p;
              if (SHIBYTE(v104) < 0) {
                operator delete((void *)v103);
              }
              long long v103 = *(_OWORD *)&__p[8];
              uint64_t v104 = v90;
              HIBYTE(v90) = 0;
              __p[8] = 0;
              if (v88 < 0) {
                operator delete(v87[0]);
              }
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
              if (CoreML::Result::good((CoreML::Result *)&v102))
              {
                BOOL v51 = v96;
                if (!v96) {
                  BOOL v51 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                }
                uint64_t v52 = (uint64_t *)v51[9];
                if (v52) {
                  int v53 = v52;
                }
                else {
                  int v53 = &CoreML::Specification::_WeightParams_default_instance_;
                }
                std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                uint64_t v54 = *((void *)a2 + 14);
                std::string::basic_string[abi:ne180100]<0>(v87, "output gate recursion matrix");
                CoreML::validateGeneralWeightParams((uint64_t)v53, (const CoreML::Specification::WeightParams *)((void)v20 * (void)v20), v20, (const void **)&v91.__r_.__value_.__l.__data_, v54, (uint64_t)v87, (uint64_t)__p);
                uint64_t v102 = *(void *)__p;
                if (SHIBYTE(v104) < 0) {
                  operator delete((void *)v103);
                }
                long long v103 = *(_OWORD *)&__p[8];
                uint64_t v104 = v90;
                HIBYTE(v90) = 0;
                __p[8] = 0;
                if (v88 < 0) {
                  operator delete(v87[0]);
                }
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v91.__r_.__value_.__l.__data_);
                }
                if (CoreML::Result::good((CoreML::Result *)&v102))
                {
                  uint64_t v55 = v95;
                  if (v95) {
                    unint64_t v56 = v95;
                  }
                  else {
                    unint64_t v56 = &CoreML::Specification::_LSTMParams_default_instance_;
                  }
                  if (*((unsigned char *)v56 + 21))
                  {
                    uint64_t v57 = v96;
                    if (!v96) {
                      uint64_t v57 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    }
                    unint64_t v58 = (uint64_t *)v57[10];
                    if (v58) {
                      unsigned int v59 = v58;
                    }
                    else {
                      unsigned int v59 = &CoreML::Specification::_WeightParams_default_instance_;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    uint64_t v60 = *((void *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "input gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v59, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v60, (uint64_t)v87, (uint64_t)__p);
                    uint64_t v102 = *(void *)__p;
                    if (SHIBYTE(v104) < 0) {
                      operator delete((void *)v103);
                    }
                    long long v103 = *(_OWORD *)&__p[8];
                    uint64_t v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0) {
                      operator delete(v87[0]);
                    }
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v91.__r_.__value_.__l.__data_);
                    }
                    if (!CoreML::Result::good((CoreML::Result *)&v102)) {
                      goto LABEL_244;
                    }
                    uint64_t v61 = v96;
                    if (!v96) {
                      uint64_t v61 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    }
                    int v62 = (uint64_t *)v61[11];
                    if (v62) {
                      BOOL v63 = v62;
                    }
                    else {
                      BOOL v63 = &CoreML::Specification::_WeightParams_default_instance_;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    uint64_t v64 = *((void *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "forget gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v63, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v64, (uint64_t)v87, (uint64_t)__p);
                    uint64_t v102 = *(void *)__p;
                    if (SHIBYTE(v104) < 0) {
                      operator delete((void *)v103);
                    }
                    long long v103 = *(_OWORD *)&__p[8];
                    uint64_t v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0) {
                      operator delete(v87[0]);
                    }
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v91.__r_.__value_.__l.__data_);
                    }
                    if (!CoreML::Result::good((CoreML::Result *)&v102)) {
                      goto LABEL_244;
                    }
                    uint64_t v65 = v96;
                    if (!v96) {
                      uint64_t v65 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    }
                    uint64_t v66 = (uint64_t *)v65[12];
                    if (v66) {
                      uint64_t v67 = v66;
                    }
                    else {
                      uint64_t v67 = &CoreML::Specification::_WeightParams_default_instance_;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    uint64_t v68 = *((void *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "block input bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v67, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v68, (uint64_t)v87, (uint64_t)__p);
                    uint64_t v102 = *(void *)__p;
                    if (SHIBYTE(v104) < 0) {
                      operator delete((void *)v103);
                    }
                    long long v103 = *(_OWORD *)&__p[8];
                    uint64_t v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0) {
                      operator delete(v87[0]);
                    }
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v91.__r_.__value_.__l.__data_);
                    }
                    if (!CoreML::Result::good((CoreML::Result *)&v102)) {
                      goto LABEL_244;
                    }
                    uint64_t v69 = v96;
                    if (!v96) {
                      uint64_t v69 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    }
                    int v70 = (uint64_t *)v69[13];
                    if (v70) {
                      uint64_t v71 = v70;
                    }
                    else {
                      uint64_t v71 = &CoreML::Specification::_WeightParams_default_instance_;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    uint64_t v72 = *((void *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "output gate bias vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v71, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v72, (uint64_t)v87, (uint64_t)__p);
                    uint64_t v102 = *(void *)__p;
                    if (SHIBYTE(v104) < 0) {
                      operator delete((void *)v103);
                    }
                    long long v103 = *(_OWORD *)&__p[8];
                    uint64_t v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0) {
                      operator delete(v87[0]);
                    }
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v91.__r_.__value_.__l.__data_);
                    }
                    if (!CoreML::Result::good((CoreML::Result *)&v102)) {
                      goto LABEL_244;
                    }
                    uint64_t v55 = v95;
                  }
                  if (!v55) {
                    uint64_t v55 = &CoreML::Specification::_LSTMParams_default_instance_;
                  }
                  if (*((unsigned char *)v55 + 23))
                  {
                    uint64_t v73 = v96;
                    if (!v96) {
                      uint64_t v73 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                    }
                    int v74 = (uint64_t *)v73[14];
                    if (v74) {
                      unsigned int v75 = v74;
                    }
                    else {
                      unsigned int v75 = &CoreML::Specification::_WeightParams_default_instance_;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                    uint64_t v76 = *((void *)a2 + 14);
                    std::string::basic_string[abi:ne180100]<0>(v87, "input gate peep hole vector");
                    CoreML::validateGeneralWeightParams((uint64_t)v75, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v76, (uint64_t)v87, (uint64_t)__p);
                    uint64_t v102 = *(void *)__p;
                    if (SHIBYTE(v104) < 0) {
                      operator delete((void *)v103);
                    }
                    long long v103 = *(_OWORD *)&__p[8];
                    uint64_t v104 = v90;
                    HIBYTE(v90) = 0;
                    __p[8] = 0;
                    if (v88 < 0) {
                      operator delete(v87[0]);
                    }
                    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v91.__r_.__value_.__l.__data_);
                    }
                    if (CoreML::Result::good((CoreML::Result *)&v102))
                    {
                      uint64_t v77 = v96;
                      if (!v96) {
                        uint64_t v77 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                      }
                      uint64_t v78 = (uint64_t *)v77[15];
                      if (v78) {
                        BOOL v79 = v78;
                      }
                      else {
                        BOOL v79 = &CoreML::Specification::_WeightParams_default_instance_;
                      }
                      std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                      uint64_t v80 = *((void *)a2 + 14);
                      std::string::basic_string[abi:ne180100]<0>(v87, "forget gate peep hole vector");
                      CoreML::validateGeneralWeightParams((uint64_t)v79, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v80, (uint64_t)v87, (uint64_t)__p);
                      uint64_t v102 = *(void *)__p;
                      if (SHIBYTE(v104) < 0) {
                        operator delete((void *)v103);
                      }
                      long long v103 = *(_OWORD *)&__p[8];
                      uint64_t v104 = v90;
                      HIBYTE(v90) = 0;
                      __p[8] = 0;
                      if (v88 < 0) {
                        operator delete(v87[0]);
                      }
                      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v91.__r_.__value_.__l.__data_);
                      }
                      if (CoreML::Result::good((CoreML::Result *)&v102))
                      {
                        uint64_t v81 = v96;
                        if (!v96) {
                          uint64_t v81 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
                        }
                        uint64_t v82 = (uint64_t *)v81[16];
                        if (v82) {
                          int v83 = v82;
                        }
                        else {
                          int v83 = &CoreML::Specification::_WeightParams_default_instance_;
                        }
                        std::string::basic_string[abi:ne180100]<0>(&v91, "Unidirectional LSTM");
                        uint64_t v84 = *((void *)a2 + 14);
                        std::string::basic_string[abi:ne180100]<0>(v87, "output gate peep hole vector");
                        CoreML::validateGeneralWeightParams((uint64_t)v83, v20, (const CoreML::Specification::WeightParams *)1, (const void **)&v91.__r_.__value_.__l.__data_, v84, (uint64_t)v87, (uint64_t)__p);
                        uint64_t v102 = *(void *)__p;
                        if (SHIBYTE(v104) < 0) {
                          operator delete((void *)v103);
                        }
                        long long v103 = *(_OWORD *)&__p[8];
                        uint64_t v104 = v90;
                        HIBYTE(v90) = 0;
                        __p[8] = 0;
                        if (v88 < 0) {
                          operator delete(v87[0]);
                        }
                        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v91.__r_.__value_.__l.__data_);
                        }
                        CoreML::Result::good((CoreML::Result *)&v102);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_244:
  *(void *)a3 = v102;
  *(_OWORD *)(a3 + 8) = v103;
  *(void *)(a3 + 24) = v104;
  long long v103 = 0uLL;
  uint64_t v104 = 0;
LABEL_249:
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&v92);
  if (SHIBYTE(v104) < 0) {
    operator delete((void *)v103);
  }
}

void sub_22428DA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  CoreML::Specification::UniDirectionalLSTMLayerParams::~UniDirectionalLSTMLayerParams((CoreML::Specification::UniDirectionalLSTMLayerParams *)&a30);
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  _Unwind_Resume(a1);
}

void CoreML::validateLSTMWeightParams(void *a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  int v5 = *(unsigned __int8 *)(a2 + 23);
  int v6 = *(unsigned __int8 *)(a2 + 21);
  v423 = 0;
  v424 = 0;
  long long __p = 0;
  int v7 = (uint64_t *)a1[2];
  if (!v7) {
    int v7 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v8 = v7[5];
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  uint64_t v10 = v7[6];
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0) {
    uint64_t v12 = *(void *)(v10 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
  }
  int v13 = *((_DWORD *)v7 + 4);
  uint64_t v14 = v7[7];
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v16 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
  }
  if (v13 <= 0) {
    int v17 = 1;
  }
  else {
    int v17 = 2;
  }
  if (v9) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v13 > 0;
  }
  if (v12) {
    ++v18;
  }
  if (v16) {
    ++v18;
  }
  if (v18 > 1)
  {
    int v19 = 4;
    goto LABEL_54;
  }
  if (v18) {
    int v19 = 0;
  }
  else {
    int v19 = 5;
  }
  if (v13 <= 0 && v18 != 0)
  {
    if ((*(unsigned char *)(v8 + 23) & 0x80) != 0)
    {
      if (*(void *)(v8 + 8)) {
        goto LABEL_33;
      }
    }
    else if (*(unsigned char *)(v8 + 23))
    {
LABEL_33:
      int v19 = 1;
      goto LABEL_54;
    }
    if ((v11 & 0x80) != 0) {
      uint64_t v11 = *(void *)(v10 + 8);
    }
    uint64_t v21 = v7[8];
    if (v7 == &CoreML::Specification::_WeightParams_default_instance_ || (v11 ? (BOOL v22 = v21 == 0) : (BOOL v22 = 1), v22))
    {
      if ((v15 & 0x80) != 0) {
        uint64_t v15 = *(void *)(v14 + 8);
      }
      if (v21) {
        BOOL v23 = v15 == 0;
      }
      else {
        BOOL v23 = 1;
      }
      if (v23 || v7 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v19 = 5;
      }
      else {
        int v19 = 3;
      }
    }
    else
    {
      int v19 = 2;
    }
  }
LABEL_54:
  uint64_t v25 = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, 1uLL);
  *uint64_t v25 = v19;
  uint64_t v27 = (char *)(v25 + 1);
  long long __p = v25;
  v424 = &v25[v26];
  v423 = (char *)(v25 + 1);
  uint64_t v28 = (uint64_t *)a1[3];
  if (!v28) {
    uint64_t v28 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v29 = v28[5];
  if (*(char *)(v29 + 23) < 0) {
    uint64_t v30 = *(void *)(v29 + 8);
  }
  else {
    uint64_t v30 = *(unsigned __int8 *)(v29 + 23);
  }
  uint64_t v31 = v28[6];
  uint64_t v32 = *(unsigned __int8 *)(v31 + 23);
  if (*(char *)(v31 + 23) < 0) {
    uint64_t v33 = *(void *)(v31 + 8);
  }
  else {
    uint64_t v33 = *(unsigned __int8 *)(v31 + 23);
  }
  int v34 = *((_DWORD *)v28 + 4);
  uint64_t v35 = v28[7];
  uint64_t v36 = *(unsigned __int8 *)(v35 + 23);
  if (*(char *)(v35 + 23) < 0) {
    uint64_t v37 = *(void *)(v35 + 8);
  }
  else {
    uint64_t v37 = *(unsigned __int8 *)(v35 + 23);
  }
  if (v34 <= 0) {
    int v38 = 1;
  }
  else {
    int v38 = 2;
  }
  if (v30) {
    unsigned int v39 = v38;
  }
  else {
    unsigned int v39 = v34 > 0;
  }
  if (v33) {
    ++v39;
  }
  if (v37) {
    ++v39;
  }
  if (v39 > 1)
  {
    int v40 = 4;
    goto LABEL_107;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = 5;
  }
  if (v34 <= 0 && v39 != 0)
  {
    if ((*(unsigned char *)(v29 + 23) & 0x80) != 0)
    {
      if (*(void *)(v29 + 8)) {
        goto LABEL_86;
      }
    }
    else if (*(unsigned char *)(v29 + 23))
    {
LABEL_86:
      int v40 = 1;
      goto LABEL_107;
    }
    if ((v32 & 0x80) != 0) {
      uint64_t v32 = *(void *)(v31 + 8);
    }
    uint64_t v42 = v28[8];
    if (v28 == &CoreML::Specification::_WeightParams_default_instance_ || (v32 ? (BOOL v43 = v42 == 0) : (BOOL v43 = 1), v43))
    {
      if ((v36 & 0x80) != 0) {
        uint64_t v36 = *(void *)(v35 + 8);
      }
      if (v42) {
        BOOL v44 = v36 == 0;
      }
      else {
        BOOL v44 = 1;
      }
      if (v44 || v28 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v40 = 5;
      }
      else {
        int v40 = 3;
      }
    }
    else
    {
      int v40 = 2;
    }
  }
LABEL_107:
  if (v27 >= (char *)v424)
  {
    int v47 = (char *)__p;
    uint64_t v48 = (v27 - (unsigned char *)__p) >> 2;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v50 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v49) {
      unint64_t v49 = v50 >> 1;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      uint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v51);
      int v47 = (char *)__p;
      uint64_t v27 = v423;
    }
    else
    {
      uint64_t v52 = 0;
    }
    int v53 = (int *)&v52[4 * v48];
    uint64_t v54 = &v52[4 * v51];
    *int v53 = v40;
    uint64_t v46 = v53 + 1;
    while (v27 != v47)
    {
      int v55 = *((_DWORD *)v27 - 1);
      v27 -= 4;
      *--int v53 = v55;
    }
    long long __p = v53;
    v423 = (char *)v46;
    v424 = (int *)v54;
    if (v47) {
      operator delete(v47);
    }
  }
  else
  {
    v25[1] = v40;
    uint64_t v46 = v25 + 2;
  }
  v423 = (char *)v46;
  unint64_t v56 = (uint64_t *)a1[4];
  if (!v56) {
    unint64_t v56 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v57 = v56[5];
  if (*(char *)(v57 + 23) < 0) {
    uint64_t v58 = *(void *)(v57 + 8);
  }
  else {
    uint64_t v58 = *(unsigned __int8 *)(v57 + 23);
  }
  uint64_t v59 = v56[6];
  uint64_t v60 = *(unsigned __int8 *)(v59 + 23);
  if (*(char *)(v59 + 23) < 0) {
    uint64_t v61 = *(void *)(v59 + 8);
  }
  else {
    uint64_t v61 = *(unsigned __int8 *)(v59 + 23);
  }
  int v62 = *((_DWORD *)v56 + 4);
  uint64_t v63 = v56[7];
  uint64_t v64 = *(unsigned __int8 *)(v63 + 23);
  if (*(char *)(v63 + 23) < 0) {
    uint64_t v65 = *(void *)(v63 + 8);
  }
  else {
    uint64_t v65 = *(unsigned __int8 *)(v63 + 23);
  }
  if (v62 <= 0) {
    int v66 = 1;
  }
  else {
    int v66 = 2;
  }
  if (v58) {
    unsigned int v67 = v66;
  }
  else {
    unsigned int v67 = v62 > 0;
  }
  if (v61) {
    ++v67;
  }
  if (v65) {
    ++v67;
  }
  if (v67 > 1)
  {
    int v68 = 4;
    goto LABEL_176;
  }
  if (v67) {
    int v68 = 0;
  }
  else {
    int v68 = 5;
  }
  if (v62 <= 0 && v67 != 0)
  {
    if ((*(unsigned char *)(v57 + 23) & 0x80) != 0)
    {
      if (*(void *)(v57 + 8)) {
        goto LABEL_155;
      }
    }
    else if (*(unsigned char *)(v57 + 23))
    {
LABEL_155:
      int v68 = 1;
      goto LABEL_176;
    }
    if ((v60 & 0x80) != 0) {
      uint64_t v60 = *(void *)(v59 + 8);
    }
    uint64_t v70 = v56[8];
    if (v56 == &CoreML::Specification::_WeightParams_default_instance_ || (v60 ? (BOOL v71 = v70 == 0) : (BOOL v71 = 1), v71))
    {
      if ((v64 & 0x80) != 0) {
        uint64_t v64 = *(void *)(v63 + 8);
      }
      if (v70) {
        BOOL v72 = v64 == 0;
      }
      else {
        BOOL v72 = 1;
      }
      if (v72 || v56 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v68 = 5;
      }
      else {
        int v68 = 3;
      }
    }
    else
    {
      int v68 = 2;
    }
  }
LABEL_176:
  if (v46 >= v424)
  {
    unsigned int v75 = (int *)__p;
    uint64_t v76 = ((char *)v46 - (unsigned char *)__p) >> 2;
    unint64_t v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v78 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v77) {
      unint64_t v77 = v78 >> 1;
    }
    if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v79 = v77;
    }
    if (v79)
    {
      uint64_t v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v79);
      unsigned int v75 = (int *)__p;
      uint64_t v46 = (int *)v423;
    }
    else
    {
      uint64_t v80 = 0;
    }
    uint64_t v81 = (int *)&v80[4 * v76];
    uint64_t v82 = &v80[4 * v79];
    *uint64_t v81 = v68;
    int v74 = v81 + 1;
    while (v46 != v75)
    {
      int v83 = *--v46;
      *--uint64_t v81 = v83;
    }
    long long __p = v81;
    v423 = (char *)v74;
    v424 = (int *)v82;
    if (v75) {
      operator delete(v75);
    }
  }
  else
  {
    *uint64_t v46 = v68;
    int v74 = v46 + 1;
  }
  v423 = (char *)v74;
  uint64_t v84 = (uint64_t *)a1[5];
  if (!v84) {
    uint64_t v84 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v85 = v84[5];
  if (*(char *)(v85 + 23) < 0) {
    uint64_t v86 = *(void *)(v85 + 8);
  }
  else {
    uint64_t v86 = *(unsigned __int8 *)(v85 + 23);
  }
  uint64_t v87 = v84[6];
  uint64_t v88 = *(unsigned __int8 *)(v87 + 23);
  if (*(char *)(v87 + 23) < 0) {
    uint64_t v89 = *(void *)(v87 + 8);
  }
  else {
    uint64_t v89 = *(unsigned __int8 *)(v87 + 23);
  }
  int v90 = *((_DWORD *)v84 + 4);
  uint64_t v91 = v84[7];
  uint64_t v92 = *(unsigned __int8 *)(v91 + 23);
  if (*(char *)(v91 + 23) < 0) {
    uint64_t v93 = *(void *)(v91 + 8);
  }
  else {
    uint64_t v93 = *(unsigned __int8 *)(v91 + 23);
  }
  if (v90 <= 0) {
    int v94 = 1;
  }
  else {
    int v94 = 2;
  }
  if (v86) {
    unsigned int v95 = v94;
  }
  else {
    unsigned int v95 = v90 > 0;
  }
  if (v89) {
    ++v95;
  }
  if (v93) {
    ++v95;
  }
  if (v95 > 1)
  {
    int v96 = 4;
    goto LABEL_245;
  }
  if (v95) {
    int v96 = 0;
  }
  else {
    int v96 = 5;
  }
  if (v90 <= 0 && v95 != 0)
  {
    if ((*(unsigned char *)(v85 + 23) & 0x80) != 0)
    {
      if (*(void *)(v85 + 8)) {
        goto LABEL_224;
      }
    }
    else if (*(unsigned char *)(v85 + 23))
    {
LABEL_224:
      int v96 = 1;
      goto LABEL_245;
    }
    if ((v88 & 0x80) != 0) {
      uint64_t v88 = *(void *)(v87 + 8);
    }
    uint64_t v98 = v84[8];
    if (v84 == &CoreML::Specification::_WeightParams_default_instance_ || (v88 ? (BOOL v99 = v98 == 0) : (BOOL v99 = 1), v99))
    {
      if ((v92 & 0x80) != 0) {
        uint64_t v92 = *(void *)(v91 + 8);
      }
      if (v98) {
        BOOL v100 = v92 == 0;
      }
      else {
        BOOL v100 = 1;
      }
      if (v100 || v84 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v96 = 5;
      }
      else {
        int v96 = 3;
      }
    }
    else
    {
      int v96 = 2;
    }
  }
LABEL_245:
  if (v74 >= v424)
  {
    long long v103 = (int *)__p;
    uint64_t v104 = ((char *)v74 - (unsigned char *)__p) >> 2;
    unint64_t v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v106 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v105) {
      unint64_t v105 = v106 >> 1;
    }
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v107 = v105;
    }
    if (v107)
    {
      BOOL v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v107);
      long long v103 = (int *)__p;
      int v74 = (int *)v423;
    }
    else
    {
      BOOL v108 = 0;
    }
    BOOL v109 = (int *)&v108[4 * v104];
    uint64_t v110 = &v108[4 * v107];
    int *v109 = v96;
    uint64_t v102 = v109 + 1;
    while (v74 != v103)
    {
      int v111 = *--v74;
      *--BOOL v109 = v111;
    }
    long long __p = v109;
    v423 = (char *)v102;
    v424 = (int *)v110;
    if (v103) {
      operator delete(v103);
    }
  }
  else
  {
    int *v74 = v96;
    uint64_t v102 = v74 + 1;
  }
  v423 = (char *)v102;
  int v112 = (uint64_t *)a1[6];
  if (!v112) {
    int v112 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v113 = v112[5];
  if (*(char *)(v113 + 23) < 0) {
    uint64_t v114 = *(void *)(v113 + 8);
  }
  else {
    uint64_t v114 = *(unsigned __int8 *)(v113 + 23);
  }
  uint64_t v115 = v112[6];
  uint64_t v116 = *(unsigned __int8 *)(v115 + 23);
  if (*(char *)(v115 + 23) < 0) {
    uint64_t v117 = *(void *)(v115 + 8);
  }
  else {
    uint64_t v117 = *(unsigned __int8 *)(v115 + 23);
  }
  int v118 = *((_DWORD *)v112 + 4);
  uint64_t v119 = v112[7];
  uint64_t v120 = *(unsigned __int8 *)(v119 + 23);
  if (*(char *)(v119 + 23) < 0) {
    uint64_t v121 = *(void *)(v119 + 8);
  }
  else {
    uint64_t v121 = *(unsigned __int8 *)(v119 + 23);
  }
  if (v118 <= 0) {
    int v122 = 1;
  }
  else {
    int v122 = 2;
  }
  if (v114) {
    unsigned int v123 = v122;
  }
  else {
    unsigned int v123 = v118 > 0;
  }
  if (v117) {
    ++v123;
  }
  if (v121) {
    ++v123;
  }
  if (v123 > 1)
  {
    int v124 = 4;
    goto LABEL_314;
  }
  if (v123) {
    int v124 = 0;
  }
  else {
    int v124 = 5;
  }
  if (v118 <= 0 && v123 != 0)
  {
    if ((*(unsigned char *)(v113 + 23) & 0x80) != 0)
    {
      if (*(void *)(v113 + 8)) {
        goto LABEL_293;
      }
    }
    else if (*(unsigned char *)(v113 + 23))
    {
LABEL_293:
      int v124 = 1;
      goto LABEL_314;
    }
    if ((v116 & 0x80) != 0) {
      uint64_t v116 = *(void *)(v115 + 8);
    }
    uint64_t v126 = v112[8];
    if (v112 == &CoreML::Specification::_WeightParams_default_instance_
      || (v116 ? (BOOL v127 = v126 == 0) : (BOOL v127 = 1), v127))
    {
      if ((v120 & 0x80) != 0) {
        uint64_t v120 = *(void *)(v119 + 8);
      }
      if (v126) {
        BOOL v128 = v120 == 0;
      }
      else {
        BOOL v128 = 1;
      }
      if (v128 || v112 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v124 = 5;
      }
      else {
        int v124 = 3;
      }
    }
    else
    {
      int v124 = 2;
    }
  }
LABEL_314:
  if (v102 >= v424)
  {
    uint64_t v131 = (int *)__p;
    uint64_t v132 = ((char *)v102 - (unsigned char *)__p) >> 2;
    unint64_t v133 = v132 + 1;
    if ((unint64_t)(v132 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v134 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v133) {
      unint64_t v133 = v134 >> 1;
    }
    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v135 = v133;
    }
    if (v135)
    {
      uint64_t v136 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v135);
      uint64_t v131 = (int *)__p;
      uint64_t v102 = (int *)v423;
    }
    else
    {
      uint64_t v136 = 0;
    }
    BOOL v137 = (int *)&v136[4 * v132];
    BOOL v138 = &v136[4 * v135];
    *BOOL v137 = v124;
    uint64_t v130 = v137 + 1;
    while (v102 != v131)
    {
      int v139 = *--v102;
      *--BOOL v137 = v139;
    }
    long long __p = v137;
    v423 = (char *)v130;
    v424 = (int *)v138;
    if (v131) {
      operator delete(v131);
    }
  }
  else
  {
    *uint64_t v102 = v124;
    uint64_t v130 = v102 + 1;
  }
  v423 = (char *)v130;
  size_t v140 = (uint64_t *)a1[7];
  if (!v140) {
    size_t v140 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v141 = v140[5];
  if (*(char *)(v141 + 23) < 0) {
    uint64_t v142 = *(void *)(v141 + 8);
  }
  else {
    uint64_t v142 = *(unsigned __int8 *)(v141 + 23);
  }
  uint64_t v143 = v140[6];
  uint64_t v144 = *(unsigned __int8 *)(v143 + 23);
  if (*(char *)(v143 + 23) < 0) {
    uint64_t v145 = *(void *)(v143 + 8);
  }
  else {
    uint64_t v145 = *(unsigned __int8 *)(v143 + 23);
  }
  int v146 = *((_DWORD *)v140 + 4);
  uint64_t v147 = v140[7];
  uint64_t v148 = *(unsigned __int8 *)(v147 + 23);
  if (*(char *)(v147 + 23) < 0) {
    uint64_t v149 = *(void *)(v147 + 8);
  }
  else {
    uint64_t v149 = *(unsigned __int8 *)(v147 + 23);
  }
  if (v146 <= 0) {
    int v150 = 1;
  }
  else {
    int v150 = 2;
  }
  if (v142) {
    unsigned int v151 = v150;
  }
  else {
    unsigned int v151 = v146 > 0;
  }
  if (v145) {
    ++v151;
  }
  if (v149) {
    ++v151;
  }
  if (v151 > 1)
  {
    int v152 = 4;
    goto LABEL_383;
  }
  if (v151) {
    int v152 = 0;
  }
  else {
    int v152 = 5;
  }
  if (v146 <= 0 && v151 != 0)
  {
    if ((*(unsigned char *)(v141 + 23) & 0x80) != 0)
    {
      if (*(void *)(v141 + 8)) {
        goto LABEL_362;
      }
    }
    else if (*(unsigned char *)(v141 + 23))
    {
LABEL_362:
      int v152 = 1;
      goto LABEL_383;
    }
    if ((v144 & 0x80) != 0) {
      uint64_t v144 = *(void *)(v143 + 8);
    }
    uint64_t v154 = v140[8];
    if (v140 == &CoreML::Specification::_WeightParams_default_instance_
      || (v144 ? (BOOL v155 = v154 == 0) : (BOOL v155 = 1), v155))
    {
      if ((v148 & 0x80) != 0) {
        uint64_t v148 = *(void *)(v147 + 8);
      }
      if (v154) {
        BOOL v156 = v148 == 0;
      }
      else {
        BOOL v156 = 1;
      }
      if (v156 || v140 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v152 = 5;
      }
      else {
        int v152 = 3;
      }
    }
    else
    {
      int v152 = 2;
    }
  }
LABEL_383:
  if (v130 >= v424)
  {
    uint64_t v159 = (int *)__p;
    uint64_t v160 = ((char *)v130 - (unsigned char *)__p) >> 2;
    unint64_t v161 = v160 + 1;
    if ((unint64_t)(v160 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v162 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v161) {
      unint64_t v161 = v162 >> 1;
    }
    if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v163 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v163 = v161;
    }
    if (v163)
    {
      v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v163);
      uint64_t v159 = (int *)__p;
      uint64_t v130 = (int *)v423;
    }
    else
    {
      v164 = 0;
    }
    uint64_t v165 = (int *)&v164[4 * v160];
    BOOL v166 = &v164[4 * v163];
    *uint64_t v165 = v152;
    uint64_t v158 = v165 + 1;
    while (v130 != v159)
    {
      int v167 = *--v130;
      *--uint64_t v165 = v167;
    }
    long long __p = v165;
    v423 = (char *)v158;
    v424 = (int *)v166;
    if (v159) {
      operator delete(v159);
    }
  }
  else
  {
    int *v130 = v152;
    uint64_t v158 = v130 + 1;
  }
  v423 = (char *)v158;
  std::string::size_type v168 = (uint64_t *)a1[8];
  if (!v168) {
    std::string::size_type v168 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v169 = v168[5];
  if (*(char *)(v169 + 23) < 0) {
    uint64_t v170 = *(void *)(v169 + 8);
  }
  else {
    uint64_t v170 = *(unsigned __int8 *)(v169 + 23);
  }
  uint64_t v171 = v168[6];
  uint64_t v172 = *(unsigned __int8 *)(v171 + 23);
  if (*(char *)(v171 + 23) < 0) {
    uint64_t v173 = *(void *)(v171 + 8);
  }
  else {
    uint64_t v173 = *(unsigned __int8 *)(v171 + 23);
  }
  int v174 = *((_DWORD *)v168 + 4);
  uint64_t v175 = v168[7];
  uint64_t v176 = *(unsigned __int8 *)(v175 + 23);
  if (*(char *)(v175 + 23) < 0) {
    uint64_t v177 = *(void *)(v175 + 8);
  }
  else {
    uint64_t v177 = *(unsigned __int8 *)(v175 + 23);
  }
  if (v174 <= 0) {
    int v178 = 1;
  }
  else {
    int v178 = 2;
  }
  if (v170) {
    unsigned int v179 = v178;
  }
  else {
    unsigned int v179 = v174 > 0;
  }
  if (v173) {
    ++v179;
  }
  if (v177) {
    ++v179;
  }
  if (v179 > 1)
  {
    int v180 = 4;
    goto LABEL_452;
  }
  if (v179) {
    int v180 = 0;
  }
  else {
    int v180 = 5;
  }
  if (v174 <= 0 && v179 != 0)
  {
    if ((*(unsigned char *)(v169 + 23) & 0x80) != 0)
    {
      if (*(void *)(v169 + 8)) {
        goto LABEL_431;
      }
    }
    else if (*(unsigned char *)(v169 + 23))
    {
LABEL_431:
      int v180 = 1;
      goto LABEL_452;
    }
    if ((v172 & 0x80) != 0) {
      uint64_t v172 = *(void *)(v171 + 8);
    }
    uint64_t v182 = v168[8];
    if (v168 == &CoreML::Specification::_WeightParams_default_instance_
      || (v172 ? (BOOL v183 = v182 == 0) : (BOOL v183 = 1), v183))
    {
      if ((v176 & 0x80) != 0) {
        uint64_t v176 = *(void *)(v175 + 8);
      }
      if (v182) {
        BOOL v184 = v176 == 0;
      }
      else {
        BOOL v184 = 1;
      }
      if (v184 || v168 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v180 = 5;
      }
      else {
        int v180 = 3;
      }
    }
    else
    {
      int v180 = 2;
    }
  }
LABEL_452:
  if (v158 >= v424)
  {
    uint64_t v187 = (int *)__p;
    uint64_t v188 = ((char *)v158 - (unsigned char *)__p) >> 2;
    unint64_t v189 = v188 + 1;
    if ((unint64_t)(v188 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v190 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v189) {
      unint64_t v189 = v190 >> 1;
    }
    if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v191 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v191 = v189;
    }
    if (v191)
    {
      int v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v191);
      uint64_t v187 = (int *)__p;
      uint64_t v158 = (int *)v423;
    }
    else
    {
      int v192 = 0;
    }
    v193 = (int *)&v192[4 * v188];
    uint64_t v194 = &v192[4 * v191];
    int *v193 = v180;
    int v186 = v193 + 1;
    while (v158 != v187)
    {
      int v195 = *--v158;
      *--v193 = v195;
    }
    long long __p = v193;
    v423 = (char *)v186;
    v424 = (int *)v194;
    if (v187) {
      operator delete(v187);
    }
  }
  else
  {
    *uint64_t v158 = v180;
    int v186 = v158 + 1;
  }
  v423 = (char *)v186;
  BOOL v196 = (uint64_t *)a1[9];
  if (!v196) {
    BOOL v196 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v197 = v196[5];
  if (*(char *)(v197 + 23) < 0) {
    uint64_t v198 = *(void *)(v197 + 8);
  }
  else {
    uint64_t v198 = *(unsigned __int8 *)(v197 + 23);
  }
  uint64_t v199 = v196[6];
  uint64_t v200 = *(unsigned __int8 *)(v199 + 23);
  if (*(char *)(v199 + 23) < 0) {
    uint64_t v201 = *(void *)(v199 + 8);
  }
  else {
    uint64_t v201 = *(unsigned __int8 *)(v199 + 23);
  }
  int v202 = *((_DWORD *)v196 + 4);
  uint64_t v203 = v196[7];
  uint64_t v204 = *(unsigned __int8 *)(v203 + 23);
  if (*(char *)(v203 + 23) < 0) {
    uint64_t v205 = *(void *)(v203 + 8);
  }
  else {
    uint64_t v205 = *(unsigned __int8 *)(v203 + 23);
  }
  if (v202 <= 0) {
    int v206 = 1;
  }
  else {
    int v206 = 2;
  }
  if (v198) {
    unsigned int v207 = v206;
  }
  else {
    unsigned int v207 = v202 > 0;
  }
  if (v201) {
    ++v207;
  }
  if (v205) {
    ++v207;
  }
  if (v207 > 1)
  {
    int v208 = 4;
    goto LABEL_521;
  }
  if (v207) {
    int v208 = 0;
  }
  else {
    int v208 = 5;
  }
  if (v202 <= 0 && v207 != 0)
  {
    if ((*(unsigned char *)(v197 + 23) & 0x80) != 0)
    {
      if (*(void *)(v197 + 8)) {
        goto LABEL_500;
      }
    }
    else if (*(unsigned char *)(v197 + 23))
    {
LABEL_500:
      int v208 = 1;
      goto LABEL_521;
    }
    if ((v200 & 0x80) != 0) {
      uint64_t v200 = *(void *)(v199 + 8);
    }
    uint64_t v210 = v196[8];
    if (v196 == &CoreML::Specification::_WeightParams_default_instance_
      || (v200 ? (BOOL v211 = v210 == 0) : (BOOL v211 = 1), v211))
    {
      if ((v204 & 0x80) != 0) {
        uint64_t v204 = *(void *)(v203 + 8);
      }
      if (v210) {
        BOOL v212 = v204 == 0;
      }
      else {
        BOOL v212 = 1;
      }
      if (v212 || v196 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v208 = 5;
      }
      else {
        int v208 = 3;
      }
    }
    else
    {
      int v208 = 2;
    }
  }
LABEL_521:
  if (v186 >= v424)
  {
    int v215 = (int *)__p;
    uint64_t v216 = ((char *)v186 - (unsigned char *)__p) >> 2;
    unint64_t v217 = v216 + 1;
    if ((unint64_t)(v216 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v218 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v217) {
      unint64_t v217 = v218 >> 1;
    }
    if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v219 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v219 = v217;
    }
    if (v219)
    {
      unsigned int v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v219);
      int v215 = (int *)__p;
      int v186 = (int *)v423;
    }
    else
    {
      unsigned int v220 = 0;
    }
    int v221 = (int *)&v220[4 * v216];
    v222 = &v220[4 * v219];
    *int v221 = v208;
    uint64_t v214 = v221 + 1;
    while (v186 != v215)
    {
      int v223 = *--v186;
      *--int v221 = v223;
    }
    long long __p = v221;
    v423 = (char *)v214;
    v424 = (int *)v222;
    if (v215) {
      operator delete(v215);
    }
  }
  else
  {
    *int v186 = v208;
    uint64_t v214 = v186 + 1;
  }
  v423 = (char *)v214;
  if (v6)
  {
    BOOL v224 = (uint64_t *)a1[10];
    if (!v224) {
      BOOL v224 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v225 = v224[5];
    if (*(char *)(v225 + 23) < 0) {
      uint64_t v226 = *(void *)(v225 + 8);
    }
    else {
      uint64_t v226 = *(unsigned __int8 *)(v225 + 23);
    }
    uint64_t v227 = v224[6];
    uint64_t v228 = *(unsigned __int8 *)(v227 + 23);
    if (*(char *)(v227 + 23) < 0) {
      uint64_t v229 = *(void *)(v227 + 8);
    }
    else {
      uint64_t v229 = *(unsigned __int8 *)(v227 + 23);
    }
    int v230 = *((_DWORD *)v224 + 4);
    uint64_t v231 = v224[7];
    uint64_t v232 = *(unsigned __int8 *)(v231 + 23);
    if (*(char *)(v231 + 23) < 0) {
      uint64_t v233 = *(void *)(v231 + 8);
    }
    else {
      uint64_t v233 = *(unsigned __int8 *)(v231 + 23);
    }
    if (v230 <= 0) {
      int v234 = 1;
    }
    else {
      int v234 = 2;
    }
    if (v226) {
      unsigned int v235 = v234;
    }
    else {
      unsigned int v235 = v230 > 0;
    }
    if (v229) {
      ++v235;
    }
    if (v233) {
      ++v235;
    }
    if (v235 > 1)
    {
      int v236 = 4;
      goto LABEL_591;
    }
    if (v235) {
      int v236 = 0;
    }
    else {
      int v236 = 5;
    }
    if (v230 <= 0 && v235 != 0)
    {
      if ((*(unsigned char *)(v225 + 23) & 0x80) != 0)
      {
        if (*(void *)(v225 + 8)) {
          goto LABEL_570;
        }
      }
      else if (*(unsigned char *)(v225 + 23))
      {
LABEL_570:
        int v236 = 1;
        goto LABEL_591;
      }
      if ((v228 & 0x80) != 0) {
        uint64_t v228 = *(void *)(v227 + 8);
      }
      uint64_t v238 = v224[8];
      if (v224 == &CoreML::Specification::_WeightParams_default_instance_
        || (v228 ? (BOOL v239 = v238 == 0) : (BOOL v239 = 1), v239))
      {
        if ((v232 & 0x80) != 0) {
          uint64_t v232 = *(void *)(v231 + 8);
        }
        if (v238) {
          BOOL v240 = v232 == 0;
        }
        else {
          BOOL v240 = 1;
        }
        if (v240 || v224 == &CoreML::Specification::_WeightParams_default_instance_) {
          int v236 = 5;
        }
        else {
          int v236 = 3;
        }
      }
      else
      {
        int v236 = 2;
      }
    }
LABEL_591:
    if (v214 >= v424)
    {
      uint64_t v243 = (int *)__p;
      uint64_t v244 = ((char *)v214 - (unsigned char *)__p) >> 2;
      unint64_t v245 = v244 + 1;
      if ((unint64_t)(v244 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v246 = (char *)v424 - (unsigned char *)__p;
      if (((char *)v424 - (unsigned char *)__p) >> 1 > v245) {
        unint64_t v245 = v246 >> 1;
      }
      if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v247 = v245;
      }
      if (v247)
      {
        int v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v247);
        uint64_t v243 = (int *)__p;
        uint64_t v214 = (int *)v423;
      }
      else
      {
        int v248 = 0;
      }
      unsigned int v249 = (int *)&v248[4 * v244];
      int v250 = &v248[4 * v247];
      *unsigned int v249 = v236;
      uint64_t v242 = v249 + 1;
      while (v214 != v243)
      {
        int v251 = *--v214;
        *--unsigned int v249 = v251;
      }
      long long __p = v249;
      v423 = (char *)v242;
      v424 = (int *)v250;
      if (v243) {
        operator delete(v243);
      }
    }
    else
    {
      *uint64_t v214 = v236;
      uint64_t v242 = v214 + 1;
    }
    v423 = (char *)v242;
    uint64_t v252 = (uint64_t *)a1[11];
    if (!v252) {
      uint64_t v252 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v253 = v252[5];
    if (*(char *)(v253 + 23) < 0) {
      uint64_t v254 = *(void *)(v253 + 8);
    }
    else {
      uint64_t v254 = *(unsigned __int8 *)(v253 + 23);
    }
    uint64_t v255 = v252[6];
    uint64_t v256 = *(unsigned __int8 *)(v255 + 23);
    if (*(char *)(v255 + 23) < 0) {
      uint64_t v257 = *(void *)(v255 + 8);
    }
    else {
      uint64_t v257 = *(unsigned __int8 *)(v255 + 23);
    }
    int v258 = *((_DWORD *)v252 + 4);
    uint64_t v259 = v252[7];
    uint64_t v260 = *(unsigned __int8 *)(v259 + 23);
    if (*(char *)(v259 + 23) < 0) {
      uint64_t v261 = *(void *)(v259 + 8);
    }
    else {
      uint64_t v261 = *(unsigned __int8 *)(v259 + 23);
    }
    if (v258 <= 0) {
      int v262 = 1;
    }
    else {
      int v262 = 2;
    }
    if (v254) {
      unsigned int v263 = v262;
    }
    else {
      unsigned int v263 = v258 > 0;
    }
    if (v257) {
      ++v263;
    }
    if (v261) {
      ++v263;
    }
    if (v263 > 1)
    {
      int v264 = 4;
      goto LABEL_660;
    }
    if (v263) {
      int v264 = 0;
    }
    else {
      int v264 = 5;
    }
    if (v258 <= 0 && v263 != 0)
    {
      if ((*(unsigned char *)(v253 + 23) & 0x80) != 0)
      {
        if (*(void *)(v253 + 8)) {
          goto LABEL_639;
        }
      }
      else if (*(unsigned char *)(v253 + 23))
      {
LABEL_639:
        int v264 = 1;
        goto LABEL_660;
      }
      if ((v256 & 0x80) != 0) {
        uint64_t v256 = *(void *)(v255 + 8);
      }
      uint64_t v266 = v252[8];
      if (v252 == &CoreML::Specification::_WeightParams_default_instance_
        || (v256 ? (BOOL v267 = v266 == 0) : (BOOL v267 = 1), v267))
      {
        if ((v260 & 0x80) != 0) {
          uint64_t v260 = *(void *)(v259 + 8);
        }
        if (v266) {
          BOOL v268 = v260 == 0;
        }
        else {
          BOOL v268 = 1;
        }
        if (v268 || v252 == &CoreML::Specification::_WeightParams_default_instance_) {
          int v264 = 5;
        }
        else {
          int v264 = 3;
        }
      }
      else
      {
        int v264 = 2;
      }
    }
LABEL_660:
    if (v242 >= v424)
    {
      v271 = (int *)__p;
      uint64_t v272 = ((char *)v242 - (unsigned char *)__p) >> 2;
      unint64_t v273 = v272 + 1;
      if ((unint64_t)(v272 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v274 = (char *)v424 - (unsigned char *)__p;
      if (((char *)v424 - (unsigned char *)__p) >> 1 > v273) {
        unint64_t v273 = v274 >> 1;
      }
      if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v275 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v275 = v273;
      }
      if (v275)
      {
        v276 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v275);
        v271 = (int *)__p;
        uint64_t v242 = (int *)v423;
      }
      else
      {
        v276 = 0;
      }
      uint64_t v277 = (int *)&v276[4 * v272];
      uint64_t v278 = &v276[4 * v275];
      *uint64_t v277 = v264;
      uint64_t v270 = v277 + 1;
      while (v242 != v271)
      {
        int v279 = *--v242;
        *--uint64_t v277 = v279;
      }
      long long __p = v277;
      v423 = (char *)v270;
      v424 = (int *)v278;
      if (v271) {
        operator delete(v271);
      }
    }
    else
    {
      *uint64_t v242 = v264;
      uint64_t v270 = v242 + 1;
    }
    v423 = (char *)v270;
    uint64_t v280 = (uint64_t *)a1[12];
    if (!v280) {
      uint64_t v280 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v281 = v280[5];
    if (*(char *)(v281 + 23) < 0) {
      uint64_t v282 = *(void *)(v281 + 8);
    }
    else {
      uint64_t v282 = *(unsigned __int8 *)(v281 + 23);
    }
    uint64_t v283 = v280[6];
    uint64_t v284 = *(unsigned __int8 *)(v283 + 23);
    if (*(char *)(v283 + 23) < 0) {
      uint64_t v285 = *(void *)(v283 + 8);
    }
    else {
      uint64_t v285 = *(unsigned __int8 *)(v283 + 23);
    }
    int v286 = *((_DWORD *)v280 + 4);
    uint64_t v287 = v280[7];
    uint64_t v288 = *(unsigned __int8 *)(v287 + 23);
    if (*(char *)(v287 + 23) < 0) {
      uint64_t v289 = *(void *)(v287 + 8);
    }
    else {
      uint64_t v289 = *(unsigned __int8 *)(v287 + 23);
    }
    if (v286 <= 0) {
      int v290 = 1;
    }
    else {
      int v290 = 2;
    }
    if (v282) {
      unsigned int v291 = v290;
    }
    else {
      unsigned int v291 = v286 > 0;
    }
    if (v285) {
      ++v291;
    }
    if (v289) {
      ++v291;
    }
    if (v291 > 1)
    {
      int v292 = 4;
      goto LABEL_729;
    }
    if (v291) {
      int v292 = 0;
    }
    else {
      int v292 = 5;
    }
    if (v286 <= 0 && v291 != 0)
    {
      if ((*(unsigned char *)(v281 + 23) & 0x80) != 0)
      {
        if (*(void *)(v281 + 8)) {
          goto LABEL_708;
        }
      }
      else if (*(unsigned char *)(v281 + 23))
      {
LABEL_708:
        int v292 = 1;
        goto LABEL_729;
      }
      if ((v284 & 0x80) != 0) {
        uint64_t v284 = *(void *)(v283 + 8);
      }
      uint64_t v294 = v280[8];
      if (v280 == &CoreML::Specification::_WeightParams_default_instance_
        || (v284 ? (BOOL v295 = v294 == 0) : (BOOL v295 = 1), v295))
      {
        if ((v288 & 0x80) != 0) {
          uint64_t v288 = *(void *)(v287 + 8);
        }
        if (v294) {
          BOOL v296 = v288 == 0;
        }
        else {
          BOOL v296 = 1;
        }
        if (v296 || v280 == &CoreML::Specification::_WeightParams_default_instance_) {
          int v292 = 5;
        }
        else {
          int v292 = 3;
        }
      }
      else
      {
        int v292 = 2;
      }
    }
LABEL_729:
    if (v270 >= v424)
    {
      v299 = (int *)__p;
      uint64_t v300 = ((char *)v270 - (unsigned char *)__p) >> 2;
      unint64_t v301 = v300 + 1;
      if ((unint64_t)(v300 + 1) >> 62) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v302 = (char *)v424 - (unsigned char *)__p;
      if (((char *)v424 - (unsigned char *)__p) >> 1 > v301) {
        unint64_t v301 = v302 >> 1;
      }
      if ((unint64_t)v302 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v303 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v303 = v301;
      }
      if (v303)
      {
        v304 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v303);
        v299 = (int *)__p;
        uint64_t v270 = (int *)v423;
      }
      else
      {
        v304 = 0;
      }
      v305 = (int *)&v304[4 * v300];
      v306 = &v304[4 * v303];
      int *v305 = v292;
      BOOL v298 = v305 + 1;
      while (v270 != v299)
      {
        int v307 = *--v270;
        *--v305 = v307;
      }
      long long __p = v305;
      v423 = (char *)v298;
      v424 = (int *)v306;
      if (v299) {
        operator delete(v299);
      }
    }
    else
    {
      *uint64_t v270 = v292;
      BOOL v298 = v270 + 1;
    }
    v423 = (char *)v298;
    char v308 = (uint64_t *)a1[13];
    if (!v308) {
      char v308 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    uint64_t v309 = v308[5];
    if (*(char *)(v309 + 23) < 0) {
      uint64_t v310 = *(void *)(v309 + 8);
    }
    else {
      uint64_t v310 = *(unsigned __int8 *)(v309 + 23);
    }
    uint64_t v311 = v308[6];
    uint64_t v312 = *(unsigned __int8 *)(v311 + 23);
    if (*(char *)(v311 + 23) < 0) {
      uint64_t v313 = *(void *)(v311 + 8);
    }
    else {
      uint64_t v313 = *(unsigned __int8 *)(v311 + 23);
    }
    int v314 = *((_DWORD *)v308 + 4);
    uint64_t v315 = v308[7];
    uint64_t v316 = *(unsigned __int8 *)(v315 + 23);
    if (*(char *)(v315 + 23) < 0) {
      uint64_t v317 = *(void *)(v315 + 8);
    }
    else {
      uint64_t v317 = *(unsigned __int8 *)(v315 + 23);
    }
    if (v314 <= 0) {
      int v318 = 1;
    }
    else {
      int v318 = 2;
    }
    if (v310) {
      unsigned int v319 = v318;
    }
    else {
      unsigned int v319 = v314 > 0;
    }
    if (v313) {
      ++v319;
    }
    if (v317) {
      ++v319;
    }
    if (v319 > 1)
    {
      int v320 = 4;
LABEL_798:
      if (v298 >= v424)
      {
        v326 = (int *)__p;
        uint64_t v327 = ((char *)v298 - (unsigned char *)__p) >> 2;
        unint64_t v328 = v327 + 1;
        if ((unint64_t)(v327 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v329 = (char *)v424 - (unsigned char *)__p;
        if (((char *)v424 - (unsigned char *)__p) >> 1 > v328) {
          unint64_t v328 = v329 >> 1;
        }
        if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v330 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v330 = v328;
        }
        if (v330)
        {
          v331 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v330);
          v326 = (int *)__p;
          BOOL v298 = (int *)v423;
        }
        else
        {
          v331 = 0;
        }
        v332 = (int *)&v331[4 * v327];
        v333 = &v331[4 * v330];
        int *v332 = v320;
        uint64_t v214 = v332 + 1;
        while (v298 != v326)
        {
          int v334 = *--v298;
          *--v332 = v334;
        }
        long long __p = v332;
        v423 = (char *)v214;
        v424 = (int *)v333;
        if (v326) {
          operator delete(v326);
        }
      }
      else
      {
        *BOOL v298 = v320;
        uint64_t v214 = v298 + 1;
      }
      v423 = (char *)v214;
      goto LABEL_815;
    }
    if (v319) {
      int v320 = 0;
    }
    else {
      int v320 = 5;
    }
    if (v314 > 0 || v319 == 0) {
      goto LABEL_798;
    }
    if ((*(unsigned char *)(v309 + 23) & 0x80) != 0)
    {
      if (*(void *)(v309 + 8)) {
        goto LABEL_777;
      }
    }
    else if (*(unsigned char *)(v309 + 23))
    {
LABEL_777:
      int v320 = 1;
      goto LABEL_798;
    }
    if ((v312 & 0x80) != 0) {
      uint64_t v312 = *(void *)(v311 + 8);
    }
    uint64_t v322 = v308[8];
    if (v308 == &CoreML::Specification::_WeightParams_default_instance_
      || (v312 ? (BOOL v323 = v322 == 0) : (BOOL v323 = 1), v323))
    {
      if ((v316 & 0x80) != 0) {
        uint64_t v316 = *(void *)(v315 + 8);
      }
      if (v322) {
        BOOL v324 = v316 == 0;
      }
      else {
        BOOL v324 = 1;
      }
      if (v324 || v308 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v320 = 5;
      }
      else {
        int v320 = 3;
      }
    }
    else
    {
      int v320 = 2;
    }
    goto LABEL_798;
  }
LABEL_815:
  if (!v5) {
    goto LABEL_1020;
  }
  v335 = (uint64_t *)a1[14];
  if (!v335) {
    v335 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v336 = v335[5];
  if (*(char *)(v336 + 23) < 0) {
    uint64_t v337 = *(void *)(v336 + 8);
  }
  else {
    uint64_t v337 = *(unsigned __int8 *)(v336 + 23);
  }
  uint64_t v338 = v335[6];
  uint64_t v339 = *(unsigned __int8 *)(v338 + 23);
  if (*(char *)(v338 + 23) < 0) {
    uint64_t v340 = *(void *)(v338 + 8);
  }
  else {
    uint64_t v340 = *(unsigned __int8 *)(v338 + 23);
  }
  int v341 = *((_DWORD *)v335 + 4);
  uint64_t v342 = v335[7];
  uint64_t v343 = *(unsigned __int8 *)(v342 + 23);
  if (*(char *)(v342 + 23) < 0) {
    uint64_t v344 = *(void *)(v342 + 8);
  }
  else {
    uint64_t v344 = *(unsigned __int8 *)(v342 + 23);
  }
  if (v341 <= 0) {
    int v345 = 1;
  }
  else {
    int v345 = 2;
  }
  if (v337) {
    unsigned int v346 = v345;
  }
  else {
    unsigned int v346 = v341 > 0;
  }
  if (v340) {
    ++v346;
  }
  if (v344) {
    ++v346;
  }
  if (v346 > 1)
  {
    int v347 = 4;
    goto LABEL_865;
  }
  if (v346) {
    int v347 = 0;
  }
  else {
    int v347 = 5;
  }
  if (v341 <= 0 && v346)
  {
    if ((*(unsigned char *)(v336 + 23) & 0x80) != 0)
    {
      if (*(void *)(v336 + 8)) {
        goto LABEL_846;
      }
    }
    else if (*(unsigned char *)(v336 + 23))
    {
LABEL_846:
      int v347 = 1;
      goto LABEL_865;
    }
    if ((v339 & 0x80) != 0) {
      uint64_t v339 = *(void *)(v338 + 8);
    }
    uint64_t v348 = v335[8];
    if (v335 != &CoreML::Specification::_WeightParams_default_instance_ && v339 && v348)
    {
      int v347 = 2;
    }
    else
    {
      if ((v343 & 0x80) != 0) {
        uint64_t v343 = *(void *)(v342 + 8);
      }
      if (v348) {
        BOOL v349 = v343 == 0;
      }
      else {
        BOOL v349 = 1;
      }
      if (v349 || v335 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v347 = 5;
      }
      else {
        int v347 = 3;
      }
    }
  }
LABEL_865:
  if (v214 >= v424)
  {
    v352 = (int *)__p;
    uint64_t v353 = ((char *)v214 - (unsigned char *)__p) >> 2;
    unint64_t v354 = v353 + 1;
    if ((unint64_t)(v353 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v355 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v354) {
      unint64_t v354 = v355 >> 1;
    }
    if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v356 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v356 = v354;
    }
    if (v356)
    {
      v357 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v356);
      v352 = (int *)__p;
      uint64_t v214 = (int *)v423;
    }
    else
    {
      v357 = 0;
    }
    v358 = (int *)&v357[4 * v353];
    v359 = &v357[4 * v356];
    int *v358 = v347;
    v351 = v358 + 1;
    while (v214 != v352)
    {
      int v360 = *--v214;
      *--v358 = v360;
    }
    long long __p = v358;
    v423 = (char *)v351;
    v424 = (int *)v359;
    if (v352) {
      operator delete(v352);
    }
  }
  else
  {
    *uint64_t v214 = v347;
    v351 = v214 + 1;
  }
  v423 = (char *)v351;
  v361 = (uint64_t *)a1[15];
  if (!v361) {
    v361 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v362 = v361[5];
  if (*(char *)(v362 + 23) < 0) {
    uint64_t v363 = *(void *)(v362 + 8);
  }
  else {
    uint64_t v363 = *(unsigned __int8 *)(v362 + 23);
  }
  uint64_t v364 = v361[6];
  uint64_t v365 = *(unsigned __int8 *)(v364 + 23);
  if (*(char *)(v364 + 23) < 0) {
    uint64_t v366 = *(void *)(v364 + 8);
  }
  else {
    uint64_t v366 = *(unsigned __int8 *)(v364 + 23);
  }
  int v367 = *((_DWORD *)v361 + 4);
  uint64_t v368 = v361[7];
  uint64_t v369 = *(unsigned __int8 *)(v368 + 23);
  if (*(char *)(v368 + 23) < 0) {
    uint64_t v370 = *(void *)(v368 + 8);
  }
  else {
    uint64_t v370 = *(unsigned __int8 *)(v368 + 23);
  }
  if (v367 <= 0) {
    int v371 = 1;
  }
  else {
    int v371 = 2;
  }
  if (v363) {
    unsigned int v372 = v371;
  }
  else {
    unsigned int v372 = v367 > 0;
  }
  if (v366) {
    ++v372;
  }
  if (v370) {
    ++v372;
  }
  if (v372 > 1)
  {
    int v373 = 4;
    goto LABEL_934;
  }
  if (v372) {
    int v373 = 0;
  }
  else {
    int v373 = 5;
  }
  if (v367 <= 0 && v372 != 0)
  {
    if ((*(unsigned char *)(v362 + 23) & 0x80) != 0)
    {
      if (*(void *)(v362 + 8)) {
        goto LABEL_913;
      }
    }
    else if (*(unsigned char *)(v362 + 23))
    {
LABEL_913:
      int v373 = 1;
      goto LABEL_934;
    }
    if ((v365 & 0x80) != 0) {
      uint64_t v365 = *(void *)(v364 + 8);
    }
    uint64_t v375 = v361[8];
    if (v361 == &CoreML::Specification::_WeightParams_default_instance_
      || (v365 ? (BOOL v376 = v375 == 0) : (BOOL v376 = 1), v376))
    {
      if ((v369 & 0x80) != 0) {
        uint64_t v369 = *(void *)(v368 + 8);
      }
      if (v375) {
        BOOL v377 = v369 == 0;
      }
      else {
        BOOL v377 = 1;
      }
      if (v377 || v361 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v373 = 5;
      }
      else {
        int v373 = 3;
      }
    }
    else
    {
      int v373 = 2;
    }
  }
LABEL_934:
  if (v351 >= v424)
  {
    v380 = (int *)__p;
    uint64_t v381 = ((char *)v351 - (unsigned char *)__p) >> 2;
    unint64_t v382 = v381 + 1;
    if ((unint64_t)(v381 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v383 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v382) {
      unint64_t v382 = v383 >> 1;
    }
    if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v384 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v384 = v382;
    }
    if (v384)
    {
      v385 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v384);
      v380 = (int *)__p;
      v351 = (int *)v423;
    }
    else
    {
      v385 = 0;
    }
    v386 = (int *)&v385[4 * v381];
    v387 = &v385[4 * v384];
    int *v386 = v373;
    v379 = v386 + 1;
    while (v351 != v380)
    {
      int v388 = *--v351;
      *--v386 = v388;
    }
    long long __p = v386;
    v423 = (char *)v379;
    v424 = (int *)v387;
    if (v380) {
      operator delete(v380);
    }
  }
  else
  {
    int *v351 = v373;
    v379 = v351 + 1;
  }
  v423 = (char *)v379;
  v389 = (uint64_t *)a1[16];
  if (!v389) {
    v389 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v390 = v389[5];
  if (*(char *)(v390 + 23) < 0) {
    uint64_t v391 = *(void *)(v390 + 8);
  }
  else {
    uint64_t v391 = *(unsigned __int8 *)(v390 + 23);
  }
  uint64_t v392 = v389[6];
  uint64_t v393 = *(unsigned __int8 *)(v392 + 23);
  if (*(char *)(v392 + 23) < 0) {
    uint64_t v394 = *(void *)(v392 + 8);
  }
  else {
    uint64_t v394 = *(unsigned __int8 *)(v392 + 23);
  }
  int v395 = *((_DWORD *)v389 + 4);
  uint64_t v396 = v389[7];
  uint64_t v397 = *(unsigned __int8 *)(v396 + 23);
  if (*(char *)(v396 + 23) < 0) {
    uint64_t v398 = *(void *)(v396 + 8);
  }
  else {
    uint64_t v398 = *(unsigned __int8 *)(v396 + 23);
  }
  if (v395 <= 0) {
    int v399 = 1;
  }
  else {
    int v399 = 2;
  }
  if (v391) {
    unsigned int v400 = v399;
  }
  else {
    unsigned int v400 = v395 > 0;
  }
  if (v394) {
    ++v400;
  }
  if (v398) {
    ++v400;
  }
  if (v400 <= 1)
  {
    if (v400) {
      int v401 = 0;
    }
    else {
      int v401 = 5;
    }
    if (v395 > 0 || v400 == 0) {
      goto LABEL_1003;
    }
    if ((*(unsigned char *)(v390 + 23) & 0x80) != 0)
    {
      if (*(void *)(v390 + 8)) {
        goto LABEL_982;
      }
    }
    else if (*(unsigned char *)(v390 + 23))
    {
LABEL_982:
      int v401 = 1;
      goto LABEL_1003;
    }
    if ((v393 & 0x80) != 0) {
      uint64_t v393 = *(void *)(v392 + 8);
    }
    uint64_t v403 = v389[8];
    if (v389 == &CoreML::Specification::_WeightParams_default_instance_
      || (v393 ? (BOOL v404 = v403 == 0) : (BOOL v404 = 1), v404))
    {
      if ((v397 & 0x80) != 0) {
        uint64_t v397 = *(void *)(v396 + 8);
      }
      if (v403) {
        BOOL v405 = v397 == 0;
      }
      else {
        BOOL v405 = 1;
      }
      if (v405 || v389 == &CoreML::Specification::_WeightParams_default_instance_) {
        int v401 = 5;
      }
      else {
        int v401 = 3;
      }
    }
    else
    {
      int v401 = 2;
    }
    goto LABEL_1003;
  }
  int v401 = 4;
LABEL_1003:
  if (v379 >= v424)
  {
    v407 = (int *)__p;
    uint64_t v408 = ((char *)v379 - (unsigned char *)__p) >> 2;
    unint64_t v409 = v408 + 1;
    if ((unint64_t)(v408 + 1) >> 62) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v410 = (char *)v424 - (unsigned char *)__p;
    if (((char *)v424 - (unsigned char *)__p) >> 1 > v409) {
      unint64_t v409 = v410 >> 1;
    }
    if ((unint64_t)v410 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v411 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v411 = v409;
    }
    if (v411)
    {
      v412 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v424, v411);
      v407 = (int *)__p;
      v379 = (int *)v423;
    }
    else
    {
      v412 = 0;
    }
    v413 = (int *)&v412[4 * v408];
    v414 = &v412[4 * v411];
    int *v413 = v401;
    uint64_t v214 = v413 + 1;
    while (v379 != v407)
    {
      int v415 = *--v379;
      *--v413 = v415;
    }
    long long __p = v413;
    v423 = (char *)v214;
    v424 = (int *)v414;
    if (v407) {
      operator delete(v407);
    }
  }
  else
  {
    int *v379 = v401;
    uint64_t v214 = v379 + 1;
  }
  v423 = (char *)v214;
LABEL_1020:
  v416 = __p;
  if (__p == v214)
  {
LABEL_1030:
    CoreML::Result::Result(a3);
  }
  else
  {
    int v417 = 0;
    int v418 = 0;
    while (1)
    {
      int v419 = *v416 ? v417 : v417 + 1;
      if (*v416 == 1) {
        ++v418;
      }
      else {
        int v417 = v419;
      }
      if (v417 * v418 >= 1) {
        break;
      }
      if (++v416 == v214) {
        goto LABEL_1030;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v420, "LSTM weight parameters have inconsistent field value types. Types should match and should be either half or full precision");
    CoreML::Result::Result(a3, 13);
    if (v421 < 0) {
      operator delete(v420);
    }
  }
  if (__p)
  {
    v423 = (char *)__p;
    operator delete(__p);
  }
}

void sub_22428F6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBiDirectionalLSTMLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v116);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 5, (CoreML::Result *)&v105);
  std::string::size_type v116 = v105;
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = v106;
  uint64_t v118 = v107;
  if (CoreML::Result::good((CoreML::Result *)&v116))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)5, 5, (CoreML::Result *)&v105);
    std::string::size_type v116 = v105;
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = v106;
    uint64_t v118 = v107;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_66;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v116);
  if (!v6) {
    goto LABEL_66;
  }
  if (*(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(v114, "BiDirectionalLSTM");
    int v7 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v114, (uint64_t)v7, (CoreML::Result *)&v105);
    std::string::size_type v116 = v105;
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = v106;
    uint64_t v118 = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    if (v115 < 0) {
      operator delete(v114[0]);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_66;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "BiDirectionalLSTM");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)__p, 5, 5, (uint64_t)v7, (uint64_t)&v105);
    std::string::size_type v116 = v105;
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = v106;
    uint64_t v118 = v107;
    HIBYTE(v107) = 0;
    LOBYTE(v106) = 0;
    if (v104 < 0) {
      operator delete(__p[0]);
    }
    BOOL v6 = CoreML::Result::good((CoreML::Result *)&v116);
    if (!v6) {
      goto LABEL_66;
    }
  }
  if (*((_DWORD *)a2 + 35) == 430) {
    uint64_t v8 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v8 = CoreML::Specification::BiDirectionalLSTMLayerParams::default_instance((CoreML::Specification::BiDirectionalLSTMLayerParams *)v6);
  }
  uint64_t v9 = v8[4];
  if (v9) {
    uint64_t v10 = (CoreML **)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((int *)v8 + 6);
  if (v11)
  {
    uint64_t v12 = 8 * v11 - 8;
    do
    {
      CoreML::validateRecurrentActivationParams(*v10, (CoreML::Result *)&v105);
      std::string::size_type v116 = v105;
      if (SHIBYTE(v118) < 0) {
        operator delete((void *)v117);
      }
      long long v117 = v106;
      uint64_t v118 = v107;
      uint64_t v8 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v116);
      ++v10;
      if (v12) {
        char v13 = (char)v8;
      }
      else {
        char v13 = 0;
      }
      v12 -= 8;
    }
    while ((v13 & 1) != 0);
  }
  if (*((_DWORD *)a2 + 35) == 430) {
    uint64_t v14 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v14 = CoreML::Specification::BiDirectionalLSTMLayerParams::default_instance((CoreML::Specification::BiDirectionalLSTMLayerParams *)v8);
  }
  uint64_t v15 = v14[7];
  if (v15) {
    uint64_t v16 = (CoreML **)(v15 + 8);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *((int *)v14 + 12);
  if (v17)
  {
    uint64_t v18 = 8 * v17 - 8;
    do
    {
      CoreML::validateRecurrentActivationParams(*v16, (CoreML::Result *)&v105);
      std::string::size_type v116 = v105;
      if (SHIBYTE(v118) < 0) {
        operator delete((void *)v117);
      }
      long long v117 = v106;
      uint64_t v118 = v107;
      uint64_t v14 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v116);
      ++v16;
      if (v18) {
        char v19 = (char)v14;
      }
      else {
        char v19 = 0;
      }
      v18 -= 8;
    }
    while ((v19 & 1) != 0);
  }
  if (*((_DWORD *)a2 + 35) == 420)
  {
    uint64_t v20 = (uint64_t *)*((void *)a2 + 16);
    if (v20[6]) {
      uint64_t v21 = (uint64_t *)v20[6];
    }
    else {
      uint64_t v21 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
  }
  else
  {
    BOOL v22 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v14);
    if (v22[6]) {
      uint64_t v21 = (uint64_t *)v22[6];
    }
    else {
      uint64_t v21 = &CoreML::Specification::_LSTMWeightParams_default_instance_;
    }
    if (*((_DWORD *)a2 + 35) == 420) {
      uint64_t v20 = (uint64_t *)*((void *)a2 + 16);
    }
    else {
      uint64_t v20 = CoreML::Specification::UniDirectionalLSTMLayerParams::default_instance((CoreML::Specification::UniDirectionalLSTMLayerParams *)v22);
    }
  }
  if (v20[5]) {
    BOOL v23 = (const CoreML::Specification::LSTMParams *)v20[5];
  }
  else {
    BOOL v23 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  }
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)v113, v23);
  CoreML::validateLSTMWeightParams(v21, (uint64_t)v113, (CoreML::Result *)&v105);
  std::string::size_type v116 = v105;
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = v106;
  uint64_t v118 = v107;
  HIBYTE(v107) = 0;
  LOBYTE(v106) = 0;
  CoreML::Specification::LSTMParams::~LSTMParams((CoreML::Specification::LSTMParams *)v113);
  BOOL v24 = CoreML::Result::good((CoreML::Result *)&v116);
  if (!v24)
  {
LABEL_66:
    *(void *)a3 = v116;
    *(_OWORD *)(a3 + 8) = v117;
    *(void *)(a3 + 24) = v118;
    return;
  }
  if (*((_DWORD *)a2 + 35) == 430) {
    uint64_t v25 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    uint64_t v25 = CoreML::Specification::BiDirectionalLSTMLayerParams::default_instance((CoreML::Specification::BiDirectionalLSTMLayerParams *)v24);
  }
  CoreML::Specification::BiDirectionalLSTMLayerParams::BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&v105, (const CoreML::Specification::BiDirectionalLSTMLayerParams *)v25);
  if (v110) {
    uint64_t v26 = v110;
  }
  else {
    uint64_t v26 = (const CoreML::Specification::LSTMParams *)&CoreML::Specification::_LSTMParams_default_instance_;
  }
  CoreML::Specification::LSTMParams::LSTMParams((CoreML::Specification::LSTMParams *)__p, v26);
  char v101 = 0;
  long long v102 = 0uLL;
  if (v107 != 3)
  {
    std::operator+<char>();
    uint64_t v93 = std::string::append(&v99, " forward lstm must provide 3 activations");
LABEL_385:
    int v94 = (void *)v93->__r_.__value_.__r.__words[0];
    *(void *)uint64_t v119 = v93->__r_.__value_.__l.__size_;
    *(void *)&v119[7] = *(std::string::size_type *)((char *)&v93->__r_.__value_.__r.__words[1] + 7);
    char v95 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v102) < 0) {
      operator delete(v101);
    }
    char v101 = v94;
    *(void *)&long long v102 = *(void *)v119;
    *(void *)((char *)&v102 + 7) = *(void *)&v119[7];
    HIBYTE(v102) = v95;
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    goto LABEL_390;
  }
  if (v108 != 3)
  {
    std::operator+<char>();
    uint64_t v93 = std::string::append(&v99, " backward lstm must provide 3 activations");
    goto LABEL_385;
  }
  uint64_t v28 = v111;
  uint64_t v27 = v112;
  uint64_t v29 = *(void **)(v109 + 8);
  int v96 = *(void **)(v109 + 16);
  if (v29[2]) {
    uint64_t v30 = (uint64_t *)v29[2];
  }
  else {
    uint64_t v30 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v31 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward input gate weight matrix");
  uint64_t v32 = (const CoreML::Specification::WeightParams *)(v28 * (void)v27);
  CoreML::validateGeneralWeightParams((uint64_t)v30, v32, v27, (const void **)v119, v31, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v29[3]) {
    uint64_t v33 = (uint64_t *)v29[3];
  }
  else {
    uint64_t v33 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v34 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward forget gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v33, v32, v27, (const void **)v119, v34, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v29[4]) {
    uint64_t v35 = (uint64_t *)v29[4];
  }
  else {
    uint64_t v35 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v36 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward block input gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v35, v32, v27, (const void **)v119, v36, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v29[5]) {
    uint64_t v37 = (uint64_t *)v29[5];
  }
  else {
    uint64_t v37 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v38 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward output gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v37, v32, v27, (const void **)v119, v38, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v29[6]) {
    unsigned int v39 = (uint64_t *)v29[6];
  }
  else {
    unsigned int v39 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v40 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward input gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v39, (const CoreML::Specification::WeightParams *)((void)v27 * (void)v27), v27, (const void **)v119, v40, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v29[7]) {
    int v41 = (uint64_t *)v29[7];
  }
  else {
    int v41 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v42 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward forget gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v41, (const CoreML::Specification::WeightParams *)((void)v27 * (void)v27), v27, (const void **)v119, v42, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v29[8]) {
    BOOL v43 = (uint64_t *)v29[8];
  }
  else {
    BOOL v43 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v44 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward block input gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v43, (const CoreML::Specification::WeightParams *)((void)v27 * (void)v27), v27, (const void **)v119, v44, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v29[9]) {
    int v45 = (uint64_t *)v29[9];
  }
  else {
    int v45 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v46 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "forward output gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v45, (const CoreML::Specification::WeightParams *)((void)v27 * (void)v27), v27, (const void **)v119, v46, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v96[2]) {
    int v47 = (uint64_t *)v96[2];
  }
  else {
    int v47 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v48 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward input gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v47, v32, v27, (const void **)v119, v48, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v96[3]) {
    unint64_t v49 = (uint64_t *)v96[3];
  }
  else {
    unint64_t v49 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v50 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward forget gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v49, v32, v27, (const void **)v119, v50, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v96[4]) {
    unint64_t v51 = (uint64_t *)v96[4];
  }
  else {
    unint64_t v51 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v52 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward block input gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v51, v32, v27, (const void **)v119, v52, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v96[5]) {
    int v53 = (uint64_t *)v96[5];
  }
  else {
    int v53 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v54 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward output gate weight matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v53, v32, v27, (const void **)v119, v54, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v96[6]) {
    int v55 = (uint64_t *)v96[6];
  }
  else {
    int v55 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v56 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward input gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v55, (const CoreML::Specification::WeightParams *)((void)v27 * (void)v27), v27, (const void **)v119, v56, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v96[7]) {
    uint64_t v57 = (uint64_t *)v96[7];
  }
  else {
    uint64_t v57 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v58 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward forget gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v57, (const CoreML::Specification::WeightParams *)((void)v27 * (void)v27), v27, (const void **)v119, v58, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v96[8]) {
    uint64_t v59 = (uint64_t *)v96[8];
  }
  else {
    uint64_t v59 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v60 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward block input gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v59, (const CoreML::Specification::WeightParams *)((void)v27 * (void)v27), v27, (const void **)v119, v60, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  if (v96[9]) {
    uint64_t v61 = (uint64_t *)v96[9];
  }
  else {
    uint64_t v61 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
  uint64_t v62 = *((void *)a2 + 14);
  std::string::basic_string[abi:ne180100]<0>(v97, "backward output gate recursion matrix");
  CoreML::validateGeneralWeightParams((uint64_t)v61, (const CoreML::Specification::WeightParams *)((void)v27 * (void)v27), v27, (const void **)v119, v62, (uint64_t)v97, (uint64_t)&v99);
  std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
  long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
  uint64_t v118 = v100;
  HIBYTE(v100) = 0;
  v99.__r_.__value_.__s.__data_[8] = 0;
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  if (v120 < 0) {
    operator delete(*(void **)v119);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v116)) {
    goto LABEL_382;
  }
  uint64_t v63 = (uint64_t *)v110;
  if (v110) {
    uint64_t v64 = (uint64_t *)v110;
  }
  else {
    uint64_t v64 = &CoreML::Specification::_LSTMParams_default_instance_;
  }
  if (*((unsigned char *)v64 + 21))
  {
    if (v29[10]) {
      uint64_t v65 = (uint64_t *)v29[10];
    }
    else {
      uint64_t v65 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v66 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward input gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v65, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v66, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_382;
    }
    if (v29[11]) {
      unsigned int v67 = (uint64_t *)v29[11];
    }
    else {
      unsigned int v67 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v68 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward forget gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v67, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v68, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_382;
    }
    if (v29[12]) {
      uint64_t v69 = (uint64_t *)v29[12];
    }
    else {
      uint64_t v69 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v70 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward block input bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v69, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v70, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_382;
    }
    if (v29[13]) {
      BOOL v71 = (uint64_t *)v29[13];
    }
    else {
      BOOL v71 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v72 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward output gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v71, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v72, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_382;
    }
    if (v96[10]) {
      uint64_t v73 = (uint64_t *)v96[10];
    }
    else {
      uint64_t v73 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v74 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "backward input gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v73, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v74, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_382;
    }
    if (v96[11]) {
      unsigned int v75 = (uint64_t *)v96[11];
    }
    else {
      unsigned int v75 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v76 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "backward forget gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v75, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v76, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_382;
    }
    if (v96[12]) {
      unint64_t v77 = (uint64_t *)v96[12];
    }
    else {
      unint64_t v77 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v78 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "backward block input bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v77, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v78, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_382;
    }
    if (v96[13]) {
      unint64_t v79 = (uint64_t *)v96[13];
    }
    else {
      unint64_t v79 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v80 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "backward output gate bias vector");
    CoreML::validateGeneralWeightParams((uint64_t)v79, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v80, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (!CoreML::Result::good((CoreML::Result *)&v116)) {
      goto LABEL_382;
    }
    uint64_t v63 = (uint64_t *)v110;
  }
  if (!v63) {
    uint64_t v63 = &CoreML::Specification::_LSTMParams_default_instance_;
  }
  if (*((unsigned char *)v63 + 23))
  {
    if (v29[14]) {
      uint64_t v81 = (uint64_t *)v29[14];
    }
    else {
      uint64_t v81 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
    uint64_t v82 = *((void *)a2 + 14);
    std::string::basic_string[abi:ne180100]<0>(v97, "forward input gate peephole vector");
    CoreML::validateGeneralWeightParams((uint64_t)v81, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v82, (uint64_t)v97, (uint64_t)&v99);
    std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v118) < 0) {
      operator delete((void *)v117);
    }
    long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
    uint64_t v118 = v100;
    HIBYTE(v100) = 0;
    v99.__r_.__value_.__s.__data_[8] = 0;
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v120 < 0) {
      operator delete(*(void **)v119);
    }
    if (CoreML::Result::good((CoreML::Result *)&v116))
    {
      if (v29[15]) {
        int v83 = (uint64_t *)v29[15];
      }
      else {
        int v83 = &CoreML::Specification::_WeightParams_default_instance_;
      }
      std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
      uint64_t v84 = *((void *)a2 + 14);
      std::string::basic_string[abi:ne180100]<0>(v97, "forward forget gate peephole vector");
      CoreML::validateGeneralWeightParams((uint64_t)v83, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v84, (uint64_t)v97, (uint64_t)&v99);
      std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v118) < 0) {
        operator delete((void *)v117);
      }
      long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
      uint64_t v118 = v100;
      HIBYTE(v100) = 0;
      v99.__r_.__value_.__s.__data_[8] = 0;
      if (v98 < 0) {
        operator delete(v97[0]);
      }
      if (v120 < 0) {
        operator delete(*(void **)v119);
      }
      if (CoreML::Result::good((CoreML::Result *)&v116))
      {
        if (v29[16]) {
          uint64_t v85 = (uint64_t *)v29[16];
        }
        else {
          uint64_t v85 = &CoreML::Specification::_WeightParams_default_instance_;
        }
        std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
        uint64_t v86 = *((void *)a2 + 14);
        std::string::basic_string[abi:ne180100]<0>(v97, "forward output gate peephole vector");
        CoreML::validateGeneralWeightParams((uint64_t)v85, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v86, (uint64_t)v97, (uint64_t)&v99);
        std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v118) < 0) {
          operator delete((void *)v117);
        }
        long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
        uint64_t v118 = v100;
        HIBYTE(v100) = 0;
        v99.__r_.__value_.__s.__data_[8] = 0;
        if (v98 < 0) {
          operator delete(v97[0]);
        }
        if (v120 < 0) {
          operator delete(*(void **)v119);
        }
        if (CoreML::Result::good((CoreML::Result *)&v116))
        {
          if (v96[14]) {
            uint64_t v87 = (uint64_t *)v96[14];
          }
          else {
            uint64_t v87 = &CoreML::Specification::_WeightParams_default_instance_;
          }
          std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
          uint64_t v88 = *((void *)a2 + 14);
          std::string::basic_string[abi:ne180100]<0>(v97, "backward input gate peephole vector");
          CoreML::validateGeneralWeightParams((uint64_t)v87, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v88, (uint64_t)v97, (uint64_t)&v99);
          std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v118) < 0) {
            operator delete((void *)v117);
          }
          long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
          uint64_t v118 = v100;
          HIBYTE(v100) = 0;
          v99.__r_.__value_.__s.__data_[8] = 0;
          if (v98 < 0) {
            operator delete(v97[0]);
          }
          if (v120 < 0) {
            operator delete(*(void **)v119);
          }
          if (CoreML::Result::good((CoreML::Result *)&v116))
          {
            if (v96[15]) {
              uint64_t v89 = (uint64_t *)v96[15];
            }
            else {
              uint64_t v89 = &CoreML::Specification::_WeightParams_default_instance_;
            }
            std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
            uint64_t v90 = *((void *)a2 + 14);
            std::string::basic_string[abi:ne180100]<0>(v97, "backward forget gate peephole vector");
            CoreML::validateGeneralWeightParams((uint64_t)v89, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v90, (uint64_t)v97, (uint64_t)&v99);
            std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v118) < 0) {
              operator delete((void *)v117);
            }
            long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
            uint64_t v118 = v100;
            HIBYTE(v100) = 0;
            v99.__r_.__value_.__s.__data_[8] = 0;
            if (v98 < 0) {
              operator delete(v97[0]);
            }
            if (v120 < 0) {
              operator delete(*(void **)v119);
            }
            if (CoreML::Result::good((CoreML::Result *)&v116))
            {
              if (v96[16]) {
                uint64_t v91 = (uint64_t *)v96[16];
              }
              else {
                uint64_t v91 = &CoreML::Specification::_WeightParams_default_instance_;
              }
              std::string::basic_string[abi:ne180100]<0>(v119, "Bidirectional LSTM");
              uint64_t v92 = *((void *)a2 + 14);
              std::string::basic_string[abi:ne180100]<0>(v97, "backward output gate peephole vector");
              CoreML::validateGeneralWeightParams((uint64_t)v91, v27, (const CoreML::Specification::WeightParams *)1, (const void **)v119, v92, (uint64_t)v97, (uint64_t)&v99);
              std::string::size_type v116 = v99.__r_.__value_.__r.__words[0];
              if (SHIBYTE(v118) < 0) {
                operator delete((void *)v117);
              }
              long long v117 = *(_OWORD *)&v99.__r_.__value_.__r.__words[1];
              uint64_t v118 = v100;
              HIBYTE(v100) = 0;
              v99.__r_.__value_.__s.__data_[8] = 0;
              if (v98 < 0) {
                operator delete(v97[0]);
              }
              if (v120 < 0) {
                operator delete(*(void **)v119);
              }
              CoreML::Result::good((CoreML::Result *)&v116);
            }
          }
        }
      }
    }
  }
LABEL_382:
  *(void *)a3 = v116;
  *(_OWORD *)(a3 + 8) = v117;
  *(void *)(a3 + 24) = v118;
  long long v117 = 0uLL;
  uint64_t v118 = 0;
LABEL_390:
  if (SHIBYTE(v102) < 0) {
    operator delete(v101);
  }
  CoreML::Specification::LSTMParams::~LSTMParams((CoreML::Specification::LSTMParams *)__p);
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&v105);
  if (SHIBYTE(v118) < 0) {
    operator delete((void *)v117);
  }
}

void sub_22429122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 97) < 0) {
    operator delete(*(void **)(v36 - 120));
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  CoreML::Specification::LSTMParams::~LSTMParams((CoreML::Specification::LSTMParams *)&a29);
  CoreML::Specification::BiDirectionalLSTMLayerParams::~BiDirectionalLSTMLayerParams((CoreML::Specification::BiDirectionalLSTMLayerParams *)&a36);
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateCropLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v50);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v48);
  std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  uint64_t v52 = v49;
  if (CoreML::Result::good((CoreML::Result *)&v50))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v48);
    std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
    uint64_t v52 = v49;
  }
  uint64_t v6 = CoreML::Result::good((CoreML::Result *)&v50);
  if ((v6 & 1) == 0) {
    goto LABEL_36;
  }
  if (!*(unsigned char *)this) {
    goto LABEL_23;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Crop");
  int v7 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v48);
  std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  uint64_t v52 = v49;
  HIBYTE(v49) = 0;
  v48.__r_.__value_.__s.__data_[8] = 0;
  if (v47 < 0) {
    operator delete(__p[0]);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v50)) {
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&v45, "Crop");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v45, 3, -1, (uint64_t)this + 32, (uint64_t)&v48);
  std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
  uint64_t v52 = v49;
  HIBYTE(v49) = 0;
  v48.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = CoreML::Result::good((CoreML::Result *)&v50);
  if ((v6 & 1) == 0) {
    goto LABEL_36;
  }
  if (*((int *)a2 + 6) < 2
    || (v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, (const void **)a2[4][1]), v8 = (char *)this + 40, v8 == (char *)v6)|| (v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v7, (const void **)a2[4][2]), v8 == (char *)v6)|| (int v9 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)a2[4][1]), v6 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)a2[4][2]), v9 == *(_DWORD *)v6))
  {
LABEL_23:
    int v10 = *((_DWORD *)a2 + 35);
    if (*((_DWORD *)a2 + 6) == 1)
    {
      if (v10 == 190) {
        uint64_t v11 = a2[16];
      }
      else {
        uint64_t v11 = CoreML::Specification::CropLayerParams::default_instance((CoreML::Specification::CropLayerParams *)v6);
      }
      char v13 = (uint64_t *)v11[5];
      if (!v13) {
        char v13 = &CoreML::Specification::_BorderAmounts_default_instance_;
      }
      if (*((_DWORD *)v13 + 6) != 2)
      {
        std::operator+<char>();
        uint64_t v14 = std::string::append(&v53, "' is of length ");
        long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (*((_DWORD *)a2 + 35) == 190) {
          uint64_t v16 = a2[16];
        }
        else {
          uint64_t v16 = CoreML::Specification::CropLayerParams::default_instance((CoreML::Specification::CropLayerParams *)v14);
        }
        uint64_t v20 = (uint64_t *)v16[5];
        if (!v20) {
          uint64_t v20 = &CoreML::Specification::_BorderAmounts_default_instance_;
        }
        std::to_string(&v43, *((_DWORD *)v20 + 6));
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = &v43;
        }
        else {
          uint64_t v21 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v43.__r_.__value_.__l.__size_;
        }
        BOOL v23 = std::string::append(&v44, (const std::string::value_type *)v21, size);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        uint64_t v25 = std::string::append(&v48, " but requires exactly two crop constraints (for X,Y axes).");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
        goto LABEL_75;
      }
    }
    else
    {
      if (v10 == 190) {
        uint64_t v12 = a2[16];
      }
      else {
        uint64_t v12 = CoreML::Specification::CropLayerParams::default_instance((CoreML::Specification::CropLayerParams *)v6);
      }
      if (*((_DWORD *)v12 + 4) != 2)
      {
        std::operator+<char>();
        uint64_t v17 = std::string::append(&v53, "' is of length ");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (*((_DWORD *)a2 + 35) == 190) {
          char v19 = a2[16];
        }
        else {
          char v19 = CoreML::Specification::CropLayerParams::default_instance((CoreML::Specification::CropLayerParams *)v17);
        }
        std::to_string(&v43, *((_DWORD *)v19 + 4));
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v27 = &v43;
        }
        else {
          uint64_t v27 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = v43.__r_.__value_.__l.__size_;
        }
        uint64_t v29 = std::string::append(&v44, (const std::string::value_type *)v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        uint64_t v31 = std::string::append(&v48, " but requires exactly two offsets (for X,Y axes).");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
LABEL_75:
        CoreML::Result::Result(&v48, 13);
        std::string::size_type v33 = v48.__r_.__value_.__r.__words[0];
        std::string::size_type v50 = v48.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v52) < 0)
        {
          operator delete((void *)v51);
          std::string::size_type v33 = v50;
        }
        long long v51 = *(_OWORD *)&v48.__r_.__value_.__r.__words[1];
        uint64_t v34 = v49;
        *(void *)a3 = v33;
        *(_OWORD *)(a3 + 8) = v51;
        *(void *)(a3 + 24) = v34;
        long long v51 = 0uLL;
        uint64_t v52 = 0;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v35 = (void *)v45.__r_.__value_.__r.__words[0];
LABEL_79:
          operator delete(v35);
          goto LABEL_37;
        }
        goto LABEL_37;
      }
    }
LABEL_36:
    *(void *)a3 = v50;
    *(_OWORD *)(a3 + 8) = v51;
    *(void *)(a3 + 24) = v52;
    long long v51 = 0uLL;
    uint64_t v52 = 0;
    goto LABEL_37;
  }
  uint64_t v36 = a2[14];
  if (*((char *)v36 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, (const std::string::value_type *)*v36, v36[1]);
  }
  else
  {
    long long v37 = *(_OWORD *)v36;
    v44.__r_.__value_.__r.__words[2] = v36[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v37;
  }
  uint64_t v38 = std::string::insert(&v44, 0, "Layer '");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  uint64_t v40 = std::string::append(&v45, "' of type 'Crop' expects equal ranks for its inputs, but they are not equal.");
  std::string::size_type v41 = v40->__r_.__value_.__r.__words[0];
  v53.__r_.__value_.__r.__words[0] = v40->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
  char v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 7);
  v48.__r_.__value_.__r.__words[0] = v41;
  v48.__r_.__value_.__l.__size_ = v53.__r_.__value_.__r.__words[0];
  *((unsigned char *)&v48.__r_.__value_.__s + 23) = v42;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v35 = (void *)v48.__r_.__value_.__r.__words[0];
    goto LABEL_79;
  }
LABEL_37:
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
}

void sub_224291B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 81) < 0) {
    operator delete(*(void **)(v40 - 104));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateDotLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  _OWORD v27[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v24);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v21);
  long long v24 = v21;
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  long long v25 = v22;
  uint64_t v26 = v23;
  if (CoreML::Result::good((CoreML::Result *)&v24))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v21);
    long long v24 = v21;
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    long long v25 = v22;
    uint64_t v26 = v23;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v24) || !*(unsigned char *)this) {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DotProduct");
  uint64_t v6 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v21);
  long long v24 = v21;
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  long long v25 = v22;
  uint64_t v26 = v23;
  HIBYTE(v23) = 0;
  LOBYTE(v22) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v24)) {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "DotProduct");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v18, 3, -1, (uint64_t)this + 32, (uint64_t)&v21);
  long long v24 = v21;
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  long long v25 = v22;
  uint64_t v26 = v23;
  HIBYTE(v23) = 0;
  LOBYTE(v22) = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (CoreML::Result::good((CoreML::Result *)&v24)
    && (uint64_t v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, *(const void ***)(*((void *)a2 + 4) + 8)), v8 = (char *)this + 40, v8 != (char *)v7)&& v8 != (char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v6, *(const void ***)(*((void *)a2 + 4) + 16))&& (v9 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v6, *(const void ***)(*((void *)a2 + 4) + 8)), v9 != *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v6, *(const void ***)(*((void *)a2 + 4) + 16))))
  {
    int v10 = (long long *)*((void *)a2 + 14);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v11 = *v10;
      v17.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v11;
    }
    uint64_t v12 = std::string::insert(&v17, 0, "Layer '");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = std::string::append(&v18, "' of type 'DotProduct' expects equal ranks for its inputs, but they are not equal.");
    long long v15 = (void *)v14->__r_.__value_.__r.__words[0];
    v27[0] = v14->__r_.__value_.__l.__size_;
    *(void *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v22 + 7) = *(void *)((char *)v27 + 7);
    uint64_t v21 = v15;
    *(void *)&long long v22 = v27[0];
    HIBYTE(v22) = v16;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v22) < 0) {
      operator delete(v21);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
  }
  else
  {
LABEL_22:
    *(void *)a3 = v24;
    *(_OWORD *)(a3 + 8) = v25;
    *(void *)(a3 + 24) = v26;
  }
}

void sub_224291FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateMvnLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(void *)a3 = v13;
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v14;
  *(void *)(a3 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v14;
    *(void *)(a3 + 24) = v15;
  }
  BOOL result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "MeanVarianceNormalize");
    uint64_t v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v14;
    *(void *)(a3 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    BOOL result = CoreML::Result::good((CoreML::Result *)a3);
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "MeanVarianceNormalize");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 3, -1, (uint64_t)v8, (uint64_t)&v13);
      *(void *)a3 = v13;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = v14;
      *(void *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      return CoreML::Result::good((CoreML::Result *)a3);
    }
  }
  return result;
}

void sub_224292218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateEmbeddingLayer@<D0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v17);
  *(void *)a3 = v17;
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v18;
  *(void *)(a3 + 24) = v19;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v17);
    *(void *)a3 = v17;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v18;
    *(void *)(a3 + 24) = v19;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Embedding");
    int v9 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v9, (CoreML::Result *)&v17);
    *(void *)a3 = v17;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v18;
    *(void *)(a3 + 24) = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "Embedding");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v13, 4, -1, (uint64_t)v9, (uint64_t)&v17);
      *(void *)a3 = v17;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = v18;
      *(void *)(a3 + 24) = v19;
      HIBYTE(v19) = 0;
      LOBYTE(v18) = 0;
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 150) {
          char v10 = a2[16];
        }
        else {
          char v10 = CoreML::Specification::EmbeddingLayerParams::default_instance((CoreML::Specification::EmbeddingLayerParams *)v7);
        }
        if (v10[2]) {
          long long v11 = (const CoreML::Specification::WeightParams *)v10[2];
        }
        else {
          long long v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        if (v10[3]) {
          char v12 = (const CoreML::Specification::WeightParams *)v10[3];
        }
        else {
          char v12 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        validateEmbeddingWeightsBias((const CoreML::Specification::NeuralNetworkLayer *)a2, v11, v12, (uint64_t)&v17);
        *(void *)a3 = v17;
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v6);
        }
        double result = *(double *)&v18;
        *(_OWORD *)uint64_t v6 = v18;
        *(void *)(a3 + 24) = v19;
      }
    }
  }
  return result;
}

void sub_2242924A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void validateEmbeddingWeightsBias(const CoreML::Specification::NeuralNetworkLayer *a1@<X0>, const CoreML::Specification::WeightParams *a2@<X1>, const CoreML::Specification::WeightParams *a3@<X2>, uint64_t a4@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a4);
  uint64_t v84 = 0;
  size_t v85 = 0;
  uint64_t v86 = 0;
  int v8 = *((_DWORD *)a1 + 35);
  if (v8 == 1040)
  {
    uint64_t v13 = *((void *)a1 + 16);
    uint64_t v11 = *(void *)(v13 + 32);
    char v10 = *(const CoreML::Specification::WeightParams **)(v13 + 40);
    int v12 = *(unsigned __int8 *)(v13 + 48);
    MEMORY[0x22A614700](&v84, "EmbeddingND");
  }
  else
  {
    if (v8 != 150) {
      goto LABEL_176;
    }
    uint64_t v9 = *((void *)a1 + 16);
    uint64_t v11 = *(void *)(v9 + 32);
    char v10 = *(const CoreML::Specification::WeightParams **)(v9 + 40);
    int v12 = *(unsigned __int8 *)(v9 + 48);
    MEMORY[0x22A614700](&v84, "Embedding");
  }
  uint64_t v14 = *((void *)a2 + 5);
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  }
  uint64_t v16 = *((void *)a2 + 6);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  if (*(char *)(v16 + 23) < 0) {
    uint64_t v18 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v18 = *(unsigned __int8 *)(v16 + 23);
  }
  int v19 = *((_DWORD *)a2 + 4);
  uint64_t v20 = *((void *)a2 + 7);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 23);
  if (*(char *)(v20 + 23) < 0) {
    uint64_t v22 = *(void *)(v20 + 8);
  }
  else {
    uint64_t v22 = *(unsigned __int8 *)(v20 + 23);
  }
  if (v19 <= 0) {
    int v23 = 1;
  }
  else {
    int v23 = 2;
  }
  if (v15) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = v19 > 0;
  }
  if (v18) {
    ++v24;
  }
  if (v22) {
    unsigned int v25 = v24 + 1;
  }
  else {
    unsigned int v25 = v24;
  }
  if (v25 > 1)
  {
    int v26 = 4;
    goto LABEL_53;
  }
  if (v25) {
    int v26 = 0;
  }
  else {
    int v26 = 5;
  }
  if (v19 <= 0 && v25)
  {
    if ((*(unsigned char *)(v14 + 23) & 0x80) != 0)
    {
      if (*(void *)(v14 + 8)) {
        goto LABEL_34;
      }
    }
    else if (*(unsigned char *)(v14 + 23))
    {
LABEL_34:
      int v26 = 1;
      goto LABEL_53;
    }
    if ((v17 & 0x80) != 0) {
      uint64_t v17 = *(void *)(v16 + 8);
    }
    uint64_t v27 = *((void *)a2 + 8);
    if (a2 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v17
      && v27)
    {
      int v26 = 2;
    }
    else
    {
      if ((v21 & 0x80) != 0) {
        uint64_t v21 = *(void *)(v20 + 8);
      }
      if (v27) {
        BOOL v28 = v21 == 0;
      }
      else {
        BOOL v28 = 1;
      }
      if (v28
        || a2 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        int v26 = 5;
      }
      else
      {
        int v26 = 3;
      }
    }
  }
LABEL_53:
  uint64_t v30 = *((void *)a3 + 5);
  if (*(char *)(v30 + 23) < 0) {
    uint64_t v31 = *(void *)(v30 + 8);
  }
  else {
    uint64_t v31 = *(unsigned __int8 *)(v30 + 23);
  }
  uint64_t v32 = *((void *)a3 + 6);
  uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
  if (*(char *)(v32 + 23) < 0) {
    uint64_t v34 = *(void *)(v32 + 8);
  }
  else {
    uint64_t v34 = *(unsigned __int8 *)(v32 + 23);
  }
  int v35 = *((_DWORD *)a3 + 4);
  uint64_t v36 = *((void *)a3 + 7);
  uint64_t v37 = *(unsigned __int8 *)(v36 + 23);
  if (*(char *)(v36 + 23) < 0) {
    uint64_t v38 = *(void *)(v36 + 8);
  }
  else {
    uint64_t v38 = *(unsigned __int8 *)(v36 + 23);
  }
  if (v35 <= 0) {
    int v39 = 1;
  }
  else {
    int v39 = 2;
  }
  if (v31) {
    unsigned int v40 = v39;
  }
  else {
    unsigned int v40 = v35 > 0;
  }
  if (v34) {
    ++v40;
  }
  if (v38) {
    unsigned int v41 = v40 + 1;
  }
  else {
    unsigned int v41 = v40;
  }
  if (v41 > 1)
  {
    int v42 = 4;
    goto LABEL_101;
  }
  if (v41) {
    int v42 = 0;
  }
  else {
    int v42 = 5;
  }
  if (v35 <= 0 && v41)
  {
    if ((*(unsigned char *)(v30 + 23) & 0x80) != 0)
    {
      if (*(void *)(v30 + 8)) {
        goto LABEL_82;
      }
    }
    else if (*(unsigned char *)(v30 + 23))
    {
LABEL_82:
      int v42 = 1;
      goto LABEL_101;
    }
    if ((v33 & 0x80) != 0) {
      uint64_t v33 = *(void *)(v32 + 8);
    }
    uint64_t v43 = *((void *)a3 + 8);
    if (a3 != (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_
      && v33
      && v43)
    {
      int v42 = 2;
    }
    else
    {
      if ((v37 & 0x80) != 0) {
        uint64_t v37 = *(void *)(v36 + 8);
      }
      if (v43) {
        BOOL v44 = v37 == 0;
      }
      else {
        BOOL v44 = 1;
      }
      if (v44
        || a3 == (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_)
      {
        int v42 = 5;
      }
      else
      {
        int v42 = 3;
      }
    }
  }
LABEL_101:
  if (v12) {
    BOOL v46 = v42 == 4;
  }
  else {
    BOOL v46 = 0;
  }
  int v47 = v46;
  if (v26 == 4 || v47)
  {
    if (v86 >= 0) {
      size_t v61 = HIBYTE(v86);
    }
    else {
      size_t v61 = v85;
    }
    uint64_t v62 = &v81;
    std::string::basic_string[abi:ne180100]((uint64_t)&v81, v61 + 2);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v62 = (std::string *)v81.__r_.__value_.__r.__words[0];
    }
    if (v61)
    {
      if (v86 >= 0) {
        uint64_t v63 = (void **)&v84;
      }
      else {
        uint64_t v63 = v84;
      }
      memmove(v62, v63, v61);
    }
    strcpy((char *)v62 + v61, " '");
    uint64_t v64 = *((void *)a1 + 14);
    int v65 = *(char *)(v64 + 23);
    if (v65 >= 0) {
      uint64_t v66 = (const std::string::value_type *)*((void *)a1 + 14);
    }
    else {
      uint64_t v66 = *(const std::string::value_type **)v64;
    }
    if (v65 >= 0) {
      std::string::size_type v67 = *(unsigned __int8 *)(v64 + 23);
    }
    else {
      std::string::size_type v67 = *(void *)(v64 + 8);
    }
    uint64_t v68 = std::string::append(&v81, v66, v67);
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    uint64_t v70 = std::string::append(&v79, "' has invalid weights/bias fields. Field value types should match and should either be half or full precision.");
    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    std::string::size_type v83 = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(&v79, 13);
    *(void *)a4 = v79.__r_.__value_.__r.__words[0];
    uint64_t v72 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0) {
      operator delete(*v72);
    }
    *(_OWORD *)uint64_t v72 = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
    *(void *)(a4 + 24) = v80;
    if (SHIBYTE(v83) < 0)
    {
      uint64_t v60 = __p[0];
      goto LABEL_162;
    }
  }
  else if (v12 && (v26 == 1 && !v42 || !v26 && v42 == 1))
  {
    if (v86 >= 0) {
      size_t v48 = HIBYTE(v86);
    }
    else {
      size_t v48 = v85;
    }
    uint64_t v49 = &v78;
    std::string::basic_string[abi:ne180100]((uint64_t)&v78, v48 + 8);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v49 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if (v48)
    {
      if (v86 >= 0) {
        std::string::size_type v50 = (void **)&v84;
      }
      else {
        std::string::size_type v50 = v84;
      }
      memmove(v49, v50, v48);
    }
    strcpy((char *)v49 + v48, " layer '");
    uint64_t v51 = *((void *)a1 + 14);
    int v52 = *(char *)(v51 + 23);
    if (v52 >= 0) {
      std::string v53 = (const std::string::value_type *)*((void *)a1 + 14);
    }
    else {
      std::string v53 = *(const std::string::value_type **)v51;
    }
    if (v52 >= 0) {
      std::string::size_type v54 = *(unsigned __int8 *)(v51 + 23);
    }
    else {
      std::string::size_type v54 = *(void *)(v51 + 8);
    }
    int v55 = std::string::append(&v78, v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    uint64_t v57 = std::string::append(&v81, "has unmatched precisions of weights/bias They should either be half or full precision.");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    std::string::size_type v83 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v79, 13);
    *(void *)a4 = v79.__r_.__value_.__r.__words[0];
    uint64_t v59 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0) {
      operator delete(*v59);
    }
    *(_OWORD *)uint64_t v59 = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
    *(void *)(a4 + 24) = v80;
    HIBYTE(v80) = 0;
    v79.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v83) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v60 = (void *)v78.__r_.__value_.__r.__words[0];
LABEL_162:
      operator delete(v60);
    }
  }
  else
  {
    uint64_t v73 = *((void *)a1 + 14);
    std::string::basic_string[abi:ne180100]<0>(__p, "weight");
    CoreML::validateGeneralWeightParams((uint64_t)a2, (const CoreML::Specification::WeightParams *)((void)v10 * v11), v10, (const void **)&v84, v73, (uint64_t)__p, (uint64_t)&v79);
    *(void *)a4 = v79.__r_.__value_.__r.__words[0];
    uint64_t v74 = (void **)(a4 + 8);
    if (*(char *)(a4 + 31) < 0) {
      operator delete(*v74);
    }
    *(_OWORD *)uint64_t v74 = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
    *(void *)(a4 + 24) = v80;
    HIBYTE(v80) = 0;
    v79.__r_.__value_.__s.__data_[8] = 0;
    if (SHIBYTE(v83) < 0) {
      operator delete(__p[0]);
    }
    BOOL v75 = CoreML::Result::good((CoreML::Result *)a4);
    if (v12) {
      BOOL v76 = v75;
    }
    else {
      BOOL v76 = 0;
    }
    if (v76)
    {
      uint64_t v77 = *((void *)a1 + 14);
      std::string::basic_string[abi:ne180100]<0>(__p, "bias");
      CoreML::validateGeneralWeightParams((uint64_t)a3, v10, (const CoreML::Specification::WeightParams *)1, (const void **)&v84, v77, (uint64_t)__p, (uint64_t)&v79);
      *(void *)a4 = v79.__r_.__value_.__r.__words[0];
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v74);
      }
      *(_OWORD *)uint64_t v74 = *(_OWORD *)&v79.__r_.__value_.__r.__words[1];
      *(void *)(a4 + 24) = v80;
      HIBYTE(v80) = 0;
      v79.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v83) < 0) {
        operator delete(__p[0]);
      }
      CoreML::Result::good((CoreML::Result *)a4);
    }
  }
LABEL_176:
  if (SHIBYTE(v86) < 0) {
    operator delete(v84);
  }
}

void sub_224292BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 73) < 0) {
    operator delete(*(void **)(v36 - 96));
  }
  if (*(char *)(v35 + 31) < 0) {
    operator delete(*(void **)(v35 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateEmbeddingNDLayer@<D0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v17);
  *(void *)a3 = v17;
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v18;
  *(void *)(a3 + 24) = v19;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v17);
    *(void *)a3 = v17;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v18;
    *(void *)(a3 + 24) = v19;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "EmbeddingND");
    uint64_t v9 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v9, (CoreML::Result *)&v17);
    *(void *)a3 = v17;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v18;
    *(void *)(a3 + 24) = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "EmbeddingND");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v13, 2, 5, (uint64_t)v9, (uint64_t)&v17);
      *(void *)a3 = v17;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = v18;
      *(void *)(a3 + 24) = v19;
      HIBYTE(v19) = 0;
      LOBYTE(v18) = 0;
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 1040) {
          char v10 = a2[16];
        }
        else {
          char v10 = CoreML::Specification::EmbeddingNDLayerParams::default_instance((CoreML::Specification::EmbeddingNDLayerParams *)v7);
        }
        if (v10[2]) {
          uint64_t v11 = (const CoreML::Specification::WeightParams *)v10[2];
        }
        else {
          uint64_t v11 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        if (v10[3]) {
          int v12 = (const CoreML::Specification::WeightParams *)v10[3];
        }
        else {
          int v12 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        validateEmbeddingWeightsBias((const CoreML::Specification::NeuralNetworkLayer *)a2, v11, v12, (uint64_t)&v17);
        *(void *)a3 = v17;
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v6);
        }
        double result = *(double *)&v18;
        *(_OWORD *)uint64_t v6 = v18;
        *(void *)(a3 + 24) = v19;
      }
    }
  }
  return result;
}

void sub_224292EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateAverageLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  int v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)int v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)int v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224292FC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateMaxLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  int v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)int v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)int v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_2242930B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateMinLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  int v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)int v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)int v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224293198(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateSequenceRepeatLayer@<W0>(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
  *(void *)a3 = v13;
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v14;
  *(void *)(a3 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v14;
    *(void *)(a3 + 24) = v15;
  }
  BOOL result = CoreML::Result::good((CoreML::Result *)a3);
  if (result && *(unsigned char *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SequenceRepeat");
    long long v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v13);
    *(void *)a3 = v13;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v14;
    *(void *)(a3 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    BOOL result = CoreML::Result::good((CoreML::Result *)a3);
    if (result)
    {
      std::string::basic_string[abi:ne180100]<0>(v9, "SequenceRepeat");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v9, 5, -1, (uint64_t)v8, (uint64_t)&v13);
      *(void *)a3 = v13;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = v14;
      *(void *)(a3 + 24) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      return CoreML::Result::good((CoreML::Result *)a3);
    }
  }
  return result;
}

void sub_224293380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSoftmaxLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v12);
  *(void *)a3 = v12;
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = v13;
  *(void *)(a3 + 24) = v14;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v12);
    *(void *)a3 = v12;
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = v13;
    *(void *)(a3 + 24) = v14;
    if (CoreML::Result::good((CoreML::Result *)a3) && *(unsigned char *)this)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Softmax");
      uint64_t v7 = (char *)this + 32;
      CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v7, (CoreML::Result *)&v12);
      *(void *)a3 = v12;
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = v13;
      *(void *)(a3 + 24) = v14;
      HIBYTE(v14) = 0;
      LOBYTE(v13) = 0;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (CoreML::Result::good((CoreML::Result *)a3))
      {
        std::string::basic_string[abi:ne180100]<0>(v8, "Softmax");
        CoreML::validateRankCount((uint64_t)a2, (uint64_t)v8, 3, -1, (uint64_t)v7, (uint64_t)&v12);
        *(void *)a3 = v12;
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*v6);
        }
        *(_OWORD *)uint64_t v6 = v13;
        *(void *)(a3 + 24) = v14;
        HIBYTE(v14) = 0;
        LOBYTE(v13) = 0;
        if (v9 < 0) {
          operator delete(v8[0]);
        }
      }
    }
  }
}

void sub_224293594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConcatLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  v34[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v31);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)&v28);
  uint64_t v31 = v28;
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v29;
  uint64_t v33 = v30;
  if (CoreML::Result::good((CoreML::Result *)&v31))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v28);
    uint64_t v31 = v28;
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v29;
    uint64_t v33 = v30;
  }
  if (!CoreML::Result::good((CoreML::Result *)&v31) || !*(unsigned char *)this) {
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "Concat");
  uint64_t v6 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v26, (uint64_t)this + 32, (CoreML::Result *)&v28);
  uint64_t v31 = v28;
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v29;
  uint64_t v33 = v30;
  HIBYTE(v30) = 0;
  LOBYTE(v29) = 0;
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v31);
  if (!v7) {
    goto LABEL_37;
  }
  long long v8 = *((_DWORD *)a2 + 35) == 320
     ? (uint64_t *)*((void *)a2 + 16)
     : CoreML::Specification::ConcatLayerParams::default_instance((CoreML::Specification::ConcatLayerParams *)v7);
  if (*((unsigned char *)v8 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Concat");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v25, 5, -1, (uint64_t)this + 32, (uint64_t)&v28);
    uint64_t v31 = v28;
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v29;
    uint64_t v33 = v30;
    HIBYTE(v30) = 0;
    LOBYTE(v29) = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Concat");
    CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v25, 3, -1, (uint64_t)this + 32, (uint64_t)&v28);
    uint64_t v31 = v28;
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v29;
    uint64_t v33 = v30;
    HIBYTE(v30) = 0;
    LOBYTE(v29) = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  if (CoreML::Result::good((CoreML::Result *)&v31)
    && (char v9 = (char *)this + 40,
        (CoreML::NeuralNetworkSpecValidator *)((char *)this + 40) != (CoreML::NeuralNetworkSpecValidator *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, *(const void ***)(*((void *)a2 + 4) + 8)))
    && ((v10 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)this + 32, *(const void ***)(*((void *)a2 + 4) + 8)), (uint64_t v11 = *((void *)a2 + 4)) != 0)? (v12 = (const void ***)(v11 + 8)): (v12 = 0), v13 = *((int *)a2 + 6), v13))
  {
    int v14 = *v10;
    uint64_t v15 = 8 * v13;
    while (1)
    {
      char v16 = *v12;
      if (v9 != (char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v6, *v12)&& v14 != *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v6, v16))
      {
        break;
      }
      ++v12;
      v15 -= 8;
      if (!v15) {
        goto LABEL_37;
      }
    }
    uint64_t v17 = (long long *)*((void *)a2 + 14);
    if (*((char *)v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)v17, *((void *)v17 + 1));
    }
    else
    {
      long long v18 = *v17;
      v24.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v18;
    }
    uint64_t v19 = std::string::insert(&v24, 0, "Layer '");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t v21 = std::string::append(&v25, "' of type 'Concat' expects equal ranks for its inputs, but they are not equal.");
    uint64_t v22 = (void *)v21->__r_.__value_.__r.__words[0];
    v34[0] = v21->__r_.__value_.__l.__size_;
    *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v29 + 7) = *(void *)((char *)v34 + 7);
    BOOL v28 = v22;
    *(void *)&long long v29 = v34[0];
    HIBYTE(v29) = v23;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v29) < 0) {
      operator delete(v28);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
LABEL_37:
    *(void *)a3 = v31;
    *(_OWORD *)(a3 + 8) = __p;
    *(void *)(a3 + 24) = v33;
  }
}

void sub_224293A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateCustomLayer@<Q0>(CoreML::Specification::CustomLayerParams **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v32);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v30);
  std::string::size_type v32 = v30.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v30.__r_.__value_.__r.__words[1];
  uint64_t v34 = v31;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v32);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, -1, (CoreML::Result *)&v30);
    std::string::size_type v32 = v30.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v34) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v30.__r_.__value_.__r.__words[1];
    uint64_t v34 = v31;
  }
  if (*((_DWORD *)a1 + 35) == 500) {
    uint64_t v6 = a1[16];
  }
  else {
    uint64_t v6 = (CoreML::Specification::CustomLayerParams *)CoreML::Specification::CustomLayerParams::default_instance((CoreML::Specification::CustomLayerParams *)v5);
  }
  uint64_t v7 = *((void *)v6 + 9);
  if (*(char *)(v7 + 23) < 0)
  {
    if (*(void *)(v7 + 8)) {
      goto LABEL_12;
    }
  }
  else if (*(unsigned char *)(v7 + 23))
  {
LABEL_12:
    if (*((_DWORD *)a1 + 35) == 500) {
      long long v8 = a1[16];
    }
    else {
      long long v8 = (CoreML::Specification::CustomLayerParams *)CoreML::Specification::CustomLayerParams::default_instance(v6);
    }
    uint64_t v12 = *((void *)v8 + 4);
    if (v12) {
      uint64_t v13 = (uint64_t *)(v12 + 8);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *((int *)v8 + 6);
    if (v14)
    {
      uint64_t v15 = 8 * v14;
      do
      {
        uint64_t v16 = *v13;
        uint64_t v17 = *(void *)(*v13 + 40);
        if (*(char *)(v17 + 23) < 0) {
          uint64_t v18 = *(void *)(v17 + 8);
        }
        else {
          uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
        }
        uint64_t v19 = *(void *)(v16 + 48);
        if (*(char *)(v19 + 23) < 0) {
          uint64_t v20 = *(void *)(v19 + 8);
        }
        else {
          uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
        }
        uint64_t v21 = *(void *)(v16 + 56);
        if (*(char *)(v21 + 23) < 0) {
          uint64_t v22 = *(void *)(v21 + 8);
        }
        else {
          uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
        }
        int v23 = *(_DWORD *)(v16 + 16);
        BOOL v24 = v23 <= 0;
        int v25 = v23 > 0;
        if (v24) {
          int v26 = 1;
        }
        else {
          int v26 = 2;
        }
        if (v18) {
          int v25 = v26;
        }
        if (v20) {
          ++v25;
        }
        if (v22) {
          ++v25;
        }
        if (v25 != 1)
        {
          std::operator+<char>();
          char v27 = std::string::append(&v30, " has a weights parameter with multiple types filled in.  The WeightParams message should be treated as a oneof.");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v29.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v30.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v30, 13);
          std::string::size_type v32 = v30.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v34) < 0) {
            operator delete((void *)__p.n128_u64[0]);
          }
          __n128 __p = *(__n128 *)&v30.__r_.__value_.__r.__words[1];
          uint64_t v34 = v31;
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v29.__r_.__value_.__l.__data_);
          }
        }
        ++v13;
        v15 -= 8;
      }
      while (v15);
    }
    *(void *)a2 = v32;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v34;
    return result;
  }
  std::operator+<char>();
  char v9 = std::string::append(&v29, " has an empty 'className' field. This field is required in order for Core ML to link to the implementation for this custom class.");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_224293DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateResizeBilinearLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a3);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
  *(void *)a3 = v25.__r_.__value_.__r.__words[0];
  uint64_t v6 = (void **)(a3 + 8);
  if (*(char *)(a3 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
  *(void *)(a3 + 24) = v26;
  if (CoreML::Result::good((CoreML::Result *)a3))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
    *(void *)a3 = v25.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v26;
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
  if (v7)
  {
    if (!*(unsigned char *)this) {
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ResizeBilinear");
    long long v8 = (char *)this + 32;
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v25);
    *(void *)a3 = v25.__r_.__value_.__r.__words[0];
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)uint64_t v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
    *(void *)(a3 + 24) = v26;
    HIBYTE(v26) = 0;
    v25.__r_.__value_.__s.__data_[8] = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)a3))
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "ResizeBilinear");
      CoreML::validateRankCount((uint64_t)a2, (uint64_t)v21, 3, -1, (uint64_t)v8, (uint64_t)&v25);
      *(void *)a3 = v25.__r_.__value_.__r.__words[0];
      if (*(char *)(a3 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
      *(void *)(a3 + 24) = v26;
      HIBYTE(v26) = 0;
      v25.__r_.__value_.__s.__data_[8] = 0;
      if (SHIBYTE(v22) < 0) {
        operator delete(v21[0]);
      }
      BOOL v7 = CoreML::Result::good((CoreML::Result *)a3);
      if (v7)
      {
LABEL_19:
        if (*((_DWORD *)a2 + 35) == 211) {
          char v9 = a2[16];
        }
        else {
          char v9 = CoreML::Specification::ResizeBilinearLayerParams::default_instance((CoreML::Specification::ResizeBilinearLayerParams *)v7);
        }
        if ((*((_DWORD *)v9 + 4) | 2) != 2)
        {
          std::operator+<char>();
          long long v10 = std::string::append(&v19, "' must be a vector of size 2 (i.e height, width) but is a vector of size ");
          long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v20.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v18, *((_DWORD *)v9 + 4));
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v12 = &v18;
          }
          else {
            uint64_t v12 = (std::string *)v18.__r_.__value_.__r.__words[0];
          }
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v18.__r_.__value_.__l.__size_;
          }
          uint64_t v14 = std::string::append(&v20, (const std::string::value_type *)v12, size);
          long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
          v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          uint64_t v16 = std::string::append(&v25, ".");
          long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          std::string::size_type v22 = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)uint64_t v21 = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v25.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v18.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v19.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v25, 13);
          *(void *)a3 = v25.__r_.__value_.__r.__words[0];
          if (*(char *)(a3 + 31) < 0) {
            operator delete(*v6);
          }
          *(_OWORD *)uint64_t v6 = *(_OWORD *)&v25.__r_.__value_.__r.__words[1];
          *(void *)(a3 + 24) = v26;
          if (SHIBYTE(v22) < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }
  }
}

void sub_224294188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v39 + 31) < 0) {
    operator delete(*(void **)(v39 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCropResizeLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v36);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v34);
  std::string::size_type v36 = v34.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  long long v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
  uint64_t v38 = v35;
  if (CoreML::Result::good((CoreML::Result *)&v36))
  {
    CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v34);
    std::string::size_type v36 = v34.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)v37);
    }
    long long v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
    uint64_t v38 = v35;
  }
  uint64_t v6 = CoreML::Result::good((CoreML::Result *)&v36);
  if ((v6 & 1) == 0) {
    goto LABEL_26;
  }
  if (!*(unsigned char *)this) {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CropResize");
  BOOL v7 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)&v34);
  std::string::size_type v36 = v34.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  long long v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
  uint64_t v38 = v35;
  HIBYTE(v35) = 0;
  v34.__r_.__value_.__s.__data_[8] = 0;
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v36)) {
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "CropResize");
  CoreML::validateRankCount((uint64_t)a2, (uint64_t)&v31, 5, -1, (uint64_t)this + 32, (uint64_t)&v34);
  std::string::size_type v36 = v34.__r_.__value_.__r.__words[0];
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  long long v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
  uint64_t v38 = v35;
  HIBYTE(v35) = 0;
  v34.__r_.__value_.__s.__data_[8] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v36)) {
    goto LABEL_26;
  }
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, (const void **)a2[4][1]);
  long long v8 = (char *)this + 40;
  if (v8 == (char *)v6
    || (v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v7, (const void **)a2[4][2]), v8 == (char *)v6)|| (int v9 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)a2[4][1]), v6 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v7, (const void **)a2[4][2]), v9 == *(_DWORD *)v6))
  {
LABEL_22:
    if (*((_DWORD *)a2 + 35) == 212) {
      long long v10 = a2[16];
    }
    else {
      long long v10 = CoreML::Specification::CropResizeLayerParams::default_instance((CoreML::Specification::CropResizeLayerParams *)v6);
    }
    if ((*((_DWORD *)v10 + 4) | 2) == 2)
    {
LABEL_26:
      *(void *)a3 = v36;
      *(_OWORD *)(a3 + 8) = v37;
      *(void *)(a3 + 24) = v38;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      goto LABEL_27;
    }
    std::operator+<char>();
    long long v11 = std::string::append(&v39, "' must be a vector of size 2 (i.e height, width) but is a vector of size ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v29, *((_DWORD *)v10 + 4));
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v29;
    }
    else {
      uint64_t v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    long long v15 = std::string::append(&v30, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    long long v17 = std::string::append(&v34, ".");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(&v34, 13);
    std::string::size_type v19 = v34.__r_.__value_.__r.__words[0];
    std::string::size_type v36 = v34.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38) < 0)
    {
      operator delete((void *)v37);
      std::string::size_type v19 = v36;
    }
    long long v37 = *(_OWORD *)&v34.__r_.__value_.__r.__words[1];
    uint64_t v20 = v35;
    *(void *)a3 = v19;
    *(_OWORD *)(a3 + 8) = v37;
    *(void *)(a3 + 24) = v20;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v21 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_48:
      operator delete(v21);
    }
  }
  else
  {
    std::string::size_type v22 = a2[14];
    if (*((char *)v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)*v22, v22[1]);
    }
    else
    {
      long long v23 = *(_OWORD *)v22;
      v30.__r_.__value_.__r.__words[2] = v22[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
    }
    char v24 = std::string::insert(&v30, 0, "Layer '");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v31, "' of type 'CropResize' expects equal ranks for its inputs, but they are not equal.");
    std::string::size_type v27 = v26->__r_.__value_.__r.__words[0];
    v39.__r_.__value_.__r.__words[0] = v26->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
    char v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&v34.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7);
    v34.__r_.__value_.__r.__words[0] = v27;
    v34.__r_.__value_.__l.__size_ = v39.__r_.__value_.__r.__words[0];
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = v28;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v21 = (void *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_48;
    }
  }
LABEL_27:
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
}

void sub_22429473C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 81) < 0) {
    operator delete(*(void **)(v40 - 104));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBranchLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v72);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
  std::string::size_type v72 = *(void *)__p;
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  long long v73 = *(_OWORD *)&__p[8];
  uint64_t v74 = v65;
  if (CoreML::Result::good((CoreML::Result *)&v72))
  {
    CoreML::Result::Result((CoreML::Result *)__p);
    std::string::size_type v72 = *(void *)__p;
    if (SHIBYTE(v74) < 0) {
      operator delete((void *)v73);
    }
    long long v73 = *(_OWORD *)&__p[8];
    uint64_t v74 = v65;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v72);
  if (!v6)
  {
    *(void *)a3 = v72;
    *(_OWORD *)(a3 + 8) = v73;
    *(void *)(a3 + 24) = v74;
    long long v73 = 0uLL;
    uint64_t v74 = 0;
    goto LABEL_95;
  }
  if (!*((_DWORD *)a2 + 18) || (uint64_t v7 = a2[10][1], v8 = *(unsigned int *)(v7 + 16), (int)v8 < 1))
  {
LABEL_13:
    uint64_t v11 = a2[4][1];
    if (*(char *)(v11 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      v71.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v12;
    }
    if (*((_DWORD *)a2 + 35) == 605) {
      uint64_t v13 = a2[16];
    }
    else {
      uint64_t v13 = CoreML::Specification::BranchLayerParams::default_instance((CoreML::Specification::BranchLayerParams *)v6);
    }
    uint64_t v14 = (uint64_t **)((char *)this + 56);
    if ((CoreML::NeuralNetworkSpecValidator *)((char *)this + 64) == (CoreML::NeuralNetworkSpecValidator *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 56, (const void **)&v71.__r_.__value_.__l.__data_))
    {
      std::string v30 = a2[14];
      if (*((char *)v30 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v69, (const std::string::value_type *)*v30, v30[1]);
      }
      else
      {
        long long v31 = *(_OWORD *)v30;
        v69.__r_.__value_.__r.__words[2] = v30[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v31;
      }
      std::string::size_type v36 = std::string::insert(&v69, 0, "Branch Layer '");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      uint64_t v38 = std::string::append(&v70, "' requires the condition blob '");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v71;
      }
      else {
        uint64_t v40 = (std::string *)v71.__r_.__value_.__r.__words[0];
      }
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v71.__r_.__value_.__l.__size_;
      }
      int v42 = std::string::append(&v57, (const std::string::value_type *)v40, size);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      BOOL v44 = std::string::append(&v59, "' which is not present in the network prior to this layer.");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v44->__r_.__value_.__l + 2);
      *(_OWORD *)__n128 __p = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v70.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (v13[2]) {
        long long v15 = (uint64_t *)v13[2];
      }
      else {
        long long v15 = &CoreML::Specification::_NeuralNetwork_default_instance_;
      }
      if (v13[3]) {
        long long v16 = (uint64_t *)v13[3];
      }
      else {
        long long v16 = &CoreML::Specification::_NeuralNetwork_default_instance_;
      }
      if (*((_DWORD *)v15 + 6))
      {
        int v17 = *((_DWORD *)v16 + 6);
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(__p, (char *)this + 56, (char *)this + 8, *(unsigned __int8 *)this, *((unsigned int *)this + 20), (char *)this + 32);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(&v59, __p, v15);
        std::string::size_type v72 = v59.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v74) < 0) {
          operator delete((void *)v73);
        }
        long long v73 = *(_OWORD *)&v59.__r_.__value_.__r.__words[1];
        uint64_t v74 = v60;
        BOOL v18 = CoreML::Result::good((CoreML::Result *)&v72);
        if (v17 <= 0 || !v18) {
          goto LABEL_76;
        }
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(&v59, (char *)this + 56, (char *)this + 8, *(unsigned __int8 *)this, *((unsigned int *)this + 20), (char *)this + 32);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(&v57, &v59, v16);
        std::string::size_type v72 = v57.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v74) < 0) {
          operator delete((void *)v73);
        }
        long long v73 = *(_OWORD *)&v57.__r_.__value_.__r.__words[1];
        uint64_t v74 = v58;
        uint64_t v56 = a3;
        BOOL v55 = CoreML::Result::good((CoreML::Result *)&v72);
        if (v55)
        {
          uint64_t v20 = v67;
          if (v67 != (uint64_t *)v68)
          {
            do
            {
              if (*((char *)v20 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)v20[4], v20[5]);
              }
              else {
                std::string v57 = *(std::string *)(v20 + 4);
              }
              if (&v63 != (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v62, (const void **)&v57.__r_.__value_.__l.__data_))
              {
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                uint64_t v21 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v70);
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                std::string::size_type v22 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v67, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v70)[7];
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                long long v23 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v67, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v70);
                std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v21 + 7, v22, (const void ***)v23 + 8);
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                char v24 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v70);
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                long long v25 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v62, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v70)[7];
                v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
                uint64_t v26 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v62, (const void **)&v57.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v70);
                std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v24 + 7, v25, (const void ***)v26 + 8);
              }
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v57.__r_.__value_.__l.__data_);
              }
              std::string::size_type v27 = (uint64_t *)v20[1];
              if (v27)
              {
                do
                {
                  char v28 = v27;
                  std::string::size_type v27 = (uint64_t *)*v27;
                }
                while (v27);
              }
              else
              {
                do
                {
                  char v28 = (uint64_t *)v20[2];
                  BOOL v29 = *v28 == (void)v20;
                  uint64_t v20 = v28;
                }
                while (!v29);
              }
              uint64_t v20 = v28;
            }
            while (v28 != (uint64_t *)v68);
          }
        }
        else
        {
          *(void *)a3 = v72;
          *(_OWORD *)(a3 + 8) = v73;
          *(void *)(a3 + 24) = v74;
          long long v73 = 0uLL;
          uint64_t v74 = 0;
        }
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v62, v63);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v61, v61[1]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v59.__r_.__value_.__l.__size_, (char *)v59.__r_.__value_.__r.__words[2]);
        a3 = v56;
        if (v55)
        {
LABEL_76:
          *(void *)a3 = v72;
          *(_OWORD *)(a3 + 8) = v73;
          *(void *)(a3 + 24) = v74;
          long long v73 = 0uLL;
          uint64_t v74 = 0;
        }
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v67, v68[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v66, v66[1]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&__p[8], *(char **)&__p[16]);
LABEL_92:
        if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_95;
        }
        std::string::size_type v50 = (void *)v71.__r_.__value_.__r.__words[0];
        goto LABEL_94;
      }
      std::string v34 = a2[14];
      if (*((char *)v34 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)*v34, v34[1]);
      }
      else
      {
        long long v35 = *(_OWORD *)v34;
        v57.__r_.__value_.__r.__words[2] = v34[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
      }
      uint64_t v51 = std::string::insert(&v57, 0, "Branch Layer '");
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      std::string v53 = std::string::append(&v59, "' has an empty If branch");
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      *(void *)&__p[16] = *((void *)&v53->__r_.__value_.__l + 2);
      *(_OWORD *)__n128 __p = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v57.__r_.__value_.__l.__data_);
      }
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_92;
  }
  int v9 = (uint64_t *)(*(void *)(v7 + 24) + 8);
  while (1)
  {
    uint64_t v10 = *v9++;
    if (v10 >= 2) {
      break;
    }
    if (!--v8) {
      goto LABEL_13;
    }
  }
  std::string::size_type v32 = a2[14];
  if (*((char *)v32 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)*v32, v32[1]);
  }
  else
  {
    long long v33 = *(_OWORD *)v32;
    v57.__r_.__value_.__r.__words[2] = v32[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v33;
  }
  BOOL v46 = std::string::insert(&v57, 0, "Branch Layer '");
  long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v47;
  v46->__r_.__value_.__l.__size_ = 0;
  v46->__r_.__value_.__r.__words[2] = 0;
  v46->__r_.__value_.__r.__words[0] = 0;
  size_t v48 = std::string::append(&v59, "' input's length cannot be more than 1");
  long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v48->__r_.__value_.__l + 2);
  *(_OWORD *)__n128 __p = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a3, 13);
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::size_type v50 = *(void **)__p;
LABEL_94:
    operator delete(v50);
  }
LABEL_95:
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
}

void sub_224295018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 - 137) < 0) {
    operator delete(*(void **)(v40 - 160));
  }
  if (*(char *)(v40 - 97) < 0) {
    operator delete(*(void **)(v40 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unsigned int v4 = a2;
    BOOL v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unsigned int v4 = (const void **)v8;
        }
        while (!v9);
      }
      unsigned int v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator(CoreML::NeuralNetworkSpecValidator *this)
{
}

void CoreML::NeuralNetworkSpecValidator::validateTransposeLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
  uint64_t v12 = *(void *)v10;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v10[8];
  uint64_t v14 = v11;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    uint64_t v12 = *(void *)v10;
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v10[8];
    uint64_t v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 985) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::TransposeLayerParams::default_instance((CoreML::Specification::TransposeLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    *(void *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v10[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0) {
      operator delete(*(void **)v10);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_2242953F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateCopyLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v17);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v15);
  uint64_t v17 = *(void *)v15;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v15[8];
  uint64_t v19 = v16;
  if (CoreML::Result::good((CoreML::Result *)&v17))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v15);
    uint64_t v17 = *(void *)v15;
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v15[8];
    uint64_t v19 = v16;
  }
  BOOL v5 = *(unsigned __int8 **)(*((void *)a1 + 4) + 8);
  BOOL v6 = *(unsigned __int8 ***)(*((void *)a1 + 7) + 8);
  uint64_t v7 = v5[23];
  if ((v7 & 0x80u) == 0) {
    long long v8 = (unsigned __int8 *)v5[23];
  }
  else {
    long long v8 = (unsigned __int8 *)*((void *)v5 + 1);
  }
  std::string v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  int v10 = (char)v9;
  if ((char)v9 < 0) {
    std::string v9 = v6[1];
  }
  if (v8 != v9) {
    goto LABEL_22;
  }
  if (v10 >= 0) {
    uint64_t v11 = *(unsigned __int8 **)(*((void *)a1 + 7) + 8);
  }
  else {
    uint64_t v11 = *v6;
  }
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v5, v11, *((void *)v5 + 1))) {
      goto LABEL_24;
    }
LABEL_22:
    *(void *)a2 = v17;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v19;
    return;
  }
  if (v5[23])
  {
    while (*v5 == *v11)
    {
      ++v5;
      ++v11;
      if (!--v7) {
        goto LABEL_24;
      }
    }
    goto LABEL_22;
  }
LABEL_24:
  std::operator+<char>();
  uint64_t v12 = std::string::append(&v14, "' has identical input and output names.");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(void *)&v15[16] = *((void *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)long long v15 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v15[23] & 0x80000000) != 0) {
    operator delete(*(void **)v15);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22429562C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBatchedMatmulLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v29);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)v27);
  uint64_t v29 = *(void *)v27;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v27[8];
  uint64_t v31 = v28;
  BOOL v5 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v29);
  if (v5)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v27);
    uint64_t v29 = *(void *)v27;
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v27[8];
    uint64_t v31 = v28;
    BOOL v5 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v29);
    if ((v5 & 1) == 0) {
      goto LABEL_70;
    }
  }
  int v6 = *((_DWORD *)a1 + 6);
  int v7 = *((_DWORD *)a1 + 18);
  if (v6 != 2)
  {
    if (v6 == 1 && v7 == 1 && *((_DWORD *)a1 + 24) == 1)
    {
      if (*(_DWORD *)(*(void *)(*((void *)a1 + 13) + 8) + 36) != *(_DWORD *)(*(void *)(*((void *)a1 + 10)
                                                                                                + 8)
                                                                                    + 36))
      {
        std::operator+<char>();
        long long v13 = std::string::append(&v26, "': has one input, in this case, output and input ranks must be equal but they are not.");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        *(void *)&v27[16] = *((void *)&v13->__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v27 = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        goto LABEL_32;
      }
    }
    else if (v6 >= 2)
    {
LABEL_26:
      if (*((_DWORD *)a1 + 35) == 1045) {
        BOOL v5 = (uint64_t *)*((void *)a1 + 16);
      }
      else {
        BOOL v5 = CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v5);
      }
      if (*((unsigned char *)v5 + 50))
      {
        std::operator+<char>();
        long long v15 = std::string::append(&v26, "': has two inputs and 'hasBias' flag is set to True.However, bias is only supported when the layer has 1 input.");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        *(void *)&v27[16] = *((void *)&v15->__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v27 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        goto LABEL_32;
      }
      if (*((int *)a1 + 6) >= 2)
      {
        BOOL v5 = *((_DWORD *)a1 + 35) == 1045
           ? (uint64_t *)*((void *)a1 + 16)
           : CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v5);
        if (*((unsigned char *)v5 + 51))
        {
          std::operator+<char>();
          uint64_t v17 = std::string::append(&v26, "': cannot use dynamic quantization with 2 inputs.");
          long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          *(void *)&v27[16] = *((void *)&v17->__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v27 = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v26.__r_.__value_.__l.__data_);
          }
          goto LABEL_32;
        }
      }
    }
    if (*((_DWORD *)a1 + 35) == 1045) {
      uint64_t v19 = (uint64_t *)*((void *)a1 + 16);
    }
    else {
      uint64_t v19 = CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v5);
    }
    if (!*((unsigned char *)v19 + 51)) {
      goto LABEL_57;
    }
    if (*((_DWORD *)a1 + 35) == 1045) {
      uint64_t v20 = (uint64_t *)*((void *)a1 + 16);
    }
    else {
      uint64_t v20 = CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v19);
    }
    uint64_t v21 = (uint64_t *)v20[2];
    std::string::basic_string[abi:ne180100]<0>(&v26, "BatchedMatMul");
    if (v21) {
      std::string::size_type v22 = v21;
    }
    else {
      std::string::size_type v22 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    CoreML::validateInt8Requirements((uint64_t)v22, (uint64_t)&v26, (CoreML::Result *)v27);
    uint64_t v29 = *(void *)v27;
    if (SHIBYTE(v31) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v27[8];
    uint64_t v31 = v28;
    HIBYTE(v28) = 0;
    v27[8] = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    uint64_t v19 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v29);
    if (v19)
    {
LABEL_57:
      if (*((_DWORD *)a1 + 6) == 1)
      {
        if (*((_DWORD *)a1 + 35) == 1045) {
          long long v23 = (uint64_t *)*((void *)a1 + 16);
        }
        else {
          long long v23 = CoreML::Specification::BatchedMatMulLayerParams::default_instance((CoreML::Specification::BatchedMatMulLayerParams *)v19);
        }
        if (v23[2]) {
          char v24 = (const CoreML::Specification::WeightParams *)v23[2];
        }
        else {
          char v24 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        if (v23[3]) {
          long long v25 = (const CoreML::Specification::WeightParams *)v23[3];
        }
        else {
          long long v25 = (const CoreML::Specification::WeightParams *)&CoreML::Specification::_WeightParams_default_instance_;
        }
        validateInnerProductWeightsBias(a1, v24, v25, (uint64_t)v27);
        uint64_t v29 = *(void *)v27;
        if (SHIBYTE(v31) < 0) {
          operator delete((void *)__p);
        }
        long long __p = *(_OWORD *)&v27[8];
        uint64_t v31 = v28;
      }
    }
LABEL_70:
    *(void *)a2 = v29;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v31;
    long long __p = 0uLL;
    uint64_t v31 = 0;
    goto LABEL_71;
  }
  if (v7 != 2 || *((_DWORD *)a1 + 24) != 1) {
    goto LABEL_26;
  }
  uint64_t v8 = *((void *)a1 + 10);
  int v9 = *(_DWORD *)(*(void *)(v8 + 8) + 36);
  int v10 = *(_DWORD *)(*(void *)(v8 + 16) + 36);
  if (v9 > v10) {
    int v10 = v9;
  }
  if (v10 <= 2) {
    int v10 = 2;
  }
  if (*(_DWORD *)(*(void *)(*((void *)a1 + 13) + 8) + 36) == v10) {
    goto LABEL_26;
  }
  std::operator+<char>();
  uint64_t v11 = std::string::append(&v26, "': given ranks of the two inputs, rank of the output is incorrect.");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(void *)&v27[16] = *((void *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)std::string::size_type v27 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
LABEL_32:
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v27[23] & 0x80000000) != 0) {
    operator delete(*(void **)v27);
  }
LABEL_71:
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
}

void sub_224295B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateConcatNDLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)v14);
  uint64_t v16 = *(void *)v14;
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v14[8];
  uint64_t v18 = v15;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
    uint64_t v16 = *(void *)v14;
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v14[8];
    uint64_t v18 = v15;
  }
  if (*((_DWORD *)a1 + 35) == 980) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::ConcatNDLayerParams::default_instance((CoreML::Specification::ConcatNDLayerParams *)v5);
  }
  if (*((int *)a1 + 18) < 1 || ((uint64_t v7 = *(int *)(a1[10][1] + 36), v8 = v6[2], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
  {
    *(void *)a2 = v16;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v18;
  }
  else
  {
    std::operator+<char>();
    int v10 = std::string::append(&v13, "' layer.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&v14[16] = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v14[23] & 0x80000000) != 0) {
      operator delete(*(void **)v14);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_224295D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateSoftmaxNDLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
  uint64_t v16 = *(void *)v14;
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v14[8];
  uint64_t v18 = v15;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
    uint64_t v16 = *(void *)v14;
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v14[8];
    uint64_t v18 = v15;
  }
  if (*((_DWORD *)a1 + 35) == 950) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::SoftmaxNDLayerParams::default_instance((CoreML::Specification::SoftmaxNDLayerParams *)v5);
  }
  if (*((int *)a1 + 18) < 1 || ((uint64_t v7 = *(int *)(a1[10][1] + 36), v8 = v6[2], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
  {
    *(void *)a2 = v16;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v18;
  }
  else
  {
    std::operator+<char>();
    int v10 = std::string::append(&v13, "' layer.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&v14[16] = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v14[23] & 0x80000000) != 0) {
      operator delete(*(void **)v14);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_224295F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReverseLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
  uint64_t v12 = *(void *)v10;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v10[8];
  uint64_t v14 = v11;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    uint64_t v12 = *(void *)v10;
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v10[8];
    uint64_t v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 960) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::ReverseLayerParams::default_instance((CoreML::Specification::ReverseLayerParams *)v5);
  }
  if (*((int *)a1 + 18) < 1 || *((_DWORD *)v6 + 4) == *(_DWORD *)(a1[10][1] + 36))
  {
    *(void *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v10[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)int v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0) {
      operator delete(*(void **)v10);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_22429614C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateBooleanElementwiseLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  int v5 = *((_DWORD *)a1 + 35);
  if (v5 > 849)
  {
    if (v5 != 855)
    {
      if (v5 == 850)
      {
        CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v9);
        goto LABEL_10;
      }
      goto LABEL_9;
    }
LABEL_8:
    CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v9);
    goto LABEL_10;
  }
  if (v5 == 840 || v5 == 845) {
    goto LABEL_8;
  }
LABEL_9:
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v9);
LABEL_10:
  *(void *)a2 = v9;
  int v6 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)int v6 = v10;
  *(void *)(a2 + 24) = v11;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v9);
    *(void *)a2 = v9;
    long long v8 = (void **)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v8);
    }
    double result = *(double *)&v10;
    *(_OWORD *)long long v8 = v10;
    *(void *)(a2 + 24) = v11;
  }
  return result;
}

void sub_2242962CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateFillLikeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  int v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)int v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)int v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_2242963BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFillStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::Result::Result((CoreML::Result *)v10);
  uint64_t v12 = *(void *)v10;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v10[8];
  uint64_t v14 = v11;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    uint64_t v12 = *(void *)v10;
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v10[8];
    uint64_t v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 1085) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::FillStaticLayerParams::default_instance((CoreML::Specification::FillStaticLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    *(void *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v10[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0) {
      operator delete(*(void **)v10);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_224296554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateFillDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296670(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateReshapeLikeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296758(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReshapeStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
  uint64_t v12 = *(void *)v10;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v10[8];
  uint64_t v14 = v11;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    uint64_t v12 = *(void *)v10;
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v10[8];
    uint64_t v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 1140) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::ReshapeStaticLayerParams::default_instance((CoreML::Specification::ReshapeStaticLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    *(void *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v10[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0) {
      operator delete(*(void **)v10);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_2242968FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateReshapeDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296A18(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateWhereLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296B00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateTrigonometryLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296BE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validatePowBroadcastableLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296CD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateExp2Layer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296DB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateUpperTriangularLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296EA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateLowerTriangularLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224296F88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateMatrixBandPartLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224297070(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateBroadcastToLikeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224297158(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateBroadcastToStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
  uint64_t v12 = *(void *)v10;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v10[8];
  uint64_t v14 = v11;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    uint64_t v12 = *(void *)v10;
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v10[8];
    uint64_t v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 1105) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::BroadcastToStaticLayerParams::default_instance((CoreML::Specification::BroadcastToStaticLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    *(void *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v10[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)long long v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0) {
      operator delete(*(void **)v10);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_2242972FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateBroadcastToDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224297418(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateAddBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  BOOL result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_224297508(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateSubtractBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  BOOL result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_2242975F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateMultiplyBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  BOOL result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_2242976E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateDivideBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  BOOL result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_2242977D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateMaxBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  BOOL result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_2242978C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateMinBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  BOOL result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_2242979B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateFloorDivBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  BOOL result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_224297AA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

BOOL CoreML::NeuralNetworkSpecValidator::validateModBroadcastableLayer@<W0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  BOOL result = CoreML::Result::good((CoreML::Result *)a2);
  if (result)
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
    return CoreML::Result::good((CoreML::Result *)a2);
  }
  return result;
}

void sub_224297B98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateGatherLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224297C80(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateScatterLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  v29[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v26);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v23);
  std::string v26 = v23;
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v24;
  uint64_t v28 = v25;
  if (CoreML::Result::good((CoreML::Result *)&v26))
  {
    CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v23);
    std::string v26 = v23;
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v24;
    uint64_t v28 = v25;
  }
  if (!*(unsigned char *)this) {
    goto LABEL_16;
  }
  long long v23 = 0;
  long long v24 = 0uLL;
  int v6 = *((_DWORD *)a2 + 18);
  if (v6 < 1) {
    goto LABEL_16;
  }
  if (v6 == 3)
  {
    uint64_t v7 = (void *)*((void *)a2 + 10);
    int v8 = *(_DWORD *)(v7[1] + 36);
    if (v8 == *(_DWORD *)(v7[3] + 36) && *(_DWORD *)(v7[2] + 36) == 1)
    {
      int v9 = *((_DWORD *)a2 + 24);
      if (v9 < 1) {
        goto LABEL_16;
      }
      if (v9 != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v22, "Scatter layer must have 1 output tensor fields filled");
        CoreML::Result::Result((_DWORD *)a3, 13);
        goto LABEL_18;
      }
      if (v8 == *(_DWORD *)(*(void *)(*((void *)a2 + 13) + 8) + 36))
      {
LABEL_16:
        *(void *)a3 = v26;
        *(_OWORD *)(a3 + 8) = __p;
        *(void *)(a3 + 24) = v28;
        return;
      }
      uint64_t v17 = (long long *)*((void *)a2 + 14);
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v18 = *v17;
        v21.__r_.__value_.__r.__words[2] = *((void *)v17 + 2);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v18;
      }
      uint64_t v19 = std::string::insert(&v21, 0, "Output rank of Scatter layer '");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v14 = std::string::append(&v22, "' does not match container input.");
    }
    else
    {
      long long v10 = (long long *)*((void *)a2 + 14);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v11 = *v10;
        v21.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
      }
      uint64_t v12 = std::string::insert(&v21, 0, "Input ranks of Scatter layer '");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      uint64_t v14 = std::string::append(&v22, "' are invalid.");
    }
    uint64_t v15 = (void *)v14->__r_.__value_.__r.__words[0];
    v29[0] = v14->__r_.__value_.__l.__size_;
    *(void *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v24) < 0) {
      operator delete(v23);
    }
    long long v23 = v15;
    *(void *)&long long v24 = v29[0];
    *(void *)((char *)&v24 + 7) = *(void *)((char *)v29 + 7);
    HIBYTE(v24) = v16;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "Scatter layer must have 3 input tensor fields filled");
  CoreML::Result::Result((_DWORD *)a3, 13);
LABEL_18:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
LABEL_31:
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete((void *)__p);
  }
}

void sub_224297FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateGatherNDLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224298150(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateScatterNDLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224298238(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateGatherAlongAxisLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224298320(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateScatterAlongAxisLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)3, 3, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224298408(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateWhereNonZeroLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_2242984F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateStackLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v21);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)v19);
  uint64_t v21 = *(void *)v19;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v19[8];
  uint64_t v23 = v20;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v21);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v19);
    uint64_t v21 = *(void *)v19;
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v19[8];
    uint64_t v23 = v20;
  }
  if (*((_DWORD *)a1 + 35) == 925) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::StackLayerParams::default_instance((CoreML::Specification::StackLayerParams *)v5);
  }
  if (*((int *)a1 + 18) < 1) {
    goto LABEL_19;
  }
  uint64_t v7 = a1[10];
  uint64_t v8 = v7[2];
  uint64_t v9 = *(int *)(v7[1] + 36);
  if (v9 != *(_DWORD *)(v8 + 36))
  {
    std::operator+<char>();
    char v16 = std::string::append(&v18, "' layer.");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&v19[16] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v19 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    goto LABEL_22;
  }
  uint64_t v10 = v6[2];
  int v11 = ~v9;
  uint64_t v12 = v9 + 1;
  if (v10 >= v11 && v10 < v12)
  {
LABEL_19:
    *(void *)a2 = v21;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v23;
    long long __p = 0uLL;
    uint64_t v23 = 0;
    goto LABEL_24;
  }
  std::operator+<char>();
  uint64_t v14 = std::string::append(&v18, "' layer.");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *(void *)&v19[16] = *((void *)&v14->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v19 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
LABEL_22:
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v19[23] & 0x80000000) != 0) {
    operator delete(*(void **)v19);
  }
LABEL_24:
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
}

void sub_224298730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSplitNDLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v20);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v18);
  uint64_t v20 = *(void *)v18;
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v18[8];
  uint64_t v22 = v19;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v20);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)2, -1, (CoreML::Result *)v18);
    uint64_t v20 = *(void *)v18;
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v18[8];
    uint64_t v22 = v19;
  }
  if (*((_DWORD *)a1 + 35) == 975) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::SplitNDLayerParams::default_instance((CoreML::Specification::SplitNDLayerParams *)v5);
  }
  uint64_t v7 = *((unsigned int *)v6 + 4);
  if ((int)v7 >= 1 || (uint64_t v7 = v6[6]) != 0)
  {
    if (*((int *)a1 + 18) < 1
      || ((v8 = *(int *)(a1[10][1] + 36), uint64_t v9 = v6[5], v9 >= -v8) ? (v10 = v9 < v8) : (v10 = 0), v10))
    {
      if (v7 == *((_DWORD *)a1 + 12))
      {
        *(void *)a2 = v20;
        *(_OWORD *)(a2 + 8) = __p;
        *(void *)(a2 + 24) = v22;
        long long __p = 0uLL;
        uint64_t v22 = 0;
        goto LABEL_29;
      }
      std::operator+<char>();
      long long v13 = std::string::append(&v17, "' layer.");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      *(void *)&v18[16] = *((void *)&v13->__r_.__value_.__l + 2);
      *(_OWORD *)std::string v18 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::operator+<char>();
      int v11 = std::string::append(&v17, "' layer.");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      *(void *)&v18[16] = *((void *)&v11->__r_.__value_.__l + 2);
      *(_OWORD *)std::string v18 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    std::operator+<char>();
    long long v15 = std::string::append(&v17, "' layer.");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)&v18[16] = *((void *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)std::string v18 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v18[23] & 0x80000000) != 0) {
    operator delete(*(void **)v18);
  }
LABEL_29:
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__p);
  }
}

void sub_224298A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateCeilLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224298B54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateFloorLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224298C3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateRoundLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224298D24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateSignLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224298E0C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateClipLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
  uint64_t v13 = *(void *)v11;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v11[8];
  uint64_t v15 = v12;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v13);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
    uint64_t v13 = *(void *)v11;
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v11[8];
    uint64_t v15 = v12;
  }
  if (*((_DWORD *)a1 + 35) == 660) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::ClipLayerParams::default_instance((CoreML::Specification::ClipLayerParams *)v5);
  }
  if (*((float *)v6 + 4) <= *((float *)v6 + 5))
  {
    *(void *)a2 = v13;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v15;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v10, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v11[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)int v11 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v11[23] & 0x80000000) != 0) {
      operator delete(*(void **)v11);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_224298FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateSliceStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v20);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v18);
  uint64_t v20 = *(void *)v18;
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v18[8];
  uint64_t v22 = v19;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v20);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v18);
    uint64_t v20 = *(void *)v18;
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v18[8];
    uint64_t v22 = v19;
  }
  if (*((_DWORD *)a1 + 35) == 995) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::SliceStaticLayerParams::default_instance((CoreML::Specification::SliceStaticLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    if (*((_DWORD *)v6 + 16))
    {
      if (*((_DWORD *)v6 + 28))
      {
        if (*((_DWORD *)v6 + 10))
        {
          if (*((_DWORD *)v6 + 22))
          {
            *(void *)a2 = v20;
            *(_OWORD *)(a2 + 8) = __p;
            *(void *)(a2 + 24) = v22;
            long long __p = 0uLL;
            uint64_t v22 = 0;
            goto LABEL_32;
          }
          std::operator+<char>();
          uint64_t v15 = std::string::append(&v17, "' layer.");
          long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
          *(void *)&v18[16] = *((void *)&v15->__r_.__value_.__l + 2);
          *(_OWORD *)std::string v18 = v16;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::operator+<char>();
          uint64_t v13 = std::string::append(&v17, "' layer.");
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          *(void *)&v18[16] = *((void *)&v13->__r_.__value_.__l + 2);
          *(_OWORD *)std::string v18 = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        std::operator+<char>();
        int v11 = std::string::append(&v17, "' layer.");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        *(void *)&v18[16] = *((void *)&v11->__r_.__value_.__l + 2);
        *(_OWORD *)std::string v18 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      std::operator+<char>();
      uint64_t v9 = std::string::append(&v17, "' layer.");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *(void *)&v18[16] = *((void *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)std::string v18 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v17, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v18[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)std::string v18 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v18[23] & 0x80000000) != 0) {
    operator delete(*(void **)v18);
  }
LABEL_32:
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)__p);
  }
}

void sub_224299334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateSliceDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 7, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224299480(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateTileLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_224299568(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateSlidingWindowsLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
  uint64_t v16 = *(void *)v14;
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v14[8];
  uint64_t v18 = v15;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
    uint64_t v16 = *(void *)v14;
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v14[8];
    uint64_t v18 = v15;
  }
  if (*((_DWORD *)a1 + 35) == 1005) {
    int v6 = a1[16];
  }
  else {
    int v6 = CoreML::Specification::SlidingWindowsLayerParams::default_instance((CoreML::Specification::SlidingWindowsLayerParams *)v5);
  }
  if (*((int *)a1 + 18) < 1 || ((uint64_t v7 = *(int *)(a1[10][1] + 36), v8 = v6[2], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
  {
    *(void *)a2 = v16;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v18;
  }
  else
  {
    std::operator+<char>();
    long long v10 = std::string::append(&v13, "' layer.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&v14[16] = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v14[23] & 0x80000000) != 0) {
      operator delete(*(void **)v14);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_224299730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateReverseSeqLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_22429984C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateReductionTypeLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v62);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v60);
  uint64_t v62 = *(void *)v60;
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v60[8];
  uint64_t v64 = v61;
  if (CoreML::Result::good((CoreML::Result *)&v62))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v60);
    uint64_t v62 = *(void *)v60;
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v60[8];
    uint64_t v64 = v61;
  }
  if (*((int *)a1 + 18) < 1) {
    goto LABEL_164;
  }
  uint64_t v5 = *(int *)(*(void *)(*((void *)a1 + 10) + 8) + 36);
  std::operator+<char>();
  int v6 = std::string::append(&v59, "' layer.");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(void *)&v60[16] = *((void *)&v6->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v60 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  int v8 = *((_DWORD *)a1 + 35);
  if (v8 > 1274)
  {
    if (v8 <= 1284)
    {
      if (v8 == 1275)
      {
        uint64_t v45 = *((void *)a1 + 16);
        uint64_t v46 = *(void *)(v45 + 24);
        if (v46) {
          long long v47 = (void *)(v46 + 8);
        }
        else {
          long long v47 = 0;
        }
        if (v46) {
          uint64_t v48 = v46 + 8 + 8 * *(int *)(v45 + 16);
        }
        else {
          uint64_t v48 = 0;
        }
        if (v47 != (void *)v48)
        {
          while (*v47 >= -(int)v5 && *v47 < v5)
          {
            if (++v47 == (void *)v48) {
              goto LABEL_162;
            }
          }
          goto LABEL_160;
        }
      }
      else if (v8 == 1280)
      {
        uint64_t v21 = *((void *)a1 + 16);
        uint64_t v22 = *(void *)(v21 + 24);
        uint64_t v23 = v22 ? (void *)(v22 + 8) : 0;
        uint64_t v24 = v22 ? v22 + 8 + 8 * *(int *)(v21 + 16) : 0;
        if (v23 != (void *)v24)
        {
          while (*v23 >= -(int)v5 && *v23 < v5)
          {
            if (++v23 == (void *)v24) {
              goto LABEL_162;
            }
          }
          goto LABEL_160;
        }
      }
    }
    else
    {
      switch(v8)
      {
        case 1285:
          uint64_t v33 = *((void *)a1 + 16);
          uint64_t v34 = *(void *)(v33 + 24);
          if (v34) {
            long long v35 = (void *)(v34 + 8);
          }
          else {
            long long v35 = 0;
          }
          if (v34) {
            uint64_t v36 = v34 + 8 + 8 * *(int *)(v33 + 16);
          }
          else {
            uint64_t v36 = 0;
          }
          if (v35 != (void *)v36)
          {
            while (*v35 >= -(int)v5 && *v35 < v5)
            {
              if (++v35 == (void *)v36) {
                goto LABEL_162;
              }
            }
            goto LABEL_160;
          }
          break;
        case 1290:
          uint64_t v37 = *((void *)a1 + 16);
          uint64_t v38 = *(void *)(v37 + 24);
          if (v38) {
            long long v39 = (void *)(v38 + 8);
          }
          else {
            long long v39 = 0;
          }
          if (v38) {
            uint64_t v40 = v38 + 8 + 8 * *(int *)(v37 + 16);
          }
          else {
            uint64_t v40 = 0;
          }
          if (v39 != (void *)v40)
          {
            while (*v39 >= -(int)v5 && *v39 < v5)
            {
              if (++v39 == (void *)v40) {
                goto LABEL_162;
              }
            }
            goto LABEL_160;
          }
          break;
        case 1295:
          uint64_t v13 = *((void *)a1 + 16);
          uint64_t v14 = *(void *)(v13 + 24);
          uint64_t v15 = v14 ? (void *)(v14 + 8) : 0;
          uint64_t v16 = v14 ? v14 + 8 + 8 * *(int *)(v13 + 16) : 0;
          if (v15 != (void *)v16)
          {
            while (*v15 >= -(int)v5 && *v15 < v5)
            {
              if (++v15 == (void *)v16) {
                goto LABEL_162;
              }
            }
            goto LABEL_160;
          }
          break;
      }
    }
    goto LABEL_162;
  }
  if (v8 <= 1259)
  {
    if (v8 == 1250)
    {
      uint64_t v41 = *((void *)a1 + 16);
      uint64_t v42 = *(void *)(v41 + 24);
      if (v42) {
        long long v43 = (void *)(v42 + 8);
      }
      else {
        long long v43 = 0;
      }
      if (v42) {
        uint64_t v44 = v42 + 8 + 8 * *(int *)(v41 + 16);
      }
      else {
        uint64_t v44 = 0;
      }
      if (v43 != (void *)v44)
      {
        while (*v43 >= -v5 && *v43 < v5)
        {
          if (++v43 == (void *)v44) {
            goto LABEL_162;
          }
        }
        goto LABEL_160;
      }
    }
    else if (v8 == 1255)
    {
      uint64_t v17 = *((void *)a1 + 16);
      uint64_t v18 = *(void *)(v17 + 24);
      uint64_t v19 = v18 ? (void *)(v18 + 8) : 0;
      uint64_t v20 = v18 ? v18 + 8 + 8 * *(int *)(v17 + 16) : 0;
      if (v19 != (void *)v20)
      {
        while (*v19 >= -v5 && *v19 < v5)
        {
          if (++v19 == (void *)v20) {
            goto LABEL_162;
          }
        }
        goto LABEL_160;
      }
    }
    goto LABEL_162;
  }
  if (v8 == 1260)
  {
    uint64_t v25 = *((void *)a1 + 16);
    uint64_t v26 = *(void *)(v25 + 24);
    if (v26) {
      std::string::size_type v27 = (void *)(v26 + 8);
    }
    else {
      std::string::size_type v27 = 0;
    }
    if (v26) {
      uint64_t v28 = v26 + 8 + 8 * *(int *)(v25 + 16);
    }
    else {
      uint64_t v28 = 0;
    }
    if (v27 != (void *)v28)
    {
      while (*v27 >= -v5 && *v27 < v5)
      {
        if (++v27 == (void *)v28) {
          goto LABEL_162;
        }
      }
      goto LABEL_160;
    }
    goto LABEL_162;
  }
  if (v8 == 1265)
  {
    uint64_t v29 = *((void *)a1 + 16);
    uint64_t v30 = *(void *)(v29 + 24);
    if (v30) {
      uint64_t v31 = (void *)(v30 + 8);
    }
    else {
      uint64_t v31 = 0;
    }
    if (v30) {
      uint64_t v32 = v30 + 8 + 8 * *(int *)(v29 + 16);
    }
    else {
      uint64_t v32 = 0;
    }
    if (v31 != (void *)v32)
    {
      while (*v31 >= -v5 && *v31 < v5)
      {
        if (++v31 == (void *)v32) {
          goto LABEL_162;
        }
      }
      goto LABEL_160;
    }
    goto LABEL_162;
  }
  if (v8 != 1270
    || ((uint64_t v9 = *((void *)a1 + 16), (v10 = *(void *)(v9 + 24)) != 0) ? (v11 = (void *)(v10 + 8)) : (v11 = 0),
        !v10 ? (uint64_t v12 = 0) : (uint64_t v12 = v10 + 8 + 8 * *(int *)(v9 + 16)),
        v11 == (void *)v12))
  {
LABEL_162:
    if ((v60[23] & 0x80000000) != 0) {
      operator delete(*(void **)v60);
    }
LABEL_164:
    *(void *)a2 = v62;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v64;
    return;
  }
  while (*v11 >= -(int)v5 && *v11 < v5)
  {
    if (++v11 == (void *)v12) {
      goto LABEL_162;
    }
  }
LABEL_160:
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v60[23] & 0x80000000) != 0) {
    operator delete(*(void **)v60);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__p);
  }
}

void sub_224299E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoopLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v109);
  CoreML::validateInputCount((CoreML *)a2, 0, 1, (CoreML::Result *)v103);
  std::string::size_type v109 = *(void *)v103;
  if (SHIBYTE(v111) < 0) {
    operator delete((void *)v110);
  }
  long long v110 = *(_OWORD *)&v103[8];
  uint64_t v111 = v104;
  if (CoreML::Result::good((CoreML::Result *)&v109))
  {
    CoreML::Result::Result((CoreML::Result *)v103);
    std::string::size_type v109 = *(void *)v103;
    if (SHIBYTE(v111) < 0) {
      operator delete((void *)v110);
    }
    long long v110 = *(_OWORD *)&v103[8];
    uint64_t v111 = v104;
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v109);
  if (!v6)
  {
    *(void *)a3 = v109;
    *(_OWORD *)(a3 + 8) = v110;
    *(void *)(a3 + 24) = v111;
    long long v110 = 0uLL;
    uint64_t v111 = 0;
    goto LABEL_123;
  }
  if (!*((_DWORD *)a2 + 18) || (uint64_t v7 = a2[10][1], v8 = *(unsigned int *)(v7 + 16), (int)v8 < 1))
  {
LABEL_13:
    if (*((_DWORD *)a2 + 35) == 615) {
      long long v11 = a2[16];
    }
    else {
      long long v11 = CoreML::Specification::LoopLayerParams::default_instance((CoreML::Specification::LoopLayerParams *)v6);
    }
    uint64_t v12 = v11[2];
    if (v11[3]) {
      uint64_t v13 = (uint64_t *)v11[3];
    }
    else {
      uint64_t v13 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    }
    if (*(char *)(v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v12;
      v108.__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
      *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v14;
    }
    if (v11[4]) {
      uint64_t v15 = (uint64_t *)v11[4];
    }
    else {
      uint64_t v15 = &CoreML::Specification::_NeuralNetwork_default_instance_;
    }
    if (!*((_DWORD *)v15 + 6))
    {
      uint64_t v22 = a2[14];
      if (*((char *)v22 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)*v22, v22[1]);
      }
      else
      {
        long long v23 = *(_OWORD *)v22;
        v91.__r_.__value_.__r.__words[2] = v22[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v23;
      }
      uint64_t v28 = std::string::insert(&v91, 0, "Loop Layer '");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v93, "' has an empty body network");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      *(void *)&v103[16] = *((void *)&v30->__r_.__value_.__l + 2);
      *(_OWORD *)long long v103 = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      goto LABEL_57;
    }
    int v16 = *((_DWORD *)v13 + 6);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v108.__r_.__value_.__l.__size_)
      {
LABEL_29:
        if (v16 > 0) {
          goto LABEL_30;
        }
        goto LABEL_44;
      }
    }
    else if (*((unsigned char *)&v108.__r_.__value_.__s + 23))
    {
      goto LABEL_29;
    }
    if (v16 < 1)
    {
      if (v11[5] || *((_DWORD *)a2 + 6))
      {
LABEL_30:
        uint64_t v90 = (uint64_t **)((char *)this + 56);
        uint64_t v17 = CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(v103, (char *)this + 56, (char *)this + 8, *(unsigned __int8 *)this, *((unsigned int *)this + 20), (char *)this + 32);
        int v89 = v16;
        uint64_t v88 = a3;
        if (v16 >= 1)
        {
          CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(&v93, v17, v13);
          std::string::size_type v109 = v93.__r_.__value_.__r.__words[0];
          if (SHIBYTE(v111) < 0) {
            operator delete((void *)v110);
          }
          long long v110 = *(_OWORD *)&v93.__r_.__value_.__r.__words[1];
          uint64_t v111 = v94;
          if (!CoreML::Result::good((CoreML::Result *)&v109))
          {
            *(void *)a3 = v109;
            *(_OWORD *)(a3 + 8) = v110;
            *(void *)(a3 + 24) = v111;
            long long v110 = 0uLL;
            uint64_t v111 = 0;
LABEL_119:
            std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v106, v107[0]);
            std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v105, v105[1]);
            std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v103[8], *(char **)&v103[16]);
LABEL_120:
            if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_123;
            }
            uint64_t v40 = (void *)v108.__r_.__value_.__r.__words[0];
            goto LABEL_122;
          }
          if ((CoreML::NeuralNetworkSpecValidator *)((char *)this + 64) == (CoreML::NeuralNetworkSpecValidator *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v90, (const void **)&v108.__r_.__value_.__l.__data_))
          {
            if (v107 == (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v106, (const void **)&v108.__r_.__value_.__l.__data_))
            {
              long long v43 = a2[14];
              if (*((char *)v43 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v100, (const std::string::value_type *)*v43, v43[1]);
              }
              else
              {
                long long v44 = *(_OWORD *)v43;
                v100.__r_.__value_.__r.__words[2] = v43[2];
                *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v44;
              }
              std::string v78 = std::string::insert(&v100, 0, "Loop Layer '");
              long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
              v101.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v79;
              v78->__r_.__value_.__l.__size_ = 0;
              v78->__r_.__value_.__r.__words[2] = 0;
              v78->__r_.__value_.__r.__words[0] = 0;
              uint64_t v80 = std::string::append(&v101, "': has conditionVar named '");
              long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v81;
              v80->__r_.__value_.__l.__size_ = 0;
              v80->__r_.__value_.__r.__words[2] = 0;
              v80->__r_.__value_.__r.__words[0] = 0;
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v82 = &v108;
              }
              else {
                uint64_t v82 = (std::string *)v108.__r_.__value_.__r.__words[0];
              }
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v108.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v108.__r_.__value_.__l.__size_;
              }
              uint64_t v84 = std::string::append(&__p, (const std::string::value_type *)v82, size);
              long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
              v91.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v85;
              v84->__r_.__value_.__l.__size_ = 0;
              v84->__r_.__value_.__r.__words[2] = 0;
              v84->__r_.__value_.__r.__words[0] = 0;
              uint64_t v86 = std::string::append(&v91, "' which is not produced by the condition network");
              long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
              v93.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v87;
              v86->__r_.__value_.__l.__size_ = 0;
              v86->__r_.__value_.__r.__words[2] = 0;
              v86->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v101.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v100.__r_.__value_.__l.__data_);
              }
              CoreML::Result::Result((_DWORD *)a3, 13);
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v93.__r_.__value_.__l.__data_);
              }
              goto LABEL_119;
            }
          }
          else
          {
            v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
            uint64_t v18 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (const void **)&v108.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v91);
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v93, (const void ***)v18 + 7);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
            uint64_t v19 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v106, (const void **)&v108.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
            std::set<std::string>::set[abi:ne180100]((uint64_t *)&v91, (const void ***)v19 + 7);
            if (std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(&v93, (unsigned __int8 **)&v91))
            {
              uint64_t v20 = a2[14];
              if (*((char *)v20 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v98, (const std::string::value_type *)*v20, v20[1]);
              }
              else
              {
                long long v21 = *(_OWORD *)v20;
                v98.__r_.__value_.__r.__words[2] = v20[2];
                *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v21;
              }
              uint64_t v68 = std::string::insert(&v98, 0, "Loop Layer '");
              long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
              v99.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v69;
              v68->__r_.__value_.__l.__size_ = 0;
              v68->__r_.__value_.__r.__words[2] = 0;
              v68->__r_.__value_.__r.__words[0] = 0;
              std::string v70 = std::string::append(&v99, "': has conditionVar named '");
              long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
              v100.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v71;
              v70->__r_.__value_.__l.__size_ = 0;
              v70->__r_.__value_.__r.__words[2] = 0;
              v70->__r_.__value_.__r.__words[0] = 0;
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v72 = &v108;
              }
              else {
                std::string::size_type v72 = (std::string *)v108.__r_.__value_.__r.__words[0];
              }
              if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v73 = HIBYTE(v108.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v73 = v108.__r_.__value_.__l.__size_;
              }
              uint64_t v74 = std::string::append(&v100, (const std::string::value_type *)v72, v73);
              long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
              v101.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v75;
              v74->__r_.__value_.__l.__size_ = 0;
              v74->__r_.__value_.__r.__words[2] = 0;
              v74->__r_.__value_.__r.__words[0] = 0;
              BOOL v76 = std::string::append(&v101, "' which is not produced by the condition network");
              long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v77;
              v76->__r_.__value_.__l.__size_ = 0;
              v76->__r_.__value_.__r.__words[2] = 0;
              v76->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v101.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v100.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v99.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v98.__r_.__value_.__l.__data_);
              }
              CoreML::Result::Result((_DWORD *)a3, 13);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v91, (char *)v91.__r_.__value_.__l.__size_);
              std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v93, (char *)v93.__r_.__value_.__l.__size_);
              goto LABEL_119;
            }
            std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v91, (char *)v91.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v93, (char *)v93.__r_.__value_.__l.__size_);
          }
          uint64_t v45 = v106;
          if (v106 != (uint64_t *)v107)
          {
            do
            {
              if (*((char *)v45 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v93, (const std::string::value_type *)v45[4], v45[5]);
              }
              else {
                std::string v93 = *(std::string *)(v45 + 4);
              }
              v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
              uint64_t v46 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (const void **)&v93.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v91);
              v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
              long long v47 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v106, (const void **)&v93.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v91)[7];
              v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&v93;
              uint64_t v48 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v106, (const void **)&v93.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v91);
              std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v46 + 7, v47, (const void ***)v48 + 8);
              if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v93.__r_.__value_.__l.__data_);
              }
              long long v49 = (uint64_t *)v45[1];
              if (v49)
              {
                do
                {
                  std::string::size_type v50 = v49;
                  long long v49 = (uint64_t *)*v49;
                }
                while (v49);
              }
              else
              {
                do
                {
                  std::string::size_type v50 = (uint64_t *)v45[2];
                  BOOL v51 = *v50 == (void)v45;
                  uint64_t v45 = v50;
                }
                while (!v51);
              }
              uint64_t v45 = v50;
            }
            while (v50 != (uint64_t *)v107);
          }
        }
        CoreML::NeuralNetworkSpecValidator::NeuralNetworkSpecValidator(&v93, v90, (char *)this + 8, *(unsigned __int8 *)this, (*((_DWORD *)this + 20) + 1), (char *)this + 32);
        CoreML::NeuralNetworkSpecValidator::validateNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>(&v91, &v93, v15);
        std::string::size_type v109 = v91.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v111) < 0) {
          operator delete((void *)v110);
        }
        long long v110 = *(_OWORD *)&v91.__r_.__value_.__r.__words[1];
        uint64_t v111 = v92;
        if (CoreML::Result::good((CoreML::Result *)&v109))
        {
          if (v89 <= 0)
          {
            uint64_t v58 = v96;
            if (v96 != (uint64_t *)v97)
            {
              do
              {
                if (*((char *)v58 + 55) < 0) {
                  std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)v58[4], v58[5]);
                }
                else {
                  std::string v91 = *(std::string *)(v58 + 4);
                }
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                std::string v59 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                uint64_t v60 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p)[7];
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                uint64_t v61 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
                std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v59 + 7, v60, (const void ***)v61 + 8);
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v91.__r_.__value_.__l.__data_);
                }
                uint64_t v62 = (uint64_t *)v58[1];
                if (v62)
                {
                  do
                  {
                    uint64_t v63 = v62;
                    uint64_t v62 = (uint64_t *)*v62;
                  }
                  while (v62);
                }
                else
                {
                  do
                  {
                    uint64_t v63 = (uint64_t *)v58[2];
                    BOOL v51 = *v63 == (void)v58;
                    uint64_t v58 = v63;
                  }
                  while (!v51);
                }
                uint64_t v58 = v63;
              }
              while (v63 != (uint64_t *)v97);
            }
          }
          else
          {
            long long v52 = v106;
            if (v106 != (uint64_t *)v107)
            {
              do
              {
                if (*((char *)v52 + 55) < 0) {
                  std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)v52[4], v52[5]);
                }
                else {
                  std::string v91 = *(std::string *)(v52 + 4);
                }
                if (v97 != (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v96, (const void **)&v91.__r_.__value_.__l.__data_))
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                  std::string v53 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                  long long v54 = (const void **)std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p)[7];
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
                  BOOL v55 = std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)&v91.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
                  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v53 + 7, v54, (const void ***)v55 + 8);
                }
                if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v91.__r_.__value_.__l.__data_);
                }
                uint64_t v56 = (uint64_t *)v52[1];
                if (v56)
                {
                  do
                  {
                    std::string v57 = v56;
                    uint64_t v56 = (uint64_t *)*v56;
                  }
                  while (v56);
                }
                else
                {
                  do
                  {
                    std::string v57 = (uint64_t *)v52[2];
                    BOOL v51 = *v57 == (void)v52;
                    long long v52 = v57;
                  }
                  while (!v51);
                }
                long long v52 = v57;
              }
              while (v57 != (uint64_t *)v107);
            }
          }
        }
        *(void *)uint64_t v88 = v109;
        *(_OWORD *)(v88 + 8) = v110;
        *(void *)(v88 + 24) = v111;
        long long v110 = 0uLL;
        uint64_t v111 = 0;
        std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)&v96, v97[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v95, v95[1]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v93.__r_.__value_.__l.__size_, (char *)v93.__r_.__value_.__r.__words[2]);
        goto LABEL_119;
      }
      uint64_t v41 = a2[14];
      if (*((char *)v41 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)*v41, v41[1]);
      }
      else
      {
        long long v42 = *(_OWORD *)v41;
        v91.__r_.__value_.__r.__words[2] = v41[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v42;
      }
      uint64_t v64 = std::string::insert(&v91, 0, "Loop Layer '");
      long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      uint64_t v66 = std::string::append(&v93, "': has no input, no condition network and max loop iterations is 0.");
      long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      *(void *)&v103[16] = *((void *)&v66->__r_.__value_.__l + 2);
      *(_OWORD *)long long v103 = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
LABEL_57:
      CoreML::Result::Result((_DWORD *)a3, 13);
      if ((v103[23] & 0x80000000) != 0) {
        operator delete(*(void **)v103);
      }
      goto LABEL_120;
    }
LABEL_44:
    uint64_t v26 = a2[14];
    if (*((char *)v26 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)*v26, v26[1]);
    }
    else
    {
      long long v27 = *(_OWORD *)v26;
      v91.__r_.__value_.__r.__words[2] = v26[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v27;
    }
    uint64_t v32 = std::string::insert(&v91, 0, "Loop Layer '");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint64_t v34 = std::string::append(&v93, "': condition variable must be provided if condition network exists and vice versa.");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    *(void *)&v103[16] = *((void *)&v34->__r_.__value_.__l + 2);
    *(_OWORD *)long long v103 = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    goto LABEL_57;
  }
  uint64_t v9 = (uint64_t *)(*(void *)(v7 + 24) + 8);
  while (1)
  {
    uint64_t v10 = *v9++;
    if (v10 >= 2) {
      break;
    }
    if (!--v8) {
      goto LABEL_13;
    }
  }
  uint64_t v24 = a2[14];
  if (*((char *)v24 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v91, (const std::string::value_type *)*v24, v24[1]);
  }
  else
  {
    long long v25 = *(_OWORD *)v24;
    v91.__r_.__value_.__r.__words[2] = v24[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v25;
  }
  uint64_t v36 = std::string::insert(&v91, 0, "Loop Layer '");
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  uint64_t v38 = std::string::append(&v93, "' input's length cannot be more than 1");
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  *(void *)&v103[16] = *((void *)&v38->__r_.__value_.__l + 2);
  *(_OWORD *)long long v103 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a3, 13);
  if ((v103[23] & 0x80000000) != 0)
  {
    uint64_t v40 = *(void **)v103;
LABEL_122:
    operator delete(v40);
  }
LABEL_123:
  if (SHIBYTE(v111) < 0) {
    operator delete((void *)v110);
  }
}

void sub_22429ABF8(_Unwind_Exception *a1)
{
  CoreML::NeuralNetworkSpecValidator::~NeuralNetworkSpecValidator((CoreML::NeuralNetworkSpecValidator *)(v1 - 256));
  if (*(char *)(v1 - 137) < 0) {
    operator delete(*(void **)(v1 - 160));
  }
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(a1);
}

uint64_t std::operator==[abi:ne180100]<std::string,std::less<std::string>,std::allocator<std::string>>(void *a1, unsigned __int8 **a2)
{
  if ((unsigned __int8 *)a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)(a1 + 1);
  uint64_t v3 = (unsigned __int8 *)*a1;
  if ((void *)*a1 == a1 + 1) {
    return 1;
  }
  unsigned int v4 = *a2;
  do
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v11, v3 + 32, v4 + 32);
    if (!result) {
      break;
    }
    BOOL v6 = (unsigned __int8 *)*((void *)v3 + 1);
    uint64_t v7 = v3;
    if (v6)
    {
      do
      {
        uint64_t v3 = v6;
        BOOL v6 = *(unsigned __int8 **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v3 = (unsigned __int8 *)*((void *)v7 + 2);
        BOOL v8 = *(void *)v3 == (void)v7;
        uint64_t v7 = v3;
      }
      while (!v8);
    }
    uint64_t v9 = (unsigned __int8 *)*((void *)v4 + 1);
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = *(unsigned __int8 **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (unsigned __int8 *)*((void *)v4 + 2);
        BOOL v8 = *(void *)v10 == (void)v4;
        unsigned int v4 = v10;
      }
      while (!v8);
    }
    unsigned int v4 = v10;
  }
  while (v3 != v2);
  return result;
}

void CoreML::NeuralNetworkSpecValidator::validateLoopContinueBreakLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  v25[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v22);
  CoreML::Result::Result((CoreML::Result *)&v19);
  uint64_t v22 = v19;
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v20;
  uint64_t v24 = v21;
  if (CoreML::Result::good((CoreML::Result *)&v22))
  {
    CoreML::Result::Result((CoreML::Result *)&v19);
    uint64_t v22 = v19;
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v20;
    uint64_t v24 = v21;
  }
  if (CoreML::Result::good((CoreML::Result *)&v22) && !*((_DWORD *)this + 20))
  {
    uint64_t v19 = 0;
    long long v20 = 0uLL;
    if (*((_DWORD *)a2 + 35) == 620)
    {
      BOOL v6 = (long long *)*((void *)a2 + 14);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v17.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v10 = std::string::insert(&v17, 0, "Loop Break Layer '");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = std::string::append(&v18, "' must be inside the bodyNetwork of a loop layer.");
    }
    else
    {
      BOOL v8 = (long long *)*((void *)a2 + 14);
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v17.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v13 = std::string::insert(&v17, 0, "Loop Continue Layer '");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      uint64_t v12 = std::string::append(&v18, "' must be inside the bodyNetwork of a loop layer.");
    }
    uint64_t v15 = (void *)v12->__r_.__value_.__r.__words[0];
    v25[0] = v12->__r_.__value_.__l.__size_;
    *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    *(void *)((char *)&v20 + 7) = *(void *)((char *)v25 + 7);
    uint64_t v19 = v15;
    *(void *)&long long v20 = v25[0];
    HIBYTE(v20) = v16;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if (SHIBYTE(v20) < 0) {
      operator delete(v19);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    *(void *)a3 = v22;
    *(_OWORD *)(a3 + 8) = __p;
    *(void *)(a3 + 24) = v24;
  }
}

void sub_22429B1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateActivationLayers@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  uint64_t v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)uint64_t v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)uint64_t v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_22429B300(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRankPreservingReshapeLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v27);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v25);
  uint64_t v27 = *(void *)v25;
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  long long v28 = *(_OWORD *)&v25[8];
  uint64_t v29 = v26;
  if (CoreML::Result::good((CoreML::Result *)&v27))
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v25);
    uint64_t v27 = *(void *)v25;
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)v28);
    }
    long long v28 = *(_OWORD *)&v25[8];
    uint64_t v29 = v26;
    if (!CoreML::Result::good((CoreML::Result *)&v27)) {
      goto LABEL_16;
    }
  }
  CoreML::validateRankExists((CoreML *)a1, (CoreML::Result *)v25);
  uint64_t v27 = *(void *)v25;
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
  long long v28 = *(_OWORD *)&v25[8];
  uint64_t v29 = v26;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v27);
  if (!v5) {
    goto LABEL_16;
  }
  if (*((_DWORD *)a1 + 35) == 1150) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::RankPreservingReshapeLayerParams::default_instance((CoreML::Specification::RankPreservingReshapeLayerParams *)v5);
  }
  int v7 = *((_DWORD *)v6 + 4);
  if (v7)
  {
    int v8 = *(_DWORD *)(a1[10][1] + 36);
    if (v8 == *(_DWORD *)(a1[13][1] + 36))
    {
      if (v8 == v7)
      {
LABEL_16:
        *(void *)a2 = v27;
        *(_OWORD *)(a2 + 8) = v28;
        *(void *)(a2 + 24) = v29;
        long long v28 = 0uLL;
        uint64_t v29 = 0;
        goto LABEL_38;
      }
      uint64_t v13 = a1[14];
      if (*((char *)v13 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v13, v13[1]);
      }
      else
      {
        long long v14 = *(_OWORD *)v13;
        __p.__r_.__value_.__r.__words[2] = v13[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
      }
      uint64_t v19 = std::string::insert(&__p, 0, "RankPreservingReshape Layer '");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append(&v24, "': input rank must be same as the length of the target shape property.");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      *(void *)&v25[16] = *((void *)&v21->__r_.__value_.__l + 2);
      *(_OWORD *)long long v25 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v11 = a1[14];
      if (*((char *)v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)*v11, v11[1]);
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        __p.__r_.__value_.__r.__words[2] = v11[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v15 = std::string::insert(&__p, 0, "RankPreservingReshape Layer '");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v24.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::string v17 = std::string::append(&v24, "': input and output rank must be equal.");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      *(void *)&v25[16] = *((void *)&v17->__r_.__value_.__l + 2);
      *(_OWORD *)long long v25 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  else
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v24, "' layer.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&v25[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)long long v25 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  if ((v25[23] & 0x80000000) != 0) {
    operator delete(*(void **)v25);
  }
LABEL_38:
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)v28);
  }
}

void sub_22429B688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::validateRankExists(CoreML *this@<X0>, CoreML::Result *a2@<X8>)
{
  if (*((_DWORD *)this + 18)) {
    BOOL v4 = *((_DWORD *)this + 24) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    BOOL v5 = (long long *)*((void *)this + 14);
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((void *)v5 + 1));
    }
    else
    {
      long long v6 = *v5;
      __p.__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    int v7 = std::string::insert(&__p, 0, "Layer '");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = std::string::append(&v12, "' must have rank specified for its input and output.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    long long v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(a2, 13);
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)v13);
    }
  }
  else
  {
    CoreML::Result::Result(a2);
  }
}

void sub_22429B848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateFlattenTo2DLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v16);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
  uint64_t v16 = *(void *)v14;
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v14[8];
  uint64_t v18 = v15;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v16);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v14);
    uint64_t v16 = *(void *)v14;
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v14[8];
    uint64_t v18 = v15;
  }
  if (*((_DWORD *)a1 + 35) == 1130) {
    long long v6 = a1[16];
  }
  else {
    long long v6 = CoreML::Specification::FlattenTo2DLayerParams::default_instance((CoreML::Specification::FlattenTo2DLayerParams *)v5);
  }
  if (*((int *)a1 + 18) < 1 || ((uint64_t v7 = *(int *)(a1[10][1] + 36), v8 = v6[2], v8 >= -v7) ? (v9 = v8 < v7) : (v9 = 0), v9))
  {
    *(void *)a2 = v16;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v18;
  }
  else
  {
    std::operator+<char>();
    long long v10 = std::string::append(&v13, "' layer.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&v14[16] = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)std::string::size_type v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v14[23] & 0x80000000) != 0) {
      operator delete(*(void **)v14);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_22429BA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateExpandDimsLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v87);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
  uint64_t v87 = *(void *)__p;
  if (SHIBYTE(v89) < 0) {
    operator delete((void *)v88);
  }
  long long v88 = *(_OWORD *)&__p[8];
  uint64_t v89 = v86;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v87);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
    uint64_t v87 = *(void *)__p;
    if (SHIBYTE(v89) < 0) {
      operator delete((void *)v88);
    }
    long long v88 = *(_OWORD *)&__p[8];
    uint64_t v89 = v86;
  }
  if (*((_DWORD *)a1 + 35) == 1125) {
    long long v6 = (CoreML::Specification::ExpandDimsLayerParams *)a1[16];
  }
  else {
    long long v6 = (CoreML::Specification::ExpandDimsLayerParams *)CoreML::Specification::ExpandDimsLayerParams::default_instance((CoreML::Specification::ExpandDimsLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    uint64_t v7 = 0;
    *(void *)&__p[8] = 0;
    *(void *)&__p[16] = 0;
    *(void *)__n128 __p = &__p[8];
    while (1)
    {
      uint64_t v8 = (int *)(*((_DWORD *)a1 + 35) == 1125
                 ? a1[16]
                 : CoreML::Specification::ExpandDimsLayerParams::default_instance(v6));
      if (v7 >= v8[4]) {
        break;
      }
      LODWORD(v81.__r_.__value_.__l.__data_) = 0;
      if (*((_DWORD *)a1 + 35) == 1125) {
        BOOL v9 = a1[16];
      }
      else {
        BOOL v9 = CoreML::Specification::ExpandDimsLayerParams::default_instance((CoreML::Specification::ExpandDimsLayerParams *)v8);
      }
      int v10 = *(_DWORD *)(v9[3] + 8 * v7 + 8);
      LODWORD(v81.__r_.__value_.__l.__data_) = v10;
      uint64_t v11 = *(void *)&__p[8];
      if (*(void *)&__p[8])
      {
        std::string v12 = (uint64_t *)&__p[8];
        do
        {
          std::string v13 = (uint64_t *)v11;
          std::string::size_type v14 = v12;
          int v15 = *(_DWORD *)(v11 + 28);
          uint64_t v16 = (uint64_t *)(v11 + 8);
          if (v15 >= v10)
          {
            uint64_t v16 = v13;
            std::string v12 = v13;
          }
          uint64_t v11 = *v16;
        }
        while (v11);
        if (v12 != (uint64_t *)&__p[8])
        {
          if (v15 < v10) {
            std::string v13 = v14;
          }
          if (*((_DWORD *)v13 + 7) <= v10)
          {
            long long v23 = a1[14];
            if (*((char *)v23 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v23, v23[1]);
            }
            else
            {
              long long v24 = *(_OWORD *)v23;
              v82.__r_.__value_.__r.__words[2] = v23[2];
              *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v24;
            }
            uint64_t v60 = std::string::insert(&v82, 0, "ExpandDims Layer '");
            long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            v83.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            uint64_t v62 = std::string::append(&v83, "': all the values in the 'axes' parameter must be unique.");
            long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v83.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v82.__r_.__value_.__l.__data_);
            }
            goto LABEL_109;
          }
        }
      }
      long long v6 = (CoreML::Specification::ExpandDimsLayerParams *)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)__p, (int *)&v81, &v81);
      ++v7;
    }
    if (*((int *)a1 + 18) >= 1 && *((_DWORD *)a1 + 24) >= 1)
    {
      int v20 = *(_DWORD *)(a1[10][1] + 36);
      int v21 = *(_DWORD *)(a1[13][1] + 36);
      if (*((_DWORD *)a1 + 35) == 1125) {
        long long v22 = (unsigned int *)a1[16];
      }
      else {
        long long v22 = (unsigned int *)CoreML::Specification::ExpandDimsLayerParams::default_instance((CoreML::Specification::ExpandDimsLayerParams *)v8);
      }
      uint64_t v29 = v22[4];
      if (v29 + v20 != v21)
      {
        uint64_t v58 = a1[14];
        if (*((char *)v58 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*v58, v58[1]);
        }
        else
        {
          long long v59 = *(_OWORD *)v58;
          v82.__r_.__value_.__r.__words[2] = v58[2];
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v59;
        }
        long long v65 = std::string::insert(&v82, 0, "ExpandDims Layer '");
        long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        long long v67 = std::string::append(&v83, "': input rank plus the length of the axes parameter must equal output rank.");
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
LABEL_109:
        CoreML::Result::Result((_DWORD *)a2, 13);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        goto LABEL_132;
      }
      memset(&v84, 0, sizeof(v84));
      if ((int)v29 < 1)
      {
        long long v43 = 0;
LABEL_100:
        int v54 = *v43;
      }
      else
      {
        std::string::size_type size = 0;
        for (uint64_t i = 0; i != v29; ++i)
        {
          if (*((_DWORD *)a1 + 35) == 1125)
          {
            uint64_t v32 = a1[16];
          }
          else
          {
            uint64_t v32 = CoreML::Specification::ExpandDimsLayerParams::default_instance((CoreML::Specification::ExpandDimsLayerParams *)v22);
            std::string::size_type size = v84.__r_.__value_.__l.__size_;
          }
          int v33 = *(_DWORD *)(v32[3] + 8 * i + 8);
          __int32 v34 = (v21 & (v33 >> 31)) + v33;
          long long v22 = (unsigned int *)wmemchr((__int32 *)v84.__r_.__value_.__l.__data_, v34, (uint64_t)(size - v84.__r_.__value_.__r.__words[0]) >> 2);
          if (v22) {
            long long v35 = v22;
          }
          else {
            long long v35 = (unsigned int *)size;
          }
          if (v35 != (unsigned int *)v84.__r_.__value_.__l.__size_)
          {
            long long v71 = a1[14];
            if (*((char *)v71 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)*v71, v71[1]);
            }
            else
            {
              long long v72 = *(_OWORD *)v71;
              v81.__r_.__value_.__r.__words[2] = v71[2];
              *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v72;
            }
            long long v77 = std::string::insert(&v81, 0, "ExpandDims Layer '");
            long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
            v82.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v78;
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            long long v79 = std::string::append(&v82, "': axes parameter list cannot have the same value more than once.");
            long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v83.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v82.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            goto LABEL_126;
          }
          if ((unint64_t)v35 >= v84.__r_.__value_.__r.__words[2])
          {
            long long v22 = (unsigned int *)v84.__r_.__value_.__r.__words[0];
            uint64_t v36 = (uint64_t)(v84.__r_.__value_.__l.__size_ - v84.__r_.__value_.__r.__words[0]) >> 2;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            int64_t v38 = v84.__r_.__value_.__r.__words[2] - v84.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v84.__r_.__value_.__r.__words[2] - v84.__r_.__value_.__r.__words[0]) >> 1 > v37) {
              unint64_t v37 = v38 >> 1;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v84.__r_.__value_.__r.__words[2], v39);
              long long v35 = (unsigned int *)v84.__r_.__value_.__l.__size_;
              long long v22 = (unsigned int *)v84.__r_.__value_.__r.__words[0];
            }
            else
            {
              uint64_t v40 = 0;
            }
            uint64_t v41 = (__int32 *)&v40[4 * v36];
            *uint64_t v41 = v34;
            std::string::size_type size = (std::string::size_type)(v41 + 1);
            while (v35 != v22)
            {
              __int32 v42 = *--v35;
              *--uint64_t v41 = v42;
            }
            v84.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
            v84.__r_.__value_.__l.__size_ = size;
            v84.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40[4 * v39];
            if (v22) {
              operator delete(v22);
            }
          }
          else
          {
            *long long v35 = v34;
            std::string::size_type size = (std::string::size_type)(v35 + 1);
          }
          v84.__r_.__value_.__l.__size_ = size;
        }
        long long v43 = (int *)v84.__r_.__value_.__r.__words[0];
        std::string::size_type v44 = v84.__r_.__value_.__r.__words[0] + 4;
        if (v84.__r_.__value_.__r.__words[0] == size || v44 == size) {
          goto LABEL_100;
        }
        int v46 = *(_DWORD *)v84.__r_.__value_.__l.__data_;
        int v47 = *(_DWORD *)v84.__r_.__value_.__l.__data_;
        std::string::size_type v48 = v84.__r_.__value_.__r.__words[0] + 4;
        long long v49 = (int *)v84.__r_.__value_.__r.__words[0];
        std::string::size_type v50 = (int *)(v84.__r_.__value_.__r.__words[0] + 4);
        do
        {
          int v52 = *v50++;
          int v51 = v52;
          BOOL v53 = v47 < v52;
          if (v47 <= v52) {
            int v47 = v51;
          }
          if (v53) {
            long long v49 = (int *)v48;
          }
          std::string::size_type v48 = (std::string::size_type)v50;
        }
        while (v50 != (int *)size);
        int v54 = *v49;
        BOOL v55 = (int *)(v84.__r_.__value_.__r.__words[0] + 4);
        do
        {
          int v57 = *v55++;
          int v56 = v57;
          if (v57 < v46)
          {
            int v46 = v56;
            long long v43 = (int *)v44;
          }
          std::string::size_type v44 = (std::string::size_type)v55;
        }
        while (v55 != (int *)size);
      }
      if (v54 >= v21 || *v43 < 0)
      {
        long long v69 = a1[14];
        if (*((char *)v69 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)*v69, v69[1]);
        }
        else
        {
          long long v70 = *(_OWORD *)v69;
          v81.__r_.__value_.__r.__words[2] = v69[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v70;
        }
        std::string::size_type v73 = std::string::insert(&v81, 0, "ExpandDims Layer '");
        long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v82.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        long long v75 = std::string::append(&v82, "': axes refers to a dimension that exceeds the output rank.");
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v83.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v82.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
LABEL_126:
        CoreML::Result::Result((_DWORD *)a2, 13);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        char v64 = 0;
      }
      else
      {
        char v64 = 1;
      }
      if (v84.__r_.__value_.__r.__words[0])
      {
        v84.__r_.__value_.__l.__size_ = v84.__r_.__value_.__r.__words[0];
        operator delete(v84.__r_.__value_.__l.__data_);
      }
      if ((v64 & 1) == 0)
      {
LABEL_132:
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)__p, *(void **)&__p[8]);
        goto LABEL_133;
      }
    }
    *(void *)a2 = v87;
    *(_OWORD *)(a2 + 8) = v88;
    *(void *)(a2 + 24) = v89;
    long long v88 = 0uLL;
    uint64_t v89 = 0;
    goto LABEL_132;
  }
  uint64_t v18 = a1[14];
  if (*((char *)v18 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)*v18, v18[1]);
  }
  else
  {
    long long v19 = *(_OWORD *)v18;
    v83.__r_.__value_.__r.__words[2] = v18[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v19;
  }
  long long v25 = std::string::insert(&v83, 0, "ExpandDims Layer '");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v84.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  uint64_t v27 = std::string::append(&v84, "': length of the 'axes' parameter cannot be 0.");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)__n128 __p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v84.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
LABEL_133:
  if (SHIBYTE(v89) < 0) {
    operator delete((void *)v88);
  }
}

void sub_22429C274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,void *a38,int a39,__int16 a40,char a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a37, a38);
  if (*(char *)(v42 - 97) < 0) {
    operator delete(*(void **)(v42 - 120));
  }
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateSqueezeLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v89);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
  uint64_t v89 = *(void *)__p;
  if (SHIBYTE(v91) < 0) {
    operator delete((void *)v90);
  }
  long long v90 = *(_OWORD *)&__p[8];
  uint64_t v91 = v88;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v89);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)__p);
    uint64_t v89 = *(void *)__p;
    if (SHIBYTE(v91) < 0) {
      operator delete((void *)v90);
    }
    long long v90 = *(_OWORD *)&__p[8];
    uint64_t v91 = v88;
  }
  if (*((_DWORD *)a1 + 35) == 1120) {
    long long v6 = a1[16];
  }
  else {
    long long v6 = CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v5);
  }
  if (*((unsigned char *)v6 + 36))
  {
LABEL_11:
    *(void *)a2 = v89;
    *(_OWORD *)(a2 + 8) = v90;
    *(void *)(a2 + 24) = v91;
    long long v90 = 0uLL;
    uint64_t v91 = 0;
    goto LABEL_12;
  }
  if (*((_DWORD *)a1 + 35) == 1120) {
    uint64_t v7 = (CoreML::Specification::SqueezeLayerParams *)a1[16];
  }
  else {
    uint64_t v7 = (CoreML::Specification::SqueezeLayerParams *)CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v6);
  }
  if (*((_DWORD *)v7 + 4))
  {
    uint64_t v8 = 0;
    *(void *)&__p[8] = 0;
    *(void *)&__p[16] = 0;
    *(void *)__n128 __p = &__p[8];
    while (1)
    {
      BOOL v9 = (int *)(*((_DWORD *)a1 + 35) == 1120
                 ? a1[16]
                 : CoreML::Specification::SqueezeLayerParams::default_instance(v7));
      if (v8 >= v9[4]) {
        break;
      }
      LODWORD(v83.__r_.__value_.__l.__data_) = 0;
      if (*((_DWORD *)a1 + 35) == 1120) {
        int v10 = a1[16];
      }
      else {
        int v10 = CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v9);
      }
      int v11 = *(_DWORD *)(v10[3] + 8 * v8 + 8);
      LODWORD(v83.__r_.__value_.__l.__data_) = v11;
      uint64_t v12 = *(void *)&__p[8];
      if (*(void *)&__p[8])
      {
        std::string v13 = (uint64_t *)&__p[8];
        do
        {
          std::string::size_type v14 = (uint64_t *)v12;
          int v15 = v13;
          int v16 = *(_DWORD *)(v12 + 28);
          std::string v17 = (uint64_t *)(v12 + 8);
          if (v16 >= v11)
          {
            std::string v17 = v14;
            std::string v13 = v14;
          }
          uint64_t v12 = *v17;
        }
        while (v12);
        if (v13 != (uint64_t *)&__p[8])
        {
          if (v16 < v11) {
            std::string::size_type v14 = v15;
          }
          if (*((_DWORD *)v14 + 7) <= v11)
          {
            long long v24 = a1[14];
            if (*((char *)v24 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v24, v24[1]);
            }
            else
            {
              long long v25 = *(_OWORD *)v24;
              v84.__r_.__value_.__r.__words[2] = v24[2];
              *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v25;
            }
            uint64_t v62 = std::string::insert(&v84, 0, "Squeeze Layer '");
            long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
            v85.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v63;
            v62->__r_.__value_.__l.__size_ = 0;
            v62->__r_.__value_.__r.__words[2] = 0;
            v62->__r_.__value_.__r.__words[0] = 0;
            char v64 = std::string::append(&v85, "': all the values in the 'axes' parameter must be unique.");
            long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
            v86.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v65;
            v64->__r_.__value_.__l.__size_ = 0;
            v64->__r_.__value_.__r.__words[2] = 0;
            v64->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v85.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            goto LABEL_121;
          }
        }
      }
      uint64_t v7 = (CoreML::Specification::SqueezeLayerParams *)std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)__p, (int *)&v83, &v83);
      ++v8;
    }
    if (*((int *)a1 + 18) >= 1 && *((_DWORD *)a1 + 24) >= 1)
    {
      int v21 = *(_DWORD *)(a1[10][1] + 36);
      int v22 = *(_DWORD *)(a1[13][1] + 36);
      if (*((_DWORD *)a1 + 35) == 1120) {
        long long v23 = (unsigned int *)a1[16];
      }
      else {
        long long v23 = (unsigned int *)CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v9);
      }
      uint64_t v30 = v23[4];
      if (v21 != 1 && v30 + v22 != v21)
      {
        uint64_t v60 = a1[14];
        if (*((char *)v60 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)*v60, v60[1]);
        }
        else
        {
          long long v61 = *(_OWORD *)v60;
          v84.__r_.__value_.__r.__words[2] = v60[2];
          *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v61;
        }
        long long v67 = std::string::insert(&v84, 0, "Squeeze Layer '");
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        v85.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        long long v69 = std::string::append(&v85, "': output rank plus the length of the axes parameter must equal input rank.");
        long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
LABEL_121:
        CoreML::Result::Result((_DWORD *)a2, 13);
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        goto LABEL_144;
      }
      memset(&v86, 0, sizeof(v86));
      if ((int)v30 < 1)
      {
        uint64_t v45 = 0;
LABEL_112:
        int v56 = *v45;
      }
      else
      {
        std::string::size_type size = 0;
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*((_DWORD *)a1 + 35) == 1120)
          {
            __int32 v34 = a1[16];
          }
          else
          {
            __int32 v34 = CoreML::Specification::SqueezeLayerParams::default_instance((CoreML::Specification::SqueezeLayerParams *)v23);
            std::string::size_type size = v86.__r_.__value_.__l.__size_;
          }
          int v35 = *(_DWORD *)(v34[3] + 8 * i + 8);
          __int32 v36 = (v21 & (v35 >> 31)) + v35;
          long long v23 = (unsigned int *)wmemchr((__int32 *)v86.__r_.__value_.__l.__data_, v36, (uint64_t)(size - v86.__r_.__value_.__r.__words[0]) >> 2);
          if (v23) {
            unint64_t v37 = v23;
          }
          else {
            unint64_t v37 = (unsigned int *)size;
          }
          if (v37 != (unsigned int *)v86.__r_.__value_.__l.__size_)
          {
            std::string::size_type v73 = a1[14];
            if (*((char *)v73 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)*v73, v73[1]);
            }
            else
            {
              long long v74 = *(_OWORD *)v73;
              v83.__r_.__value_.__r.__words[2] = v73[2];
              *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v74;
            }
            long long v79 = std::string::insert(&v83, 0, "Squeeze Layer '");
            long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
            v84.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v80;
            v79->__r_.__value_.__l.__size_ = 0;
            v79->__r_.__value_.__r.__words[2] = 0;
            v79->__r_.__value_.__r.__words[0] = 0;
            std::string v81 = std::string::append(&v84, "': axes parameter list cannot have the same value more than once.");
            long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
            v85.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v82;
            v81->__r_.__value_.__l.__size_ = 0;
            v81->__r_.__value_.__r.__words[2] = 0;
            v81->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v83.__r_.__value_.__l.__data_);
            }
            goto LABEL_138;
          }
          if ((unint64_t)v37 >= v86.__r_.__value_.__r.__words[2])
          {
            long long v23 = (unsigned int *)v86.__r_.__value_.__r.__words[0];
            uint64_t v38 = (uint64_t)(v86.__r_.__value_.__l.__size_ - v86.__r_.__value_.__r.__words[0]) >> 2;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            int64_t v40 = v86.__r_.__value_.__r.__words[2] - v86.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v86.__r_.__value_.__r.__words[2] - v86.__r_.__value_.__r.__words[0]) >> 1 > v39) {
              unint64_t v39 = v40 >> 1;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v41 = v39;
            }
            if (v41)
            {
              uint64_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v86.__r_.__value_.__r.__words[2], v41);
              unint64_t v37 = (unsigned int *)v86.__r_.__value_.__l.__size_;
              long long v23 = (unsigned int *)v86.__r_.__value_.__r.__words[0];
            }
            else
            {
              uint64_t v42 = 0;
            }
            long long v43 = (__int32 *)&v42[4 * v38];
            *long long v43 = v36;
            std::string::size_type size = (std::string::size_type)(v43 + 1);
            while (v37 != v23)
            {
              __int32 v44 = *--v37;
              *--long long v43 = v44;
            }
            v86.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
            v86.__r_.__value_.__l.__size_ = size;
            v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v42[4 * v41];
            if (v23) {
              operator delete(v23);
            }
          }
          else
          {
            unsigned int *v37 = v36;
            std::string::size_type size = (std::string::size_type)(v37 + 1);
          }
          v86.__r_.__value_.__l.__size_ = size;
        }
        uint64_t v45 = (int *)v86.__r_.__value_.__r.__words[0];
        std::string::size_type v46 = v86.__r_.__value_.__r.__words[0] + 4;
        if (v86.__r_.__value_.__r.__words[0] == size || v46 == size) {
          goto LABEL_112;
        }
        int v48 = *(_DWORD *)v86.__r_.__value_.__l.__data_;
        int v49 = *(_DWORD *)v86.__r_.__value_.__l.__data_;
        std::string::size_type v50 = v86.__r_.__value_.__r.__words[0] + 4;
        int v51 = (int *)v86.__r_.__value_.__r.__words[0];
        int v52 = (int *)(v86.__r_.__value_.__r.__words[0] + 4);
        do
        {
          int v54 = *v52++;
          int v53 = v54;
          BOOL v55 = v49 < v54;
          if (v49 <= v54) {
            int v49 = v53;
          }
          if (v55) {
            int v51 = (int *)v50;
          }
          std::string::size_type v50 = (std::string::size_type)v52;
        }
        while (v52 != (int *)size);
        int v56 = *v51;
        int v57 = (int *)(v86.__r_.__value_.__r.__words[0] + 4);
        do
        {
          int v59 = *v57++;
          int v58 = v59;
          if (v59 < v48)
          {
            int v48 = v58;
            uint64_t v45 = (int *)v46;
          }
          std::string::size_type v46 = (std::string::size_type)v57;
        }
        while (v57 != (int *)size);
      }
      if (v56 >= v21 || *v45 < 0)
      {
        long long v71 = a1[14];
        if (*((char *)v71 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)*v71, v71[1]);
        }
        else
        {
          long long v72 = *(_OWORD *)v71;
          v83.__r_.__value_.__r.__words[2] = v71[2];
          *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v72;
        }
        long long v75 = std::string::insert(&v83, 0, "Squeeze Layer '");
        long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
        v84.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v76;
        v75->__r_.__value_.__l.__size_ = 0;
        v75->__r_.__value_.__r.__words[2] = 0;
        v75->__r_.__value_.__r.__words[0] = 0;
        long long v77 = std::string::append(&v84, "': axes refers to a dimension that exceeds the input rank.");
        long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v85.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
LABEL_138:
        CoreML::Result::Result((_DWORD *)a2, 13);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        char v66 = 0;
      }
      else
      {
        char v66 = 1;
      }
      if (v86.__r_.__value_.__r.__words[0])
      {
        v86.__r_.__value_.__l.__size_ = v86.__r_.__value_.__r.__words[0];
        operator delete(v86.__r_.__value_.__l.__data_);
      }
      if ((v66 & 1) == 0)
      {
LABEL_144:
        std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)__p, *(void **)&__p[8]);
        goto LABEL_12;
      }
    }
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)__p, *(void **)&__p[8]);
    goto LABEL_11;
  }
  long long v19 = a1[14];
  if (*((char *)v19 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)*v19, v19[1]);
  }
  else
  {
    long long v20 = *(_OWORD *)v19;
    v85.__r_.__value_.__r.__words[2] = v19[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v20;
  }
  long long v26 = std::string::insert(&v85, 0, "Squeeze Layer '");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v86.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  long long v28 = std::string::append(&v86, "': length of the 'axes' parameter cannot be 0.");
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  *(void *)&__p[16] = *((void *)&v28->__r_.__value_.__l + 2);
  *(_OWORD *)__n128 __p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
LABEL_12:
  if (SHIBYTE(v91) < 0) {
    operator delete((void *)v90);
  }
}

void sub_22429CBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,void *a38,int a39,__int16 a40,char a41,char a42)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a37, a38);
  if (*(char *)(v42 - 97) < 0) {
    operator delete(*(void **)(v42 - 120));
  }
  _Unwind_Resume(a1);
}

void CoreML::NeuralNetworkSpecValidator::validateRangeStaticLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::Result::Result((CoreML::Result *)&v11);
  *(void *)a2 = v11;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v12;
  *(void *)(a2 + 24) = v13;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v11);
    *(void *)a2 = v11;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v12;
    *(void *)(a2 + 24) = v13;
  }
  if (*((int *)a1 + 24) >= 1)
  {
    int v6 = *(_DWORD *)(*(void *)(*((void *)a1 + 13) + 8) + 36);
    std::string::basic_string[abi:ne180100]<0>(v9, "Range");
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    CoreML::checkRank((uint64_t)v9, 1, 1, (uint64_t)__p, v6, (CoreML::Result *)&v11);
    *(void *)a2 = v11;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)BOOL v5 = v12;
    *(void *)(a2 + 24) = v13;
    HIBYTE(v13) = 0;
    LOBYTE(v12) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
}

void sub_22429CE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRangeDynamicLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  if (*((int *)a1 + 6) < 1) {
    CoreML::Result::Result((CoreML::Result *)&v13);
  }
  else {
    CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 3, (CoreML::Result *)&v13);
  }
  *(void *)a2 = v13;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v14;
  *(void *)(a2 + 24) = v15;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v13);
    *(void *)a2 = v13;
    int v6 = (void **)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)int v6 = v14;
    *(void *)(a2 + 24) = v15;
  }
  if (*((int *)a1 + 24) >= 1)
  {
    int v7 = *(_DWORD *)(*(void *)(*((void *)a1 + 13) + 8) + 36);
    std::string::basic_string[abi:ne180100]<0>(v11, "Range");
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    CoreML::checkRank((uint64_t)v11, 1, 1, (uint64_t)__p, v7, (CoreML::Result *)&v13);
    *(void *)a2 = v13;
    char v8 = (void **)(a2 + 8);
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)char v8 = v14;
    *(void *)(a2 + 24) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
}

void sub_22429D074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 31) < 0) {
    operator delete(*(void **)(v20 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLoadConstantNDLayer(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v40);
  CoreML::Result::Result((CoreML::Result *)v38);
  uint64_t v40 = *(void *)v38;
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v38[8];
  uint64_t v42 = v39;
  HIBYTE(v39) = 0;
  v38[8] = 0;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v40);
  BOOL v6 = v5;
  if (SHIBYTE(v39) < 0)
  {
    operator delete(*(void **)&v38[8]);
    if (!v6) {
      goto LABEL_54;
    }
  }
  else if (!v5)
  {
    goto LABEL_54;
  }
  CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v38);
  uint64_t v40 = *(void *)v38;
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v38[8];
  uint64_t v42 = v39;
  HIBYTE(v39) = 0;
  v38[8] = 0;
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v40);
  BOOL v8 = v7;
  if (SHIBYTE(v39) < 0)
  {
    operator delete(*(void **)&v38[8]);
    if (v8) {
      goto LABEL_13;
    }
LABEL_54:
    *(void *)a2 = v40;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v42;
    long long __p = 0uLL;
    uint64_t v42 = 0;
    goto LABEL_55;
  }
  if (!v7) {
    goto LABEL_54;
  }
LABEL_13:
  if (*((_DWORD *)a1 + 35) == 1070) {
    BOOL v9 = (uint64_t *)*((void *)a1 + 16);
  }
  else {
    BOOL v9 = CoreML::Specification::LoadConstantNDLayerParams::default_instance((CoreML::Specification::LoadConstantNDLayerParams *)v7);
  }
  if (v9[5]) {
    char v10 = (uint64_t *)v9[5];
  }
  else {
    char v10 = &CoreML::Specification::_WeightParams_default_instance_;
  }
  uint64_t v11 = v10[5];
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  }
  uint64_t v13 = v10[6];
  if (*(char *)(v13 + 23) < 0) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  }
  int v15 = *((_DWORD *)v10 + 4);
  uint64_t v16 = v10[7];
  if (*(char *)(v16 + 23) < 0) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  }
  BOOL v18 = v15 <= 0;
  BOOL v19 = v15 > 0;
  if (v18) {
    int v20 = 1;
  }
  else {
    int v20 = 2;
  }
  if (v12) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = v19;
  }
  if (v14) {
    ++v21;
  }
  if (v17) {
    unsigned int v22 = v21 + 1;
  }
  else {
    unsigned int v22 = v21;
  }
  uint64_t v23 = *((unsigned int *)v9 + 4);
  if (v22 <= 1)
  {
    if (v23)
    {
      if (v23 <= 5)
      {
        long long v26 = (uint64_t *)(v9[3] + 8);
        uint64_t v27 = 1;
        do
        {
          uint64_t v28 = *v26++;
          v27 *= v28;
          --v23;
        }
        while (v23);
        std::string::basic_string[abi:ne180100]<0>(&v37, "LoadConstantND");
        uint64_t v29 = *((void *)a1 + 14);
        std::string::basic_string[abi:ne180100]<0>(v35, "constants");
        CoreML::validateGeneralWeightParams((uint64_t)v10, (const CoreML::Specification::WeightParams *)v27, (const CoreML::Specification::WeightParams *)1, (const void **)&v37.__r_.__value_.__l.__data_, v29, (uint64_t)v35, (uint64_t)v38);
        uint64_t v40 = *(void *)v38;
        if (SHIBYTE(v42) < 0) {
          operator delete((void *)__p);
        }
        long long __p = *(_OWORD *)&v38[8];
        uint64_t v42 = v39;
        HIBYTE(v39) = 0;
        v38[8] = 0;
        if (v36 < 0) {
          operator delete(v35[0]);
        }
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
        if (CoreML::Result::good((CoreML::Result *)&v40))
        {
          CoreML::Result::Result((CoreML::Result *)a2);
          goto LABEL_55;
        }
        goto LABEL_54;
      }
      std::operator+<char>();
      int v33 = std::string::append(&v37, "'can only accept shape of length 1 to 5");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      *(void *)&v38[16] = *((void *)&v33->__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v38 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_63:
      if ((v38[23] & 0x80000000) != 0) {
        operator delete(*(void **)v38);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v32 = (void *)v37.__r_.__value_.__r.__words[0];
        goto LABEL_67;
      }
      goto LABEL_55;
    }
  }
  else if (v23)
  {
    std::operator+<char>();
    long long v24 = std::string::append(&v37, "' has both full precision and half precision weight fields populated");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    *(void *)&v38[16] = *((void *)&v24->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v38 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_63;
  }
  std::operator+<char>();
  uint64_t v30 = std::string::append(&v37, "' layer.");
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  *(void *)&v38[16] = *((void *)&v30->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t v38 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v38[23] & 0x80000000) != 0)
  {
    uint64_t v32 = *(void **)v38;
LABEL_67:
    operator delete(v32);
  }
LABEL_55:
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22429D4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateGetShapeLayer@<Q0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v10);
  uint64_t v13 = v10;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)v11;
  uint64_t v15 = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11[0]) = 0;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v13);
  BOOL v6 = v5;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(v11[0]);
    if (!v6) {
      goto LABEL_14;
    }
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v10);
  uint64_t v13 = v10;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)v11;
  uint64_t v15 = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11[0]) = 0;
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v13);
  BOOL v8 = v7;
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_11;
    }
LABEL_14:
    *(void *)a2 = v13;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v15;
    return result;
  }
  operator delete(v11[0]);
  if (!v8) {
    goto LABEL_14;
  }
LABEL_11:
  CoreML::Result::Result((CoreML::Result *)a2);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  return result;
}

void sub_22429D6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateRandomNormalLikeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_22429D7D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomNormalStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v12);
  CoreML::Result::Result((CoreML::Result *)v10);
  uint64_t v12 = *(void *)v10;
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v10[8];
  uint64_t v14 = v11;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v12);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v10);
    uint64_t v12 = *(void *)v10;
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v10[8];
    uint64_t v14 = v11;
  }
  if (*((_DWORD *)a1 + 35) == 1175) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::RandomNormalStaticLayerParams::default_instance((CoreML::Specification::RandomNormalStaticLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    *(void *)a2 = v12;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v14;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v10[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v10[23] & 0x80000000) != 0) {
      operator delete(*(void **)v10);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_22429D968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateRandomNormalDynamicLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_22429DA84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateRandomUniformLikeLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
  uint64_t v13 = *(void *)v11;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v11[8];
  uint64_t v15 = v12;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v13);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
    uint64_t v13 = *(void *)v11;
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v11[8];
    uint64_t v15 = v12;
  }
  if (*((_DWORD *)a1 + 35) == 1190) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::RandomUniformLikeLayerParams::default_instance((CoreML::Specification::RandomUniformLikeLayerParams *)v5);
  }
  if (*((float *)v6 + 6) <= *((float *)v6 + 7))
  {
    *(void *)a2 = v13;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v15;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v10, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v11[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v11 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v11[23] & 0x80000000) != 0) {
      operator delete(*(void **)v11);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_22429DC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomUniformStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v14);
  CoreML::Result::Result((CoreML::Result *)v12);
  uint64_t v14 = *(void *)v12;
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v12[8];
  uint64_t v16 = v13;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v14);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v12);
    uint64_t v14 = *(void *)v12;
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v12[8];
    uint64_t v16 = v13;
  }
  if (*((_DWORD *)a1 + 35) == 1195) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::RandomUniformStaticLayerParams::default_instance((CoreML::Specification::RandomUniformStaticLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    if (*((float *)v6 + 12) <= *((float *)v6 + 13))
    {
      *(void *)a2 = v14;
      *(_OWORD *)(a2 + 8) = __p;
      *(void *)(a2 + 24) = v16;
      long long __p = 0uLL;
      uint64_t v16 = 0;
      goto LABEL_20;
    }
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v11, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v12[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v11, "' layer.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&v12[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v12[23] & 0x80000000) != 0) {
    operator delete(*(void **)v12);
  }
LABEL_20:
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22429DE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateRandomUniformDynamicLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v13);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
  uint64_t v13 = *(void *)v11;
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v11[8];
  uint64_t v15 = v12;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v13);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v11);
    uint64_t v13 = *(void *)v11;
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v11[8];
    uint64_t v15 = v12;
  }
  if (*((_DWORD *)a1 + 35) == 1200) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::RandomUniformDynamicLayerParams::default_instance((CoreML::Specification::RandomUniformDynamicLayerParams *)v5);
  }
  if (*((float *)v6 + 6) <= *((float *)v6 + 7))
  {
    *(void *)a2 = v13;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v15;
  }
  else
  {
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v10, "' layer.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    *(void *)&v11[16] = *((void *)&v7->__r_.__value_.__l + 2);
    *(_OWORD *)std::string v11 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v11[23] & 0x80000000) != 0) {
      operator delete(*(void **)v11);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_22429E054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliLikeLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v15);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
  uint64_t v15 = *(void *)v13;
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v13[8];
  uint64_t v17 = v14;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v15);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
    uint64_t v15 = *(void *)v13;
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v13[8];
    uint64_t v17 = v14;
  }
  if (*((_DWORD *)a1 + 35) == 1210) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::RandomBernoulliLikeLayerParams::default_instance((CoreML::Specification::RandomBernoulliLikeLayerParams *)v5);
  }
  float v7 = *((float *)v6 + 6);
  if (v7 >= 0.0 && v7 <= 1.0)
  {
    *(void *)a2 = v15;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v17;
  }
  else
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "' layer.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&v13[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v13[23] & 0x80000000) != 0) {
      operator delete(*(void **)v13);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_22429E238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliStaticLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v15);
  CoreML::Result::Result((CoreML::Result *)v13);
  uint64_t v15 = *(void *)v13;
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v13[8];
  uint64_t v17 = v14;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v15);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
    uint64_t v15 = *(void *)v13;
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v13[8];
    uint64_t v17 = v14;
  }
  if (*((_DWORD *)a1 + 35) == 1215) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::RandomBernoulliStaticLayerParams::default_instance((CoreML::Specification::RandomBernoulliStaticLayerParams *)v5);
  }
  if (*((_DWORD *)v6 + 4))
  {
    float v7 = *((float *)v6 + 12);
    if (v7 >= 0.0 && v7 <= 1.0)
    {
      *(void *)a2 = v15;
      *(_OWORD *)(a2 + 8) = __p;
      *(void *)(a2 + 24) = v17;
      long long __p = 0uLL;
      uint64_t v17 = 0;
      goto LABEL_21;
    }
    std::operator+<char>();
    long long v10 = std::string::append(&v12, "' layer.");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(void *)&v13[16] = *((void *)&v10->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v13 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::operator+<char>();
    long long v8 = std::string::append(&v12, "' layer.");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    *(void *)&v13[16] = *((void *)&v8->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v13 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  CoreML::Result::Result((_DWORD *)a2, 13);
  if ((v13[23] & 0x80000000) != 0) {
    operator delete(*(void **)v13);
  }
LABEL_21:
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22429E484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

__n128 CoreML::NeuralNetworkSpecValidator::validateRandomBernoulliDynamicLayer@<Q0>(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v15);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
  uint64_t v15 = *(void *)v13;
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  __n128 __p = *(__n128 *)&v13[8];
  uint64_t v17 = v14;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v15);
  if (v5)
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v13);
    uint64_t v15 = *(void *)v13;
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    __n128 __p = *(__n128 *)&v13[8];
    uint64_t v17 = v14;
  }
  if (*((_DWORD *)a1 + 35) == 1220) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::RandomBernoulliDynamicLayerParams::default_instance((CoreML::Specification::RandomBernoulliDynamicLayerParams *)v5);
  }
  float v7 = *((float *)v6 + 6);
  if (v7 >= 0.0 && v7 <= 1.0)
  {
    *(void *)a2 = v15;
    __n128 result = __p;
    *(__n128 *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v17;
  }
  else
  {
    std::operator+<char>();
    long long v9 = std::string::append(&v12, "' layer.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(void *)&v13[16] = *((void *)&v9->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v13 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((v13[23] & 0x80000000) != 0) {
      operator delete(*(void **)v13);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
  }
  return result;
}

void sub_22429E674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateTopKLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  v36[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v33);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)__p);
  uint64_t v33 = *(void *)__p;
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  long long v34 = *(_OWORD *)&__p[8];
  uint64_t v35 = v32;
  HIBYTE(v32) = 0;
  __p[8] = 0;
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v33);
  BOOL v7 = v6;
  if (SHIBYTE(v32) < 0)
  {
    operator delete(*(void **)&__p[8]);
    if (!v7) {
      goto LABEL_26;
    }
  }
  else if (!v6)
  {
    goto LABEL_26;
  }
  CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)__p);
  uint64_t v33 = *(void *)__p;
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  long long v34 = *(_OWORD *)&__p[8];
  uint64_t v35 = v32;
  HIBYTE(v32) = 0;
  __p[8] = 0;
  BOOL v8 = CoreML::Result::good((CoreML::Result *)&v33);
  BOOL v9 = v8;
  if (SHIBYTE(v32) < 0)
  {
    operator delete(*(void **)&__p[8]);
    if (!v9) {
      goto LABEL_26;
    }
  }
  else if (!v8)
  {
    goto LABEL_26;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "TopK");
  long long v10 = (char *)this + 32;
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v29, (uint64_t)this + 32, (CoreML::Result *)__p);
  uint64_t v33 = *(void *)__p;
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  long long v34 = *(_OWORD *)&__p[8];
  uint64_t v35 = v32;
  HIBYTE(v32) = 0;
  __p[8] = 0;
  BOOL v11 = CoreML::Result::good((CoreML::Result *)&v33);
  if (SHIBYTE(v32) < 0) {
    operator delete(*(void **)&__p[8]);
  }
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if (v11) {
      goto LABEL_19;
    }
LABEL_26:
    *(void *)a3 = v33;
    *(_OWORD *)(a3 + 8) = v34;
    *(void *)(a3 + 24) = v35;
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    goto LABEL_27;
  }
  if (!v11) {
    goto LABEL_26;
  }
LABEL_19:
  std::string v12 = (CoreML::Specification::TopKLayerParams *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this + 32, (const void **)a2[4][1]);
  uint64_t v13 = (CoreML::NeuralNetworkSpecValidator *)((char *)this + 40);
  if (v13 == v12
    || (v12 = (CoreML::Specification::TopKLayerParams *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v10, (const void **)a2[7][2]), v13 == v12)|| (int v14 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v10, (const void **)a2[4][1]), v12 = (CoreML::Specification::TopKLayerParams *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v10, (const void **)a2[7][2]), v14 == *(_DWORD *)v12))
  {
    if (*((int *)a2 + 18) < 1
      || (*((_DWORD *)a2 + 35) != 1015
        ? (uint64_t v15 = CoreML::Specification::TopKLayerParams::default_instance(v12))
        : (uint64_t v15 = a2[16]),
          (uint64_t v16 = *(int *)(a2[10][1] + 36), v17 = v15[2], v17 >= -v16) && v17 < v16))
    {
      CoreML::Result::Result((CoreML::Result *)a3);
      goto LABEL_27;
    }
    std::operator+<char>();
    BOOL v18 = std::string::append(&v28, "' layer.");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)__n128 __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  else
  {
    int v20 = a2[14];
    if (*((char *)v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)*v20, v20[1]);
    }
    else
    {
      long long v21 = *(_OWORD *)v20;
      v27.__r_.__value_.__r.__words[2] = v20[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v21;
    }
    unsigned int v22 = std::string::insert(&v27, 0, "Layer '");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v28, "' of type 'TopK' expects equal ranks for its input and second output, but they are not equal.");
    std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
    v36[0] = v24->__r_.__value_.__l.__size_;
    *(void *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
    char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    *(void *)&__p[15] = *(void *)((char *)v36 + 7);
    *(void *)__n128 __p = v25;
    *(void *)&__p[8] = v36[0];
    __p[23] = v26;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
LABEL_27:
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
}

void sub_22429EAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,void *a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v37 - 73) < 0) {
    operator delete(*(void **)(v37 - 96));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgMaxLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v22);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v20);
  uint64_t v22 = *(void *)v20;
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v20[8];
  uint64_t v24 = v21;
  HIBYTE(v21) = 0;
  v20[8] = 0;
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v22);
  BOOL v7 = v6;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)&v20[8]);
    if (!v7) {
      goto LABEL_35;
    }
  }
  else if (!v6)
  {
    goto LABEL_35;
  }
  CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v20);
  uint64_t v22 = *(void *)v20;
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v20[8];
  uint64_t v24 = v21;
  HIBYTE(v21) = 0;
  v20[8] = 0;
  BOOL v8 = CoreML::Result::good((CoreML::Result *)&v22);
  BOOL v9 = v8;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)&v20[8]);
    if (!v9) {
      goto LABEL_35;
    }
  }
  else if (!v8)
  {
    goto LABEL_35;
  }
  if (*((_DWORD *)a2 + 35) == 1025) {
    long long v10 = a2[16];
  }
  else {
    long long v10 = CoreML::Specification::ArgMaxLayerParams::default_instance((CoreML::Specification::ArgMaxLayerParams *)v8);
  }
  if (!*((unsigned char *)v10 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "ArgMax");
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v18, (uint64_t)this + 32, (CoreML::Result *)v20);
    uint64_t v22 = *(void *)v20;
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v20[8];
    uint64_t v24 = v21;
    HIBYTE(v21) = 0;
    v20[8] = 0;
    long long v10 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v22);
    char v11 = (char)v10;
    if (SHIBYTE(v21) < 0) {
      operator delete(*(void **)&v20[8]);
    }
    if (v19 < 0)
    {
      operator delete(v18[0]);
      if (v11) {
        goto LABEL_23;
      }
    }
    else if (v11)
    {
      goto LABEL_23;
    }
LABEL_35:
    *(void *)a3 = v22;
    *(_OWORD *)(a3 + 8) = __p;
    *(void *)(a3 + 24) = v24;
    long long __p = 0uLL;
    uint64_t v24 = 0;
    goto LABEL_36;
  }
LABEL_23:
  if (*((int *)a2 + 18) >= 1
    && (*((_DWORD *)a2 + 35) != 1025
      ? (std::string v12 = CoreML::Specification::ArgMaxLayerParams::default_instance((CoreML::Specification::ArgMaxLayerParams *)v10))
      : (std::string v12 = a2[16]),
        (uint64_t v13 = *(int *)(a2[10][1] + 36), v14 = v12[2], v14 < -v13) || v14 >= v13))
  {
    std::operator+<char>();
    uint64_t v15 = std::string::append(&v17, "' layer.");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)&v20[16] = *((void *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)int v20 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((v20[23] & 0x80000000) != 0) {
      operator delete(*(void **)v20);
    }
  }
  else
  {
    CoreML::Result::Result((CoreML::Result *)a3);
  }
LABEL_36:
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22429EE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgMinLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v22);
  CoreML::validateInputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v20);
  uint64_t v22 = *(void *)v20;
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v20[8];
  uint64_t v24 = v21;
  HIBYTE(v21) = 0;
  v20[8] = 0;
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v22);
  BOOL v7 = v6;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)&v20[8]);
    if (!v7) {
      goto LABEL_35;
    }
  }
  else if (!v6)
  {
    goto LABEL_35;
  }
  CoreML::validateOutputCount((CoreML *)a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v20);
  uint64_t v22 = *(void *)v20;
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v20[8];
  uint64_t v24 = v21;
  HIBYTE(v21) = 0;
  v20[8] = 0;
  BOOL v8 = CoreML::Result::good((CoreML::Result *)&v22);
  BOOL v9 = v8;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(*(void **)&v20[8]);
    if (!v9) {
      goto LABEL_35;
    }
  }
  else if (!v8)
  {
    goto LABEL_35;
  }
  if (*((_DWORD *)a2 + 35) == 1020) {
    long long v10 = a2[16];
  }
  else {
    long long v10 = CoreML::Specification::ArgMinLayerParams::default_instance((CoreML::Specification::ArgMinLayerParams *)v8);
  }
  if (!*((unsigned char *)v10 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "ArgMin");
    CoreML::validateInputOutputRankEquality(a2, (uint64_t)v18, (uint64_t)this + 32, (CoreML::Result *)v20);
    uint64_t v22 = *(void *)v20;
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)&v20[8];
    uint64_t v24 = v21;
    HIBYTE(v21) = 0;
    v20[8] = 0;
    long long v10 = (uint64_t *)CoreML::Result::good((CoreML::Result *)&v22);
    char v11 = (char)v10;
    if (SHIBYTE(v21) < 0) {
      operator delete(*(void **)&v20[8]);
    }
    if (v19 < 0)
    {
      operator delete(v18[0]);
      if (v11) {
        goto LABEL_23;
      }
    }
    else if (v11)
    {
      goto LABEL_23;
    }
LABEL_35:
    *(void *)a3 = v22;
    *(_OWORD *)(a3 + 8) = __p;
    *(void *)(a3 + 24) = v24;
    long long __p = 0uLL;
    uint64_t v24 = 0;
    goto LABEL_36;
  }
LABEL_23:
  if (*((int *)a2 + 18) >= 1
    && (*((_DWORD *)a2 + 35) != 1020
      ? (std::string v12 = CoreML::Specification::ArgMinLayerParams::default_instance((CoreML::Specification::ArgMinLayerParams *)v10))
      : (std::string v12 = a2[16]),
        (uint64_t v13 = *(int *)(a2[10][1] + 36), v14 = v12[2], v14 < -v13) || v14 >= v13))
  {
    std::operator+<char>();
    uint64_t v15 = std::string::append(&v17, "' layer.");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)&v20[16] = *((void *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)int v20 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
    if ((v20[23] & 0x80000000) != 0) {
      operator delete(*(void **)v20);
    }
  }
  else
  {
    CoreML::Result::Result((CoreML::Result *)a3);
  }
LABEL_36:
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22429F1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateCategoricalDistributionLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_22429F344(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateLayerNormalizationLayer(uint64_t **a1@<X1>, uint64_t a2@<X8>)
{
  v31[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v28);
  CoreML::validateInputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
  std::string v28 = v25;
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v26;
  uint64_t v30 = v27;
  if (CoreML::Result::good((CoreML::Result *)&v28))
  {
    CoreML::validateOutputCount((CoreML *)a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v25);
    std::string v28 = v25;
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v26;
    uint64_t v30 = v27;
  }
  BOOL v5 = (CoreML::Specification::LayerNormalizationLayerParams *)std::string::basic_string[abi:ne180100]<0>(&v25, "");
  if (*((_DWORD *)a1 + 35) == 1350) {
    BOOL v6 = a1[16];
  }
  else {
    BOOL v6 = CoreML::Specification::LayerNormalizationLayerParams::default_instance(v5);
  }
  uint64_t v7 = *((int *)v6 + 4);
  if (!v7
    || v6 == &CoreML::Specification::_LayerNormalizationLayerParams_default_instance_
    || (uint64_t v8 = v6[5]) == 0
    || (uint64_t v9 = v6[6]) == 0
    || (uint64_t *)v8 != &CoreML::Specification::_WeightParams_default_instance_ && *(void *)(v8 + 64))
  {
    std::operator+<char>();
    long long v10 = std::string::append(&v24, "' layer.");
    char v11 = (void *)v10->__r_.__value_.__r.__words[0];
    v31[0] = v10->__r_.__value_.__l.__size_;
    *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
    char v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26) < 0) {
      operator delete(v25);
    }
    std::string::size_type v25 = v11;
    *(void *)&long long v26 = v31[0];
    *(void *)((char *)&v26 + 7) = *(void *)((char *)v31 + 7);
    HIBYTE(v26) = v12;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
LABEL_20:
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_21;
  }
  uint64_t v13 = v6[3];
  uint64_t v14 = v13 + 8;
  BOOL v15 = v13 == 0;
  if (v13) {
    long long v16 = (int *)(v13 + 8);
  }
  else {
    long long v16 = 0;
  }
  std::string v17 = (int *)(v14 + 8 * v7);
  if (v15) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = v17;
  }
  int v19 = 1;
  while (v16 != v18)
  {
    int v20 = *v16;
    v16 += 2;
    v19 *= v20;
  }
  if (*(_DWORD *)(v8 + 16) != v19 || *(_DWORD *)(v9 + 16) != v19)
  {
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v24, "' layer.");
    uint64_t v22 = (void *)v21->__r_.__value_.__r.__words[0];
    v31[0] = v21->__r_.__value_.__l.__size_;
    *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v26) < 0) {
      operator delete(v25);
    }
    std::string::size_type v25 = v22;
    *(void *)&long long v26 = v31[0];
    *(void *)((char *)&v26 + 7) = *(void *)((char *)v31 + 7);
    HIBYTE(v26) = v23;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    goto LABEL_20;
  }
  *(void *)a2 = v28;
  *(_OWORD *)(a2 + 8) = __p;
  *(void *)(a2 + 24) = v30;
  long long __p = 0uLL;
  uint64_t v30 = 0;
LABEL_21:
  if (SHIBYTE(v26) < 0) {
    operator delete(v25);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete((void *)__p);
  }
}

void sub_22429F6FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateConstantPadLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v38);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)v36);
  uint64_t v38 = *(void *)v36;
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  long long v39 = *(_OWORD *)&v36[8];
  uint64_t v40 = v37;
  if (!CoreML::Result::good((CoreML::Result *)&v38)) {
    goto LABEL_27;
  }
  CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v36);
  uint64_t v38 = *(void *)v36;
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  long long v39 = *(_OWORD *)&v36[8];
  uint64_t v40 = v37;
  if (!CoreML::Result::good((CoreML::Result *)&v38)) {
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ConstantPad");
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)__p, (uint64_t)this + 32, (CoreML::Result *)v36);
  uint64_t v38 = *(void *)v36;
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
  long long v39 = *(_OWORD *)&v36[8];
  uint64_t v40 = v37;
  HIBYTE(v37) = 0;
  v36[8] = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v38);
  if (!v6) {
    goto LABEL_27;
  }
  uint64_t v7 = *((_DWORD *)a2 + 35) == 1155
     ? (uint64_t *)*((void *)a2 + 16)
     : CoreML::Specification::ConstantPaddingLayerParams::default_instance((CoreML::Specification::ConstantPaddingLayerParams *)v6);
  if (*((_DWORD *)a2 + 6) != 1) {
    goto LABEL_27;
  }
  unint64_t v8 = *((unsigned int *)v7 + 4);
  if ((v8 & 1) == 0)
  {
    if (!v8)
    {
      std::operator+<char>();
      int v20 = std::string::append(&v33, "', length of 'padAmounts' cannot be zero when only 1 input is provided.");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      *(void *)&v36[16] = *((void *)&v20->__r_.__value_.__l + 2);
      *(_OWORD *)char v36 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      CoreML::Result::Result((_DWORD *)a3, 13);
      goto LABEL_64;
    }
    if (*((unsigned char *)v7 + 40) && (int)v8 >= 2)
    {
      uint64_t v9 = 0;
      long long v10 = (_DWORD *)(v7[3] + 16);
      while ((int)*(v10 - 2) < 1 || *v10 < 1)
      {
        v10 += 4;
        if (v8 >> 1 == ++v9) {
          goto LABEL_27;
        }
      }
      std::operator+<char>();
      uint64_t v22 = std::string::append(&v31, "', 'padToGivenOutputSizeMode' is true, and both padding values corresponding to dimension ");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v30, v9);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v24 = &v30;
      }
      else {
        std::string v24 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v30.__r_.__value_.__l.__size_;
      }
      long long v26 = std::string::append(&v32, (const std::string::value_type *)v24, size);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::string v28 = std::string::append(&v33, " are non zero, which is invalid. Only one value can be non-zero.");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      *(void *)&v36[16] = *((void *)&v28->__r_.__value_.__l + 2);
      *(_OWORD *)char v36 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      goto LABEL_63;
    }
LABEL_27:
    *(void *)a3 = v38;
    *(_OWORD *)(a3 + 8) = v39;
    *(void *)(a3 + 24) = v40;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    goto LABEL_28;
  }
  std::operator+<char>();
  char v12 = std::string::append(&v31, "', length of 'padAmounts' parameter is ");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v30, v8);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v30;
  }
  else {
    uint64_t v14 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v30.__r_.__value_.__l.__size_;
  }
  long long v16 = std::string::append(&v32, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  BOOL v18 = std::string::append(&v33, ", an odd value, which is not allowed.");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(void *)&v36[16] = *((void *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)char v36 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
LABEL_63:
  CoreML::Result::Result((_DWORD *)a3, 13);
LABEL_64:
  if ((v36[23] & 0x80000000) != 0) {
    operator delete(*(void **)v36);
  }
LABEL_28:
  if (SHIBYTE(v40) < 0) {
    operator delete((void *)v39);
  }
}

void sub_22429FBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  if (*(char *)(v39 - 49) < 0) {
    operator delete(*(void **)(v39 - 72));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateNMSLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 5, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)4, 4, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_22429FDA4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateOneHotLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_22429FE8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateCumSumLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_22429FF74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateArgsortLayer(CoreML::NeuralNetworkSpecValidator *this@<X0>, const CoreML::Specification::NeuralNetworkLayer *a2@<X1>, uint64_t a3@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v46);
  CoreML::validateInputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v44);
  uint64_t v46 = *(void *)v44;
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
  long long v47 = *(_OWORD *)&v44[8];
  uint64_t v48 = v45;
  HIBYTE(v45) = 0;
  v44[8] = 0;
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v46);
  BOOL v7 = v6;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(*(void **)&v44[8]);
    if (!v7) {
      goto LABEL_27;
    }
  }
  else if (!v6)
  {
    goto LABEL_27;
  }
  CoreML::validateOutputCount(a2, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)v44);
  uint64_t v46 = *(void *)v44;
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
  long long v47 = *(_OWORD *)&v44[8];
  uint64_t v48 = v45;
  HIBYTE(v45) = 0;
  v44[8] = 0;
  BOOL v8 = CoreML::Result::good((CoreML::Result *)&v46);
  BOOL v9 = v8;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(*(void **)&v44[8]);
    if (!v9) {
      goto LABEL_27;
    }
  }
  else if (!v8)
  {
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(v42, "Argsort");
  CoreML::validateInputOutputRankEquality(a2, (uint64_t)v42, (uint64_t)this + 32, (CoreML::Result *)v44);
  uint64_t v46 = *(void *)v44;
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
  long long v47 = *(_OWORD *)&v44[8];
  uint64_t v48 = v45;
  HIBYTE(v45) = 0;
  v44[8] = 0;
  BOOL v10 = CoreML::Result::good((CoreML::Result *)&v46);
  BOOL v11 = v10;
  if (SHIBYTE(v45) < 0) {
    operator delete(*(void **)&v44[8]);
  }
  if (v43 < 0)
  {
    operator delete(v42[0]);
    if (v11) {
      goto LABEL_21;
    }
LABEL_27:
    *(void *)a3 = v46;
    *(_OWORD *)(a3 + 8) = v47;
    *(void *)(a3 + 24) = v48;
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    goto LABEL_28;
  }
  if (!v11) {
    goto LABEL_27;
  }
LABEL_21:
  if (*((_DWORD *)a2 + 35) == 1461) {
    char v12 = (uint64_t *)*((void *)a2 + 16);
  }
  else {
    char v12 = CoreML::Specification::ArgSortLayerParams::default_instance((CoreML::Specification::ArgSortLayerParams *)v10);
  }
  uint64_t v13 = v12[2];
  if (v13 < 0)
  {
    std::operator+<char>();
    std::string::size_type v15 = std::string::append(&v41, "', which is not supported. It must be positive.");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)&v44[16] = *((void *)&v15->__r_.__value_.__l + 2);
    *(_OWORD *)__int32 v44 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  else
  {
    if (*((int *)a2 + 18) < 1) {
      goto LABEL_27;
    }
    uint64_t v14 = *(int *)(*(void *)(*((void *)a2 + 10) + 8) + 36);
    if (v13 < v14) {
      goto LABEL_27;
    }
    std::to_string(&v36, v13);
    long long v17 = std::string::insert(&v36, 0, "Value of 'axis' is ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    long long v19 = std::string::append(&v37, ", but it must be in the range [0,");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v14);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v23 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v25 = std::string::append(&v39, ") for layer of type 'ArgSort' and name '");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    uint64_t v27 = *((void *)a2 + 14);
    int v28 = *(char *)(v27 + 23);
    if (v28 >= 0) {
      long long v29 = (const std::string::value_type *)*((void *)a2 + 14);
    }
    else {
      long long v29 = *(const std::string::value_type **)v27;
    }
    if (v28 >= 0) {
      std::string::size_type v30 = *(unsigned __int8 *)(v27 + 23);
    }
    else {
      std::string::size_type v30 = *(void *)(v27 + 8);
    }
    std::string v31 = std::string::append(&v40, v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::string v33 = std::string::append(&v41, "'.");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(void *)&v44[16] = *((void *)&v33->__r_.__value_.__l + 2);
    *(_OWORD *)__int32 v44 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 13);
  }
  if ((v44[23] & 0x80000000) != 0) {
    operator delete(*(void **)v44);
  }
LABEL_28:
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
}

void sub_2242A03EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 105) < 0) {
    operator delete(*(void **)(v54 - 128));
  }
  if (*(char *)(v54 - 65) < 0) {
    operator delete(*(void **)(v54 - 88));
  }
  _Unwind_Resume(exception_object);
}

double CoreML::NeuralNetworkSpecValidator::validateSliceBySizeLayer@<D0>(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)a2);
  CoreML::validateInputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)2, 2, (CoreML::Result *)&v7);
  *(void *)a2 = v7;
  BOOL v5 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v5);
  }
  *(_OWORD *)BOOL v5 = v8;
  *(void *)(a2 + 24) = v9;
  if (CoreML::Result::good((CoreML::Result *)a2))
  {
    CoreML::validateOutputCount(a1, (const CoreML::Specification::NeuralNetworkLayer *)1, 1, (CoreML::Result *)&v7);
    *(void *)a2 = v7;
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*v5);
    }
    double result = *(double *)&v8;
    *(_OWORD *)BOOL v5 = v8;
    *(void *)(a2 + 24) = v9;
  }
  return result;
}

void sub_2242A05F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void CoreML::NeuralNetworkSpecValidator::validateFailUnknownType(const CoreML::Specification::NeuralNetworkLayer *a1@<X1>, _DWORD *a2@<X8>)
{
  CoreML::Specification::NeuralNetworkLayer::GetTypeName(&v17);
  BOOL v5 = std::string::insert(&v17, 0, "Unsupported layer type (");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v18, ") for layer '");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = *((void *)a1 + 14);
  int v10 = *(char *)(v9 + 23);
  if (v10 >= 0) {
    BOOL v11 = (const std::string::value_type *)*((void *)a1 + 14);
  }
  else {
    BOOL v11 = *(const std::string::value_type **)v9;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v9 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v9 + 8);
  }
  uint64_t v13 = std::string::append(&v19, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v15 = std::string::append(&v20, "'.");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v15->__r_.__value_.__r.__words[2];
  long long v21 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  CoreML::Result::Result(a2, 13);
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_2242A076C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 25) < 0) {
    operator delete(*(void **)(v28 - 48));
  }
  if (*(char *)(v28 - 57) < 0) {
    operator delete(*(void **)(v28 - 80));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

const char *MLActivationParamsNonlinearityType_Name(int a1)
{
  if (a1 > 30)
  {
    if (a1 <= 49)
    {
      switch(a1)
      {
        case 31:
          return "MLActivationParamsNonlinearityType_scaledTanh";
        case 40:
          return "MLActivationParamsNonlinearityType_sigmoid";
        case 41:
          return "MLActivationParamsNonlinearityType_sigmoidHard";
        default:
          return "INVALID";
      }
    }
    else if (a1 > 69)
    {
      if (a1 != 70)
      {
        if (a1 == 71) {
          return "MLActivationParamsNonlinearityType_parametricSoftplus";
        }
        return "INVALID";
      }
      return "MLActivationParamsNonlinearityType_softplus";
    }
    else
    {
      if (a1 != 50)
      {
        if (a1 == 60) {
          return "MLActivationParamsNonlinearityType_softsign";
        }
        return "INVALID";
      }
      return "MLActivationParamsNonlinearityType_ELU";
    }
  }
  else if (a1 <= 14)
  {
    if (!a1) {
      return "INVALID";
    }
    if (a1 != 5)
    {
      if (a1 == 10) {
        return "MLActivationParamsNonlinearityType_ReLU";
      }
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_linear";
  }
  else if (a1 > 24)
  {
    if (a1 != 25)
    {
      if (a1 == 30) {
        return "MLActivationParamsNonlinearityType_tanh";
      }
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_PReLU";
  }
  else
  {
    if (a1 != 15)
    {
      if (a1 == 20) {
        return "MLActivationParamsNonlinearityType_thresholdedReLU";
      }
      return "INVALID";
    }
    return "MLActivationParamsNonlinearityType_leakyReLU";
  }
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_2242A0B00(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_2242A0BB0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

turi::supervised_2::logistic_regression *turi::supervised_2::logistic_regression::logistic_regression(turi::supervised_2::logistic_regression *this)
{
  uint64_t v2 = turi::supervised_2::supervised_learning_model_base::supervised_learning_model_base(this);
  *(void *)uint64_t v2 = &unk_26D7769B0;
  *(_OWORD *)((char *)v2 + 824) = 0u;
  *(_OWORD *)((char *)v2 + 840) = 0u;
  *((void *)v2 + 107) = 0;
  unint64_t v3 = turi::thread::cpu_count(v2);
  std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::vector((void *)this + 108, v3);
  *((void *)this + 111) = 0;
  *((unsigned char *)this + 896) = 1;
  return this;
}

void sub_2242A0CF4(_Unwind_Exception *a1)
{
  free(v1[103]);
  turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base((turi::supervised_2::supervised_learning_model_base *)v1);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::~logistic_regression(turi::supervised_2::logistic_regression *this)
{
  *(void *)this = &unk_26D7769B0;
  uint64_t v2 = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void **)((char *)this + 864);
  std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  free(*((void **)this + 103));
  turi::supervised_2::supervised_learning_model_base::~supervised_learning_model_base(this);
}

{
  uint64_t vars8;

  turi::supervised_2::logistic_regression::~logistic_regression(this);
  JUMPOUT(0x22A614FA0);
}

void turi::supervised_2::logistic_regression::internal_init_options(turi::supervised_2::logistic_regression *this)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v41, "convergence_threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Convergence threshold for training");
  uint64_t v2 = (turi::supervised_2::logistic_regression *)((char *)this + 224);
  int v50 = 0;
  char v51 = 1;
  uint64_t v49 = 0x3F847AE147AE147BLL;
  turi::option_manager::create_real_option(v2, &v41, &__p, (uint64_t)&v49, 0, 1.0e-10, 1.0e20);
  switch(v51)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v3 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      if (*(char *)(v49 + 31) < 0) {
        operator delete(*(void **)(v49 + 8));
      }
      BOOL v4 = (void *)v3;
      uint64_t v5 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v6 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      int v7 = *(void **)(v49 + 8);
      if (v7)
      {
        *(void *)(v49 + 16) = v7;
        operator delete(v7);
      }
      BOOL v4 = (void *)v6;
      uint64_t v5 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      v39[0] = (void *)(v49 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v8 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      v39[0] = (void *)(v49 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
LABEL_18:
      BOOL v4 = (void *)v8;
      uint64_t v5 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v9 = v49;
      if (!v49) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v49 + 16));
      BOOL v4 = (void *)v9;
      unsigned int v10 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v49, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v11 = (void *)v49;
      if (!v49) {
        goto LABEL_33;
      }
      std::string::size_type v12 = *(void **)(v49 + 48);
      if (v12)
      {
        *(void *)(v49 + 56) = v12;
        operator delete(v12);
      }
      uint64_t v13 = (void *)v11[3];
      if (v13)
      {
        v11[4] = v13;
        operator delete(v13);
      }
      long long v14 = (std::__shared_weak_count *)v11[2];
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      BOOL v4 = v11;
      unsigned int v10 = 2071181815;
LABEL_31:
      uint64_t v5 = v10 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v4, v5);
LABEL_33:
      uint64_t v49 = 0;
      int v50 = 0;
      char v51 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v41, "step_size");
      std::string::basic_string[abi:ne180100]<0>(&__p, "Guess for the initial step size for the solver");
      int v47 = 0;
      char v48 = 1;
      uint64_t v46 = 0x3FF0000000000000;
      turi::option_manager::create_real_option(v2, &v41, &__p, (uint64_t)&v46, 0, 1.0e-10, 1.0e20);
      switch(v48)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v15 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          if (*(char *)(v46 + 31) < 0) {
            operator delete(*(void **)(v46 + 8));
          }
          long long v16 = (void *)v15;
          uint64_t v17 = 0x1012C404EF22A49;
          goto LABEL_68;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v18 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          std::string v19 = *(void **)(v46 + 8);
          if (v19)
          {
            *(void *)(v46 + 16) = v19;
            operator delete(v19);
          }
          long long v16 = (void *)v18;
          uint64_t v17 = 0x1080C409938AC02;
          goto LABEL_68;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          v39[0] = (void *)(v46 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
          goto LABEL_54;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v20 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          v39[0] = (void *)(v46 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
LABEL_54:
          long long v16 = (void *)v20;
          uint64_t v17 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          uint64_t v21 = v46;
          if (!v46) {
            goto LABEL_69;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v46 + 16));
          long long v16 = (void *)v21;
          unsigned int v22 = -235920773;
          goto LABEL_67;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v46, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_69;
          }
          long long v23 = (void *)v46;
          if (!v46) {
            goto LABEL_69;
          }
          long long v24 = *(void **)(v46 + 48);
          if (v24)
          {
            *(void *)(v46 + 56) = v24;
            operator delete(v24);
          }
          std::string::size_type v25 = (void *)v23[3];
          if (v25)
          {
            v23[4] = v25;
            operator delete(v25);
          }
          long long v26 = (std::__shared_weak_count *)v23[2];
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          long long v16 = v23;
          unsigned int v22 = 2071181815;
LABEL_67:
          uint64_t v17 = v22 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x22A614FA0](v16, v17);
LABEL_69:
          uint64_t v46 = 0;
          int v47 = 0;
          char v48 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v41.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v41, "lbfgs_memory_level");
          std::string::basic_string[abi:ne180100]<0>(&__p, "Number of previous iterations to cache for LBFGS");
          char v45 = 0;
          int v44 = 0;
          uint64_t v43 = 11;
          turi::option_manager::create_integer_option(v2, &v41, &__p, (uint64_t)&v43, (atomic_ullong *)1, (atomic_ullong *)0x7FFFFFFF, 0);
          switch(v45)
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v27 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              if (*(char *)(v43 + 31) < 0) {
                operator delete(*(void **)(v43 + 8));
              }
              uint64_t v28 = (void *)v27;
              uint64_t v29 = 0x1012C404EF22A49;
              goto LABEL_104;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v30 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              std::string v31 = *(void **)(v43 + 8);
              if (v31)
              {
                *(void *)(v43 + 16) = v31;
                operator delete(v31);
              }
              uint64_t v28 = (void *)v30;
              uint64_t v29 = 0x1080C409938AC02;
              goto LABEL_104;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v32 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              v39[0] = (void *)(v43 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
              goto LABEL_90;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v32 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              v39[0] = (void *)(v43 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
LABEL_90:
              uint64_t v28 = (void *)v32;
              uint64_t v29 = 0x1020C405E66F15BLL;
              goto LABEL_104;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              uint64_t v33 = v43;
              if (!v43) {
                goto LABEL_105;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)(v43 + 16));
              uint64_t v28 = (void *)v33;
              unsigned int v34 = -235920773;
              goto LABEL_103;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)v43, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_105;
              }
              char v35 = (void *)v43;
              if (!v43) {
                goto LABEL_105;
              }
              std::string v36 = *(void **)(v43 + 48);
              if (v36)
              {
                *(void *)(v43 + 56) = v36;
                operator delete(v36);
              }
              std::string v37 = (void *)v35[3];
              if (v37)
              {
                v35[4] = v37;
                operator delete(v37);
              }
              std::string v38 = (std::__shared_weak_count *)v35[2];
              if (v38) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v38);
              }
              uint64_t v28 = v35;
              unsigned int v34 = 2071181815;
LABEL_103:
              uint64_t v29 = v34 | 0x1030C4000000000;
LABEL_104:
              MEMORY[0x22A614FA0](v28, v29);
LABEL_105:
              uint64_t v43 = 0;
              int v44 = 0;
              char v45 = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v41.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "solver");
              std::string::basic_string[abi:ne180100]<0>(v39, "Solver used for training the logistic regression model");
              turi::flexible_type::flexible_type((turi::flexible_type *)&v42, "auto");
            default:
              goto LABEL_105;
          }
        default:
          goto LABEL_69;
      }
    default:
      goto LABEL_33;
  }
}

void sub_2242A1E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,int a30,char a31,void *a32,int a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,char a42)
{
  switch(a28)
  {
    case 2:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&a26);
      break;
    case 3:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&a26);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&a26);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&a26);
      break;
    case 8:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&a26);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&a26);
      break;
    default:
      break;
  }
  a26 = 0;
  a27 = 0;
  a28 = 0;
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::supervised_2::logistic_regression::internal_setup_iterative_training(turi::supervised_2::logistic_regression *this, int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 41) + 1;
  *((void *)this + 107) = v4;
  *((void *)this + 106) = (*((void *)this + 98) - 1) * v4;
  turi::flexible_type_converter<unsigned long>::set((atomic_ullong **)this + 107, (uint64_t)__p);
  *(void *)&v28[5] = *(void *)&__p[5];
  *(void *)uint64_t v28 = *(void *)__p;
  v28[12] = __p[12];
  LODWORD(v27.__locale_) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "variables_per_class");
  long long v24 = __p;
  uint64_t v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)__p, (uint64_t)&std::piecewise_construct, &v24);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v5 + 14, (unsigned int *)&v27);
  if (v26 < 0) {
    operator delete(*(void **)__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v27);
  turi::flexible_type_converter<unsigned long>::set((atomic_ullong **)this + 106, (uint64_t)__p);
  *(void *)&v28[5] = *(void *)&__p[5];
  *(void *)uint64_t v28 = *(void *)__p;
  v28[12] = __p[12];
  LODWORD(v27.__locale_) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "num_coefficients");
  long long v24 = __p;
  uint64_t v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 37, (const void **)__p, (uint64_t)&std::piecewise_construct, &v24);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v6 + 14, (unsigned int *)&v27);
  if (v26 < 0) {
    operator delete(*(void **)__p);
  }
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v27);
  int v7 = (int *)global_logger();
  if (v7[169] <= 4)
  {
    if (cppipc::must_cancel((cppipc *)v7)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v8 = (file_logger *)global_logger();
    started = file_logger::start_stream(v8, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "internal_setup_iterative_training", 124, 1);
    unsigned int v10 = pthread_getspecific(*((void *)started + 74));
    if (v10 && *((unsigned char *)v10 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Beginning model training on processed features. ", 48);
    }
    uint64_t v11 = pthread_getspecific(*((void *)started + 74));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        std::string::size_type v12 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (a2)
  {
    if (*((void *)this + 104) != *((void *)this + 98) - 1 || *((void *)this + 105) != *((void *)this + 107)) {
      turi::supervised_2::logistic_regression::internal_setup_iterative_training(BOOL)::$_0::operator()();
    }
  }
  else
  {
    uint64_t v13 = *((void *)this + 98) - 1;
    uint64_t v14 = *((void *)this + 107);
    if (*((void *)this + 104) != v13 || *((void *)this + 105) != v14)
    {
      if (*((void *)this + 98) != 1 && v14 && 0x7FFFFFFFFFFFFFFFLL / v14 < v13)
      {
        unsigned int v22 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        long long v23 = std::bad_alloc::bad_alloc(v22);
        __cxa_throw(v23, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)this + 103, v14 * v13, v13, v14);
      uint64_t v13 = *((void *)this + 104);
      uint64_t v14 = *((void *)this + 105);
    }
    uint64_t v15 = *((void *)this + 103);
    uint64_t v16 = v13 * v14;
    if (v13 * v14 >= 0) {
      uint64_t v17 = v13 * v14;
    }
    else {
      uint64_t v17 = v16 + 1;
    }
    int64_t v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
    if (v16 >= 2)
    {
      unint64_t v19 = 2;
      if (v18 > 2) {
        unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(*((void **)this + 103), ((8 * v19 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v18 < v16) {
      bzero((void *)(v15 + 16 * (v17 >> 1)), 8 * v16 - 16 * (v17 >> 1));
    }
  }
  return turi::supervised_2::logistic_regression::setup_solver(this);
}

void sub_2242A2B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17)
{
}

uint64_t turi::supervised_2::logistic_regression::setup_solver(turi::supervised_2::logistic_regression *this)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v34, "solver");
  uint64_t v2 = (turi::flexible_type_impl *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v34.__r_.__value_.__l.__data_);
  switch(*((unsigned char *)v2 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_10;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_10:
      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v5 = *(void **)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      v28[0] = v5;
      v28[1] = (void *)(MEMORY[0x263F8C318] + 16);
      if (v32 < 0) {
        operator delete(v31);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v33);
      break;
    case 2:
      uint64_t v3 = *(void *)v2;
      if (*(char *)(*(void *)v2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v3 + 8), *(void *)(v3 + 16));
      }
      else
      {
        long long v4 = *(_OWORD *)(v3 + 8);
        v25.__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v4;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v2 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v2 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v2 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v2, &v25);
      break;
    case 7:
      memset(&v25, 0, sizeof(v25));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v2 + 8));
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
LABEL_54:
      __break(1u);
      return result;
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, "l2_penalty");
  uint64_t v6 = (unsigned char *)turi::option_manager::value((uint64_t)this + 224, (const void **)&v23);
  switch(v6[12])
  {
    case 0:
    case 1:
    case 6:
    case 7:
      goto LABEL_41;
    case 2:
      uint64_t v8 = *(void *)v6;
      uint64_t v9 = (char **)(*(void *)v6 + 8);
      size_t __idx = 0;
      unsigned int v10 = (char *)v9;
      if (*(char *)(v8 + 31) < 0) {
        unsigned int v10 = *v9;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v10);
      std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v28[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v8 + 31) < 0) {
        uint64_t v11 = *(void *)(v8 + 16);
      }
      else {
        uint64_t v11 = *(unsigned __int8 *)(v8 + 31);
      }
      if (__idx != v11)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v21 = std::string::append(&v34, " cannot be interpreted as a float");
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v28[0] = (void *)v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_41;
    case 3:
      uint64_t v7 = *(void *)v6;
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_41;
    case 4:
      uint64_t v12 = *(void *)v6;
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      goto LABEL_41;
    case 5:
      uint64_t v13 = *(void *)v6;
      __p[1] = 0;
      v28[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      goto LABEL_41;
    case 8:
      uint64_t v14 = *(void *)v6;
      uint64_t v15 = *(atomic_uint **)(*(void *)v6 + 16);
      __p[0] = *(void **)(*(void *)v6 + 8);
      __p[1] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 2, 1u, memory_order_relaxed);
      }
      long long v16 = *(_OWORD *)(v14 + 24);
      long long v17 = *(_OWORD *)(v14 + 40);
      long long v30 = *(_OWORD *)(v14 + 56);
      *(_OWORD *)uint64_t v28 = v16;
      long long v29 = v17;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_41;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v6 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v29 + 1))
      {
        *(void *)&long long v30 = *((void *)&v29 + 1);
        operator delete(*((void **)&v29 + 1));
      }
      if (v28[0])
      {
        v28[1] = v28[0];
        operator delete(v28[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_41:
      if (v24 < 0) {
        operator delete(v23);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v25.__r_.__value_.__l.__size_ != 4) {
          goto LABEL_50;
        }
        int64_t v18 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) != 4) {
          goto LABEL_50;
        }
        int64_t v18 = &v25;
      }
      if (LODWORD(v18->__r_.__value_.__l.__data_) == 1869903201) {
        MEMORY[0x22A614700](&v25, "lbfgs");
      }
LABEL_50:
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[7],std::string&,0>(__p, "solver");
    default:
      uint64_t result = turi::flexible_type_fail(0);
      goto LABEL_54;
  }
}

void sub_2242A35CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v37 - 89) < 0)
  {
    operator delete(*(void **)(v36 + 288));
    if ((v35 & 1) == 0)
    {
LABEL_8:
      if (a19 < 0) {
        operator delete(a14);
      }
      if (a25 < 0) {
        operator delete(a20);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

double turi::supervised_2::logistic_regression::internal_next_training_iteration@<D0>(turi::supervised_2::logistic_regression *this@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void))(**((void **)this + 111) + 24))(*((void *)this + 111));
  uint64_t v4 = *((void *)this + 111);
  if ((*(_DWORD *)(v4 + 120) - 6) <= 2) {
    turi::supervised_2::logistic_regression::internal_next_training_iteration(void)::$_0::operator()();
  }
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "residual");
  char v32 = __p;
  uint64_t v5 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v5 + 14, (void *)(v4 + 80));
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "training_loss");
  char v32 = __p;
  uint64_t v6 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v6 + 14, (void *)(v4 + 88));
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "num_function_evaluations");
  char v32 = __p;
  uint64_t v7 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<unsigned long>(v7 + 14, (void *)(v4 + 96));
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "step_size");
  char v32 = __p;
  uint64_t v8 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v32);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<double>(v8 + 14, (void *)(v4 + 112));
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v10 = *(long long **)(v4 + 24);
  uint64_t v11 = *((void *)this + 107);
  uint64_t v12 = *((void *)this + 98) - 1;
  uint64_t v13 = (void *)((char *)this + 824);
  if (*((void *)this + 104) != v12 || *((void *)this + 105) != v11)
  {
    if (*((void *)this + 98) != 1 && v11 && 0x7FFFFFFFFFFFFFFFLL / v11 < v12)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      long long v29 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v29, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)this + 103, v11 * v12, v12, v11);
    uint64_t v12 = *((void *)this + 104);
    uint64_t v11 = *((void *)this + 105);
  }
  uint64_t v14 = (_OWORD *)*v13;
  uint64_t v15 = v12 * v11;
  if (v12 * v11 >= 0) {
    uint64_t v16 = v12 * v11;
  }
  else {
    uint64_t v16 = v15 + 1;
  }
  int64_t v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (v15 >= 2)
  {
    int64_t v18 = 0;
    unint64_t v19 = (_OWORD *)*v13;
    uint64_t v20 = v10;
    do
    {
      long long v21 = *v20++;
      double result = *(double *)&v21;
      *v19++ = v21;
      v18 += 2;
    }
    while (v18 < v17);
  }
  BOOL v22 = v15 <= v17;
  uint64_t v23 = v15 - v17;
  if (!v22)
  {
    uint64_t v24 = v16 >> 1;
    std::string v25 = (double *)&v10[v16 >> 1];
    char v26 = (double *)&v14[v24];
    do
    {
      double v27 = *v25++;
      double result = v27;
      *v26++ = v27;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_2242A3AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::internal_predict(turi::supervised_2::logistic_regression *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  thread_compute_buffer = (void **)turi::supervised_2::logistic_regression::get_thread_compute_buffer(a1);
  if (*((unsigned char *)a1 + 896))
  {
    turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(a1, a2, thread_compute_buffer + 15, a3, a4);
  }
  else
  {
    turi::supervised_2::logistic_regression::_internal_predict<Eigen::SparseVector<double,0,int>>((uint64_t)a1, a2, thread_compute_buffer + 23, a3, a4);
  }
}

unsigned char *turi::supervised_2::logistic_regression::get_thread_compute_buffer(turi::supervised_2::logistic_regression *this)
{
  uint64_t v2 = *(void *)turi::thread::get_tls_data(this);
  uint64_t v3 = *((void *)this + 108);
  uint64_t v4 = (unsigned char *)(v3 + 232 * v2);
  if (!*v4)
  {
    if (*((unsigned char *)this + 896))
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(v3 + 232 * v2 + 120), *((void *)this + 41) + 1);
    }
    else
    {
      uint64_t v6 = v3 + 232 * v2;
      *(void *)(v6 + 224) = *((void *)this + 41) + 1;
      *(void *)(v6 + 208) = 0;
    }
    *uint64_t v4 = 1;
  }
  return v4;
}

void turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::thread *a1@<X0>, uint64_t *a2@<X1>, void **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a1;
  unsigned int v10 = (char *)*a3;
  uint64_t v11 = (uint64_t)a3[1];
  if (v11 >= 0) {
    uint64_t v12 = (uint64_t)a3[1];
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    unint64_t v14 = 2;
    if (v13 > 2) {
      unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*a3, ((8 * v14 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v13 < v11) {
    bzero(&v10[16 * (v12 >> 1)], 8 * v11 - 16 * (v12 >> 1));
  }
  if (*((unsigned char *)a2 + 32))
  {
    uint64_t v15 = *a2;
    uint64_t v16 = *(void *)(*a2 + 56);
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v18 = *(void *)(v15 + 96) + 8 * a2[2] + 8 * (*(unsigned char *)(v15 + 18) == 0);
      uint64_t v19 = *(void *)(v15 + 72);
      uint64_t v20 = (double *)*a3;
      do
      {
        uint64_t v21 = *(void *)(v19 + 16 * v17);
        unint64_t v22 = *(void *)(v21 + 64);
        uint64_t v23 = *(void *)(v21 + 104);
        switch(*(_DWORD *)(v21 + 24))
        {
          case 0:
            double v24 = *(double *)v18;
            v18 += 8;
            double v25 = v24;
            if (v22)
            {
              if (*((unsigned char *)v8 + 360)) {
                double v25 = v25 * *(double *)(*((void *)v8 + 46) + 8 * v23);
              }
              goto LABEL_54;
            }
            break;
          case 1:
            double v36 = *(double *)v18;
            v18 += 8;
            double v35 = v36;
            if (*(void *)&v36 < v22)
            {
              v23 += *(void *)&v35;
              if (*((unsigned char *)v8 + 360)) {
                double v25 = *(double *)(*((void *)v8 + 46) + 8 * v23);
              }
              else {
                double v25 = 1.0;
              }
LABEL_54:
              v20[v23] = v25;
            }
            break;
          case 2:
            uint64_t v26 = *(void *)(v21 + 72);
            if (v26)
            {
              uint64_t v27 = 0;
              unint64_t v28 = 0;
              a1 = (turi::thread *)(8 * v23);
              uint64_t v29 = (uint64_t)*a3 + 8 * v23;
              do
              {
                if (v28 < v22)
                {
                  double v30 = *(double *)(v18 + 8 * v28);
                  if (*((unsigned char *)v8 + 360)) {
                    double v30 = v30 * *(double *)((char *)a1 + 8 * v28 + *((void *)v8 + 46));
                  }
                  *(double *)(v29 + 8 * v28) = v30;
                }
                ++v28;
                v27 -= 8;
              }
              while (v26 != v28);
              goto LABEL_32;
            }
            break;
          case 3:
            double v38 = *(double *)v18;
            v18 += 8;
            double v37 = v38;
            if (v38 != 0.0)
            {
              std::string v39 = (double *)*a3;
              do
              {
                if (*(void *)v18 < v22)
                {
                  uint64_t v40 = *(void *)v18 + v23;
                  a1 = (turi::thread *)*((unsigned __int8 *)v8 + 360);
                  if (*((unsigned char *)v8 + 360))
                  {
                    a1 = (turi::thread *)*((void *)v8 + 46);
                    double v41 = *((double *)a1 + v40);
                  }
                  else
                  {
                    double v41 = 1.0;
                  }
                  v39[v40] = v41;
                }
                v18 += 8;
                --*(void *)&v37;
              }
              while (v37 != 0.0);
            }
            break;
          case 4:
            double v43 = *(double *)v18;
            v18 += 8;
            double v42 = v43;
            if (v43 != 0.0)
            {
              int v44 = (double *)*a3;
              do
              {
                if (*(void *)v18 < v22)
                {
                  double v45 = *(double *)(v18 + 8);
                  uint64_t v46 = *(void *)v18 + v23;
                  a1 = (turi::thread *)*((unsigned __int8 *)v8 + 360);
                  if (*((unsigned char *)v8 + 360))
                  {
                    a1 = (turi::thread *)*((void *)v8 + 46);
                    double v45 = v45 * *((double *)a1 + v46);
                  }
                  v44[v46] = v45;
                }
                v18 += 16;
                --*(void *)&v42;
              }
              while (v42 != 0.0);
            }
            break;
          case 7:
            uint64_t v31 = *(void *)(v21 + 72);
            if (v31)
            {
              uint64_t v27 = 0;
              unint64_t v32 = 0;
              a1 = (turi::thread *)(8 * v23);
              uint64_t v33 = (uint64_t)*a3 + 8 * v23;
              do
              {
                if (v32 < v22)
                {
                  double v34 = *(double *)(v18 + 8 * v32);
                  if (*((unsigned char *)v8 + 360)) {
                    double v34 = v34 * *(double *)((char *)a1 + 8 * v32 + *((void *)v8 + 46));
                  }
                  *(double *)(v33 + 8 * v32) = v34;
                }
                ++v32;
                v27 -= 8;
              }
              while (v31 != v32);
LABEL_32:
              v18 -= v27;
            }
            break;
          default:
            break;
        }
        ++v17;
      }
      while (v17 != v16);
    }
  }
  int v47 = (char *)*a3;
  *((void *)*a3 + *((void *)v8 + 41)) = 0x3FF0000000000000;
  if (*((void *)v8 + 98) == 2)
  {
    char v48 = (char *)*((void *)v8 + 103);
    uint64_t v49 = *((void *)v8 + 106);
    __p[0] = a3;
    __p[1] = v48;
    v150[0] = v49;
    if (v49)
    {
      int v152 = v47;
      uint64_t v154 = v48;
      uint64_t v156 = v49;
      int v157 = __p;
      double v50 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Map<Eigen::Matrix<double,-1,1,0,-1,1> const,0,Eigen::Stride<0,0>> const>>,3,0>::run((uint64_t)&v151);
    }
    else
    {
      double v50 = 0.0;
    }
    long double v65 = exp(-v50);
    long double v66 = log1p(v65);
    double v67 = exp(-v66);
    double v68 = v67;
    switch(a4)
    {
      case 1:
        *(_DWORD *)(a5 + 8) = 0;
        *(unsigned char *)(a5 + 12) = 1;
        *(double *)a5 = v50;
        break;
      case 2:
      case 3:
        *(_DWORD *)(a5 + 8) = 0;
        *(unsigned char *)(a5 + 12) = 1;
        *(double *)a5 = v67;
        break;
      case 4:
        uint64_t v104 = (double *)operator new(0x10uLL);
        *uint64_t v104 = 1.0 - v68;
        v104[1] = v68;
        *(void *)(a5 + 5) = 0;
        *(void *)a5 = 0;
        *(unsigned char *)(a5 + 12) = 3;
        operator new();
      case 5:
        *(unsigned char *)(a5 + 12) = 0;
        *(_DWORD *)(a5 + 8) = 0;
        *(void *)a5 = v67 >= 0.5;
        break;
      case 6:
        uint64_t v105 = *(void *)(*(void *)(*(void *)(*((void *)v8 + 96) + 24) + 32) + 80) + 16 * (v67 >= 0.5);
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        *(unsigned char *)(a5 + 12) = 0;
        if (v105 != a5)
        {
          uint64_t v106 = *(void *)v105;
          *(void *)(a5 + 5) = *(void *)(v105 + 5);
          *(void *)a5 = v106;
          int v107 = *(unsigned __int8 *)(v105 + 12);
          *(unsigned char *)(a5 + 12) = v107;
          switch(v107)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              std::string v108 = *(atomic_ullong **)a5;
              goto LABEL_123;
            default:
              return;
          }
        }
        break;
      default:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    uint64_t v51 = *(void *)turi::thread::get_tls_data(a1);
    uint64_t v52 = *((void *)v8 + 108);
    int v53 = (unsigned char *)(v52 + 232 * v51);
    if (!*v53)
    {
      if (*((unsigned char *)v8 + 896))
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(v52 + 232 * v51 + 120), *((void *)v8 + 41) + 1);
      }
      else
      {
        uint64_t v145 = v52 + 232 * v51;
        *(void *)(v145 + 224) = *((void *)v8 + 41) + 1;
        *(void *)(v145 + 208) = 0;
      }
      *int v53 = 1;
    }
    uint64_t v146 = a5;
    uint64_t v54 = (void *)(v52 + 232 * v51);
    BOOL v55 = (const void **)(v54 + 17);
    int v56 = (void **)(v54 + 19);
    unsigned int v151 = (char *)v8 + 824;
    int v152 = (char *)a3;
    Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(v54 + 17, (uint64_t **)&v151);
    int v58 = (double *)v54[17];
    uint64_t v57 = v54[18];
    if (v54[20] != v57)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v54 + 19, v54[18], 1);
      uint64_t v57 = v54[20];
    }
    int v59 = v54 + 21;
    uint64_t v60 = (float64x2_t *)*v56;
    if (v57 >= 1)
    {
      long long v61 = (long double *)*v56;
      uint64_t v62 = v57;
      do
      {
        long double v63 = *v58++;
        *v61++ = exp(v63);
        --v62;
      }
      while (v62);
    }
    if (v57)
    {
      unsigned int v151 = v60;
      __dst = v56;
      double v64 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v151);
      uint64_t v60 = (float64x2_t *)*v56;
    }
    else
    {
      double v64 = 0.0;
    }
    uint64_t v69 = (uint64_t)v56[1];
    if (v59[1] != v69)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v59, v69, 1);
      uint64_t v69 = v59[1];
    }
    double v70 = v64 + 1.0;
    long long v71 = (float64x2_t *)*v59;
    if (v69 >= 0) {
      uint64_t v72 = v69;
    }
    else {
      uint64_t v72 = v69 + 1;
    }
    int64_t v73 = v72 & 0xFFFFFFFFFFFFFFFELL;
    if (v69 >= 2)
    {
      int64_t v74 = 0;
      float64x2_t v75 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v70, 0);
      long long v76 = (float64x2_t *)*v59;
      long long v77 = v60;
      do
      {
        float64x2_t v78 = *v77++;
        *v76++ = vdivq_f64(v78, v75);
        v74 += 2;
      }
      while (v74 < v73);
    }
    BOOL v79 = __OFSUB__(v69, v73);
    uint64_t v80 = v69 - v73;
    if (!((v80 < 0) ^ v79 | (v80 == 0)))
    {
      uint64_t v81 = v72 >> 1;
      f64 = v60[v72 >> 1].f64;
      std::string v83 = v71[v81].f64;
      do
      {
        double v84 = *f64++;
        *v83++ = v84 / v70;
        --v80;
      }
      while (v80);
    }
    switch(a4)
    {
      case 0:
      case 8:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#2}::operator()();
      case 1:
      case 3:
        std::string v85 = *v55;
        uint64_t v86 = (uint64_t)*v55 + 8 * *((void *)v8 + 98) - 8;
        uint64_t v87 = v86 - (void)*v55;
        __p[1] = 0;
        v150[0] = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, v85, v86, v87 >> 3);
        uint64_t v148 = 0;
        uint64_t v89 = __p[0];
        uint64_t v88 = (uint64_t *)__p[1];
        if (__p[1] >= (void *)v150[0])
        {
          unint64_t v111 = (((char *)__p[1] - (char *)__p[0]) >> 3) + 1;
          if (v111 >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          int64_t v112 = v150[0] - (unint64_t)__p[0];
          if ((uint64_t)(v150[0] - (unint64_t)__p[0]) >> 2 > v111) {
            unint64_t v111 = v112 >> 2;
          }
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v113 = v111;
          }
          uint64_t v154 = 0;
          BOOL v155 = v150;
          if (v113) {
            uint64_t v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v150, v113);
          }
          else {
            uint64_t v114 = 0;
          }
          unsigned int v151 = v114;
          int v152 = v114;
          __dst = v114;
          uint64_t v154 = &v114[8 * v113];
          std::__split_buffer<double>::push_back(&v151, (double *)&v148);
          uint64_t v130 = v152;
          uint64_t v131 = __p[0];
          if (__p[0] != v89)
          {
            uint64_t v132 = v89;
            do
            {
              uint64_t v133 = *--v132;
              *((void *)v130 - 1) = v133;
              v130 -= 8;
            }
            while (v132 != v131);
          }
          int v152 = v130;
          uint64_t v134 = __dst;
          unint64_t v135 = (char *)((char *)__p[1] - (char *)v89);
          if (__p[1] != v89)
          {
            memmove(__dst, v89, (char *)__p[1] - (char *)v89);
            uint64_t v130 = v152;
            uint64_t v89 = __p[1];
          }
          uint64_t v136 = __p[0];
          BOOL v137 = (char *)v150[0];
          __p[0] = v130;
          __p[1] = &v135[(void)v134];
          v150[0] = v154;
          __dst = v89;
          uint64_t v154 = v137;
          unsigned int v151 = v136;
          int v152 = (char *)v136;
          if (v89 != v136) {
            __dst = (char *)v89 + (((char *)v136 - (char *)v89 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
          if (v136) {
            operator delete(v136);
          }
        }
        else if (__p[0] == __p[1])
        {
          *(void *)__p[0] = 0;
          __p[1] = v89 + 1;
        }
        else
        {
          long long v90 = (char *)__p[0] + 8;
          uint64_t v91 = (uint64_t *)((char *)__p[1] - 8);
          uint64_t v92 = __p[1];
          while (v91 < v88)
          {
            uint64_t v93 = *v91++;
            *v92++ = v93;
          }
          __p[1] = v92;
          if (v88 != (uint64_t *)v90) {
            memmove(&v88[-(((char *)v88 - v90) >> 3)], v89, (char *)v88 - v90);
          }
          *uint64_t v89 = v148;
        }
        *(void *)(v146 + 5) = 0;
        *(void *)uint64_t v146 = 0;
        *(unsigned char *)(v146 + 12) = 3;
        operator new();
      case 2:
      case 4:
        __p[0] = 0;
        __p[1] = 0;
        v150[0] = 0;
        unint64_t v101 = *((void *)v8 + 98);
        if (v101)
        {
          if (v101 >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          __p[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v150, v101);
          __p[1] = __p[0];
          v150[0] = (char *)__p[0] + 8 * v102;
        }
        if (v59[1])
        {
          unsigned int v151 = (void *)*v59;
          __dst = v59;
          double v103 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v151);
        }
        else
        {
          double v103 = 0.0;
        }
        double v118 = 1.0 - v103;
        uint64_t v119 = (char *)__p[1];
        if (__p[1] >= (void *)v150[0])
        {
          uint64_t v121 = (char *)__p[0];
          int64_t v122 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          int64_t v124 = v150[0] - (unint64_t)__p[0];
          if ((uint64_t)(v150[0] - (unint64_t)__p[0]) >> 2 > v123) {
            unint64_t v123 = v124 >> 2;
          }
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v125 = v123;
          }
          if (v125)
          {
            uint64_t v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v150, v125);
            uint64_t v121 = (char *)__p[0];
            uint64_t v119 = (char *)__p[1];
          }
          else
          {
            uint64_t v126 = 0;
          }
          BOOL v138 = (double *)&v126[8 * v122];
          int v139 = &v126[8 * v125];
          double *v138 = v118;
          char v120 = v138 + 1;
          while (v119 != v121)
          {
            uint64_t v140 = *((void *)v119 - 1);
            v119 -= 8;
            *((void *)v138-- - 1) = v140;
          }
          __p[0] = v138;
          __p[1] = v120;
          v150[0] = v139;
          if (v121) {
            operator delete(v121);
          }
        }
        else
        {
          *(double *)__p[1] = v118;
          char v120 = v119 + 8;
        }
        __p[1] = v120;
        uint64_t v141 = (char *)(*v59 + 8 * *((void *)v8 + 98) - 8);
        std::vector<double>::__insert_with_size[abi:ne180100]<double *,double *>((uint64_t)__p, (uint64_t)v120, (char *)*v59, v141, (uint64_t)&v141[-*v59] >> 3);
        uint64_t v142 = (double *)__p[0];
        uint64_t v143 = (double *)__p[1];
        while (v142 != v143)
        {
          double v144 = 0.0;
          if (*v142 < 0.0 || (double v144 = 1.0, *v142 > 1.0)) {
            *uint64_t v142 = v144;
          }
          ++v142;
        }
        *(void *)(v146 + 5) = 0;
        *(void *)uint64_t v146 = 0;
        *(unsigned char *)(v146 + 12) = 3;
        operator new();
      case 5:
      case 6:
        uint64_t v94 = *((void *)v8 + 98);
        uint64_t v95 = v94 - 1;
        if (v94 == 1)
        {
          uint64_t v97 = 0;
        }
        else
        {
          uint64_t v96 = 0;
          uint64_t v97 = 0;
          double v98 = 0.0;
          do
          {
            double v99 = *((double *)*v55 + v96);
            if (v98 < v99) {
              uint64_t v97 = v96 + 1;
            }
            uint64_t v100 = v96 + 1;
            if (v98 < v99) {
              double v98 = *((double *)*v55 + v96);
            }
            ++v96;
          }
          while (v95 != v100);
        }
        if (a4 == 5)
        {
          *(unsigned char *)(v146 + 12) = 0;
          *(_DWORD *)(v146 + 8) = 0;
          *(void *)uint64_t v146 = v97;
        }
        else
        {
          uint64_t v115 = *(void *)(*(void *)(*(void *)(*((void *)v8 + 96) + 24) + 32) + 80) + 16 * v97;
          *(void *)uint64_t v146 = 0;
          *(_DWORD *)(v146 + 8) = 0;
          *(unsigned char *)(v146 + 12) = 0;
          if (v115 != v146)
          {
            uint64_t v116 = *(void *)v115;
            *(void *)(v146 + 5) = *(void *)(v115 + 5);
            *(void *)uint64_t v146 = v116;
            int v117 = *(unsigned __int8 *)(v115 + 12);
            *(unsigned char *)(v146 + 12) = v117;
            switch(v117)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
                std::string v108 = *(atomic_ullong **)v146;
LABEL_123:
                atomic_fetch_add(v108, 1uLL);
                break;
              default:
                return;
            }
          }
        }
        break;
      case 7:
        std::string::size_type v109 = (float64x2_t *)*v59;
        if (v59[1])
        {
          unsigned int v151 = (void *)*v59;
          __dst = v59;
          double v110 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v151);
          std::string::size_type v109 = (float64x2_t *)*v59;
        }
        else
        {
          double v110 = 0.0;
        }
        *(double *)std::string __p = 1.0 - v110;
        unsigned int v151 = v109;
        __dst = v59;
        Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v151);
        unsigned int v151 = v127;
        BOOL v128 = __p;
        if (*(double *)__p < *(double *)&v127) {
          BOOL v128 = &v151;
        }
        if (*(double *)v128 < 0.0) {
          BOOL v128 = (void **)&v148;
        }
        uint64_t v147 = 0x3FF0000000000000;
        uint64_t v148 = 0;
        if (*(double *)v128 <= 1.0) {
          uint64_t v129 = (uint64_t *)v128;
        }
        else {
          uint64_t v129 = &v147;
        }
        *(void *)uint64_t v146 = 0;
        *(_DWORD *)(v146 + 8) = 0;
        *(unsigned char *)(v146 + 12) = 0;
        turi::flexible_type::operator=<double>(v146, v129);
        break;
      default:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#3}::operator()();
    }
  }
}

void turi::supervised_2::logistic_regression::_internal_predict<Eigen::SparseVector<double,0,int>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a3 + 1;
  a3[3] = 0;
  if (*((unsigned char *)a2 + 32))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *(void *)(*a2 + 56);
    if (v8)
    {
      uint64_t v9 = 0;
      uint64_t v10 = *(void *)(v7 + 96) + 8 * a2[2] + 8 * (*(unsigned char *)(v7 + 18) == 0);
      uint64_t v149 = *(void *)(*a2 + 56);
      uint64_t v150 = *a2;
      do
      {
        uint64_t v11 = *(void *)(*(void *)(v7 + 72) + 16 * v9);
        unint64_t v12 = *(void *)(v11 + 64);
        uint64_t v13 = *(void *)(v11 + 104);
        switch(*(_DWORD *)(v11 + 24))
        {
          case 0:
            double v14 = *(double *)v10;
            v10 += 8;
            double v15 = v14;
            if (v12)
            {
              if (*(unsigned char *)(a1 + 360)) {
                double v15 = v15 * *(double *)(*(void *)(a1 + 368) + 8 * v13);
              }
              uint64_t v16 = (int)v13;
              goto LABEL_29;
            }
            break;
          case 1:
            double v29 = *(double *)v10;
            v10 += 8;
            double v28 = v29;
            if (*(void *)&v29 < v12)
            {
              uint64_t v30 = *(void *)&v28 + v13;
              uint64_t v16 = (int)v30;
              if (*(unsigned char *)(a1 + 360))
              {
                double v15 = *(double *)(*(void *)(a1 + 368) + 8 * v30);
LABEL_29:
                BOOL v155 = 0;
                *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, v16, &v155) = v15;
              }
              else
              {
                BOOL v155 = 0;
                *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, (int)v30, &v155) = 0x3FF0000000000000;
              }
            }
            break;
          case 2:
            uint64_t v17 = *(void *)(v11 + 72);
            if (v17)
            {
              uint64_t v18 = 0;
              unint64_t v19 = 0;
              uint64_t v20 = v13 << 32;
              uint64_t v21 = 8 * v13;
              do
              {
                if (v19 < v12)
                {
                  double v22 = *(double *)(v10 + 8 * v19);
                  if (*(unsigned char *)(a1 + 360)) {
                    double v22 = v22 * *(double *)(*(void *)(a1 + 368) + v21 + 8 * v19);
                  }
                  BOOL v155 = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, v20 >> 32, &v155) = v22;
                }
                ++v19;
                v20 += 0x100000000;
                v18 -= 8;
              }
              while (v17 != v19);
              goto LABEL_24;
            }
            break;
          case 3:
            double v32 = *(double *)v10;
            v10 += 8;
            for (double i = v32; i != 0.0; --*(void *)&i)
            {
              if (*(void *)v10 < v12)
              {
                uint64_t v33 = *(void *)v10 + v13;
                if (*(unsigned char *)(a1 + 360))
                {
                  uint64_t v34 = *(void *)(*(void *)(a1 + 368) + 8 * v33);
                  BOOL v155 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, (int)v33, &v155) = v34;
                }
                else
                {
                  BOOL v155 = 0;
                  *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, (int)v33, &v155) = 0x3FF0000000000000;
                }
              }
              v10 += 8;
            }
            break;
          case 4:
            double v36 = *(double *)v10;
            v10 += 8;
            for (double j = v36; j != 0.0; --*(void *)&j)
            {
              if (*(void *)v10 < v12)
              {
                double v37 = *(double *)(v10 + 8);
                uint64_t v38 = *(void *)v10 + v13;
                if (*(unsigned char *)(a1 + 360)) {
                  double v37 = v37 * *(double *)(*(void *)(a1 + 368) + 8 * v38);
                }
                BOOL v155 = 0;
                *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, (int)v38, &v155) = v37;
              }
              v10 += 16;
            }
            break;
          case 7:
            uint64_t v23 = *(void *)(v11 + 72);
            if (v23)
            {
              uint64_t v18 = 0;
              unint64_t v24 = 0;
              uint64_t v25 = v13 << 32;
              uint64_t v26 = 8 * v13;
              do
              {
                if (v24 < v12)
                {
                  double v27 = *(double *)(v10 + 8 * v24);
                  if (*(unsigned char *)(a1 + 360)) {
                    double v27 = v27 * *(double *)(*(void *)(a1 + 368) + v26 + 8 * v24);
                  }
                  BOOL v155 = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, v25 >> 32, &v155) = v27;
                }
                ++v24;
                v25 += 0x100000000;
                v18 -= 8;
              }
              while (v23 != v24);
LABEL_24:
              v10 -= v18;
              uint64_t v8 = v149;
              uint64_t v7 = v150;
            }
            break;
          default:
            break;
        }
        ++v9;
      }
      while (v9 != v8);
    }
  }
  uint64_t v39 = *(int *)(a1 + 328);
  BOOL v155 = 0;
  uint64_t v40 = (turi::thread *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion(v6, v39, &v155);
  *(void *)uint64_t v40 = 0x3FF0000000000000;
  if (*(void *)(a1 + 784) == 2)
  {
    uint64_t v41 = a3[3];
    if (v41 < 1)
    {
      double v42 = 0.0;
      int v45 = a4;
    }
    else
    {
      double v42 = 0.0;
      double v43 = (double *)a3[1];
      int v44 = (int *)a3[2];
      int v45 = a4;
      do
      {
        double v46 = *v43++;
        double v47 = v46;
        uint64_t v48 = *v44++;
        double v42 = v42 + v47 * *(double *)(*(void *)(a1 + 824) + 8 * v48);
        --v41;
      }
      while (v41);
    }
    long double v63 = exp(-v42);
    long double v64 = log1p(v63);
    double v65 = exp(-v64);
    double v66 = v65;
    switch(v45)
    {
      case 1:
        *(_DWORD *)(a5 + 8) = 0;
        *(unsigned char *)(a5 + 12) = 1;
        *(double *)a5 = v42;
        break;
      case 2:
      case 3:
        *(_DWORD *)(a5 + 8) = 0;
        *(unsigned char *)(a5 + 12) = 1;
        *(double *)a5 = v65;
        break;
      case 4:
        uint64_t v104 = (double *)operator new(0x10uLL);
        *uint64_t v104 = 1.0 - v66;
        v104[1] = v66;
        *(void *)(a5 + 5) = 0;
        *(void *)a5 = 0;
        *(unsigned char *)(a5 + 12) = 3;
        operator new();
      case 5:
        *(unsigned char *)(a5 + 12) = 0;
        *(_DWORD *)(a5 + 8) = 0;
        *(void *)a5 = v65 >= 0.5;
        break;
      case 6:
        uint64_t v105 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 768) + 24) + 32) + 80) + 16 * (v65 >= 0.5);
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        *(unsigned char *)(a5 + 12) = 0;
        if (v105 != a5)
        {
          uint64_t v106 = *(void *)v105;
          *(void *)(a5 + 5) = *(void *)(v105 + 5);
          *(void *)a5 = v106;
          int v107 = *(unsigned __int8 *)(v105 + 12);
          *(unsigned char *)(a5 + 12) = v107;
          switch(v107)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              std::string v108 = *(atomic_ullong **)a5;
              goto LABEL_115;
            default:
              return;
          }
        }
        break;
      default:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#1}::operator()();
    }
  }
  else
  {
    uint64_t v49 = *(void *)turi::thread::get_tls_data(v40);
    uint64_t v50 = *(void *)(a1 + 864);
    uint64_t v51 = (unsigned char *)(v50 + 232 * v49);
    if (!*v51)
    {
      if (*(unsigned char *)(a1 + 896))
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(v50 + 232 * v49 + 120), *(void *)(a1 + 328) + 1);
      }
      else
      {
        uint64_t v145 = v50 + 232 * v49;
        *(void *)(v145 + 224) = *(void *)(a1 + 328) + 1;
        *(void *)(v145 + 208) = 0;
      }
      *uint64_t v51 = 1;
    }
    uint64_t v52 = (void *)(v50 + 232 * v49);
    int v53 = (const void **)(v52 + 17);
    uint64_t v54 = (void **)(v52 + 19);
    BOOL v155 = (void *)(a1 + 824);
    uint64_t v156 = (char *)a3;
    Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(v52 + 17, &v155);
    BOOL v55 = (double *)v52[17];
    uint64_t v56 = v52[18];
    if (v52[20] != v56)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v52 + 19, v52[18], 1);
      uint64_t v56 = v52[20];
    }
    uint64_t v57 = v52 + 21;
    int v58 = (float64x2_t *)*v54;
    if (v56 >= 1)
    {
      int v59 = (long double *)*v54;
      uint64_t v60 = v56;
      do
      {
        long double v61 = *v55++;
        *v59++ = exp(v61);
        --v60;
      }
      while (v60);
    }
    if (v56)
    {
      BOOL v155 = v58;
      __dst = v54;
      double v62 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v155);
      int v58 = (float64x2_t *)*v54;
    }
    else
    {
      double v62 = 0.0;
    }
    uint64_t v67 = (uint64_t)v54[1];
    if (v57[1] != v67)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v57, v67, 1);
      uint64_t v67 = v57[1];
    }
    double v68 = v62 + 1.0;
    uint64_t v69 = (float64x2_t *)*v57;
    if (v67 >= 0) {
      uint64_t v70 = v67;
    }
    else {
      uint64_t v70 = v67 + 1;
    }
    int64_t v71 = v70 & 0xFFFFFFFFFFFFFFFELL;
    if (v67 >= 2)
    {
      int64_t v72 = 0;
      float64x2_t v73 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v68, 0);
      int64_t v74 = (float64x2_t *)*v57;
      float64x2_t v75 = v58;
      do
      {
        float64x2_t v76 = *v75++;
        *v74++ = vdivq_f64(v76, v73);
        v72 += 2;
      }
      while (v72 < v71);
    }
    BOOL v77 = __OFSUB__(v67, v71);
    uint64_t v78 = v67 - v71;
    if (!((v78 < 0) ^ v77 | (v78 == 0)))
    {
      uint64_t v79 = v70 >> 1;
      f64 = v58[v70 >> 1].f64;
      uint64_t v81 = v69[v79].f64;
      do
      {
        double v82 = *f64++;
        *v81++ = v82 / v68;
        --v78;
      }
      while (v78);
    }
    switch(a4)
    {
      case 0:
      case 8:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#2}::operator()();
      case 1:
      case 3:
        std::string v83 = *v53;
        uint64_t v84 = (uint64_t)*v53 + 8 * *(void *)(a1 + 784) - 8;
        uint64_t v85 = v84 - (void)*v53;
        __p[1] = 0;
        uint64_t v154 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, v83, v84, v85 >> 3);
        uint64_t v152 = 0;
        uint64_t v87 = __p[0];
        uint64_t v86 = (uint64_t *)__p[1];
        if (__p[1] >= v154)
        {
          unint64_t v111 = (((char *)__p[1] - (char *)__p[0]) >> 3) + 1;
          uint64_t v88 = a5;
          if (v111 >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v112 = v154 - (char *)__p[0];
          if ((v154 - (char *)__p[0]) >> 2 > v111) {
            unint64_t v111 = v112 >> 2;
          }
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v113 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v113 = v111;
          }
          uint64_t v158 = 0;
          uint64_t v159 = &v154;
          if (v113) {
            uint64_t v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v154, v113);
          }
          else {
            uint64_t v114 = 0;
          }
          BOOL v155 = v114;
          uint64_t v156 = v114;
          __dst = v114;
          uint64_t v158 = &v114[8 * v113];
          std::__split_buffer<double>::push_back(&v155, (double *)&v152);
          uint64_t v130 = v156;
          uint64_t v131 = __p[0];
          if (__p[0] != v87)
          {
            uint64_t v132 = v87;
            do
            {
              uint64_t v133 = *--v132;
              *((void *)v130 - 1) = v133;
              v130 -= 8;
            }
            while (v132 != v131);
          }
          uint64_t v156 = v130;
          uint64_t v134 = __dst;
          unint64_t v135 = (char *)((char *)__p[1] - (char *)v87);
          if (__p[1] != v87)
          {
            memmove(__dst, v87, (char *)__p[1] - (char *)v87);
            uint64_t v130 = v156;
            uint64_t v87 = __p[1];
          }
          uint64_t v136 = __p[0];
          BOOL v137 = v154;
          __p[0] = v130;
          __p[1] = &v135[(void)v134];
          uint64_t v154 = v158;
          BOOL v155 = v136;
          __dst = v87;
          uint64_t v158 = v137;
          uint64_t v156 = (char *)v136;
          if (v87 != v136) {
            __dst = (char *)v87 + (((char *)v136 - (char *)v87 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
          if (v136) {
            operator delete(v136);
          }
        }
        else
        {
          uint64_t v88 = a5;
          if (__p[0] == __p[1])
          {
            *(void *)__p[0] = 0;
            __p[1] = v87 + 1;
          }
          else
          {
            uint64_t v89 = (char *)__p[0] + 8;
            long long v90 = (uint64_t *)((char *)__p[1] - 8);
            uint64_t v91 = __p[1];
            while (v90 < v86)
            {
              uint64_t v92 = *v90++;
              *v91++ = v92;
            }
            __p[1] = v91;
            if (v86 != (uint64_t *)v89) {
              memmove(&v86[-(((char *)v86 - v89) >> 3)], v87, (char *)v86 - v89);
            }
            *uint64_t v87 = v152;
          }
        }
        *(void *)(v88 + 5) = 0;
        *(void *)uint64_t v88 = 0;
        *(unsigned char *)(v88 + 12) = 3;
        operator new();
      case 2:
      case 4:
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v154 = 0;
        unint64_t v101 = *(void *)(a1 + 784);
        if (v101)
        {
          if (v101 >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          __p[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v154, v101);
          __p[1] = __p[0];
          uint64_t v154 = (char *)__p[0] + 8 * v102;
        }
        if (v57[1])
        {
          BOOL v155 = (void *)*v57;
          __dst = v57;
          double v103 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v155);
        }
        else
        {
          double v103 = 0.0;
        }
        double v118 = 1.0 - v103;
        uint64_t v119 = (char *)__p[1];
        if (__p[1] >= v154)
        {
          uint64_t v121 = (char *)__p[0];
          int64_t v122 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v124 = v154 - (char *)__p[0];
          if ((v154 - (char *)__p[0]) >> 2 > v123) {
            unint64_t v123 = v124 >> 2;
          }
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v125 = v123;
          }
          if (v125)
          {
            uint64_t v126 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v154, v125);
            uint64_t v121 = (char *)__p[0];
            uint64_t v119 = (char *)__p[1];
          }
          else
          {
            uint64_t v126 = 0;
          }
          BOOL v138 = (double *)&v126[8 * v122];
          int v139 = &v126[8 * v125];
          double *v138 = v118;
          char v120 = v138 + 1;
          while (v119 != v121)
          {
            uint64_t v140 = *((void *)v119 - 1);
            v119 -= 8;
            *((void *)v138-- - 1) = v140;
          }
          __p[0] = v138;
          __p[1] = v120;
          uint64_t v154 = v139;
          if (v121) {
            operator delete(v121);
          }
        }
        else
        {
          *(double *)__p[1] = v118;
          char v120 = v119 + 8;
        }
        __p[1] = v120;
        uint64_t v141 = (char *)(*v57 + 8 * *(void *)(a1 + 784) - 8);
        std::vector<double>::__insert_with_size[abi:ne180100]<double *,double *>((uint64_t)__p, (uint64_t)v120, (char *)*v57, v141, (uint64_t)&v141[-*v57] >> 3);
        uint64_t v142 = (double *)__p[0];
        uint64_t v143 = (double *)__p[1];
        while (v142 != v143)
        {
          double v144 = 0.0;
          if (*v142 < 0.0 || (double v144 = 1.0, *v142 > 1.0)) {
            *uint64_t v142 = v144;
          }
          ++v142;
        }
        *(void *)(a5 + 5) = 0;
        *(void *)a5 = 0;
        *(unsigned char *)(a5 + 12) = 3;
        operator new();
      case 5:
      case 6:
        uint64_t v93 = *(void *)(a1 + 784);
        uint64_t v94 = v93 - 1;
        if (v93 == 1)
        {
          uint64_t v96 = 0;
          uint64_t v98 = a5;
        }
        else
        {
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          double v97 = 0.0;
          uint64_t v98 = a5;
          do
          {
            double v99 = *((double *)*v53 + v95);
            if (v97 < v99) {
              uint64_t v96 = v95 + 1;
            }
            uint64_t v100 = v95 + 1;
            if (v97 < v99) {
              double v97 = *((double *)*v53 + v95);
            }
            ++v95;
          }
          while (v94 != v100);
        }
        if (a4 == 5)
        {
          *(unsigned char *)(v98 + 12) = 0;
          *(_DWORD *)(v98 + 8) = 0;
          *(void *)uint64_t v98 = v96;
        }
        else
        {
          uint64_t v115 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 768) + 24) + 32) + 80) + 16 * v96;
          *(void *)uint64_t v98 = 0;
          *(_DWORD *)(v98 + 8) = 0;
          *(unsigned char *)(v98 + 12) = 0;
          if (v115 != v98)
          {
            uint64_t v116 = *(void *)v115;
            *(void *)(v98 + 5) = *(void *)(v115 + 5);
            *(void *)uint64_t v98 = v116;
            int v117 = *(unsigned __int8 *)(v115 + 12);
            *(unsigned char *)(v98 + 12) = v117;
            switch(v117)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
                std::string v108 = *(atomic_ullong **)v98;
LABEL_115:
                atomic_fetch_add(v108, 1uLL);
                break;
              default:
                return;
            }
          }
        }
        break;
      case 7:
        std::string::size_type v109 = (float64x2_t *)*v57;
        if (v57[1])
        {
          BOOL v155 = (void *)*v57;
          __dst = v57;
          double v110 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v155);
          std::string::size_type v109 = (float64x2_t *)*v57;
        }
        else
        {
          double v110 = 0.0;
        }
        *(double *)std::string __p = 1.0 - v110;
        BOOL v155 = v109;
        __dst = v57;
        Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v155);
        BOOL v155 = v127;
        BOOL v128 = __p;
        if (*(double *)__p < *(double *)&v127) {
          BOOL v128 = &v155;
        }
        if (*(double *)v128 < 0.0) {
          BOOL v128 = (void **)&v152;
        }
        uint64_t v151 = 0x3FF0000000000000;
        uint64_t v152 = 0;
        if (*(double *)v128 <= 1.0) {
          uint64_t v129 = (uint64_t *)v128;
        }
        else {
          uint64_t v129 = &v151;
        }
        *(void *)a5 = 0;
        *(_DWORD *)(a5 + 8) = 0;
        *(unsigned char *)(a5 + 12) = 0;
        turi::flexible_type::operator=<double>(a5, v129);
        break;
      default:
        turi::supervised_2::logistic_regression::_internal_predict<Eigen::Matrix<double,-1,1,0,-1,1>>(turi::ml_data_row_reference const&,Eigen::Matrix<double,-1,1,0,-1,1> &,turi::supervised_2::supervised_learning_model_base::prediction_type_enum)const::{lambda(void)#3}::operator()();
    }
  }
}

void turi::supervised_2::logistic_regression::setup_solver(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "operator()", 394, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::supervised_2::logistic_regression::setup_solver(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2242A7464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::lr_optimization_interface::~lr_optimization_interface(turi::supervised_2::logistic_regression::lr_optimization_interface *this)
{
  turi::neural_net::float_scalar::~float_scalar(this);
  JUMPOUT(0x22A614FA0);
}

void turi::supervised_2::logistic_regression::lr_optimization_interface::compute_first_order_statistics(uint64_t a1, __darwin_time_t *a2, float64x2_t **a3, double *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 896)) {
    turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>((void *)v4, a2, a4, a3, 0);
  }
  else {
    turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>((void *)v4, a2, a4, a3, 0);
  }
}

void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(void *a1, __darwin_time_t *a2, double *a3, float64x2_t **a4, float64x2_t **a5)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  BOOL v102 = a5 != 0;
  gettimeofday(&v101, 0);
  gettimeofday(&v99, 0);
  uint64_t v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "_compute_optimization_statistics", 455, 1);
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    }
    double v14 = pthread_getspecific(*((void *)started + 74));
    if (v14)
    {
      if (*((unsigned char *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
        double v15 = std::locale::use_facet((const std::locale *)&v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v99);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v16 = a1[98] - 1;
  uint64_t v17 = a1[107];
  v99.tv_sec = *a2;
  *(void *)&v99.tv_usec = v16;
  uint64_t v100 = v17;
  uint64_t v18 = operator new(0x20uLL);
  *uint64_t v18 = &unk_26D776B50;
  v18[1] = a1;
  v18[2] = &v102;
  void v18[3] = &v99;
  uint64_t v104 = v18;
  turi::in_parallel((turi::thread_pool *)&v103);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v103);
  unint64_t v19 = (double *)a1[108];
  *a3 = v19[14];
  uint64_t v21 = (float64x2_t *)*((void *)v19 + 3);
  uint64_t v20 = *((void *)v19 + 4);
  if (a4[1] != (float64x2_t *)v20)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v20, 1);
    uint64_t v20 = (uint64_t)a4[1];
  }
  double v22 = *a4;
  if (v20 >= 0) {
    uint64_t v23 = v20;
  }
  else {
    uint64_t v23 = v20 + 1;
  }
  int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (v20 >= 2)
  {
    int64_t v25 = 0;
    uint64_t v26 = *a4;
    double v27 = v21;
    do
    {
      float64x2_t v28 = *v27++;
      *v26++ = v28;
      v25 += 2;
    }
    while (v25 < v24);
  }
  BOOL v29 = __OFSUB__(v20, v24);
  uint64_t v30 = v20 - v24;
  if (!((v30 < 0) ^ v29 | (v30 == 0)))
  {
    uint64_t v31 = v23 >> 1;
    double v32 = (uint64_t *)&v21[v23 >> 1];
    f64 = (void *)v22[v31].f64;
    do
    {
      uint64_t v34 = *v32++;
      *f64++ = v34;
      --v30;
    }
    while (v30);
  }
  if (a5)
  {
    double v35 = (void *)a1[108];
    double v37 = (float64x2_t *)v35[5];
    uint64_t v36 = v35[6];
    uint64_t v38 = v35[7];
    if (a5[1] != (float64x2_t *)v36 || a5[2] != (float64x2_t *)v38)
    {
      if (v36) {
        BOOL v40 = v38 == 0;
      }
      else {
        BOOL v40 = 1;
      }
      if (!v40 && 0x7FFFFFFFFFFFFFFFLL / v38 < v36)
      {
        double v97 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v98 = std::bad_alloc::bad_alloc(v97);
        __cxa_throw(v98, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a5, v38 * v36, v36, v38);
      uint64_t v36 = (uint64_t)a5[1];
      uint64_t v38 = (uint64_t)a5[2];
    }
    uint64_t v41 = *a5;
    uint64_t v42 = v36 * v38;
    if (v36 * v38 >= 0) {
      uint64_t v43 = v36 * v38;
    }
    else {
      uint64_t v43 = v42 + 1;
    }
    int64_t v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
    if (v42 >= 2)
    {
      int64_t v45 = 0;
      double v46 = *a5;
      double v47 = v37;
      do
      {
        float64x2_t v48 = *v47++;
        *v46++ = v48;
        v45 += 2;
      }
      while (v45 < v44);
    }
    BOOL v49 = v42 <= v44;
    uint64_t v50 = v42 - v44;
    if (!v49)
    {
      uint64_t v51 = v43 >> 1;
      uint64_t v52 = (uint64_t *)&v37[v43 >> 1];
      int v53 = (void *)v41[v51].f64;
      do
      {
        uint64_t v54 = *v52++;
        *v53++ = v54;
        --v50;
      }
      while (v50);
    }
  }
  uint64_t v55 = a1[108];
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[109] - v55) >> 3)) >= 2)
  {
    unint64_t v56 = 1;
    do
    {
      uint64_t v57 = v55 + 232 * v56;
      *a3 = *(double *)(v57 + 112) + *a3;
      int v58 = *(float64x2_t **)(v57 + 24);
      int v59 = *a4;
      uint64_t v60 = (uint64_t)a4[1];
      if (v60 >= 0) {
        uint64_t v61 = (uint64_t)a4[1];
      }
      else {
        uint64_t v61 = v60 + 1;
      }
      int64_t v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      if (v60 >= 2)
      {
        int64_t v63 = 0;
        long double v64 = *a4;
        double v65 = v58;
        do
        {
          float64x2_t v66 = *v65++;
          float64x2_t *v64 = vaddq_f64(v66, *v64);
          ++v64;
          v63 += 2;
        }
        while (v63 < v62);
      }
      BOOL v49 = v60 <= v62;
      uint64_t v67 = v60 - v62;
      if (!v49)
      {
        uint64_t v68 = v61 >> 1;
        uint64_t v69 = v58[v68].f64;
        uint64_t v70 = v59[v68].f64;
        do
        {
          double v71 = *v69++;
          double *v70 = v71 + *v70;
          ++v70;
          --v67;
        }
        while (v67);
      }
      if (a5)
      {
        uint64_t v72 = *(void *)(a1[108] + 232 * v56 + 40);
        float64x2_t v73 = *a5;
        int64_t v74 = a5[1];
        uint64_t v75 = (void)a5[2] * (void)v74;
        if (v75 >= 0) {
          uint64_t v76 = (void)a5[2] * (void)v74;
        }
        else {
          uint64_t v76 = v75 + 1;
        }
        int64_t v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
        if (v75 >= 2)
        {
          int64_t v78 = 0;
          uint64_t v79 = *a5;
          uint64_t v80 = *(float64x2_t **)(a1[108] + 232 * v56 + 40);
          do
          {
            float64x2_t v81 = *v80++;
            *uint64_t v79 = vaddq_f64(v81, *v79);
            ++v79;
            v78 += 2;
          }
          while (v78 < v77);
        }
        BOOL v49 = v75 <= v77;
        uint64_t v82 = v75 - v77;
        if (!v49)
        {
          uint64_t v83 = v76 >> 1;
          uint64_t v84 = (double *)(v72 + 16 * v83);
          uint64_t v85 = v73[v83].f64;
          do
          {
            double v86 = *v84++;
            *uint64_t v85 = v86 + *v85;
            ++v85;
            --v82;
          }
          while (v82);
        }
      }
      ++v56;
      uint64_t v55 = a1[108];
    }
    while (v56 < 0x34F72C234F72C235 * ((a1[109] - v55) >> 3));
  }
  uint64_t v87 = (int *)global_logger();
  if (v87[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v87)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v88 = (file_logger *)global_logger();
    uint64_t v89 = file_logger::start_stream(v88, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "_compute_optimization_statistics", 553, 1);
    long long v90 = pthread_getspecific(*((void *)v89 + 74));
    if (v90 && *((unsigned char *)v90 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90 + 2, (uint64_t)"Computation done at ", 20);
    }
    gettimeofday(&v103, 0);
    uint64_t v91 = file_logger::operator<<<double>((uint64_t)v89);
    uint64_t v92 = pthread_getspecific(*(void *)(v91 + 592));
    if (v92 && *((unsigned char *)v92 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92 + 2, (uint64_t)"s", 1);
    }
    uint64_t v93 = pthread_getspecific(*(void *)(v91 + 592));
    if (v93 && *((unsigned char *)v93 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(v93[2] - 24) + 16));
      uint64_t v94 = std::locale::use_facet((const std::locale *)&v103, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
      std::locale::~locale((std::locale *)&v103);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v91);
      if (*(_DWORD *)(v91 + 600) == 7)
      {
        __print_back_trace();
        uint64_t v96 = __cxa_allocate_exception(8uLL);
        *uint64_t v96 = "LOG_FATAL encountered";
        __cxa_throw(v96, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
}

void sub_2242A7CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
}

void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(void *a1, __darwin_time_t *a2, double *a3, float64x2_t **a4, float64x2_t **a5)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  BOOL v102 = a5 != 0;
  gettimeofday(&v101, 0);
  gettimeofday(&v99, 0);
  uint64_t v10 = (int *)global_logger();
  if (v10[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v10)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "_compute_optimization_statistics", 455, 1);
    uint64_t v13 = pthread_getspecific(*((void *)started + 74));
    if (v13 && *((unsigned char *)v13 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Starting second order stats computation", 39);
    }
    double v14 = pthread_getspecific(*((void *)started + 74));
    if (v14)
    {
      if (*((unsigned char *)v14 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
        double v15 = std::locale::use_facet((const std::locale *)&v99, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v99);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  uint64_t v16 = a1[98] - 1;
  uint64_t v17 = a1[107];
  v99.tv_sec = *a2;
  *(void *)&v99.tv_usec = v16;
  uint64_t v100 = v17;
  uint64_t v18 = operator new(0x20uLL);
  *uint64_t v18 = &unk_26D776BD0;
  v18[1] = a1;
  v18[2] = &v102;
  void v18[3] = &v99;
  uint64_t v104 = v18;
  turi::in_parallel((turi::thread_pool *)&v103);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v103);
  unint64_t v19 = (double *)a1[108];
  *a3 = v19[14];
  uint64_t v21 = (float64x2_t *)*((void *)v19 + 3);
  uint64_t v20 = *((void *)v19 + 4);
  if (a4[1] != (float64x2_t *)v20)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a4, v20, 1);
    uint64_t v20 = (uint64_t)a4[1];
  }
  double v22 = *a4;
  if (v20 >= 0) {
    uint64_t v23 = v20;
  }
  else {
    uint64_t v23 = v20 + 1;
  }
  int64_t v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (v20 >= 2)
  {
    int64_t v25 = 0;
    uint64_t v26 = *a4;
    double v27 = v21;
    do
    {
      float64x2_t v28 = *v27++;
      *v26++ = v28;
      v25 += 2;
    }
    while (v25 < v24);
  }
  BOOL v29 = __OFSUB__(v20, v24);
  uint64_t v30 = v20 - v24;
  if (!((v30 < 0) ^ v29 | (v30 == 0)))
  {
    uint64_t v31 = v23 >> 1;
    double v32 = (uint64_t *)&v21[v23 >> 1];
    f64 = (void *)v22[v31].f64;
    do
    {
      uint64_t v34 = *v32++;
      *f64++ = v34;
      --v30;
    }
    while (v30);
  }
  if (a5)
  {
    double v35 = (void *)a1[108];
    double v37 = (float64x2_t *)v35[5];
    uint64_t v36 = v35[6];
    uint64_t v38 = v35[7];
    if (a5[1] != (float64x2_t *)v36 || a5[2] != (float64x2_t *)v38)
    {
      if (v36) {
        BOOL v40 = v38 == 0;
      }
      else {
        BOOL v40 = 1;
      }
      if (!v40 && 0x7FFFFFFFFFFFFFFFLL / v38 < v36)
      {
        double v97 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v98 = std::bad_alloc::bad_alloc(v97);
        __cxa_throw(v98, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
      Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a5, v38 * v36, v36, v38);
      uint64_t v36 = (uint64_t)a5[1];
      uint64_t v38 = (uint64_t)a5[2];
    }
    uint64_t v41 = *a5;
    uint64_t v42 = v36 * v38;
    if (v36 * v38 >= 0) {
      uint64_t v43 = v36 * v38;
    }
    else {
      uint64_t v43 = v42 + 1;
    }
    int64_t v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
    if (v42 >= 2)
    {
      int64_t v45 = 0;
      double v46 = *a5;
      double v47 = v37;
      do
      {
        float64x2_t v48 = *v47++;
        *v46++ = v48;
        v45 += 2;
      }
      while (v45 < v44);
    }
    BOOL v49 = v42 <= v44;
    uint64_t v50 = v42 - v44;
    if (!v49)
    {
      uint64_t v51 = v43 >> 1;
      uint64_t v52 = (uint64_t *)&v37[v43 >> 1];
      int v53 = (void *)v41[v51].f64;
      do
      {
        uint64_t v54 = *v52++;
        *v53++ = v54;
        --v50;
      }
      while (v50);
    }
  }
  uint64_t v55 = a1[108];
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[109] - v55) >> 3)) >= 2)
  {
    unint64_t v56 = 1;
    do
    {
      uint64_t v57 = v55 + 232 * v56;
      *a3 = *(double *)(v57 + 112) + *a3;
      int v58 = *(float64x2_t **)(v57 + 24);
      int v59 = *a4;
      uint64_t v60 = (uint64_t)a4[1];
      if (v60 >= 0) {
        uint64_t v61 = (uint64_t)a4[1];
      }
      else {
        uint64_t v61 = v60 + 1;
      }
      int64_t v62 = v61 & 0xFFFFFFFFFFFFFFFELL;
      if (v60 >= 2)
      {
        int64_t v63 = 0;
        long double v64 = *a4;
        double v65 = v58;
        do
        {
          float64x2_t v66 = *v65++;
          float64x2_t *v64 = vaddq_f64(v66, *v64);
          ++v64;
          v63 += 2;
        }
        while (v63 < v62);
      }
      BOOL v49 = v60 <= v62;
      uint64_t v67 = v60 - v62;
      if (!v49)
      {
        uint64_t v68 = v61 >> 1;
        uint64_t v69 = v58[v68].f64;
        uint64_t v70 = v59[v68].f64;
        do
        {
          double v71 = *v69++;
          double *v70 = v71 + *v70;
          ++v70;
          --v67;
        }
        while (v67);
      }
      if (a5)
      {
        uint64_t v72 = *(void *)(a1[108] + 232 * v56 + 40);
        float64x2_t v73 = *a5;
        int64_t v74 = a5[1];
        uint64_t v75 = (void)a5[2] * (void)v74;
        if (v75 >= 0) {
          uint64_t v76 = (void)a5[2] * (void)v74;
        }
        else {
          uint64_t v76 = v75 + 1;
        }
        int64_t v77 = v76 & 0xFFFFFFFFFFFFFFFELL;
        if (v75 >= 2)
        {
          int64_t v78 = 0;
          uint64_t v79 = *a5;
          uint64_t v80 = *(float64x2_t **)(a1[108] + 232 * v56 + 40);
          do
          {
            float64x2_t v81 = *v80++;
            *uint64_t v79 = vaddq_f64(v81, *v79);
            ++v79;
            v78 += 2;
          }
          while (v78 < v77);
        }
        BOOL v49 = v75 <= v77;
        uint64_t v82 = v75 - v77;
        if (!v49)
        {
          uint64_t v83 = v76 >> 1;
          uint64_t v84 = (double *)(v72 + 16 * v83);
          uint64_t v85 = v73[v83].f64;
          do
          {
            double v86 = *v84++;
            *uint64_t v85 = v86 + *v85;
            ++v85;
            --v82;
          }
          while (v82);
        }
      }
      ++v56;
      uint64_t v55 = a1[108];
    }
    while (v56 < 0x34F72C234F72C235 * ((a1[109] - v55) >> 3));
  }
  uint64_t v87 = (int *)global_logger();
  if (v87[169] < 3)
  {
    if (cppipc::must_cancel((cppipc *)v87)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v88 = (file_logger *)global_logger();
    uint64_t v89 = file_logger::start_stream(v88, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "_compute_optimization_statistics", 553, 1);
    long long v90 = pthread_getspecific(*((void *)v89 + 74));
    if (v90 && *((unsigned char *)v90 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90 + 2, (uint64_t)"Computation done at ", 20);
    }
    gettimeofday(&v103, 0);
    uint64_t v91 = file_logger::operator<<<double>((uint64_t)v89);
    uint64_t v92 = pthread_getspecific(*(void *)(v91 + 592));
    if (v92 && *((unsigned char *)v92 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92 + 2, (uint64_t)"s", 1);
    }
    uint64_t v93 = pthread_getspecific(*(void *)(v91 + 592));
    if (v93 && *((unsigned char *)v93 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(v93[2] - 24) + 16));
      uint64_t v94 = std::locale::use_facet((const std::locale *)&v103, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
      std::locale::~locale((std::locale *)&v103);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush((file_logger *)v91);
      if (*(_DWORD *)(v91 + 600) == 7)
      {
        __print_back_trace();
        uint64_t v96 = __cxa_allocate_exception(8uLL);
        *uint64_t v96 = "LOG_FATAL encountered";
        __cxa_throw(v96, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
}

void sub_2242A83E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20)
{
}

void turi::supervised_2::logistic_regression::lr_optimization_interface::compute_second_order_statistics(uint64_t a1, __darwin_time_t *a2, float64x2_t **a3, float64x2_t **a4, double *a5)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 896)) {
    turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>((void *)v5, a2, a5, a4, a3);
  }
  else {
    turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>((void *)v5, a2, a5, a4, a3);
  }
}

void turi::supervised_2::logistic_regression::save_impl(turi::supervised_2::logistic_regression *this, turi::oarchive *a2)
{
}

void turi::supervised_2::logistic_regression::load_version(turi::supervised_2::logistic_regression *this, turi::iarchive *a2)
{
  uint64_t v4 = (char *)this + 296;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)this + 296, a2);
  turi::option_manager::load((turi::supervised_2::logistic_regression *)((char *)this + 224), a2);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_metadata>,false,void>::exec((uint64_t)a2, (void *)this + 96);
  turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,-1,1,-1,-1>((uint64_t)a2, (void **)this + 103);
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
  uint64_t v5 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((void *)this + 98) = turi::variant_converter<unsigned long,void>::get((uint64_t)v17, v5);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "num_coefficients");
  uint64_t v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  unint64_t v7 = turi::variant_converter<unsigned long,void>::get((uint64_t)v17, v6);
  *((void *)this + 106) = v7;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__p);
    unint64_t v7 = *((void *)this + 106);
  }
  *((void *)this + 107) = v7 / (*((void *)this + 98) - 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "dense_coefficient_mode");
  uint64_t v8 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((unsigned char *)this + 896) = turi::variant_converter<int,void>::get((uint64_t)v17, v8) != 0;
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  *((void *)this + 41) = *(void *)(*((void *)this + 96) + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, "current_training_iteration");
  uint64_t v9 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)&__p);
  *((void *)this + 99) = turi::variant_converter<unsigned long,void>::get((uint64_t)v17, v9);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "current_training_status");
  uint64_t v10 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v4, (const void **)v17);
  turi::variant_converter<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void>::get(v10, (uint64_t *)&__p);
  uint64_t v11 = (char *)this + 808;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)this + 800, *((char **)this + 101));
  unint64_t v12 = (char *)v20;
  *((void *)this + 100) = __p;
  *((void *)this + 101) = v12;
  uint64_t v13 = v21;
  *((void *)this + 102) = v21;
  if (v13)
  {
    *((void *)v12 + 2) = v11;
    std::string __p = &v20;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    unint64_t v12 = 0;
  }
  else
  {
    *((void *)this + 100) = v11;
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&__p, v12);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  double v14 = (void *)(*((void *)this + 98) - 1);
  uint64_t v16 = (void *)*((void *)this + 104);
  v17[0] = v14;
  if (v14 != v16)
  {
    std::string __p = v17;
    uint64_t v20 = &v16;
    turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()();
  }
  double v15 = (void *)*((void *)this + 107);
  uint64_t v16 = (void *)*((void *)this + 105);
  v17[0] = v15;
  if (v15 != v16)
  {
    std::string __p = v17;
    uint64_t v20 = &v16;
    turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_1::operator()();
  }
}

void turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_num_classes - 1", 17);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_coefs.rows()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "operator()", 592, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2242A88CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_variables_per_class", 21);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_coefs.cols()", 14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.cpp", "operator()", 593, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::supervised_2::logistic_regression::load_version(turi::iarchive &,unsigned long)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2242A8B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::supervised_2::logistic_regression::export_to_coreml(uint64_t a1)
{
  v2[15] = *(void **)MEMORY[0x263EF8340];
  uint64_t v1 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[20],char const*,0>(v2, "class", &v1);
}

void sub_2242A8E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, void *a18, uint64_t a19, void *a20)
{
  double v22 = *(std::__shared_weak_count **)(v20 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

const char *turi::supervised_2::logistic_regression::name(turi::supervised_2::logistic_regression *this)
{
  return "classifier_logistic_regression_v2";
}

void *turi::supervised_2::logistic_regression::uid(turi::supervised_2::logistic_regression *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(turi::supervised_2::logistic_regression::uid(void)::_uid, "__LINE__,/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/supervised_learning_2/logistic_regression.hpp");
    __cxa_atexit(MEMORY[0x263F8C0B8], turi::supervised_2::logistic_regression::uid(void)::_uid, &dword_223D44000);
  }
  return turi::supervised_2::logistic_regression::uid(void)::_uid;
}

void sub_2242A8FC4(_Unwind_Exception *a1)
{
}

uint64_t turi::supervised_2::logistic_regression::lr_optimization_interface::num_variables(turi::supervised_2::logistic_regression::lr_optimization_interface *this)
{
  return *(void *)(*((void *)this + 1) + 848);
}

void *std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 232 * ((232 * a2 - 232) / 0xE8) + 232;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2242A9080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised_2::logistic_regression::thread_compute_buffer_type>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[232 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::supervised_2::logistic_regression::thread_compute_buffer_type>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(232 * a2);
}

void std::vector<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 232;
        std::allocator<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<turi::supervised_2::logistic_regression::thread_compute_buffer_type>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)(a2 + 192));
  free(*(void **)(a2 + 168));
  free(*(void **)(a2 + 152));
  free(*(void **)(a2 + 136));
  free(*(void **)(a2 + 120));
  free(*(void **)(a2 + 88));
  free(*(void **)(a2 + 64));
  free(*(void **)(a2 + 40));
  free(*(void **)(a2 + 24));
  uint64_t v3 = *(void **)(a2 + 8);
  free(v3);
}

void turi::flexible_type_converter<unsigned long>::set(atomic_ullong **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  turi::flexible_type_internals::ft_resolver<3>::set<unsigned long const&>(a2, a1);
}

void sub_2242A9284(_Unwind_Exception *exception_object)
{
  switch(*(unsigned char *)(v1 + 12))
  {
    case 2:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 3:
      if (turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 4:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 5:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
      goto LABEL_11;
    case 8:
      if ((turi::sarray_iterator<turi::flexible_type>::sarray_iterator((atomic_ullong *volatile *)v1) & 1) == 0) {
        goto LABEL_11;
      }
      break;
    case 9:
      if (turi::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::set((atomic_ullong *volatile *)v1)) {
        break;
      }
LABEL_11:
      *(void *)uint64_t v1 = 0;
      break;
    default:
      break;
  }
  *(void *)uint64_t v1 = 0;
  *(_DWORD *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

void turi::flexible_type_internals::ft_resolver<3>::set<unsigned long const&>(uint64_t a1, atomic_ullong **a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  char v17 = 0;
  int v16 = 0;
  char v15 = *a2;
  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>(a1, &v15);
  switch(v17)
  {
    case 2:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = v15;
        if (v15)
        {
          if (*((char *)v15 + 31) < 0) {
            operator delete((void *)v15[1]);
          }
          uint64_t v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v5 = v15;
        if (v15)
        {
          uint64_t v6 = (void *)v15[1];
          if (v6)
          {
            void v15[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v7 = v15;
        if (v15)
        {
          double v14 = (void **)(v15 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v7 = v15;
        if (v15)
        {
          double v14 = (void **)(v15 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v13 = v15;
        if (v15)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v15 + 2);
          uint64_t v3 = v13;
          unsigned int v12 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v15;
        if (v15)
        {
          uint64_t v9 = (void *)v15[6];
          if (v9)
          {
            v15[7] = (atomic_ullong)v9;
            operator delete(v9);
          }
          uint64_t v10 = (void *)v8[3];
          if (v10)
          {
            v8[4] = (atomic_ullong)v10;
            operator delete(v10);
          }
          uint64_t v11 = (std::__shared_weak_count *)v8[2];
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          uint64_t v3 = v8;
          unsigned int v12 = 2071181815;
LABEL_31:
          uint64_t v4 = v12 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      return;
  }
}

void sub_2242A9574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::gl_sarray::clip(&a10);
      break;
    case 3:
      turi::gl_sarray::clip(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::gl_sarray::clip(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Map<Eigen::Matrix<double,-1,1,0,-1,1> const,0,Eigen::Stride<0,0>> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 16);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 16);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 16);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  uint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return **(double **)(a1 + 24) * v4->f64[0];
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v7 = *(float64x2_t **)(a1 + 24);
  float64x2_t v8 = vmulq_f64(*v4, *v7);
  if (v1 >= 4)
  {
    int64_t v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v10 = vmulq_f64(v4[1], v7[1]);
    if ((unint64_t)v1 >= 8)
    {
      uint64_t v11 = v7 + 3;
      unsigned int v12 = v4 + 3;
      uint64_t v13 = 4;
      do
      {
        float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        float64x2_t v14 = *v12;
        v12 += 2;
        float64x2_t v15 = v14;
        float64x2_t v16 = *v11;
        v11 += 2;
        float64x2_t v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    float64x2_t v8 = vaddq_f64(v10, v8);
    if (v6 > v9) {
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9)));
    }
  }
  double result = vaddvq_f64(v8);
  BOOL v17 = v1 <= v6;
  uint64_t v18 = v1 - v6;
  if (!v17)
  {
    uint64_t v19 = v3 >> 1;
    f64 = v4[v19].f64;
    uint64_t v21 = v7[v19].f64;
    do
    {
      double v22 = *v21++;
      double v23 = v22;
      double v24 = *f64++;
      double result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(void *a1, uint64_t **a2)
{
  double v27 = 0;
  uint64_t v28 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = (*a2)[1];
  if (v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v27, v5, 1);
    int64_t v6 = (char *)v27;
    uint64_t v7 = v28;
    uint64_t v4 = *a2;
    float64x2_t v8 = (unint64_t *)a2[1];
    if (v28 >= 0) {
      uint64_t v9 = v28;
    }
    else {
      uint64_t v9 = v28 + 1;
    }
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v28 >= 2)
    {
      unint64_t v11 = 2;
      if (v10 > 2) {
        unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v27, ((8 * v11 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v10 < v7) {
      bzero(&v6[16 * (v9 >> 1)], 8 * v7 - 16 * (v9 >> 1));
    }
  }
  else
  {
    float64x2_t v8 = (unint64_t *)a2[1];
  }
  uint64_t v29 = 0x3FF0000000000000;
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(v4, v8, (uint64_t *)&v27, (double *)&v29);
  uint64_t v13 = (long long *)v27;
  uint64_t v12 = v28;
  if (a1[1] != v28)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v28, 1);
    uint64_t v12 = a1[1];
  }
  float64x2_t v14 = (_OWORD *)*a1;
  if (v12 >= 0) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v12 + 1;
  }
  int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v17 = 0;
    uint64_t v18 = (_OWORD *)*a1;
    uint64_t v19 = v13;
    do
    {
      long long v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  BOOL v21 = __OFSUB__(v12, v16);
  uint64_t v22 = v12 - v16;
  if (!((v22 < 0) ^ v21 | (v22 == 0)))
  {
    uint64_t v23 = v15 >> 1;
    double v24 = (uint64_t *)&v13[v15 >> 1];
    int64_t v25 = &v14[v23];
    do
    {
      uint64_t v26 = *v24++;
      *v25++ = v26;
      --v22;
    }
    while (v22);
  }
  free(v27);
}

void sub_2242A989C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t *a1, unint64_t *a2, uint64_t *a3, double *a4)
{
  std::string v21[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = a2[1];
  if (v4 >> 61) {
    goto LABEL_14;
  }
  double v8 = *a4;
  unint64_t v9 = *a2;
  if (*a2)
  {
    unint64_t v10 = *a2;
    goto LABEL_8;
  }
  size_t v11 = 8 * v4;
  if (v4 <= 0x4000)
  {
    uint64_t v12 = (char *)&v20[-1] - ((MEMORY[0x270FA5388](v11, v11 + 15) + 30) & 0xFFFFFFFFFFFFFFF0);
    bzero(v12, v13);
    unint64_t v9 = 0;
    unint64_t v10 = (unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_8;
  }
  unint64_t v10 = (unint64_t)malloc_type_malloc(v11, 0x1E76AA36uLL);
  if (!v10)
  {
LABEL_14:
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v18 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v18, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  unint64_t v9 = *a2;
  unint64_t v4 = a2[1];
LABEL_8:
  if (v9) {
    float64x2_t v14 = 0;
  }
  else {
    float64x2_t v14 = (void *)v10;
  }
  uint64_t v16 = a1[1];
  uint64_t v15 = a1[2];
  v21[0] = *a1;
  v21[1] = v15;
  v20[0] = v10;
  v20[1] = 1;
  Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(v16, v15, v21, v20, *a3, 1, v8);
  if (8 * v4 > 0x20000) {
    free(v14);
  }
}

uint64_t Eigen::internal::general_matrix_vector_product<long,double,Eigen::internal::const_blas_data_mapper<double,long,1>,1,false,double,Eigen::internal::const_blas_data_mapper<double,long,0>,false,0>::run(uint64_t result, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7 = (double *)*a4;
  uint64_t v8 = (*a4 >> 3) & 1;
  if (v8 >= a2) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = (*a4 >> 3) & 1;
  }
  if ((v7 & 7) != 0) {
    uint64_t v10 = -1;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v13 = ((unint64_t)*a3 >> 3) & 1;
  if (v13 >= a2) {
    uint64_t v13 = a2;
  }
  uint64_t v14 = 0;
  if ((v12 & 7) != 0) {
    uint64_t v13 = -1;
  }
  if (v13 < 0)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
LABEL_28:
    uint64_t v16 = 3;
  }
  else
  {
    if (v8 >= result) {
      uint64_t v8 = result;
    }
    if ((v7 & 7) != 0) {
      uint64_t v15 = -1;
    }
    else {
      uint64_t v15 = v8;
    }
    uint64_t v16 = 3;
    if (v13 == a2 || v15 < 0)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      if (v15 != result)
      {
        uint64_t v19 = 0;
        uint64_t v16 = a3[1] & 1;
        char v20 = 1;
        while (1)
        {
          char v21 = v20;
          uint64_t v22 = v13 + v19 * v16;
          uint64_t v23 = v22 >= 0 ? v22 & 1 : -(v22 & 1);
          if (v10 == v23) {
            break;
          }
          char v20 = 0;
          uint64_t v19 = 1;
          if ((v21 & 1) == 0)
          {
            uint64_t v14 = 0;
            uint64_t v17 = v10;
            uint64_t v18 = ((a2 - v10) & 0xFFFFFFFFFFFFFFFELL) + v10;
            goto LABEL_28;
          }
        }
        if (v19 >= result) {
          uint64_t v14 = result;
        }
        else {
          uint64_t v14 = v19;
        }
        uint64_t v17 = v10;
        uint64_t v18 = ((a2 - v10) & 0xFFFFFFFFFFFFFFFELL) + v10;
      }
    }
  }
  uint64_t v24 = result - v14 + 3;
  if (result >= v14) {
    uint64_t v24 = result - v14;
  }
  uint64_t v103 = v14;
  uint64_t v25 = (v24 & 0xFFFFFFFFFFFFFFFCLL) + v14;
  if (result - v14 >= 4)
  {
    uint64_t v26 = 8 * v11 * (v14 + 3);
    double v27 = (double *)(v12 + v26);
    uint64_t v28 = 32 * v11;
    uint64_t v29 = v11 * (v103 + 2);
    uint64_t v30 = (double *)(v12 + 8 * v29);
    uint64_t v31 = 8 * (v11 + v103 * v11);
    double v32 = (double *)(v12 + 8 * v103 * v11);
    int v107 = v32 + 2;
    uint64_t v106 = v12 + v26 - 8;
    uint64_t v105 = v12 + v31 + 24;
    uint64_t v104 = v30 - 2;
    uint64_t v33 = v12 + v26 + 8 * v18;
    uint64_t v34 = v12 + 8 * v29 + 8 * v18;
    uint64_t v35 = v12 + v31 + 8 * v18;
    uint64_t v36 = v12 + 8 * v103 * v11 + 8 * v18;
    uint64_t v37 = v103;
    uint64_t v38 = (double *)(v12 + v31);
    do
    {
      std::string v108 = v32;
      if (v17 < 1)
      {
        double v48 = 0.0;
        double v47 = 0.0;
        double v44 = 0.0;
        double v39 = 0.0;
      }
      else
      {
        double v39 = 0.0;
        BOOL v40 = v32;
        uint64_t v41 = v38;
        uint64_t v42 = v30;
        uint64_t v43 = v27;
        double v44 = 0.0;
        int64_t v45 = v7;
        uint64_t v46 = v17;
        double v47 = 0.0;
        double v48 = 0.0;
        do
        {
          double v49 = *v45++;
          double v50 = v49;
          double v51 = *v40++;
          double v52 = v50 * v51;
          double v53 = *v41++;
          double v48 = v48 + v52;
          double v47 = v47 + v50 * v53;
          double v54 = *v42++;
          double v44 = v44 + v50 * v54;
          double v55 = *v43++;
          double v39 = v39 + v50 * v55;
          --v46;
        }
        while (v46);
      }
      uint64_t v56 = v37 + 1;
      if (v18 > v17)
      {
        if (v16)
        {
          float64x2_t v57 = 0uLL;
          if (v16 == 1)
          {
            int v58 = v38;
            int v59 = v27;
            uint64_t v60 = v108;
            uint64_t v61 = v30;
            float64x2_t v62 = 0uLL;
            int64_t v63 = v7;
            uint64_t v64 = v17;
            float64x2_t v65 = 0uLL;
            float64x2_t v66 = 0uLL;
            do
            {
              float64x2_t v67 = *(float64x2_t *)&v63[v17];
              float64x2_t v57 = vmlaq_f64(v57, v67, *(float64x2_t *)&v60[v17]);
              float64x2_t v62 = vmlaq_f64(v62, v67, *(float64x2_t *)&v58[v17]);
              float64x2_t v65 = vmlaq_f64(v65, v67, *(float64x2_t *)&v61[v17]);
              v64 += 2;
              v63 += 2;
              v61 += 2;
              float64x2_t v66 = vmlaq_f64(v66, v67, *(float64x2_t *)&v59[v17]);
              v60 += 2;
              v59 += 2;
              v58 += 2;
            }
            while (v64 < v18);
          }
          else
          {
            uint64_t v76 = v108;
            int64_t v77 = v38;
            int64_t v78 = v30;
            uint64_t v79 = v27;
            float64x2_t v62 = 0uLL;
            uint64_t v80 = v7;
            uint64_t v81 = v17;
            float64x2_t v65 = 0uLL;
            float64x2_t v66 = 0uLL;
            do
            {
              float64x2_t v82 = *(float64x2_t *)&v80[v17];
              float64x2_t v57 = vmlaq_f64(v57, v82, *(float64x2_t *)&v76[v17]);
              float64x2_t v62 = vmlaq_f64(v62, v82, *(float64x2_t *)&v77[v17]);
              float64x2_t v65 = vmlaq_f64(v65, v82, *(float64x2_t *)&v78[v17]);
              float64x2_t v83 = *(float64x2_t *)&v79[v17];
              v81 += 2;
              v80 += 2;
              v79 += 2;
              float64x2_t v66 = vmlaq_f64(v66, v82, v83);
              v78 += 2;
              v77 += 2;
              v76 += 2;
            }
            while (v81 < v18);
          }
        }
        else
        {
          float64x2_t v57 = 0uLL;
          uint64_t v68 = v108;
          uint64_t v69 = v38;
          uint64_t v70 = v30;
          double v71 = v27;
          float64x2_t v62 = 0uLL;
          uint64_t v72 = v7;
          uint64_t v73 = v17;
          float64x2_t v65 = 0uLL;
          float64x2_t v66 = 0uLL;
          do
          {
            float64x2_t v74 = *(float64x2_t *)&v72[v17];
            float64x2_t v57 = vmlaq_f64(v57, v74, *(float64x2_t *)&v68[v17]);
            float64x2_t v62 = vmlaq_f64(v62, v74, *(float64x2_t *)&v69[v17]);
            float64x2_t v65 = vmlaq_f64(v65, v74, *(float64x2_t *)&v70[v17]);
            float64x2_t v75 = *(float64x2_t *)&v71[v17];
            v73 += 2;
            v72 += 2;
            v71 += 2;
            float64x2_t v66 = vmlaq_f64(v66, v74, v75);
            v70 += 2;
            v69 += 2;
            v68 += 2;
          }
          while (v73 < v18);
        }
        double v48 = v48 + vaddvq_f64(v57);
        double v47 = v47 + vaddvq_f64(v62);
        double v44 = v44 + vaddvq_f64(v65);
        double v39 = v39 + vaddvq_f64(v66);
        uint64_t v56 = v37 + 1;
      }
      if (a2 > v18)
      {
        uint64_t v84 = 0;
        do
        {
          double v85 = v7[v18 + v84];
          double v48 = v48 + v85 * *(double *)(v36 + 8 * v84);
          double v47 = v47 + v85 * *(double *)(v35 + 8 * v84);
          double v44 = v44 + v85 * *(double *)(v34 + 8 * v84);
          double v39 = v39 + v85 * *(double *)(v33 + 8 * v84++);
        }
        while (a2 - v18 != v84);
      }
      *(double *)(a5 + 8 * v37 * a6) = *(double *)(a5 + 8 * v37 * a6) + a7 * v48;
      *(double *)(a5 + 8 * v56 * a6) = *(double *)(a5 + 8 * v56 * a6) + a7 * v47;
      *(double *)(a5 + 8 * (v37 + 2) * a6) = *(double *)(a5 + 8 * (v37 + 2) * a6) + a7 * v44;
      *(double *)(a5 + 8 * (v37 + 3) * a6) = *(double *)(a5 + 8 * (v37 + 3) * a6) + a7 * v39;
      v37 += 4;
      double v27 = (double *)((char *)v27 + v28);
      uint64_t v30 = (double *)((char *)v30 + v28);
      uint64_t v38 = (double *)((char *)v38 + v28);
      double v32 = &v108[(unint64_t)v28 / 8];
      int v107 = (double *)((char *)v107 + v28);
      v106 += v28;
      v105 += v28;
      uint64_t v104 = (double *)((char *)v104 + v28);
      v33 += v28;
      v34 += v28;
      v35 += v28;
      v36 += v28;
    }
    while (v37 < v25);
  }
  uint64_t v86 = 8 * v11;
  uint64_t v87 = v103;
  do
  {
    uint64_t v88 = v87;
    if (v25 < result)
    {
      uint64_t v89 = (double *)(v12 + v86 * v25);
      do
      {
        double v90 = 0.0;
        if (v17 >= 1)
        {
          uint64_t v91 = v89;
          uint64_t v92 = v7;
          uint64_t v93 = v17;
          do
          {
            double v94 = *v91++;
            double v95 = v94;
            double v96 = *v92++;
            double v90 = v90 + v95 * v96;
            --v93;
          }
          while (v93);
        }
        if (v18 > v17)
        {
          float64x2_t v97 = 0uLL;
          if ((((_BYTE)v12 + 8 * (_BYTE)v25 * (_BYTE)v11 + 8 * (_BYTE)v17) & 0xF) != 0)
          {
            uint64_t v98 = v17;
            uint64_t v99 = v17;
            do
            {
              float64x2_t v97 = vmlaq_f64(v97, *(float64x2_t *)&v7[v98], *(float64x2_t *)&v89[v98]);
              v99 += 2;
              v98 += 2;
            }
            while (v99 < v18);
          }
          else
          {
            uint64_t v100 = v17;
            uint64_t v101 = v17;
            do
            {
              float64x2_t v97 = vmlaq_f64(v97, *(float64x2_t *)&v7[v100], *(float64x2_t *)&v89[v100]);
              v101 += 2;
              v100 += 2;
            }
            while (v101 < v18);
          }
          double v90 = v90 + vaddvq_f64(v97);
        }
        uint64_t v102 = v18;
        if (a2 > v18)
        {
          do
          {
            double v90 = v90 + v89[v102] * v7[v102];
            ++v102;
          }
          while (a2 != v102);
        }
        *(double *)(a5 + 8 * v25 * a6) = *(double *)(a5 + 8 * v25 * a6) + a7 * v90;
        ++v25;
        uint64_t v89 = (double *)((char *)v89 + v86);
      }
      while (v25 != result);
    }
    uint64_t v87 = 0;
    uint64_t v25 = 0;
    double result = v88;
  }
  while (v88);
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run(float64x2_t **a1)
{
  uint64_t v1 = *(void *)&a1[2]->f64[1];
  if (v1 >= 0) {
    uint64_t v2 = *(void *)&a1[2]->f64[1];
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)&a1[2]->f64[1];
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  unint64_t v4 = *a1;
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0];
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  float64x2_t v7 = *v4;
  if (v1 >= 4)
  {
    int64_t v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v9 = v4[1];
    if ((unint64_t)v1 >= 8)
    {
      uint64_t v10 = v4 + 3;
      uint64_t v11 = 4;
      do
      {
        float64x2_t v7 = vaddq_f64(v7, v10[-1]);
        float64x2_t v12 = *v10;
        v10 += 2;
        float64x2_t v9 = vaddq_f64(v9, v12);
        v11 += 4;
      }
      while (v11 < v8);
    }
    float64x2_t v7 = vaddq_f64(v9, v7);
    if (v6 > v8) {
      float64x2_t v7 = vaddq_f64(v7, *(float64x2_t *)((char *)v4 + 8 * v8));
    }
  }
  double result = vaddvq_f64(v7);
  BOOL v13 = v1 <= v6;
  uint64_t v14 = v1 - v6;
  if (!v13)
  {
    f64 = v4[v3 >> 1].f64;
    do
    {
      double v16 = *f64++;
      double result = result + v16;
      --v14;
    }
    while (v14);
  }
  return result;
}

char *std::vector<double>::__insert_with_size[abi:ne180100]<double *,double *>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  float64x2_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    BOOL v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    uint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    uint64_t v5 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    char v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    uint64_t v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  char v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_2242AA418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double std::__split_buffer<double>::push_back(void *a1, double *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      BOOL v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  double result = *a2;
  *(double *)unint64_t v4 = *a2;
  a1[2] = v4 + 8;
  return result;
}

float64x2_t **Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run(float64x2_t **result)
{
  uint64_t v1 = *(void *)&result[2]->f64[1];
  if (v1 >= 0) {
    uint64_t v2 = *(void *)&result[2]->f64[1];
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)&result[2]->f64[1];
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  unint64_t v4 = *result;
  if ((unint64_t)(v1 + 1) >= 3)
  {
    int64_t v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    float64x2_t v6 = *v4;
    if (v1 >= 4)
    {
      int64_t v7 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      float64x2_t v8 = v4[1];
      if ((unint64_t)v1 >= 8)
      {
        uint64_t v9 = v4 + 3;
        uint64_t v10 = 4;
        do
        {
          float64x2_t v6 = vmaxq_f64(v6, v9[-1]);
          float64x2_t v11 = *v9;
          v9 += 2;
          float64x2_t v8 = vmaxq_f64(v8, v11);
          v10 += 4;
        }
        while (v10 < v7);
      }
      float64x2_t v6 = vmaxq_f64(v6, v8);
      if (v5 > v7) {
        float64x2_t v6 = vmaxq_f64(v6, *(float64x2_t *)((char *)v4 + 8 * v7));
      }
    }
    *(void *)&double v12 = *(_OWORD *)&vpmaxq_f64(v6, v6);
    BOOL v13 = v1 <= v5;
    uint64_t v14 = v1 - v5;
    if (!v13)
    {
      f64 = v4[v3 >> 1].f64;
      do
      {
        double v16 = *f64++;
        double v17 = v16;
        if (v12 < v16) {
          double v12 = v17;
        }
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(void *a1, void *a2)
{
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 8);
  if (v5)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v27, v5, 1);
    float64x2_t v6 = (char *)v27;
    uint64_t v7 = v28;
    uint64_t v4 = *a2;
    uint64_t v8 = a2[1];
    if (v28 >= 0) {
      uint64_t v9 = v28;
    }
    else {
      uint64_t v9 = v28 + 1;
    }
    int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v28 >= 2)
    {
      unint64_t v11 = 2;
      if (v10 > 2) {
        unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v27, ((8 * v11 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v10 < v7) {
      bzero(&v6[16 * (v9 >> 1)], 8 * v7 - 16 * (v9 >> 1));
    }
  }
  else
  {
    uint64_t v8 = a2[1];
  }
  uint64_t v29 = 0x3FF0000000000000;
  uint64_t v30 = v4;
  v31[1] = v8;
  double v32 = &v27;
  v31[0] = 0;
  Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,1,-1,-1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run((uint64_t)v31, (uint64_t)&v30, (uint64_t **)&v32, (double *)&v29);
  BOOL v13 = (long long *)v27;
  uint64_t v12 = v28;
  if (a1[1] != v28)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v28, 1);
    uint64_t v12 = a1[1];
  }
  uint64_t v14 = (_OWORD *)*a1;
  if (v12 >= 0) {
    uint64_t v15 = v12;
  }
  else {
    uint64_t v15 = v12 + 1;
  }
  int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v17 = 0;
    uint64_t v18 = (_OWORD *)*a1;
    uint64_t v19 = v13;
    do
    {
      long long v20 = *v19++;
      *v18++ = v20;
      v17 += 2;
    }
    while (v17 < v16);
  }
  BOOL v21 = __OFSUB__(v12, v16);
  uint64_t v22 = v12 - v16;
  if (!((v22 < 0) ^ v21 | (v22 == 0)))
  {
    uint64_t v23 = v15 >> 1;
    uint64_t v24 = (uint64_t *)&v13[v15 >> 1];
    uint64_t v25 = &v14[v23];
    do
    {
      uint64_t v26 = *v24++;
      *v25++ = v26;
      --v22;
    }
    while (v22);
  }
  free(v27);
}

void sub_2242AA788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,1,-1,-1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run(uint64_t a1, uint64_t a2, uint64_t **a3, double *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 8);
  if (*(uint64_t *)(*(void *)a2 + 8) >= 1)
  {
    uint64_t v7 = 0;
    do
      Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,1,-1,-1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow((uint64_t)v8, a2, a3, a4, 0, v7++);
    while (v7 < *(void *)(*(void *)a2 + 8));
  }
}

double Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Matrix<double,-1,-1,1,-1,-1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow(uint64_t a1, uint64_t a2, uint64_t **a3, double *a4, uint64_t a5, uint64_t a6)
{
  float64x2_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = v6[3];
  if (v7 < 1)
  {
    double v10 = 0.0;
  }
  else
  {
    uint64_t v8 = (double *)v6[1];
    uint64_t v9 = (int *)v6[2];
    double v10 = 0.0;
    do
    {
      double v11 = *v8++;
      double v12 = v11;
      uint64_t v13 = *v9++;
      double v10 = v10 + v12 * *(double *)(**(void **)a2 + 8 * (*(void *)(*(void *)a2 + 16) * a6 + v13));
      --v7;
    }
    while (v7);
  }
  uint64_t v14 = **a3;
  double result = *(double *)(v14 + 8 * a6) + *a4 * v10;
  *(double *)(v14 + 8 * a6) = result;
  return result;
}

void std::__shared_ptr_emplace<turi::supervised_2::logistic_regression::lr_optimization_interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::supervised_2::logistic_regression::lr_optimization_interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D776B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::supervised_2::logistic_regression::lr_optimization_interface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D776B50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D776B50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
}

uint64_t std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::Matrix<double,-1,1,0,-1,1>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v165 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  uint64_t v150 = 0;
  uint64_t v151 = 0;
  unint64_t v6 = *(void *)(v5 + 856);
  if (v6)
  {
    if (v6 >> 61 || (uint64_t v7 = malloc_type_malloc(8 * v6, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int64_t v122 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v122, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    uint64_t v150 = v7;
  }
  uint64_t v151 = v6;
  uint64_t v8 = *(void *)(v5 + 864) + 232 * a2;
  double v10 = *(char **)(v8 + 24);
  uint64_t v9 = *(void *)(v8 + 32);
  double v11 = (void *)(v8 + 24);
  uint64_t v12 = *(void *)(v5 + 848);
  if (v9 != v12)
  {
    free(v10);
    if (v12)
    {
      if ((unint64_t)v12 >> 61 || (double v10 = (char *)malloc_type_malloc(8 * v12, 0x1E76AA36uLL)) == 0)
      {
LABEL_151:
        unint64_t v123 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v124 = std::bad_alloc::bad_alloc(v123);
        __cxa_throw(v124, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
    }
    else
    {
      double v10 = 0;
    }
    *double v11 = v10;
  }
  v11[1] = v12;
  if (v12 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    unint64_t v15 = 2;
    if (v14 > 2) {
      unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(v10, ((8 * v15 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  int64_t v16 = (void **)(v11 + 2);
  uint64_t v129 = (double *)(v11 + 11);
  if (v14 < v12) {
    bzero(&v10[16 * (v13 >> 1)], 8 * v12 - 16 * (v13 >> 1));
  }
  *uint64_t v129 = 0.0;
  if (*(unsigned char *)a1[1])
  {
    uint64_t v17 = *(void *)(v5 + 848);
    if (v17 && 0x7FFFFFFFFFFFFFFFLL / v17 < v17) {
      goto LABEL_151;
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v11 + 2, v17 * v17, v17, *(void *)(v5 + 848));
    uint64_t v19 = v11[3];
    uint64_t v18 = v11[4];
    long long v20 = (char *)*v16;
    uint64_t v21 = v18 * v19;
    if (v18 * v19 >= 0) {
      uint64_t v22 = v18 * v19;
    }
    else {
      uint64_t v22 = v21 + 1;
    }
    int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v21 >= 2)
    {
      unint64_t v24 = 2;
      if (v23 > 2) {
        unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(*v16, ((8 * v24 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v23 < v21) {
      bzero(&v20[16 * (v22 >> 1)], 8 * v21 - 16 * (v22 >> 1));
    }
  }
  BOOL v128 = (double **)v11;
  turi::ml_data::get_iterator((turi::ml_data *)(v5 + 384), a2, a3, (uint64_t)v137);
  if (v143 != v142)
  {
    uint64_t v25 = (double **)(v11 + 5);
    uint64_t v26 = v11 + 8;
    uint64_t v136 = (long double **)(v11 - 2);
    do
    {
      uint64_t v28 = v145;
      uint64_t v27 = v146;
      if (v146) {
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v133 = v147;
      int v29 = v149;
      uint64_t v31 = (char *)v150;
      int64_t v30 = v151;
      if (v151 >= 0) {
        uint64_t v32 = v151;
      }
      else {
        uint64_t v32 = v151 + 1;
      }
      int64_t v33 = v32 & 0xFFFFFFFFFFFFFFFELL;
      if (v151 >= 2)
      {
        int v126 = v149;
        unint64_t v34 = 2;
        if (v33 > 2) {
          unint64_t v34 = v32 & 0xFFFFFFFFFFFFFFFELL;
        }
        uint64_t v131 = v27;
        uint64_t v127 = v28;
        uint64_t v125 = v32;
        bzero(v150, ((8 * v34 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
        uint64_t v32 = v125;
        int v29 = v126;
        uint64_t v28 = v127;
        uint64_t v27 = v131;
      }
      if (v33 < v30)
      {
        int v35 = v29;
        uint64_t v36 = &v31[16 * (v32 >> 1)];
        size_t v37 = 8 * v30 - 16 * (v32 >> 1);
        uint64_t v38 = v27;
        uint64_t v39 = v28;
        bzero(v36, v37);
        int v29 = v35;
        uint64_t v28 = v39;
        uint64_t v27 = v38;
      }
      if (v29)
      {
        uint64_t v40 = *(void *)(v28 + 56);
        if (v40)
        {
          uint64_t v41 = 0;
          uint64_t v42 = *(void *)(v28 + 96) + 8 * v133 + 8 * (*(unsigned char *)(v28 + 18) == 0);
          uint64_t v43 = *(void *)(v28 + 72);
          double v44 = (double *)v150;
          do
          {
            uint64_t v45 = *(void *)(v43 + 16 * v41);
            unint64_t v46 = *(void *)(v45 + 64);
            uint64_t v47 = *(void *)(v45 + 104);
            switch(*(_DWORD *)(v45 + 24))
            {
              case 0:
                double v48 = *(double *)v42;
                v42 += 8;
                double v49 = v48;
                if (v46)
                {
                  if (*(unsigned char *)(v5 + 360)) {
                    double v49 = v49 * *(double *)(*(void *)(v5 + 368) + 8 * v47);
                  }
                  goto LABEL_90;
                }
                break;
              case 1:
                double v62 = *(double *)v42;
                v42 += 8;
                double v61 = v62;
                if (*(void *)&v62 < v46)
                {
                  v47 += *(void *)&v61;
                  if (*(unsigned char *)(v5 + 360)) {
                    double v49 = *(double *)(*(void *)(v5 + 368) + 8 * v47);
                  }
                  else {
                    double v49 = 1.0;
                  }
LABEL_90:
                  v44[v47] = v49;
                }
                break;
              case 2:
                uint64_t v50 = *(void *)(v45 + 72);
                if (v50)
                {
                  uint64_t v51 = 0;
                  unint64_t v52 = 0;
                  uint64_t v53 = 8 * v47;
                  double v54 = (char *)v150 + 8 * v47;
                  do
                  {
                    if (v52 < v46)
                    {
                      double v55 = *(double *)(v42 + 8 * v52);
                      if (*(unsigned char *)(v5 + 360)) {
                        double v55 = v55 * *(double *)(*(void *)(v5 + 368) + v53 + 8 * v52);
                      }
                      *(double *)&v54[8 * v52] = v55;
                    }
                    ++v52;
                    v51 -= 8;
                  }
                  while (v50 != v52);
                  goto LABEL_68;
                }
                break;
              case 3:
                double v64 = *(double *)v42;
                v42 += 8;
                double v63 = v64;
                if (v64 != 0.0)
                {
                  float64x2_t v65 = (double *)v150;
                  do
                  {
                    if (*(void *)v42 < v46)
                    {
                      uint64_t v66 = *(void *)v42 + v47;
                      if (*(unsigned char *)(v5 + 360)) {
                        double v67 = *(double *)(*(void *)(v5 + 368) + 8 * v66);
                      }
                      else {
                        double v67 = 1.0;
                      }
                      v65[v66] = v67;
                    }
                    v42 += 8;
                    --*(void *)&v63;
                  }
                  while (v63 != 0.0);
                }
                break;
              case 4:
                double v69 = *(double *)v42;
                v42 += 8;
                double v68 = v69;
                if (v69 != 0.0)
                {
                  uint64_t v70 = (double *)v150;
                  do
                  {
                    if (*(void *)v42 < v46)
                    {
                      double v71 = *(double *)(v42 + 8);
                      uint64_t v72 = *(void *)v42 + v47;
                      if (*(unsigned char *)(v5 + 360)) {
                        double v71 = v71 * *(double *)(*(void *)(v5 + 368) + 8 * v72);
                      }
                      v70[v72] = v71;
                    }
                    v42 += 16;
                    --*(void *)&v68;
                  }
                  while (v68 != 0.0);
                }
                break;
              case 7:
                uint64_t v56 = *(void *)(v45 + 72);
                if (v56)
                {
                  uint64_t v51 = 0;
                  unint64_t v57 = 0;
                  uint64_t v58 = 8 * v47;
                  int v59 = (char *)v150 + 8 * v47;
                  do
                  {
                    if (v57 < v46)
                    {
                      double v60 = *(double *)(v42 + 8 * v57);
                      if (*(unsigned char *)(v5 + 360)) {
                        double v60 = v60 * *(double *)(*(void *)(v5 + 368) + v58 + 8 * v57);
                      }
                      *(double *)&v59[8 * v57] = v60;
                    }
                    ++v57;
                    v51 -= 8;
                  }
                  while (v56 != v57);
LABEL_68:
                  v42 -= v51;
                }
                break;
              default:
                break;
            }
            ++v41;
          }
          while (v41 != v40);
        }
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      *((void *)v150 + *(void *)(v5 + 856) - 1) = 0x3FF0000000000000;
      if (*(unsigned char *)(v145 + 16)) {
        BOOL v73 = *(unsigned char *)(v145 + 17) == 0;
      }
      else {
        BOOL v73 = 1;
      }
      if (v73)
      {
        uint64_t v74 = 0;
      }
      else
      {
        float64x2_t v75 = (void *)(v145 + 24);
        if (!*(unsigned char *)(v145 + 18)) {
          float64x2_t v75 = (void *)(*(void *)(v145 + 96) + 8 * v147);
        }
        uint64_t v74 = *(void *)(*(void *)(v145 + 96) + 8 * v147 + 8 * *v75 - 8);
      }
      uint64_t v76 = a1[2];
      int64_t v77 = *(long double ***)(v76 + 16);
      long long v159 = *(_OWORD *)v76;
      uint64_t v160 = v77;
      unint64_t v162 = (unint64_t)&v150;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(v136, &v159);
      uint64_t v132 = *v136;
      if (v74) {
        double v78 = (*v136)[v74 - 1];
      }
      else {
        double v78 = 0.0;
      }
      uint64_t v134 = (uint64_t)v136[1];
      if (v134 >= 1)
      {
        uint64_t v79 = *v136;
        uint64_t v80 = v136[1];
        do
        {
          *uint64_t v79 = exp(*v79);
          ++v79;
          uint64_t v80 = (long double *)((char *)v80 - 1);
        }
        while (v80);
      }
      if (v134)
      {
        *(void *)&long long v159 = v132;
        uint64_t v81 = (void **)v136;
        uint64_t v160 = v136;
        double v82 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)&v159);
        float64x2_t v83 = *v136;
        uint64_t v84 = (uint64_t)v136[1];
        if (v84 >= 0) {
          uint64_t v85 = (uint64_t)v136[1];
        }
        else {
          uint64_t v85 = v84 + 1;
        }
        int64_t v86 = v85 & 0xFFFFFFFFFFFFFFFELL;
        double v87 = 1.0 / (v82 + 1.0);
        if (v84 >= 2)
        {
          int64_t v88 = 0;
          uint64_t v89 = (float64x2_t *)*v136;
          do
          {
            *uint64_t v89 = vmulq_n_f64(*v89, v87);
            ++v89;
            v88 += 2;
          }
          while (v88 < v86);
        }
        BOOL v90 = v84 <= v86;
        uint64_t v91 = v84 - v86;
        if (!v90)
        {
          uint64_t v92 = &v83[2 * (v85 >> 1)];
          do
          {
            *uint64_t v92 = v87 * *v92;
            ++v92;
            --v91;
          }
          while (v91);
        }
      }
      else
      {
        double v82 = 0.0;
        uint64_t v81 = (void **)v136;
      }
      double v93 = log1p(v82);
      if (v74) {
        *((double *)*v81 + v74 - 1) = *((double *)*v81 + v74 - 1) + -1.0;
      }
      unint64_t v94 = *(void *)(*(void *)(v5 + 344) + 8 * v74);
      *((void *)&v159 + 1) = v81[1];
      uint64_t v160 = (long double **)v151;
      unint64_t v161 = v94;
      unint64_t v162 = (unint64_t)v81;
      unint64_t v163 = &v150;
      double v95 = *v128;
      uint64_t v135 = *(void *)(v5 + 784);
      uint64_t v96 = *(void *)(v5 + 856);
      Eigen::Matrix<double,-1,-1,0,-1,-1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(&v155, &v159);
      float64x2_t v97 = v155;
      if (v135 - 1 >= 1)
      {
        uint64_t v98 = 0;
        uint64_t v99 = 8 * *(void *)&v156;
        uint64_t v100 = (double *)v155;
        do
        {
          uint64_t v101 = v95;
          uint64_t v102 = v100;
          uint64_t v103 = v96;
          if (v96 >= 1)
          {
            do
            {
              double *v101 = *v102 + *v101;
              ++v101;
              uint64_t v102 = (double *)((char *)v102 + v99);
              --v103;
            }
            while (v103);
          }
          ++v98;
          ++v100;
          v95 += v96;
        }
        while (v98 != v135 - 1);
      }
      free(v97);
      *uint64_t v129 = *v129 + *(double *)(*(void *)(v5 + 344) + 8 * v74) * (v93 - v78);
      if (*(unsigned char *)a1[1])
      {
        *((void *)&v159 + 1) = v136[1];
        unint64_t v161 = 0xBFF0000000000000;
        unint64_t v162 = (unint64_t)v136;
        v164 = v136;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(v25, (uint64_t)&v159);
        uint64_t v105 = (uint64_t)v25[1];
        uint64_t v104 = (uint64_t)v25[2];
        if (v104 >= v105) {
          uint64_t v104 = (uint64_t)v25[1];
        }
        if (v104 >= 1)
        {
          uint64_t v106 = *v136;
          int v107 = *v25;
          uint64_t v108 = 8 * v105 + 8;
          do
          {
            double v109 = *v106++;
            double *v107 = v109 + *v107;
            int v107 = (double *)((char *)v107 + v108);
            --v104;
          }
          while (v104);
        }
        *(void *)&long long v159 = &v150;
        *((void *)&v159 + 1) = &v150;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(v26, (uint64_t)&v159);
        if (*(void *)(v5 + 784) != 1)
        {
          unint64_t v110 = 0;
          do
          {
            unint64_t v111 = 0;
            do
            {
              double v112 = *(double *)(*(void *)(v5 + 344) + 8 * v74) * (*v25)[v110 + (void)v25[1] * v111];
              unint64_t v113 = *(long double ***)(v5 + 856);
              uint64_t v114 = (long double **)v16[1];
              *(void *)&long long v159 = (char *)*v16 + 8 * (void)v113 * v110 + 8 * (void)v114 * (void)v113 * v111;
              *((void *)&v159 + 1) = v113;
              uint64_t v160 = v113;
              unint64_t v161 = (unint64_t)v16;
              unint64_t v162 = (void)v113 * v110;
              unint64_t v163 = (void **)((void)v113 * v111);
              v164 = v114;
              double v156 = v112;
              uint64_t v157 = *v26;
              uint64_t v158 = v26[1];
              v154[0] = v159;
              v154[2] = v114;
              v153[0] = v154;
              v153[1] = &v155;
              v153[2] = &v152;
              v153[3] = &v159;
              Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,-1,0,-1,-1> const>>,Eigen::internal::add_assign_op<double,double>,0>,4,0>::run(v153);
              ++v111;
              unint64_t v115 = *(void *)(v5 + 784) - 1;
            }
            while (v111 < v115);
            ++v110;
          }
          while (v110 < v115);
        }
      }
      if (v149 | v139)
      {
        uint64_t v116 = (uint64_t *)(*(void *)(v145 + 96) + 8 * v147);
        if (v140) {
          uint64_t v116 = &v141;
        }
        v147 += *v116;
      }
      uint64_t v117 = v143 + 1;
      uint64_t v118 = v142;
      uint64_t v119 = ++v143 - v138 * v144;
      uint64_t v148 = v119;
      if (v119 == v138 && v117 != v142)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v137);
        uint64_t v118 = v142;
        uint64_t v117 = v143;
      }
    }
    while (v117 != v118);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v137);
  free(v150);
}

void sub_2242AB404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  free(a64);
  _Unwind_Resume(a1);
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>>,Eigen::Matrix<double,-1,1,0,-1,1>,0>,Eigen::internal::assign_op<double,double>>(void *a1, long long *a2)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v26, v4, 1);
    uint64_t v5 = (char *)v26;
    uint64_t v6 = v27;
    uint64_t v7 = (unint64_t *)*((void *)a2 + 4);
    if (v27 >= 0) {
      uint64_t v8 = v27;
    }
    else {
      uint64_t v8 = v27 + 1;
    }
    int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v27 >= 2)
    {
      unint64_t v10 = 2;
      if (v9 > 2) {
        unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v26, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6) {
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
    }
  }
  else
  {
    uint64_t v7 = (unint64_t *)*((void *)a2 + 4);
  }
  uint64_t v28 = 0x3FF0000000000000;
  long long v29 = *a2;
  uint64_t v30 = *((void *)a2 + 2);
  Eigen::internal::gemv_dense_selector<2,1,true>::run<Eigen::Matrix<double,-1,-1,1,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Matrix<double,-1,1,0,-1,1>>((uint64_t *)&v29, v7, (uint64_t *)&v26, (double *)&v28);
  uint64_t v12 = (long long *)v26;
  uint64_t v11 = v27;
  if (a1[1] != v27)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v27, 1);
    uint64_t v11 = a1[1];
  }
  uint64_t v13 = (_OWORD *)*a1;
  if (v11 >= 0) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v11 + 1;
  }
  int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    int64_t v16 = 0;
    uint64_t v17 = (_OWORD *)*a1;
    uint64_t v18 = v12;
    do
    {
      long long v19 = *v18++;
      *v17++ = v19;
      v16 += 2;
    }
    while (v16 < v15);
  }
  BOOL v20 = __OFSUB__(v11, v15);
  uint64_t v21 = v11 - v15;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    uint64_t v22 = v14 >> 1;
    int64_t v23 = (uint64_t *)&v12[v14 >> 1];
    unint64_t v24 = &v13[v22];
    do
    {
      uint64_t v25 = *v23++;
      *v24++ = v25;
      --v21;
    }
    while (v21);
  }
  free(v26);
}

void sub_2242AB5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void *Eigen::Matrix<double,-1,-1,0,-1,-1>::Matrix<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0> const>>(void *a1, void *a2)
{
  v17[1] = *(uint64_t **)MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4];
  uint64_t v5 = (uint64_t *)a2[5];
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v14 = v6;
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  v17[0] = v5;
  uint64_t v7 = v5[1];
  if (v6 | v7)
  {
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && 0x7FFFFFFFFFFFFFFFLL / v7 < v6)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v7 * v6, v6, v7);
  }
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(a1, (uint64_t)v13, v17, (uint64_t)&v12);
  return a1;
}

void sub_2242AB6E8(_Unwind_Exception *a1)
{
  free(*v1);
  _Unwind_Resume(a1);
}

void Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(void *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v6 = **a3;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v7 = *(float64x2_t ***)(a2 + 32);
  uint64_t v8 = (uint64_t)v7[1];
  if (v8)
  {
    double v28 = *(double *)(a2 + 24);
    int64_t v9 = *v7;
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v30, v8, 1);
    unint64_t v10 = (char *)v30;
    int64_t v11 = v31;
    if (v31 >= 0) {
      uint64_t v12 = v31;
    }
    else {
      uint64_t v12 = v31 + 1;
    }
    int64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (v31 >= 2)
    {
      int64_t v14 = 0;
      uint64_t v15 = (float64x2_t *)v30;
      uint64_t v16 = v9;
      do
      {
        float64x2_t v17 = *v16++;
        *v15++ = vmulq_n_f64(v17, v28);
        v14 += 2;
      }
      while (v14 < v13);
    }
    BOOL v18 = v11 <= v13;
    int64_t v19 = v11 - v13;
    if (!v18)
    {
      uint64_t v20 = v12 >> 1;
      f64 = v9[v12 >> 1].f64;
      uint64_t v22 = (double *)&v10[16 * v20];
      do
      {
        double v23 = *f64++;
        *v22++ = v28 * v23;
        --v19;
      }
      while (v19);
    }
  }
  uint64_t v24 = a1[2];
  if (v24 >= 1)
  {
    for (uint64_t i = 0; i != v24; ++i)
    {
      uint64_t v26 = a1[1];
      v29[0] = *a1 + 8 * v26 * i;
      v29[1] = v26;
      void v29[3] = a1;
      v29[4] = 0;
      v29[5] = i;
      v29[6] = v26;
      uint64_t v27 = *(void *)(v6 + 8 * i);
      uint64_t v33 = v31;
      uint64_t v34 = v27;
      int v35 = &v30;
      Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set::operator()<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(a4, v29, (uint64_t)v32);
    }
  }
  free(v30);
}

void sub_2242AB864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
}

void Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set::operator()<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(uint64_t a1, void *a2, uint64_t a3)
{
  double v3 = *(double *)(a3 + 24);
  uint64_t v4 = **(void **)(a3 + 32);
  uint64_t v5 = (double *)*a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = (*a2 >> 3) & 1;
  if (v7 >= v6) {
    uint64_t v7 = a2[1];
  }
  if ((v5 & 7) != 0) {
    uint64_t v7 = a2[1];
  }
  uint64_t v8 = v6 - v7;
  if (v6 >= v7) {
    uint64_t v9 = v6 - v7;
  }
  else {
    uint64_t v9 = v8 + 1;
  }
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 1)
  {
    int64_t v11 = (double *)*a2;
    uint64_t v12 = **(double ***)(a3 + 32);
    uint64_t v13 = v7;
    do
    {
      double v14 = *v12++;
      *v11++ = v3 * v14;
      --v13;
    }
    while (v13);
  }
  int64_t v15 = v10 + v7;
  if (v8 > 1)
  {
    uint64_t v16 = (float64x2_t *)(v4 + 8 * v7);
    uint64_t v17 = v7;
    BOOL v18 = (float64x2_t *)&v5[v7];
    do
    {
      float64x2_t v19 = *v16++;
      *v18++ = vmulq_n_f64(v19, v3);
      v17 += 2;
    }
    while (v17 < v15);
  }
  if (v15 < v6)
  {
    unint64_t v20 = v8 - v10;
    uint64_t v21 = 16 * (v9 >> 1) + 8 * v7;
    uint64_t v22 = (double *)(v4 + v21);
    double v23 = (double *)((char *)v5 + v21);
    do
    {
      double v24 = *v22++;
      *v23++ = v3 * v24;
      --v20;
    }
    while (v20);
  }
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(void *a1, uint64_t a2)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v29 = 0;
  uint64_t v4 = (uint64_t **)(a2 + 48);
  uint64_t v5 = *(void *)(*(void *)(a2 + 32) + 8);
  uint64_t v6 = *(void *)(*(void *)(a2 + 48) + 8);
  if (v5 | v6)
  {
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v29, v6 * v5, v5, v6);
  }
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(&v29, a2, v4, (uint64_t)&v32);
  uint64_t v9 = (long long *)v29;
  uint64_t v8 = v30;
  uint64_t v10 = v31;
  if (a1[1] != v30 || a1[2] != v31)
  {
    if (v30 && v31 && 0x7FFFFFFFFFFFFFFFLL / v31 < v30)
    {
      uint64_t v27 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      double v28 = std::bad_alloc::bad_alloc(v27);
      __cxa_throw(v28, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v31 * v30, v30, v31);
    uint64_t v8 = a1[1];
    uint64_t v10 = a1[2];
  }
  int64_t v11 = (_OWORD *)*a1;
  uint64_t v12 = v8 * v10;
  if (v8 * v10 >= 0) {
    uint64_t v13 = v8 * v10;
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v15 = 0;
    uint64_t v16 = (_OWORD *)*a1;
    uint64_t v17 = v9;
    do
    {
      long long v18 = *v17++;
      *v16++ = v18;
      v15 += 2;
    }
    while (v15 < v14);
  }
  BOOL v19 = v12 <= v14;
  uint64_t v20 = v12 - v14;
  if (!v19)
  {
    uint64_t v21 = v13 >> 1;
    uint64_t v22 = (uint64_t *)&v9[v13 >> 1];
    double v23 = &v11[v21];
    do
    {
      uint64_t v24 = *v22++;
      *v23++ = v24;
      --v20;
    }
    while (v20);
  }
  free(v29);
}

void sub_2242ABADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(void *a1, uint64_t a2)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  long long v29 = 0;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(*(void *)(a2 + 8) + 8);
  if (v5 | v6)
  {
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v26 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v26, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(&v29, v6 * v5, v5, v6);
    uint64_t v4 = *(void *)a2;
  }
  Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(&v29, v4, (uint64_t **)(a2 + 8), (uint64_t)&v32);
  uint64_t v9 = (long long *)v29;
  uint64_t v8 = v30;
  uint64_t v10 = v31;
  if (a1[1] != v30 || a1[2] != v31)
  {
    if (v30 && v31 && 0x7FFFFFFFFFFFFFFFLL / v31 < v30)
    {
      uint64_t v27 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      double v28 = std::bad_alloc::bad_alloc(v27);
      __cxa_throw(v28, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v31 * v30, v30, v31);
    uint64_t v8 = a1[1];
    uint64_t v10 = a1[2];
  }
  int64_t v11 = (_OWORD *)*a1;
  uint64_t v12 = v8 * v10;
  if (v8 * v10 >= 0) {
    uint64_t v13 = v8 * v10;
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    int64_t v15 = 0;
    uint64_t v16 = (_OWORD *)*a1;
    uint64_t v17 = v9;
    do
    {
      long long v18 = *v17++;
      *v16++ = v18;
      v15 += 2;
    }
    while (v15 < v14);
  }
  BOOL v19 = v12 <= v14;
  uint64_t v20 = v12 - v14;
  if (!v19)
  {
    uint64_t v21 = v13 >> 1;
    uint64_t v22 = (uint64_t *)&v9[v13 >> 1];
    double v23 = &v11[v21];
    do
    {
      uint64_t v24 = *v22++;
      *v23++ = v24;
      --v20;
    }
    while (v20);
  }
  free(v29);
}

void sub_2242ABC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9)
{
}

void Eigen::internal::outer_product_selector_run<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::internal::generic_product_impl<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set>(void *a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[2];
  if (v4 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = **a3;
    do
    {
      uint64_t v10 = a1[1];
      v12[0] = *a1 + 8 * v10 * v8;
      v12[1] = v10;
      void v12[3] = a1;
      v12[4] = 0;
      v12[5] = v8;
      v12[6] = v10;
      uint64_t v11 = *(void *)(v9 + 8 * v8);
      uint64_t v14 = *(void *)(a2 + 8);
      uint64_t v15 = v11;
      uint64_t v16 = a2;
      Eigen::internal::generic_product_impl<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,Eigen::DenseShape,Eigen::DenseShape,5>::set::operator()<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>(a4, v12, (uint64_t)v13);
      ++v8;
    }
    while (v4 != v8);
  }
}

void *Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,-1,0,-1,-1> const>>,Eigen::internal::add_assign_op<double,double>,0>,4,0>::run(void *result)
{
  uint64_t v1 = (unint64_t *)result[3];
  unint64_t v2 = *v1;
  if ((*v1 & 7) != 0)
  {
    uint64_t v3 = v1[2];
    if (v3 >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = v1[1];
      BOOL v7 = (void *)*result;
      uint64_t v8 = result[1];
      do
      {
        if (v6 >= 1)
        {
          uint64_t v9 = (double *)(*(void *)(v8 + 24) + *(void *)(v8 + 32) * v4);
          uint64_t v10 = (double *)(*v7 + v7[2] * v4);
          uint64_t v11 = v6;
          do
          {
            double v12 = *v9++;
            double *v10 = *(double *)(v8 + 8) * v12 + *v10;
            ++v10;
            --v11;
          }
          while (v11);
        }
        ++v5;
        v4 += 8;
      }
      while (v5 != v3);
    }
  }
  else
  {
    uint64_t v13 = v1[2];
    if (v13 >= 1)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = v1[1];
      uint64_t v17 = v1[6] & 1;
      uint64_t v18 = (v2 >> 3) & 1;
      if (v18 >= v16) {
        uint64_t v18 = v16;
      }
      do
      {
        if (v18 >= 1) {
          *(double *)(*(void *)*result + 8 * *(void *)(*result + 16) * v15) = *(double *)(result[1] + 8)
        }
                                                                                  * *(double *)(*(void *)(result[1] + 24)
                                                                                              + 8
                                                                                              * *(void *)(result[1] + 32)
                                                                                              * v15)
                                                                                  + *(double *)(*(void *)*result
                                                                                              + 8
                                                                                              * *(void *)(*result + 16)
                                                                                              * v15);
        int64_t v19 = (v16 - v18) & 0xFFFFFFFFFFFFFFFELL;
        int64_t v20 = v19 + v18;
        if (v19 >= 1)
        {
          uint64_t v21 = 8 * v18;
          uint64_t v22 = v18;
          do
          {
            uint64_t v23 = 8 * (v22 + v15 * *(void *)(*result + 16));
            *(float64x2_t *)(*(void *)*result + v23) = vaddq_f64(*(float64x2_t *)(*(void *)*result + v23), vmulq_n_f64(*(float64x2_t *)(*(void *)(result[1] + 24)+ v14 * *(void *)(result[1] + 32)+ v21), *(double *)(result[1] + 8)));
            v22 += 2;
            v21 += 16;
          }
          while (v22 < v20);
        }
        if (v20 < v16)
        {
          uint64_t v24 = result[1];
          uint64_t v25 = *(void *)(v24 + 24);
          uint64_t v26 = *(void *)(v24 + 32);
          uint64_t v27 = *(void *)*result + *(void *)(*result + 16) * v14;
          do
          {
            *(double *)(v27 + 8 * v20) = *(double *)(v24 + 8) * *(double *)(v25 + v26 * v14 + 8 * v20)
                                       + *(double *)(v27 + 8 * v20);
            ++v20;
          }
          while (v20 < v16);
        }
        BOOL v28 = __OFADD__(v18, v17);
        uint64_t v30 = v18 + v17;
        char v29 = (v30 < 0) ^ v28;
        uint64_t v18 = v30 & 1;
        if (v29) {
          uint64_t v18 = -v18;
        }
        if (v16 < v18) {
          uint64_t v18 = v16;
        }
        ++v15;
        v14 += 8;
      }
      while (v15 != v13);
    }
  }
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26D776BD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D776BD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()((unsigned char **)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1},std::allocator<void turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)::{lambda(unsigned long,unsigned long)#1}>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t *turi::supervised_2::logistic_regression::_compute_optimization_statistics<Eigen::SparseVector<double,0,int>>(Eigen::Matrix<double,-1,1,0,-1,1> const&,double &,Eigen::Matrix<double,-1,1,0,-1,1>&,Eigen::Matrix<double,-1,-1,0,-1,-1> *)const::{lambda(unsigned long,unsigned long)#1}::operator()(unsigned char **a1, uint64_t a2, unint64_t a3)
{
  v157[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = (uint64_t)*a1;
  uint64_t v7 = *((void *)*a1 + 107);
  char v145 = 0;
  long long v146 = 0u;
  long long v147 = 0u;
  uint64_t v148 = v7;
  uint64_t v8 = *(void *)(v6 + 864) + 232 * a2;
  uint64_t v11 = *(char **)(v8 + 24);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v10 = (void *)(v8 + 24);
  uint64_t v12 = *(void *)(v6 + 848);
  uint64_t v117 = v10;
  if (v9 != v12)
  {
    free(v11);
    if (v12)
    {
      if ((unint64_t)v12 >> 61 || (uint64_t v11 = (char *)malloc_type_malloc(8 * v12, 0x1E76AA36uLL)) == 0)
      {
LABEL_134:
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        uint64_t v114 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v114, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v10 = v117;
    void *v117 = v11;
  }
  v10[1] = v12;
  if (v12 >= 0) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v12 + 1;
  }
  int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (v12 >= 2)
  {
    unint64_t v15 = 2;
    if (v14 > 2) {
      unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(v11, ((8 * v15 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    uint64_t v10 = v117;
  }
  uint64_t v16 = (void **)(v10 + 2);
  uint64_t v116 = (double *)(v10 + 11);
  if (v14 < v12) {
    bzero(&v11[16 * (v13 >> 1)], 8 * v12 - 16 * (v13 >> 1));
  }
  *uint64_t v116 = 0.0;
  if (*a1[1])
  {
    uint64_t v17 = *(void *)(v6 + 848);
    if (v17 && 0x7FFFFFFFFFFFFFFFLL / v17 < v17) {
      goto LABEL_134;
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v16, v17 * v17, v17, *(void *)(v6 + 848));
    int64_t v19 = v16[1];
    uint64_t v18 = v16[2];
    int64_t v20 = (char *)*v16;
    uint64_t v21 = (void)v18 * (void)v19;
    if ((uint64_t)((void)v18 * (void)v19) >= 0) {
      uint64_t v22 = (void)v18 * (void)v19;
    }
    else {
      uint64_t v22 = v21 + 1;
    }
    int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v21 >= 2)
    {
      unint64_t v24 = 2;
      if (v23 > 2) {
        unint64_t v24 = v22 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(*v16, ((8 * v24 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v23 < v21) {
      bzero(&v20[16 * (v22 >> 1)], 8 * v21 - 16 * (v22 >> 1));
    }
  }
  turi::ml_data::get_iterator((turi::ml_data *)(v6 + 384), a2, a3, (uint64_t)v132);
  if (v138 != v137)
  {
    uint64_t v25 = (double **)(v117 + 5);
    uint64_t v26 = (void **)(v117 + 8);
    char v120 = (long double **)(v117 - 2);
    unint64_t v115 = a1;
    do
    {
      uint64_t v28 = v140;
      uint64_t v27 = v141;
      if (v141) {
        atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v119 = v27;
      *(void *)&long long v147 = 0;
      if (v144)
      {
        uint64_t v122 = *(void *)(v28 + 56);
        if (v122)
        {
          uint64_t v29 = 0;
          uint64_t v30 = *(void *)(v28 + 96) + 8 * v142 + 8 * (*(unsigned char *)(v28 + 18) == 0);
          uint64_t v121 = v28;
          do
          {
            uint64_t v123 = v29;
            uint64_t v31 = *(void *)(*(void *)(v28 + 72) + 16 * v29);
            unint64_t v32 = *(void *)(v31 + 64);
            uint64_t v33 = *(void *)(v31 + 104);
            switch(*(_DWORD *)(v31 + 24))
            {
              case 0:
                double v34 = *(double *)v30;
                v30 += 8;
                double v35 = v34;
                if (v32)
                {
                  if (!*(unsigned char *)(v6 + 360))
                  {
                    *(void *)BOOL v155 = 0;
                    double v55 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, (int)v33, v155);
                    goto LABEL_75;
                  }
                  double v36 = *(double *)(*(void *)(v6 + 368) + 8 * v33);
                  *(void *)BOOL v155 = 0;
                  *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, (int)v33, v155) = v35 * v36;
                }
                break;
              case 1:
                double v53 = *(double *)v30;
                v30 += 8;
                double v52 = v53;
                if (*(void *)&v53 < v32)
                {
                  uint64_t v54 = *(void *)&v52 + v33;
                  if (*(unsigned char *)(v6 + 360))
                  {
                    double v35 = *(double *)(*(void *)(v6 + 368) + 8 * v54);
                    *(void *)BOOL v155 = 0;
                    double v55 = (double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, (int)v54, v155);
LABEL_75:
                    *double v55 = v35;
                  }
                  else
                  {
                    *(void *)BOOL v155 = 0;
                    *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, (int)v54, v155) = 0x3FF0000000000000;
                  }
                }
                break;
              case 2:
                uint64_t v37 = *(void *)(v31 + 72);
                if (!v37) {
                  goto LABEL_56;
                }
                uint64_t v38 = 0;
                unint64_t v39 = 0;
                uint64_t v40 = v33 << 32;
                uint64_t v41 = 8 * v33;
                do
                {
                  if (v39 < v32)
                  {
                    double v42 = *(double *)(v30 + 8 * v39);
                    uint64_t v43 = v40 >> 32;
                    if (*(unsigned char *)(v6 + 360))
                    {
                      double v44 = *(double *)(*(void *)(v6 + 368) + v41 + 8 * v39);
                      *(void *)BOOL v155 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, v43, v155) = v42 * v44;
                    }
                    else
                    {
                      *(void *)BOOL v155 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, v43, v155) = v42;
                    }
                  }
                  ++v39;
                  v40 += 0x100000000;
                  v38 -= 8;
                }
                while (v37 != v39);
                goto LABEL_55;
              case 3:
                double v57 = *(double *)v30;
                v30 += 8;
                for (double i = v57; i != 0.0; --*(void *)&i)
                {
                  if (*(void *)v30 < v32)
                  {
                    uint64_t v58 = *(void *)v30 + v33;
                    if (*(unsigned char *)(v6 + 360))
                    {
                      uint64_t v59 = *(void *)(*(void *)(v6 + 368) + 8 * v58);
                      *(void *)BOOL v155 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, (int)v58, v155) = v59;
                    }
                    else
                    {
                      *(void *)BOOL v155 = 0;
                      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, (int)v58, v155) = 0x3FF0000000000000;
                    }
                  }
                  v30 += 8;
                }
                break;
              case 4:
                double v61 = *(double *)v30;
                v30 += 8;
                for (double j = v61; j != 0.0; --*(void *)&j)
                {
                  if (*(void *)v30 < v32)
                  {
                    double v62 = *(double *)(v30 + 8);
                    uint64_t v63 = *(void *)v30 + v33;
                    if (*(unsigned char *)(v6 + 360))
                    {
                      double v64 = *(double *)(*(void *)(v6 + 368) + 8 * v63);
                      *(void *)BOOL v155 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, (int)v63, v155) = v62 * v64;
                    }
                    else
                    {
                      *(void *)BOOL v155 = 0;
                      *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, (int)v63, v155) = v62;
                    }
                  }
                  v30 += 16;
                }
                break;
              case 7:
                uint64_t v45 = *(void *)(v31 + 72);
                if (v45)
                {
                  uint64_t v38 = 0;
                  unint64_t v46 = 0;
                  uint64_t v47 = v33 << 32;
                  uint64_t v48 = 8 * v33;
                  do
                  {
                    if (v46 < v32)
                    {
                      double v49 = *(double *)(v30 + 8 * v46);
                      uint64_t v50 = v47 >> 32;
                      if (*(unsigned char *)(v6 + 360))
                      {
                        double v51 = *(double *)(*(void *)(v6 + 368) + v48 + 8 * v46);
                        *(void *)BOOL v155 = 0;
                        *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, v50, v155) = v49 * v51;
                      }
                      else
                      {
                        *(void *)BOOL v155 = 0;
                        *(double *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, v50, v155) = v49;
                      }
                    }
                    ++v46;
                    v47 += 0x100000000;
                    v38 -= 8;
                  }
                  while (v45 != v46);
LABEL_55:
                  v30 -= v38;
                  uint64_t v26 = (void **)(v117 + 8);
                }
LABEL_56:
                uint64_t v28 = v121;
                break;
              default:
                break;
            }
            uint64_t v29 = v123 + 1;
          }
          while (v123 + 1 != v122);
        }
      }
      if (v119) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v119);
      }
      uint64_t v65 = *(_DWORD *)(v6 + 856) - 1;
      *(void *)BOOL v155 = 0;
      *(void *)Eigen::internal::CompressedStorage<double,int>::atWithInsertion((uint64_t *)&v146, v65, v155) = 0x3FF0000000000000;
      if (*(unsigned char *)(v140 + 16)) {
        BOOL v66 = *(unsigned char *)(v140 + 17) == 0;
      }
      else {
        BOOL v66 = 1;
      }
      if (v66)
      {
        uint64_t v67 = 0;
      }
      else
      {
        double v68 = (void *)(v140 + 24);
        if (!*(unsigned char *)(v140 + 18)) {
          double v68 = (void *)(*(void *)(v140 + 96) + 8 * v142);
        }
        uint64_t v67 = *(void *)(*(void *)(v140 + 96) + 8 * v142 + 8 * *v68 - 8);
      }
      double v69 = v115[2];
      uint64_t v70 = *((void *)v69 + 2);
      *(_OWORD *)BOOL v155 = *(_OWORD *)v69;
      *(void *)&v155[16] = v70;
      *((void *)&v156 + 1) = &v145;
      Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(v120, (long long *)v155);
      double v71 = *v120;
      if (v67) {
        double v72 = v71[v67 - 1];
      }
      else {
        double v72 = 0.0;
      }
      uint64_t v73 = *(v117 - 1);
      if (v73 >= 1)
      {
        uint64_t v74 = *v120;
        uint64_t v75 = *(v117 - 1);
        do
        {
          long double *v74 = exp(*v74);
          ++v74;
          --v75;
        }
        while (v75);
      }
      if (v73)
      {
        *(void *)BOOL v155 = v71;
        uint64_t v76 = (double **)(v117 - 2);
        *(void *)&v155[16] = v117 - 2;
        double v77 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::Matrix<double,-1,1,0,-1,1>>,3,0>::run((float64x2_t **)v155);
        double v78 = *v120;
        uint64_t v79 = *(v117 - 1);
        if (v79 >= 0) {
          uint64_t v80 = *(v117 - 1);
        }
        else {
          uint64_t v80 = v79 + 1;
        }
        int64_t v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
        double v82 = 1.0 / (v77 + 1.0);
        if (v79 >= 2)
        {
          int64_t v83 = 0;
          uint64_t v84 = (float64x2_t *)*v120;
          do
          {
            float64x2_t *v84 = vmulq_n_f64(*v84, v82);
            ++v84;
            v83 += 2;
          }
          while (v83 < v81);
        }
        BOOL v85 = v79 <= v81;
        uint64_t v86 = v79 - v81;
        if (!v85)
        {
          double v87 = &v78[2 * (v80 >> 1)];
          do
          {
            *double v87 = v82 * *v87;
            ++v87;
            --v86;
          }
          while (v86);
        }
      }
      else
      {
        double v77 = 0.0;
        uint64_t v76 = (double **)(v117 - 2);
      }
      double v88 = log1p(v77);
      if (v67) {
        (*v76)[v67 - 1] = (*v76)[v67 - 1] + -1.0;
      }
      double v89 = *((double *)v76 + 1);
      BOOL v90 = *(void **)(*(void *)(v6 + 344) + 8 * v67);
      v124[0] = 0;
      double v125 = v89;
      uint64_t v126 = v148;
      uint64_t v127 = v90;
      LOBYTE(v128) = 0;
      uint64_t v129 = v76;
      uint64_t v130 = 0;
      uint64_t v131 = &v145;
      uint64_t v91 = *(char **)(v6 + 856);
      uint64_t v92 = *(void *)(v6 + 784) - 1;
      uint64_t v150 = (void *)*v117;
      uint64_t v151 = (char *)v92;
      char v152 = v91;
      v155[0] = 0;
      *(_OWORD *)&v155[8] = 0u;
      long long v156 = 0u;
      memset(v157, 0, 32);
      Eigen::internal::assign_sparse_to_sparse<Eigen::SparseMatrix<double,1,long>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,0> const>>((uint64_t)v155, (uint64_t)v124);
      Eigen::internal::Assignment<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1>,0,Eigen::Stride<0,0>>,Eigen::SparseMatrix<double,1,long>,Eigen::internal::add_assign_op<double,double>,Eigen::internal::Sparse2Dense,void>::run((uint64_t *)&v150, v155);
      free((void *)v156);
      free(*((void **)&v156 + 1));
      Eigen::internal::CompressedStorage<double,long>::~CompressedStorage(v157);
      *uint64_t v116 = *v116 + *(double *)(*(void *)(v6 + 344) + 8 * v67) * (v88 - v72);
      if (*v115[1])
      {
        *(void *)&v155[8] = v76[1];
        *(void *)&long long v156 = 0xBFF0000000000000;
        *((void *)&v156 + 1) = v76;
        v157[1] = (uint64_t)v76;
        Eigen::internal::call_assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const> const,Eigen::Matrix<double,-1,1,0,-1,1> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,0>,Eigen::internal::assign_op<double,double>>(v25, (uint64_t)v155);
        uint64_t v94 = v117[6];
        uint64_t v93 = v117[7];
        if (v93 >= v94) {
          uint64_t v93 = v117[6];
        }
        if (v93 >= 1)
        {
          double v95 = *v76;
          uint64_t v96 = *v25;
          uint64_t v97 = 8 * v94 + 8;
          do
          {
            double v98 = *v95++;
            *uint64_t v96 = v98 + *v96;
            uint64_t v96 = (double *)((char *)v96 + v97);
            --v93;
          }
          while (v93);
        }
        v155[0] = 0;
        *(void *)&v155[8] = &v145;
        *(void *)&v155[16] = v118 & 0xFFFFFFFFFFFFFF00;
        v118 &= 0xFFFFFFFFFFFFFF00;
        *(void *)&long long v156 = &v145;
        if (v148 && 0x7FFFFFFFFFFFFFFFLL / v148 < v148)
        {
          unint64_t v111 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          double v112 = std::bad_alloc::bad_alloc(v111);
          __cxa_throw(v112, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
        }
        Eigen::DenseStorage<double,-1,-1,-1,0>::resize(v26, v148 * v148, v148, v148);
        Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,2>,Eigen::internal::assign_op<double,double>,Eigen::internal::Sparse2Dense,void>::run(v26, (uint64_t)v155);
        if (*(void *)(v6 + 784) != 1)
        {
          unint64_t v99 = 0;
          do
          {
            unint64_t v100 = 0;
            do
            {
              double v101 = *(double *)(*(void *)(v6 + 344) + 8 * v67) * *(double *)(v117[5] + 8 * (v99 + v117[6] * v100));
              uint64_t v102 = *(void *)(v6 + 856);
              uint64_t v103 = (uint64_t)v16[1];
              *(void *)BOOL v155 = (char *)*v16 + 8 * v102 * v99 + 8 * v103 * v102 * v100;
              *(void *)&v155[8] = v102;
              *(void *)&v155[16] = v102;
              *(void *)&long long v156 = v16;
              *((void *)&v156 + 1) = v102 * v99;
              v157[0] = v102 * v100;
              v157[1] = v103;
              double v125 = v101;
              uint64_t v127 = *v26;
              BOOL v128 = v26[1];
              v154[0] = *(void *)v155;
              v154[2] = v103;
              uint64_t v150 = v154;
              uint64_t v151 = v124;
              char v152 = &v149;
              uint64_t v153 = v155;
              Eigen::internal::dense_assignment_loop<Eigen::internal::generic_dense_assignment_kernel<Eigen::internal::evaluator<Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,-1,false>>,Eigen::internal::evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Matrix<double,-1,-1,0,-1,-1> const>>,Eigen::internal::add_assign_op<double,double>,0>,4,0>::run(&v150);
              ++v100;
              unint64_t v104 = *(void *)(v6 + 784) - 1;
            }
            while (v100 < v104);
            ++v99;
          }
          while (v99 < v104);
        }
      }
      if (v144 | v134)
      {
        uint64_t v105 = (uint64_t *)(*(void *)(v140 + 96) + 8 * v142);
        if (v135) {
          uint64_t v105 = &v136;
        }
        v142 += *v105;
      }
      uint64_t v106 = v138 + 1;
      uint64_t v107 = v137;
      uint64_t v108 = ++v138 - v133 * v139;
      uint64_t v143 = v108;
      if (v108 == v133 && v106 != v137)
      {
        turi::ml_data_iterator::load_next_block((turi::ml_data_iterator *)v132);
        uint64_t v107 = v137;
        uint64_t v106 = v138;
      }
    }
    while (v106 != v107);
  }
  turi::ml_data_iterator::~ml_data_iterator((turi::ml_data_iterator *)v132);
  return Eigen::internal::CompressedStorage<double,int>::~CompressedStorage((uint64_t *)&v146);
}

void sub_2242ACA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t *a22)
{
}

void Eigen::internal::call_assignment<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Product<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>>,Eigen::SparseVector<double,0,int>,0>,Eigen::internal::assign_op<double,double>>(void *a1, long long *a2)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v26, v4, 1);
    uint64_t v5 = (char *)v26;
    uint64_t v6 = v27;
    uint64_t v7 = *((void *)a2 + 4);
    if (v27 >= 0) {
      uint64_t v8 = v27;
    }
    else {
      uint64_t v8 = v27 + 1;
    }
    int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v27 >= 2)
    {
      unint64_t v10 = 2;
      if (v9 > 2) {
        unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
      }
      bzero(v26, ((8 * v10 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v9 < v6) {
      bzero(&v5[16 * (v8 >> 1)], 8 * v6 - 16 * (v8 >> 1));
    }
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 4);
  }
  uint64_t v28 = 0x3FF0000000000000;
  unint64_t v32 = &v26;
  v31[0] = 0;
  v31[1] = v7;
  long long v29 = *a2;
  uint64_t v30 = *((void *)a2 + 2);
  Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run((uint64_t)v31, &v29, (uint64_t **)&v32, (double *)&v28);
  uint64_t v12 = (long long *)v26;
  uint64_t v11 = v27;
  if (a1[1] != v27)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a1, v27, 1);
    uint64_t v11 = a1[1];
  }
  uint64_t v13 = (_OWORD *)*a1;
  if (v11 >= 0) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = v11 + 1;
  }
  int64_t v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (v11 >= 2)
  {
    int64_t v16 = 0;
    uint64_t v17 = (_OWORD *)*a1;
    uint64_t v18 = v12;
    do
    {
      long long v19 = *v18++;
      *v17++ = v19;
      v16 += 2;
    }
    while (v16 < v15);
  }
  BOOL v20 = __OFSUB__(v11, v15);
  uint64_t v21 = v11 - v15;
  if (!((v21 < 0) ^ v20 | (v21 == 0)))
  {
    uint64_t v22 = v14 >> 1;
    int64_t v23 = (uint64_t *)&v12[v14 >> 1];
    unint64_t v24 = &v13[v22];
    do
    {
      uint64_t v25 = *v23++;
      *v24++ = v25;
      --v21;
    }
    while (v21);
  }
  free(v26);
}

void sub_2242ACCA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::run(uint64_t a1, void *a2, uint64_t **a3, double *a4)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 8);
  if ((uint64_t)a2[1] >= 1)
  {
    uint64_t v7 = 0;
    do
      Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow((uint64_t)v8, a2, a3, a4, 0, v7++);
    while (v7 < a2[1]);
  }
}

double Eigen::internal::sparse_time_dense_product_impl<Eigen::Transpose<Eigen::SparseVector<double,0,int> const>,Eigen::Transpose<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1> const,0,Eigen::Stride<0,0>> const>,Eigen::Transpose<Eigen::Matrix<double,-1,1,0,-1,1>>,double,1,true>::processRow(uint64_t a1, void *a2, uint64_t **a3, double *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = v6[3];
  if (v7 < 1)
  {
    double v10 = 0.0;
  }
  else
  {
    uint64_t v8 = (double *)v6[1];
    uint64_t v9 = (int *)v6[2];
    double v10 = 0.0;
    do
    {
      double v11 = *v8++;
      double v12 = v11;
      uint64_t v13 = *v9++;
      double v10 = v10 + v12 * *(double *)(*a2 + 8 * (a2[2] * a6 + v13));
      --v7;
    }
    while (v7);
  }
  uint64_t v14 = **a3;
  double result = *(double *)(v14 + 8 * a6) + *a4 * v10;
  *(double *)(v14 + 8 * a6) = result;
  return result;
}

uint64_t *Eigen::internal::assign_sparse_to_sparse<Eigen::SparseMatrix<double,1,long>,Eigen::CwiseBinaryOp<Eigen::internal::scalar_product_op<double,double>,Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<double>,Eigen::Matrix<double,-1,-1,0,-1,-1> const> const,Eigen::Product<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,0> const>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a2 + 40);
  double v5 = *(double *)(a2 + 24);
  uint64_t v6 = *(void **)(a2 + 56);
  uint64_t v7 = v4[1];
  uint64_t v57 = *v4;
  uint64_t v58 = v7;
  if (*(unsigned char *)a2)
  {
    Eigen::SparseMatrix<double,1,long>::resize(a1, v7, v6[5]);
    *(void *)(a1 + 56) = 0;
    bzero(*(void **)(a1 + 24), 8 * *(void *)(a1 + 8) + 8);
    uint64_t v8 = *(void **)(a1 + 32);
    if (v8) {
      bzero(v8, 8 * *(void *)(a1 + 8));
    }
    uint64_t v9 = *(void *)(*(void *)(a2 + 40) + 8);
    if (v9 <= *(void *)(*(void *)(a2 + 56) + 40)) {
      uint64_t v9 = *(void *)(*(void *)(a2 + 56) + 40);
    }
    double result = (uint64_t *)Eigen::internal::CompressedStorage<double,long>::reserve(a1 + 40, 2 * v9);
    if (v7 >= 1)
    {
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(a1 + 24);
        uint64_t v14 = *(void *)(v13 + 8 * v11++);
        *(void *)(v13 + 8 * v11) = v14;
        uint64_t v15 = v6[3];
        if (v15 >= 1)
        {
          int64_t v16 = (double *)v6[1];
          uint64_t v17 = (int *)v6[2];
          double v18 = v5 * *(double *)(v57 + 8 * v12);
          do
          {
            double v19 = *v16++;
            double v20 = v19;
            uint64_t v21 = *v17++;
            uint64_t v22 = *(void *)(a1 + 24);
            uint64_t v23 = *(void *)(v22 + 8 * v11);
            double v24 = v18 * v20;
            *(void *)(v22 + 8 * v11) = v23 + 1;
            uint64_t v25 = *(void *)(a1 + 56);
            double result = (uint64_t *)Eigen::internal::CompressedStorage<double,long>::resize(a1 + 40, v25 + 1, 1.0);
            uint64_t v26 = *(void *)(a1 + 40);
            *(void *)(v26 + 8 * v25) = 0;
            *(void *)(*(void *)(a1 + 48) + 8 * v25) = v21;
            *(double *)(v26 + 8 * v23) = v24;
            --v15;
          }
          while (v15);
        }
      }
      while (v11 != v7);
    }
    if (!*(void *)(a1 + 32))
    {
      uint64_t v27 = *(void *)(a1 + 8);
      if ((v27 & 0x8000000000000000) == 0)
      {
        uint64_t v28 = *(void *)(a1 + 56);
        uint64_t v29 = *(void *)(a1 + 24);
        uint64_t v30 = *(void *)(a1 + 8);
        while (!*(void *)(v29 + 8 * v30))
        {
          BOOL v31 = v30-- <= 0;
          if (v31)
          {
            uint64_t v30 = -1;
            break;
          }
        }
        if (v30 < v27)
        {
          do
            *(void *)(v29 + 8 + 8 * v30++) = v28;
          while (v30 < *(void *)(a1 + 8));
        }
      }
    }
  }
  else
  {
    uint64_t v32 = v6[5];
    v59[0] = 0;
    long long v60 = 0u;
    *(_OWORD *)double v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    Eigen::SparseMatrix<double,1,long>::resize((uint64_t)v59, v7, v32);
    uint64_t v33 = *(void *)(*(void *)(a2 + 40) + 8);
    if (v33 <= *(void *)(*(void *)(a2 + 56) + 40)) {
      uint64_t v33 = *(void *)(*(void *)(a2 + 56) + 40);
    }
    Eigen::internal::CompressedStorage<double,long>::reserve((uint64_t)&v62, 2 * v33);
    if (v7 >= 1)
    {
      uint64_t v34 = 0;
      do
      {
        uint64_t v35 = v34;
        uint64_t v36 = *((void *)v61[0] + v34++);
        *((void *)v61[0] + v34) = v36;
        uint64_t v37 = v6[3];
        if (v37 >= 1)
        {
          uint64_t v38 = (double *)v6[1];
          unint64_t v39 = (int *)v6[2];
          double v40 = v5 * *(double *)(v57 + 8 * v35);
          do
          {
            uint64_t v41 = *v39++;
            uint64_t v42 = *((void *)v61[0] + v34);
            double v43 = *v38;
            *((void *)v61[0] + v34) = v42 + 1;
            uint64_t v44 = v63;
            Eigen::internal::CompressedStorage<double,long>::resize((uint64_t)&v62, v63 + 1, 1.0);
            uint64_t v45 = v62;
            *(void *)(v62 + 8 * v44) = 0;
            *(void *)(*((void *)&v62 + 1) + 8 * v44) = v41;
            *(double *)(v45 + 8 * v42) = v40 * v43;
            ++v38;
            --v37;
          }
          while (v37);
        }
      }
      while (v34 != v58);
    }
    unint64_t v46 = v61[1];
    uint64_t v47 = v60;
    if (!v61[1] && (v60 & 0x8000000000000000) == 0)
    {
      uint64_t v54 = v63;
      uint64_t v55 = v60;
      while (!*((void *)v61[0] + v55))
      {
        BOOL v31 = v55-- <= 0;
        if (v31)
        {
          uint64_t v55 = -1;
          break;
        }
      }
      if (v55 < (uint64_t)v60)
      {
        uint64_t v56 = (char *)v61[0] + 8;
        do
        {
          *(void *)&v56[8 * v55] = v54;
          uint64_t v47 = v60;
          ++v55;
        }
        while (v55 < (uint64_t)v60);
      }
    }
    v59[0] = 1;
    uint64_t v49 = *((void *)&v60 + 1);
    uint64_t v48 = v61[0];
    long long v50 = *(_OWORD *)(a1 + 8);
    *(void *)(a1 + 8) = v47;
    *(void *)(a1 + 16) = v49;
    long long v51 = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 24) = v48;
    *(void *)(a1 + 32) = v46;
    long long v60 = v50;
    *(_OWORD *)double v61 = v51;
    long long v52 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v62;
    long long v53 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v63;
    long long v62 = v52;
    long long v63 = v53;
    free((void *)v51);
    free(v61[1]);
    return Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v62);
  }
  return result;
}

void sub_2242AD134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Eigen::SparseMatrix<double,0,long>::~SparseMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void Eigen::SparseMatrix<double,1,long>::resize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 56) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5 != a2 || v5 == 0)
  {
    free(*(void **)(a1 + 24));
    uint64_t v7 = malloc_type_malloc(8 * v3 + 8, 0x100004000313F17uLL);
    *(void *)(a1 + 24) = v7;
    if (!v7)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    *(void *)(a1 + 8) = v3;
  }
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8)
  {
    free(v8);
    *(void *)(a1 + 32) = 0;
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v9 = *(void **)(a1 + 24);
  bzero(v9, 8 * v3 + 8);
}

uint64_t Eigen::internal::CompressedStorage<double,long>::reserve(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16) + a2 > *(void *)(result + 24)) {
    operator new[]();
  }
  return result;
}

void sub_2242AD35C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t *Eigen::internal::Assignment<Eigen::Map<Eigen::Matrix<double,-1,-1,1,-1,-1>,0,Eigen::Stride<0,0>>,Eigen::SparseMatrix<double,1,long>,Eigen::internal::add_assign_op<double,double>,Eigen::internal::Sparse2Dense,void>::run(uint64_t *result, void *a2)
{
  uint64_t v2 = a2[1];
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *result;
    uint64_t v5 = result[2];
    uint64_t v6 = a2[5];
    uint64_t v7 = a2[6];
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[4];
    do
    {
      uint64_t v10 = *(void *)(v8 + 8 * v3);
      if (v9) {
        uint64_t v11 = *(void *)(v9 + 8 * v3) + v10;
      }
      else {
        uint64_t v11 = *(void *)(v8 + 8 * v3 + 8);
      }
      BOOL v12 = v11 <= v10;
      uint64_t v13 = v11 - v10;
      if (!v12)
      {
        double result = (uint64_t *)(v7 + 8 * v10);
        uint64_t v14 = (double *)(v6 + 8 * v10);
        do
        {
          uint64_t v15 = *result++;
          uint64_t v16 = v15 + v3 * v5;
          double v17 = *v14++;
          *(double *)(v4 + 8 * v16) = v17 + *(double *)(v4 + 8 * v16);
          --v13;
        }
        while (v13);
      }
      ++v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t *Eigen::internal::Assignment<Eigen::Matrix<double,-1,-1,0,-1,-1>,Eigen::Product<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,2>,Eigen::internal::assign_op<double,double>,Eigen::internal::Sparse2Dense,void>::run(void **a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 40);
  if (a1[1] != (void *)v5 || a1[2] != (void *)v6)
  {
    if (v5) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8 && 0x7FFFFFFFFFFFFFFFLL / v6 < v5)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a1, v6 * v5, v5, v6);
    uint64_t v4 = *(void **)(a2 + 8);
  }
  return Eigen::internal::generic_product_impl<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,Eigen::SparseShape,Eigen::SparseShape,5>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(a1, v4, (long long *)(a2 + 16));
}

uint64_t *Eigen::internal::generic_product_impl<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,Eigen::SparseShape,Eigen::SparseShape,5>::evalTo<Eigen::Matrix<double,-1,-1,0,-1,-1>>(void **a1, void *a2, long long *a3)
{
  uint64_t v6 = (char *)a1[2];
  uint64_t v7 = (char *)*a1;
  uint64_t v8 = (void)v6 * (void)a1[1];
  if (v8 >= 0) {
    uint64_t v9 = (void)v6 * (void)a1[1];
  }
  else {
    uint64_t v9 = v8 + 1;
  }
  int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
  if (v8 >= 2)
  {
    unint64_t v11 = 2;
    if (v10 > 2) {
      unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*a1, ((8 * v11 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v10 < v8) {
    bzero(&v7[16 * (v9 >> 1)], 8 * v8 - 16 * (v9 >> 1));
  }
  long long v13 = *a3;
  return Eigen::internal::sparse_sparse_to_dense_product_selector<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,Eigen::Matrix<double,-1,-1,0,-1,-1>,0,1>::run(a2, (uint64_t)&v13, (uint64_t *)a1);
}

uint64_t *Eigen::internal::sparse_sparse_to_dense_product_selector<Eigen::SparseVector<double,0,int>,Eigen::Transpose<Eigen::SparseVector<double,0,int>>,Eigen::Matrix<double,-1,-1,0,-1,-1>,0,1>::run(void *a1, uint64_t a2, uint64_t *a3)
{
  v25[0] = 0;
  long long v26 = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  memset(v28, 0, sizeof(v28));
  Eigen::SparseMatrix<double,0,long>::operator=<Eigen::Transpose<Eigen::SparseVector<double,0,int>>>((uint64_t)v25, a2);
  uint64_t v5 = v26;
  if ((uint64_t)v26 <= 0)
  {
    uint64_t v9 = v27[0];
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = v27[1];
    uint64_t v7 = *(void *)&v28[0];
    uint64_t v9 = v27[0];
    int64_t v10 = (double *)a1[1];
    unint64_t v11 = (int *)a1[2];
    uint64_t v12 = a1[3];
    do
    {
      uint64_t v13 = v9[v6];
      if (v8) {
        uint64_t v14 = v8[v6] + v13;
      }
      else {
        uint64_t v14 = v9[v6 + 1];
      }
      if (v13 < v14)
      {
        uint64_t v15 = *a3;
        uint64_t v16 = a3[1] * v6;
        do
        {
          if (v12 >= 1)
          {
            double v17 = *(double *)(v7 + 8 * v13);
            double v18 = v11;
            double v19 = v10;
            uint64_t v20 = v12;
            do
            {
              uint64_t v22 = *v18++;
              uint64_t v21 = v22;
              double v23 = *v19++;
              *(double *)(v15 + 8 * (v16 + v21)) = *(double *)(v15 + 8 * (v16 + v21)) + v23 * v17;
              --v20;
            }
            while (v20);
          }
          ++v13;
        }
        while (v13 != v14);
      }
      ++v6;
    }
    while (v6 != v5);
  }
  free(v9);
  free(v27[1]);
  return Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)v28);
}

void sub_2242AD67C(_Unwind_Exception *a1)
{
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)(v1 + 40));
  _Unwind_Resume(a1);
}

uint64_t Eigen::SparseMatrix<double,0,long>::operator=<Eigen::Transpose<Eigen::SparseVector<double,0,int>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = v3[5];
  v31[0] = 0;
  long long v32 = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  Eigen::SparseMatrix<double,0,long>::resize((uint64_t)v31, 1, v4);
  uint64_t v5 = v33[0];
  if ((uint64_t)v32 >= 1) {
    bzero(v33[0], 8 * v32);
  }
  uint64_t v6 = v3[3];
  if (v6 >= 1)
  {
    uint64_t v7 = (int *)v3[2];
    do
    {
      uint64_t v8 = *v7++;
      ++v5[v8];
      --v6;
    }
    while (v6);
  }
  if ((void)v32)
  {
    if ((unint64_t)v32 >> 61 || (uint64_t v9 = malloc_type_malloc(8 * v32, 0x1E76AA36uLL), (v10 = v9) == 0))
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v30 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v30, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    uint64_t v11 = v32;
    uint64_t v12 = v33[0];
    if ((uint64_t)v32 < 1)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = v12[v13];
        v12[v13] = v14;
        v9[v13] = v14;
        v14 += v15;
        ++v13;
        uint64_t v11 = v32;
      }
      while (v13 < (uint64_t)v32);
    }
  }
  else
  {
    int64_t v10 = 0;
    uint64_t v14 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v33[0];
  }
  v12[v11] = v14;
  Eigen::internal::CompressedStorage<double,long>::resize((uint64_t)&v34, v14, 0.0);
  uint64_t v16 = *((void *)&v34 + 1);
  uint64_t v17 = v34;
  uint64_t v18 = v3[3];
  if (v18 >= 1)
  {
    double v19 = (uint64_t *)v3[1];
    uint64_t v20 = (int *)v3[2];
    do
    {
      uint64_t v21 = *v20++;
      uint64_t v22 = v10[v21];
      v10[v21] = v22 + 1;
      *(void *)(v16 + 8 * v22) = 0;
      uint64_t v23 = *v19++;
      *(void *)(v17 + 8 * v22) = v23;
      --v18;
    }
    while (v18);
    uint64_t v17 = v34;
  }
  long long v24 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 8) = v32;
  long long v25 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v33;
  long long v32 = v24;
  *(_OWORD *)uint64_t v33 = v25;
  long long v26 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 40) = v17;
  *(void *)(a1 + 48) = v16;
  long long v27 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 56) = v35;
  long long v34 = v26;
  long long v35 = v27;
  free(v10);
  free(v33[0]);
  free(v33[1]);
  Eigen::internal::CompressedStorage<double,long>::~CompressedStorage((uint64_t *)&v34);
  return a1;
}

void sub_2242AD880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  free(v10);
  Eigen::SparseMatrix<double,0,long>::~SparseMatrix((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void *turi::archive_detail::eigen_serialize_impl<turi::oarchive,Eigen::Matrix,double,-1,-1,1,-1,-1>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v29 = *(void *)(a2 + 16);
  uint64_t v30 = v4;
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v14 = 2 * v5 + 16;
      *(void *)(a1 + 40) = v14;
      uint64_t v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        uint64_t v6 = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          uint64_t v6 = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &v6[v14];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      uint64_t v6 = *(char **)(a1 + 24);
    }
    *(void *)&v6[*(void *)(a1 + 32)] = v4;
    *(void *)(a1 + 32) += 8;
  }
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v7)
    {
      size_t v19 = 2 * v7 + 16;
      *(void *)(a1 + 40) = v19;
      uint64_t v20 = *(char ***)(a1 + 16);
      if (v20)
      {
        uint64_t v8 = *v20;
        size_t v21 = v20[1] - *v20;
        BOOL v22 = v19 >= v21;
        std::vector<char>::size_type v23 = v19 - v21;
        if (v23 != 0 && v22)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v23);
          uint64_t v8 = **(char ***)(a1 + 16);
        }
        else if (!v22)
        {
          v20[1] = &v8[v19];
        }
      }
      else
      {
        uint64_t v8 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v19, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v8;
    }
    else
    {
      uint64_t v8 = *(char **)(a1 + 24);
    }
    *(void *)&v8[*(void *)(a1 + 32)] = v29;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v9 = *(const void **)a2;
  size_t v10 = 8 * v30 * v29;
  if (*(void *)a1) {
    return (void *)std::ostream::write();
  }
  size_t v12 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + v10 > v12)
  {
    size_t v24 = 2 * (v12 + v10);
    *(void *)(a1 + 40) = v24;
    long long v25 = *(char ***)(a1 + 16);
    if (v25)
    {
      uint64_t v13 = *v25;
      size_t v26 = v25[1] - *v25;
      BOOL v27 = v24 >= v26;
      std::vector<char>::size_type v28 = v24 - v26;
      if (v28 != 0 && v27)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v28);
        uint64_t v13 = **(char ***)(a1 + 16);
      }
      else if (!v27)
      {
        v25[1] = &v13[v24];
      }
    }
    else
    {
      uint64_t v13 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v24, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = v13;
  }
  else
  {
    uint64_t v13 = *(char **)(a1 + 24);
  }
  double result = memcpy(&v13[*(void *)(a1 + 32)], v9, v10);
  *(void *)(a1 + 32) += v10;
  return result;
}

void *turi::archive_detail::eigen_deserialize_impl<turi::iarchive,Eigen::Matrix,double,-1,-1,1,-1,-1>(uint64_t a1, void **a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    uint64_t v4 = *(void *)(a1 + 16);
    if (!v4)
    {
      std::istream::read();
      uint64_t v7 = 0;
      goto LABEL_5;
    }
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v4 + v6);
  uint64_t v12 = v7;
  *(void *)(a1 + 24) = v6 + 8;
LABEL_5:
  if (v13 && v7 && 0x7FFFFFFFFFFFFFFFLL / v7 < v13)
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize(a2, v7 * v13, v13, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return (void *)std::istream::read();
  }
  double result = memcpy(*a2, (const void *)(v8 + *(void *)(a1 + 24)), 8 * v13 * v12);
  *(void *)(a1 + 24) += 8 * v13 * v12;
  return result;
}

uint64_t skip_input_data(uint64_t result, uint64_t a2)
{
  if (a2 >= 1)
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 40);
    unint64_t v5 = *(void *)(v4 + 8);
    if (v5 < a2)
    {
      do
      {
        v2 -= v5;
        double result = (*(uint64_t (**)(uint64_t))(v4 + 24))(v3);
        unint64_t v5 = *(void *)(v4 + 8);
      }
      while (v2 > v5);
    }
    *(void *)v4 += v2;
    *(void *)(v4 + 8) = v5 - v2;
  }
  return result;
}

void *jpeg_mem_src(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || !a3)
  {
    uint64_t v6 = *a1;
    *(_DWORD *)(v6 + 40) = 43;
    (*(void (**)(uint64_t *))v6)(a1);
  }
  double result = (void *)a1[5];
  if (!result)
  {
    double result = (void *)(*(uint64_t (**)(uint64_t *, void, uint64_t))a1[1])(a1, 0, 56);
    a1[5] = (uint64_t)result;
  }
  result[1] = a3;
  result[2] = init_mem_source;
  result[3] = fill_mem_input_buffer;
  result[4] = skip_input_data;
  result[5] = jpeg_resync_to_restart;
  result[6] = term_source;
  *double result = a2;
  return result;
}

uint64_t fill_mem_input_buffer(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(_DWORD *)(v2 + 40) = 123;
  (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(a1, 0xFFFFFFFFLL);
  uint64_t v3 = (void *)a1[5];
  void *v3 = &fill_mem_input_buffer_mybuffer;
  v3[1] = 2;
  return 1;
}

void jinit_d_coef_controller(uint64_t a1, int a2)
{
  uint64_t v4 = (uint64_t (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 592) = v4;
  *uint64_t v4 = start_input_pass;
  v4[2] = start_output_pass;
  v4[27] = 0;
  if (a2)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = (unsigned int *)(*(void *)(a1 + 304) + 28);
      do
      {
        unsigned int v7 = *(v6 - 4);
        if (*(_DWORD *)(a1 + 316)) {
          uint64_t v8 = 3 * v7;
        }
        else {
          uint64_t v8 = v7;
        }
        uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 40);
        uint64_t v10 = jround_up(*v6, (int)*(v6 - 5));
        uint64_t v11 = jround_up(v6[1], (int)*(v6 - 4));
        v4[v5++ + 17] = (uint64_t (*)(uint64_t))v9(a1, 1, 1, v10, v11, v8);
        v6 += 24;
      }
      while (v5 < *(int *)(a1 + 56));
    }
    v4[1] = consume_data;
    v4[3] = (uint64_t (*)(uint64_t))decompress_data;
    uint64_t v12 = (uint64_t (*)(uint64_t))(v4 + 17);
  }
  else
  {
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 1280);
    uint64_t v14 = 0;
    int64x2_t v15 = (int64x2_t)xmmword_2246C5F80;
    int64x2_t v16 = vdupq_n_s64((unint64_t)v13);
    int64x2_t v17 = vdupq_n_s64(2uLL);
    do
    {
      *(int64x2_t *)&v4[v14 + 7] = vaddq_s64(v16, vshlq_n_s64(v15, 7uLL));
      int64x2_t v15 = vaddq_s64(v15, v17);
      v14 += 2;
    }
    while (v14 != 10);
    if (!*(_DWORD *)(a1 + 568)) {
      bzero(v13, 0x500uLL);
    }
    uint64_t v12 = 0;
    v4[1] = (uint64_t (*)(uint64_t))dummy_consume_data;
    v4[3] = (uint64_t (*)(uint64_t))decompress_onepass;
  }
  v4[4] = v12;
}

uint64_t start_input_pass(uint64_t result)
{
  *(_DWORD *)(result + 176) = 0;
  return start_iMCU_row(result);
}

uint64_t start_output_pass(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void **)(result + 592);
  if (v2[4])
  {
    if (*(_DWORD *)(result + 104) && *(_DWORD *)(result + 316) && *(void *)(result + 192))
    {
      double result = v2[27];
      if (!result)
      {
        double result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v1 + 8))(v1, 1, 24 * *(int *)(v1 + 56));
        v2[27] = result;
      }
      if (*(int *)(v1 + 56) >= 1)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 0;
        int v5 = 0;
        uint64_t v6 = *(void *)(v1 + 304);
        while (1)
        {
          unsigned int v7 = *(_WORD **)(v6 + 80);
          if (!v7) {
            break;
          }
          if (!*v7) {
            break;
          }
          if (!v7[1]) {
            break;
          }
          if (!v7[8]) {
            break;
          }
          if (!v7[16]) {
            break;
          }
          if (!v7[9]) {
            break;
          }
          if (!v7[2]) {
            break;
          }
          uint64_t v8 = *(void *)(v1 + 192);
          if ((*(_DWORD *)(v8 + (v4 << 8)) & 0x80000000) != 0) {
            break;
          }
          uint64_t v9 = v8 + v3;
          for (uint64_t i = 4; i != 24; i += 4)
          {
            *(_DWORD *)(result + i) = *(_DWORD *)(v9 + i);
            if (*(_DWORD *)(v9 + i)) {
              int v5 = 1;
            }
          }
          result += 24;
          ++v4;
          v6 += 96;
          v3 += 256;
          if (v4 >= *(int *)(v1 + 56))
          {
            uint64_t v11 = decompress_smooth_data;
            if (v5) {
              goto LABEL_24;
            }
            break;
          }
        }
      }
    }
    uint64_t v11 = decompress_data;
LABEL_24:
    v2[3] = v11;
  }
  *(_DWORD *)(v1 + 184) = 0;
  return result;
}

uint64_t consume_data(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(_DWORD **)(a1 + 592);
  memset(v21, 0, sizeof(v21));
  if (*(int *)(a1 + 448) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      *((void *)v21 + v3) = (*(uint64_t (**)(uint64_t, void, void, void, uint64_t))(*(void *)(a1 + 8)
                                                                                                  + 64))(a1, *(void *)&v2[2 * *(int *)(*(void *)(a1 + 8 * v3 + 456) + 4) + 34], (*(_DWORD *)(*(void *)(a1 + 8 * v3 + 456) + 12) * *(_DWORD *)(a1 + 176)), *(unsigned int *)(*(void *)(a1 + 8 * v3 + 456) + 12), 1);
      ++v3;
    }
    while (v3 < *(int *)(a1 + 448));
  }
  int v4 = v2[12];
  uint64_t v5 = (int)v2[11];
  if ((int)v5 >= v4)
  {
LABEL_20:
    unsigned int v20 = *(_DWORD *)(a1 + 176) + 1;
    *(_DWORD *)(a1 + 176) = v20;
    if (v20 >= *(_DWORD *)(a1 + 432))
    {
      (*(void (**)(uint64_t))(*(void *)(a1 + 608) + 24))(a1);
      return 4;
    }
    else
    {
      start_iMCU_row(a1);
      return 3;
    }
  }
  else
  {
    unsigned int v6 = v2[10];
    unsigned int v7 = *(_DWORD *)(a1 + 488);
    while (v6 >= v7)
    {
LABEL_19:
      unsigned int v6 = 0;
      v2[10] = 0;
      if (++v5 >= v4) {
        goto LABEL_20;
      }
    }
    while (1)
    {
      uint64_t v8 = *(unsigned int *)(a1 + 448);
      if ((int)v8 >= 1)
      {
        uint64_t v9 = 0;
        int v10 = 0;
        do
        {
          uint64_t v11 = *(void *)(a1 + 8 * v9 + 456);
          uint64_t v12 = *(unsigned int *)(v11 + 60);
          if ((int)v12 >= 1)
          {
            uint64_t v13 = 0;
            int v14 = *(_DWORD *)(v11 + 56);
            uint64_t v15 = *((void *)v21 + v9);
            do
            {
              if (v14 >= 1)
              {
                unint64_t v16 = *(void *)(v15 + 8 * (v13 + v5)) + ((unint64_t)(v14 * v6) << 7);
                int64x2_t v17 = (unint64_t *)&v2[2 * v10 + 14];
                v10 += v14;
                int v18 = v14;
                do
                {
                  *v17++ = v16;
                  v16 += 128;
                  --v18;
                }
                while (v18);
              }
              ++v13;
            }
            while (v13 != v12);
          }
          ++v9;
        }
        while (v9 != v8);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)(a1 + 624) + 8))(a1, v2 + 14);
      if (!result) {
        break;
      }
      ++v6;
      unsigned int v7 = *(_DWORD *)(a1 + 488);
      if (v6 >= v7)
      {
        int v4 = v2[12];
        goto LABEL_19;
      }
    }
    v2[10] = v6;
    v2[11] = v5;
  }
  return result;
}

uint64_t decompress_data(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *(void *)(a1 + 592);
  unsigned int v18 = *(_DWORD *)(a1 + 432) - 1;
  while (1)
  {
    int v3 = *(_DWORD *)(a1 + 172);
    int v4 = *(_DWORD *)(a1 + 180);
    if (v3 >= v4 && (v3 != v4 || *(_DWORD *)(a1 + 176) > *(_DWORD *)(a1 + 184))) {
      break;
    }
    uint64_t result = (**(uint64_t (***)(uint64_t))(a1 + 608))(a1);
    if (!result) {
      return result;
    }
  }
  if (*(int *)(a1 + 56) >= 1)
  {
    uint64_t v20 = 0;
    unsigned int v6 = *(_DWORD **)(a1 + 304);
    do
    {
      if (v6[13])
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)(a1 + 8) + 64))(a1, *(void *)(v19 + 8 * v20 + 136), (v6[3] * *(_DWORD *)(a1 + 184)), v6[3], 0);
        if (*(_DWORD *)(a1 + 184) >= v18) {
          unint64_t v8 = v6[8] == (v6[8] / v6[3]) * (unint64_t)v6[3]
        }
             ? v6[3]
             : v6[8] - (v6[8] / v6[3]) * (unint64_t)v6[3];
        else {
          unint64_t v8 = v6[3];
        }
        if ((int)v8 >= 1)
        {
          uint64_t v9 = 0;
          int v10 = *(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 632) + 8 * v20 + 8);
          uint64_t v11 = *(void *)(a2 + 8 * v20);
          unsigned int v12 = v6[7];
          do
          {
            if (v12)
            {
              uint64_t v13 = 0;
              unsigned int v14 = 0;
              uint64_t v15 = *(void *)(v7 + 8 * v9);
              do
              {
                v10(a1, v6, v15, v11, v13);
                v15 += 128;
                uint64_t v13 = (v6[9] + v13);
                ++v14;
                unsigned int v12 = v6[7];
              }
              while (v14 < v12);
            }
            v11 += 8 * (int)v6[10];
            ++v9;
          }
          while (v9 != v8);
        }
      }
      v6 += 24;
      ++v20;
    }
    while (v20 < *(int *)(a1 + 56));
  }
  unsigned int v16 = *(_DWORD *)(a1 + 184) + 1;
  *(_DWORD *)(a1 + 184) = v16;
  if (v16 < *(_DWORD *)(a1 + 432)) {
    return 3;
  }
  else {
    return 4;
  }
}

uint64_t dummy_consume_data()
{
  return 0;
}

uint64_t decompress_onepass(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD **)(a1 + 592);
  unsigned int v4 = *(_DWORD *)(a1 + 432);
  int v5 = v3[12];
  int v34 = v3[11];
  if (v34 < v5)
  {
    unsigned int v32 = *(_DWORD *)(a1 + 488) - 1;
    unsigned int v37 = v4 - 1;
    unsigned int v6 = (void **)(v3 + 14);
    unsigned int v7 = v3[10];
    uint64_t v29 = *(_DWORD **)(a1 + 592);
    while (1)
    {
      if (v7 > v32) {
        goto LABEL_33;
      }
      do
      {
        if (*(_DWORD *)(a1 + 568)) {
          bzero(*v6, (uint64_t)*(int *)(a1 + 496) << 7);
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, void **))(*(void *)(a1 + 624) + 8))(a1, v6);
        if (!result)
        {
          v29[10] = v7;
          v29[11] = v34;
          return result;
        }
        int v9 = *(_DWORD *)(a1 + 448);
        if (v9 >= 1)
        {
          uint64_t v10 = 0;
          int v11 = 0;
          unsigned int v31 = v7;
          while (1)
          {
            unsigned int v12 = *(int **)(a1 + 8 * v10 + 456);
            if (v12[13]) {
              break;
            }
            v11 += v12[16];
LABEL_30:
            if (++v10 >= v9) {
              goto LABEL_31;
            }
          }
          int v13 = v12[15];
          if (v13 < 1) {
            goto LABEL_30;
          }
          uint64_t v33 = v10;
          int v14 = 0;
          uint64_t v15 = v12[1];
          unsigned int v16 = *(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 632) + 8 * v15 + 8);
          uint64_t v17 = 18;
          if (v7 < v32) {
            uint64_t v17 = 14;
          }
          int v18 = v12[v17];
          unsigned int v36 = v12[17] * v7;
          int v19 = v12[10];
          uint64_t v20 = *(void *)(a2 + 8 * v15) + 8 * v19 * v34;
          int v38 = v18;
          if (v18 <= 1) {
            uint64_t v21 = 1;
          }
          else {
            uint64_t v21 = v18;
          }
          uint64_t v35 = v21;
          while (2)
          {
            if (*(_DWORD *)(a1 + 176) >= v37)
            {
              if (v14 + v34 < v12[19] && v38 >= 1) {
                goto LABEL_24;
              }
            }
            else
            {
              if (v38 < 1) {
                goto LABEL_27;
              }
LABEL_24:
              std::vector<char>::size_type v23 = v6;
              size_t v24 = &v6[v11];
              uint64_t v25 = v35;
              uint64_t v26 = v36;
              do
              {
                uint64_t v27 = (uint64_t)*v24++;
                v16(a1, v12, v27, v20, v26);
                uint64_t v26 = (v12[9] + v26);
                --v25;
              }
              while (v25);
              int v19 = v12[10];
              int v13 = v12[15];
              unsigned int v6 = v23;
            }
LABEL_27:
            v11 += v12[14];
            v20 += 8 * v19;
            if (++v14 >= v13)
            {
              int v9 = *(_DWORD *)(a1 + 448);
              unsigned int v7 = v31;
              uint64_t v10 = v33;
              goto LABEL_30;
            }
            continue;
          }
        }
LABEL_31:
        ++v7;
      }
      while (v7 <= v32);
      int v3 = v29;
      int v5 = v29[12];
LABEL_33:
      unsigned int v7 = 0;
      v3[10] = 0;
      if (++v34 >= v5)
      {
        unsigned int v4 = *(_DWORD *)(a1 + 432);
        break;
      }
    }
  }
  ++*(_DWORD *)(a1 + 184);
  unsigned int v28 = *(_DWORD *)(a1 + 176) + 1;
  *(_DWORD *)(a1 + 176) = v28;
  if (v28 >= v4)
  {
    (*(void (**)(uint64_t))(*(void *)(a1 + 608) + 24))(a1);
    return 4;
  }
  else
  {
    start_iMCU_row(a1);
    return 3;
  }
}

uint64_t start_iMCU_row(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 592);
  if (*(int *)(result + 448) < 2)
  {
    uint64_t v3 = *(void *)(result + 456);
    if (*(_DWORD *)(result + 176) >= (*(_DWORD *)(result + 432) - 1)) {
      int v2 = *(_DWORD *)(v3 + 76);
    }
    else {
      int v2 = *(_DWORD *)(v3 + 12);
    }
  }
  else
  {
    int v2 = 1;
  }
  *(_DWORD *)(v1 + 48) = v2;
  *(void *)(v1 + 40) = 0;
  return result;
}

uint64_t decompress_smooth_data(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v110 = *MEMORY[0x263EF8340];
  uint64_t v70 = *(void *)(a1 + 592);
  unsigned int v76 = *(_DWORD *)(a1 + 432) - 1;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long __dst = 0u;
  long long v103 = 0u;
  while (1)
  {
    int v3 = *(_DWORD *)(v2 + 172);
    int v4 = *(_DWORD *)(v2 + 180);
    if (v3 > v4) {
      break;
    }
    uint64_t v5 = *(void *)(v2 + 608);
    if (*(_DWORD *)(v5 + 36)) {
      break;
    }
    if (v3 == v4)
    {
      unsigned int v6 = *(_DWORD *)(v2 + 184);
      if (!*(_DWORD *)(v2 + 540)) {
        ++v6;
      }
      if (*(_DWORD *)(v2 + 176) > v6) {
        break;
      }
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))v5)(v2);
    if (!result) {
      return result;
    }
  }
  if (*(int *)(v2 + 56) >= 1)
  {
    uint64_t v71 = 0;
    uint64_t v8 = *(void *)(v2 + 304);
    uint64_t v89 = v2;
    while (!*(_DWORD *)(v8 + 52))
    {
LABEL_116:
      v8 += 96;
      if (++v71 >= *(int *)(v2 + 56)) {
        goto LABEL_117;
      }
    }
    unsigned int v9 = *(_DWORD *)(v2 + 184);
    if (v9 < v76)
    {
      unsigned int v10 = *(_DWORD *)(v8 + 12);
      uint64_t v13 = 2 * v10;
      LODWORD(v12) = v10;
      if (v9)
      {
LABEL_18:
        uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)(v2 + 8) + 64))(v2, *(void *)(v70 + 8 * v71 + 136), v10 * (v9 - 1), v10 + v13, 0)+ 8 * *(int *)(v8 + 12);
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v10 = *(_DWORD *)(v8 + 12);
      unsigned int v11 = *(_DWORD *)(v8 + 32) % v10;
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v10;
      }
      uint64_t v13 = v12;
      if (v9) {
        goto LABEL_18;
      }
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void))(*(void *)(v2 + 8) + 64))(v2, *(void *)(v70 + 8 * v71 + 136), 0, v13, 0);
LABEL_21:
    uint64_t v72 = (v12 - 1);
    if ((int)v12 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v93 = *(void (**)(uint64_t, uint64_t, long long *, uint64_t, uint64_t))(*(void *)(v2 + 632) + 8 * v71 + 8);
      uint64_t v95 = *(void *)(a2 + 8 * v71);
      unsigned int v16 = *(unsigned __int16 **)(v8 + 80);
      uint64_t v17 = v16[2];
      uint64_t v18 = v16[9];
      uint64_t v19 = v16[16];
      BOOL v90 = (_DWORD *)(*(void *)(v70 + 216) + 4 * (6 * v71));
      uint64_t v20 = v16[8];
      int v21 = *v16;
      uint64_t v22 = v16[1];
      int v92 = 9 * v21;
      int v91 = 36 * v21;
      unint64_t v87 = v22 << 8;
      uint64_t v88 = v22 << 7;
      uint64_t v86 = v20 << 7;
      unint64_t v85 = v20 << 8;
      unint64_t v83 = v19 << 8;
      uint64_t v84 = v19 << 7;
      uint64_t v81 = v18 << 7;
      int v82 = 5 * v21;
      uint64_t v79 = v17 << 7;
      unint64_t v80 = v18 << 8;
      unint64_t v78 = v17 << 8;
      uint64_t v73 = v12;
      uint64_t v74 = v14;
      uint64_t v94 = v8;
      unsigned int v75 = v9;
      do
      {
        std::vector<char>::size_type v23 = *(__int16 **)(v14 + 8 * v15);
        size_t v24 = v23;
        if (v9 | v15) {
          size_t v24 = *(__int16 **)(v14 + 8 * v15 - 8);
        }
        if (v9 < v76 || (uint64_t v25 = *(__int16 **)(v14 + 8 * v15), v15 != v72)) {
          uint64_t v25 = *(__int16 **)(v14 + 8 * v15 + 8);
        }
        uint64_t v77 = v15;
        uint64_t v26 = 0;
        unsigned int v27 = 0;
        int v30 = *v24;
        unsigned int v28 = v24 + 64;
        int v29 = v30;
        int v33 = *v25;
        unsigned int v31 = v25 + 64;
        int v32 = v33;
        unsigned int v34 = *(_DWORD *)(v8 + 28) - 1;
        int v35 = v33;
        int v99 = *v23;
        int v101 = v99;
        int v98 = v29;
        int v100 = v29;
        do
        {
          int v97 = v100;
          int v100 = v98;
          int v36 = v101;
          int v101 = v99;
          int v96 = v35;
          int v35 = v32;
          jcopy_block_row(v23, &__dst, 1u);
          if (v27 < v34)
          {
            int v98 = *v28;
            int v99 = v23[64];
            int v32 = *v31;
          }
          int v37 = v90[1];
          if (v37) {
            BOOL v38 = WORD1(__dst) == 0;
          }
          else {
            BOOL v38 = 0;
          }
          if (v38)
          {
            uint64_t v39 = v91 * (uint64_t)(v36 - v99);
            unint64_t v40 = (v88 - v39) / v87;
            if (1 << v37 <= (int)v40) {
              int v41 = (1 << v37) - 1;
            }
            else {
              int v41 = (v88 - v39) / v87;
            }
            if (v37 > 0) {
              LODWORD(v40) = v41;
            }
            if (1 << v37 <= (int)((v39 + v88) / v87)) {
              int v42 = (1 << v37) - 1;
            }
            else {
              LOWORD(v42) = (v39 + v88) / v87;
            }
            if (v37 >= 1) {
              LOWORD(v43) = v42;
            }
            else {
              LOWORD(v43) = (v39 + v88) / v87;
            }
            if (v39 < 0) {
              int v43 = -(int)v40;
            }
            WORD1(__dst) = v43;
          }
          int v44 = v90[2];
          if (v44 && !(_WORD)v103)
          {
            uint64_t v45 = v91 * (uint64_t)(v100 - v35);
            unint64_t v46 = (v86 - v45) / v85;
            if (1 << v44 <= (int)v46) {
              int v47 = (1 << v44) - 1;
            }
            else {
              int v47 = (v86 - v45) / v85;
            }
            if (v44 > 0) {
              LODWORD(v46) = v47;
            }
            if (1 << v44 <= (int)((v45 + v86) / v85)) {
              int v48 = (1 << v44) - 1;
            }
            else {
              LOWORD(v48) = (v45 + v86) / v85;
            }
            if (v44 >= 1) {
              LOWORD(v49) = v48;
            }
            else {
              LOWORD(v49) = (v45 + v86) / v85;
            }
            if (v45 < 0) {
              int v49 = -(int)v46;
            }
            LOWORD(v103) = v49;
          }
          int v50 = v90[3];
          if (v50 && !(_WORD)v104)
          {
            uint64_t v51 = v92 * (uint64_t)(v100 - 2 * v101 + v35);
            unint64_t v52 = (v84 - v51) / v83;
            if (1 << v50 <= (int)v52) {
              int v53 = (1 << v50) - 1;
            }
            else {
              int v53 = (v84 - v51) / v83;
            }
            if (v50 > 0) {
              LODWORD(v52) = v53;
            }
            if (1 << v50 <= (int)((v51 + v84) / v83)) {
              int v54 = (1 << v50) - 1;
            }
            else {
              LOWORD(v54) = (v51 + v84) / v83;
            }
            if (v50 >= 1) {
              LOWORD(v55) = v54;
            }
            else {
              LOWORD(v55) = (v51 + v84) / v83;
            }
            if (v51 < 0) {
              int v55 = -(int)v52;
            }
            LOWORD(v104) = v55;
          }
          int v56 = v90[4];
          if (v56 && !WORD1(v103))
          {
            uint64_t v57 = v82 * (uint64_t)(v97 - (v96 + v98) + v32);
            unint64_t v58 = (v81 - v57) / v80;
            if (1 << v56 <= (int)v58) {
              int v59 = (1 << v56) - 1;
            }
            else {
              int v59 = (v81 - v57) / v80;
            }
            if (v56 > 0) {
              LODWORD(v58) = v59;
            }
            if (1 << v56 <= (int)((v57 + v81) / v80)) {
              int v60 = (1 << v56) - 1;
            }
            else {
              LOWORD(v60) = (v57 + v81) / v80;
            }
            if (v56 >= 1) {
              LOWORD(v61) = v60;
            }
            else {
              LOWORD(v61) = (v57 + v81) / v80;
            }
            if (v57 < 0) {
              int v61 = -(int)v58;
            }
            WORD1(v103) = v61;
          }
          int v62 = v90[5];
          if (v62 && !WORD2(__dst))
          {
            uint64_t v63 = v92 * (uint64_t)(v36 - 2 * v101 + v99);
            unint64_t v64 = (v79 - v63) / v78;
            if (1 << v62 <= (int)v64) {
              int v65 = (1 << v62) - 1;
            }
            else {
              int v65 = (v79 - v63) / v78;
            }
            if (v62 > 0) {
              LODWORD(v64) = v65;
            }
            if (1 << v62 <= (int)((v63 + v79) / v78)) {
              int v66 = (1 << v62) - 1;
            }
            else {
              LOWORD(v66) = (v63 + v79) / v78;
            }
            if (v62 >= 1) {
              LOWORD(v67) = v66;
            }
            else {
              LOWORD(v67) = (v63 + v79) / v78;
            }
            if (v63 < 0) {
              int v67 = -(int)v64;
            }
            WORD2(__dst) = v67;
          }
          uint64_t v2 = v89;
          v93(v89, v94, &__dst, v95, v26);
          v23 += 64;
          uint64_t v26 = (*(_DWORD *)(v94 + 36) + v26);
          ++v27;
          v31 += 64;
          v28 += 64;
        }
        while (v27 <= v34);
        uint64_t v8 = v94;
        v95 += 8 * *(int *)(v94 + 40);
        uint64_t v15 = v77 + 1;
        uint64_t v14 = v74;
        unsigned int v9 = v75;
      }
      while (v77 + 1 != v73);
    }
    goto LABEL_116;
  }
LABEL_117:
  unsigned int v68 = *(_DWORD *)(v2 + 184) + 1;
  *(_DWORD *)(v2 + 184) = v68;
  if (v68 < *(_DWORD *)(v2 + 432)) {
    return 3;
  }
  else {
    return 4;
  }
}

double CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/FeatureTypes.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::_Int64FeatureType_default_instance_ = (uint64_t)&unk_26D776C50;
  qword_26808D5D0 = 0;
  dword_26808D5D8 = 0;
  byte_26808D5E0 = 1;
  CoreML::Specification::_DoubleFeatureType_default_instance_ = (uint64_t)&unk_26D776CE8;
  qword_26808D5F0 = 0;
  dword_26808D5F8 = 0;
  byte_26808D600 = 1;
  CoreML::Specification::_StringFeatureType_default_instance_ = (uint64_t)&unk_26D776D80;
  qword_26808D610 = 0;
  dword_26808D618 = 0;
  byte_26808D620 = 1;
  CoreML::Specification::_SizeRange_default_instance_ = (uint64_t)&unk_26D776E18;
  unk_26808D630 = 0;
  qword_26808D638 = 0;
  unk_26808D640 = 0;
  dword_26808D648 = 0;
  byte_26808D650 = 1;
  CoreML::Specification::_ImageFeatureType_ImageSize_default_instance_ = (uint64_t)&unk_26D776EB0;
  unk_26808D660 = 0;
  dword_26808D678 = 0;
  qword_26808D668 = 0;
  unk_26808D670 = 0;
  byte_26808D680 = 1;
  CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_ = (uint64_t)&unk_26D776F48;
  double result = 0.0;
  unk_26808D690 = 0u;
  unk_26808D6A0 = 0u;
  dword_26808D6B0 = 0;
  byte_26808D6B8 = 1;
  dword_26808D6E0 = 0;
  CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_ = (uint64_t)&unk_26D776FE0;
  *(void *)algn_26808D6C8 = 0;
  byte_26808D6E8 = 1;
  qword_26808D720 = 0;
  CoreML::Specification::_ImageFeatureType_default_instance_ = (uint64_t)&unk_26D777078;
  *(void *)algn_26808D6F8 = 0;
  dword_26808D710 = 0;
  qword_26808D700 = 0;
  unk_26808D708 = 0;
  byte_26808D728 = 1;
  CoreML::Specification::_ArrayFeatureType_Shape_default_instance_ = (uint64_t)&unk_26D777110;
  *(void *)algn_26808D748 = 0;
  qword_26808D750 = 0;
  unk_26808D758 = 0;
  dword_26808D764 = 0;
  byte_26808D768 = 1;
  CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_ = (uint64_t)&unk_26D7771A8;
  dword_26808D798 = 0;
  unk_26808D788 = 0u;
  unk_26808D778 = 0u;
  byte_26808D7A0 = 1;
  CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_ = (uint64_t)&unk_26D777240;
  dword_26808D7D0 = 0;
  unk_26808D7C0 = 0u;
  unk_26808D7B0 = 0u;
  byte_26808D7D8 = 1;
  CoreML::Specification::_ArrayFeatureType_default_instance_ = (uint64_t)&unk_26D7772D8;
  *(void *)algn_26808D7E8 = 0;
  qword_26808D7F0 = 0;
  unk_26808D7F8 = 0;
  dword_26808D804 = 0;
  dword_26808D820 = 0;
  qword_26808D818 = 0;
  byte_26808D828 = 1;
  CoreML::Specification::_DictionaryFeatureType_default_instance_ = (uint64_t)&unk_26D777370;
  unk_26808D858 = 0;
  qword_26808D868 = 0;
  byte_26808D870 = 1;
  qword_26808D8A8 = 0;
  CoreML::Specification::_SequenceFeatureType_default_instance_ = (uint64_t)&unk_26D777408;
  unk_26808D890 = 0;
  byte_26808D8B0 = 1;
  CoreML::Specification::_FeatureType_default_instance_ = (uint64_t)&unk_26D7774A0;
  unk_26808D8D0 = 0;
  byte_26808D8D8 = 0;
  qword_26808D8E8 = 0;
  byte_26808D8F0 = 1;
  qword_26808D6D0 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  unk_26808D6D8 = &CoreML::Specification::_SizeRange_default_instance_;
  qword_26808D898 = (uint64_t)&CoreML::Specification::_SizeRange_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(CoreML::Specification::protobuf_FeatureTypes_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_FeatureTypes_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2242AF12C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Int64FeatureType *CoreML::Specification::Int64FeatureType::Int64FeatureType(CoreML::Specification::Int64FeatureType *this)
{
  *(void *)this = &unk_26D776C50;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Int64FeatureType *)&CoreML::Specification::_Int64FeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_2242AF1A0(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64FeatureType::~Int64FeatureType(CoreML::Specification::Int64FeatureType *this)
{
  *(void *)this = &unk_26D776C50;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D776C50;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::Int64FeatureType::New(CoreML::Specification::Int64FeatureType *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242AF2B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64FeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64FeatureType>);
  }
  return result;
}

uint64_t CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream(CoreML::Specification::Int64FeatureType *this, char **a2, unsigned int a3)
{
  do
  {
    int v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::Int64FeatureType::ByteSizeLong(CoreML::Specification::Int64FeatureType *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::Int64FeatureType::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::Int64FeatureType::IsInitialized(CoreML::Specification::Int64FeatureType *this)
{
  return 1;
}

void *CoreML::Specification::Int64FeatureType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64FeatureType");
}

CoreML::Specification::DoubleFeatureType *CoreML::Specification::DoubleFeatureType::DoubleFeatureType(CoreML::Specification::DoubleFeatureType *this)
{
  *(void *)this = &unk_26D776CE8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::DoubleFeatureType *)&CoreML::Specification::_DoubleFeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_2242AF414(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DoubleFeatureType::~DoubleFeatureType(CoreML::Specification::DoubleFeatureType *this)
{
  *(void *)this = &unk_26D776CE8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D776CE8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::DoubleFeatureType::New(CoreML::Specification::DoubleFeatureType *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242AF528(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleFeatureType>);
  }
  return result;
}

uint64_t CoreML::Specification::DoubleFeatureType::MergePartialFromCodedStream(CoreML::Specification::DoubleFeatureType *this, char **a2, unsigned int a3)
{
  do
  {
    int v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::DoubleFeatureType::ByteSizeLong(CoreML::Specification::DoubleFeatureType *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::DoubleFeatureType::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::DoubleFeatureType::IsInitialized(CoreML::Specification::DoubleFeatureType *this)
{
  return 1;
}

void *CoreML::Specification::DoubleFeatureType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleFeatureType");
}

CoreML::Specification::StringFeatureType *CoreML::Specification::StringFeatureType::StringFeatureType(CoreML::Specification::StringFeatureType *this)
{
  *(void *)this = &unk_26D776D80;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::StringFeatureType *)&CoreML::Specification::_StringFeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 4) = 0;
  return this;
}

void sub_2242AF688(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::StringFeatureType::~StringFeatureType(CoreML::Specification::StringFeatureType *this)
{
  *(void *)this = &unk_26D776D80;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D776D80;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::StringFeatureType::New(CoreML::Specification::StringFeatureType *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242AF79C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringFeatureType>);
  }
  return result;
}

uint64_t CoreML::Specification::StringFeatureType::MergePartialFromCodedStream(CoreML::Specification::StringFeatureType *this, char **a2, unsigned int a3)
{
  do
  {
    int v4 = *a2;
    if (*a2 >= a2[1])
    {
      unint64_t TagFallback = 0;
    }
    else
    {
      unint64_t TagFallback = *v4;
      if (*v4 >= 1)
      {
        *a2 = v4 + 1;
        goto LABEL_6;
      }
    }
    unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, TagFallback);
LABEL_6:
    if (TagFallback) {
      BOOL v6 = (TagFallback & 7) == 4;
    }
    else {
      BOOL v6 = 1;
    }
    uint64_t v7 = v6;
  }
  while (!v6
       && (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return v7;
}

uint64_t CoreML::Specification::StringFeatureType::ByteSizeLong(CoreML::Specification::StringFeatureType *this)
{
  *((_DWORD *)this + 4) = 0;
  return 0;
}

std::string *CoreML::Specification::StringFeatureType::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (v2) {
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

uint64_t CoreML::Specification::StringFeatureType::IsInitialized(CoreML::Specification::StringFeatureType *this)
{
  return 1;
}

void *CoreML::Specification::StringFeatureType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringFeatureType");
}

CoreML::Specification::SizeRange *CoreML::Specification::SizeRange::SizeRange(CoreML::Specification::SizeRange *this)
{
  *(void *)this = &unk_26D776E18;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SizeRange *)&CoreML::Specification::_SizeRange_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2242AF900(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SizeRange::~SizeRange(CoreML::Specification::SizeRange *this)
{
  *(void *)this = &unk_26D776E18;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D776E18;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SizeRange::New(CoreML::Specification::SizeRange *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242AFA14(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SizeRange>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SizeRange>);
  }
  return result;
}

uint64_t CoreML::Specification::SizeRange::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::SizeRange::MergePartialFromCodedStream(CoreML::Specification::SizeRange *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_20;
        }
        unsigned int v11 = *a2;
        if (*a2 >= a2[1] || *v11 < 0)
        {
          unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v15 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t Varint64Fallback = *v11;
          *a2 = v11 + 1;
        }
        *((void *)this + 3) = Varint64Fallback;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      unsigned int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        *((void *)this + 2) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v14 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        *((void *)this + 2) = *v10;
        *a2 = v10 + 1;
      }
    }
LABEL_20:
    if (v7) {
      BOOL v13 = (v7 & 7) == 4;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::SizeRange::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 24);
  if (v7)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::SizeRange::ByteSizeLong(CoreML::Specification::SizeRange *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unint64_t v4 = v5 + 1;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::SizeRange::IsInitialized(CoreML::Specification::SizeRange *this)
{
  return 1;
}

void *CoreML::Specification::SizeRange::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SizeRange");
}

CoreML::Specification::ImageFeatureType_ImageSize *CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  *(void *)this = &unk_26D776EB0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ImageFeatureType_ImageSize *)&CoreML::Specification::_ImageFeatureType_ImageSize_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2242AFCD0(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ImageFeatureType_ImageSize::~ImageFeatureType_ImageSize(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  *(void *)this = &unk_26D776EB0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D776EB0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ImageFeatureType_ImageSize::New(CoreML::Specification::ImageFeatureType_ImageSize *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242AFDE0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_ImageSize>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_ImageSize>);
  }
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSize::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSize::MergePartialFromCodedStream(CoreML::Specification::ImageFeatureType_ImageSize *this, char **a2, unsigned int a3)
{
  unint64_t v4 = (unint64_t *)((char *)this + 24);
  unint64_t v5 = (unint64_t *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v6 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v7 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_22;
          }
          goto LABEL_8;
        }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_22;
        }
LABEL_8:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 16) {
          goto LABEL_22;
        }
        unsigned int v11 = *a2;
        if (*a2 >= a2[1] || *v11 < 0)
        {
          *unint64_t v4 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          unint64_t v12 = *v11;
          BOOL v13 = v4;
LABEL_21:
          *BOOL v13 = v12;
          *a2 = v11 + 1;
        }
      }
      if (v8 >> 3 != 1 || v8 != 8) {
        break;
      }
      unsigned int v11 = *a2;
      if (*a2 < a2[1] && (*v11 & 0x80000000) == 0)
      {
        unint64_t v12 = *v11;
        BOOL v13 = v5;
        goto LABEL_21;
      }
      *unint64_t v5 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
      if ((v15 & 1) == 0) {
        return 0;
      }
    }
LABEL_22:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSize::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 24);
  if (v7)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::ImageFeatureType_ImageSize::ByteSizeLong(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unint64_t v4 = v5 + 1;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSize::IsInitialized(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
  return 1;
}

void *CoreML::Specification::ImageFeatureType_ImageSize::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ImageFeatureType.ImageSize");
}

CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ImageFeatureType_EnumeratedImageSizes(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  *(void *)this = &unk_26D776F48;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)&CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_2242B00B4(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::~ImageFeatureType_EnumeratedImageSizes(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  *(void *)this = &unk_26D776F48;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::~ImageFeatureType_EnumeratedImageSizes(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::default_instance(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  return &CoreML::Specification::_ImageFeatureType_EnumeratedImageSizes_default_instance_;
}

void CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::New(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B01D4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_EnumeratedImageSizes>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_EnumeratedImageSizes>);
  }
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v3 = *v2++;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergePartialFromCodedStream(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this, char **a2, unsigned int a3)
{
  unint64_t v4 = (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      unint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      unsigned int v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ImageFeatureType_ImageSize>::TypeHandler>(v4);
      unint64_t v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        uint64_t result = CoreML::Specification::ImageFeatureType_ImageSize::MergePartialFromCodedStream(v11, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ByteSizeLong(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      unint64_t v5 = CoreML::Specification::ImageFeatureType_ImageSize::ByteSizeLong(*(CoreML::Specification::ImageFeatureType_ImageSize **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergeFrom(std::string *this, const CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::ReverseSeqLayerParams **)(*((void *)a2 + 4) + 8);
    unint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ImageFeatureType_ImageSize>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::IsInitialized(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
  return 1;
}

void *CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ImageFeatureType.EnumeratedImageSizes");
}

CoreML::Specification::ImageFeatureType_ImageSizeRange *CoreML::Specification::ImageFeatureType_ImageSizeRange::ImageFeatureType_ImageSizeRange(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  *(void *)this = &unk_26D776FE0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ImageFeatureType_ImageSizeRange *)&CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2242B0578(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ImageFeatureType_ImageSizeRange::~ImageFeatureType_ImageSizeRange(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  *(void *)this = &unk_26D776FE0;
  CoreML::Specification::ImageFeatureType_ImageSizeRange::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ImageFeatureType_ImageSizeRange::~ImageFeatureType_ImageSizeRange(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ImageFeatureType_ImageSizeRange::SharedDtor(uint64_t *this)
{
  if (this != &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
  {
    uint64_t v1 = this;
    uint64_t v2 = this[2];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    this = (uint64_t *)v1[3];
    if (this)
    {
      int v3 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v3();
    }
  }
  return this;
}

uint64_t *CoreML::Specification::ImageFeatureType_ImageSizeRange::default_instance(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  return &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_;
}

void CoreML::Specification::ImageFeatureType_ImageSizeRange::New(CoreML::Specification::ImageFeatureType_ImageSizeRange *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B0730(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType_ImageSizeRange>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_ImageSizeRange>);
  }
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSizeRange::Clear(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  uint64_t result = *((void *)this + 3);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 3) = 0;
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSizeRange::MergePartialFromCodedStream(CoreML::Specification::ImageFeatureType_ImageSizeRange *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_21;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_21;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_21;
      }
      unsigned int v10 = (CoreML::Specification::SizeRange *)*((void *)this + 3);
      if (!v10) {
        operator new();
      }
LABEL_18:
      unsigned int v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v11;
        *a2 = v11 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        uint64_t result = CoreML::Specification::SizeRange::MergePartialFromCodedStream(v10, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      unsigned int v10 = (CoreML::Specification::SizeRange *)*((void *)this + 2);
      if (!v10) {
        operator new();
      }
      goto LABEL_18;
    }
LABEL_21:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_2242B0984(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::ImageFeatureType_ImageSizeRange::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
  {
    unsigned int v5 = this;
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
    uint64_t v7 = v5[3];
    if (v7)
    {
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  return this;
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSizeRange::ByteSizeLong(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  if (this == (CoreML::Specification::ImageFeatureType_ImageSizeRange *)&CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v2 = (CoreML::Specification::SizeRange *)*((void *)this + 2);
    if (v2)
    {
      unint64_t v3 = CoreML::Specification::SizeRange::ByteSizeLong(v2);
      uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    unsigned int v5 = (CoreML::Specification::SizeRange *)*((void *)this + 3);
    if (v5)
    {
      unint64_t v6 = CoreML::Specification::SizeRange::ByteSizeLong(v5);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

std::string *CoreML::Specification::ImageFeatureType_ImageSizeRange::MergeFrom(std::string *this, const CoreML::Specification::ImageFeatureType_ImageSizeRange *a2)
{
  unint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::ImageFeatureType_ImageSizeRange *)&CoreML::Specification::_ImageFeatureType_ImageSizeRange_default_instance_)
  {
    if (*((void *)a2 + 2))
    {
      unsigned int v5 = (std::string *)v3->__r_.__value_.__r.__words[2];
      if (!v5) {
        operator new();
      }
      this = CoreML::Specification::ReverseSeqLayerParams::MergeFrom(v5, *((const CoreML::Specification::ReverseSeqLayerParams **)a2 + 2));
    }
    if (*((void *)a2 + 3))
    {
      if (!v3[1].__r_.__value_.__r.__words[0]) {
        operator new();
      }
      unint64_t v6 = (const CoreML::Specification::ReverseSeqLayerParams *)*((void *)a2 + 3);
      data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      return CoreML::Specification::ReverseSeqLayerParams::MergeFrom(data, v6);
    }
  }
  return this;
}

void sub_2242B0BCC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ImageFeatureType_ImageSizeRange::IsInitialized(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
  return 1;
}

void *CoreML::Specification::ImageFeatureType_ImageSizeRange::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ImageFeatureType.ImageSizeRange");
}

CoreML::Specification::ImageFeatureType *CoreML::Specification::ImageFeatureType::ImageFeatureType(CoreML::Specification::ImageFeatureType *this)
{
  *(void *)this = &unk_26D777078;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::ImageFeatureType *)&CoreML::Specification::_ImageFeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 6) = 0;
  return this;
}

void sub_2242B0C74(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ImageFeatureType::~ImageFeatureType(CoreML::Specification::ImageFeatureType *this)
{
  *(void *)this = &unk_26D777078;
  if (*((_DWORD *)this + 13)) {
    CoreML::Specification::ImageFeatureType::clear_SizeFlexibility((uint64_t)this);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ImageFeatureType::~ImageFeatureType(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::ImageFeatureType::clear_SizeFlexibility(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 52);
  if (v2 == 31 || v2 == 21)
  {
    this = *(void *)(this + 40);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t *CoreML::Specification::ImageFeatureType::default_instance(CoreML::Specification::ImageFeatureType *this)
{
  return &CoreML::Specification::_ImageFeatureType_default_instance_;
}

void CoreML::Specification::ImageFeatureType::New(CoreML::Specification::ImageFeatureType *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B0DFC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40BFDB1307);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ImageFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType>);
  }
  return result;
}

uint64_t CoreML::Specification::ImageFeatureType::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return CoreML::Specification::ImageFeatureType::clear_SizeFlexibility(this);
}

uint64_t CoreML::Specification::ImageFeatureType::MergePartialFromCodedStream(CoreML::Specification::ImageFeatureType *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v5 = *(unsigned __int8 **)a2;
        unint64_t v6 = *((void *)a2 + 1);
        if (*(void *)a2 >= v6)
        {
          uint64_t v8 = 0;
        }
        else
        {
          uint64_t v7 = v5 + 1;
          uint64_t v8 = *v5;
          if ((char)*v5 >= 1)
          {
            *(void *)a2 = v7;
            unint64_t v9 = v8 | 0x100000000;
            if ((v9 & 0x100000000) == 0) {
              goto LABEL_58;
            }
            goto LABEL_8;
          }
          if ((unint64_t)v7 < v6)
          {
            int v10 = *v7;
            if ((v8 & ~v10) >= 0x80)
            {
              *(void *)a2 = v5 + 2;
              unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
              goto LABEL_8;
            }
          }
        }
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
        unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v9 & 0x100000000) == 0) {
          goto LABEL_58;
        }
LABEL_8:
        unsigned int v11 = v9 >> 3;
        if (v9 >> 3 > 2) {
          break;
        }
        if (v11 == 1)
        {
          if (v9 != 8) {
            goto LABEL_58;
          }
          uint64_t v19 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
          {
            unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v26 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t Varint64Fallback = *v19;
            *(void *)a2 = v19 + 1;
          }
          *((void *)this + 2) = Varint64Fallback;
        }
        else
        {
          if (v11 != 2 || v9 != 16) {
            goto LABEL_58;
          }
          unint64_t v14 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v14 < 0)
          {
            unint64_t v15 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v25 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t v15 = *v14;
            *(void *)a2 = v14 + 1;
          }
          *((void *)this + 3) = v15;
        }
      }
      if (v11 != 3) {
        break;
      }
      if (v9 != 24) {
        goto LABEL_58;
      }
      int v16 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        int v17 = 0;
      }
      else
      {
        int v17 = *v16;
        if ((*v16 & 0x80000000) == 0)
        {
          *(void *)a2 = v16 + 1;
          goto LABEL_66;
        }
      }
      uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
      int v17 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_66:
      *((_DWORD *)this + 8) = v17;
    }
    if (v11 == 21) {
      break;
    }
    if (v11 == 31 && v9 == 250)
    {
      if (*((_DWORD *)this + 13) != 31)
      {
        CoreML::Specification::ImageFeatureType::clear_SizeFlexibility((uint64_t)this);
        *((_DWORD *)this + 13) = 31;
        operator new();
      }
      unint64_t v12 = (CoreML::Specification::ImageFeatureType_ImageSizeRange *)*((void *)this + 5);
      int v21 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v21;
        *(void *)a2 = v21 + 1;
      }
      unint64_t v27 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v27 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v29 = v27;
      uint64_t result = CoreML::Specification::ImageFeatureType_ImageSizeRange::MergePartialFromCodedStream(v12, (char **)a2, v28);
      if (!result) {
        return result;
      }
LABEL_54:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v29)) {
        return 0;
      }
    }
    else
    {
LABEL_58:
      if (v9) {
        BOOL v34 = (v9 & 7) == 4;
      }
      else {
        BOOL v34 = 1;
      }
      if (v34) {
        return 1;
      }
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
    }
      }
  }
  if (v9 != 170) {
    goto LABEL_58;
  }
  if (*((_DWORD *)this + 13) != 21)
  {
    CoreML::Specification::ImageFeatureType::clear_SizeFlexibility((uint64_t)this);
    *((_DWORD *)this + 13) = 21;
    operator new();
  }
  uint64_t v18 = (CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)*((void *)this + 5);
  std::vector<char>::size_type v23 = *(char **)a2;
  if (*(void *)a2 >= *((void *)a2 + 1) || *v23 < 0)
  {
    int v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v24 < 0) {
      return 0;
    }
  }
  else
  {
    int v24 = *v23;
    *(void *)a2 = v23 + 1;
  }
  unint64_t v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v24);
  if ((v31 & 0x8000000000000000) == 0)
  {
    int v29 = v31;
    uint64_t result = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergePartialFromCodedStream(v18, (char **)a2, v32);
    if (!result) {
      return result;
    }
    goto LABEL_54;
  }
  return 0;
}

void sub_2242B11A4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ImageFeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 24);
  if (v7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  signed int v8 = *(_DWORD *)(v5 + 32);
  if (v8) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(3, v8, a2, a4);
  }
  int v9 = *(_DWORD *)(v5 + 52);
  if (v9 == 21)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x15, *(void *)(v5 + 40), a2, a4);
    int v9 = *(_DWORD *)(v5 + 52);
  }
  if (v9 == 31)
  {
    uint64_t v10 = *(void *)(v5 + 40);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F, v10, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::ImageFeatureType::ByteSizeLong(CoreML::Specification::ImageFeatureType *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  unint64_t v4 = (9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6;
  if (v2) {
    unint64_t v5 = v4 + 1;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v6 = v5 + ((9 * (__clz(v3 | 1) ^ 0x3F) + 73) >> 6);
  if (v3) {
    unint64_t v7 = v6 + 1;
  }
  else {
    unint64_t v7 = v5;
  }
  int v8 = *((_DWORD *)this + 8);
  if (v8)
  {
    if (v8 < 0) {
      uint64_t v9 = 11;
    }
    else {
      uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v7 += v9;
  }
  int v10 = *((_DWORD *)this + 13);
  if (v10 == 31)
  {
    uint64_t v11 = CoreML::Specification::ImageFeatureType_ImageSizeRange::ByteSizeLong(*((CoreML::Specification::ImageFeatureType_ImageSizeRange **)this
                                                                               + 5));
    goto LABEL_16;
  }
  if (v10 == 21)
  {
    uint64_t v11 = CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::ByteSizeLong(*((CoreML::Specification::ImageFeatureType_EnumeratedImageSizes **)this
                                                                                     + 5));
LABEL_16:
    v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 12) = v7;
  return v7;
}

std::string *CoreML::Specification::ImageFeatureType::MergeFrom(std::string *this, const CoreML::Specification::ImageFeatureType *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (v5) {
    *(void *)(v3 + 16) = v5;
  }
  uint64_t v6 = *((void *)a2 + 3);
  if (v6) {
    *(void *)(v3 + 24) = v6;
  }
  int v7 = *((_DWORD *)a2 + 8);
  if (v7) {
    *(_DWORD *)(v3 + 32) = v7;
  }
  int v8 = *((_DWORD *)a2 + 13);
  if (v8 == 31)
  {
    if (*(_DWORD *)(v3 + 52) != 31)
    {
      CoreML::Specification::ImageFeatureType::clear_SizeFlexibility(v3);
      *(_DWORD *)(v3 + 52) = 31;
      operator new();
    }
    int v10 = (const CoreML::Specification::ImageFeatureType_ImageSizeRange *)*((void *)a2 + 5);
    unint64_t v12 = *(std::string **)(v3 + 40);
    return CoreML::Specification::ImageFeatureType_ImageSizeRange::MergeFrom(v12, v10);
  }
  else if (v8 == 21)
  {
    if (*(_DWORD *)(v3 + 52) != 21)
    {
      CoreML::Specification::ImageFeatureType::clear_SizeFlexibility(v3);
      *(_DWORD *)(v3 + 52) = 21;
      operator new();
    }
    uint64_t v9 = (const CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *)*((void *)a2 + 5);
    uint64_t v11 = *(std::string **)(v3 + 40);
    return CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::MergeFrom(v11, v9);
  }
  return this;
}

void sub_2242B150C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ImageFeatureType::IsInitialized(CoreML::Specification::ImageFeatureType *this)
{
  return 1;
}

void *CoreML::Specification::ImageFeatureType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ImageFeatureType");
}

CoreML::Specification::ArrayFeatureType_Shape *CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D777110;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ArrayFeatureType_Shape *)&CoreML::Specification::_ArrayFeatureType_Shape_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_2242B15C8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureType_Shape::~ArrayFeatureType_Shape(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  *(void *)this = &unk_26D777110;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ArrayFeatureType_Shape::~ArrayFeatureType_Shape(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::ArrayFeatureType_Shape::New(CoreML::Specification::ArrayFeatureType_Shape *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B16DC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_Shape>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_Shape>);
  }
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType_Shape *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      uint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v8 != 10) {
          break;
        }
        int v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        int v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            unint64_t v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0) {
                return 0;
              }
              unint64_t v15 = Varint64Fallback;
            }
            else
            {
              unint64_t v15 = *v14;
              *a2 = v14 + 1;
            }
            signed int v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              signed int v18 = *v5;
            }
            uint64_t v19 = *((void *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(void *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if (v8) {
      BOOL v12 = (v8 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *uint64_t v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          uint64_t v14 = *((void *)a2 + 1);
          if (v13 < 0x80)
          {
            unint64_t v16 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              unint64_t v16 = v13 >> 7;
              unint64_t v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *unint64_t v15 = v16;
          int v18 = v15 - v14 + 1;
          *((void *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::ByteSizeLong(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::ArrayFeatureType_Shape::IsInitialized(CoreML::Specification::ArrayFeatureType_Shape *this)
{
  return 1;
}

void *CoreML::Specification::ArrayFeatureType_Shape::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureType.Shape");
}

CoreML::Specification::ArrayFeatureType_EnumeratedShapes *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ArrayFeatureType_EnumeratedShapes(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  *(void *)this = &unk_26D7771A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)&CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_2242B1B84(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureType_EnumeratedShapes::~ArrayFeatureType_EnumeratedShapes(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  *(void *)this = &unk_26D7771A8;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ArrayFeatureType_EnumeratedShapes::~ArrayFeatureType_EnumeratedShapes(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::default_instance(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  return &CoreML::Specification::_ArrayFeatureType_EnumeratedShapes_default_instance_;
}

void CoreML::Specification::ArrayFeatureType_EnumeratedShapes::New(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B1CA4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_EnumeratedShapes>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_EnumeratedShapes>);
  }
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v3 = *v2++;
      *(_DWORD *)(v3 + 16) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ArrayFeatureType_Shape>::TypeHandler>(v4);
      BOOL v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        uint64_t result = CoreML::Specification::ArrayFeatureType_Shape::MergePartialFromCodedStream(v11, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ByteSizeLong(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::ArrayFeatureType_Shape::ByteSizeLong(*(CoreML::Specification::ArrayFeatureType_Shape **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergeFrom(std::string *this, const CoreML::Specification::ArrayFeatureType_EnumeratedShapes *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*((void *)a2 + 4) + 8);
    unint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = (std::string *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ArrayFeatureType_Shape>::TypeHandler>(&v3->__r_.__value_.__r.__words[2], (CoreML::Specification::GLMRegressor_DoubleArray **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_EnumeratedShapes::IsInitialized(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
  return 1;
}

void *CoreML::Specification::ArrayFeatureType_EnumeratedShapes::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureType.EnumeratedShapes");
}

CoreML::Specification::ArrayFeatureType_ShapeRange *CoreML::Specification::ArrayFeatureType_ShapeRange::ArrayFeatureType_ShapeRange(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  *(void *)this = &unk_26D777240;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::ArrayFeatureType_ShapeRange *)&CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_2242B2058(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureType_ShapeRange::~ArrayFeatureType_ShapeRange(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  *(void *)this = &unk_26D777240;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ArrayFeatureType_ShapeRange::~ArrayFeatureType_ShapeRange(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ArrayFeatureType_ShapeRange::default_instance(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  return &CoreML::Specification::_ArrayFeatureType_ShapeRange_default_instance_;
}

void CoreML::Specification::ArrayFeatureType_ShapeRange::New(CoreML::Specification::ArrayFeatureType_ShapeRange *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B2178(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType_ShapeRange>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_ShapeRange>);
  }
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::Clear(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if ((int)v1 >= 1)
  {
    int v2 = (uint64_t *)(*(void *)(this + 32) + 8);
    do
    {
      uint64_t v3 = *v2++;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      --v1;
    }
    while (v1);
    *(_DWORD *)(this + 24) = 0;
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType_ShapeRange *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      unsigned int v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_7;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SizeRange>::TypeHandler>((uint64_t)v4);
      BOOL v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v16 = v14;
        uint64_t result = CoreML::Specification::SizeRange::MergePartialFromCodedStream(v11, a2, v15);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = *(_DWORD *)(this + 24);
  if (v4)
  {
    uint64_t v6 = this;
    for (int i = 0; i != v4; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v6 + 32) + 8 * i + 8), a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::ByteSizeLong(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      unint64_t v5 = CoreML::Specification::SizeRange::ByteSizeLong(*(CoreML::Specification::SizeRange **)(*((void *)this + 4)
                                                                                               + 8 * v3
                                                                                               + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

std::string *CoreML::Specification::ArrayFeatureType_ShapeRange::MergeFrom(std::string *this, const CoreML::Specification::ArrayFeatureType_ShapeRange *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::ReverseSeqLayerParams **)(*((void *)a2 + 4) + 8);
    unint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], v5);
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SizeRange>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType_ShapeRange::IsInitialized(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
  return 1;
}

void *CoreML::Specification::ArrayFeatureType_ShapeRange::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureType.ShapeRange");
}

CoreML::Specification::ArrayFeatureType *CoreML::Specification::ArrayFeatureType::ArrayFeatureType(CoreML::Specification::ArrayFeatureType *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D7772D8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::ArrayFeatureType *)&CoreML::Specification::_ArrayFeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 7) = 0;
  return this;
}

void sub_2242B252C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ArrayFeatureType::~ArrayFeatureType(CoreML::Specification::ArrayFeatureType *this)
{
  *(void *)this = &unk_26D7772D8;
  if (*((_DWORD *)this + 15)) {
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
  }
  if (*((_DWORD *)this + 16)) {
    *((_DWORD *)this + 16) = 0;
  }
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ArrayFeatureType::~ArrayFeatureType(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 60);
  if (v2 == 31 || v2 == 21)
  {
    this = *(void *)(this + 40);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

uint64_t *CoreML::Specification::ArrayFeatureType::default_instance(CoreML::Specification::ArrayFeatureType *this)
{
  return &CoreML::Specification::_ArrayFeatureType_default_instance_;
}

void CoreML::Specification::ArrayFeatureType::New(CoreML::Specification::ArrayFeatureType *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B26E8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4053416F99);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ArrayFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType>);
  }
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType::Clear(CoreML::Specification::ArrayFeatureType *this)
{
  *((_DWORD *)this + 4) = 0;
  *((_DWORD *)this + 9) = 0;
  uint64_t result = CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
  *((_DWORD *)this + 16) = 0;
  return result;
}

uint64_t CoreML::Specification::ArrayFeatureType::MergePartialFromCodedStream(CoreML::Specification::ArrayFeatureType *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  unsigned int v5 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *(unsigned __int8 **)a2;
        unint64_t v7 = *((void *)a2 + 1);
        if (*(void *)a2 >= v7)
        {
          uint64_t v9 = 0;
LABEL_16:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
          unint64_t v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
          if ((v10 & 0x100000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_17;
        }
        signed int v8 = v6 + 1;
        uint64_t v9 = *v6;
        if ((char)*v6 < 1)
        {
          if ((unint64_t)v8 < v7)
          {
            int v11 = *v8;
            if ((v9 & ~v11) >= 0x80)
            {
              *(void *)a2 = v6 + 2;
              unint64_t v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
          goto LABEL_16;
        }
        *(void *)a2 = v8;
        unint64_t v10 = v9 | 0x100000000;
        if ((v10 & 0x100000000) == 0) {
          goto LABEL_9;
        }
LABEL_17:
        unsigned int v14 = v10 >> 3;
        if (v10 >> 3 > 0x1E) {
          break;
        }
        if (v14 == 1)
        {
          if (v10 == 8)
          {
            if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, a2, (uint64_t)v5) & 1) == 0)return 0; {
          }
            }
          else
          {
            if (v10 != 10) {
              goto LABEL_9;
            }
            int v21 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
            {
              int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0) {
                return 0;
              }
            }
            else
            {
              int VarintSizeAsIntFallback = *v21;
              *(void *)a2 = v21 + 1;
            }
            int v37 = _tc_google::protobuf::io::CodedInputStream::PushLimit(a2, VarintSizeAsIntFallback);
            if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) >= 1)
            {
              do
              {
                BOOL v38 = *(char **)a2;
                if (*(void *)a2 >= *((void *)a2 + 1) || *v38 < 0)
                {
                  unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
                  if ((v41 & 1) == 0) {
                    return 0;
                  }
                  unint64_t v39 = Varint64Fallback;
                }
                else
                {
                  unint64_t v39 = *v38;
                  *(void *)a2 = v38 + 1;
                }
                signed int v42 = *((_DWORD *)this + 4);
                if (v42 == *((_DWORD *)this + 5))
                {
                  _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v42 + 1);
                  signed int v42 = *v5;
                }
                uint64_t v43 = *((void *)this + 3);
                *((_DWORD *)this + 4) = v42 + 1;
                *(void *)(v43 + 8 * v42 + 8) = v39;
              }
              while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit(a2) > 0);
            }
            _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v37);
          }
        }
        else if (v14 == 2)
        {
          if (v10 != 16) {
            goto LABEL_9;
          }
          std::vector<char>::size_type v23 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1))
          {
            int v24 = 0;
          }
          else
          {
            int v24 = *v23;
            if ((*v23 & 0x80000000) == 0)
            {
              *(void *)a2 = v23 + 1;
              goto LABEL_90;
            }
          }
          uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v24);
          int v24 = Varint32Fallback;
          if (Varint32Fallback < 0) {
            return 0;
          }
LABEL_90:
          *((_DWORD *)this + 9) = v24;
        }
        else if (v14 == 21 && v10 == 170)
        {
          if (*((_DWORD *)this + 15) != 21)
          {
            CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
            *((_DWORD *)this + 15) = 21;
            operator new();
          }
          unint64_t v17 = (CoreML::Specification::ArrayFeatureType_EnumeratedShapes *)*((void *)this + 5);
          unint64_t v27 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v27 < 0)
          {
            int v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v28 < 0) {
              return 0;
            }
          }
          else
          {
            int v28 = *v27;
            *(void *)a2 = v27 + 1;
          }
          unint64_t v31 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v28);
          if ((v31 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v33 = v31;
          uint64_t result = CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergePartialFromCodedStream(v17, (char **)a2, v32);
          if (!result) {
            return result;
          }
LABEL_70:
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v33)) {
            return 0;
          }
        }
        else
        {
LABEL_9:
          if (v10) {
            BOOL v12 = (v10 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0; {
        }
          }
      }
      if (v10 >> 3 <= 0x32) {
        break;
      }
      if (v14 == 51)
      {
        if (v10 != 157) {
          goto LABEL_9;
        }
        *((_DWORD *)this + 16) = 0;
        unsigned int v46 = 0;
        char v25 = *(unsigned int **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 4)
        {
          uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v46);
          if (!result) {
            return result;
          }
          unsigned int v26 = v46;
        }
        else
        {
          unsigned int v26 = *v25;
          *(void *)a2 = v25 + 1;
        }
        *((_DWORD *)this + 12) = v26;
        *((_DWORD *)this + 16) = 51;
      }
      else
      {
        if (v14 != 61 || v10 != 233) {
          goto LABEL_9;
        }
        *((_DWORD *)this + 16) = 0;
        unint64_t v47 = 0;
        int v18 = *(unint64_t **)a2;
        if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
        {
          uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v47);
          if (!result) {
            return result;
          }
          unint64_t v19 = v47;
        }
        else
        {
          unint64_t v19 = *v18;
          *(void *)a2 = v18 + 1;
        }
        *((void *)this + 6) = v19;
        *((_DWORD *)this + 16) = 61;
      }
    }
    if (v14 == 31) {
      break;
    }
    if (v14 != 41 || v10 != 72) {
      goto LABEL_9;
    }
    *((_DWORD *)this + 16) = 0;
    unsigned int v15 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1))
    {
      int v16 = 0;
    }
    else
    {
      int v16 = *v15;
      if ((*v15 & 0x80000000) == 0)
      {
        *(void *)a2 = v15 + 1;
        goto LABEL_85;
      }
    }
    uint64_t v44 = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v16);
    int v16 = v44;
    if (v44 < 0) {
      return 0;
    }
LABEL_85:
    *((_DWORD *)this + 12) = v16;
    *((_DWORD *)this + 16) = 41;
  }
  if (v10 != 250) {
    goto LABEL_9;
  }
  if (*((_DWORD *)this + 15) != 31)
  {
    CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility((uint64_t)this);
    *((_DWORD *)this + 15) = 31;
    operator new();
  }
  uint64_t v20 = (CoreML::Specification::ArrayFeatureType_ShapeRange *)*((void *)this + 5);
  int v29 = *(char **)a2;
  if (*(void *)a2 >= *((void *)a2 + 1) || *v29 < 0)
  {
    int v30 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v30 < 0) {
      return 0;
    }
  }
  else
  {
    int v30 = *v29;
    *(void *)a2 = v29 + 1;
  }
  unint64_t v35 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v30);
  if ((v35 & 0x8000000000000000) == 0)
  {
    int v33 = v35;
    uint64_t result = CoreML::Specification::ArrayFeatureType_ShapeRange::MergePartialFromCodedStream(v20, (char **)a2, v36);
    if (!result) {
      return result;
    }
    goto LABEL_70;
  }
  return 0;
}

void sub_2242B2C68(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ArrayFeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      *uint64_t v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(unsigned int *)(v5 + 16);
    if ((int)v13 >= 1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        unint64_t v15 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v15);
        }
        else
        {
          uint64_t v16 = *((void *)a2 + 1);
          if (v15 < 0x80)
          {
            unint64_t v18 = *(void *)(*(void *)(v5 + 24) + 8 * i + 8);
            unint64_t v17 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v17 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v17++ = v15 | 0x80;
              unint64_t v18 = v15 >> 7;
              unint64_t v19 = v15 >> 14;
              v15 >>= 7;
            }
            while (v19);
          }
          *unint64_t v17 = v18;
          int v20 = v17 - v16 + 1;
          *((void *)a2 + 1) += v20;
          *((_DWORD *)a2 + 4) -= v20;
        }
      }
    }
  }
  signed int v21 = *(_DWORD *)(v5 + 36);
  if (v21) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(2, v21, a2, a4);
  }
  int v22 = *(_DWORD *)(v5 + 60);
  if (v22 == 21)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x15, *(void *)(v5 + 40), a2, a4);
    int v22 = *(_DWORD *)(v5 + 60);
  }
  if (v22 == 31) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F, *(void *)(v5 + 40), a2, a4);
  }
  int v23 = *(_DWORD *)(v5 + 64);
  if (v23 == 41)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(41, *(_DWORD *)(v5 + 48), a2, a4);
    int v23 = *(_DWORD *)(v5 + 64);
  }
  if (v23 == 51)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteFloat((_tc_google::protobuf::internal::WireFormatLite *)0x33, a2, *(float *)(v5 + 48), a3);
    int v23 = *(_DWORD *)(v5 + 64);
  }
  if (v23 == 61)
  {
    double v24 = *(double *)(v5 + 48);
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0x3D, a2, v24, a3);
  }
  return this;
}

uint64_t CoreML::Specification::ArrayFeatureType::ByteSizeLong(CoreML::Specification::ArrayFeatureType *this)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((int)v2 < 1)
  {
    uint64_t v3 = 0;
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v5 = *v4++;
    v3 += (9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6;
    --v2;
  }
  while (v2);
  if (!v3) {
    goto LABEL_8;
  }
  if ((v3 & 0x80000000) != 0) {
    uint64_t v6 = 11;
  }
  else {
    uint64_t v6 = ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_9:
  *((_DWORD *)this + 8) = v3;
  uint64_t v7 = v6 + v3;
  int v8 = *((_DWORD *)this + 9);
  if (v8)
  {
    if (v8 < 0) {
      uint64_t v9 = 11;
    }
    else {
      uint64_t v9 = ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v7 += v9;
  }
  int v10 = *((_DWORD *)this + 15);
  if (v10 == 31)
  {
    uint64_t v11 = CoreML::Specification::ArrayFeatureType_ShapeRange::ByteSizeLong(*((CoreML::Specification::ArrayFeatureType_ShapeRange **)this
                                                                           + 5));
  }
  else
  {
    if (v10 != 21) {
      goto LABEL_19;
    }
    uint64_t v11 = CoreML::Specification::ArrayFeatureType_EnumeratedShapes::ByteSizeLong(*((CoreML::Specification::ArrayFeatureType_EnumeratedShapes **)this
                                                                                 + 5));
  }
  v7 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_19:
  int v12 = *((_DWORD *)this + 16);
  switch(v12)
  {
    case '=':
      v7 += 10;
      break;
    case '3':
      v7 += 6;
      break;
    case ')':
      int v13 = *((_DWORD *)this + 12);
      if (v13 < 0) {
        uint64_t v14 = 12;
      }
      else {
        uint64_t v14 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 2;
      }
      v7 += v14;
      break;
  }
  *((_DWORD *)this + 14) = v7;
  return v7;
}

unint64_t *CoreML::Specification::ArrayFeatureType::MergeFrom(unint64_t *this, const CoreML::Specification::ArrayFeatureType *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v3 + 16), *(_DWORD *)(v3 + 16) + v5);
    this = (unint64_t *)memcpy((void *)(*(void *)(v3 + 24) + 8 * *(int *)(v3 + 16) + 8), (const void *)(*((void *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *(_DWORD *)(v3 + 16) += *((_DWORD *)a2 + 4);
  }
  int v6 = *((_DWORD *)a2 + 9);
  if (v6) {
    *(_DWORD *)(v3 + 36) = v6;
  }
  int v7 = *((_DWORD *)a2 + 15);
  if (v7 == 31)
  {
    if (*(_DWORD *)(v3 + 60) != 31)
    {
      CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility(v3);
      *(_DWORD *)(v3 + 60) = 31;
      operator new();
    }
    this = (unint64_t *)CoreML::Specification::ArrayFeatureType_ShapeRange::MergeFrom(*(std::string **)(v3 + 40), *((const CoreML::Specification::ArrayFeatureType_ShapeRange **)a2 + 5));
  }
  else if (v7 == 21)
  {
    if (*(_DWORD *)(v3 + 60) != 21)
    {
      CoreML::Specification::ArrayFeatureType::clear_ShapeFlexibility(v3);
      *(_DWORD *)(v3 + 60) = 21;
      operator new();
    }
    this = (unint64_t *)CoreML::Specification::ArrayFeatureType_EnumeratedShapes::MergeFrom(*(std::string **)(v3 + 40), *((const CoreML::Specification::ArrayFeatureType_EnumeratedShapes **)a2 + 5));
  }
  int v8 = *((_DWORD *)a2 + 16);
  switch(v8)
  {
    case '=':
      uint64_t v10 = *((void *)a2 + 6);
      if (*(_DWORD *)(v3 + 64) != 61) {
        *(_DWORD *)(v3 + 64) = 61;
      }
      *(void *)(v3 + 48) = v10;
      break;
    case '3':
      int v11 = *((_DWORD *)a2 + 12);
      if (*(_DWORD *)(v3 + 64) != 51) {
        *(_DWORD *)(v3 + 64) = 51;
      }
      *(_DWORD *)(v3 + 48) = v11;
      break;
    case ')':
      int v9 = *((_DWORD *)a2 + 12);
      if (*(_DWORD *)(v3 + 64) != 41) {
        *(_DWORD *)(v3 + 64) = 41;
      }
      *(_DWORD *)(v3 + 48) = v9;
      break;
  }
  return this;
}

void sub_2242B3260(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ArrayFeatureType::IsInitialized(CoreML::Specification::ArrayFeatureType *this)
{
  return 1;
}

void *CoreML::Specification::ArrayFeatureType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ArrayFeatureType");
}

CoreML::Specification::DictionaryFeatureType *CoreML::Specification::DictionaryFeatureType::DictionaryFeatureType(CoreML::Specification::DictionaryFeatureType *this)
{
  *(void *)this = &unk_26D777370;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::DictionaryFeatureType *)&CoreML::Specification::_DictionaryFeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_2242B3300(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DictionaryFeatureType::~DictionaryFeatureType(CoreML::Specification::DictionaryFeatureType *this)
{
  *(void *)this = &unk_26D777370;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::DictionaryFeatureType::~DictionaryFeatureType(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::DictionaryFeatureType::default_instance(CoreML::Specification::DictionaryFeatureType *this)
{
  return &CoreML::Specification::_DictionaryFeatureType_default_instance_;
}

void CoreML::Specification::DictionaryFeatureType::New(CoreML::Specification::DictionaryFeatureType *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B3424(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DictionaryFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DictionaryFeatureType>);
  }
  return result;
}

uint64_t CoreML::Specification::DictionaryFeatureType::MergePartialFromCodedStream(CoreML::Specification::DictionaryFeatureType *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_24;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_24;
      }
      if (*((_DWORD *)this + 7) != 2)
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        operator new();
      }
      int v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v19 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v19 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v17 = v19;
      uint64_t result = CoreML::Specification::StringFeatureType::MergePartialFromCodedStream((CoreML::Specification::StringFeatureType *)v19, a2, v20);
      if (!result) {
        return result;
      }
LABEL_37:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v17))return 0; {
    }
      }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      if (*((_DWORD *)this + 7) != 1)
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        operator new();
      }
      uint64_t v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        int v11 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v11 < 0) {
          return 0;
        }
      }
      else
      {
        int v11 = *v10;
        *a2 = v10 + 1;
      }
      unint64_t v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v11);
      if ((v15 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v17 = v15;
      uint64_t result = CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream((CoreML::Specification::Int64FeatureType *)v15, a2, v16);
      if (!result) {
        return result;
      }
      goto LABEL_37;
    }
LABEL_24:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_2242B3678(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DictionaryFeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DictionaryFeatureType::ByteSizeLong(CoreML::Specification::DictionaryFeatureType *this)
{
  int v1 = *((_DWORD *)this + 7);
  if (v1 == 2 || v1 == 1)
  {
    *(_DWORD *)(*((void *)this + 2) + 16) = 0;
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }
  *((_DWORD *)this + 6) = v2;
  return v2;
}

std::string *CoreML::Specification::DictionaryFeatureType::MergeFrom(std::string *this, const CoreML::Specification::DictionaryFeatureType *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 == 2)
  {
    if (*(_DWORD *)(v3 + 28) != 2)
    {
      CoreML::Specification::V5::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 2;
      operator new();
    }
  }
  else
  {
    if (v5 != 1) {
      return this;
    }
    if (*(_DWORD *)(v3 + 28) != 1)
    {
      CoreML::Specification::V5::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 1;
      operator new();
    }
  }
  uint64_t v6 = *(void *)(*((void *)a2 + 2) + 8);
  if (v6)
  {
    uint64_t v7 = (unint64_t *)(*(void *)(v3 + 16) + 8);
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v7, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

void sub_2242B3890(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DictionaryFeatureType::IsInitialized(CoreML::Specification::DictionaryFeatureType *this)
{
  return 1;
}

void *CoreML::Specification::DictionaryFeatureType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DictionaryFeatureType");
}

CoreML::Specification::SequenceFeatureType *CoreML::Specification::SequenceFeatureType::SequenceFeatureType(CoreML::Specification::SequenceFeatureType *this)
{
  *(void *)this = &unk_26D777408;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SequenceFeatureType *)&CoreML::Specification::_SequenceFeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_2242B3934(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SequenceFeatureType::~SequenceFeatureType(CoreML::Specification::SequenceFeatureType *this)
{
  *(void *)this = &unk_26D777408;
  CoreML::Specification::SequenceFeatureType::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::SequenceFeatureType::~SequenceFeatureType(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::SequenceFeatureType::SharedDtor(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_SequenceFeatureType_default_instance_)
  {
    this = (uint64_t *)this[2];
    if (this) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
  }
  if (*(_DWORD *)(v1 + 36))
  {
    return (uint64_t *)CoreML::Specification::SequenceFeatureType::clear_Type(v1);
  }
  return this;
}

uint64_t CoreML::Specification::SequenceFeatureType::clear_Type(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 36);
  if (v2 == 3 || v2 == 1)
  {
    this = *(void *)(this + 24);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t *CoreML::Specification::SequenceFeatureType::default_instance(CoreML::Specification::SequenceFeatureType *this)
{
  return &CoreML::Specification::_SequenceFeatureType_default_instance_;
}

void CoreML::Specification::SequenceFeatureType::New(CoreML::Specification::SequenceFeatureType *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B3B34(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SequenceFeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SequenceFeatureType>);
  }
  return result;
}

uint64_t CoreML::Specification::SequenceFeatureType::Clear(CoreML::Specification::SequenceFeatureType *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  return CoreML::Specification::SequenceFeatureType::clear_Type((uint64_t)this);
}

uint64_t CoreML::Specification::SequenceFeatureType::MergePartialFromCodedStream(CoreML::Specification::SequenceFeatureType *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      int v5 = *(unsigned __int8 **)a2;
      unint64_t v6 = *((void *)a2 + 1);
      if (*(void *)a2 >= v6)
      {
        uint64_t v8 = 0;
LABEL_47:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
        unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v9 & 0x100000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_8;
      }
      uint64_t v7 = v5 + 1;
      uint64_t v8 = *v5;
      if ((char)*v5 < 1)
      {
        if ((unint64_t)v7 < v6)
        {
          int v10 = *v7;
          if ((v8 & ~v10) >= 0x80)
          {
            *(void *)a2 = v5 + 2;
            unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
            goto LABEL_8;
          }
        }
        goto LABEL_47;
      }
      *(void *)a2 = v7;
      unint64_t v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_48;
      }
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 != 101) {
        break;
      }
      if (v9 != 42) {
        goto LABEL_48;
      }
      unint64_t v15 = (CoreML::Specification::SizeRange *)*((void *)this + 2);
      if (!v15) {
        operator new();
      }
      unsigned int v16 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v16 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v16;
        *(void *)a2 = v16 + 1;
      }
      unint64_t v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v20 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v22 = v20;
      uint64_t result = CoreML::Specification::SizeRange::MergePartialFromCodedStream(v15, (char **)a2, v21);
      if (!result) {
        return result;
      }
      double v24 = a2;
      int v25 = v22;
LABEL_44:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v24, v25)) {
        return 0;
      }
    }
    if (v11 == 3)
    {
      if (v9 != 26) {
        goto LABEL_48;
      }
      if (*((_DWORD *)this + 9) != 3)
      {
        CoreML::Specification::SequenceFeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        operator new();
      }
      unint64_t v18 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
      {
        int v19 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v19 < 0) {
          return 0;
        }
      }
      else
      {
        int v19 = *v18;
        *(void *)a2 = v18 + 1;
      }
      unint64_t v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v19);
      if ((v29 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v28 = v29;
      uint64_t result = CoreML::Specification::StringFeatureType::MergePartialFromCodedStream((CoreML::Specification::StringFeatureType *)v29, (char **)a2, v30);
      if (!result) {
        return result;
      }
      goto LABEL_43;
    }
    if (v11 == 1 && v9 == 10)
    {
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::SequenceFeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        operator new();
      }
      int v13 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v13 < 0)
      {
        int v14 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v14 < 0) {
          return 0;
        }
      }
      else
      {
        int v14 = *v13;
        *(void *)a2 = v13 + 1;
      }
      unint64_t v26 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v14);
      if ((v26 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v28 = v26;
      uint64_t result = CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream((CoreML::Specification::Int64FeatureType *)v26, (char **)a2, v27);
      if (!result) {
        return result;
      }
LABEL_43:
      double v24 = a2;
      int v25 = v28;
      goto LABEL_44;
    }
LABEL_48:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_2242B3EC4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SequenceFeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 3) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 24), a2, a4);
  }
  if ((uint64_t *)v5 != &CoreML::Specification::_SequenceFeatureType_default_instance_)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7)
    {
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, v7, a2, a4);
    }
  }
  return this;
}

CoreML::Specification::SizeRange *CoreML::Specification::SequenceFeatureType::ByteSizeLong(CoreML::Specification::SequenceFeatureType *this)
{
  if (this == (CoreML::Specification::SequenceFeatureType *)&CoreML::Specification::_SequenceFeatureType_default_instance_)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (CoreML::Specification::SizeRange *)*((void *)this + 2);
    if (result)
    {
      unint64_t v3 = CoreML::Specification::SizeRange::ByteSizeLong(result);
      uint64_t result = (CoreML::Specification::SizeRange *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 2);
    }
  }
  int v4 = *((_DWORD *)this + 9);
  if (v4 == 3 || v4 == 1)
  {
    *(_DWORD *)(*((void *)this + 3) + 16) = 0;
    uint64_t result = (CoreML::Specification::SizeRange *)((char *)result + 2);
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

std::string *CoreML::Specification::SequenceFeatureType::MergeFrom(std::string *this, const CoreML::Specification::SequenceFeatureType *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::SequenceFeatureType *)&CoreML::Specification::_SequenceFeatureType_default_instance_
    && v5 != 0)
  {
    uint64_t v7 = *(std::string **)(v3 + 16);
    if (!v7) {
      operator new();
    }
    if (v5) {
      uint64_t v8 = (const CoreML::Specification::ReverseSeqLayerParams *)*((void *)a2 + 2);
    }
    else {
      uint64_t v8 = (const CoreML::Specification::ReverseSeqLayerParams *)&CoreML::Specification::_SizeRange_default_instance_;
    }
    this = CoreML::Specification::ReverseSeqLayerParams::MergeFrom(v7, v8);
  }
  int v9 = *((_DWORD *)a2 + 9);
  if (v9 == 3)
  {
    if (*(_DWORD *)(v3 + 36) != 3)
    {
      CoreML::Specification::SequenceFeatureType::clear_Type(v3);
      *(_DWORD *)(v3 + 36) = 3;
      operator new();
    }
  }
  else
  {
    if (v9 != 1) {
      return this;
    }
    if (*(_DWORD *)(v3 + 36) != 1)
    {
      CoreML::Specification::SequenceFeatureType::clear_Type(v3);
      *(_DWORD *)(v3 + 36) = 1;
      operator new();
    }
  }
  uint64_t v10 = *(void *)(*((void *)a2 + 3) + 8);
  if (v10)
  {
    unsigned int v11 = (unint64_t *)(*(void *)(v3 + 24) + 8);
    return _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v11, v10 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

void sub_2242B41C8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40622C3295);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::SequenceFeatureType::IsInitialized(CoreML::Specification::SequenceFeatureType *this)
{
  return 1;
}

void *CoreML::Specification::SequenceFeatureType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SequenceFeatureType");
}

CoreML::Specification::FeatureType *CoreML::Specification::FeatureType::FeatureType(CoreML::Specification::FeatureType *this)
{
  *(void *)this = &unk_26D7774A0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureType *)&CoreML::Specification::_FeatureType_default_instance_) {
    CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(this);
  }
  *((unsigned char *)this + 16) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_2242B4280(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureType *CoreML::Specification::FeatureType::FeatureType(CoreML::Specification::FeatureType *this, const CoreML::Specification::FeatureType *a2)
{
  *(void *)this = &unk_26D7774A0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((_DWORD *)this + 9) = 0;
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 1;
      operator new();
    case 2:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 2;
      operator new();
    case 3:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 3;
      operator new();
    case 4:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 4;
      operator new();
    case 5:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 5;
      operator new();
    case 6:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 6;
      operator new();
    case 7:
      CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
      *((_DWORD *)this + 9) = 7;
      operator new();
    default:
      return this;
  }
}

void sub_2242B45C8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C40EE95837BLL);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FeatureType::~FeatureType(CoreML::Specification::FeatureType *this)
{
  *(void *)this = &unk_26D7774A0;
  if (*((_DWORD *)this + 9)) {
    CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::FeatureType::~FeatureType(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::FeatureType::clear_Type(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(void *)(this + 24);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

void CoreML::Specification::FeatureType::New(CoreML::Specification::FeatureType *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242B4804(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FeatureType>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureType>);
  }
  return result;
}

uint64_t CoreML::Specification::FeatureType::Clear(uint64_t this)
{
  *(unsigned char *)(this + 16) = 0;
  return CoreML::Specification::FeatureType::clear_Type(this);
}

uint64_t CoreML::Specification::FeatureType::MergePartialFromCodedStream(CoreML::Specification::FeatureType *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
LABEL_1:
    uint64_t v5 = *(unsigned __int8 **)a2;
    unint64_t v6 = *((void *)a2 + 1);
    if (*(void *)a2 >= v6)
    {
      uint64_t v8 = 0;
      goto LABEL_93;
    }
    uint64_t v7 = v5 + 1;
    uint64_t v8 = *v5;
    if ((char)*v5 >= 1)
    {
      *(void *)a2 = v7;
      unint64_t v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) != 0) {
        goto LABEL_8;
      }
      goto LABEL_94;
    }
    if ((unint64_t)v7 < v6)
    {
      int v10 = *v7;
      if ((v8 & ~v10) >= 0x80) {
        break;
      }
    }
LABEL_93:
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
    unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_8;
    }
LABEL_94:
    if (v9) {
      BOOL v52 = (v9 & 7) == 4;
    }
    else {
      BOOL v52 = 1;
    }
    if (v52) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
  }
    }
  *(void *)a2 = v5 + 2;
  unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
LABEL_8:
  switch(v9 >> 3)
  {
    case 1u:
      if (v9 != 10) {
        goto LABEL_94;
      }
      if (*((_DWORD *)this + 9) != 1)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 1;
        operator new();
      }
      unsigned int v11 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v11 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v11;
        *(void *)a2 = v11 + 1;
      }
      unint64_t v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v32 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v34 = v32;
      uint64_t result = CoreML::Specification::Int64FeatureType::MergePartialFromCodedStream((CoreML::Specification::Int64FeatureType *)v32, (char **)a2, v33);
      if (result) {
        goto LABEL_73;
      }
      break;
    case 2u:
      if (v9 != 18) {
        goto LABEL_94;
      }
      if (*((_DWORD *)this + 9) != 2)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 2;
        operator new();
      }
      unint64_t v15 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v15 < 0)
      {
        int v16 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v16 < 0) {
          return 0;
        }
      }
      else
      {
        int v16 = *v15;
        *(void *)a2 = v15 + 1;
      }
      unint64_t v36 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v16);
      if ((v36 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v34 = v36;
      uint64_t result = CoreML::Specification::DoubleFeatureType::MergePartialFromCodedStream((CoreML::Specification::DoubleFeatureType *)v36, (char **)a2, v37);
      if (result) {
        goto LABEL_73;
      }
      break;
    case 3u:
      if (v9 != 26) {
        goto LABEL_94;
      }
      if (*((_DWORD *)this + 9) != 3)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 3;
        operator new();
      }
      int v17 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v17 < 0)
      {
        int v18 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v18 < 0) {
          return 0;
        }
      }
      else
      {
        int v18 = *v17;
        *(void *)a2 = v17 + 1;
      }
      unint64_t v38 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v18);
      if ((v38 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v34 = v38;
      uint64_t result = CoreML::Specification::StringFeatureType::MergePartialFromCodedStream((CoreML::Specification::StringFeatureType *)v38, (char **)a2, v39);
      if (result)
      {
LABEL_73:
        unint64_t v40 = a2;
        int v41 = v34;
        goto LABEL_90;
      }
      break;
    case 4u:
      if (v9 != 34) {
        goto LABEL_94;
      }
      if (*((_DWORD *)this + 9) != 4)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 4;
        operator new();
      }
      int v19 = (CoreML::Specification::ImageFeatureType *)*((void *)this + 3);
      int v23 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v23 < 0)
      {
        int v24 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v24 < 0) {
          return 0;
        }
      }
      else
      {
        int v24 = *v23;
        *(void *)a2 = v23 + 1;
      }
      unint64_t v42 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v24);
      if ((v42 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v44 = v42;
      uint64_t result = CoreML::Specification::ImageFeatureType::MergePartialFromCodedStream(v19, a2, v43);
      if (result) {
        goto LABEL_89;
      }
      break;
    case 5u:
      if (v9 != 42) {
        goto LABEL_94;
      }
      if (*((_DWORD *)this + 9) != 5)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 5;
        operator new();
      }
      unint64_t v20 = (CoreML::Specification::ArrayFeatureType *)*((void *)this + 3);
      int v25 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v25 < 0)
      {
        int v26 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v26 < 0) {
          return 0;
        }
      }
      else
      {
        int v26 = *v25;
        *(void *)a2 = v25 + 1;
      }
      unint64_t v45 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v26);
      if ((v45 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v44 = v45;
      uint64_t result = CoreML::Specification::ArrayFeatureType::MergePartialFromCodedStream(v20, a2, v46);
      if (result) {
        goto LABEL_89;
      }
      break;
    case 6u:
      if (v9 != 50) {
        goto LABEL_94;
      }
      if (*((_DWORD *)this + 9) != 6)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 6;
        operator new();
      }
      unsigned int v21 = (CoreML::Specification::DictionaryFeatureType *)*((void *)this + 3);
      unsigned int v27 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v27 < 0)
      {
        int v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v28 < 0) {
          return 0;
        }
      }
      else
      {
        int v28 = *v27;
        *(void *)a2 = v27 + 1;
      }
      unint64_t v47 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v28);
      if ((v47 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v44 = v47;
      uint64_t result = CoreML::Specification::DictionaryFeatureType::MergePartialFromCodedStream(v21, (char **)a2, v48);
      if (result) {
        goto LABEL_89;
      }
      break;
    case 7u:
      if (v9 != 58) {
        goto LABEL_94;
      }
      if (*((_DWORD *)this + 9) != 7)
      {
        CoreML::Specification::FeatureType::clear_Type((uint64_t)this);
        *((_DWORD *)this + 9) = 7;
        operator new();
      }
      int v22 = (CoreML::Specification::SequenceFeatureType *)*((void *)this + 3);
      unint64_t v29 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v29 < 0)
      {
        int v30 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v30 < 0) {
          return 0;
        }
      }
      else
      {
        int v30 = *v29;
        *(void *)a2 = v29 + 1;
      }
      unint64_t v49 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v30);
      if ((v49 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v44 = v49;
      uint64_t result = CoreML::Specification::SequenceFeatureType::MergePartialFromCodedStream(v22, a2, v50);
      if (result)
      {
LABEL_89:
        unint64_t v40 = a2;
        int v41 = v44;
LABEL_90:
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(v40, v41)) {
          goto LABEL_1;
        }
        return 0;
      }
      break;
    default:
      if (v9 >> 3 != 1000 || v9 != 64) {
        goto LABEL_94;
      }
      int v13 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v13 < 0)
      {
        unint64_t Varint64Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
        if ((v31 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t Varint64Fallback = *v13;
        *(void *)a2 = v13 + 1;
      }
      *((unsigned char *)this + 16) = Varint64Fallback != 0;
      goto LABEL_1;
  }
  return result;
}

void sub_2242B4E6C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureType::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 3)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 4)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(void *)(v5 + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 5)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *(void *)(v5 + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 6)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)6, *(void *)(v5 + 24), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)7, *(void *)(v5 + 24), a2, a4);
  }
  if (*(unsigned char *)(v5 + 16))
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteBool(1000, 1u, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::FeatureType::ByteSizeLong(CoreML::Specification::FeatureType *this)
{
  if (*((unsigned char *)this + 16)) {
    uint64_t v2 = 3;
  }
  else {
    uint64_t v2 = 0;
  }
  switch(*((_DWORD *)this + 9))
  {
    case 1:
    case 2:
    case 3:
      *(_DWORD *)(*((void *)this + 3) + 16) = 0;
      v2 += 2;
      break;
    case 4:
      uint64_t v3 = CoreML::Specification::ImageFeatureType::ByteSizeLong(*((CoreML::Specification::ImageFeatureType **)this + 3));
      goto LABEL_12;
    case 5:
      uint64_t v3 = CoreML::Specification::ArrayFeatureType::ByteSizeLong(*((CoreML::Specification::ArrayFeatureType **)this + 3));
      goto LABEL_12;
    case 6:
      uint64_t v4 = *((void *)this + 3);
      int v5 = *(_DWORD *)(v4 + 28);
      if (v5 == 2 || v5 == 1)
      {
        *(_DWORD *)(*(void *)(v4 + 16) + 16) = 0;
        uint64_t v6 = 2;
      }
      else
      {
        uint64_t v6 = 0;
      }
      *(_DWORD *)(v4 + 24) = v6;
      v2 += v6 + 2;
      break;
    case 7:
      uint64_t v3 = (uint64_t)CoreML::Specification::SequenceFeatureType::ByteSizeLong(*((CoreML::Specification::SequenceFeatureType **)this
                                                                             + 3));
LABEL_12:
      v2 += v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
      break;
    default:
      break;
  }
  *((_DWORD *)this + 8) = v2;
  return v2;
}

std::string *CoreML::Specification::FeatureType::MergeFrom(std::string *this, const CoreML::Specification::FeatureType *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (*((unsigned char *)a2 + 16)) {
    *(unsigned char *)(v3 + 16) = 1;
  }
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      if (*(_DWORD *)(v3 + 36) != 1)
      {
        CoreML::Specification::FeatureType::clear_Type(v3);
        *(_DWORD *)(v3 + 36) = 1;
        operator new();
      }
      goto LABEL_11;
    case 2:
      if (*(_DWORD *)(v3 + 36) != 2)
      {
        CoreML::Specification::FeatureType::clear_Type(v3);
        *(_DWORD *)(v3 + 36) = 2;
        operator new();
      }
      goto LABEL_11;
    case 3:
      if (*(_DWORD *)(v3 + 36) != 3)
      {
        CoreML::Specification::FeatureType::clear_Type(v3);
        *(_DWORD *)(v3 + 36) = 3;
        operator new();
      }
LABEL_11:
      uint64_t v5 = *(void *)(*((void *)a2 + 3) + 8);
      if (v5)
      {
        uint64_t v6 = (unint64_t *)(*(void *)(v3 + 24) + 8);
        this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v6, v5 & 0xFFFFFFFFFFFFFFFELL);
      }
      break;
    case 4:
      if (*(_DWORD *)(v3 + 36) != 4)
      {
        CoreML::Specification::FeatureType::clear_Type(v3);
        *(_DWORD *)(v3 + 36) = 4;
        operator new();
      }
      uint64_t v7 = (const CoreML::Specification::ImageFeatureType *)*((void *)a2 + 3);
      unsigned int v11 = *(std::string **)(v3 + 24);
      this = CoreML::Specification::ImageFeatureType::MergeFrom(v11, v7);
      break;
    case 5:
      if (*(_DWORD *)(v3 + 36) != 5)
      {
        CoreML::Specification::FeatureType::clear_Type(v3);
        *(_DWORD *)(v3 + 36) = 5;
        operator new();
      }
      uint64_t v8 = (const CoreML::Specification::ArrayFeatureType *)*((void *)a2 + 3);
      int v12 = *(unint64_t **)(v3 + 24);
      this = (std::string *)CoreML::Specification::ArrayFeatureType::MergeFrom(v12, v8);
      break;
    case 6:
      if (*(_DWORD *)(v3 + 36) != 6)
      {
        CoreML::Specification::FeatureType::clear_Type(v3);
        *(_DWORD *)(v3 + 36) = 6;
        operator new();
      }
      unint64_t v9 = (const CoreML::Specification::DictionaryFeatureType *)*((void *)a2 + 3);
      int v13 = *(std::string **)(v3 + 24);
      this = CoreML::Specification::DictionaryFeatureType::MergeFrom(v13, v9);
      break;
    case 7:
      if (*(_DWORD *)(v3 + 36) != 7)
      {
        CoreML::Specification::FeatureType::clear_Type(v3);
        *(_DWORD *)(v3 + 36) = 7;
        operator new();
      }
      int v10 = (const CoreML::Specification::SequenceFeatureType *)*((void *)a2 + 3);
      int v14 = *(std::string **)(v3 + 24);
      this = CoreML::Specification::SequenceFeatureType::MergeFrom(v14, v10);
      break;
    default:
      return this;
  }
  return this;
}

void sub_2242B5538(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40EE95837BLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureType::IsInitialized(CoreML::Specification::FeatureType *this)
{
  return 1;
}

void *CoreML::Specification::FeatureType::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureType");
}

void CoreML::Specification::Int64FeatureType::New(CoreML::Specification::Int64FeatureType *this)
{
}

void CoreML::Specification::DoubleFeatureType::New(CoreML::Specification::DoubleFeatureType *this)
{
}

void CoreML::Specification::StringFeatureType::New(CoreML::Specification::StringFeatureType *this)
{
}

void CoreML::Specification::SizeRange::New(CoreML::Specification::SizeRange *this)
{
}

void CoreML::Specification::ImageFeatureType_ImageSize::New(CoreML::Specification::ImageFeatureType_ImageSize *this)
{
}

void CoreML::Specification::ImageFeatureType_EnumeratedImageSizes::New(CoreML::Specification::ImageFeatureType_EnumeratedImageSizes *this)
{
}

void CoreML::Specification::ImageFeatureType_ImageSizeRange::New(CoreML::Specification::ImageFeatureType_ImageSizeRange *this)
{
}

void CoreML::Specification::ImageFeatureType::New(CoreML::Specification::ImageFeatureType *this)
{
}

void CoreML::Specification::ArrayFeatureType_Shape::New(CoreML::Specification::ArrayFeatureType_Shape *this)
{
}

void CoreML::Specification::ArrayFeatureType_EnumeratedShapes::New(CoreML::Specification::ArrayFeatureType_EnumeratedShapes *this)
{
}

void CoreML::Specification::ArrayFeatureType_ShapeRange::New(CoreML::Specification::ArrayFeatureType_ShapeRange *this)
{
}

void CoreML::Specification::ArrayFeatureType::New(CoreML::Specification::ArrayFeatureType *this)
{
}

void CoreML::Specification::DictionaryFeatureType::New(CoreML::Specification::DictionaryFeatureType *this)
{
}

void CoreML::Specification::SequenceFeatureType::New(CoreML::Specification::SequenceFeatureType *this)
{
}

void CoreML::Specification::FeatureType::New(CoreML::Specification::FeatureType *this)
{
}

CoreML::Specification::ImageFeatureType_ImageSize *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ImageFeatureType_ImageSize>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  uint64_t v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    uint64_t v2 = (int *)*((void *)this + 2);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *((int *)this + 2);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::ImageFeatureType_ImageSize **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ImageFeatureType_ImageSize>);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2242B576C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ImageFeatureType_ImageSize>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::ArrayFeatureType_Shape *_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ArrayFeatureType_Shape>::TypeHandler>(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  uint64_t v2 = (int *)*((void *)this + 2);
  if (!v2)
  {
    int v4 = *((_DWORD *)this + 3);
LABEL_6:
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this, v4 + 1);
    uint64_t v2 = (int *)*((void *)this + 2);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *((int *)this + 2);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *((_DWORD *)this + 2) = v3 + 1;
    return *(CoreML::Specification::ArrayFeatureType_Shape **)&v2[2 * v3 + 2];
  }
  if (v4 == *((_DWORD *)this + 3)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v2 = v4 + 1;
  uint64_t v6 = *(_tc_google::protobuf::Arena **)this;
  if (!*(void *)this) {
    operator new();
  }
  CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(Aligned);
  _tc_google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ArrayFeatureType_Shape>);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v8 = *((int *)this + 2);
  *((_DWORD *)this + 2) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_2242B58B8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ArrayFeatureType_Shape>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64FeatureType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleFeatureType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringFeatureType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SizeRange>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_ImageSize>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_EnumeratedImageSizes>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ImageFeatureType_ImageSize>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::ReverseSeqLayerParams **a3, unsigned int a4, unsigned int a5)
{
  unint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    int v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::ImageFeatureType_ImageSize **)&a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::ImageFeatureType_ImageSize::ImageFeatureType_ImageSize(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ImageFeatureType_ImageSize>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_2242B5B14(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType_ImageSizeRange>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ImageFeatureType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_Shape>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_EnumeratedShapes>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

unint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::ArrayFeatureType_Shape>::TypeHandler>(unint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, unsigned int a4, unsigned int a5)
{
  unint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    int v19 = &a3[a5];
    unint64_t v20 = &a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::ArrayFeatureType_Shape::ArrayFeatureType_Shape(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::ArrayFeatureType_Shape>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_2242B5CF4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType_ShapeRange>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::SizeRange>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::ReverseSeqLayerParams **a3, unsigned int a4, unsigned int a5)
{
  unint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    int v12 = a2;
    do
    {
      int v14 = *v11++;
      int v13 = v14;
      unint64_t v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    int v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::SizeRange **)&a2[a5];
    do
    {
      unsigned int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::SizeRange::SizeRange(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::SizeRange>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::BorderAmounts_EdgeSizes>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_2242B5E50(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ArrayFeatureType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DictionaryFeatureType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SequenceFeatureType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FeatureType>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *jinit_color_deconverter(uint64_t a1)
{
  uint64_t result = (void *)(**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v3 = result;
  *(void *)(a1 + 648) = result;
  *uint64_t result = start_pass_dcolor;
  unsigned int v4 = *(_DWORD *)(a1 + 60);
  if (v4 > 7) {
    goto LABEL_34;
  }
  if (((1 << v4) & 0xCC) == 0)
  {
    if (((1 << v4) & 0x30) != 0)
    {
      if (*(_DWORD *)(a1 + 56) == 4) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    if (v4 == 1)
    {
      if (*(_DWORD *)(a1 + 56) == 1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
LABEL_34:
    if (*(int *)(a1 + 56) > 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (*(_DWORD *)(a1 + 56) != 3)
  {
LABEL_4:
    uint64_t v5 = *(void *)a1;
    *(_DWORD *)(v5 + 4CoreML::Specification::FeatureType::New(this, 0) = 11;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))v5)(a1);
  }
LABEL_5:
  if (*(_DWORD *)(a1 + 396) && (*(_DWORD *)(a1 + 60) | 4) != 6)
  {
    uint64_t v6 = *(void *)a1;
    *(_DWORD *)(v6 + 4CoreML::Specification::FeatureType::New(this, 0) = 28;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))v6)(a1);
  }
  int v7 = *(_DWORD *)(a1 + 64);
  switch(v7)
  {
    case 1:
      *(_DWORD *)(a1 + 144) = 1;
      switch(*(_DWORD *)(a1 + 60))
      {
        case 1:
        case 3:
        case 7:
          v3[1] = grayscale_convert;
          uint64_t v8 = *(unsigned int *)(a1 + 56);
          if ((int)v8 >= 2)
          {
            unint64_t v9 = (_DWORD *)(*(void *)(a1 + 304) + 148);
            uint64_t v10 = v8 - 1;
            do
            {
              *unint64_t v9 = 0;
              v9 += 24;
              --v10;
            }
            while (v10);
          }
          goto LABEL_46;
        case 2:
          int v17 = *(_DWORD *)(a1 + 396);
          if (v17 == 1)
          {
            int v18 = rgb1_gray_convert;
            goto LABEL_54;
          }
          if (!v17)
          {
            int v18 = rgb_gray_convert;
LABEL_54:
            v3[1] = v18;
            goto LABEL_56;
          }
          uint64_t v31 = *(void *)a1;
          *(_DWORD *)(v31 + 4CoreML::Specification::FeatureType::New(this, 0) = 28;
          (*(void (**)(uint64_t))v31)(a1);
LABEL_56:
          uint64_t v32 = *(void *)(a1 + 648);
          uint64_t result = (void *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 6144);
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          *(void *)(v32 + 48) = result;
          uint64_t v36 = 0x8000;
          do
          {
            unsigned int v37 = &result[v35];
            void *v37 = v33;
            ++v35;
            v37[256] = v34;
            v37[512] = v36;
            v36 += 7471;
            v34 += 38470;
            v33 += 19595;
          }
          while (v35 != 256);
LABEL_46:
          if (*(_DWORD *)(a1 + 108)) {
            int v21 = 1;
          }
          else {
            int v21 = *(_DWORD *)(a1 + 144);
          }
          *(_DWORD *)(a1 + 148) = v21;
          return result;
        default:
          goto LABEL_43;
      }
    case 2:
      *(_DWORD *)(a1 + 144) = 3;
      switch(*(_DWORD *)(a1 + 60))
      {
        case 1:
          int v13 = gray_rgb_convert;
          goto LABEL_45;
        case 2:
          int v19 = *(_DWORD *)(a1 + 396);
          if (v19 == 1) {
            goto LABEL_44;
          }
          if (v19) {
            goto LABEL_43;
          }
          goto LABEL_30;
        case 3:
          int v12 = ycc_rgb_convert;
          goto LABEL_40;
        case 7:
          v3[1] = ycc_rgb_convert;
          int v22 = *(void **)(a1 + 648);
          v22[2] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
          v22[3] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
          v22[4] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
          uint64_t result = (void *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
          uint64_t v23 = 0;
          v22[5] = result;
          uint64_t v24 = v22[2];
          uint64_t v25 = v22[3];
          unint64_t v26 = -29696512;
          unint64_t v27 = -23488896;
          uint64_t v28 = 5806464;
          uint64_t v29 = 11981184;
          uint64_t v30 = v22[4];
          do
          {
            *(_DWORD *)(v24 + 4 * v23) = v27 >> 16;
            *(_DWORD *)(v25 + 4 * v23) = v26 >> 16;
            *(void *)(v30 + 8 * v23) = v29;
            result[v23++] = v28;
            v28 -= 45107;
            v29 -= 93603;
            v26 += 232260;
            v27 += 183763;
          }
          while (v23 != 256);
          goto LABEL_46;
        default:
          goto LABEL_43;
      }
    case 4:
      *(_DWORD *)(a1 + 144) = 4;
      int v11 = *(_DWORD *)(a1 + 60);
      if (v11 == 4) {
        goto LABEL_25;
      }
      if (v11 != 5) {
        goto LABEL_43;
      }
      int v12 = ycck_cmyk_convert;
LABEL_40:
      v3[1] = v12;
      uint64_t result = (void *)build_ycc_rgb_table(a1);
      goto LABEL_46;
    case 6:
      *(_DWORD *)(a1 + 144) = 3;
      if (*(_DWORD *)(a1 + 60) != 6)
      {
        uint64_t v15 = *(void *)a1;
        *(_DWORD *)(v15 + 4CoreML::Specification::FeatureType::New(this, 0) = 28;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))v15)(a1);
      }
      int v16 = *(_DWORD *)(a1 + 396);
      if (v16 == 1)
      {
LABEL_44:
        int v13 = rgb1_rgb_convert;
      }
      else
      {
        if (v16)
        {
LABEL_43:
          uint64_t v20 = *(void *)a1;
          *(_DWORD *)(v20 + 4CoreML::Specification::FeatureType::New(this, 0) = 28;
          uint64_t result = (void *)(*(uint64_t (**)(uint64_t))v20)(a1);
          goto LABEL_46;
        }
LABEL_30:
        int v13 = rgb_convert;
      }
LABEL_45:
      v3[1] = v13;
      goto LABEL_46;
    default:
      if (v7 != *(_DWORD *)(a1 + 60))
      {
        uint64_t v14 = *(void *)a1;
        *(_DWORD *)(v14 + 4CoreML::Specification::FeatureType::New(this, 0) = 28;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t))v14)(a1);
      }
      *(_DWORD *)(a1 + 144) = *(_DWORD *)(a1 + 56);
LABEL_25:
      int v13 = null_convert;
      goto LABEL_45;
  }
}

char *grayscale_convert(uint64_t a1, char **a2, int a3, uint64_t a4, int a5)
{
  return jcopy_sample_rows(*a2, a3, a4, 0, a5, *(unsigned int *)(a1 + 136));
}

uint64_t rgb_gray_convert(uint64_t result, void *a2, unsigned int a3, void *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(void *)(*(void *)(result + 648) + 48);
    uint64_t v6 = *(unsigned int *)(result + 136);
    do
    {
      uint64_t v8 = (unsigned char *)*a4++;
      int v7 = v8;
      if (v6)
      {
        unint64_t v9 = *(unsigned __int8 **)(*a2 + 8 * a3);
        uint64_t v10 = *(unsigned __int8 **)(a2[1] + 8 * a3);
        int v11 = *(unsigned __int8 **)(a2[2] + 8 * a3);
        uint64_t v12 = v6;
        do
        {
          unsigned int v14 = *v9++;
          uint64_t v13 = v14;
          unsigned int v16 = *v10++;
          uint64_t v15 = v16;
          unsigned int v17 = *v11++;
          *v7++ = (*(_DWORD *)(v5 + 8 * v15 + 2048)
                 + *(void *)(v5 + 8 * v13)
                 + *(_DWORD *)(v5 + 8 * v17 + 4096)) >> 16;
          --v12;
        }
        while (v12);
      }
      ++a3;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t rgb1_gray_convert(uint64_t result, void *a2, unsigned int a3, void *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(void *)(*(void *)(result + 648) + 48);
    uint64_t v6 = *(unsigned int *)(result + 136);
    do
    {
      uint64_t v8 = (unsigned char *)*a4++;
      int v7 = v8;
      if (v6)
      {
        unint64_t v9 = *(char **)(*a2 + 8 * a3);
        uint64_t v10 = *(unsigned __int8 **)(a2[1] + 8 * a3);
        int v11 = *(unsigned char **)(a2[2] + 8 * a3);
        uint64_t v12 = v6;
        do
        {
          char v14 = *v9++;
          char v13 = v14;
          unsigned int v16 = *v10++;
          uint64_t v15 = v16;
          LOBYTE(v16) = *v11++;
          uint64_t result = v15 ^ 0xFFFFFF80;
          *v7++ = (*(_DWORD *)(v5 + 8 * v15 + 2048)
                 + *(void *)(v5 + 8 * ((v15 ^ 0x80) + v13))
                 + *(_DWORD *)(v5 + 8 * ((v15 ^ 0x80) + v16) + 4096)) >> 16;
          --v12;
        }
        while (v12);
      }
      ++a3;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t gray_rgb_convert(uint64_t result, void *a2, unsigned int a3, void *a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 136);
    do
    {
      if (v5)
      {
        uint64_t v6 = *(char **)(*a2 + 8 * a3);
        int v7 = (unsigned char *)(*a4 + 2);
        uint64_t v8 = v5;
        do
        {
          char v9 = *v6++;
          *int v7 = v9;
          *(v7 - 1) = v9;
          *(v7 - 2) = v9;
          v7 += 3;
          --v8;
        }
        while (v8);
      }
      ++a3;
      ++a4;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t ycc_rgb_convert(uint64_t result, void *a2, unsigned int a3, unsigned char **a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(void **)(result + 648);
    uint64_t v6 = *(void *)(result + 440);
    uint64_t v7 = v5[2];
    uint64_t v8 = v5[3];
    uint64_t v9 = v5[4];
    uint64_t v10 = v5[5];
    uint64_t v11 = *(unsigned int *)(result + 136);
    do
    {
      if (v11)
      {
        uint64_t v12 = *(unsigned __int8 **)(*a2 + 8 * a3);
        char v13 = *(unsigned __int8 **)(a2[1] + 8 * a3);
        char v14 = *(unsigned __int8 **)(a2[2] + 8 * a3);
        uint64_t v15 = *a4;
        uint64_t result = v11;
        do
        {
          unsigned int v17 = *v12++;
          uint64_t v16 = v17;
          unsigned int v19 = *v13++;
          uint64_t v18 = v19;
          unsigned int v20 = *v14++;
          *uint64_t v15 = *(unsigned char *)(v6 + *(int *)(v7 + 4 * v20) + v16);
          v15[1] = *(unsigned char *)(v6 + v16 + (int)((*(void *)(v9 + 8 * v20) + *(void *)(v10 + 8 * v18)) >> 16));
          void v15[2] = *(unsigned char *)(v6 + *(int *)(v8 + 4 * v18) + v16);
          v15 += 3;
          --result;
        }
        while (result);
      }
      ++a3;
      ++a4;
      BOOL v22 = __OFSUB__(a5, 2);
      BOOL v21 = a5 - 2 < 0;
      --a5;
    }
    while (v21 == v22);
  }
  return result;
}

uint64_t build_ycc_rgb_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 648);
  void v2[2] = (**(uint64_t (***)(void))(a1 + 8))();
  v2[3] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v2[4] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  uint64_t v4 = 0;
  v2[5] = result;
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  unint64_t v7 = -11728000;
  unint64_t v8 = -14831872;
  uint64_t v9 = 5990656;
  uint64_t v10 = 2919552;
  uint64_t v11 = v2[4];
  do
  {
    *(_DWORD *)(v5 + 4 * v4) = v7 >> 16;
    *(_DWORD *)(v6 + 4 * v4) = v8 >> 16;
    *(void *)(v11 + 8 * v4) = v9;
    *(void *)(result + 8 * v4++) = v10;
    v7 += 91881;
    v8 += 116130;
    v9 -= 46802;
    v10 -= 22553;
  }
  while (v4 != 256);
  return result;
}

uint64_t rgb_convert(uint64_t result, void *a2, unsigned int a3, unsigned char **a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 136);
    do
    {
      if (v5)
      {
        uint64_t v6 = *(char **)(*a2 + 8 * a3);
        unint64_t v7 = *(char **)(a2[1] + 8 * a3);
        unint64_t v8 = *(char **)(a2[2] + 8 * a3);
        uint64_t v9 = *a4;
        uint64_t v10 = v5;
        do
        {
          char v11 = *v6++;
          *uint64_t v9 = v11;
          char v12 = *v7++;
          v9[1] = v12;
          char v13 = *v8++;
          v9[2] = v13;
          v9 += 3;
          --v10;
        }
        while (v10);
      }
      ++a3;
      ++a4;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t rgb1_rgb_convert(uint64_t result, void *a2, unsigned int a3, unsigned char **a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(unsigned int *)(result + 136);
    do
    {
      if (v5)
      {
        uint64_t v6 = *(char **)(*a2 + 8 * a3);
        unint64_t v7 = *(char **)(a2[1] + 8 * a3);
        unint64_t v8 = *(char **)(a2[2] + 8 * a3);
        uint64_t v9 = *a4;
        uint64_t v10 = v5;
        do
        {
          char v12 = *v6++;
          char v11 = v12;
          char v14 = *v7++;
          char v13 = v14;
          char v15 = *v8++;
          *uint64_t v9 = (v13 + v11) ^ 0x80;
          v9[1] = v13;
          v9[2] = (v15 + v13) ^ 0x80;
          v9 += 3;
          --v10;
        }
        while (v10);
      }
      ++a3;
      ++a4;
    }
    while (a5-- >= 2);
  }
  return result;
}

uint64_t ycck_cmyk_convert(uint64_t result, void *a2, unsigned int a3, unsigned char **a4, int a5)
{
  if (a5 >= 1)
  {
    uint64_t v5 = *(void **)(result + 648);
    uint64_t v6 = *(void *)(result + 440);
    uint64_t v7 = v5[2];
    uint64_t v8 = v5[3];
    uint64_t v9 = v5[4];
    uint64_t v10 = v5[5];
    uint64_t v11 = *(unsigned int *)(result + 136);
    do
    {
      if (v11)
      {
        char v12 = *(unsigned __int8 **)(*a2 + 8 * a3);
        char v13 = *(unsigned __int8 **)(a2[1] + 8 * a3);
        char v14 = *(unsigned __int8 **)(a2[2] + 8 * a3);
        char v15 = *(unsigned char **)(a2[3] + 8 * a3);
        uint64_t result = v11;
        uint64_t v16 = *a4;
        do
        {
          int v18 = *v12++;
          int v17 = v18;
          unsigned int v20 = *v13++;
          uint64_t v19 = v20;
          unsigned int v21 = *v14++;
          v17 ^= 0xFFu;
          *uint64_t v16 = *(unsigned char *)(v6 + v17 - *(_DWORD *)(v7 + 4 * v21));
          v16[1] = *(unsigned char *)(v6 + (int)(v17 - ((*(void *)(v9 + 8 * v21) + *(void *)(v10 + 8 * v19)) >> 16)));
          void v16[2] = *(unsigned char *)(v6 + v17 - *(_DWORD *)(v8 + 4 * v19));
          LOBYTE(v21) = *v15++;
          void v16[3] = v21;
          v16 += 4;
          --result;
        }
        while (result);
      }
      ++a3;
      ++a4;
      BOOL v23 = __OFSUB__(a5, 2);
      BOOL v22 = a5 - 2 < 0;
      --a5;
    }
    while (v22 == v23);
  }
  return result;
}

uint64_t null_convert(uint64_t result, uint64_t a2, unsigned int a3, uint64_t *a4, int a5)
{
  if (a5 >= 1)
  {
    int v5 = *(_DWORD *)(result + 136);
    uint64_t v6 = *(unsigned int *)(result + 56);
    int v7 = *(_DWORD *)(result + 56);
    do
    {
      if (v7 >= 1)
      {
        uint64_t v8 = 0;
        do
        {
          if (v5)
          {
            uint64_t v9 = *a4;
            uint64_t v10 = *(char **)(*(void *)(a2 + 8 * v8) + 8 * a3);
            int v11 = v5;
            do
            {
              char v12 = *v10++;
              *(unsigned char *)(v9 + v8) = v12;
              v9 += (int)v6;
              --v11;
            }
            while (v11);
          }
          ++v8;
        }
        while (v8 != v6);
      }
      ++a3;
      ++a4;
    }
    while (a5-- > 1);
  }
  return result;
}

__n128 jinit_inverse_dct(uint64_t a1)
{
  uint64_t v2 = (uint64_t (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 632) = v2;
  void *v2 = start_pass;
  if (*(int *)(a1 + 56) >= 1)
  {
    uint64_t v4 = 0;
    int v5 = v2 + 11;
    uint64_t v6 = (void *)(*(void *)(a1 + 304) + 88);
    do
    {
      int v7 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
      void *v6 = v7;
      v6 += 12;
      __n128 result = 0uLL;
      *int v7 = 0u;
      v7[1] = 0u;
      v7[2] = 0u;
      void v7[3] = 0u;
      v7[4] = 0u;
      v7[5] = 0u;
      v7[6] = 0u;
      v7[7] = 0u;
      v7[8] = 0u;
      v7[9] = 0u;
      v7[10] = 0u;
      v7[11] = 0u;
      v7[12] = 0u;
      v7[13] = 0u;
      v7[14] = 0u;
      v7[15] = 0u;
      *((_DWORD *)v5 + v4++) = -1;
    }
    while (v4 < *(int *)(a1 + 56));
  }
  return result;
}

uint64_t start_pass(uint64_t result)
{
  if (*(int *)(result + 56) >= 1)
  {
    uint64_t v1 = (int *)result;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    uint64_t v5 = *(void *)(result + 632);
    uint64_t v6 = *(void *)(result + 304);
    float64x2_t v8 = (float64x2_t)xmmword_2246ED3A0;
    float64x2_t v7 = (float64x2_t)unk_2246ED3B0;
    float64x2_t v10 = (float64x2_t)start_pass_aanscalefactor;
    float64x2_t v9 = (float64x2_t)unk_2246ED390;
    __asm { FMOV            V17.2D, #0.125 }
    float64x2_t v51 = _Q17;
    do
    {
      int v16 = *(_DWORD *)(v6 + 36);
      int v17 = *(_DWORD *)(v6 + 40) + (v16 << 8);
      int v18 = (uint64_t (*)())jpeg_idct_1x1;
      if (v17 > 1805)
      {
        if (v17 > 3077)
        {
          if (v17 > 3597)
          {
            if (v17 > 4103)
            {
              if (v17 == 4104)
              {
                int v4 = 0;
                int v18 = (uint64_t (*)())jpeg_idct_16x8;
                goto LABEL_83;
              }
              if (v17 == 4112)
              {
                int v4 = 0;
                int v18 = (uint64_t (*)())jpeg_idct_16x16;
                goto LABEL_83;
              }
            }
            else
            {
              if (v17 == 3598)
              {
                int v4 = 0;
                int v18 = (uint64_t (*)())jpeg_idct_14x14;
                goto LABEL_83;
              }
              if (v17 == 3855)
              {
                int v4 = 0;
                int v18 = (uint64_t (*)())jpeg_idct_15x15;
                goto LABEL_83;
              }
            }
          }
          else if (v17 > 3340)
          {
            if (v17 == 3341)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_13x13;
              goto LABEL_83;
            }
            if (v17 == 3591)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_14x7;
              goto LABEL_83;
            }
          }
          else
          {
            if (v17 == 3078)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_12x6;
              goto LABEL_83;
            }
            if (v17 == 3084)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_12x12;
              goto LABEL_83;
            }
          }
        }
        else if (v17 > 2312)
        {
          if (v17 > 2569)
          {
            if (v17 == 2570)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_10x10;
              goto LABEL_83;
            }
            if (v17 == 2827)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_11x11;
              goto LABEL_83;
            }
          }
          else
          {
            if (v17 == 2313)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_9x9;
              goto LABEL_83;
            }
            if (v17 == 2565)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_10x5;
              goto LABEL_83;
            }
          }
        }
        else if (v17 > 2055)
        {
          if (v17 == 2056)
          {
            unsigned int v19 = v1[24];
            if (v19 < 3)
            {
              uint64_t v3 = off_26D777690[v19];
              int v4 = v1[24];
              goto LABEL_84;
            }
            unsigned int v50 = *(uint64_t (***)(int *))v1;
            *(_DWORD *)(*(void *)v1 + 4CoreML::Specification::FeatureType::New(this, 0) = 49;
            goto LABEL_104;
          }
          if (v17 == 2064)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_8x16;
            goto LABEL_83;
          }
        }
        else
        {
          if (v17 == 1806)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_7x14;
            goto LABEL_83;
          }
          if (v17 == 2052)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_8x4;
            goto LABEL_83;
          }
        }
      }
      else if (v17 > 1027)
      {
        if (v17 > 1538)
        {
          if (v17 > 1547)
          {
            if (v17 == 1548)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_6x12;
              goto LABEL_83;
            }
            if (v17 == 1799)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_7x7;
              goto LABEL_83;
            }
          }
          else
          {
            if (v17 == 1539)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_6x3;
              goto LABEL_83;
            }
            if (v17 == 1542)
            {
              int v4 = 0;
              int v18 = (uint64_t (*)())jpeg_idct_6x6;
              goto LABEL_83;
            }
          }
        }
        else if (v17 > 1284)
        {
          if (v17 == 1285)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_5x5;
            goto LABEL_83;
          }
          if (v17 == 1290)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_5x10;
            goto LABEL_83;
          }
        }
        else
        {
          if (v17 == 1028)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_4x4;
            goto LABEL_83;
          }
          if (v17 == 1032)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_4x8;
            goto LABEL_83;
          }
        }
      }
      else if (v17 > 515)
      {
        if (v17 > 773)
        {
          if (v17 == 774)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_3x6;
            goto LABEL_83;
          }
          if (v17 == 1026)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_4x2;
            goto LABEL_83;
          }
        }
        else
        {
          if (v17 == 516)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_2x4;
            goto LABEL_83;
          }
          if (v17 == 771)
          {
            int v4 = 0;
            int v18 = (uint64_t (*)())jpeg_idct_3x3;
            goto LABEL_83;
          }
        }
      }
      else if (v17 > 512)
      {
        if (v17 == 513)
        {
          int v4 = 0;
          int v18 = (uint64_t (*)())jpeg_idct_2x1;
          goto LABEL_83;
        }
        if (v17 == 514)
        {
          int v4 = 0;
          int v18 = (uint64_t (*)())jpeg_idct_2x2;
          goto LABEL_83;
        }
      }
      else
      {
        if (v17 == 257)
        {
          int v4 = 0;
          goto LABEL_83;
        }
        if (v17 == 258)
        {
          int v4 = 0;
          int v18 = (uint64_t (*)())jpeg_idct_1x2;
LABEL_83:
          uint64_t v3 = v18;
          goto LABEL_84;
        }
      }
      unint64_t v49 = *(uint64_t (***)(int *))v1;
      *((_DWORD *)v49 + 1CoreML::Specification::FeatureType::New(this, 0) = 7;
      *((_DWORD *)v49 + 11) = v16;
      *(_DWORD *)(*(void *)v1 + 48) = *(_DWORD *)(v6 + 40);
      unsigned int v50 = *(uint64_t (***)(int *))v1;
LABEL_104:
      __n128 result = (*v50)(v1);
      _Q17 = v51;
      float64x2_t v10 = (float64x2_t)start_pass_aanscalefactor;
      float64x2_t v9 = (float64x2_t)unk_2246ED390;
      float64x2_t v8 = (float64x2_t)xmmword_2246ED3A0;
      float64x2_t v7 = (float64x2_t)unk_2246ED3B0;
LABEL_84:
      *(void *)(v5 + 8 * v2 + 8) = v3;
      if (*(_DWORD *)(v6 + 52))
      {
        uint64_t v20 = v5 + 4 * v2;
        int v22 = *(_DWORD *)(v20 + 88);
        unsigned int v21 = (int *)(v20 + 88);
        if (v22 != v4)
        {
          uint64_t v23 = *(void *)(v6 + 80);
          if (v23)
          {
            *unsigned int v21 = v4;
            if (v4 == 2)
            {
              uint64_t v27 = 0;
              int v28 = 0;
              uint64_t v29 = *(void *)(v6 + 88);
              do
              {
                double v30 = *(double *)((char *)&start_pass_aanscalefactor + v27);
                int v31 = v28 + 8;
                uint16x8_t v32 = *(uint16x8_t *)(v23 + 2 * v28);
                uint32x4_t v33 = vmovl_u16(*(uint16x4_t *)v32.i8);
                v34.i64[0] = v33.u32[0];
                v34.i64[1] = v33.u32[1];
                float64x2_t v35 = vcvtq_f64_u64(v34);
                v34.i64[0] = v33.u32[2];
                v34.i64[1] = v33.u32[3];
                float64x2_t v36 = vcvtq_f64_u64(v34);
                uint32x4_t v37 = vmovl_high_u16(v32);
                v34.i64[0] = v37.u32[0];
                v34.i64[1] = v37.u32[1];
                float64x2_t v38 = vcvtq_f64_u64(v34);
                v34.i64[0] = v37.u32[2];
                v34.i64[1] = v37.u32[3];
                unsigned int v39 = (float32x4_t *)(v29 + 4 * v28);
                *unsigned int v39 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(vmulq_n_f64(v35, v30), v10), _Q17)), vmulq_f64(vmulq_f64(vmulq_n_f64(v36, v30), v9), _Q17));
                v39[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmulq_f64(vmulq_n_f64(v38, v30), v8), _Q17)), vmulq_f64(vmulq_f64(vmulq_n_f64(vcvtq_f64_u64(v34), v30), v7), _Q17));
                v27 += 8;
                int v28 = v31;
              }
              while (v27 != 64);
            }
            else if (v4 == 1)
            {
              uint64_t v40 = 0;
              int v41 = *(int32x4_t **)(v6 + 88);
              do
              {
                uint16x8_t v42 = *(uint16x8_t *)(v23 + v40 * 16);
                int32x4_t v43 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v42.i8);
                int32x4_t v44 = (int32x4_t)vmovl_high_u16(v42);
                int16x8_t v45 = (int16x8_t)start_pass_aanscales[v40];
                int32x4_t v46 = vmovl_s16(*(int16x4_t *)v45.i8);
                int32x4_t v47 = vmovl_high_s16(v45);
                *int v41 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v43.i8), 0xCuLL), vmull_high_s32(v46, v43), 0xCuLL);
                v41[1] = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v47.i8, *(int32x2_t *)v44.i8), 0xCuLL), vmull_high_s32(v47, v44), 0xCuLL);
                v41 += 2;
                ++v40;
              }
              while (v40 != 8);
            }
            else if (v4)
            {
              unsigned int v48 = *(uint64_t (***)(int *))v1;
              *((_DWORD *)v48 + 1CoreML::Specification::FeatureType::New(this, 0) = 49;
              __n128 result = (*v48)(v1);
              _Q17 = v51;
              float64x2_t v10 = (float64x2_t)start_pass_aanscalefactor;
              float64x2_t v9 = (float64x2_t)unk_2246ED390;
              float64x2_t v8 = (float64x2_t)xmmword_2246ED3A0;
              float64x2_t v7 = (float64x2_t)unk_2246ED3B0;
            }
            else
            {
              uint64_t v24 = 0;
              uint64_t v25 = *(uint32x4_t **)(v6 + 88);
              do
              {
                uint16x8_t v26 = *(uint16x8_t *)(v23 + v24);
                *uint64_t v25 = vmovl_u16(*(uint16x4_t *)v26.i8);
                v25[1] = vmovl_high_u16(v26);
                v25 += 2;
                v24 += 16;
              }
              while (v24 != 128);
            }
          }
        }
      }
      ++v2;
      v6 += 96;
    }
    while (v2 < v1[14]);
  }
  return result;
}

double jinit_huff_decoder(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v3 = v2;
  *(void *)(a1 + 624) = v2;
  *(void *)uint64_t v2 = start_pass_huff_decoder;
  *(void *)(v2 + 16) = finish_pass_huff;
  if (*(_DWORD *)(a1 + 316))
  {
    int v4 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, (uint64_t)*(int *)(a1 + 56) << 8);
    *(void *)(a1 + 192) = v4;
    if (*(int *)(a1 + 56) >= 1)
    {
      int v5 = 0;
      *(void *)&long long v6 = -1;
      *((void *)&v6 + 1) = -1;
      do
      {
        v4[14] = v6;
        v4[15] = v6;
        v4[12] = v6;
        v4[13] = v6;
        v4[10] = v6;
        v4[11] = v6;
        v4[8] = v6;
        v4[9] = v6;
        v4[6] = v6;
        v4[7] = v6;
        v4[4] = v6;
        v4[5] = v6;
        v4[2] = v6;
        v4[3] = v6;
        *int v4 = v6;
        v4[1] = v6;
        v4 += 16;
        ++v5;
      }
      while (v5 < *(_DWORD *)(a1 + 56));
    }
    double result = 0.0;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 16CoreML::Specification::FeatureType::New(this, 0) = 0u;
  }
  return result;
}

void start_pass_huff_decoder(_DWORD *a1)
{
  uint64_t v2 = *((void *)a1 + 78);
  int v3 = a1[135];
  if (a1[79])
  {
    int v4 = a1[136];
    if (v3)
    {
      if (v4 < v3 || v4 > a1[142] || a1[112] != 1) {
        goto LABEL_79;
      }
    }
    else if (v4)
    {
      goto LABEL_79;
    }
    int v42 = a1[137];
    if (v42)
    {
      int v43 = v42 - 1;
      if (v43 != a1[138]) {
        goto LABEL_79;
      }
    }
    else
    {
      int v43 = a1[138];
    }
    if (v43 < 14)
    {
LABEL_80:
      LODWORD(v45) = a1[112];
      if ((int)v45 >= 1)
      {
        uint64_t v46 = 0;
        do
        {
          uint64_t v47 = *(int *)(*(void *)&a1[2 * v46 + 114] + 4);
          unsigned int v48 = (_DWORD *)(*((void *)a1 + 24) + (v47 << 8));
          int v49 = a1[135];
          if (v49 && (*v48 & 0x80000000) != 0)
          {
            uint64_t v50 = *(void *)a1;
            *(_DWORD *)(v50 + 4CoreML::Specification::FeatureType::New(this, 0) = 118;
            *(_DWORD *)(v50 + 44) = v47;
            *(_DWORD *)(*(void *)a1 + 48) = 0;
            (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 0xFFFFFFFFLL);
            int v49 = a1[135];
          }
          if (v49 <= a1[136])
          {
            uint64_t v51 = v49;
            do
            {
              if (a1[137] != (v48[v51] & ~((int)v48[v51] >> 31)))
              {
                uint64_t v52 = *(void *)a1;
                *(_DWORD *)(v52 + 4CoreML::Specification::FeatureType::New(this, 0) = 118;
                *(_DWORD *)(v52 + 44) = v47;
                *(_DWORD *)(*(void *)a1 + 48) = v51;
                (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 0xFFFFFFFFLL);
              }
              v48[v51] = a1[138];
            }
            while (v51++ < (int)a1[136]);
          }
          ++v46;
          uint64_t v45 = (int)a1[112];
        }
        while (v46 < v45);
      }
      int v54 = a1[135];
      BOOL v55 = v54 == 0;
      if (v54) {
        int v56 = decode_mcu_AC_first;
      }
      else {
        int v56 = decode_mcu_DC_first;
      }
      uint64_t v57 = decode_mcu_AC_refine;
      if (v55) {
        uint64_t v57 = decode_mcu_DC_refine;
      }
      if (!a1[137]) {
        uint64_t v57 = v56;
      }
      *(void *)(v2 + 8) = v57;
      if ((int)v45 >= 1)
      {
        uint64_t v58 = 0;
        do
        {
          uint64_t v59 = *(void *)&a1[2 * v58 + 114];
          if (a1[135])
          {
            uint64_t v60 = *(int *)(v59 + 24);
            uint64_t v61 = v2 + 8 * v60;
            jpeg_make_d_derived_tbl((uint64_t)a1, 0, v60, (void *)(v61 + 72));
            *(void *)(v2 + 104) = *(void *)(v61 + 72);
          }
          else if (!a1[137])
          {
            jpeg_make_d_derived_tbl((uint64_t)a1, 1, *(_DWORD *)(v59 + 20), (void *)(v2 + 8 * *(int *)(v59 + 20) + 72));
          }
          *(_DWORD *)(v2 + 44 + 4 * v58++) = 0;
        }
        while (v58 < (int)a1[112]);
      }
      *(_DWORD *)(v2 + 4CoreML::Specification::FeatureType::New(this, 0) = 0;
      goto LABEL_106;
    }
LABEL_79:
    uint64_t v44 = *(void *)a1;
    *(_DWORD *)(v44 + 4CoreML::Specification::FeatureType::New(this, 0) = 17;
    *(_DWORD *)(v44 + 44) = v3;
    *(_DWORD *)(*(void *)a1 + 48) = a1[136];
    *(_DWORD *)(*(void *)a1 + 52) = a1[137];
    *(_DWORD *)(*(void *)a1 + 56) = a1[138];
    (**(void (***)(_DWORD *))a1)(a1);
    goto LABEL_80;
  }
  if (v3 || a1[137] || a1[138] || ((int v63 = a1[136], a1[78]) || v63 <= 63) && v63 != a1[142])
  {
    uint64_t v5 = *(void *)a1;
    *(_DWORD *)(v5 + 4CoreML::Specification::FeatureType::New(this, 0) = 125;
    (*(void (**)(_DWORD *, uint64_t))(v5 + 8))(a1, 0xFFFFFFFFLL);
  }
  long long v6 = decode_mcu_sub;
  if (a1[142] == 63) {
    long long v6 = decode_mcu;
  }
  *(void *)(v2 + 8) = v6;
  if ((int)a1[112] >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)&a1[2 * v7 + 114];
      jpeg_make_d_derived_tbl((uint64_t)a1, 1, *(_DWORD *)(v8 + 20), (void *)(v2 + 8 * *(int *)(v8 + 20) + 112));
      if (a1[142]) {
        jpeg_make_d_derived_tbl((uint64_t)a1, 0, *(_DWORD *)(v8 + 24), (void *)(v2 + 8 * *(int *)(v8 + 24) + 144));
      }
      *(_DWORD *)(v2 + 44 + 4 * v7++) = 0;
    }
    while (v7 < (int)a1[112]);
  }
  if ((int)a1[124] >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v2 + 336;
    do
    {
      int v11 = *(int **)&a1[2 * a1[v9 + 125] + 114];
      uint64_t v12 = v10 + 8 * v9;
      *(void *)(v12 - 16CoreML::Specification::FeatureType::New(this, 0) = *(void *)(v2 + 8 * v11[5] + 112);
      int v13 = a1[142];
      if (v13) {
        uint64_t v14 = *(void *)(v2 + 8 * v11[6] + 144);
      }
      else {
        uint64_t v14 = 0;
      }
      *(void *)(v12 - 8CoreML::Specification::FeatureType::New(this, 0) = v14;
      if (v11[13])
      {
        int v17 = v11 + 9;
        int v15 = v11[9];
        int v16 = v17[1];
        if (v13 > 14)
        {
          if (v13 > 34)
          {
            if (v13 == 35)
            {
              unsigned int v36 = v16 - 7;
              int v37 = v16 - 1;
              unsigned int v38 = v15 - 7;
              int v21 = v15 - 1;
              if (v36 < 0xFFFFFFFA) {
                int v37 = 5;
              }
              if (v38 < 0xFFFFFFFA) {
                int v21 = 5;
              }
              int v22 = (char *)&jpeg_zigzag_order6 + 24 * v37;
            }
            else
            {
              if (v13 != 48) {
                goto LABEL_65;
              }
              unsigned int v27 = v16 - 8;
              int v28 = v16 - 1;
              unsigned int v29 = v15 - 8;
              int v21 = v15 - 1;
              if (v27 < 0xFFFFFFF9) {
                int v28 = 6;
              }
              if (v29 < 0xFFFFFFF9) {
                int v21 = 6;
              }
              int v22 = (char *)&jpeg_zigzag_order7 + 28 * v28;
            }
          }
          else if (v13 == 15)
          {
            unsigned int v30 = v16 - 5;
            int v31 = v16 - 1;
            unsigned int v32 = v15 - 5;
            int v21 = v15 - 1;
            if (v30 < 0xFFFFFFFC) {
              int v31 = 3;
            }
            if (v32 < 0xFFFFFFFC) {
              int v21 = 3;
            }
            int v22 = (char *)&jpeg_zigzag_order4 + 16 * v31;
          }
          else
          {
            if (v13 != 24) {
              goto LABEL_65;
            }
            unsigned int v18 = v16 - 6;
            int v19 = v16 - 1;
            unsigned int v20 = v15 - 6;
            int v21 = v15 - 1;
            if (v18 < 0xFFFFFFFB) {
              int v19 = 4;
            }
            if (v20 < 0xFFFFFFFB) {
              int v21 = 4;
            }
            int v22 = (char *)&jpeg_zigzag_order5 + 20 * v19;
          }
          goto LABEL_70;
        }
        if (v13)
        {
          if (v13 == 3)
          {
            unsigned int v33 = v16 - 3;
            int v34 = v16 - 1;
            unsigned int v35 = v15 - 3;
            int v21 = v15 - 1;
            if (v33 < 0xFFFFFFFE) {
              int v34 = 1;
            }
            if (v35 < 0xFFFFFFFE) {
              int v21 = 1;
            }
            int v22 = (char *)&jpeg_zigzag_order2 + 8 * v34;
            goto LABEL_70;
          }
          if (v13 == 8)
          {
            unsigned int v24 = v16 - 4;
            int v25 = v16 - 1;
            unsigned int v26 = v15 - 4;
            int v21 = v15 - 1;
            if (v24 < 0xFFFFFFFD) {
              int v25 = 2;
            }
            if (v26 < 0xFFFFFFFD) {
              int v21 = 2;
            }
            int v22 = (char *)&jpeg_zigzag_order3 + 12 * v25;
            goto LABEL_70;
          }
LABEL_65:
          unsigned int v39 = v16 - 9;
          int v40 = v16 - 1;
          unsigned int v41 = v15 - 9;
          int v21 = v15 - 1;
          if (v39 < 0xFFFFFFF8) {
            int v40 = 7;
          }
          if (v41 < 0xFFFFFFF8) {
            int v21 = 7;
          }
          int v22 = (char *)&jpeg_zigzag_order + 32 * v40;
LABEL_70:
          int v23 = *(_DWORD *)&v22[4 * v21] + 1;
          goto LABEL_71;
        }
        int v23 = 1;
      }
      else
      {
        int v23 = 0;
      }
LABEL_71:
      *(_DWORD *)(v10 + 4 * v9++) = v23;
    }
    while (v9 < (int)a1[124]);
  }
LABEL_106:
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)(v2 + 24) = 0;
  int v62 = a1[93];
  *(_DWORD *)(v2 + 6CoreML::Specification::FeatureType::New(this, 0) = 0;
  *(_DWORD *)(v2 + 64) = v62;
}

uint64_t finish_pass_huff(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 624);
  *(_DWORD *)(*(void *)(result + 616) + 36) += *(_DWORD *)(v1 + 32) / 8;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t decode_mcu_DC_first(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  int v5 = *(_DWORD *)(a1 + 552);
  if (!*(_DWORD *)(a1 + 372) || *(_DWORD *)(v4 + 64) || (uint64_t result = process_restart(a1), result))
  {
    if (!*(_DWORD *)(v4 + 60))
    {
      uint64_t v33 = a1;
      uint64_t v7 = *(unsigned __int8 ***)(a1 + 40);
      uint64_t v8 = *v7;
      uint64_t v9 = v7[1];
      unsigned int v29 = *v7;
      unsigned int v30 = v9;
      uint64_t v10 = *(void *)(v4 + 24);
      int v11 = *(_DWORD *)(v4 + 32);
      long long v27 = *(_OWORD *)(v4 + 40);
      int v28 = *(_DWORD *)(v4 + 56);
      if (*(int *)(a1 + 496) >= 1)
      {
        uint64_t v12 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        while (1)
        {
          int v13 = *(_WORD **)(a2 + 8 * v12);
          uint64_t v14 = *(int *)(a1 + 500 + 4 * v12);
          uint64_t v15 = *(void *)(v4 + 8 * *(int *)(*(void *)(a1 + 8 * v14 + 456) + 20) + 72);
          if (v11 > 7) {
            goto LABEL_11;
          }
          uint64_t result = jpeg_fill_bit_buffer(&v29, v10, v11, 0);
          if (!result) {
            return result;
          }
          uint64_t v10 = v31;
          int v11 = v32;
          if ((int)v32 >= 8)
          {
LABEL_11:
            uint64_t v17 = v10 >> (v11 - 8);
            int v18 = *(_DWORD *)(v15 + 4 * v17 + 288);
            if (v18)
            {
              v11 -= v18;
              uint64_t v19 = v15 + v17;
              int v20 = *(unsigned __int8 *)(v19 + 1312);
              if (*(unsigned char *)(v19 + 1312)) {
                goto LABEL_17;
              }
              goto LABEL_13;
            }
            int v16 = 9;
          }
          else
          {
            int v16 = 1;
          }
          int v22 = jpeg_huff_decode((uint64_t)&v29, v10, v11, v15, v16);
          if (v22 < 0) {
            return 0;
          }
          int v20 = v22;
          uint64_t v10 = v31;
          int v11 = v32;
          if (v22)
          {
LABEL_17:
            if (v11 < v20)
            {
              uint64_t result = jpeg_fill_bit_buffer(&v29, v10, v11, v20);
              if (!result) {
                return result;
              }
              uint64_t v10 = v31;
              int v11 = v32;
            }
            v11 -= v20;
            int v23 = bmask[v20];
            int v24 = v23 & (v10 >> v11);
            if (v24 > bmask[v20 - 1]) {
              int v23 = 0;
            }
            int v21 = v24 - v23;
            goto LABEL_23;
          }
LABEL_13:
          int v21 = 0;
LABEL_23:
          int v25 = (char *)&v27 + 4 * v14;
          int v26 = *((_DWORD *)v25 + 1) + v21;
          *((_DWORD *)v25 + 1) = v26;
          *int v13 = v26 << v5;
          if (++v12 >= *(int *)(a1 + 496))
          {
            uint64_t v7 = *(unsigned __int8 ***)(a1 + 40);
            uint64_t v8 = v29;
            uint64_t v9 = v30;
            break;
          }
        }
      }
      *uint64_t v7 = v8;
      v7[1] = v9;
      *(void *)(v4 + 24) = v10;
      *(_DWORD *)(v4 + 32) = v11;
      *(_OWORD *)(v4 + 4CoreML::Specification::FeatureType::New(this, 0) = v27;
      *(_DWORD *)(v4 + 56) = v28;
    }
    if (*(_DWORD *)(a1 + 372)) {
      --*(_DWORD *)(v4 + 64);
    }
    return 1;
  }
  return result;
}

uint64_t decode_mcu_AC_first(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    if (!*(_DWORD *)(v4 + 64))
    {
      uint64_t result = process_restart(a1);
      if (!result) {
        return result;
      }
    }
  }
  if (*(_DWORD *)(v4 + 60)) {
    goto LABEL_31;
  }
  int v6 = *(_DWORD *)(v4 + 40);
  if (v6)
  {
    int v7 = v6 - 1;
    goto LABEL_30;
  }
  uint64_t v34 = a1;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v10 = *(unsigned __int8 **)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  unsigned int v30 = v10;
  uint64_t v31 = v9;
  uint64_t v11 = *(void *)(v4 + 24);
  int v12 = *(_DWORD *)(v4 + 32);
  int v13 = *(_DWORD *)(a1 + 544);
  int v14 = *(_DWORD *)(a1 + 540);
  if (v14 > v13)
  {
LABEL_28:
    int v7 = 0;
    goto LABEL_29;
  }
  int v15 = *(_DWORD *)(a1 + 552);
  uint64_t v16 = *(void *)(a1 + 560);
  uint64_t v17 = *a2;
  uint64_t v18 = *(void *)(v4 + 104);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  while (1)
  {
    if (v12 > 7) {
      goto LABEL_13;
    }
    uint64_t result = jpeg_fill_bit_buffer(&v30, v11, v12, 0);
    if (!result) {
      return result;
    }
    uint64_t v11 = v32;
    int v12 = v33;
    if ((int)v33 >= 8)
    {
LABEL_13:
      uint64_t v20 = v11 >> (v12 - 8);
      int v21 = *(_DWORD *)(v18 + 4 * v20 + 288);
      if (v21)
      {
        v12 -= v21;
        unsigned int v22 = *(unsigned __int8 *)(v18 + v20 + 1312);
        goto LABEL_18;
      }
      int v19 = 9;
    }
    else
    {
      int v19 = 1;
    }
    unsigned int v22 = jpeg_huff_decode((uint64_t)&v30, v11, v12, v18, v19);
    if ((v22 & 0x80000000) != 0) {
      return 0;
    }
    uint64_t v11 = v32;
    int v12 = v33;
LABEL_18:
    int v23 = v22 >> 4;
    int v24 = v22 & 0xF;
    if ((v22 & 0xF) != 0)
    {
      if (v12 < v24)
      {
        uint64_t result = jpeg_fill_bit_buffer(&v30, v11, v12, v24);
        if (!result) {
          return result;
        }
        uint64_t v11 = v32;
        int v12 = v33;
      }
      int v25 = v23 + v14;
      v12 -= v24;
      int v26 = bmask[v24];
      int v27 = v26 & (v11 >> v12);
      if (v27 > bmask[v24 - 1]) {
        int v26 = 0;
      }
      *(_WORD *)(v17 + 2 * *(int *)(v16 + 4 * v2std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 32, *((char **)this + 5)) = (v27 - v26) << v15;
      goto LABEL_27;
    }
    if (v23 != 15) {
      break;
    }
    int v25 = v14 + 15;
LABEL_27:
    int v14 = v25 + 1;
    if (v25 >= v13) {
      goto LABEL_28;
    }
  }
  if (v22 < 0x10) {
    goto LABEL_28;
  }
  if (v12 >= v23) {
    goto LABEL_40;
  }
  uint64_t result = jpeg_fill_bit_buffer(&v30, v11, v12, v23);
  if (result)
  {
    uint64_t v11 = v32;
    int v12 = v33;
LABEL_40:
    v12 -= v23;
    int v7 = (bmask[v23] & (v11 >> v12)) + ~(-1 << v23);
LABEL_29:
    int v28 = *(void **)(a1 + 40);
    uint64_t v29 = v31;
    *int v28 = v30;
    v28[1] = v29;
    *(void *)(v4 + 24) = v11;
    *(_DWORD *)(v4 + 32) = v12;
LABEL_30:
    *(_DWORD *)(v4 + 4CoreML::Specification::FeatureType::New(this, 0) = v7;
LABEL_31:
    if (*(_DWORD *)(a1 + 372)) {
      --*(_DWORD *)(v4 + 64);
    }
    return 1;
  }
  return result;
}

uint64_t decode_mcu_DC_refine(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  if (!*(_DWORD *)(a1 + 372) || *(_DWORD *)(v4 + 64) || (uint64_t result = process_restart(a1), result))
  {
    uint64_t v17 = a1;
    int v6 = *(unsigned __int8 ***)(a1 + 40);
    int v7 = *v6;
    uint64_t v8 = v6[1];
    int v13 = *v6;
    int v14 = v8;
    unint64_t v9 = *(void *)(v4 + 24);
    int v10 = *(_DWORD *)(v4 + 32);
    if (*(int *)(a1 + 496) >= 1)
    {
      uint64_t v11 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      int v12 = 1 << *(_DWORD *)(a1 + 552);
      do
      {
        if (v10 <= 0)
        {
          uint64_t result = jpeg_fill_bit_buffer(&v13, v9, v10, 1);
          if (!result) {
            return result;
          }
          unint64_t v9 = v15;
          int v10 = v16;
        }
        if ((v9 >> --v10)) {
          **(_WORD **)(a2 + 8 * v11) |= v12;
        }
        ++v11;
      }
      while (v11 < *(int *)(a1 + 496));
      int v6 = *(unsigned __int8 ***)(a1 + 40);
      int v7 = v13;
      uint64_t v8 = v14;
    }
    void *v6 = v7;
    v6[1] = v8;
    *(void *)(v4 + 24) = v9;
    *(_DWORD *)(v4 + 32) = v10;
    if (*(_DWORD *)(a1 + 372)) {
      --*(_DWORD *)(v4 + 64);
    }
    return 1;
  }
  return result;
}

uint64_t decode_mcu_AC_refine(uint64_t a1, uint64_t *a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    if (!*(_DWORD *)(v4 + 64))
    {
      uint64_t result = process_restart(a1);
      if (!result) {
        return result;
      }
    }
  }
  if (*(_DWORD *)(v4 + 60)) {
    goto LABEL_23;
  }
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  int v6 = *(_DWORD *)(a1 + 544);
  int v7 = 0x10000 << *(_DWORD *)(a1 + 552);
  int v8 = v7 >> 16;
  uint64_t v53 = *(void *)(a1 + 560);
  uint64_t v61 = a1;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = *(unsigned __int8 **)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v57 = v11;
  uint64_t v58 = v10;
  uint64_t v12 = *(void *)(v4 + 24);
  int v13 = *(_DWORD *)(v4 + 32);
  uint64_t v14 = *a2;
  int v15 = *(_DWORD *)(a1 + 540);
  unsigned int v56 = HIWORD(v7);
  if (*(_DWORD *)(v4 + 40))
  {
    int v54 = *(_DWORD *)(v4 + 40);
    int v52 = 0;
    goto LABEL_7;
  }
  int v52 = 0;
  uint64_t v26 = *(void *)(v4 + 104);
  int v46 = -v7 >> 16;
  int v55 = -HIWORD(v7);
  __int16 v48 = HIWORD(v7);
  int v49 = v6;
  uint64_t v47 = v26;
  while (1)
  {
    if (v13 > 7) {
      goto LABEL_32;
    }
    if (!jpeg_fill_bit_buffer(&v57, v12, v13, 0)) {
      goto LABEL_75;
    }
    uint64_t v12 = v59;
    int v13 = v60;
    if ((int)v60 >= 8)
    {
LABEL_32:
      int v28 = *(_DWORD *)(v26 + 4 * (v12 >> (v13 - 8)) + 288);
      if (v28)
      {
        int v29 = v13 - v28;
        unsigned int v30 = *(unsigned __int8 *)(v26 + (v12 >> (v13 - 8)) + 1312);
        goto LABEL_37;
      }
      int v27 = 9;
    }
    else
    {
      int v27 = 1;
    }
    unsigned int v30 = jpeg_huff_decode((uint64_t)&v57, v12, v13, v26, v27);
    if ((v30 & 0x80000000) != 0) {
      goto LABEL_75;
    }
    uint64_t v12 = v59;
    int v29 = v60;
LABEL_37:
    int v31 = v30 >> 4;
    if ((v30 & 0xF) != 0)
    {
      if ((v30 & 0xF) != 1)
      {
        uint64_t v32 = *(void *)a1;
        *(_DWORD *)(v32 + 4CoreML::Specification::FeatureType::New(this, 0) = 121;
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(a1, 0xFFFFFFFFLL);
      }
      if (v29 <= 0)
      {
        if (!jpeg_fill_bit_buffer(&v57, v12, v29, 1)) {
          goto LABEL_75;
        }
        uint64_t v12 = v59;
        int v29 = v60;
      }
      --v29;
      int v33 = v46;
      if (((unint64_t)v12 >> v29)) {
        int v33 = v8;
      }
      int v51 = v33;
      goto LABEL_48;
    }
    if (v31 != 15) {
      break;
    }
    int v51 = 0;
LABEL_48:
    if (v15 <= v6) {
      int v34 = v6;
    }
    else {
      int v34 = v15;
    }
    int v50 = v34 + 1;
    uint64_t v35 = v34 - (uint64_t)v15 + 1;
    unsigned int v36 = (int *)(v53 + 4 * v15);
    int v13 = v29;
    do
    {
      uint64_t v38 = *v36++;
      uint64_t v37 = v38;
      if (*(_WORD *)(v14 + 2 * v38))
      {
        if (v13 <= 0)
        {
          if (!jpeg_fill_bit_buffer(&v57, v12, v13, 1)) {
            goto LABEL_75;
          }
          uint64_t v12 = v59;
          int v13 = v60;
        }
        if (((unint64_t)v12 >> --v13))
        {
          int v39 = *(__int16 *)(v14 + 2 * v37);
          if ((v8 & v39) == 0)
          {
            __int16 v40 = v56;
            if (v39 < 0) {
              __int16 v40 = v55;
            }
            *(_WORD *)(v14 + 2 * v37) = v39 + v40;
          }
        }
      }
      else
      {
        BOOL v41 = __OFSUB__(v31--, 1);
        if (v31 < 0 != v41) {
          goto LABEL_64;
        }
      }
      ++v15;
      --v35;
    }
    while (v35);
    int v15 = v50;
LABEL_64:
    HIWORD(v7) = v48;
    int v6 = v49;
    uint64_t v26 = v47;
    if (v51)
    {
      uint64_t v42 = *(int *)(v53 + 4 * v15);
      *(_WORD *)(v14 + 2 * v42) = v51;
      v62[v52++] = v42;
    }
    if (v15++ >= v49) {
      goto LABEL_67;
    }
  }
  int v54 = 1 << v31;
  if (v30 < 0x10)
  {
    int v13 = v29;
    goto LABEL_7;
  }
  if (v29 >= v31)
  {
LABEL_73:
    int v13 = v29 - v31;
    if (!((bmask[v31] & (v12 >> (v29 - v31))) + v54))
    {
LABEL_67:
      int v23 = 0;
      goto LABEL_22;
    }
    v54 += bmask[v31] & (v12 >> (v29 - v31));
LABEL_7:
    if (v15 <= v6) {
      int v16 = v6;
    }
    else {
      int v16 = v15;
    }
    uint64_t v17 = (int *)(v53 + 4 * v15);
    int v18 = v16 - v15 + 1;
    do
    {
      uint64_t v20 = *v17++;
      uint64_t v19 = v20;
      if (*(_WORD *)(v14 + 2 * v20))
      {
        if (v13 <= 0)
        {
          if (!jpeg_fill_bit_buffer(&v57, v12, v13, 1)) {
            goto LABEL_75;
          }
          uint64_t v12 = v59;
          int v13 = v60;
        }
        if (((unint64_t)v12 >> --v13))
        {
          int v21 = *(__int16 *)(v14 + 2 * v19);
          if ((v8 & v21) == 0)
          {
            __int16 v22 = v56;
            if (v21 < 0) {
              __int16 v22 = -HIWORD(v7);
            }
            *(_WORD *)(v14 + 2 * v19) = v21 + v22;
          }
        }
      }
      --v18;
    }
    while (v18);
    int v23 = v54 - 1;
LABEL_22:
    int v24 = *(void **)(a1 + 40);
    uint64_t v25 = v58;
    *int v24 = v57;
    v24[1] = v25;
    *(void *)(v4 + 24) = v12;
    *(_DWORD *)(v4 + 32) = v13;
    *(_DWORD *)(v4 + 4CoreML::Specification::FeatureType::New(this, 0) = v23;
LABEL_23:
    if (*(_DWORD *)(a1 + 372)) {
      --*(_DWORD *)(v4 + 64);
    }
    return 1;
  }
  if (jpeg_fill_bit_buffer(&v57, v12, v29, v31))
  {
    uint64_t v12 = v59;
    int v29 = v60;
    goto LABEL_73;
  }
LABEL_75:
  if (v52)
  {
    uint64_t v44 = v52 - 1;
    do
      *(_WORD *)(v14 + 2 * (int)v62[v44]) = 0;
    while (v44--);
  }
  return 0;
}

void jpeg_make_d_derived_tbl(uint64_t a1, int a2, unsigned int a3, void *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (a3 >= 4)
  {
    int v8 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v8 + 1CoreML::Specification::FeatureType::New(this, 0) = 52;
    *((_DWORD *)v8 + 11) = a3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  uint64_t v9 = a1 + 8 * (int)a3;
  uint64_t v10 = (uint64_t *)(v9 + 232);
  uint64_t v11 = (uint64_t *)(v9 + 264);
  if (a2) {
    uint64_t v11 = v10;
  }
  uint64_t v12 = *v11;
  if (!*v11) {
    uint64_t v12 = jpeg_std_huff_table(a1, a2, a3);
  }
  int v42 = a2;
  int v13 = (void *)*a4;
  if (!*a4)
  {
    int v13 = (void *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1568);
    *a4 = v13;
  }
  int v14 = 0;
  v13[35] = v12;
  for (uint64_t i = 1; i != 17; ++i)
  {
    size_t v16 = *(unsigned __int8 *)(v12 + i);
    if (v14 + (int)v16 >= 257)
    {
      uint64_t v17 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v17 + 1CoreML::Specification::FeatureType::New(this, 0) = 9;
      (*v17)(a1);
    }
    if (v16)
    {
      memset(&v44[v14], i, v16);
      v14 += v16;
    }
  }
  v44[v14] = 0;
  int v18 = v44[0];
  if (v44[0])
  {
    unsigned int v19 = 0;
    int v20 = 0;
    char v21 = v44[0];
    do
    {
      if (v18 == v21)
      {
        __int16 v22 = &v43[v20];
        int v23 = &v44[v20 + 1];
        do
        {
          *v22++ = v19++;
          int v24 = *v23++;
          ++v20;
        }
        while (v18 == v24);
      }
      if (1 << v18 <= v19)
      {
        uint64_t v25 = *(void (***)(uint64_t))a1;
        *((_DWORD *)v25 + 1CoreML::Specification::FeatureType::New(this, 0) = 9;
        (*v25)(a1);
      }
      v19 *= 2;
      ++v18;
      char v21 = v44[v20];
    }
    while (v21);
  }
  uint64_t v26 = 0;
  LODWORD(v27) = 0;
  uint64_t v28 = v12 + 1;
  int v29 = v42;
  do
  {
    if (*(unsigned char *)(v28 + v26))
    {
      v13[v26 + 19] = (int)v27 - (unint64_t)v43[(int)v27];
      uint64_t v27 = *(unsigned __int8 *)(v28 + v26) + (uint64_t)(int)v27;
      uint64_t v30 = v43[v27 - 1];
    }
    else
    {
      uint64_t v30 = -1;
    }
    v13[++v26] = v30;
  }
  while (v26 != 16);
  v13[17] = 0xFFFFFLL;
  bzero(v13 + 36, 0x400uLL);
  LODWORD(v31) = 0;
  uint64_t v32 = v13 + 164;
  for (uint64_t j = 1; j != 9; ++j)
  {
    if (*(unsigned char *)(v12 + j))
    {
      unsigned int v34 = 1;
      uint64_t v31 = (int)v31;
      do
      {
        uint64_t v35 = (int)(v43[v31] << (8 - j));
        int v36 = (1 << (8 - j)) + 1;
        do
        {
          *((_DWORD *)v32 + v35 - 256) = j;
          *((unsigned char *)v32 + v35++) = *(unsigned char *)(v12 + v31 + 17);
          --v36;
        }
        while (v36 > 1);
        ++v31;
      }
      while (v34++ < *(unsigned __int8 *)(v12 + j));
    }
  }
  if (v29 && v14 >= 1)
  {
    uint64_t v38 = v14;
    int v39 = (unsigned __int8 *)(v12 + 17);
    do
    {
      unsigned int v40 = *v39++;
      if (v40 >= 0x10)
      {
        BOOL v41 = *(void (***)(uint64_t))a1;
        *((_DWORD *)v41 + 1CoreML::Specification::FeatureType::New(this, 0) = 9;
        (*v41)(a1);
      }
      --v38;
    }
    while (v38);
  }
}

uint64_t decode_mcu_sub(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    if (!*(_DWORD *)(v4 + 64))
    {
      uint64_t result = process_restart(a1);
      if (!result) {
        return result;
      }
    }
  }
  if (!*(_DWORD *)(v4 + 60))
  {
    uint64_t v44 = *(void *)(a1 + 560);
    int v6 = *(_DWORD *)(a1 + 568);
    uint64_t v51 = a1;
    int v7 = *(unsigned __int8 ***)(a1 + 40);
    int v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v47 = *v7;
    __int16 v48 = v9;
    uint64_t v10 = *(void *)(v4 + 24);
    int v11 = *(_DWORD *)(v4 + 32);
    long long v45 = *(_OWORD *)(v4 + 40);
    int v46 = *(_DWORD *)(v4 + 56);
    if (*(int *)(a1 + 496) < 1)
    {
LABEL_76:
      *int v7 = v8;
      v7[1] = v9;
      *(void *)(v4 + 24) = v10;
      *(_DWORD *)(v4 + 32) = v11;
      *(_OWORD *)(v4 + 4CoreML::Specification::FeatureType::New(this, 0) = v45;
      *(_DWORD *)(v4 + 56) = v46;
      goto LABEL_5;
    }
    uint64_t v12 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v43 = a2;
LABEL_11:
    int v13 = *(_WORD **)(a2 + 8 * v12);
    uint64_t v14 = *(void *)(v4 + 8 * v12 + 176);
    if (v11 > 7) {
      goto LABEL_15;
    }
    uint64_t result = jpeg_fill_bit_buffer(&v47, v10, v11, 0);
    if (!result) {
      return result;
    }
    uint64_t v10 = v49;
    int v11 = v50;
    if ((int)v50 >= 8)
    {
LABEL_15:
      uint64_t v16 = v10 >> (v11 - 8);
      int v17 = *(_DWORD *)(v14 + 4 * v16 + 288);
      if (v17)
      {
        v11 -= v17;
        int v18 = *(unsigned __int8 *)(v14 + v16 + 1312);
        goto LABEL_20;
      }
      int v15 = 9;
    }
    else
    {
      int v15 = 1;
    }
    int v19 = jpeg_huff_decode((uint64_t)&v47, v10, v11, v14, v15);
    if (v19 < 0) {
      return 0;
    }
    int v18 = v19;
    uint64_t v10 = v49;
    int v11 = v50;
LABEL_20:
    uint64_t v20 = *(void *)(v4 + 8 * v12 + 256);
    int v21 = *(_DWORD *)(v4 + 4 * v12 + 336);
    if (v21)
    {
      if (v18)
      {
        if (v11 < v18)
        {
          uint64_t result = jpeg_fill_bit_buffer(&v47, v10, v11, v18);
          if (!result) {
            return result;
          }
          uint64_t v10 = v49;
          int v11 = v50;
        }
        v11 -= v18;
        int v22 = bmask[v18];
        int v23 = v22 & (v10 >> v11);
        if (v23 > bmask[v18 - 1]) {
          int v22 = 0;
        }
        int v24 = v23 - v22;
      }
      else
      {
        int v24 = 0;
      }
      uint64_t v25 = (char *)&v45 + 4 * *(int *)(a1 + 4 * v12 + 500);
      int v26 = *((_DWORD *)v25 + 1) + v24;
      *((_DWORD *)v25 + 1) = v26;
      *int v13 = v26;
      if (v21 >= 2)
      {
        int v27 = 1;
        while (1)
        {
          if (v11 > 7) {
            goto LABEL_40;
          }
          uint64_t result = jpeg_fill_bit_buffer(&v47, v10, v11, 0);
          if (!result) {
            return result;
          }
          uint64_t v10 = v49;
          int v11 = v50;
          if ((int)v50 >= 8)
          {
LABEL_40:
            uint64_t v29 = v10 >> (v11 - 8);
            int v30 = *(_DWORD *)(v20 + 4 * v29 + 288);
            if (v30)
            {
              v11 -= v30;
              unsigned int v31 = *(unsigned __int8 *)(v20 + v29 + 1312);
              goto LABEL_45;
            }
            int v28 = 9;
          }
          else
          {
            int v28 = 1;
          }
          unsigned int v31 = jpeg_huff_decode((uint64_t)&v47, v10, v11, v20, v28);
          if ((v31 & 0x80000000) != 0) {
            return 0;
          }
          uint64_t v10 = v49;
          int v11 = v50;
LABEL_45:
          unsigned int v32 = v31 >> 4;
          int v33 = v31 & 0xF;
          if ((v31 & 0xF) != 0)
          {
            if (v11 < v33)
            {
              uint64_t result = jpeg_fill_bit_buffer(&v47, v10, v11, v33);
              if (!result) {
                return result;
              }
              uint64_t v10 = v49;
              int v11 = v50;
            }
            int v34 = v32 + v27;
            v11 -= v33;
            int v35 = bmask[v33];
            int v36 = v35 & (v10 >> v11);
            if (v36 > bmask[v33 - 1]) {
              LOWORD(v35) = 0;
            }
            v13[*(int *)(v44 + 4 * v34)] = v36 - v35;
          }
          else
          {
            if (v32 != 15)
            {
LABEL_74:
              ++v12;
              a2 = v43;
              if (v12 >= *(int *)(a1 + 496))
              {
                int v7 = *(unsigned __int8 ***)(a1 + 40);
                int v8 = v47;
                uint64_t v9 = v48;
                goto LABEL_76;
              }
              goto LABEL_11;
            }
            int v34 = v27 + 15;
          }
          int v27 = v34 + 1;
          if (v34 + 1 >= v21)
          {
            while (1)
            {
LABEL_57:
              if (v27 > v6) {
                goto LABEL_74;
              }
              if (v11 > 7) {
                goto LABEL_62;
              }
              uint64_t result = jpeg_fill_bit_buffer(&v47, v10, v11, 0);
              if (!result) {
                return result;
              }
              uint64_t v10 = v49;
              int v11 = v50;
              if ((int)v50 >= 8)
              {
LABEL_62:
                uint64_t v38 = v10 >> (v11 - 8);
                int v39 = *(_DWORD *)(v20 + 4 * v38 + 288);
                if (v39)
                {
                  v11 -= v39;
                  unsigned int v40 = *(unsigned __int8 *)(v20 + v38 + 1312);
                  goto LABEL_67;
                }
                int v37 = 9;
              }
              else
              {
                int v37 = 1;
              }
              unsigned int v40 = jpeg_huff_decode((uint64_t)&v47, v10, v11, v20, v37);
              if ((v40 & 0x80000000) != 0) {
                return 0;
              }
              uint64_t v10 = v49;
              int v11 = v50;
LABEL_67:
              unsigned int v41 = v40 >> 4;
              int v42 = v40 & 0xF;
              if ((v40 & 0xF) != 0)
              {
                if (v11 < v42)
                {
                  uint64_t result = jpeg_fill_bit_buffer(&v47, v10, v11, v42);
                  if (!result) {
                    return result;
                  }
                  uint64_t v10 = v49;
                  int v11 = v50;
                }
                v11 -= v42;
              }
              else if (v41 != 15)
              {
                goto LABEL_74;
              }
              v27 += v41 + 1;
            }
          }
        }
      }
    }
    else if (v18)
    {
      if (v11 < v18)
      {
        uint64_t result = jpeg_fill_bit_buffer(&v47, v10, v11, v18);
        if (!result) {
          return result;
        }
        uint64_t v10 = v49;
        int v11 = v50;
      }
      v11 -= v18;
    }
    int v27 = 1;
    goto LABEL_57;
  }
LABEL_5:
  if (*(_DWORD *)(a1 + 372)) {
    --*(_DWORD *)(v4 + 64);
  }
  return 1;
}

uint64_t decode_mcu(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 624);
  if (*(_DWORD *)(a1 + 372))
  {
    if (!*(_DWORD *)(v4 + 64))
    {
      uint64_t result = process_restart(a1);
      if (!result) {
        return result;
      }
    }
  }
  if (*(_DWORD *)(v4 + 60)) {
    goto LABEL_5;
  }
  uint64_t v48 = a1;
  int v6 = *(unsigned __int8 ***)(a1 + 40);
  int v7 = *v6;
  int v8 = v6[1];
  uint64_t v44 = *v6;
  long long v45 = v8;
  uint64_t v9 = *(void *)(v4 + 24);
  int v10 = *(_DWORD *)(v4 + 32);
  long long v42 = *(_OWORD *)(v4 + 40);
  int v43 = *(_DWORD *)(v4 + 56);
  if (*(int *)(a1 + 496) < 1) {
    goto LABEL_76;
  }
  uint64_t v11 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  do
  {
    uint64_t v12 = *(_WORD **)(a2 + 8 * v11);
    uint64_t v13 = *(void *)(v4 + 8 * v11 + 176);
    if (v10 > 7) {
      goto LABEL_15;
    }
    uint64_t result = jpeg_fill_bit_buffer(&v44, v9, v10, 0);
    if (!result) {
      return result;
    }
    uint64_t v9 = v46;
    int v10 = v47;
    if ((int)v47 >= 8)
    {
LABEL_15:
      uint64_t v15 = v9 >> (v10 - 8);
      int v16 = *(_DWORD *)(v13 + 4 * v15 + 288);
      if (v16)
      {
        v10 -= v16;
        int v17 = *(unsigned __int8 *)(v13 + v15 + 1312);
        goto LABEL_20;
      }
      int v14 = 9;
    }
    else
    {
      int v14 = 1;
    }
    int v18 = jpeg_huff_decode((uint64_t)&v44, v9, v10, v13, v14);
    if (v18 < 0) {
      return 0;
    }
    int v17 = v18;
    uint64_t v9 = v46;
    int v10 = v47;
LABEL_20:
    uint64_t v19 = *(void *)(v4 + 8 * v11 + 256);
    int v20 = *(_DWORD *)(v4 + 4 * v11 + 336);
    if (!v20)
    {
      if (v17)
      {
        if (v10 < v17)
        {
          uint64_t result = jpeg_fill_bit_buffer(&v44, v9, v10, v17);
          if (!result) {
            return result;
          }
          uint64_t v9 = v46;
          int v10 = v47;
        }
        v10 -= v17;
      }
LABEL_57:
      int v26 = 1;
      while (1)
      {
LABEL_58:
        if (v10 > 7) {
          goto LABEL_62;
        }
        uint64_t result = jpeg_fill_bit_buffer(&v44, v9, v10, 0);
        if (!result) {
          return result;
        }
        uint64_t v9 = v46;
        int v10 = v47;
        if ((int)v47 >= 8)
        {
LABEL_62:
          uint64_t v37 = v9 >> (v10 - 8);
          int v38 = *(_DWORD *)(v19 + 4 * v37 + 288);
          if (v38)
          {
            v10 -= v38;
            unsigned int v39 = *(unsigned __int8 *)(v19 + v37 + 1312);
            goto LABEL_67;
          }
          int v36 = 9;
        }
        else
        {
          int v36 = 1;
        }
        unsigned int v39 = jpeg_huff_decode((uint64_t)&v44, v9, v10, v19, v36);
        if ((v39 & 0x80000000) != 0) {
          return 0;
        }
        uint64_t v9 = v46;
        int v10 = v47;
LABEL_67:
        unsigned int v40 = v39 >> 4;
        int v41 = v39 & 0xF;
        if ((v39 & 0xF) != 0)
        {
          if (v10 < v41)
          {
            uint64_t result = jpeg_fill_bit_buffer(&v44, v9, v10, v41);
            if (!result) {
              return result;
            }
            uint64_t v9 = v46;
            int v10 = v47;
          }
          v10 -= v41;
        }
        else if (v40 != 15)
        {
          goto LABEL_74;
        }
        v26 += v40 + 1;
        if (v26 >= 64) {
          goto LABEL_74;
        }
      }
    }
    if (v17)
    {
      if (v10 < v17)
      {
        uint64_t result = jpeg_fill_bit_buffer(&v44, v9, v10, v17);
        if (!result) {
          return result;
        }
        uint64_t v9 = v46;
        int v10 = v47;
      }
      v10 -= v17;
      int v21 = bmask[v17];
      int v22 = v21 & (v9 >> v10);
      if (v22 > bmask[v17 - 1]) {
        int v21 = 0;
      }
      int v23 = v22 - v21;
    }
    else
    {
      int v23 = 0;
    }
    int v24 = (char *)&v42 + 4 * *(int *)(a1 + 4 * v11 + 500);
    int v25 = *((_DWORD *)v24 + 1) + v23;
    *((_DWORD *)v24 + 1) = v25;
    _WORD *v12 = v25;
    if (v20 < 2) {
      goto LABEL_57;
    }
    int v26 = 1;
    do
    {
      if (v10 > 7) {
        goto LABEL_40;
      }
      uint64_t result = jpeg_fill_bit_buffer(&v44, v9, v10, 0);
      if (!result) {
        return result;
      }
      uint64_t v9 = v46;
      int v10 = v47;
      if ((int)v47 >= 8)
      {
LABEL_40:
        uint64_t v28 = v9 >> (v10 - 8);
        int v29 = *(_DWORD *)(v19 + 4 * v28 + 288);
        if (v29)
        {
          v10 -= v29;
          unsigned int v30 = *(unsigned __int8 *)(v19 + v28 + 1312);
          goto LABEL_45;
        }
        int v27 = 9;
      }
      else
      {
        int v27 = 1;
      }
      unsigned int v30 = jpeg_huff_decode((uint64_t)&v44, v9, v10, v19, v27);
      if ((v30 & 0x80000000) != 0) {
        return 0;
      }
      uint64_t v9 = v46;
      int v10 = v47;
LABEL_45:
      unsigned int v31 = v30 >> 4;
      int v32 = v30 & 0xF;
      if ((v30 & 0xF) != 0)
      {
        if (v10 < v32)
        {
          uint64_t result = jpeg_fill_bit_buffer(&v44, v9, v10, v32);
          if (!result) {
            return result;
          }
          uint64_t v9 = v46;
          int v10 = v47;
        }
        int v33 = v31 + v26;
        v10 -= v32;
        int v34 = bmask[v32];
        int v35 = v34 & (v9 >> v10);
        if (v35 > bmask[v32 - 1]) {
          LOWORD(v34) = 0;
        }
        v12[jpeg_natural_order[v33]] = v35 - v34;
      }
      else
      {
        if (v31 != 15) {
          goto LABEL_74;
        }
        int v33 = v26 + 15;
      }
      int v26 = v33 + 1;
    }
    while (v33 + 1 < v20);
    if (v33 <= 62) {
      goto LABEL_58;
    }
LABEL_74:
    ++v11;
  }
  while (v11 < *(int *)(a1 + 496));
  int v6 = *(unsigned __int8 ***)(a1 + 40);
  int v7 = v44;
  int v8 = v45;
LABEL_76:
  void *v6 = v7;
  v6[1] = v8;
  *(void *)(v4 + 24) = v9;
  *(_DWORD *)(v4 + 32) = v10;
  *(_OWORD *)(v4 + 4CoreML::Specification::FeatureType::New(this, 0) = v42;
  *(_DWORD *)(v4 + 56) = v43;
LABEL_5:
  if (*(_DWORD *)(a1 + 372)) {
    --*(_DWORD *)(v4 + 64);
  }
  return 1;
}

uint64_t process_restart(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 624);
  uint64_t v3 = *(void *)(a1 + 616);
  *(_DWORD *)(v3 + 36) += v2[8] / 8;
  v2[8] = 0;
  uint64_t result = (*(uint64_t (**)(void))(v3 + 16))();
  if (result)
  {
    if (*(int *)(a1 + 448) >= 1)
    {
      uint64_t v5 = 0;
      do
        v2[v5++ + 11] = 0;
      while (v5 < *(int *)(a1 + 448));
    }
    v2[10] = 0;
    v2[16] = *(_DWORD *)(a1 + 372);
    if (!*(_DWORD *)(a1 + 572)) {
      v2[15] = 0;
    }
    return 1;
  }
  return result;
}

uint64_t jpeg_fill_bit_buffer(unsigned __int8 **a1, uint64_t a2, int a3, int a4)
{
  int v5 = a3;
  int v8 = *a1;
  uint64_t v9 = a1[1];
  int v10 = a1[4];
  if (*((_DWORD *)v10 + 143))
  {
LABEL_2:
    if (v5 < a4)
    {
      if (!*(_DWORD *)(*((void *)v10 + 78) + 60))
      {
        uint64_t v11 = *(void *)v10;
        *(_DWORD *)(v11 + 4CoreML::Specification::FeatureType::New(this, 0) = 120;
        (*(void (**)(unsigned __int8 *, uint64_t))(v11 + 8))(v10, 0xFFFFFFFFLL);
        *(_DWORD *)(*((void *)v10 + 78) + 6CoreML::Specification::FeatureType::New(this, 0) = 1;
      }
      int v12 = 25;
      a2 <<= 25 - v5;
      goto LABEL_20;
    }
  }
  else if (a3 <= 24)
  {
    while (1)
    {
      if (!v9)
      {
        uint64_t result = (*(uint64_t (**)(unsigned __int8 *))(*((void *)v10 + 5) + 24))(v10);
        if (!result) {
          return result;
        }
        int v14 = (unsigned __int8 **)*((void *)v10 + 5);
        int v8 = *v14;
        uint64_t v9 = v14[1];
      }
      --v9;
      unsigned int v16 = *v8++;
      uint64_t v15 = v16;
      if (v16 == 255)
      {
        do
        {
          if (!v9)
          {
            uint64_t result = (*(uint64_t (**)(unsigned __int8 *))(*((void *)v10 + 5) + 24))(v10);
            if (!result) {
              return result;
            }
            int v17 = (unsigned __int8 **)*((void *)v10 + 5);
            int v8 = *v17;
            uint64_t v9 = v17[1];
          }
          --v9;
          int v19 = *v8++;
          int v18 = v19;
        }
        while (v19 == 255);
        if (v18)
        {
          *((_DWORD *)v10 + 143) = v18;
          goto LABEL_2;
        }
        uint64_t v15 = 255;
      }
      a2 = v15 | (a2 << 8);
      int v12 = v5 + 8;
      BOOL v20 = v5 < 17;
      v5 += 8;
      if (!v20) {
        goto LABEL_20;
      }
    }
  }
  int v12 = v5;
LABEL_20:
  *a1 = v8;
  a1[1] = v9;
  a1[2] = (unsigned __int8 *)a2;
  uint64_t result = 1;
  *((_DWORD *)a1 + 6) = v12;
  return result;
}

uint64_t jpeg_huff_decode(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5 = a5;
  if (a3 < a5)
  {
    if (!jpeg_fill_bit_buffer((unsigned __int8 **)a1, a2, a3, a5)) {
      return 0xFFFFFFFFLL;
    }
    a2 = *(void *)(a1 + 16);
    a3 = *(_DWORD *)(a1 + 24);
  }
  int v8 = a3 - v5;
  uint64_t v9 = (int)(bmask[v5] & (a2 >> v8));
  uint64_t v10 = v5;
  if (*(void *)(a4 + 8 * v5) >= v9)
  {
    uint64_t v11 = v5;
  }
  else
  {
    do
    {
      if (v8 <= 0)
      {
        if (!jpeg_fill_bit_buffer((unsigned __int8 **)a1, a2, v8, 1)) {
          return 0xFFFFFFFFLL;
        }
        a2 = *(void *)(a1 + 16);
        int v8 = *(_DWORD *)(a1 + 24);
      }
      uint64_t v9 = ((unint64_t)a2 >> --v8) & 1 | (2 * v9);
      uint64_t v11 = v10 + 1;
      uint64_t v12 = *(void *)(a4 + 8 + 8 * v10++);
    }
    while (v9 > v12);
    int v5 = v11;
  }
  *(void *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = v8;
  if (v5 < 17) {
    return *(unsigned __int8 *)(*(void *)(a4 + 280) + *(_DWORD *)(a4 + 8 * v11 + 144) + (int)v9 + 17);
  }
  uint64_t v13 = *(uint64_t **)(a1 + 32);
  uint64_t v14 = *v13;
  *(_DWORD *)(v14 + 4CoreML::Specification::FeatureType::New(this, 0) = 121;
  (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v13, 0xFFFFFFFFLL);
  return 0;
}

uint64_t jpeg_core_output_dimensions(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 556);
  unsigned int v3 = *(_DWORD *)(a1 + 72);
  unsigned int v4 = v2 * *(_DWORD *)(a1 + 68);
  if (v4 <= v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(*(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(*(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x100000001;
    int v8 = 1;
  }
  else if (v4 <= 2 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(2 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(2 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x200000002;
    int v8 = 2;
  }
  else if (v4 <= 3 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(3 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(3 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x300000003;
    int v8 = 3;
  }
  else if (v4 <= 4 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(4 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(4 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x400000004;
    int v8 = 4;
  }
  else if (v4 <= 5 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(5 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(5 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x500000005;
    int v8 = 5;
  }
  else if (v4 <= 6 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(6 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(6 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x600000006;
    int v8 = 6;
  }
  else if (v4 <= 7 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(7 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(7 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x700000007;
    int v8 = 7;
  }
  else if (v4 <= 8 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(8 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(8 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x800000008;
    int v8 = 8;
  }
  else if (v4 <= 9 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(9 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(9 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0x900000009;
    int v8 = 9;
  }
  else if (v4 <= 10 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(10 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(10 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0xA0000000ALL;
    int v8 = 10;
  }
  else if (v4 <= 11 * v3)
  {
    int v8 = 11;
    *(_DWORD *)(a1 + 136) = jdiv_round_up(11 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(11 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0xB0000000BLL;
  }
  else if (v4 <= 12 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(12 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(12 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0xC0000000CLL;
    int v8 = 12;
  }
  else if (v4 <= 13 * v3)
  {
    int v8 = 13;
    *(_DWORD *)(a1 + 136) = jdiv_round_up(13 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(13 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0xD0000000DLL;
  }
  else if (v4 <= 14 * v3)
  {
    *(_DWORD *)(a1 + 136) = jdiv_round_up(14 * *(unsigned int *)(a1 + 48), v2);
    uint64_t result = jdiv_round_up(14 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
    *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
    *(void *)(a1 + 424) = 0xE0000000ELL;
    int v8 = 14;
  }
  else
  {
    unsigned int v5 = 15 * v3;
    uint64_t v6 = *(unsigned int *)(a1 + 48);
    if (v4 <= v5)
    {
      *(_DWORD *)(a1 + 136) = jdiv_round_up(15 * v6, v2);
      uint64_t result = jdiv_round_up(15 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
      *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
      *(void *)(a1 + 424) = 0xF0000000FLL;
      int v8 = 15;
    }
    else
    {
      *(_DWORD *)(a1 + 136) = jdiv_round_up(16 * v6, v2);
      uint64_t result = jdiv_round_up(16 * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556));
      *(_DWORD *)(a1 + 14CoreML::Specification::FeatureType::New(this, 0) = result;
      *(void *)(a1 + 424) = 0x1000000010;
      int v8 = 16;
    }
  }
  int v9 = *(_DWORD *)(a1 + 56);
  if (v9 >= 1)
  {
    uint64_t v10 = (int *)(*(void *)(a1 + 304) + 40);
    do
    {
      *(v10 - 1) = v8;
      int *v10 = v8;
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t jinit_input_controller(uint64_t a1)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 608) = result;
  *(void *)uint64_t result = consume_markers;
  *(void *)(result + 8) = reset_input_controller;
  *(void *)(result + 16) = start_input_pass_0;
  *(void *)(result + 24) = finish_input_pass;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 4CoreML::Specification::FeatureType::New(this, 0) = 1;
  return result;
}

uint64_t consume_markers(uint64_t *a1)
{
  uint64_t v1 = (_DWORD *)a1[76];
  uint64_t v2 = 2;
  if (v1[9]) {
    return v2;
  }
  while (1)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t *))(a1[77] + 8))(a1);
    if (v5 != 1) {
      break;
    }
    int v7 = v1[10];
    if (v7)
    {
      if (v7 != 1)
      {
        if (*((_DWORD *)a1 + 112)) {
          goto LABEL_86;
        }
        goto LABEL_37;
      }
      if (*((_DWORD *)a1 + 13) > 0xFFDCu || *((_DWORD *)a1 + 12) >= 0xFFDDu)
      {
        *(void *)(*a1 + 4CoreML::Specification::FeatureType::New(this, 0) = 0xFFDC0000002ALL;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      int v8 = *((_DWORD *)a1 + 74);
      if ((v8 - 13) <= 0xFFFFFFFA)
      {
        uint64_t v9 = *a1;
        *(_DWORD *)(v9 + 4CoreML::Specification::FeatureType::New(this, 0) = 16;
        *(_DWORD *)(v9 + 44) = v8;
        (*(void (**)(uint64_t *))*a1)(a1);
      }
      int v10 = *((_DWORD *)a1 + 14);
      if (v10 >= 11)
      {
        uint64_t v11 = *a1;
        *(_DWORD *)(v11 + 4CoreML::Specification::FeatureType::New(this, 0) = 27;
        *(_DWORD *)(v11 + 44) = v10;
        *(_DWORD *)(*a1 + 48) = 10;
        (*(void (**)(uint64_t *))*a1)(a1);
        int v10 = *((_DWORD *)a1 + 14);
      }
      a1[52] = 0x100000001;
      if (v10 >= 1)
      {
        int v12 = 0;
        uint64_t v13 = a1[38] + 8;
        v6.n128_u64[0] = 0x100000001;
        do
        {
          if ((*(_DWORD *)v13 - 5) >= 0xFFFFFFFC && (*(_DWORD *)(v13 + 4) - 5) > 0xFFFFFFFB)
          {
            int32x2_t v15 = *(int32x2_t *)v13;
          }
          else
          {
            uint64_t v14 = *a1;
            *(_DWORD *)(v14 + 4CoreML::Specification::FeatureType::New(this, 0) = 19;
            (*(void (**)(uint64_t *, __n128))v14)(a1, v6);
            v6.n128_u64[0] = a1[52];
            int32x2_t v15 = *(int32x2_t *)v13;
            int v10 = *((_DWORD *)a1 + 14);
          }
          v6.n128_u64[0] = (unint64_t)vmax_s32((int32x2_t)v6.n128_u64[0], v15);
          a1[52] = v6.n128_u64[0];
          ++v12;
          v13 += 96;
        }
        while (v12 < v10);
      }
      if (*((_DWORD *)a1 + 78) || *((_DWORD *)a1 + 79) && *((_DWORD *)a1 + 112))
      {
LABEL_21:
        int v16 = 8;
LABEL_22:
        *((_DWORD *)a1 + 139) = v16;
        a1[70] = (uint64_t)&jpeg_natural_order;
        *((_DWORD *)a1 + 142) = 63;
        goto LABEL_23;
      }
      int v23 = *((_DWORD *)a1 + 136);
      if (v23 > 79)
      {
        if (v23 > 167)
        {
          if (v23 > 223)
          {
            if (v23 == 224)
            {
              int v16 = 15;
              goto LABEL_22;
            }
            if (v23 == 255)
            {
              int v16 = 16;
              goto LABEL_22;
            }
          }
          else
          {
            if (v23 == 168)
            {
              int v16 = 13;
              goto LABEL_22;
            }
            if (v23 == 195)
            {
              int v16 = 14;
              goto LABEL_22;
            }
          }
        }
        else if (v23 > 119)
        {
          if (v23 == 120)
          {
            int v16 = 11;
            goto LABEL_22;
          }
          if (v23 == 143)
          {
            int v16 = 12;
            goto LABEL_22;
          }
        }
        else
        {
          if (v23 == 80)
          {
            int v16 = 9;
            goto LABEL_22;
          }
          if (v23 == 99)
          {
            int v16 = 10;
            goto LABEL_22;
          }
        }
      }
      else if (v23 > 23)
      {
        if (v23 > 47)
        {
          if (v23 == 48)
          {
            int v16 = 7;
            *((_DWORD *)a1 + 139) = 7;
            a1[70] = (uint64_t)&jpeg_natural_order7;
            int v24 = 48;
            goto LABEL_78;
          }
          if (v23 == 63) {
            goto LABEL_21;
          }
        }
        else
        {
          if (v23 == 24)
          {
            int v16 = 5;
            *((_DWORD *)a1 + 139) = 5;
            a1[70] = (uint64_t)&jpeg_natural_order5;
            int v24 = 24;
            goto LABEL_78;
          }
          if (v23 == 35)
          {
            int v16 = 6;
            *((_DWORD *)a1 + 139) = 6;
            a1[70] = (uint64_t)&jpeg_natural_order6;
            int v24 = 35;
            goto LABEL_78;
          }
        }
      }
      else if (v23 > 7)
      {
        if (v23 == 8)
        {
          int v16 = 3;
          *((_DWORD *)a1 + 139) = 3;
          a1[70] = (uint64_t)&jpeg_natural_order3;
          int v24 = 8;
          goto LABEL_78;
        }
        if (v23 == 15)
        {
          int v16 = 4;
          *((_DWORD *)a1 + 139) = 4;
          a1[70] = (uint64_t)&jpeg_natural_order4;
          int v24 = 15;
          goto LABEL_78;
        }
      }
      else
      {
        if (!v23)
        {
          int v16 = 1;
          *((_DWORD *)a1 + 139) = 1;
          a1[70] = (uint64_t)&jpeg_natural_order;
          *((_DWORD *)a1 + 142) = 0;
          goto LABEL_23;
        }
        if (v23 == 3)
        {
          int v16 = 2;
          *((_DWORD *)a1 + 139) = 2;
          a1[70] = (uint64_t)&jpeg_natural_order2;
          int v24 = 3;
LABEL_78:
          *((_DWORD *)a1 + 142) = v24;
          goto LABEL_23;
        }
      }
      uint64_t v25 = *a1;
      int v26 = *((_DWORD *)a1 + 135);
      *(_DWORD *)(v25 + 4CoreML::Specification::FeatureType::New(this, 0) = 17;
      *(_DWORD *)(v25 + 44) = v26;
      *(_DWORD *)(*a1 + 48) = *((_DWORD *)a1 + 136);
      *(_DWORD *)(*a1 + 52) = *((_DWORD *)a1 + 137);
      *(_DWORD *)(*a1 + 56) = *((_DWORD *)a1 + 138);
      (*(void (**)(uint64_t *))*a1)(a1);
      int v16 = *((_DWORD *)a1 + 139);
      int v10 = *((_DWORD *)a1 + 14);
LABEL_23:
      *((_DWORD *)a1 + 106) = v16;
      *((_DWORD *)a1 + 107) = v16;
      if (v10 >= 1)
      {
        int v17 = 0;
        uint64_t v18 = a1[38] + 40;
        do
        {
          int v19 = *((_DWORD *)a1 + 139);
          *(_DWORD *)(v18 - 4) = v19;
          *(_DWORD *)uint64_t v18 = v19;
          *(_DWORD *)(v18 - 12) = jdiv_round_up(*(int *)(v18 - 32) * (unint64_t)*((unsigned int *)a1 + 12), *((int *)a1 + 104) * (uint64_t)v19);
          *(_DWORD *)(v18 - 8) = jdiv_round_up(*(int *)(v18 - 28) * (unint64_t)*((unsigned int *)a1 + 13), *((int *)a1 + 139) * (uint64_t)*((int *)a1 + 105));
          *(_DWORD *)(v18 + 4) = jdiv_round_up(*(int *)(v18 - 32) * (unint64_t)*((unsigned int *)a1 + 12), *((int *)a1 + 104));
          *(_DWORD *)(v18 + 8) = jdiv_round_up(*(int *)(v18 - 28) * (unint64_t)*((unsigned int *)a1 + 13), *((int *)a1 + 105));
          *(_DWORD *)(v18 + 12) = 1;
          *(void *)(v18 + 4CoreML::Specification::FeatureType::New(this, 0) = 0;
          ++v17;
          v18 += 96;
        }
        while (v17 < *((_DWORD *)a1 + 14));
        int v16 = *((_DWORD *)a1 + 139);
      }
      *((_DWORD *)a1 + 108) = jdiv_round_up(*((unsigned int *)a1 + 13), *((int *)a1 + 105) * (uint64_t)v16);
      int v20 = *((_DWORD *)a1 + 112);
      BOOL v21 = v20 < *((_DWORD *)a1 + 14) || *((_DWORD *)a1 + 79) != 0;
      *(_DWORD *)(a1[76] + 32) = v21;
      if (v20)
      {
LABEL_86:
        v1[10] = 0;
        return 1;
      }
LABEL_37:
      v1[10] = 2;
    }
    else
    {
      if (!v1[8])
      {
        uint64_t v22 = *a1;
        *(_DWORD *)(v22 + 4CoreML::Specification::FeatureType::New(this, 0) = 36;
        (*(void (**)(uint64_t *))v22)(a1);
      }
      if (*((_DWORD *)a1 + 112))
      {
        start_input_pass_0(a1);
        return 1;
      }
    }
  }
  if (v5 != 2) {
    return v5;
  }
  v1[9] = 1;
  if (v1[10])
  {
    if (*(_DWORD *)(a1[77] + 28))
    {
      uint64_t v27 = *a1;
      *(_DWORD *)(v27 + 4CoreML::Specification::FeatureType::New(this, 0) = 62;
      (*(void (**)(uint64_t *))v27)(a1);
    }
  }
  else
  {
    int v28 = *((_DWORD *)a1 + 43);
    if (*((_DWORD *)a1 + 45) > v28) {
      *((_DWORD *)a1 + 45) = v28;
    }
  }
  return 2;
}

uint64_t reset_input_controller(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 608);
  *(void *)uint64_t v2 = consume_markers;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 4CoreML::Specification::FeatureType::New(this, 0) = 1;
  (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t result = (**(uint64_t (***)(uint64_t))(a1 + 616))(a1);
  *(void *)(a1 + 192) = 0;
  return result;
}

uint64_t start_input_pass_0(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 112);
  if (v2 == 1)
  {
    uint64_t v3 = a1[57];
    unsigned int v4 = *(_DWORD *)(v3 + 32);
    *((_DWORD *)a1 + 122) = *(_DWORD *)(v3 + 28);
    *((_DWORD *)a1 + 123) = v4;
    *(void *)(v3 + 56) = 0x100000001;
    LODWORD(v5) = 1;
    int v6 = *(_DWORD *)(v3 + 36);
    *(_DWORD *)(v3 + 64) = 1;
    *(_DWORD *)(v3 + 68) = v6;
    int v7 = v4 % *(_DWORD *)(v3 + 12);
    if (!v7) {
      int v7 = *(_DWORD *)(v3 + 12);
    }
    *(_DWORD *)(v3 + 72) = 1;
    *(_DWORD *)(v3 + 76) = v7;
    a1[62] = 1;
LABEL_20:
    uint64_t v20 = 0;
    do
    {
      uint64_t v21 = a1[v20 + 57];
      if (!*(void *)(v21 + 80))
      {
        uint64_t v22 = *(unsigned int *)(v21 + 16);
        if (v22 > 3 || !a1[v22 + 25])
        {
          int v23 = (void (**)(void))*a1;
          *((_DWORD *)v23 + 1CoreML::Specification::FeatureType::New(this, 0) = 54;
          *((_DWORD *)v23 + 11) = v22;
          (*(void (**)(uint64_t *))*a1)(a1);
        }
        uint64_t v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 132);
        uint64_t v5 = a1[(int)v22 + 25];
        *(_OWORD *)uint64_t v24 = *(_OWORD *)v5;
        long long v25 = *(_OWORD *)(v5 + 16);
        long long v26 = *(_OWORD *)(v5 + 32);
        long long v27 = *(_OWORD *)(v5 + 64);
        *(_OWORD *)(v24 + 48) = *(_OWORD *)(v5 + 48);
        *(_OWORD *)(v24 + 64) = v27;
        *(_OWORD *)(v24 + 16) = v25;
        *(_OWORD *)(v24 + 32) = v26;
        long long v28 = *(_OWORD *)(v5 + 80);
        long long v29 = *(_OWORD *)(v5 + 96);
        long long v30 = *(_OWORD *)(v5 + 112);
        *(_DWORD *)(v24 + 128) = *(_DWORD *)(v5 + 128);
        *(_OWORD *)(v24 + 96) = v29;
        *(_OWORD *)(v24 + 112) = v30;
        *(_OWORD *)(v24 + 8CoreML::Specification::FeatureType::New(this, 0) = v28;
        *(void *)(v21 + 8CoreML::Specification::FeatureType::New(this, 0) = v24;
        LODWORD(v5) = *((_DWORD *)a1 + 112);
      }
      ++v20;
    }
    while (v20 < (int)v5);
    goto LABEL_27;
  }
  if ((v2 - 5) <= 0xFFFFFFFB)
  {
    int v8 = (void (**)(void))*a1;
    *((_DWORD *)v8 + 1CoreML::Specification::FeatureType::New(this, 0) = 27;
    *((_DWORD *)v8 + 11) = v2;
    *(_DWORD *)(*a1 + 48) = 4;
    (*(void (**)(uint64_t *))*a1)(a1);
  }
  *((_DWORD *)a1 + 122) = jdiv_round_up(*((unsigned int *)a1 + 12), *((int *)a1 + 139) * (uint64_t)*((int *)a1 + 104));
  *((_DWORD *)a1 + 123) = jdiv_round_up(*((unsigned int *)a1 + 13), *((int *)a1 + 139) * (uint64_t)*((int *)a1 + 105));
  *((_DWORD *)a1 + 124) = 0;
  if (*((int *)a1 + 112) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      int v10 = (_DWORD *)a1[v9 + 57];
      unsigned int v11 = v10[2];
      unsigned int v12 = v10[3];
      int v13 = v12 * v11;
      unsigned int v14 = v10[8];
      int v15 = v10[9] * v11;
      v10[16] = v12 * v11;
      v10[17] = v15;
      int v16 = v10[7] % v11;
      v10[14] = v11;
      v10[15] = v12;
      if (v16) {
        unsigned int v11 = v16;
      }
      if (v14 % v12) {
        unsigned int v12 = v14 % v12;
      }
      v10[18] = v11;
      v10[19] = v12;
      if (*((_DWORD *)a1 + 124) + v13 >= 11)
      {
        uint64_t v17 = *a1;
        *(_DWORD *)(v17 + 4CoreML::Specification::FeatureType::New(this, 0) = 14;
        (*(void (**)(uint64_t *))v17)(a1);
      }
      if (v13 >= 1)
      {
        unsigned int v18 = v13 + 1;
        do
        {
          uint64_t v19 = *((int *)a1 + 124);
          *((_DWORD *)a1 + 124) = v19 + 1;
          *((_DWORD *)a1 + v19 + 125) = v9;
          --v18;
        }
        while (v18 > 1);
      }
      ++v9;
      uint64_t v5 = *((int *)a1 + 112);
    }
    while (v9 < v5);
    if ((int)v5 >= 1) {
      goto LABEL_20;
    }
  }
LABEL_27:
  (*(void (**)(uint64_t *))a1[78])(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t *))a1[74])(a1);
  *(void *)a1[76] = *(void *)(a1[74] + 8);
  return result;
}

uint64_t finish_input_pass(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 624) + 16))();
  **(void **)(a1 + 608) = consume_markers;
  return result;
}

uint64_t (**jinit_d_main_controller(uint64_t *a1, int a2))(uint64_t result, int a2)
{
  uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(void))a1[1])();
  uint64_t v5 = result;
  a1[73] = (uint64_t)result;
  *uint64_t result = start_pass_main;
  if (a2)
  {
    uint64_t v6 = *a1;
    *(_DWORD *)(v6 + 4CoreML::Specification::FeatureType::New(this, 0) = 3;
    uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *))v6)(a1);
  }
  int v7 = *((_DWORD *)a1 + 107);
  if (*(_DWORD *)(a1[80] + 16))
  {
    if (v7 <= 1)
    {
      uint64_t v8 = *a1;
      *(_DWORD *)(v8 + 4CoreML::Specification::FeatureType::New(this, 0) = 48;
      (*(void (**)(uint64_t *))v8)(a1);
      int v7 = *((_DWORD *)a1 + 107);
    }
    uint64_t v9 = a1[73];
    uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 16 * *((int *)a1 + 14));
    uint64_t v10 = *((int *)a1 + 14);
    *(void *)(v9 + 112) = result;
    *(void *)(v9 + 12CoreML::Specification::FeatureType::New(this, 0) = &result[v10];
    if ((int)v10 >= 1)
    {
      uint64_t v11 = 0;
      int v12 = v7 + 4;
      int v13 = (int *)(a1[38] + 40);
      do
      {
        int v14 = *(v13 - 7);
        int v15 = *v13;
        v13 += 24;
        int v16 = v15 * v14 / *((_DWORD *)a1 + 107);
        uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 16 * v16 * v12);
        uint64_t v17 = &result[v16];
        *(void *)(*(void *)(v9 + 112) + 8 * v11) = v17;
        *(void *)(*(void *)(v9 + 120) + 8 * v11++) = &v17[v16 * v12];
        uint64_t v10 = *((int *)a1 + 14);
      }
      while (v11 < v10);
    }
    int v7 = *((_DWORD *)a1 + 107) + 2;
  }
  else
  {
    *((_DWORD *)v5 + 25) = v7;
    LODWORD(v1CoreML::Specification::FeatureType::New(this, 0) = *((_DWORD *)a1 + 14);
  }
  if ((int)v10 >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = v5 + 2;
    uint64_t v20 = (_DWORD *)(a1[38] + 40);
    do
    {
      uint64_t result = (uint64_t (**)(uint64_t, int))(*(uint64_t (**)(uint64_t *, uint64_t, void, void))(a1[1] + 16))(a1, 1, (*(v20 - 1) * *(v20 - 3)), (*v20 * *(v20 - 7) / *((_DWORD *)a1 + 107) * v7));
      v19[v18++] = (uint64_t (*)(uint64_t, int))result;
      v20 += 24;
    }
    while (v18 < *((int *)a1 + 14));
  }
  return result;
}

uint64_t start_pass_main(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 584);
  if (a2 == 2)
  {
    *(void *)(v2 + 8) = process_data_crank_post;
  }
  else if (a2)
  {
    uint64_t v20 = *(void *)result;
    *(_DWORD *)(v20 + 4CoreML::Specification::FeatureType::New(this, 0) = 3;
    return (*(uint64_t (**)(uint64_t))v20)(result);
  }
  else if (*(_DWORD *)(*(void *)(result + 640) + 16))
  {
    *(void *)(v2 + 8) = process_data_context_main;
    uint64_t v3 = *(unsigned int *)(result + 56);
    if ((int)v3 >= 1)
    {
      uint64_t v4 = 0;
      int v5 = *(_DWORD *)(result + 428);
      uint64_t v6 = *(void *)(result + 304);
      do
      {
        int v7 = *(_DWORD *)(v6 + 40) * *(_DWORD *)(v6 + 12) / v5;
        uint64_t v8 = *(void **)(*(void *)(v2 + 112) + 8 * v4);
        uint64_t v9 = *(void *)(*(void *)(v2 + 120) + 8 * v4);
        uint64_t result = *(void *)(v2 + 8 * v4 + 16);
        uint64_t v10 = (v7 * (v5 + 2));
        if ((int)v10 >= 1)
        {
          uint64_t v11 = *(uint64_t **)(v2 + 8 * v4 + 16);
          int v12 = *(void **)(*(void *)(v2 + 120) + 8 * v4);
          int v13 = *(void **)(*(void *)(v2 + 112) + 8 * v4);
          do
          {
            uint64_t v14 = *v11++;
            *v12++ = v14;
            *v13++ = v14;
            --v10;
          }
          while (v10);
        }
        if (v7 >= 1)
        {
          LODWORD(v15) = 2 * v7;
          uint64_t v16 = v7 * v5;
          uint64_t v17 = v7 * (v5 - 2);
          if (2 * v7 <= 1) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = v15;
          }
          do
          {
            *(void *)(v9 + 8 * v17) = *(void *)(result + 8 * v16);
            *(void *)(v9 + 8 * v16) = *(void *)(result + 8 * v17);
            result += 8;
            v9 += 8;
            --v15;
          }
          while (v15);
          uint64_t v18 = -(uint64_t)v7;
          do
            v8[v18] = *v8;
          while (!__CFADD__(v18++, 1));
        }
        ++v4;
        v6 += 96;
      }
      while (v4 != v3);
    }
    *(void *)(v2 + 128) = 0;
    *(_DWORD *)(v2 + 136) = 0;
    *(_DWORD *)(v2 + 104) = 0;
  }
  else
  {
    *(void *)(v2 + 8) = process_data_simple_main;
    *(_DWORD *)(v2 + 96) = *(_DWORD *)(v2 + 100);
  }
  return result;
}

int32x2_t process_data_context_main(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v8 = *(int32x2_t **)(a1 + 584);
  if (!v8[13].i32[0])
  {
    if (!(*(unsigned int (**)(uint64_t, void))(*(void *)(a1 + 592) + 24))(a1, *(void *)&v8[v8[16].i32[0] + 14]))return result; {
    v8[13].i32[0] = 1;
    }
    ++v8[17].i32[0];
  }
  __int32 v10 = v8[16].i32[1];
  if (!v10)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 428);
    v8[12].i32[0] = 0;
    v8[12].i32[1] = v11 - 1;
    if (v8[17].i32[0] == *(_DWORD *)(a1 + 432))
    {
      uint64_t v12 = *(unsigned int *)(a1 + 56);
      if ((int)v12 >= 1)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(_DWORD **)(a1 + 304);
        uint64_t v15 = *(void *)(a1 + 584);
        uint64_t v16 = (void *)(v15 + 8 * *(int *)(v15 + 128) + 112);
        do
        {
          int v17 = v14[10] * v14[3];
          int v18 = v17 / v11;
          int v19 = v14[12] % v17;
          if (!v19) {
            int v19 = v14[10] * v14[3];
          }
          if (!v13) {
            *(_DWORD *)(v15 + 10CoreML::Specification::FeatureType::New(this, 0) = (v19 - 1) / v18 + 1;
          }
          if (v18 >= 1)
          {
            uint64_t v20 = *(void *)(*v16 + 8 * v13);
            LODWORD(v21) = 2 * v18;
            uint64_t v22 = v19 - 1;
            if ((int)v21 <= 1) {
              uint64_t v21 = 1;
            }
            else {
              uint64_t v21 = v21;
            }
            int v23 = (void *)(v20 + 8 * v19);
            do
            {
              *v23++ = *(void *)(v20 + 8 * v22);
              --v21;
            }
            while (v21);
          }
          ++v13;
          v14 += 24;
        }
        while (v13 != v12);
      }
    }
    v8[16].i32[1] = 1;
    goto LABEL_24;
  }
  if (v10 != 1)
  {
    if (v10 != 2) {
      return result;
    }
    (*(void (**)(uint64_t, void, int32x2_t *, void, uint64_t, _DWORD *, uint64_t))(*(void *)(a1 + 600)
                                                                                             + 8))(a1, *(void *)&v8[v8[16].i32[0] + 14], v8 + 12, v8[12].u32[1], a2, a3, a4);
    if (v8[12].i32[0] < (unsigned __int32)v8[12].i32[1]) {
      return result;
    }
    v8[16].i32[1] = 0;
    if (*a3 >= a4) {
      return result;
    }
    goto LABEL_9;
  }
LABEL_24:
  (*(void (**)(uint64_t, void, int32x2_t *, void, uint64_t, _DWORD *, uint64_t))(*(void *)(a1 + 600) + 8))(a1, *(void *)&v8[v8[16].i32[0] + 14], v8 + 12, v8[12].u32[1], a2, a3, a4);
  if (v8[12].i32[0] >= (unsigned __int32)v8[12].i32[1])
  {
    signed int v24 = *(_DWORD *)(a1 + 428);
    if (v8[17].i32[0] == 1)
    {
      uint64_t v25 = *(unsigned int *)(a1 + 56);
      if ((int)v25 >= 1)
      {
        uint64_t v26 = 0;
        uint64_t v27 = *(void *)(a1 + 304);
        uint64_t v28 = *(void *)(a1 + 584);
        int v29 = v24 + 2;
        do
        {
          int v30 = *(_DWORD *)(v27 + 40) * *(_DWORD *)(v27 + 12) / v24;
          if (v30 >= 1)
          {
            uint64_t v31 = 0;
            uint64_t v32 = *(void *)(*(void *)(v28 + 112) + 8 * v26);
            uint64_t v33 = *(void *)(*(void *)(v28 + 120) + 8 * v26);
            uint64_t v34 = 8 * (*(_DWORD *)(v27 + 40) * *(_DWORD *)(v27 + 12) / v24);
            int v35 = v30 * (v24 + 1);
            uint64_t v36 = v33 + 8 * v30 * v29;
            uint64_t v37 = v32 + 8 * v30 * v29;
            uint64_t v38 = v33 - 8 * v30;
            uint64_t v39 = v32 - 8 * v30;
            uint64_t v40 = v33 + 8 * v35;
            uint64_t v41 = v32 + 8 * v35;
            do
            {
              *(void *)(v39 + v31) = *(void *)(v41 + v31);
              *(void *)(v38 + v31) = *(void *)(v40 + v31);
              *(void *)(v37 + v31) = *(void *)(v32 + v31);
              *(void *)(v36 + v31) = *(void *)(v33 + v31);
              v31 += 8;
            }
            while (v34 != v31);
          }
          ++v26;
          v27 += 96;
        }
        while (v26 != v25);
      }
    }
    int v42 = v8[16].i32[0] ^ 1;
    v8[13].i32[0] = 0;
    int32x2_t result = vadd_s32(vdup_n_s32(v24), (int32x2_t)0x200000001);
    v8[12] = result;
    v8[16].i32[0] = v42;
    v8[16].i32[1] = 2;
  }
  return result;
}

uint64_t process_data_simple_main(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[73];
  uint64_t v9 = *(unsigned int *)(v8 + 100);
  if (*(_DWORD *)(v8 + 96) >= v9)
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(a1[74] + 24))(a1, v8 + 16);
    if (!result) {
      return result;
    }
    *(_DWORD *)(v8 + 96) = 0;
    uint64_t v9 = *(unsigned int *)(v8 + 100);
  }
  int v11 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1[75] + 8);
  return v11(a1, v8 + 16, v8 + 96, v9, a2, a3, a4);
}

uint64_t process_data_crank_post(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 600) + 8))();
}

uint64_t jpeg_resync_to_restart(_DWORD *a1, int a2)
{
  int v4 = a1[143];
  uint64_t v5 = *(void *)a1;
  *(_DWORD *)(v5 + 4CoreML::Specification::FeatureType::New(this, 0) = 124;
  *(_DWORD *)(v5 + 44) = v4;
  *(_DWORD *)(*(void *)a1 + 48) = a2;
  (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 0xFFFFFFFFLL);
  while (1)
  {
    if (v4 >= 192)
    {
      if ((v4 - 216) < 0xFFFFFFF8
        || v4 == (((_BYTE)a2 + 1) & 7 | 0xD0)
        || v4 == (((_BYTE)a2 + 2) & 7 | 0xD0))
      {
        uint64_t v8 = *(void *)a1;
        *(_DWORD *)(v8 + 4CoreML::Specification::FeatureType::New(this, 0) = 99;
        *(_DWORD *)(v8 + 44) = v4;
        *(_DWORD *)(*(void *)a1 + 48) = 3;
        (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 4);
        return 1;
      }
      if (v4 != (((_BYTE)a2 - 1) & 7 | 0xD0) && v4 != ((a2 + 6) & 7 | 0xD0)) {
        break;
      }
    }
    uint64_t v6 = *(void *)a1;
    *(_DWORD *)(v6 + 4CoreML::Specification::FeatureType::New(this, 0) = 99;
    *(_DWORD *)(v6 + 44) = v4;
    *(_DWORD *)(*(void *)a1 + 48) = 2;
    (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 4);
    if (!next_marker(a1)) {
      return 0;
    }
    int v4 = a1[143];
  }
  uint64_t v9 = *(void *)a1;
  *(_DWORD *)(v9 + 4CoreML::Specification::FeatureType::New(this, 0) = 99;
  *(_DWORD *)(v9 + 44) = v4;
  uint64_t v7 = 1;
  *(_DWORD *)(*(void *)a1 + 48) = 1;
  (*(void (**)(_DWORD *, uint64_t))(*(void *)a1 + 8))(a1, 4);
  a1[143] = 0;
  return v7;
}

uint64_t next_marker(void *a1)
{
  uint64_t v2 = (unsigned __int8 **)a1[5];
  uint64_t v3 = *v2;
  for (uint64_t i = v2[1]; i; v2[1] = i)
  {
LABEL_4:
    int v6 = *v3++;
    --i;
    if (v6 == 255)
    {
      do
      {
        if (!i)
        {
          uint64_t result = ((uint64_t (*)(void *))v2[3])(a1);
          if (!result) {
            return result;
          }
          uint64_t v3 = *v2;
          uint64_t i = v2[1];
        }
        --i;
        int v10 = *v3++;
        int v9 = v10;
      }
      while (v10 == 255);
      if (v9)
      {
        int v11 = *(_DWORD *)(a1[77] + 36);
        if (v11)
        {
          uint64_t v12 = *a1;
          *(_DWORD *)(v12 + 4CoreML::Specification::FeatureType::New(this, 0) = 119;
          *(_DWORD *)(v12 + 44) = v11;
          *(_DWORD *)(*a1 + 48) = v9;
          (*(void (**)(void *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
          *(_DWORD *)(a1[77] + 36) = 0;
        }
        *((_DWORD *)a1 + 143) = v9;
        uint64_t result = 1;
        _DWORD *v2 = v3;
        v2[1] = i;
        return result;
      }
      uint64_t v7 = a1[77];
      int v8 = *(_DWORD *)(v7 + 36) + 2;
    }
    else
    {
      uint64_t v7 = a1[77];
      int v8 = *(_DWORD *)(v7 + 36) + 1;
    }
    *(_DWORD *)(v7 + 36) = v8;
    _DWORD *v2 = v3;
  }
  uint64_t result = ((uint64_t (*)(void *))v2[3])(a1);
  if (result)
  {
    uint64_t v3 = *v2;
    uint64_t i = v2[1];
    goto LABEL_4;
  }
  return result;
}

void jinit_marker_reader(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 616) = v2;
  *(void *)uint64_t v2 = reset_marker_reader;
  *(void *)(v2 + 8) = read_markers;
  *(void *)(v2 + 16) = read_restart_marker;
  *(void *)(v2 + 4CoreML::Specification::FeatureType::New(this, 0) = skip_variable;
  *(_DWORD *)(v2 + 176) = 0;
  memset_pattern16((void *)(v2 + 48), off_26D7776B0, 0x80uLL);
  for (uint64_t i = 0; i != 64; i += 16)
  {
    int v4 = (void *)(v2 + 180 + i);
    *int v4 = 0;
    v4[1] = 0;
  }
  *(void *)(v2 + 48) = get_interesting_appn;
  *(void *)(v2 + 16CoreML::Specification::FeatureType::New(this, 0) = get_interesting_appn;
  uint64_t v5 = *(void *)(a1 + 616);
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 572) = 0;
  *(void *)(v5 + 24) = 0;
  *(_DWORD *)(v5 + 36) = 0;
  *(void *)(v5 + 248) = 0;
}

uint64_t reset_marker_reader(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 616);
  *(void *)(result + 304) = 0;
  *(_DWORD *)(result + 172) = 0;
  *(_DWORD *)(result + 572) = 0;
  *(void *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 36) = 0;
  *(void *)(v1 + 248) = 0;
  return result;
}

uint64_t read_markers(uint64_t a1)
{
  uint64_t v228 = (void *)(a1 + 340);
  uint64_t v229 = (void *)(a1 + 324);
  uint64_t v232 = *MEMORY[0x263EF8340];
  uint64_t v227 = (void *)(a1 + 356);
  int v2 = *(_DWORD *)(a1 + 572);
  if (v2) {
    goto LABEL_15;
  }
  while (2)
  {
    if (*(_DWORD *)(*(void *)(a1 + 616) + 24))
    {
      uint64_t result = next_marker((void *)a1);
      if (!result) {
        return result;
      }
      int v2 = *(_DWORD *)(a1 + 572);
    }
    else
    {
      int v4 = *(unsigned __int8 ***)(a1 + 40);
      uint64_t v5 = v4[1];
      if (!v5)
      {
        uint64_t result = ((uint64_t (*)(uint64_t))v4[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v5 = v4[1];
      }
      int v6 = *v4 + 1;
      int v7 = **v4;
      int v8 = v5 - 1;
      if (v5 == (unsigned __int8 *)1)
      {
        uint64_t result = ((uint64_t (*)(uint64_t))v4[3])(a1);
        if (!result) {
          return result;
        }
        int v6 = *v4;
        int v8 = v4[1];
      }
      int v10 = *v6;
      int v9 = v6 + 1;
      int v2 = v10;
      if (v7 != 255 || v2 != 216)
      {
        uint64_t v11 = *(void *)a1;
        *(_DWORD *)(v11 + 4CoreML::Specification::FeatureType::New(this, 0) = 55;
        *(_DWORD *)(v11 + 44) = v7;
        *(_DWORD *)(*(void *)a1 + 48) = v2;
        (**(void (***)(uint64_t))a1)(a1);
      }
      *(_DWORD *)(a1 + 572) = v2;
      *int v4 = v9;
      v4[1] = v8 - 1;
    }
LABEL_15:
    switch(v2)
    {
      case 192:
        uint64_t v15 = (uint64_t *)a1;
        int v16 = 1;
        goto LABEL_26;
      case 193:
        uint64_t v15 = (uint64_t *)a1;
        int v16 = 0;
LABEL_26:
        int v17 = 0;
        goto LABEL_28;
      case 194:
        uint64_t v15 = (uint64_t *)a1;
        int v16 = 0;
        int v17 = 1;
LABEL_28:
        int v18 = 0;
        goto LABEL_70;
      case 195:
      case 197:
      case 198:
      case 199:
      case 200:
      case 203:
      case 205:
      case 206:
      case 207:
        uint64_t v12 = *(void *)a1;
        int v13 = 63;
        goto LABEL_20;
      case 196:
        int v19 = *(unsigned __int8 ***)(a1 + 40);
        uint64_t v20 = v19[1];
        if (v20) {
          goto LABEL_32;
        }
        if (!((unsigned int (*)(uint64_t))v19[3])(a1)) {
          return 0;
        }
        uint64_t v20 = v19[1];
LABEL_32:
        uint64_t v22 = *v19 + 1;
        uint64_t v21 = **v19;
        int v23 = v20 - 1;
        if (v23) {
          goto LABEL_35;
        }
        if (!((unsigned int (*)(uint64_t))v19[3])(a1)) {
          return 0;
        }
        uint64_t v22 = *v19;
        int v23 = v19[1];
LABEL_35:
        signed int v24 = v23 - 1;
        unsigned int v26 = *v22;
        uint64_t v25 = v22 + 1;
        unint64_t v27 = (v21 << 8) | v26;
        unint64_t v28 = v27 - 2;
        if (v27 < 0x13) {
          goto LABEL_64;
        }
        while (2)
        {
          if (v24) {
            goto LABEL_39;
          }
          if (((unsigned int (*)(uint64_t))v19[3])(a1))
          {
            uint64_t v25 = *v19;
            signed int v24 = v19[1];
LABEL_39:
            unsigned int v30 = *v25++;
            uint64_t v29 = v30;
            uint64_t v31 = *(void *)a1;
            *(_DWORD *)(v31 + 4CoreML::Specification::FeatureType::New(this, 0) = 82;
            *(_DWORD *)(v31 + 44) = v30;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
            LODWORD(v33) = 0;
            v231[0] = 0;
            --v24;
            for (uint64_t i = 1; i != 17; ++i)
            {
              if (!v24)
              {
                if (!((unsigned int (*)(uint64_t))v19[3])(a1)) {
                  return 0;
                }
                uint64_t v25 = *v19;
                signed int v24 = v19[1];
              }
              int v35 = *v25++;
              v231[i] = v35;
              int64_t v33 = (v33 + v35);
              --v24;
            }
            int64_t v36 = v28 - 17;
            uint64_t v37 = *(void *)a1;
            v32.i32[0] = *(_DWORD *)&v231[1];
            uint32x4_t v38 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v32));
            *(uint32x4_t *)(v37 + 44) = v38;
            v38.i32[0] = *(_DWORD *)&v231[5];
            *(uint32x4_t *)(v37 + 6CoreML::Specification::FeatureType::New(this, 0) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v38.i8));
            *(_DWORD *)(v37 + 4CoreML::Specification::FeatureType::New(this, 0) = 88;
            __n128 v39 = ((__n128 (*)(uint64_t, uint64_t))*(void *)(v37 + 8))(a1, 2);
            uint64_t v40 = *(void *)a1;
            v39.n128_u32[0] = *(_DWORD *)&v231[9];
            uint32x4_t v41 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v39.n128_u64[0]));
            *(uint32x4_t *)(v40 + 44) = v41;
            v41.i32[0] = *(_DWORD *)&v231[13];
            *(uint32x4_t *)(v40 + 6CoreML::Specification::FeatureType::New(this, 0) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v41.i8));
            *(_DWORD *)(v40 + 4CoreML::Specification::FeatureType::New(this, 0) = 88;
            (*(void (**)(uint64_t, uint64_t))(v40 + 8))(a1, 2);
            if (v33 > 0x100 || v36 < v33)
            {
              uint64_t v42 = *(void *)a1;
              *(_DWORD *)(v42 + 4CoreML::Specification::FeatureType::New(this, 0) = 9;
              (*(void (**)(uint64_t))v42)(a1);
              if (!v33) {
                goto LABEL_54;
              }
            }
            else if (!v33)
            {
              goto LABEL_54;
            }
            int v43 = __src;
            int64_t v44 = v33;
            do
            {
              if (!v24)
              {
                if (!((unsigned int (*)(uint64_t))v19[3])(a1)) {
                  return 0;
                }
                uint64_t v25 = *v19;
                signed int v24 = v19[1];
              }
              --v24;
              char v45 = *v25++;
              *v43++ = v45;
              --v44;
            }
            while (v44);
LABEL_54:
            unsigned int v46 = v29 - 16;
            if ((v29 & 0x10) != 0)
            {
              uint64_t v47 = a1 + 8 * (v29 - 16) + 264;
            }
            else
            {
              unsigned int v46 = v29;
              uint64_t v47 = a1 + 8 * v29 + 232;
            }
            if (v46 >= 4)
            {
              uint64_t v48 = *(void *)a1;
              *(_DWORD *)(v48 + 4CoreML::Specification::FeatureType::New(this, 0) = 31;
              *(_DWORD *)(v48 + 44) = v46;
              (**(void (***)(uint64_t))a1)(a1);
            }
            uint64_t v49 = *(void *)v47;
            if (!*(void *)v47)
            {
              uint64_t v49 = jpeg_alloc_huff_table(a1);
              *(void *)uint64_t v47 = v49;
            }
            *(_OWORD *)uint64_t v49 = *(_OWORD *)v231;
            *(unsigned char *)(v49 + 16) = v231[16];
            if (v33) {
              memcpy((void *)(*(void *)v47 + 17), __src, v33);
            }
            unint64_t v28 = v36 - v33;
            if (v36 - v33 <= 16)
            {
LABEL_64:
              if (v28)
              {
                uint64_t v50 = *(void *)a1;
                *(_DWORD *)(v50 + 4CoreML::Specification::FeatureType::New(this, 0) = 12;
                (*(void (**)(uint64_t))v50)(a1);
              }
              *int v19 = v25;
              v19[1] = v24;
              goto LABEL_274;
            }
            continue;
          }
          return 0;
        }
      case 201:
        uint64_t v15 = (uint64_t *)a1;
        int v16 = 0;
        int v17 = 0;
        goto LABEL_69;
      case 202:
        uint64_t v15 = (uint64_t *)a1;
        int v16 = 0;
        int v17 = 1;
LABEL_69:
        int v18 = 1;
LABEL_70:
        uint64_t result = get_sof(v15, v16, v17, v18);
        if (!result) {
          return result;
        }
        goto LABEL_274;
      case 204:
        uint64_t v51 = *(unsigned __int8 ***)(a1 + 40);
        int v52 = v51[1];
        if (v52) {
          goto LABEL_75;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v51[3])(a1);
        if (!result) {
          return result;
        }
        int v52 = v51[1];
LABEL_75:
        uint64_t v53 = *v51 + 1;
        uint64_t v54 = **v51;
        int v55 = v52 - 1;
        if (v55) {
          goto LABEL_78;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v51[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v53 = *v51;
        int v55 = v51[1];
LABEL_78:
        unsigned int v57 = *v53;
        unsigned int v56 = v53 + 1;
        unint64_t v58 = (v54 << 8) | v57;
        uint64_t v59 = v55 - 1;
        if (v58 >= 3)
        {
          while (1)
          {
            if (!v59)
            {
              uint64_t result = ((uint64_t (*)(uint64_t))v51[3])(a1);
              if (!result) {
                return result;
              }
              unsigned int v56 = *v51;
              uint64_t v59 = v51[1];
            }
            unsigned int v62 = *v56;
            uint64_t v60 = v56 + 1;
            uint64_t v61 = v62;
            uint64_t v63 = v59 - 1;
            if (!v63)
            {
              uint64_t result = ((uint64_t (*)(uint64_t))v51[3])(a1);
              if (!result) {
                return result;
              }
              uint64_t v60 = *v51;
              uint64_t v63 = v51[1];
            }
            unsigned int v64 = *v60;
            uint64_t v65 = *(void *)a1;
            *(_DWORD *)(v65 + 4CoreML::Specification::FeatureType::New(this, 0) = 81;
            *(_DWORD *)(v65 + 44) = v61;
            *(_DWORD *)(*(void *)a1 + 48) = v64;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
            if (v61 < 0x20)
            {
              if (v61 < 0x10)
              {
                uint64_t v68 = a1 + v61;
                *(unsigned char *)(v68 + 324) = v64 & 0xF;
                *(unsigned char *)(v68 + 34CoreML::Specification::FeatureType::New(this, 0) = v64 >> 4;
                if ((v64 & 0xF) > v64 >> 4)
                {
                  uint64_t v69 = *(void *)a1;
                  *(_DWORD *)(v69 + 4CoreML::Specification::FeatureType::New(this, 0) = 30;
                  *(_DWORD *)(v69 + 44) = v64;
                  (**(void (***)(uint64_t))a1)(a1);
                }
                goto LABEL_89;
              }
            }
            else
            {
              uint64_t v66 = *(void *)a1;
              *(_DWORD *)(v66 + 4CoreML::Specification::FeatureType::New(this, 0) = 29;
              *(_DWORD *)(v66 + 44) = v61;
              (**(void (***)(uint64_t))a1)(a1);
            }
            *(unsigned char *)(a1 + (v61 - 16) + 356) = v64;
LABEL_89:
            unsigned int v56 = v60 + 1;
            uint64_t v59 = v63 - 1;
            v58 -= 2;
            unint64_t v67 = v58 - 2;
            if (v58 <= 2) {
              goto LABEL_269;
            }
          }
        }
        unint64_t v67 = v58 - 2;
LABEL_269:
        if (v67)
        {
          uint64_t v179 = *(void *)a1;
          *(_DWORD *)(v179 + 4CoreML::Specification::FeatureType::New(this, 0) = 12;
          (*(void (**)(uint64_t))v179)(a1);
        }
LABEL_271:
        *uint64_t v51 = v56;
        v51[1] = v59;
LABEL_274:
        *(_DWORD *)(a1 + 572) = 0;
        continue;
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
        goto LABEL_22;
      case 216:
        uint64_t v70 = *(void *)a1;
        *(_DWORD *)(v70 + 4CoreML::Specification::FeatureType::New(this, 0) = 104;
        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(a1, 1);
        uint64_t v71 = *(void *)(a1 + 616);
        if (*(_DWORD *)(v71 + 24))
        {
          uint64_t v72 = *(void *)a1;
          *(_DWORD *)(v72 + 4CoreML::Specification::FeatureType::New(this, 0) = 64;
          (*(void (**)(uint64_t))v72)(a1);
          uint64_t v71 = *(void *)(a1 + 616);
        }
        *uint64_t v229 = 0;
        v229[1] = 0;
        void *v228 = 0x101010101010101;
        v228[1] = 0x101010101010101;
        void *v227 = 0x505050505050505;
        v227[1] = 0x505050505050505;
        *(void *)(a1 + 372) = 0;
        *(_DWORD *)(a1 + 6CoreML::Specification::FeatureType::New(this, 0) = 0;
        *(void *)(a1 + 396) = 0;
        *(_WORD *)(a1 + 38CoreML::Specification::FeatureType::New(this, 0) = 257;
        *(unsigned char *)(a1 + 382) = 0;
        *(void *)(a1 + 384) = 65537;
        *(unsigned char *)(a1 + 392) = 0;
        *(_DWORD *)(v71 + 24) = 1;
        goto LABEL_274;
      case 217:
        uint64_t v181 = *(void *)a1;
        *(_DWORD *)(v181 + 4CoreML::Specification::FeatureType::New(this, 0) = 87;
        (*(void (**)(uint64_t, uint64_t))(v181 + 8))(a1, 1);
        *(_DWORD *)(a1 + 572) = 0;
        return 2;
      case 218:
        uint64_t v182 = *(unsigned __int8 ***)(a1 + 40);
        BOOL v183 = *v182;
        BOOL v184 = v182[1];
        if (!*(_DWORD *)(*(void *)(a1 + 616) + 28))
        {
          uint64_t v185 = *(void *)a1;
          *(_OWORD *)(v185 + 6CoreML::Specification::FeatureType::New(this, 0) = *(_OWORD *)algn_2246ED73C;
          *(_OWORD *)(v185 + 76) = xmmword_2246ED74C;
          *(_OWORD *)(v185 + 92) = unk_2246ED75C;
          *(_OWORD *)(v185 + 108) = xmmword_2246ED76C;
          *(_DWORD *)(v185 + 4CoreML::Specification::FeatureType::New(this, 0) = 60;
          *(_OWORD *)(v185 + 44) = xmmword_2246ED72C;
          (**(void (***)(uint64_t))a1)(a1);
        }
        if (v184) {
          goto LABEL_283;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v182[3])(a1);
        if (!result) {
          return result;
        }
        BOOL v183 = *v182;
        BOOL v184 = v182[1];
LABEL_283:
        unsigned int v188 = *v183;
        int v186 = v183 + 1;
        uint64_t v187 = v188;
        unint64_t v189 = v184 - 1;
        if (v184 != (unsigned __int8 *)1) {
          goto LABEL_286;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v182[3])(a1);
        if (!result) {
          return result;
        }
        int v186 = *v182;
        unint64_t v189 = v182[1];
LABEL_286:
        unsigned int v192 = *v186;
        uint64_t v190 = v186 + 1;
        uint64_t v191 = v192;
        v193 = v189 - 1;
        if (v189 != (unsigned __int8 *)1) {
          goto LABEL_289;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v182[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v190 = *v182;
        v193 = v182[1];
LABEL_289:
        uint64_t v194 = (v187 << 8) | v191;
        uint64_t v195 = *v190;
        uint64_t v196 = *(void *)a1;
        *(_DWORD *)(v196 + 4CoreML::Specification::FeatureType::New(this, 0) = 105;
        *(_DWORD *)(v196 + 44) = v195;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
        if (v194 != 2 * v195 + 6 || v195 > 4) {
          goto LABEL_294;
        }
        if (v195)
        {
          *(_DWORD *)(a1 + 448) = v195;
          uint64_t v199 = v190 + 1;
          uint64_t v200 = v193 - 1;
          goto LABEL_298;
        }
        if (*(_DWORD *)(a1 + 316))
        {
          *(_DWORD *)(a1 + 448) = 0;
          uint64_t v199 = v190 + 1;
          uint64_t v200 = v193 - 1;
        }
        else
        {
LABEL_294:
          uint64_t v198 = *(void *)a1;
          *(_DWORD *)(v198 + 4CoreML::Specification::FeatureType::New(this, 0) = 12;
          (*(void (**)(uint64_t))v198)(a1);
          *(_DWORD *)(a1 + 448) = v195;
          uint64_t v199 = v190 + 1;
          uint64_t v200 = v193 - 1;
          if (v195)
          {
LABEL_298:
            unint64_t v201 = 0;
            while (1)
            {
              if (!v200)
              {
                uint64_t result = ((uint64_t (*)(uint64_t))v182[3])(a1);
                if (!result) {
                  return result;
                }
                uint64_t v199 = *v182;
                uint64_t v200 = v182[1];
              }
              int v204 = *v199;
              uint64_t v203 = v199 + 1;
              int v202 = v204;
              if (v201)
              {
                uint64_t v205 = 0;
                while (**(_DWORD **)(a1 + 456 + 8 * v205) != v202)
                {
                  if (v201 == ++v205) {
                    goto LABEL_313;
                  }
                }
                int v206 = **(_DWORD **)(a1 + 456);
                if (v201 >= 2)
                {
                  uint64_t v207 = 0;
                  do
                  {
                    if (**(_DWORD **)(a1 + 464 + 8 * v207) > v206) {
                      int v206 = **(_DWORD **)(a1 + 464 + 8 * v207);
                    }
                    ++v207;
                  }
                  while (v201 - 1 != v207);
                }
                int v202 = v206 + 1;
              }
LABEL_313:
              int v208 = *(_DWORD **)(a1 + 304);
              int v209 = *(_DWORD *)(a1 + 56);
              if (v209 >= 1)
              {
                uint64_t v210 = (uint64_t)&v208[24 * (v209 - 1) + 24];
                do
                {
                  if (v202 == *v208) {
                    goto LABEL_319;
                  }
                  v208 += 24;
                  --v209;
                }
                while (v209);
                int v208 = (_DWORD *)v210;
              }
              uint64_t v211 = *(void *)a1;
              *(_DWORD *)(v211 + 4CoreML::Specification::FeatureType::New(this, 0) = 4;
              *(_DWORD *)(v211 + 44) = v202;
              (**(void (***)(uint64_t))a1)(a1);
LABEL_319:
              *(void *)(a1 + 8 * v201 + 456) = v208;
              BOOL v212 = v200 - 1;
              if (!v212)
              {
                uint64_t result = ((uint64_t (*)(uint64_t))v182[3])(a1);
                if (!result) {
                  return result;
                }
                uint64_t v203 = *v182;
                BOOL v212 = v182[1];
              }
              unsigned int v213 = *v203;
              uint64_t v199 = v203 + 1;
              v208[5] = v213 >> 4;
              v208[6] = v213 & 0xF;
              uint64_t v214 = *(void *)a1;
              *(_DWORD *)(v214 + 44) = *v208;
              *(_DWORD *)(v214 + 48) = v208[5];
              *(_DWORD *)(v214 + 52) = v208[6];
              *(_DWORD *)(v214 + 4CoreML::Specification::FeatureType::New(this, 0) = 106;
              (*(void (**)(uint64_t, uint64_t))(v214 + 8))(a1, 1);
              ++v201;
              uint64_t v200 = v212 - 1;
              if (v201 == v195)
              {
                char v215 = 0;
                goto LABEL_327;
              }
            }
          }
        }
        char v215 = 1;
LABEL_327:
        if (v200) {
          goto LABEL_330;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v182[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v199 = *v182;
        uint64_t v200 = v182[1];
LABEL_330:
        int v217 = *v199;
        uint64_t v216 = v199 + 1;
        *(_DWORD *)(a1 + 54CoreML::Specification::FeatureType::New(this, 0) = v217;
        uint64_t v218 = v200 - 1;
        if (v200 != (unsigned __int8 *)1) {
          goto LABEL_333;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v182[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v216 = *v182;
        uint64_t v218 = v182[1];
LABEL_333:
        int v220 = *v216;
        unint64_t v219 = v216 + 1;
        *(_DWORD *)(a1 + 544) = v220;
        int v221 = v218 - 1;
        if (v221) {
          goto LABEL_336;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v182[3])(a1);
        if (result)
        {
          unint64_t v219 = *v182;
          int v221 = v182[1];
LABEL_336:
          v222 = v221 - 1;
          unsigned int v224 = *v219;
          int v223 = v219 + 1;
          *(_DWORD *)(a1 + 548) = v224 >> 4;
          *(_DWORD *)(a1 + 552) = v224 & 0xF;
          uint64_t v225 = *(void *)a1;
          *(_DWORD *)(v225 + 44) = *(_DWORD *)(a1 + 540);
          *(_DWORD *)(v225 + 48) = *(_DWORD *)(a1 + 544);
          *(_DWORD *)(v225 + 52) = *(_DWORD *)(a1 + 548);
          *(_DWORD *)(v225 + 56) = *(_DWORD *)(a1 + 552);
          *(_DWORD *)(v225 + 4CoreML::Specification::FeatureType::New(this, 0) = 107;
          (*(void (**)(uint64_t, uint64_t))(v225 + 8))(a1, 1);
          *(_DWORD *)(*(void *)(a1 + 616) + 32) = 0;
          if ((v215 & 1) == 0) {
            ++*(_DWORD *)(a1 + 172);
          }
          *uint64_t v182 = v223;
          v182[1] = v222;
          uint64_t result = 1;
          *(_DWORD *)(a1 + 572) = 0;
        }
        return result;
      case 219:
        uint64_t v73 = *(unsigned __int8 ***)(a1 + 40);
        uint64_t v74 = v73[1];
        if (v74) {
          goto LABEL_99;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v73[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v74 = v73[1];
LABEL_99:
        unsigned int v76 = *v73 + 1;
        uint64_t v75 = **v73;
        uint64_t v77 = v74 - 1;
        if (v77) {
          goto LABEL_102;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v73[3])(a1);
        if (!result) {
          return result;
        }
        unsigned int v76 = *v73;
        uint64_t v77 = v73[1];
LABEL_102:
        unint64_t v78 = v77 - 1;
        unsigned int v80 = *v76;
        uint64_t v79 = v76 + 1;
        unint64_t v81 = (v75 << 8) | v80;
        uint64_t v82 = v81 - 2;
        if (v81 < 3) {
          goto LABEL_265;
        }
        break;
      case 220:
        uint64_t result = skip_variable((void *)a1);
        if (!result) {
          return result;
        }
        goto LABEL_274;
      case 221:
        uint64_t v51 = *(unsigned __int8 ***)(a1 + 40);
        long long v103 = v51[1];
        if (v103) {
          goto LABEL_158;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v51[3])(a1);
        if (!result) {
          return result;
        }
        long long v103 = v51[1];
LABEL_158:
        long long v104 = *v51 + 1;
        uint64_t v105 = **v51;
        long long v106 = v103 - 1;
        if (v103 != (unsigned __int8 *)1) {
          goto LABEL_161;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v51[3])(a1);
        if (!result) {
          return result;
        }
        long long v104 = *v51;
        long long v106 = v51[1];
LABEL_161:
        unsigned int v108 = *v104;
        long long v107 = v104 + 1;
        if (((v105 << 8) | v108) != 4)
        {
          uint64_t v109 = *(void *)a1;
          *(_DWORD *)(v109 + 4CoreML::Specification::FeatureType::New(this, 0) = 12;
          (*(void (**)(uint64_t))v109)(a1);
        }
        uint64_t v110 = v106 - 1;
        if (v106 != (unsigned __int8 *)1) {
          goto LABEL_166;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v51[3])(a1);
        if (!result) {
          return result;
        }
        long long v107 = *v51;
        uint64_t v110 = v51[1];
LABEL_166:
        int v113 = *v107;
        unint64_t v111 = v107 + 1;
        int v112 = v113;
        uint64_t v114 = v110 - 1;
        if (v114) {
          goto LABEL_169;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v51[3])(a1);
        if (!result) {
          return result;
        }
        unint64_t v111 = *v51;
        uint64_t v114 = v51[1];
LABEL_169:
        int v115 = v112 << 8;
        uint64_t v59 = v114 - 1;
        int v116 = *v111;
        unsigned int v56 = v111 + 1;
        int v117 = v115 | v116;
        uint64_t v118 = *(void *)a1;
        *(_DWORD *)(v118 + 4CoreML::Specification::FeatureType::New(this, 0) = 84;
        *(_DWORD *)(v118 + 44) = v115 | v116;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
        *(_DWORD *)(a1 + 372) = v117;
        goto LABEL_271;
      case 222:
      case 223:
      case 240:
      case 241:
      case 242:
      case 243:
      case 244:
      case 245:
      case 246:
      case 247:
      case 249:
      case 250:
      case 251:
      case 252:
      case 253:
        goto LABEL_23;
      case 224:
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
      case 239:
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 616) + 8 * (v2 - 224) + 48))(a1);
        goto LABEL_17;
      case 248:
        uint64_t v119 = *(unsigned __int8 ***)(a1 + 40);
        char v120 = *v119;
        uint64_t v121 = v119[1];
        if (!*(_DWORD *)(*(void *)(a1 + 616) + 28))
        {
          uint64_t v122 = *(void *)a1;
          *(_DWORD *)(v122 + 4CoreML::Specification::FeatureType::New(this, 0) = 60;
          *(_OWORD *)(v122 + 6CoreML::Specification::FeatureType::New(this, 0) = unk_2246ED78D;
          *(_OWORD *)(v122 + 76) = xmmword_2246ED79D;
          *(_OWORD *)(v122 + 92) = unk_2246ED7AD;
          *(_OWORD *)(v122 + 108) = xmmword_2246ED7BD;
          *(_OWORD *)(v122 + 44) = xmmword_2246ED77D;
          (**(void (***)(uint64_t))a1)(a1);
        }
        if (*(int *)(a1 + 56) < 3) {
          goto LABEL_272;
        }
        if (v121) {
          goto LABEL_176;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_176:
        unsigned int v125 = *v120;
        uint64_t v124 = v120 + 1;
        uint64_t v123 = v125;
        uint64_t v126 = v121 - 1;
        if (v121 != (unsigned __int8 *)1) {
          goto LABEL_179;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v124 = *v119;
        uint64_t v126 = v119[1];
LABEL_179:
        unsigned int v128 = *v124;
        uint64_t v127 = v124 + 1;
        if (((v123 << 8) | v128) != 0x18)
        {
          uint64_t v129 = *(void *)a1;
          *(_DWORD *)(v129 + 4CoreML::Specification::FeatureType::New(this, 0) = 12;
          (*(void (**)(uint64_t))v129)(a1);
        }
        uint64_t v130 = v126 - 1;
        if (v130) {
          goto LABEL_184;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v127 = *v119;
        uint64_t v130 = v119[1];
LABEL_184:
        int v132 = *v127;
        uint64_t v131 = v127 + 1;
        if (v132 != 13)
        {
          uint64_t v133 = *(void *)a1;
          *(_DWORD *)(v133 + 4CoreML::Specification::FeatureType::New(this, 0) = 70;
          *(_DWORD *)(v133 + 44) = *(_DWORD *)(a1 + 572);
          (**(void (***)(uint64_t))a1)(a1);
        }
        unsigned __int8 v134 = v130 - 1;
        if (v130 != (unsigned __int8 *)1) {
          goto LABEL_189;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v131 = *v119;
        unsigned __int8 v134 = v119[1];
LABEL_189:
        int v137 = *v131;
        uint64_t v136 = v131 + 1;
        int v135 = v137;
        uint64_t v138 = v134 - 1;
        if (v138) {
          goto LABEL_192;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v136 = *v119;
        uint64_t v138 = v119[1];
LABEL_192:
        uint64_t v121 = v138 - 1;
        int v139 = *v136;
        char v120 = v136 + 1;
        if (((v135 << 8) | v139) != 0xFF) {
          goto LABEL_272;
        }
        if (v138 != (unsigned __int8 *)1) {
          goto LABEL_196;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_196:
        --v121;
        int v140 = *v120++;
        if (v140 != 3) {
          goto LABEL_272;
        }
        if (v121) {
          goto LABEL_200;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_200:
        --v121;
        int v141 = *v120++;
        uint64_t v142 = *(_DWORD **)(a1 + 304);
        if (v142[24] != v141) {
          goto LABEL_272;
        }
        if (v121) {
          goto LABEL_204;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
        uint64_t v142 = *(_DWORD **)(a1 + 304);
LABEL_204:
        --v121;
        int v143 = *v120++;
        if (*v142 != v143) {
          goto LABEL_272;
        }
        if (v121) {
          goto LABEL_208;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
        uint64_t v142 = *(_DWORD **)(a1 + 304);
LABEL_208:
        --v121;
        int v144 = *v120++;
        if (v142[48] != v144) {
          goto LABEL_272;
        }
        if (v121) {
          goto LABEL_212;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_212:
        --v121;
        int v145 = *v120++;
        if (v145 != 128) {
          goto LABEL_272;
        }
        if (v121) {
          goto LABEL_216;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_216:
        int v148 = *v120;
        long long v147 = v120 + 1;
        int v146 = v148;
        char v149 = v121 - 1;
        if (v121 != (unsigned __int8 *)1) {
          goto LABEL_219;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        long long v147 = *v119;
        char v149 = v119[1];
LABEL_219:
        uint64_t v121 = v149 - 1;
        int v150 = *v147;
        char v120 = v147 + 1;
        if ((v146 << 8) | v150) {
          goto LABEL_272;
        }
        if (v149 != (unsigned __int8 *)1) {
          goto LABEL_223;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_223:
        int v153 = *v120;
        char v152 = v120 + 1;
        int v151 = v153;
        uint64_t v154 = v121 - 1;
        if (v121 != (unsigned __int8 *)1) {
          goto LABEL_226;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v152 = *v119;
        uint64_t v154 = v119[1];
LABEL_226:
        uint64_t v121 = v154 - 1;
        int v155 = *v152;
        char v120 = v152 + 1;
        if ((v151 << 8) | v155) {
          goto LABEL_272;
        }
        if (v154 != (unsigned __int8 *)1) {
          goto LABEL_230;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_230:
        --v121;
        if (*v120++) {
          goto LABEL_272;
        }
        if (v121) {
          goto LABEL_234;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_234:
        int v159 = *v120;
        uint64_t v158 = v120 + 1;
        int v157 = v159;
        uint64_t v160 = v121 - 1;
        if (v121 != (unsigned __int8 *)1) {
          goto LABEL_237;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v158 = *v119;
        uint64_t v160 = v119[1];
LABEL_237:
        uint64_t v121 = v160 - 1;
        int v161 = *v158;
        char v120 = v158 + 1;
        if (((v157 << 8) | v161) != 1) {
          goto LABEL_272;
        }
        if (v160 != (unsigned __int8 *)1) {
          goto LABEL_241;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_241:
        int v164 = *v120;
        unint64_t v163 = v120 + 1;
        int v162 = v164;
        uint64_t v165 = v121 - 1;
        if (v121 != (unsigned __int8 *)1) {
          goto LABEL_244;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        unint64_t v163 = *v119;
        uint64_t v165 = v119[1];
LABEL_244:
        uint64_t v121 = v165 - 1;
        int v166 = *v163;
        char v120 = v163 + 1;
        if ((v162 << 8) | v166) {
          goto LABEL_272;
        }
        if (v165 != (unsigned __int8 *)1) {
          goto LABEL_248;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_248:
        --v121;
        if (*v120++) {
          goto LABEL_272;
        }
        if (v121) {
          goto LABEL_252;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_252:
        int v170 = *v120;
        uint64_t v169 = v120 + 1;
        int v168 = v170;
        uint64_t v171 = v121 - 1;
        if (v121 != (unsigned __int8 *)1) {
          goto LABEL_255;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        uint64_t v169 = *v119;
        uint64_t v171 = v119[1];
LABEL_255:
        uint64_t v121 = v171 - 1;
        int v172 = *v169;
        char v120 = v169 + 1;
        if (((v168 << 8) | v172) != 1) {
          goto LABEL_272;
        }
        if (v171 != (unsigned __int8 *)1) {
          goto LABEL_259;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        char v120 = *v119;
        uint64_t v121 = v119[1];
LABEL_259:
        int v175 = *v120;
        int v174 = v120 + 1;
        int v173 = v175;
        uint64_t v176 = v121 - 1;
        if (v121 != (unsigned __int8 *)1) {
          goto LABEL_262;
        }
        uint64_t result = ((uint64_t (*)(uint64_t))v119[3])(a1);
        if (!result) {
          return result;
        }
        int v174 = *v119;
        uint64_t v176 = v119[1];
LABEL_262:
        uint64_t v121 = v176 - 1;
        int v177 = *v174;
        char v120 = v174 + 1;
        if ((v173 << 8) | v177)
        {
LABEL_272:
          uint64_t v180 = *(void *)a1;
          *(_DWORD *)(v180 + 4CoreML::Specification::FeatureType::New(this, 0) = 28;
          (*(void (**)(uint64_t))v180)(a1);
        }
        *(_DWORD *)(a1 + 396) = 1;
        std::__shared_weak_count *v119 = v120;
        v119[1] = v121;
        goto LABEL_274;
      case 254:
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 616) + 40))(a1);
LABEL_17:
        if (!result) {
          return result;
        }
        goto LABEL_274;
      default:
        if (v2 == 1)
        {
LABEL_22:
          uint64_t v14 = *(void *)a1;
          *(_DWORD *)(v14 + 4CoreML::Specification::FeatureType::New(this, 0) = 94;
          *(_DWORD *)(v14 + 44) = v2;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
        }
        else
        {
LABEL_23:
          uint64_t v12 = *(void *)a1;
          int v13 = 70;
LABEL_20:
          *(_DWORD *)(v12 + 4CoreML::Specification::FeatureType::New(this, 0) = v13;
          *(_DWORD *)(v12 + 44) = v2;
          (**(void (***)(uint64_t))a1)(a1);
        }
        goto LABEL_274;
    }
    break;
  }
  while (1)
  {
    if (!v78)
    {
      uint64_t result = ((uint64_t (*)(uint64_t))v73[3])(a1);
      if (!result) {
        return result;
      }
      uint64_t v79 = *v73;
      unint64_t v78 = v73[1];
    }
    unsigned int v83 = *v79;
    uint64_t v84 = v83 & 0xF;
    uint64_t v85 = *(void *)a1;
    *(_DWORD *)(v85 + 4CoreML::Specification::FeatureType::New(this, 0) = 83;
    *(_DWORD *)(v85 + 44) = v83 & 0xF;
    *(_DWORD *)(*(void *)a1 + 48) = v83 >> 4;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, 1);
    if ((v83 & 0xF) >= 4)
    {
      uint64_t v86 = *(void *)a1;
      *(_DWORD *)(v86 + 4CoreML::Specification::FeatureType::New(this, 0) = 32;
      *(_DWORD *)(v86 + 44) = v84;
      (**(void (***)(uint64_t))a1)(a1);
    }
    uint64_t v87 = a1 + 8 * v84;
    BOOL v90 = *(uint16x4_t **)(v87 + 200);
    uint64_t v89 = (uint16x4_t **)(v87 + 200);
    uint64_t v88 = v90;
    if (!v90)
    {
      uint64_t v88 = (uint16x4_t *)jpeg_alloc_quant_table(a1);
      *uint64_t v89 = v88;
    }
    uint64_t v226 = v82 - 1;
    if (v83 >= 0x10)
    {
      if ((unint64_t)v82 > 0x80)
      {
LABEL_120:
        unint64_t v91 = 64;
LABEL_121:
        int v92 = &jpeg_natural_order;
        goto LABEL_122;
      }
      memset_pattern16(v88, &unk_2246ED7D0, 0x80uLL);
      unint64_t v91 = (unint64_t)(v82 - 1) >> 1;
    }
    else
    {
      if ((unint64_t)v82 > 0x40) {
        goto LABEL_120;
      }
      memset_pattern16(v88, &unk_2246ED7D0, 0x80uLL);
      unint64_t v91 = v82 - 1;
    }
    if ((int)v91 > 24)
    {
      switch(v91)
      {
        case 0x19:
          int v92 = &jpeg_natural_order5;
          goto LABEL_122;
        case 0x24:
          int v92 = &jpeg_natural_order6;
          goto LABEL_122;
        case 0x31:
          int v92 = &jpeg_natural_order7;
          goto LABEL_122;
      }
      goto LABEL_121;
    }
    if (v91 == 4)
    {
      int v92 = &jpeg_natural_order2;
      goto LABEL_122;
    }
    if (v91 == 9)
    {
      int v92 = &jpeg_natural_order3;
      goto LABEL_122;
    }
    if (v91 != 16) {
      goto LABEL_121;
    }
    int v92 = &jpeg_natural_order4;
LABEL_122:
    ++v79;
    --v78;
    if (v91)
    {
      unint64_t v93 = v91;
      do
      {
        if (v83 >= 0x10)
        {
          if (!v78)
          {
            uint64_t result = ((uint64_t (*)(uint64_t))v73[3])(a1);
            if (!result) {
              return result;
            }
            uint64_t v79 = *v73;
            unint64_t v78 = v73[1];
          }
          __int16 v96 = *v79++;
          __int16 v95 = v96;
          if (!--v78)
          {
            uint64_t result = ((uint64_t (*)(uint64_t))v73[3])(a1);
            if (!result) {
              return result;
            }
            uint64_t v79 = *v73;
            unint64_t v78 = v73[1];
          }
          __int16 v94 = (v95 << 8) | *v79;
        }
        else
        {
          if (!v78)
          {
            uint64_t result = ((uint64_t (*)(uint64_t))v73[3])(a1);
            if (!result) {
              return result;
            }
            uint64_t v79 = *v73;
            unint64_t v78 = v73[1];
          }
          __int16 v94 = *v79;
        }
        uint64_t v97 = *v92++;
        v88->i16[v97] = v94;
        ++v79;
        --v78;
        --v93;
      }
      while (v93);
    }
    if (*(int *)(*(void *)a1 + 124) >= 2)
    {
      int v98 = v88 + 1;
      unint64_t v99 = -8;
      do
      {
        uint64_t v100 = *(void *)a1;
        *(uint32x4_t *)(v100 + 44) = vmovl_u16(v98[-1]);
        uint16x4_t v101 = *v98;
        v98 += 2;
        *(uint32x4_t *)(v100 + 6CoreML::Specification::FeatureType::New(this, 0) = vmovl_u16(v101);
        *(_DWORD *)(v100 + 4CoreML::Specification::FeatureType::New(this, 0) = 95;
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(a1, 2);
        v99 += 8;
      }
      while (v99 < 0x38);
    }
    if (v83 >= 0x10) {
      unint64_t v102 = v91;
    }
    else {
      unint64_t v102 = 0;
    }
    uint64_t v82 = v226 - v91 - v102;
    if (v82 <= 0)
    {
LABEL_265:
      if (v82)
      {
        uint64_t v178 = *(void *)a1;
        *(_DWORD *)(v178 + 4CoreML::Specification::FeatureType::New(this, 0) = 12;
        (*(void (**)(uint64_t))v178)(a1);
      }
      *uint64_t v73 = v79;
      v73[1] = v78;
      goto LABEL_274;
    }
  }
}

uint64_t read_restart_marker(uint64_t *a1)
{
  int v2 = *((_DWORD *)a1 + 143);
  if (!v2)
  {
    uint64_t result = next_marker(a1);
    if (!result) {
      return result;
    }
    int v2 = *((_DWORD *)a1 + 143);
  }
  int v4 = *(_DWORD *)(a1[77] + 32);
  if (v2 == v4 + 208)
  {
    uint64_t v5 = *a1;
    *(_DWORD *)(v5 + 4CoreML::Specification::FeatureType::New(this, 0) = 100;
    *(_DWORD *)(v5 + 44) = v4;
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 3);
    *((_DWORD *)a1 + 143) = 0;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t *))(a1[5] + 40))(a1);
    if (!result) {
      return result;
    }
  }
  *(_DWORD *)(a1[77] + 32) = (*(_DWORD *)(a1[77] + 32) + 1) & 7;
  return 1;
}

uint64_t skip_variable(void *a1)
{
  int v2 = (unsigned __int8 **)a1[5];
  uint64_t v3 = v2[1];
  if (!v3)
  {
    if (!((unsigned int (*)(void *))v2[3])(a1)) {
      return 0;
    }
    uint64_t v3 = v2[1];
  }
  uint64_t v5 = *v2 + 1;
  uint64_t v4 = **v2;
  int v6 = v3 - 1;
  if (v6) {
    goto LABEL_7;
  }
  if (!((unsigned int (*)(void *))v2[3])(a1)) {
    return 0;
  }
  uint64_t v5 = *v2;
  int v6 = v2[1];
LABEL_7:
  int v7 = v6 - 1;
  unint64_t v8 = (v4 << 8) | *v5;
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a1 + 143);
  *(_DWORD *)(v9 + 4CoreML::Specification::FeatureType::New(this, 0) = 93;
  *(_DWORD *)(v9 + 44) = v10;
  *(_DWORD *)(*a1 + 48) = v8 - 2;
  uint64_t v11 = 1;
  (*(void (**)(void *, uint64_t))(*a1 + 8))(a1, 1);
  _DWORD *v2 = v5 + 1;
  v2[1] = v7;
  if (v8 >= 3) {
    (*(void (**)(void *, unint64_t))(a1[5] + 32))(a1, v8 - 2);
  }
  return v11;
}

uint64_t get_interesting_appn(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v2 = *(unsigned __int8 ***)(a1 + 40);
  uint64_t v3 = v2[1];
  if (!v3)
  {
    uint64_t result = ((uint64_t (*)(uint64_t))v2[3])(a1);
    if (!result) {
      return result;
    }
    uint64_t v3 = v2[1];
  }
  int v6 = *v2 + 1;
  uint64_t v5 = **v2;
  int v7 = v3 - 1;
  if (!v7)
  {
    uint64_t result = ((uint64_t (*)(uint64_t))v2[3])(a1);
    if (!result) {
      return result;
    }
    int v6 = *v2;
    int v7 = v2[1];
  }
  unsigned int v9 = *v6;
  unint64_t v8 = v6 + 1;
  unint64_t v10 = (v5 << 8) | v9;
  unint64_t v11 = v10 - 2;
  if (v10 <= 2) {
    unsigned int v12 = 0;
  }
  else {
    unsigned int v12 = v10 - 2;
  }
  if (v10 <= 0xF) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 14;
  }
  uint64_t v14 = v7 - 1;
  if (v13)
  {
    uint64_t v15 = v22;
    uint64_t v16 = v13;
    do
    {
      if (!v14)
      {
        uint64_t result = ((uint64_t (*)(uint64_t))v2[3])(a1);
        if (!result) {
          return result;
        }
        unint64_t v8 = *v2;
        uint64_t v14 = v2[1];
      }
      char v17 = *v8++;
      *v15++ = v17;
      --v14;
      --v16;
    }
    while (v16);
    uint64_t v18 = v13;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v11 - v18;
  int v20 = *(_DWORD *)(a1 + 572);
  if (v20 == 238)
  {
    examine_app14((uint64_t *)a1, (uint64_t)v22, v13, v19);
  }
  else if (v20 == 224)
  {
    examine_app0((uint64_t *)a1, (uint64_t)v22, v13, v19);
  }
  else
  {
    uint64_t v21 = *(void *)a1;
    *(_DWORD *)(v21 + 4CoreML::Specification::FeatureType::New(this, 0) = 70;
    *(_DWORD *)(v21 + 44) = v20;
    (**(void (***)(uint64_t))a1)(a1);
  }
  _DWORD *v2 = v8;
  v2[1] = v14;
  if (v19 >= 1) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 32))(a1, v19);
  }
  return 1;
}

uint64_t get_sof(uint64_t *a1, int a2, int a3, int a4)
{
  uint64_t v5 = (unsigned __int8 **)a1[5];
  int v7 = *v5;
  int v6 = v5[1];
  *((_DWORD *)a1 + 78) = a2;
  *((_DWORD *)a1 + 79) = a3;
  *((_DWORD *)a1 + 8CoreML::Specification::FeatureType::New(this, 0) = a4;
  if (!v6)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    int v7 = *v5;
    int v6 = v5[1];
  }
  unsigned int v11 = *v7;
  unsigned int v9 = v7 + 1;
  uint64_t v10 = v11;
  unsigned int v12 = v6 - 1;
  if (!v12)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    unsigned int v9 = *v5;
    unsigned int v12 = v5[1];
  }
  unsigned int v15 = *v9;
  uint64_t v13 = v9 + 1;
  uint64_t v14 = v15;
  uint64_t v16 = v12 - 1;
  if (!v16)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    uint64_t v13 = *v5;
    uint64_t v16 = v5[1];
  }
  int v18 = *v13;
  char v17 = v13 + 1;
  *((_DWORD *)a1 + 74) = v18;
  uint64_t v19 = v16 - 1;
  if (!v19)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    char v17 = *v5;
    uint64_t v19 = v5[1];
  }
  int v21 = *v17;
  int v20 = v17 + 1;
  int v22 = v21 << 8;
  *((_DWORD *)a1 + 13) = v21 << 8;
  uint64_t v23 = v19 - 1;
  if (!v23)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    int v20 = *v5;
    uint64_t v23 = v5[1];
    int v22 = *((_DWORD *)a1 + 13);
  }
  int v25 = *v20;
  signed int v24 = v20 + 1;
  *((_DWORD *)a1 + 13) = v22 + v25;
  unsigned int v26 = v23 - 1;
  if (!v26)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    signed int v24 = *v5;
    unsigned int v26 = v5[1];
  }
  int v28 = *v24;
  unint64_t v27 = v24 + 1;
  int v29 = v28 << 8;
  *((_DWORD *)a1 + 12) = v28 << 8;
  unsigned int v30 = v26 - 1;
  if (!v30)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    unint64_t v27 = *v5;
    unsigned int v30 = v5[1];
    int v29 = *((_DWORD *)a1 + 12);
  }
  int v32 = *v27;
  uint64_t v31 = v27 + 1;
  *((_DWORD *)a1 + 12) = v29 + v32;
  int64_t v33 = v30 - 1;
  if (v30 == (unsigned __int8 *)1)
  {
    uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
    if (!result) {
      return result;
    }
    uint64_t v31 = *v5;
    int64_t v33 = v5[1];
  }
  uint64_t v34 = (v10 << 8) | v14;
  *((_DWORD *)a1 + 14) = *v31;
  uint64_t v35 = *a1;
  *(_DWORD *)(v35 + 44) = *((_DWORD *)a1 + 143);
  *(_DWORD *)(v35 + 48) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v35 + 52) = *((_DWORD *)a1 + 13);
  *(_DWORD *)(v35 + 56) = *((_DWORD *)a1 + 14);
  *(_DWORD *)(v35 + 4CoreML::Specification::FeatureType::New(this, 0) = 102;
  (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(a1, 1);
  if (*(_DWORD *)(a1[77] + 28))
  {
    uint64_t v36 = *a1;
    *(_DWORD *)(v36 + 4CoreML::Specification::FeatureType::New(this, 0) = 61;
    (*(void (**)(uint64_t *))v36)(a1);
  }
  uint64_t v37 = v34 - 8;
  if (!*((_DWORD *)a1 + 13) || !*((_DWORD *)a1 + 12) || (int v38 = *((_DWORD *)a1 + 14), v38 <= 0))
  {
    uint64_t v39 = *a1;
    *(_DWORD *)(v39 + 4CoreML::Specification::FeatureType::New(this, 0) = 33;
    (*(void (**)(uint64_t *))v39)(a1);
    int v38 = *((_DWORD *)a1 + 14);
  }
  if (v37 != 3 * v38)
  {
    uint64_t v40 = *a1;
    *(_DWORD *)(v40 + 4CoreML::Specification::FeatureType::New(this, 0) = 12;
    (*(void (**)(uint64_t *))v40)(a1);
    int v38 = *((_DWORD *)a1 + 14);
  }
  if (!a1[38])
  {
    a1[38] = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))a1[1])(a1, 1, 96 * v38);
    int v38 = *((_DWORD *)a1 + 14);
  }
  uint32x4_t v41 = v31 + 1;
  uint64_t v42 = v33 - 1;
  if (v38 >= 1)
  {
    unsigned int v43 = 0;
    int v44 = -1;
    do
    {
      if (!v42)
      {
        uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
        if (!result) {
          return result;
        }
        uint32x4_t v41 = *v5;
        uint64_t v42 = v5[1];
      }
      int v47 = *v41;
      unsigned int v46 = v41 + 1;
      int v45 = v47;
      uint64_t v48 = (int *)a1[38];
      if (v43)
      {
        unsigned int v49 = v43;
        uint64_t v50 = (int *)a1[38];
        while (*v50 != v45)
        {
          v50 += 24;
          if (!--v49)
          {
            uint64_t v48 = v50;
            goto LABEL_51;
          }
        }
        int v52 = *v48;
        v48 += 24;
        int v51 = v52;
        if (v43 >= 2)
        {
          int v53 = v44;
          do
          {
            int v55 = *v48;
            v48 += 24;
            int v54 = v55;
            if (v55 > v51) {
              int v51 = v54;
            }
            --v53;
          }
          while (v53);
        }
        int v45 = v51 + 1;
      }
LABEL_51:
      *uint64_t v48 = v45;
      v48[1] = v43;
      unsigned int v56 = v42 - 1;
      if (!v56)
      {
        uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
        if (!result) {
          return result;
        }
        unsigned int v46 = *v5;
        unsigned int v56 = v5[1];
      }
      unsigned int v58 = *v46;
      unsigned int v57 = v46 + 1;
      v48[2] = v58 >> 4;
      v48[3] = v58 & 0xF;
      uint64_t v59 = v56 - 1;
      if (v56 == (unsigned __int8 *)1)
      {
        uint64_t result = ((uint64_t (*)(uint64_t *))v5[3])(a1);
        if (!result) {
          return result;
        }
        unsigned int v57 = *v5;
        uint64_t v59 = v5[1];
      }
      int v60 = *v57;
      uint32x4_t v41 = v57 + 1;
      v48[4] = v60;
      uint64_t v61 = *a1;
      *(_DWORD *)(v61 + 44) = *v48;
      *(_DWORD *)(v61 + 48) = v48[2];
      *(_DWORD *)(v61 + 52) = v48[3];
      *(_DWORD *)(v61 + 56) = v48[4];
      *(_DWORD *)(v61 + 4CoreML::Specification::FeatureType::New(this, 0) = 103;
      (*(void (**)(uint64_t *, uint64_t))(v61 + 8))(a1, 1);
      ++v43;
      uint64_t v42 = v59 - 1;
      ++v44;
    }
    while ((signed int)v43 < *((_DWORD *)a1 + 14));
  }
  uint64_t result = 1;
  *(_DWORD *)(a1[77] + 28) = 1;
  *uint64_t v5 = v41;
  v5[1] = v42;
  return result;
}

uint64_t examine_app0(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = a4 + a3;
  if (a3 < 0xE)
  {
    if (a3 < 6 || *(unsigned char *)a2 != 74) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (*(unsigned char *)a2 != 74) {
    goto LABEL_19;
  }
  if (*(unsigned char *)(a2 + 1) != 70 || *(unsigned char *)(a2 + 2) != 73 || *(unsigned char *)(a2 + 3) != 70 || *(unsigned char *)(a2 + 4))
  {
LABEL_15:
    if (*(unsigned char *)(a2 + 1) == 70 && *(unsigned char *)(a2 + 2) == 88 && *(unsigned char *)(a2 + 3) == 88 && !*(unsigned char *)(a2 + 4))
    {
      int v21 = *(unsigned __int8 *)(a2 + 5);
      switch(v21)
      {
        case 19:
          uint64_t v18 = *a1;
          int v19 = 112;
          break;
        case 17:
          uint64_t v18 = *a1;
          int v19 = 111;
          break;
        case 16:
          uint64_t v18 = *a1;
          int v19 = 110;
          break;
        default:
          uint64_t v23 = *a1;
          *(_DWORD *)(v23 + 4CoreML::Specification::FeatureType::New(this, 0) = 91;
          *(_DWORD *)(v23 + 44) = *(unsigned __int8 *)(a2 + 5);
          *(_DWORD *)(*a1 + 48) = v6;
          goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_19:
    uint64_t v18 = *a1;
    int v19 = 79;
LABEL_20:
    *(_DWORD *)(v18 + 4CoreML::Specification::FeatureType::New(this, 0) = v19;
    *(_DWORD *)(v18 + 44) = v6;
LABEL_21:
    int v20 = *(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8);
    return v20(a1, 1);
  }
  *((_DWORD *)a1 + 94) = 1;
  int v7 = *(unsigned __int8 *)(a2 + 5);
  *((unsigned char *)a1 + 38CoreML::Specification::FeatureType::New(this, 0) = v7;
  int v8 = *(unsigned __int8 *)(a2 + 6);
  *((unsigned char *)a1 + 381) = v8;
  int v9 = *(unsigned __int8 *)(a2 + 7);
  *((unsigned char *)a1 + 382) = v9;
  unsigned int v10 = bswap32(*(unsigned __int16 *)(a2 + 8)) >> 16;
  *((_WORD *)a1 + 192) = v10;
  unsigned int v11 = bswap32(*(unsigned __int16 *)(a2 + 10)) >> 16;
  *((_WORD *)a1 + 193) = v11;
  if ((v7 - 1) >= 2)
  {
    uint64_t v12 = *a1;
    *(_DWORD *)(v12 + 4CoreML::Specification::FeatureType::New(this, 0) = 122;
    *(_DWORD *)(v12 + 44) = v7;
    *(_DWORD *)(*a1 + 48) = *((unsigned __int8 *)a1 + 381);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 0xFFFFFFFFLL);
    int v7 = *((unsigned __int8 *)a1 + 380);
    int v8 = *((unsigned __int8 *)a1 + 381);
    unsigned int v10 = *((unsigned __int16 *)a1 + 192);
    unsigned int v11 = *((unsigned __int16 *)a1 + 193);
    int v9 = *((unsigned __int8 *)a1 + 382);
  }
  uint64_t v13 = *a1;
  *(_DWORD *)(v13 + 48) = v8;
  *(_DWORD *)(v13 + 52) = v10;
  *(_DWORD *)(v13 + 56) = v11;
  *(_DWORD *)(v13 + 6CoreML::Specification::FeatureType::New(this, 0) = v9;
  *(_DWORD *)(v13 + 4CoreML::Specification::FeatureType::New(this, 0) = 89;
  *(_DWORD *)(v13 + 44) = v7;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v13 + 8))(a1, 1);
  unsigned int v15 = *(unsigned __int8 *)(a2 + 12);
  unsigned int v16 = *(unsigned __int8 *)(a2 + 13);
  if (v16 | v15)
  {
    uint64_t v17 = *a1;
    *(_DWORD *)(v17 + 4CoreML::Specification::FeatureType::New(this, 0) = 92;
    *(_DWORD *)(v17 + 44) = *(unsigned __int8 *)(a2 + 12);
    *(_DWORD *)(*a1 + 48) = *(unsigned __int8 *)(a2 + 13);
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 8))(a1, 1);
    unsigned int v15 = *(unsigned __int8 *)(a2 + 12);
    unsigned int v16 = *(unsigned __int8 *)(a2 + 13);
  }
  if (v6 - 14 != 3 * v15 * (unint64_t)v16)
  {
    uint64_t v22 = *a1;
    *(_DWORD *)(v22 + 4CoreML::Specification::FeatureType::New(this, 0) = 90;
    *(_DWORD *)(v22 + 44) = v6 - 14;
    goto LABEL_21;
  }
  return result;
}

uint64_t examine_app14(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a3 >= 0xC
    && *(unsigned char *)a2 == 65
    && *(unsigned char *)(a2 + 1) == 100
    && *(unsigned char *)(a2 + 2) == 111
    && *(unsigned char *)(a2 + 3) == 98
    && *(unsigned char *)(a2 + 4) == 101)
  {
    unsigned int v5 = __rev16(*(unsigned __int16 *)(a2 + 5));
    unsigned int v6 = __rev16(*(unsigned __int16 *)(a2 + 9));
    int v7 = *(unsigned __int8 *)(a2 + 11);
    uint64_t v8 = *a1;
    *(_DWORD *)(v8 + 48) = __rev16(*(unsigned __int16 *)(a2 + 7));
    *(_DWORD *)(v8 + 52) = v6;
    *(_DWORD *)(v8 + 56) = v7;
    *(_DWORD *)(v8 + 4CoreML::Specification::FeatureType::New(this, 0) = 78;
    *(_DWORD *)(v8 + 44) = v5;
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(a1, 1);
    *((_DWORD *)a1 + 97) = 1;
    *((unsigned char *)a1 + 392) = v7;
  }
  else
  {
    uint64_t v10 = *a1;
    *(_DWORD *)(v10 + 4CoreML::Specification::FeatureType::New(this, 0) = 80;
    *(_DWORD *)(v10 + 44) = a4 + a3;
    unsigned int v11 = *(uint64_t (**)(void))(*a1 + 8);
    return v11();
  }
  return result;
}

BOOL jpeg_calc_output_dimensions(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 36);
  if (v2 != 202)
  {
    uint64_t v3 = *(void (***)(void))a1;
    *((_DWORD *)v3 + 1CoreML::Specification::FeatureType::New(this, 0) = 21;
    *((_DWORD *)v3 + 11) = v2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  jpeg_core_output_dimensions(a1);
  int v4 = *(_DWORD *)(a1 + 56);
  if (v4 >= 1)
  {
    int v5 = 0;
    unsigned int v6 = *(_DWORD **)(a1 + 304);
    do
    {
      int v7 = *(_DWORD *)(a1 + 424);
      if (*(_DWORD *)(a1 + 92))
      {
        v6[9] = v7;
        uint64_t v8 = v6 + 9;
        int v9 = *(_DWORD *)(a1 + 428);
      }
      else
      {
        if (*(_DWORD *)(a1 + 100)) {
          int v10 = 8;
        }
        else {
          int v10 = 4;
        }
        if (v7 <= v10)
        {
          int v11 = 1;
          do
          {
            int v12 = 2 * v11;
            if (*(_DWORD *)(a1 + 416) % (2 * v11 * v6[2])) {
              break;
            }
            v11 *= 2;
          }
          while (v7 * v12 <= v10);
        }
        else
        {
          int v11 = 1;
        }
        v7 *= v11;
        v6[9] = v7;
        uint64_t v8 = v6 + 9;
        int v9 = *(_DWORD *)(a1 + 428);
        if (v9 <= v10)
        {
          int v13 = 1;
          while (1)
          {
            int v15 = 2 * v13;
            if (*(_DWORD *)(a1 + 420) % (2 * v13 * v6[3])) {
              goto LABEL_17;
            }
            v13 *= 2;
            if (v9 * v15 > v10)
            {
              int v13 = v15;
              goto LABEL_17;
            }
          }
        }
      }
      int v13 = 1;
LABEL_17:
      int v14 = v9 * v13;
      v6[10] = v9 * v13;
      if (v7 <= 2 * v9 * v13)
      {
        if (v14 > 2 * v7) {
          v6[10] = 2 * v7;
        }
      }
      else
      {
        int v7 = 2 * v14;
        _DWORD *v8 = 2 * v14;
      }
      v6[11] = jdiv_round_up((int)v6[2] * (uint64_t)v7 * *(unsigned int *)(a1 + 48), *(int *)(a1 + 556) * (uint64_t)*(int *)(a1 + 416));
      v6[12] = jdiv_round_up((int)v6[10] * (uint64_t)(int)v6[3] * *(unsigned int *)(a1 + 52), *(int *)(a1 + 556) * (uint64_t)*(int *)(a1 + 420));
      ++v5;
      v6 += 24;
      int v4 = *(_DWORD *)(a1 + 56);
    }
    while (v5 < v4);
  }
  int v16 = *(_DWORD *)(a1 + 64) - 1;
  if (v16 <= 6) {
    int v4 = dword_2246ED7F0[v16];
  }
  if (*(_DWORD *)(a1 + 108)) {
    int v17 = 1;
  }
  else {
    int v17 = v4;
  }
  *(_DWORD *)(a1 + 144) = v4;
  *(_DWORD *)(a1 + 148) = v17;
  BOOL result = use_merged_upsample(a1);
  if (result) {
    int v19 = *(_DWORD *)(a1 + 420);
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(a1 + 152) = v19;
  return result;
}

BOOL use_merged_upsample(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 400)
    && (*(_DWORD *)(a1 + 60) | 4) == 7
    && *(_DWORD *)(a1 + 56) == 3
    && *(_DWORD *)(a1 + 64) == 2
    && *(_DWORD *)(a1 + 144) == 3
    && !*(_DWORD *)(a1 + 396)
    && (int v2 = *(_DWORD **)(a1 + 304), v2[2] == 2)
    && v2[26] == 1
    && v2[50] == 1
    && (int)v2[3] <= 2
    && v2[27] == 1
    && v2[51] == 1
    && (int v3 = v2[9], v3 == *(_DWORD *)(a1 + 424))
    && v2[33] == v3
    && v2[57] == v3
    && (int v4 = v2[10], v4 == *(_DWORD *)(a1 + 428))
    && v2[34] == v4)
  {
    return v2[58] == v4;
  }
  else
  {
    return 0;
  }
}

uint64_t jinit_master_decompress(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 576) = v2;
  *(void *)uint64_t v2 = prepare_for_output_pass;
  *(void *)(v2 + 8) = finish_output_pass;
  *(_DWORD *)(v2 + 16) = 0;
  int v3 = *(_DWORD *)(a1 + 296);
  if (v3 != 8)
  {
    int v4 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v4 + 1CoreML::Specification::FeatureType::New(this, 0) = 16;
    *((_DWORD *)v4 + 11) = v3;
    (**(void (***)(uint64_t))a1)(a1);
  }
  jpeg_calc_output_dimensions(a1);
  int v5 = (_OWORD *)(**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1280);
  uint64_t v6 = 0;
  *int v5 = 0u;
  v5[1] = 0u;
  std::string v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  char v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  v5[28] = 0u;
  v5[29] = 0u;
  v5[30] = 0u;
  v5[31] = 0u;
  int8x16_t v7 = (int8x16_t)xmmword_2246ED7E0;
  v8.i64[0] = 0x1010101010101010;
  v8.i64[1] = 0x1010101010101010;
  *(void *)(a1 + 44CoreML::Specification::FeatureType::New(this, 0) = v5 + 32;
  do
  {
    v5[v6 + 32] = v7;
    ++v6;
    int8x16_t v7 = vaddq_s8(v7, v8);
  }
  while (v6 != 16);
  *(void *)&long long v9 = -1;
  *((void *)&v9 + 1) = -1;
  v5[79] = v9;
  v5[78] = v9;
  v5[77] = v9;
  v5[76] = v9;
  v5[75] = v9;
  v5[74] = v9;
  v5[73] = v9;
  v5[72] = v9;
  v5[71] = v9;
  v5[70] = v9;
  v5[69] = v9;
  v5[68] = v9;
  v5[67] = v9;
  v5[66] = v9;
  v5[65] = v9;
  v5[63] = v9;
  v5[64] = v9;
  v5[61] = v9;
  v5[62] = v9;
  v5[59] = v9;
  v5[60] = v9;
  v5[57] = v9;
  v5[58] = v9;
  v5[55] = v9;
  v5[56] = v9;
  v5[53] = v9;
  v5[54] = v9;
  v5[51] = v9;
  v5[52] = v9;
  v5[49] = v9;
  v5[50] = v9;
  v5[48] = v9;
  if (!*(_DWORD *)(a1 + 140) || (v10 = *(_DWORD *)(a1 + 136)) == 0 || (int v11 = *(_DWORD *)(a1 + 144), v11 <= 0))
  {
    int v12 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v12 + 1CoreML::Specification::FeatureType::New(this, 0) = 33;
    (*v12)(a1);
    unsigned int v10 = *(_DWORD *)(a1 + 136);
    int v11 = *(_DWORD *)(a1 + 144);
  }
  if (((unint64_t)v10 * v11) >> 32)
  {
    int v13 = *(void (***)(uint64_t))a1;
    *((_DWORD *)v13 + 1CoreML::Specification::FeatureType::New(this, 0) = 72;
    (*v13)(a1);
  }
  *(_DWORD *)(v2 + 24) = 0;
  BOOL v14 = use_merged_upsample(a1);
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 28) = v14;
  *(void *)(v2 + 4CoreML::Specification::FeatureType::New(this, 0) = 0;
  if (*(_DWORD *)(a1 + 108))
  {
    if (!*(_DWORD *)(a1 + 88))
    {
      *(void *)(a1 + 128) = 0;
      *(_DWORD *)(a1 + 124) = 0;
    }
    if (*(_DWORD *)(a1 + 92))
    {
      int v15 = *(void (***)(uint64_t))a1;
      *((_DWORD *)v15 + 1CoreML::Specification::FeatureType::New(this, 0) = 48;
      (*v15)(a1);
    }
    if (*(_DWORD *)(a1 + 144) == 3)
    {
      if (*(void *)(a1 + 160))
      {
        *(_DWORD *)(a1 + 128) = 1;
      }
      else if (*(_DWORD *)(a1 + 116))
      {
        *(_DWORD *)(a1 + 132) = 1;
      }
      else
      {
        *(_DWORD *)(a1 + 124) = 1;
      }
    }
    else
    {
      *(void *)(a1 + 124) = 1;
      *(_DWORD *)(a1 + 132) = 0;
      *(void *)(a1 + 16CoreML::Specification::FeatureType::New(this, 0) = 0;
    }
    if (*(_DWORD *)(a1 + 124))
    {
      jinit_1pass_quantizer(a1);
      *(void *)(v2 + 32) = *(void *)(a1 + 656);
    }
    if (*(_DWORD *)(a1 + 132) || *(_DWORD *)(a1 + 128))
    {
      jinit_2pass_quantizer(a1);
      *(void *)(v2 + 4CoreML::Specification::FeatureType::New(this, 0) = *(void *)(a1 + 656);
    }
  }
  else
  {
    *(void *)(a1 + 128) = 0;
    *(_DWORD *)(a1 + 124) = 0;
  }
  if (!*(_DWORD *)(a1 + 92))
  {
    if (*(_DWORD *)(v2 + 28))
    {
      jinit_merged_upsampler(a1);
    }
    else
    {
      jinit_color_deconverter(a1);
      jinit_upsampler((uint64_t *)a1);
    }
    jinit_d_post_controller(a1, *(_DWORD *)(a1 + 132));
  }
  jinit_inverse_dct(a1);
  if (*(_DWORD *)(a1 + 320)) {
    jinit_arith_decoder(a1);
  }
  else {
    jinit_huff_decoder(a1);
  }
  if (*(_DWORD *)(*(void *)(a1 + 608) + 32)) {
    BOOL v16 = 1;
  }
  else {
    BOOL v16 = *(_DWORD *)(a1 + 88) != 0;
  }
  jinit_d_coef_controller(a1, v16);
  if (!*(_DWORD *)(a1 + 92)) {
    jinit_d_main_controller((uint64_t *)a1, 0);
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 8) + 48))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 608) + 16))(a1);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 && !*(_DWORD *)(a1 + 88) && *(_DWORD *)(*(void *)(a1 + 608) + 32))
  {
    if (*(_DWORD *)(a1 + 316)) {
      int v19 = 3 * *(_DWORD *)(a1 + 56) + 2;
    }
    else {
      int v19 = *(_DWORD *)(a1 + 56);
    }
    uint64_t v20 = *(unsigned int *)(a1 + 432);
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = v19 * v20;
    if (*(_DWORD *)(a1 + 132)) {
      int v21 = 3;
    }
    else {
      int v21 = 2;
    }
    *(_DWORD *)(v18 + 24) = 0;
    *(_DWORD *)(v18 + 28) = v21;
    ++*(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t prepare_for_output_pass(uint64_t *a1)
{
  uint64_t v2 = a1[72];
  if (*(_DWORD *)(v2 + 16))
  {
    *(_DWORD *)(v2 + 16) = 0;
    (*(void (**)(uint64_t *, void))a1[82])(a1, 0);
    uint64_t v3 = 2;
    (*(void (**)(uint64_t *, uint64_t))a1[75])(a1, 2);
LABEL_3:
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))a1[73])(a1, v3);
    goto LABEL_7;
  }
  if (*((_DWORD *)a1 + 27) && !a1[20])
  {
    if (*((_DWORD *)a1 + 29) && *((_DWORD *)a1 + 33))
    {
      a1[82] = *(void *)(v2 + 40);
      *(_DWORD *)(v2 + 16) = 1;
    }
    else if (*((_DWORD *)a1 + 31))
    {
      a1[82] = *(void *)(v2 + 32);
    }
    else
    {
      uint64_t v11 = *a1;
      *(_DWORD *)(v11 + 4CoreML::Specification::FeatureType::New(this, 0) = 47;
      (*(void (**)(uint64_t *))v11)(a1);
    }
  }
  (*(void (**)(uint64_t *))a1[79])(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(a1[74] + 16))(a1);
  if (!*((_DWORD *)a1 + 23))
  {
    if (!*(_DWORD *)(v2 + 28)) {
      (*(void (**)(uint64_t *))a1[81])(a1);
    }
    (*(void (**)(uint64_t *))a1[80])(a1);
    if (*((_DWORD *)a1 + 27)) {
      (*(void (**)(uint64_t *, void))a1[82])(a1, *(unsigned int *)(v2 + 16));
    }
    if (*(_DWORD *)(v2 + 16)) {
      uint64_t v10 = 3;
    }
    else {
      uint64_t v10 = 0;
    }
    (*(void (**)(uint64_t *, uint64_t))a1[75])(a1, v10);
    uint64_t v3 = 0;
    goto LABEL_3;
  }
LABEL_7:
  uint64_t v5 = a1[2];
  if (v5)
  {
    int v6 = *(_DWORD *)(v2 + 24);
    int v7 = *(_DWORD *)(v2 + 16) ? 2 : 1;
    int v8 = v7 + v6;
    *(_DWORD *)(v5 + 24) = v6;
    *(_DWORD *)(v5 + 28) = v8;
    if (*((_DWORD *)a1 + 22))
    {
      if (!*(_DWORD *)(a1[76] + 36))
      {
        if (*((_DWORD *)a1 + 33)) {
          int v9 = 2;
        }
        else {
          int v9 = 1;
        }
        *(_DWORD *)(v5 + 28) = v9 + v8;
      }
    }
  }
  return result;
}

uint64_t finish_output_pass(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 576);
  if (*(_DWORD *)(result + 108)) {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 656) + 16))();
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

uint64_t jinit_merged_upsampler(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v3 = (void *)v2;
  *(void *)(a1 + 64CoreML::Specification::FeatureType::New(this, 0) = v2;
  *(void *)uint64_t v2 = start_pass_merged_upsample;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 136);
  if (*(_DWORD *)(a1 + 420) == 2)
  {
    *(void *)(v2 + 8) = merged_2v_upsample;
    *(void *)(v2 + 24) = h2v2_merged_upsample;
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1);
  }
  else
  {
    uint64_t v4 = 0;
    v3[1] = merged_1v_upsample;
    v3[3] = h2v1_merged_upsample;
  }
  v3[8] = v4;
  int v5 = *(_DWORD *)(a1 + 60);
  int v6 = *(void **)(a1 + 640);
  v6[4] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v6[5] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
  v6[6] = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 2048);
  v6[7] = result;
  uint64_t v8 = v6[4];
  uint64_t v9 = v6[5];
  uint64_t v10 = v6[6];
  if (v5 == 7)
  {
    uint64_t v11 = 0;
    unint64_t v12 = -29696512;
    unint64_t v13 = -23488896;
    uint64_t v14 = 5806464;
    uint64_t v15 = 11981184;
    do
    {
      *(_DWORD *)(v8 + 4 * v11) = v13 >> 16;
      *(_DWORD *)(v9 + 4 * v11) = v12 >> 16;
      *(void *)(v10 + 8 * v11) = v15;
      *(void *)(result + 8 * v11++) = v14;
      v14 -= 45107;
      v15 -= 93603;
      v12 += 232260;
      v13 += 183763;
    }
    while (v11 != 256);
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v17 = -14831872;
    unint64_t v18 = -11728000;
    uint64_t v19 = 2919552;
    uint64_t v20 = 5990656;
    do
    {
      *(_DWORD *)(v8 + 4 * v16) = v18 >> 16;
      *(_DWORD *)(v9 + 4 * v16) = v17 >> 16;
      *(void *)(v10 + 8 * v16) = v20;
      *(void *)(result + 8 * v16++) = v19;
      v19 -= 22553;
      v20 -= 46802;
      v17 += 116130;
      v18 += 91881;
    }
    while (v16 != 256);
  }
  return result;
}

uint64_t start_pass_merged_upsample(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 640);
  *(_DWORD *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 8CoreML::Specification::FeatureType::New(this, 0) = *(_DWORD *)(result + 140);
  return result;
}

char *merged_2v_upsample(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(void *)(a1 + 640);
  if (*(_DWORD *)(v9 + 72))
  {
    uint64_t result = jcopy_sample_rows((char *)(v9 + 64), 0, a5 + 8 * *a6, 0, 1, *(unsigned int *)(v9 + 76));
    *(_DWORD *)(v9 + 72) = 0;
    ++*a6;
    --*(_DWORD *)(v9 + 80);
LABEL_3:
    ++*a3;
    return result;
  }
  unsigned int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = *a6;
  if (v11 >= a7 - (int)v12) {
    unsigned int v11 = a7 - v12;
  }
  if (v11 >= 2) {
    unsigned int v13 = 2;
  }
  else {
    unsigned int v13 = v11;
  }
  uint64_t v16 = *(void *)(a5 + 8 * v12);
  if (v13 < 2)
  {
    uint64_t v14 = *(void *)(v9 + 64);
    *(_DWORD *)(v9 + 72) = 1;
  }
  else
  {
    uint64_t v14 = *(void *)(a5 + 8 * (v12 + 1));
  }
  uint64_t v17 = v14;
  uint64_t result = (char *)(*(uint64_t (**)(void))(v9 + 24))();
  int v15 = *(_DWORD *)(v9 + 72);
  *a6 += v13;
  *(_DWORD *)(v9 + 80) -= v13;
  if (!v15) {
    goto LABEL_3;
  }
  return result;
}

uint64_t h2v2_merged_upsample(uint64_t result, void *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(result + 640);
  uint64_t v5 = *(void *)(result + 440);
  uint64_t v7 = v4[4];
  uint64_t v6 = v4[5];
  uint64_t v8 = v4[6];
  uint64_t v9 = v4[7];
  uint64_t v10 = *(unsigned __int8 **)(*a2 + 16 * a3);
  unsigned int v11 = *(unsigned __int8 **)(*a2 + 8 * ((2 * a3) | 1));
  uint64_t v12 = *(unsigned __int8 **)(a2[1] + 8 * a3);
  unsigned int v13 = *(unsigned __int8 **)(a2[2] + 8 * a3);
  int v15 = *(unsigned char **)a4;
  uint64_t v14 = *(unsigned char **)(a4 + 8);
  unint64_t v16 = *(unsigned int *)(result + 136);
  if (v16 >= 2)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 >> 1;
    do
    {
      uint64_t v19 = v12[v17];
      uint64_t v20 = v13[v17];
      uint64_t v21 = *(int *)(v7 + 4 * v20);
      uint64_t v22 = *v10;
      uint64_t v23 = *(int *)(v6 + 4 * v19);
      uint64_t v24 = (*(void *)(v8 + 8 * v20) + *(void *)(v9 + 8 * v19)) >> 16;
      *int v15 = *(unsigned char *)(v5 + v21 + v22);
      v15[1] = *(unsigned char *)(v5 + v22 + (int)v24);
      void v15[2] = *(unsigned char *)(v5 + v23 + v22);
      uint64_t v25 = v10[1];
      void v15[3] = *(unsigned char *)(v5 + v21 + v25);
      v15[4] = *(unsigned char *)(v5 + v25 + (int)v24);
      v15[5] = *(unsigned char *)(v5 + v23 + v25);
      uint64_t v26 = *v11;
      *uint64_t v14 = *(unsigned char *)(v5 + v21 + v26);
      v14[1] = *(unsigned char *)(v5 + v26 + (int)v24);
      v14[2] = *(unsigned char *)(v5 + v23 + v26);
      uint64_t v27 = v11[1];
      v14[3] = *(unsigned char *)(v5 + v21 + v27);
      LOBYTE(v21) = *(unsigned char *)(v5 + v27 + (int)v24);
      int v28 = v10 + 2;
      int v29 = v11 + 2;
      v14[4] = v21;
      v15 += 6;
      v14[5] = *(unsigned char *)(v5 + v23 + v27);
      v14 += 6;
      ++v17;
      v11 += 2;
      v10 += 2;
    }
    while (v18 != v17);
    LODWORD(v16) = *(_DWORD *)(result + 136);
    v13 += v17;
    v12 += v17;
    uint64_t v10 = v28;
    unsigned int v11 = v29;
  }
  if (v16)
  {
    uint64_t v30 = *v13;
    uint64_t v31 = *(int *)(v7 + 4 * v30);
    uint64_t v32 = *v12;
    unint64_t v33 = *(void *)(v8 + 8 * v30) + *(void *)(v9 + 8 * v32);
    uint64_t v34 = *(int *)(v6 + 4 * v32);
    uint64_t v35 = *v10;
    v33 >>= 16;
    *int v15 = *(unsigned char *)(v5 + v31 + v35);
    v15[1] = *(unsigned char *)(v5 + v35 + (int)v33);
    void v15[2] = *(unsigned char *)(v5 + v34 + v35);
    uint64_t v36 = *v11;
    *uint64_t v14 = *(unsigned char *)(v5 + v31 + v36);
    v14[1] = *(unsigned char *)(v5 + v36 + (int)v33);
    v14[2] = *(unsigned char *)(v5 + v34 + v36);
  }
  return result;
}

uint64_t merged_1v_upsample(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 640) + 24))();
  ++*a6;
  ++*a3;
  return result;
}

uint64_t h2v1_merged_upsample(uint64_t result, void *a2, unsigned int a3, unsigned char **a4)
{
  uint64_t v4 = *(void **)(result + 640);
  uint64_t v5 = *(void *)(result + 440);
  uint64_t v7 = v4[4];
  uint64_t v6 = v4[5];
  uint64_t v8 = v4[6];
  uint64_t v9 = v4[7];
  uint64_t v10 = *(unsigned __int8 **)(*a2 + 8 * a3);
  unsigned int v11 = *(unsigned __int8 **)(a2[1] + 8 * a3);
  uint64_t v12 = *(unsigned __int8 **)(a2[2] + 8 * a3);
  unsigned int v13 = *a4;
  unsigned int v14 = *(_DWORD *)(result + 136);
  if (v14 < 2)
  {
    if ((v14 & 1) == 0) {
      return result;
    }
LABEL_7:
    uint64_t v25 = *v11;
    uint64_t v26 = *v12;
    uint64_t v27 = (*(void *)(v8 + 8 * v26) + *(void *)(v9 + 8 * v25)) >> 16;
    uint64_t v28 = *(int *)(v6 + 4 * v25);
    uint64_t v29 = *v10;
    *unsigned int v13 = *(unsigned char *)(v5 + *(int *)(v7 + 4 * v26) + v29);
    v13[1] = *(unsigned char *)(v5 + v29 + (int)v27);
    v13[2] = *(unsigned char *)(v5 + v28 + v29);
    return result;
  }
  unsigned int v15 = v14 >> 1;
  do
  {
    unsigned int v17 = *v11++;
    uint64_t v16 = v17;
    unsigned int v18 = *v12++;
    uint64_t v19 = *(int *)(v7 + 4 * v18);
    uint64_t v20 = (*(void *)(v8 + 8 * v18) + *(void *)(v9 + 8 * v16)) >> 16;
    uint64_t v21 = *(int *)(v6 + 4 * v16);
    uint64_t v22 = *v10;
    *unsigned int v13 = *(unsigned char *)(v5 + v19 + v22);
    v13[1] = *(unsigned char *)(v5 + v22 + (int)v20);
    v13[2] = *(unsigned char *)(v5 + v21 + v22);
    uint64_t v23 = v10 + 2;
    uint64_t v24 = v10[1];
    v13[3] = *(unsigned char *)(v5 + v19 + v24);
    v13[4] = *(unsigned char *)(v5 + v24 + (int)v20);
    v13[5] = *(unsigned char *)(v5 + v21 + v24);
    v13 += 6;
    uint64_t v10 = v23;
    --v15;
  }
  while (v15);
  uint64_t v10 = v23;
  if (*(_DWORD *)(result + 136)) {
    goto LABEL_7;
  }
  return result;
}

uint64_t jinit_d_post_controller(uint64_t a1, int a2)
{
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 60CoreML::Specification::FeatureType::New(this, 0) = result;
  *(void *)uint64_t result = start_pass_dpost;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  if (*(_DWORD *)(a1 + 108))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(unsigned int *)(a1 + 420);
    *(_DWORD *)(result + 32) = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = *(_DWORD *)(a1 + 136);
    int v9 = *(_DWORD *)(a1 + 144);
    uint64_t v10 = (v9 * v8);
    if (a2)
    {
      unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))(v7 + 32);
      uint64_t v12 = jround_up(*(unsigned int *)(a1 + 140), v6);
      uint64_t result = v11(a1, 1, 0, v10, v12, *(unsigned int *)(v5 + 32));
      *(void *)(v5 + 16) = result;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(v7 + 16))(a1, 1, (v9 * v8));
      *(void *)(v5 + 24) = result;
    }
  }
  return result;
}

uint64_t start_pass_dpost(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 600);
  if (a2 == 3)
  {
    if (!*(void *)(v2 + 16))
    {
      uint64_t v3 = *(void *)result;
      *(_DWORD *)(v3 + 4CoreML::Specification::FeatureType::New(this, 0) = 3;
      uint64_t result = (*(uint64_t (**)(uint64_t))v3)(result);
    }
    uint64_t v4 = post_process_prepass;
    goto LABEL_13;
  }
  if (a2 == 2)
  {
    if (!*(void *)(v2 + 16))
    {
      uint64_t v5 = *(void *)result;
      *(_DWORD *)(v5 + 4CoreML::Specification::FeatureType::New(this, 0) = 3;
      uint64_t result = (*(uint64_t (**)(uint64_t))v5)(result);
    }
    uint64_t v4 = post_process_2pass;
LABEL_13:
    *(void *)(v2 + 8) = v4;
    goto LABEL_16;
  }
  if (a2)
  {
    uint64_t v6 = *(void *)result;
    *(_DWORD *)(v6 + 4CoreML::Specification::FeatureType::New(this, 0) = 3;
    uint64_t result = (*(uint64_t (**)(uint64_t))v6)(result);
  }
  else if (*(_DWORD *)(result + 108))
  {
    *(void *)(v2 + 8) = post_process_1pass;
    if (!*(void *)(v2 + 24))
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)(result + 8) + 56))();
      *(void *)(v2 + 24) = result;
    }
  }
  else
  {
    *(void *)(v2 + 8) = *(void *)(*(void *)(result + 640) + 8);
  }
LABEL_16:
  *(_DWORD *)(v2 + 36) = 0;
  *(_DWORD *)(v2 + 4CoreML::Specification::FeatureType::New(this, 0) = 0;
  return result;
}

uint64_t post_process_1pass(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v9 = a1[75];
  (*(void (**)(void))(a1[80] + 8))();
  uint64_t result = (*(uint64_t (**)(void *, void, uint64_t, void))(a1[82] + 8))(a1, *(void *)(v9 + 24), a5 + 8 * *a6, 0);
  *a6 = *a6;
  return result;
}

uint64_t post_process_prepass(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v11 = a1[75];
  unsigned int v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    uint64_t v13 = *(void *)(v11 + 24);
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(void *, void, void, void, uint64_t))(a1[1] + 56))(a1, *(void *)(v11 + 16), *(unsigned int *)(v11 + 36), *(unsigned int *)(v11 + 32), 1);
    *(void *)(v11 + 24) = v13;
    unsigned int v12 = *(_DWORD *)(v11 + 40);
  }
  uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(a1[80] + 8))(a1, a2, a3, a4, v13, v11 + 40, *(unsigned int *)(v11 + 32));
  unsigned int v15 = *(_DWORD *)(v11 + 40);
  uint64_t v16 = v15 - v12;
  if (v15 > v12)
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, void, uint64_t))(a1[82] + 8))(a1, *(void *)(v11 + 24) + 8 * v12, 0, v16);
    *a6 += v16;
    unsigned int v15 = *(_DWORD *)(v11 + 40);
  }
  unsigned int v17 = *(_DWORD *)(v11 + 32);
  if (v15 >= v17) {
    *(void *)(v11 + 36) = *(_DWORD *)(v11 + 36) + v17;
  }
  return result;
}

uint64_t post_process_2pass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v11 = *(void *)(a1 + 600);
  unsigned int v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    uint64_t v13 = *(void *)(v11 + 24);
  }
  else
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)(a1 + 8) + 56))(a1, *(void *)(v11 + 16), *(unsigned int *)(v11 + 36), *(unsigned int *)(v11 + 32), 0);
    *(void *)(v11 + 24) = v13;
    unsigned int v12 = *(_DWORD *)(v11 + 40);
  }
  unsigned int v14 = *(_DWORD *)(v11 + 32) - v12;
  uint64_t v15 = *a6;
  if (v14 >= a7 - (int)v15) {
    unsigned int v14 = a7 - v15;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 140) - *(_DWORD *)(v11 + 36);
  if (v14 >= v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = v14;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 656) + 8))(a1, v13 + 8 * v12, a5 + 8 * v15, v17);
  *a6 += v17;
  unsigned int v19 = *(_DWORD *)(v11 + 40) + v17;
  *(_DWORD *)(v11 + 4CoreML::Specification::FeatureType::New(this, 0) = v19;
  unsigned int v20 = *(_DWORD *)(v11 + 32);
  if (v19 >= v20) {
    *(void *)(v11 + 36) = *(_DWORD *)(v11 + 36) + v20;
  }
  return result;
}

void CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Normalizer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  qword_26808D938 = 0;
  unk_26808D940 = 0;
  CoreML::Specification::_Normalizer_default_instance_ = (uint64_t)&unk_26D7776D0;
  byte_26808D948 = 1;
}

void CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(CoreML::Specification::protobuf_Normalizer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_Normalizer_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2242BDB9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Normalizer *CoreML::Specification::Normalizer::Normalizer(CoreML::Specification::Normalizer *this)
{
  *(void *)this = &unk_26D7776D0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Normalizer *)&CoreML::Specification::_Normalizer_default_instance_) {
    CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  return this;
}

void sub_2242BDC10(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Normalizer::~Normalizer(CoreML::Specification::Normalizer *this)
{
  *(void *)this = &unk_26D7776D0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D7776D0;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::Normalizer::default_instance(CoreML::Specification::Normalizer *this)
{
  return &CoreML::Specification::_Normalizer_default_instance_;
}

void CoreML::Specification::Normalizer::New(CoreML::Specification::Normalizer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242BDD44(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Normalizer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Normalizer>);
  }
  return result;
}

uint64_t CoreML::Specification::Normalizer::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Normalizer::MergePartialFromCodedStream(CoreML::Specification::Normalizer *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 8 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1])
      {
        int v12 = 0;
      }
      else
      {
        int v12 = *v11;
        if ((*v11 & 0x80000000) == 0)
        {
          *a2 = v11 + 1;
          goto LABEL_22;
        }
      }
      uint64_t Varint32Fallback = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v12);
      int v12 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_22:
      *((_DWORD *)this + 4) = v12;
    }
    if (v7) {
      BOOL v10 = (v7 & 7) == 4;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Normalizer::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  signed int v5 = *(_DWORD *)(this + 16);
  if (v5) {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::Normalizer::ByteSizeLong(CoreML::Specification::Normalizer *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0) {
      uint64_t v2 = 11;
    }
    else {
      uint64_t v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

std::string *CoreML::Specification::Normalizer::CheckTypeAndMergeFrom(std::string *this, const _tc_google::protobuf::MessageLite *a2)
{
  char v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5) {
    LODWORD(v3->__r_.__value_.__r.__words[2]) = v5;
  }
  return this;
}

uint64_t CoreML::Specification::Normalizer::IsInitialized(CoreML::Specification::Normalizer *this)
{
  return 1;
}

void *CoreML::Specification::Normalizer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Normalizer");
}

void CoreML::Specification::Normalizer::New(CoreML::Specification::Normalizer *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Normalizer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t jinit_upsampler(uint64_t *a1)
{
  uint64_t result = (*(uint64_t (**)(void))a1[1])();
  uint64_t v3 = result;
  a1[80] = result;
  *(void *)uint64_t result = start_pass_upsample;
  *(void *)(result + 8) = sep_upsample;
  *(_DWORD *)(result + 16) = 0;
  if (*((_DWORD *)a1 + 100))
  {
    uint64_t v4 = *a1;
    *(_DWORD *)(v4 + 4CoreML::Specification::Normalizer::New(this, 0) = 26;
    uint64_t result = (*(uint64_t (**)(uint64_t *))v4)(a1);
  }
  if (*((int *)a1 + 14) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v3 + 192;
    unint64_t v7 = (void *)(v3 + 104);
    int v8 = (int *)(a1[38] + 36);
    do
    {
      int v9 = *((_DWORD *)a1 + 106);
      int v10 = *(v8 - 7);
      int v11 = *v8;
      int v12 = v8[1] * *(v8 - 6) / *((_DWORD *)a1 + 107);
      int v13 = *((_DWORD *)a1 + 104);
      int v14 = *((_DWORD *)a1 + 105);
      *(_DWORD *)(v6 + 4 * v5) = v12;
      if (v8[4])
      {
        int v15 = v11 * v10 / v9;
        if (v15 != v13 || v12 != v14)
        {
          if (2 * v15 == v13 && v12 == v14)
          {
            uint64_t v22 = h2v1_upsample;
          }
          else
          {
            if (2 * v15 != v13 || 2 * v12 != v14)
            {
              int v19 = v13 / v15;
              if (v13 % v15 || (int v20 = v14 / v12, v14 % v12))
              {
                uint64_t v21 = *a1;
                *(_DWORD *)(v21 + 4CoreML::Specification::Normalizer::New(this, 0) = 39;
                (*(void (**)(uint64_t *))v21)(a1);
              }
              else
              {
                *unint64_t v7 = int_upsample;
                uint64_t v25 = v6 + v5;
                *(unsigned char *)(v25 + 4CoreML::Specification::Normalizer::New(this, 0) = v19;
                *(unsigned char *)(v25 + 5CoreML::Specification::Normalizer::New(this, 0) = v20;
              }
              goto LABEL_25;
            }
            uint64_t v22 = h2v2_upsample;
          }
          *unint64_t v7 = v22;
LABEL_25:
          uint64_t v23 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void))(a1[1] + 16);
          uint64_t v24 = jround_up(*((unsigned int *)a1 + 34), *((int *)a1 + 104));
          uint64_t result = v23(a1, 1, v24, *((unsigned int *)a1 + 105));
          *(v7 - 1CoreML::Specification::Normalizer::New(this, 0) = result;
          goto LABEL_26;
        }
        unsigned int v16 = fullsize_upsample;
      }
      else
      {
        unsigned int v16 = noop_upsample;
      }
      *unint64_t v7 = v16;
LABEL_26:
      v8 += 24;
      ++v5;
      ++v7;
    }
    while (v5 < *((int *)a1 + 14));
  }
  return result;
}

uint64_t start_pass_upsample(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 640);
  int v2 = *(_DWORD *)(result + 140);
  *(_DWORD *)(v1 + 184) = *(_DWORD *)(result + 420);
  *(_DWORD *)(v1 + 188) = v2;
  return result;
}

uint64_t sep_upsample(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int a7)
{
  uint64_t v11 = *(void *)(a1 + 640);
  int v12 = *(_DWORD *)(v11 + 184);
  int v13 = *(_DWORD *)(a1 + 420);
  if (v12 >= v13)
  {
    if (*(int *)(a1 + 56) >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(void *)(a1 + 304);
      uint64_t v17 = (void (**)(uint64_t, uint64_t, uint64_t, void))(v11 + 104);
      do
      {
        unsigned int v18 = v17 - 10;
        int v19 = *v17++;
        v19(a1, v16, *(void *)(a2 + 8 * v15) + 8 * (*(_DWORD *)(v11 + 192 + 4 * v15) * *a3), v18);
        ++v15;
        v16 += 96;
      }
      while (v15 < *(int *)(a1 + 56));
      int v13 = *(_DWORD *)(a1 + 420);
    }
    int v12 = 0;
    *(_DWORD *)(v11 + 184) = 0;
  }
  unsigned int v20 = v13 - v12;
  if (v20 >= *(_DWORD *)(v11 + 188)) {
    unsigned int v20 = *(_DWORD *)(v11 + 188);
  }
  if (v20 >= a7 - *a6) {
    unsigned int v21 = a7 - *a6;
  }
  else {
    unsigned int v21 = v20;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 648) + 8))(a1, v11 + 24);
  *a6 += v21;
  unsigned int v23 = *(_DWORD *)(v11 + 188) - v21;
  signed int v24 = *(_DWORD *)(v11 + 184) + v21;
  *(_DWORD *)(v11 + 184) = v24;
  *(_DWORD *)(v11 + 188) = v23;
  if (v24 >= *(_DWORD *)(a1 + 420)) {
    ++*a3;
  }
  return result;
}

void noop_upsample(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = 0;
}

void fullsize_upsample(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a4 = a3;
}

uint64_t h2v1_upsample(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v4 = *(_DWORD *)(result + 420);
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a4;
    do
    {
      uint64_t v7 = *(unsigned int *)(result + 136);
      if (v7)
      {
        int v8 = *(unsigned char **)(v6 + 8 * v5);
        int v9 = &v8[v7];
        int v10 = *(char **)(a3 + 8 * v5);
        do
        {
          char v11 = *v10++;
          unsigned char *v8 = v11;
          v8[1] = v11;
          v8 += 2;
        }
        while (v8 < v9);
        int v4 = *(_DWORD *)(result + 420);
      }
      ++v5;
    }
    while (v5 < v4);
  }
  return result;
}

char *h2v2_upsample(char *result, uint64_t a2, uint64_t a3, char **a4)
{
  if (*((int *)result + 105) >= 1)
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    int v8 = *a4;
    do
    {
      uint64_t v9 = *((unsigned int *)v5 + 34);
      if (v9)
      {
        int v10 = *(unsigned char **)&v8[8 * v7];
        char v11 = &v10[v9];
        int v12 = *(char **)(a3 + 8 * v6);
        do
        {
          char v13 = *v12++;
          unsigned char *v10 = v13;
          v10[1] = v13;
          v10 += 2;
        }
        while (v10 < v11);
        size_t v14 = *((unsigned int *)v5 + 34);
      }
      else
      {
        size_t v14 = 0;
      }
      uint64_t result = jcopy_sample_rows(v8, v7, (uint64_t)v8, v7 | 1, 1, v14);
      ++v6;
      v7 += 2;
    }
    while (*((_DWORD *)v5 + 105) > (int)v7);
  }
  return result;
}

void *int_upsample(void *result, uint64_t a2, uint64_t a3, char **a4)
{
  if (*((int *)result + 105) >= 1)
  {
    int v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = *a4;
    uint64_t v8 = result[80] + *(int *)(a2 + 4);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 242);
    size_t v10 = *(unsigned __int8 *)(v8 + 232);
    do
    {
      uint64_t v11 = *((unsigned int *)v4 + 34);
      if (v11)
      {
        int v12 = *(char **)&v7[8 * v6];
        char v13 = &v12[v11];
        size_t v14 = *(unsigned __int8 **)(a3 + 8 * v5);
        do
        {
          if (v10)
          {
            uint64_t result = memset(v12, *v14, v10);
            v12 += (v10 - 1) + 1;
          }
          ++v14;
        }
        while (v12 < v13);
      }
      if (v9 >= 2) {
        uint64_t result = jcopy_sample_rows(v7, v6, (uint64_t)v7, (int)v6 + 1, (int)v9 - 1, *((unsigned int *)v4 + 34));
      }
      ++v5;
      v6 += v9;
    }
    while (*((_DWORD *)v4 + 105) > (int)v6);
  }
  return result;
}

void turi::neural_net::convert_chw_to_hwc(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  unint64_t v6 = *v5;
  if (v4 == 3)
  {
    vImagePixelCount v20 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 8);
    vImagePixelCount v7 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 16);
    std::vector<vImage_Buffer>::vector(__p, v6);
    std::vector<vImage_Buffer const*>::vector(srcPlanarBuffers, v6);
    std::vector<void *>::vector(destChannels, v6);
    if (v6)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
        int v12 = (vImage_Buffer *)((char *)__p[0] + v10);
        v12->data = (void *)(v11 + v8);
        v12->height = v20;
        v12->width = v7;
        v12->rowBytes = 4 * v7;
        srcPlanarBuffers[0][v9] = v12;
        destChannels[0][v9] = a2;
        v10 += 32;
        a2 += 4;
        ++v9;
        v8 += 4 * v7 * v20;
      }
      while (32 * v6 != v10);
    }
    vImageConvert_PlanarToChunkyF((const vImage_Buffer **__attribute__((__org_arrdim(0,0))))srcPlanarBuffers[0], destChannels[0], v6, 4 * v6, v7, v20, 4 * v6 * v7, 0);
    if (destChannels[0])
    {
      destChannels[1] = destChannels[0];
      operator delete(destChannels[0]);
    }
    if (srcPlanarBuffers[0])
    {
      srcPlanarBuffers[1] = srcPlanarBuffers[0];
      operator delete(srcPlanarBuffers[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    char v13 = v5;
    unint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (v6)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v13 + 1;
      unint64_t v17 = v14 / v6;
      do
      {
        unsigned int v18 = (const float *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) + 4 * v15 * v17);
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
        turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)__p, v18, v17, v16, v19 - 1);
        turi::neural_net::convert_chw_to_hwc(__p, a2);
        ++v15;
        a2 += 4 * v17;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_2242BE7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::convert_hwc_to_chw(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
  uint64_t v5 = (vImagePixelCount *)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  vImagePixelCount v6 = *v5;
  uint64_t v7 = *a1;
  if (v4 == 3)
  {
    vImagePixelCount v8 = *(void *)((*(uint64_t (**)(uint64_t *))(v7 + 32))(a1) + 8);
    uint64_t v9 = *(void *)((*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1) + 16);
    uint64_t v10 = v9;
    std::vector<void const*>::vector(srcChannels, v9);
    std::vector<vImage_Buffer>::vector(__p, v9);
    std::vector<vImage_Buffer const*>::vector(destPlanarBuffers, v9);
    size_t v11 = 4 * v9;
    if (v9)
    {
      int v26 = v9;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 4 * v8;
      do
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1);
        srcChannels[0][v13] = (void *)(v16 + v14);
        unint64_t v17 = (vImage_Buffer *)((char *)__p[0] + v12);
        unsigned int v18 = (char *)__p[0] + 8 * v14;
        *unsigned int v18 = a2;
        v18[1] = v6;
        v18[2] = v8;
        void v18[3] = v15;
        destPlanarBuffers[0][v13] = v17;
        v14 += 4;
        ++v13;
        v12 += 32;
        a2 += 4 * v6 * v8;
      }
      while (v11 != v14);
      LODWORD(v9) = v26;
    }
    else
    {
      uint64_t v15 = 4 * v8;
    }
    vImageConvert_ChunkyToPlanarF((const void **__attribute__((__org_arrdim(0,0))))srcChannels[0], (const vImage_Buffer **__attribute__((__org_arrdim(0,0))))destPlanarBuffers[0], v9, v11, v8, v6, v15 * v10, 0);
    if (destPlanarBuffers[0])
    {
      destPlanarBuffers[1] = destPlanarBuffers[0];
      operator delete(destPlanarBuffers[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (srcChannels[0])
    {
      srcChannels[1] = srcChannels[0];
      operator delete(srcChannels[0]);
    }
  }
  else
  {
    uint64_t v19 = v5;
    unint64_t v20 = (*(uint64_t (**)(uint64_t *))(v7 + 24))(a1);
    if (v6)
    {
      uint64_t v21 = 0;
      uint64_t v22 = v19 + 1;
      unint64_t v23 = v20 / v6;
      do
      {
        signed int v24 = (const float *)((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) + 4 * v21 * v23);
        uint64_t v25 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
        turi::neural_net::external_float_array::external_float_array((turi::neural_net::external_float_array *)srcChannels, v24, v23, v22, v25 - 1);
        turi::neural_net::convert_hwc_to_chw(srcChannels, a2);
        ++v21;
        a2 += 4 * v23;
        --v6;
      }
      while (v6);
    }
  }
}

void sub_2242BEAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void turi::neural_net::copy_image_batch_float16(uint64_t a1, void *a2)
{
  id v2 = a2;
  operator new[]();
}

void sub_2242BECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a17) {
    operator delete(a17);
  }
  MEMORY[0x22A614F80](v19, 0x1000C80BDFB0063);

  _Unwind_Resume(a1);
}

void turi::neural_net::copy_image_batch(uint64_t **a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[2] * (*a1)[1] * (*a1)[3];
  std::vector<float>::vector(v16, v7 * v6);
  if (v6)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 4 * v7;
    do
    {
      size_t v11 = [v5 objectAtIndexedSubscript:v9];
      [v11 readBytes:(char *)v16[0] + v8 dataLayout:0 imageIndex:0];

      ++v9;
      v8 += v10;
    }
    while (v6 != v9);
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v16;
  uint64_t v15 = v17;
  v16[1] = 0;
  uint64_t v17 = 0;
  v16[0] = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  uint64_t v13 = a1[2];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  turi::neural_net::shared_float_array::wrap((uint64_t)v14, (uint64_t)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
}

void sub_2242BEE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a17) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void turi::neural_net::fill_image_batch(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  id v5 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = v5[1];
  uint64_t v7 = v5[2];
  uint64_t v8 = v5[3];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v9 = v3;
  uint64_t v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v15;
    uint64_t v12 = 4 * v7 * v6 * v8;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v9);
        }
        objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * v13++), "writeBytes:dataLayout:imageIndex:", v4, 0, 0, (void)v14);
        v4 += v12;
      }
      while (v10 != v13);
      uint64_t v10 = [v9 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v10);
  }
}

void sub_2242BF048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float turi::neural_net::get_array_map_scalar(uint64_t a1, const void **a2, float a3)
{
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2))
  {
    uint64_t v6 = std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6) == 1) {
      return *(float *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
  }
  return a3;
}

BOOL turi::neural_net::get_array_map_BOOL(uint64_t a1, const void **a2, uint64_t a3)
{
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2))
  {
    uint64_t v6 = std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6) == 1) {
      return *(float *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6) != 0.0;
    }
  }
  return a3;
}

void turi::neural_net::get_array_map_optimizer_options(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(_OWORD *)(a2 + 4) = xmmword_2246B8350;
  *(void *)(a2 + 2CoreML::Specification::Normalizer::New(this, 0) = 0x3F7FBE773F666666;
  *(_DWORD *)(a2 + 28) = 841731191;
  std::string::basic_string[abi:ne180100]<0>(__p, "use_sgd");
  *(unsigned char *)a2 = turi::neural_net::get_array_map_BOOL(a1, (const void **)__p, 0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "learning_rate");
  *(float *)(a2 + 4) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.001);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "gradient_clipping");
  *(float *)(a2 + 8) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "weight_decay");
  *(float *)(a2 + 12) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.0);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sgd_momentum");
  *(float *)(a2 + 16) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.9);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "adam_beta1");
  *(float *)(a2 + 2CoreML::Specification::Normalizer::New(this, 0) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.9);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "adam_beta2");
  *(float *)(a2 + 24) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.999);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "adam_epsilon");
  *(float *)(a2 + 28) = turi::neural_net::get_array_map_scalar(a1, (const void **)__p, 0.00000001);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2242BF3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float turi::neural_net::sumImage(turi::neural_net *this, MPSImage *a2)
{
  id v2 = this;
  uint64_t v3 = [(turi::neural_net *)v2 pixelFormat];
  if (v3 == 25 || v3 == 115 || v3 == 65)
  {
    float v4 = turi::neural_net::sumSingleImage<half>(v2);
  }
  else
  {
    uint64_t v7 = [(turi::neural_net *)v2 pixelFormat];
    if (v7 == 55 || v7 == 125 || v7 == 105)
    {
      float v4 = turi::neural_net::sumSingleImage<float>(v2);
    }
    else
    {
      if ([(turi::neural_net *)v2 pixelFormat] != 10
        && [(turi::neural_net *)v2 pixelFormat] != 30
        && [(turi::neural_net *)v2 pixelFormat] != 70
        && [(turi::neural_net *)v2 pixelFormat] != 80)
      {
        turi::neural_net::sumImage();
      }
      float v4 = turi::neural_net::sumSingleImage<unsigned char>(v2);
    }
  }
  float v5 = v4;

  return v5;
}

void sub_2242BF4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float turi::neural_net::sumSingleImage<half>(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 height];
  uint64_t v3 = [v1 width];
  uint64_t v4 = v3 * v2 * [v1 featureChannels];
  std::vector<half>::vector(__p, v4);
  float v5 = (__int16 *)__p[0];
  [v1 readBytes:__p[0] dataLayout:1 imageIndex:0];
  for (float i = 0.0; v4; --v4)
  {
    __int16 v7 = *v5++;
    _H0 = v7;
    __asm { FCVT            S0, H0 }
    float i = i + _S0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return i;
}

void sub_2242BF5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

float turi::neural_net::sumSingleImage<float>(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 height];
  uint64_t v3 = [v1 width];
  unint64_t v4 = v3 * v2 * [v1 featureChannels];
  std::vector<float>::vector(__p, v4);
  float v5 = (float *)__p[0];
  [v1 readBytes:__p[0] dataLayout:1 imageIndex:0];
  for (float i = 0.0; v4; --v4)
  {
    float v7 = *v5++;
    float i = i + v7;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return i;
}

void sub_2242BF690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

float turi::neural_net::sumSingleImage<unsigned char>(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 height];
  uint64_t v3 = [v1 width];
  size_t v4 = v3 * v2 * [v1 featureChannels];
  std::vector<unsigned char>::vector(__p, v4);
  float v5 = (unsigned __int8 *)__p[0];
  [v1 readBytes:__p[0] dataLayout:1 imageIndex:0];
  for (float i = 0.0; v4; --v4)
  {
    unsigned int v7 = *v5++;
    float i = i + (float)v7;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return i;
}

void sub_2242BF774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *std::vector<vImage_Buffer>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_2242BF7FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<vImage_Buffer const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2242BF874(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<void *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2242BF8EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<void const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2242BF964(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__init_with_size[abi:ne180100]<half *,half *>(char *result, __int16 *a2, __int16 *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    unsigned int v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      __int16 v8 = *a2++;
      _H0 = v8;
      __asm { FCVT            S0, H0 }
      *v7++ = _S0;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2242BF9DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<half>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<half>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_2242BFA54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flex_type_enum>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    float v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_2242BFAC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t jpeg_std_error(uint64_t result)
{
  *(void *)uint64_t result = error_exit;
  *(void *)(result + 8) = emit_message;
  *(void *)(result + 16) = output_message;
  *(void *)(result + 24) = format_message;
  *(void *)(result + 32) = reset_error_mgr;
  *(_DWORD *)(result + 124) = 0;
  *(_DWORD *)(result + 4CoreML::Specification::Normalizer::New(this, 0) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = jpeg_std_message_table;
  *(_DWORD *)(result + 144) = 126;
  *(void *)(result + 152) = 0;
  *(void *)(result + 16CoreML::Specification::Normalizer::New(this, 0) = 0;
  return result;
}

void error_exit(uint64_t a1)
{
}

uint64_t *emit_message(uint64_t *result, int a2)
{
  uint64_t v2 = *result;
  if (a2 < 0)
  {
    uint64_t v4 = *(void *)(v2 + 128);
    if (!v4 || *(int *)(v2 + 124) >= 3)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(void))(v2 + 16))();
      uint64_t v4 = *(void *)(v2 + 128);
    }
    *(void *)(v2 + 128) = v4 + 1;
  }
  else if (*(_DWORD *)(v2 + 124) >= a2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 16);
    return (uint64_t *)v3();
  }
  return result;
}

uint64_t output_message(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t, char *))(*(void *)a1 + 24))(a1, v2);
  return fprintf((FILE *)*MEMORY[0x263EF8348], "%s\n", v2);
}

uint64_t format_message(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(unsigned int *)(*a1 + 40);
  if ((int)v4 >= 1 && (int)v4 <= *(_DWORD *)(v3 + 144))
  {
    id v9 = (const char **)(*(void *)(v3 + 136) + 8 * v4);
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 152);
    if (!v5) {
      goto LABEL_9;
    }
    int v6 = *(_DWORD *)(v3 + 160);
    BOOL v7 = __OFSUB__(v4, v6);
    int v8 = v4 - v6;
    if (v8 < 0 != v7 || (int)v4 > *(_DWORD *)(v3 + 164)) {
      goto LABEL_9;
    }
    id v9 = (const char **)(v5 + 8 * v8);
  }
  uint64_t v10 = *v9;
  if (!*v9)
  {
LABEL_9:
    *(_DWORD *)(v3 + 44) = v4;
    uint64_t v10 = **(const char ***)(v3 + 136);
  }
  uint64_t v11 = v10;
  while (1)
  {
    int v13 = *(unsigned __int8 *)v11++;
    int v12 = v13;
    if (!v13) {
      break;
    }
    if (v12 == 37)
    {
      if (*v11 == 115)
      {
        long long v14 = fmtcheck(v10, "Invalid format string error message: %s");
        return sprintf(a2, v14, v3 + 44);
      }
      break;
    }
  }
  long long v16 = fmtcheck(v10, "Invalid format string error message: %d %d %d %d %d %d %d %d");
  return sprintf(a2, v16, *(unsigned int *)(v3 + 44), *(unsigned int *)(v3 + 48), *(unsigned int *)(v3 + 52), *(unsigned int *)(v3 + 56), *(unsigned int *)(v3 + 60), *(unsigned int *)(v3 + 64), *(unsigned int *)(v3 + 68), *(unsigned int *)(v3 + 72));
}

uint64_t *reset_error_mgr(uint64_t *result)
{
  uint64_t v1 = *result;
  *(void *)(v1 + 128) = 0;
  *(_DWORD *)(v1 + 4CoreML::Specification::Normalizer::New(this, 0) = 0;
  return result;
}

uint64_t jpeg_idct_float(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(result + 440);
  BOOL v7 = (__int16 *)(a3 + 64);
  uint64_t v8 = *(void *)(a2 + 88) + 128;
  for (unsigned int i = 9; i > 1; --i)
  {
    uint64_t v10 = (float *)(v8 + v5);
    int v11 = (unsigned __int16)*(v7 - 24);
    int v12 = (unsigned __int16)*(v7 - 16);
    if (v11 | v12) {
      goto LABEL_9;
    }
    if (*(v7 - 8) || *v7 || v7[8] || v7[16] || v7[24])
    {
      LOWORD(v12) = 0;
LABEL_9:
      float v13 = *(v10 - 32) * (float)*(v7 - 32);
      float v14 = *(v10 - 16) * (float)(__int16)v12;
      float v15 = *v10 * (float)*v7;
      float v16 = v10[16] * (float)v7[16];
      float v17 = v13 + v15;
      float v18 = v13 - v15;
      float v19 = v14 + v16;
      float v20 = -(float)((float)(v14 + v16) - (float)((float)(v14 - v16) * 1.4142));
      float v21 = v17 + v19;
      float v22 = v17 - v19;
      float v23 = v18 + v20;
      float v24 = v18 - v20;
      float v25 = *(v10 - 24) * (float)(__int16)v11;
      float v26 = *(v10 - 8) * (float)*(v7 - 8);
      float v27 = v10[8] * (float)v7[8];
      float v28 = v10[24] * (float)v7[24];
      float v29 = v26 + v27;
      float v30 = v27 - v26;
      float v31 = v25 + v28;
      float v32 = v25 - v28;
      float v33 = v29 + v31;
      float v34 = (float)(v31 - v29) * 1.4142;
      float v35 = (float)(v30 + v32) * 1.8478;
      float v36 = (float)(v35 + (float)(v30 * -2.6131)) - v33;
      float v37 = v34 - v36;
      float v38 = (float)(v35 + (float)(v32 * -1.0824)) - v37;
      uint64_t v39 = (float *)&v74[v5];
      *uint64_t v39 = v21 + v33;
      v39[56] = v21 - v33;
      v39[8] = v23 + v36;
      v39[48] = v23 - v36;
      v39[16] = v24 + v37;
      v39[40] = v24 - v37;
      v39[24] = v22 + v38;
      float v40 = v22 - v38;
      uint64_t v41 = 32;
      goto LABEL_10;
    }
    float v40 = *(v10 - 32) * (float)*(v7 - 32);
    uint64_t v42 = (float *)&v74[v5];
    *uint64_t v42 = v40;
    v42[8] = v40;
    v42[16] = v40;
    v42[24] = v40;
    v42[32] = v40;
    v42[40] = v40;
    v42[48] = v40;
    uint64_t v41 = 56;
LABEL_10:
    *(float *)&v74[4 * v41 + v5] = v40;
    v5 += 4;
    ++v7;
  }
  uint64_t v43 = 0;
  uint64_t v44 = v6 - 384;
  do
  {
    int v45 = (float *)&v74[4 * v43];
    unsigned int v46 = (unsigned char *)(*(void *)(a4 + v43) + a5);
    float v47 = v45[1];
    float v48 = *v45 + 512.5;
    float v49 = v45[4];
    float v50 = v45[5];
    float v51 = v48 + v49;
    float v52 = v45[2];
    float v53 = v45[3];
    float v54 = v45[6];
    float v55 = v45[7];
    float v56 = v52 + v54;
    float v57 = v48 - v49;
    float v58 = -(float)((float)(v52 + v54) - (float)((float)(v52 - v54) * 1.4142));
    float v59 = v50 + v53;
    float v60 = v50 - v53;
    float v61 = v51 + v56;
    float v62 = v51 - v56;
    float v63 = v47 + v55;
    float v64 = v47 - v55;
    float v65 = v59 + v63;
    float v66 = v63 - v59;
    float v67 = v57 + v58;
    float v68 = v57 - v58;
    float v69 = v66 * 1.4142;
    float v70 = (float)(v60 + v64) * 1.8478;
    float v71 = v70 + (float)(v64 * -1.0824);
    float v72 = (float)(v70 + (float)(v60 * -2.6131)) - v65;
    float v73 = v69 - v72;
    *unsigned int v46 = *(unsigned char *)(v44 + ((int)(float)(v61 + v65) & 0x3FFLL));
    v46[7] = *(unsigned char *)(v44 + ((int)(float)(v61 - v65) & 0x3FFLL));
    v46[1] = *(unsigned char *)(v44 + ((int)(float)(v67 + v72) & 0x3FFLL));
    v46[6] = *(unsigned char *)(v44 + ((int)(float)(v67 - v72) & 0x3FFLL));
    v46[2] = *(unsigned char *)(v44 + ((int)(float)(v68 + v73) & 0x3FFLL));
    v46[5] = *(unsigned char *)(v44 + ((int)(float)(v68 - v73) & 0x3FFLL));
    v46[3] = *(unsigned char *)(v44 + ((int)(float)(v62 + (float)(v71 - v73)) & 0x3FFLL));
    v46[4] = *(unsigned char *)(v44 + ((int)(float)(v62 - (float)(v71 - v73)) & 0x3FFLL));
    v43 += 8;
  }
  while (v43 != 64);
  return result;
}

uint64_t jpeg_idct_ifast(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  BOOL v7 = (__int16 *)(a3 + 64);
  uint64_t v8 = *(void *)(a2 + 88) + 128;
  for (unsigned int i = 9; i > 1; --i)
  {
    uint64_t v10 = (_DWORD *)(v8 + v5);
    unsigned __int16 v11 = *(v7 - 16);
    if ((unsigned __int16)*(v7 - 24) | v11) {
      goto LABEL_9;
    }
    if (*(v7 - 8) || *v7 || v7[8] || v7[16] || v7[24])
    {
      unsigned __int16 v11 = 0;
LABEL_9:
      int v12 = *(v10 - 32) * *(v7 - 32);
      int v13 = *(v10 - 16) * (__int16)v11;
      int v14 = *v10 * *v7;
      int v15 = v10[16] * v7[16];
      int v16 = v14 + v12;
      int v17 = v12 - v14;
      int v18 = v15 + v13;
      int v19 = ((unint64_t)(362 * (v13 - v15)) >> 8) - (v15 + v13);
      int v20 = v18 + v16;
      int v21 = v16 - v18;
      int v22 = v19 + v17;
      int v23 = v17 - v19;
      int v24 = *(v10 - 24) * *(v7 - 24);
      int v25 = *(v10 - 8) * *(v7 - 8);
      int v26 = v10[8] * v7[8];
      int v27 = v10[24] * v7[24];
      int v28 = v26 + v25;
      int v29 = v26 - v25;
      int v30 = v27 + v24;
      int v31 = v24 - v27;
      int v32 = v30 + v28;
      unint64_t v33 = (unint64_t)(362 * (v30 - v28)) >> 8;
      float v34 = &v73[v5];
      _DWORD *v34 = v32 + v20;
      unint64_t v35 = (unint64_t)(473 * (v31 + v29)) >> 8;
      int v36 = v35 - (v32 + ((unint64_t)(669 * v29) >> 8));
      LODWORD(v33) = v33 - v36;
      v34[56] = v20 - v32;
      v34[8] = v36 + v22;
      int v37 = v35 - ((unint64_t)(277 * v31) >> 8) - v33;
      v34[48] = v22 - v36;
      v34[16] = v33 + v23;
      v34[40] = v23 - v33;
      v34[24] = v37 + v21;
      int v38 = v21 - v37;
      uint64_t v39 = 32;
      goto LABEL_10;
    }
    int v38 = *(v10 - 32) * *(v7 - 32);
    float v40 = (int *)&v73[v5];
    *float v40 = v38;
    v40[8] = v38;
    v40[16] = v38;
    v40[24] = v38;
    v40[32] = v38;
    v40[40] = v38;
    v40[48] = v38;
    uint64_t v39 = 56;
LABEL_10:
    *(_DWORD *)&v73[4 * v39 + v5] = v38;
    v5 += 4;
    ++v7;
  }
  uint64_t v41 = v6 - 384;
  uint64_t v42 = 28;
  uint64_t v43 = a5;
  do
  {
    uint64_t v44 = (int *)&v73[v42];
    int v45 = (unsigned char *)(*a4 + v43);
    int v46 = *(_DWORD *)&v73[v42 - 24];
    unint64_t v47 = (*(_DWORD *)&v73[v42 - 28] + 16400);
    int v48 = *(_DWORD *)&v73[v42 - 20];
    if (*(void *)&v73[v42 - 24]) {
      goto LABEL_20;
    }
    if (*(v44 - 4)
      || *(_DWORD *)&v73[v42 - 12]
      || *(_DWORD *)&v73[v42 - 8]
      || *(_DWORD *)&v73[v42 - 4]
      || *(_DWORD *)&v73[v42])
    {
      int v48 = 0;
LABEL_20:
      int v50 = *(v44 - 4);
      int v49 = *(v44 - 3);
      int v51 = v49 + v47;
      int v52 = v47 - v49;
      int v54 = *(v44 - 2);
      int v53 = *(v44 - 1);
      int v55 = v53 + v48;
      int v56 = ((362 * (unint64_t)(v48 - v53)) >> 8) - (v53 + v48);
      int v57 = v55 + v51;
      int v58 = v51 - v55;
      int v59 = v56 + v52;
      int v60 = v52 - v56;
      int v61 = v50 + v54;
      unsigned int v62 = v54 - v50;
      int v63 = *v44;
      int v64 = v63 + v46;
      unsigned int v65 = v46 - v63;
      int v66 = v64 + v61;
      unint64_t v67 = (362 * (unint64_t)(v64 - v61)) >> 8;
      *int v45 = *(unsigned char *)(v41 + (((unint64_t)(v66 + v57) >> 5) & 0x3FF));
      unint64_t v68 = (473 * (unint64_t)(v65 + v62)) >> 8;
      int v69 = v66 + ((669 * (unint64_t)v62) >> 8);
      v45[7] = *(unsigned char *)(v41 + (((unint64_t)(v57 - v66) >> 5) & 0x3FF));
      v45[1] = *(unsigned char *)(v41 + (((unint64_t)(v68 - v69 + v59) >> 5) & 0x3FF));
      LODWORD(v67) = v67 - (v68 - v69);
      v45[6] = *(unsigned char *)(v41 + (((unint64_t)(v59 - (v68 - v69)) >> 5) & 0x3FF));
      v45[2] = *(unsigned char *)(v41 + (((unint64_t)(v67 + v60) >> 5) & 0x3FF));
      int v70 = v68 - ((277 * (unint64_t)v65) >> 8) - v67;
      v45[5] = *(unsigned char *)(v41 + (((unint64_t)(v60 - v67) >> 5) & 0x3FF));
      v45[3] = *(unsigned char *)(v41 + (((unint64_t)(v70 + v58) >> 5) & 0x3FF));
      uint64_t result = *(unsigned __int8 *)(v41 + (((unint64_t)(v58 - v70) >> 5) & 0x3FF));
      uint64_t v72 = 4;
      goto LABEL_21;
    }
    uint64_t result = *(unsigned __int8 *)(v41 + ((v47 >> 5) & 0x3FF));
    *(_DWORD *)int v45 = vdup_n_s8(result).u32[0];
    v45[4] = result;
    v45[5] = result;
    v45[6] = result;
    uint64_t v72 = 7;
LABEL_21:
    v45[v72] = result;
    ++a4;
    v42 += 32;
  }
  while (v42 != 284);
  return result;
}

uint64_t jpeg_idct_islow(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v6 = (__int16 *)(a3 + 64);
  uint64_t v7 = *(void *)(a2 + 88) + 128;
  uint64_t v76 = *(void *)(a1 + 440);
  for (unsigned int i = 9; i > 1; --i)
  {
    id v9 = (_DWORD *)(v7 + v5);
    unsigned __int16 v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10) {
      goto LABEL_9;
    }
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      unsigned __int16 v10 = 0;
LABEL_9:
      uint64_t v11 = *v9 * *v6;
      uint64_t v12 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      uint64_t v13 = v12 + (v11 << 13);
      uint64_t v14 = v12 - (v11 << 13);
      uint64_t v15 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      uint64_t v16 = (int)v9[16] * (uint64_t)v6[16];
      uint64_t v17 = 4433 * (v15 + v16);
      uint64_t v18 = v17 + 6270 * v15;
      uint64_t v19 = v17 - 15137 * v16;
      uint64_t v20 = v18 + v13;
      uint64_t v21 = v13 - v18;
      uint64_t v22 = v19 + v14;
      uint64_t v23 = v14 - v19;
      uint64_t v24 = (int)v9[24] * (uint64_t)v6[24];
      uint64_t v25 = (int)v9[8] * (uint64_t)v6[8];
      int v26 = *(v9 - 8);
      uint64_t v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      uint64_t v28 = v24 + v26 * (uint64_t)*(v6 - 8);
      uint64_t v29 = 9633 * (v25 + v27 + v28);
      uint64_t v30 = v29 - 16069 * v28;
      uint64_t v31 = v29 - 3196 * (v25 + v27);
      uint64_t v32 = -7373 * (v24 + v27);
      uint64_t v33 = v32 + 2446 * v24 + v30;
      uint64_t v34 = v32 + 12299 * v27 + v31;
      uint64_t v35 = -20995 * (v25 + v26 * (uint64_t)*(v6 - 8));
      uint64_t v36 = v35 + 16819 * v25 + v31;
      uint64_t v37 = v35 + 25172 * v26 * (uint64_t)*(v6 - 8) + v30;
      int v38 = &v78[v5];
      _DWORD *v38 = (unint64_t)(v34 + v20) >> 11;
      v38[56] = (unint64_t)(v20 - v34) >> 11;
      v38[8] = (unint64_t)(v37 + v22) >> 11;
      v38[48] = (unint64_t)(v22 - v37) >> 11;
      v38[16] = (unint64_t)(v36 + v23) >> 11;
      v38[40] = (unint64_t)(v23 - v36) >> 11;
      unsigned char v38[24] = (unint64_t)(v33 + v21) >> 11;
      unint64_t v39 = (unint64_t)(v21 - v33) >> 11;
      uint64_t v40 = 32;
      goto LABEL_10;
    }
    LODWORD(v39) = 4 * *(v6 - 32) * *(v9 - 32);
    uint64_t v41 = &v78[v5];
    *uint64_t v41 = v39;
    v41[8] = v39;
    v41[16] = v39;
    v41[24] = v39;
    v41[32] = v39;
    v41[40] = v39;
    v41[48] = v39;
    uint64_t v40 = 56;
LABEL_10:
    *(_DWORD *)&v78[4 * v40 + v5] = v39;
    v5 += 4;
    ++v6;
  }
  uint64_t v42 = v76 - 384;
  uint64_t v43 = 28;
  uint64_t result = 4294959923;
  do
  {
    int v45 = (int *)&v78[v43];
    int v46 = (unsigned char *)(*a4 + a5);
    int v47 = *(_DWORD *)&v78[v43 - 24];
    unint64_t v48 = *(int *)&v78[v43 - 28] + 16400;
    uint64_t v49 = *(unsigned int *)&v78[v43 - 20];
    if (v47) {
      BOOL v50 = 0;
    }
    else {
      BOOL v50 = v49 == 0;
    }
    if (!v50) {
      goto LABEL_24;
    }
    if (*(v45 - 4)
      || *(_DWORD *)&v78[v43 - 12]
      || *(_DWORD *)&v78[v43 - 8]
      || *(_DWORD *)&v78[v43 - 4]
      || *(_DWORD *)&v78[v43])
    {
      LODWORD(v49) = 0;
LABEL_24:
      int v52 = *(v45 - 4);
      int v51 = *(v45 - 3);
      int v53 = v48 + v51;
      int v54 = (v48 + v51) << 13;
      int v55 = (v48 - v51) << 13;
      int v57 = *(v45 - 2);
      int v56 = *(v45 - 1);
      int v58 = 4433 * (v56 + v49);
      int v59 = v58 + 6270 * v49;
      int v60 = v58 - 15137 * v56;
      int v61 = v59 + (v53 << 13);
      int v62 = v54 - v59;
      int v63 = v60 + v55;
      int v64 = v55 - v60;
      int v65 = *v45;
      int v66 = 9633 * (v52 + v65 + v57 + v47);
      int v67 = v66 - 16069 * (v52 + v65);
      int v68 = v66 - 3196 * (v57 + v47);
      int v69 = -7373 * (v65 + v47);
      int v70 = v69 + 12299 * v47 + v68;
      *int v46 = *(unsigned char *)(v42 + (((unint64_t)(v70 + v61) >> 18) & 0x3FF));
      unint64_t v71 = (v61 - v70);
      int v72 = -20995 * (v52 + v57);
      int v73 = v72 + 25172 * v52 + v67;
      v46[7] = *(unsigned char *)(v42 + ((v71 >> 18) & 0x3FF));
      v46[1] = *(unsigned char *)(v42 + (((unint64_t)(v73 + v63) >> 18) & 0x3FF));
      unsigned int v74 = v72 + 16819 * v57 + v68;
      v46[6] = *(unsigned char *)(v42 + (((unint64_t)(v63 - v73) >> 18) & 0x3FF));
      v46[2] = *(unsigned char *)(v42 + (((unint64_t)(v74 + v64) >> 18) & 0x3FF));
      LODWORD(v71) = v69 + 2446 * v65 + v67;
      v46[5] = *(unsigned char *)(v42 + (((unint64_t)(v64 - v74) >> 18) & 0x3FF));
      v46[3] = *(unsigned char *)(v42 + (((unint64_t)(v71 + v62) >> 18) & 0x3FF));
      LOBYTE(v74) = *(unsigned char *)(v42 + (((unint64_t)(v62 - v71) >> 18) & 0x3FF));
      uint64_t v75 = 4;
      goto LABEL_25;
    }
    unsigned int v74 = *(unsigned __int8 *)(v42 + ((v48 >> 5) & 0x3FF));
    *(_DWORD *)int v46 = vdup_n_s8(v74).u32[0];
    v46[4] = v74;
    v46[5] = v74;
    v46[6] = v74;
    uint64_t v75 = 7;
LABEL_25:
    v46[v75] = v74;
    ++a4;
    v43 += 32;
  }
  while (v43 != 284);
  return result;
}

uint64_t jpeg_idct_7x7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v61 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = &v63[4 * v5];
    uint64_t v8 = (_DWORD *)(v6 + 4 * v5);
    id v9 = (__int16 *)(a3 + 2 * v5);
    uint64_t v10 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    uint64_t v11 = (int)v8[16] * (uint64_t)v9[16];
    uint64_t v12 = (int)v8[32] * (uint64_t)v9[32];
    uint64_t v13 = (int)v8[48] * (uint64_t)v9[48];
    uint64_t v14 = 7223 * (v12 - v13);
    uint64_t v15 = 2578 * (v11 - v12);
    uint64_t v16 = v10 - 15083 * v12 + v15 + v14;
    uint64_t v17 = v10 + 10438 * (v11 + v13);
    uint64_t v18 = v14 - 637 * v13 + v17;
    uint64_t v19 = v15 - 20239 * v11 + v17;
    unint64_t v20 = v10 + 11585 * (v12 - (v11 + v13));
    uint64_t v21 = (int)v8[8] * (uint64_t)v9[8];
    uint64_t v22 = (int)v8[24] * (uint64_t)v9[24];
    uint64_t v23 = (int)v8[40] * (uint64_t)v9[40];
    uint64_t v24 = 7663 * (v21 + v22);
    uint64_t v25 = 1395 * (v21 - v22);
    uint64_t v26 = v24 - v25;
    uint64_t v27 = v24 + v25 - 11295 * (v22 + v23);
    uint64_t v28 = 5027 * (v21 + v23);
    uint64_t v29 = v28 + v26;
    uint64_t v30 = v28 + 15326 * v23 - 11295 * (v22 + v23);
    *uint64_t v7 = (unint64_t)(v29 + v18) >> 11;
    v7[42] = (unint64_t)(v18 - v29) >> 11;
    v7[7] = (unint64_t)(v27 + v16) >> 11;
    v7[35] = (unint64_t)(v16 - v27) >> 11;
    v7[14] = (unint64_t)(v30 + v19) >> 11;
    v7[28] = (unint64_t)(v19 - v30) >> 11;
    v7[21] = v20 >> 11;
    ++v5;
  }
  while (v5 != 7);
  uint64_t v31 = 0;
  uint64_t v32 = v61 - 384;
  uint64_t result = 11585;
  do
  {
    uint64_t v34 = *a4++;
    int v35 = *(_DWORD *)&v63[v31 + 4];
    int v36 = (*(_DWORD *)&v63[v31] << 13) + 134348800;
    int v38 = *(_DWORD *)&v63[v31 + 20];
    int v37 = *(_DWORD *)&v63[v31 + 24];
    int v39 = *(_DWORD *)&v63[v31 + 16];
    int v40 = 7223 * (v39 - v37);
    int v42 = *(_DWORD *)&v63[v31 + 8];
    int v41 = *(_DWORD *)&v63[v31 + 12];
    int v43 = 2578 * (v42 - v39);
    int v44 = v43 + v40;
    int v45 = v37 + v42;
    int v46 = v40 - 637 * v37;
    int v47 = 7663 * (v41 + v35);
    int v48 = v43 - 20239 * v42;
    int v49 = 1395 * (v35 - v41);
    int v50 = v47 - v49;
    int v51 = v47 + v49;
    int v52 = v36 + 10438 * v45;
    int v53 = v46 + v52;
    int v54 = 5027 * (v38 + v35);
    int v55 = v50 + v54;
    int v56 = v36 - 15083 * v39 + v44;
    int v57 = (unsigned char *)(v34 + a5);
    unsigned char *v57 = *(unsigned char *)(v32 + (((unint64_t)(v55 + v53) >> 18) & 0x3FF));
    int v58 = -11295 * (v38 + v41);
    int v59 = v51 + v58;
    v57[6] = *(unsigned char *)(v32 + (((unint64_t)(v53 - v55) >> 18) & 0x3FF));
    int v60 = v54 + 15326 * v38 + v58;
    v57[1] = *(unsigned char *)(v32 + (((unint64_t)(v59 + v56) >> 18) & 0x3FF));
    v57[5] = *(unsigned char *)(v32 + (((unint64_t)(v56 - v59) >> 18) & 0x3FF));
    v57[2] = *(unsigned char *)(v32 + (((unint64_t)(v60 + v48 + v52) >> 18) & 0x3FF));
    v57[4] = *(unsigned char *)(v32 + (((unint64_t)(v48 + v52 - v60) >> 18) & 0x3FF));
    v57[3] = *(unsigned char *)(v32 + (((unint64_t)(v36 + 11585 * (v39 - v45)) >> 18) & 0x3FF));
    v31 += 28;
  }
  while (v31 != 196);
  return result;
}

uint64_t jpeg_idct_6x6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v43[4 * v5];
    id v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[32] * (uint64_t)v10[32];
    uint64_t v13 = v11 + 5793 * v12;
    unint64_t v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    uint64_t v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    uint64_t v16 = v15 + v13;
    uint64_t v17 = v13 - v15;
    uint64_t v18 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v19 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v20 = (int)v9[40] * (uint64_t)v10[40];
    uint64_t v21 = 2998 * (v18 + v20);
    uint64_t v22 = v21 + ((v18 + v19) << 13);
    uint64_t v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = v18 - (v19 + v20);
    _DWORD *v8 = (unint64_t)(v22 + v16) >> 11;
    v8[30] = (unint64_t)(v16 - v22) >> 11;
    v8[6] = v14 + 4 * v18;
    v8[24] = v14 - 4 * v18;
    v8[12] = (unint64_t)(v23 + v17) >> 11;
    v8[18] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while (v5 != 6);
  uint64_t v24 = 0;
  uint64_t v25 = v6 - 384;
  uint64_t v26 = a5;
  do
  {
    uint64_t v27 = *a4++;
    uint64_t v28 = (unsigned char *)(v27 + v26);
    int v29 = *(_DWORD *)&v43[v24 + 4];
    int v30 = *(_DWORD *)&v43[v24 + 16];
    int v31 = *(_DWORD *)&v43[v24 + 20];
    int v32 = (*(_DWORD *)&v43[v24] << 13) + 134348800;
    int v33 = v32 + 5793 * v30;
    int v34 = *(_DWORD *)&v43[v24 + 12];
    int v35 = 10033 * *(_DWORD *)&v43[v24 + 8];
    int v36 = 2998 * (v31 + v29);
    int v37 = v36 + ((v34 + v29) << 13);
    int v38 = v31 - v34;
    int v39 = v29 - (v34 + v31);
    int v40 = v32 - 11586 * v30;
    *uint64_t v28 = *(unsigned char *)(v25 + (((unint64_t)(v37 + v33 + v35) >> 18) & 0x3FF));
    int v41 = v36 + (v38 << 13);
    v28[5] = *(unsigned char *)(v25 + (((unint64_t)(v33 + v35 - v37) >> 18) & 0x3FF));
    v28[1] = *(unsigned char *)(v25 + (((unint64_t)(v40 + (v39 << 13)) >> 18) & 0x3FF));
    v28[4] = *(unsigned char *)(v25 + (((unint64_t)(v40 - (v39 << 13)) >> 18) & 0x3FF));
    _OWORD v28[2] = *(unsigned char *)(v25 + (((unint64_t)(v41 + v33 - v35) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v25 + (((unint64_t)(v33 - v35 - v41) >> 18) & 0x3FF));
    v28[3] = result;
    v24 += 24;
  }
  while (v24 != 144);
  return result;
}

uint64_t jpeg_idct_5x5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v43[4 * v5];
    id v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[16] * (uint64_t)v10[16];
    int v13 = v9[32];
    uint64_t v14 = 6476 * (v12 + v13 * (uint64_t)v10[32]);
    uint64_t v15 = v12 - v13 * (uint64_t)v10[32];
    uint64_t v16 = v11 + 2896 * v15;
    uint64_t v17 = v16 + v14;
    uint64_t v18 = v16 - v14;
    unint64_t v19 = v11 + 0x7FFFFFFD2C0 * v15;
    uint64_t v20 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v21 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v22 = 6810 * (v20 + v21);
    uint64_t v23 = v22 + 4209 * v20;
    uint64_t v24 = v22 - 17828 * v21;
    _DWORD *v8 = (unint64_t)(v23 + v17) >> 11;
    v8[20] = (unint64_t)(v17 - v23) >> 11;
    v8[5] = (unint64_t)(v24 + v18) >> 11;
    v8[15] = (unint64_t)(v18 - v24) >> 11;
    v8[10] = v19 >> 11;
    ++v5;
  }
  while (v5 != 5);
  uint64_t v25 = 0;
  uint64_t v26 = v6 - 384;
  uint64_t result = a5;
  do
  {
    uint64_t v28 = *a4++;
    int v29 = *(_DWORD *)&v43[v25 + 4];
    int v30 = (unsigned char *)(v28 + result);
    int v31 = (*(_DWORD *)&v43[v25] << 13) + 134348800;
    int v32 = *(_DWORD *)&v43[v25 + 8];
    int v33 = *(_DWORD *)&v43[v25 + 12];
    int v34 = *(_DWORD *)&v43[v25 + 16];
    int v35 = 6476 * (v34 + v32);
    int v36 = v32 - v34;
    int v37 = v31 + 2896 * v36;
    int v38 = 6810 * (v33 + v29);
    int v39 = v37 + v35;
    int v40 = v38 + 4209 * v29;
    int v41 = v38 - 17828 * v33;
    *int v30 = *(unsigned char *)(v26 + (((unint64_t)(v40 + v37 + v35) >> 18) & 0x3FF));
    int v42 = v37 - v35;
    v30[4] = *(unsigned char *)(v26 + (((unint64_t)(v39 - v40) >> 18) & 0x3FF));
    v30[1] = *(unsigned char *)(v26 + (((unint64_t)(v41 + v42) >> 18) & 0x3FF));
    void v30[3] = *(unsigned char *)(v26 + (((unint64_t)(v42 - v41) >> 18) & 0x3FF));
    v30[2] = *(unsigned char *)(v26 + (((unint64_t)(v31 + 268423872 * v36) >> 18) & 0x3FF));
    v25 += 20;
  }
  while (v25 != 100);
  return result;
}

uint64_t jpeg_idct_4x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v38[4 * v5];
    id v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    int v11 = *v9 * *v10;
    int v12 = v9[16] * v10[16];
    int v13 = v12 + v11;
    int v14 = 4 * (v12 + v11);
    int v15 = v11 - v12;
    uint64_t v16 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v17 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v18 = 4433 * (v16 + v17) + 1024;
    unint64_t v19 = (unint64_t)(v18 + 6270 * v16) >> 11;
    unint64_t v20 = (unint64_t)(v18 - 15137 * v17) >> 11;
    _DWORD *v8 = v19 + 4 * v13;
    v8[12] = v14 - v19;
    v8[4] = v20 + 4 * v15;
    unsigned char v8[8] = 4 * v15 - v20;
    ++v5;
  }
  while (v5 != 4);
  uint64_t v21 = 0;
  uint64_t v22 = v6 - 384;
  uint64_t v23 = a5;
  do
  {
    uint64_t v24 = *a4++;
    uint64_t v25 = (unsigned char *)(v24 + v23);
    int v26 = *(_DWORD *)&v38[v21 + 4];
    int v27 = *(_DWORD *)&v38[v21 + 8];
    int v28 = *(_DWORD *)&v38[v21 + 12];
    int v29 = *(_DWORD *)&v38[v21] + 16400;
    int v30 = v29 + v27;
    int v31 = (v29 + v27) << 13;
    int v32 = v29 - v27;
    int v33 = 4433 * (v28 + v26);
    int v34 = v32 << 13;
    int v35 = v33 + 6270 * v26;
    int v36 = v33 - 15137 * v28;
    *uint64_t v25 = *(unsigned char *)(v22 + (((unint64_t)(v35 + (v30 << 13)) >> 18) & 0x3FF));
    void v25[3] = *(unsigned char *)(v22 + (((unint64_t)(v31 - v35) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v22 + (((unint64_t)(v36 + (v32 << 13)) >> 18) & 0x3FF));
    v25[1] = result;
    v25[2] = *(unsigned char *)(v22 + (((unint64_t)(v34 - v36) >> 18) & 0x3FF));
    v21 += 16;
  }
  while (v21 != 64);
  return result;
}

uint64_t jpeg_idct_3x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v25[4 * v5];
    id v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[16] * (uint64_t)v10[16];
    uint64_t v13 = v11 + 5793 * v12;
    uint64_t v14 = 10033 * (int)v9[8] * (uint64_t)v10[8];
    _DWORD *v8 = (unint64_t)(v14 + v13) >> 11;
    v8[6] = (unint64_t)(v13 - v14) >> 11;
    v8[3] = (unint64_t)(v11 + 0x7FFFFFFD2BELL * v12) >> 11;
    ++v5;
  }
  while (v5 != 3);
  uint64_t v15 = 0;
  uint64_t v16 = v6 - 384;
  do
  {
    uint64_t v17 = *a4++;
    uint64_t v18 = (unsigned char *)(v17 + a5);
    int v19 = (*(_DWORD *)&v25[v15] << 13) + 134348800;
    int v20 = *(_DWORD *)&v25[v15 + 8];
    int v21 = v19 + 5793 * v20;
    unint64_t v22 = (v19 + 268423870 * v20);
    int v23 = 10033 * *(_DWORD *)&v25[v15 + 4];
    *uint64_t v18 = *(unsigned char *)(v16 + (((unint64_t)(v21 + v23) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v16 + (((unint64_t)(v21 - v23) >> 18) & 0x3FF));
    v18[2] = result;
    v18[1] = *(unsigned char *)(v16 + ((v22 >> 18) & 0x3FF));
    v15 += 12;
  }
  while (v15 != 36);
  return result;
}

uint64_t jpeg_idct_2x2(uint64_t result, uint64_t a2, unsigned __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(result + 440) - 384;
  uint64_t v6 = *(_DWORD **)(a2 + 88);
  int v7 = *v6 * *a3 + 4100;
  int v8 = v6[8] * a3[8];
  int v9 = v8 + v7;
  int v10 = v7 - v8;
  int v11 = v6[1] * a3[1];
  LODWORD(v6) = v6[9] * a3[9];
  int v12 = v6 + v11;
  LODWORD(v6) = v11 - v6;
  uint64_t v13 = (unsigned char *)(*a4 + a5);
  *uint64_t v13 = *(unsigned char *)(v5 + (((unint64_t)(v12 + v9) >> 3) & 0x3FF));
  v13[1] = *(unsigned char *)(v5 + (((unint64_t)(v9 - v12) >> 3) & 0x3FF));
  uint64_t v14 = (unsigned char *)(a4[1] + a5);
  *uint64_t v14 = *(unsigned char *)(v5 + (((unint64_t)(v6 + v10) >> 3) & 0x3FF));
  v14[1] = *(unsigned char *)(v5 + (((unint64_t)(v10 - v6) >> 3) & 0x3FF));
  return result;
}

uint64_t jpeg_idct_1x1(uint64_t result, uint64_t a2, unsigned __int16 *a3, void *a4, unsigned int a5)
{
  *(unsigned char *)(*a4 + a5) = *(unsigned char *)(*(void *)(result + 440)
                                  + (((unint64_t)(**(_DWORD **)(a2 + 88) * *a3 + 4100) >> 3) & 0x3FF)
                                  - 384);
  return result;
}

uint64_t jpeg_idct_9x9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    int v8 = (_DWORD *)(v7 + 4 * v5);
    int v9 = (__int16 *)(a3 + 2 * v5);
    uint64_t v10 = (int)v8[16] * (uint64_t)v9[16];
    uint64_t v11 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    int v12 = v8[32];
    uint64_t v13 = (int)v8[48] * (uint64_t)v9[48];
    uint64_t v14 = v11 + 5793 * v13;
    uint64_t v15 = v11 - 11586 * v13;
    uint64_t v16 = (int)v8[8] * (uint64_t)v9[8];
    uint64_t v17 = (int)v8[40] * (uint64_t)v9[40];
    uint64_t v18 = v16 + v17;
    uint64_t v19 = v16 - v17;
    int v20 = v8[56];
    uint64_t v21 = v16 + v20 * (uint64_t)v9[56];
    uint64_t v22 = v17 - v20 * (uint64_t)v9[56];
    uint64_t v23 = v19 - v20 * (uint64_t)v9[56];
    uint64_t v24 = v10 - v12 * (uint64_t)v9[32];
    uint64_t v25 = v15 + 5793 * v24;
    unint64_t v26 = v15 + 0x7FFFFFFD2BELL * v24;
    uint64_t v27 = v12 * (uint64_t)v9[32];
    uint64_t v28 = 10887 * (v10 + v27);
    v10 *= 8875;
    uint64_t v29 = 2012 * v27;
    uint64_t v30 = v28 - 2012 * v27 + v14;
    uint64_t v31 = v14 - v28 + v10;
    uint64_t v32 = v14 - v10 + v29;
    uint64_t v33 = -10033 * (int)v8[24] * (uint64_t)v9[24];
    v22 *= 11409;
    v18 *= 7447;
    uint64_t v34 = v33 - v22 + v18;
    uint64_t v35 = v18 - v33;
    uint64_t v36 = v22 + v33;
    int v37 = &v72[v5];
    uint64_t v38 = v35 + 3962 * v21;
    uint64_t v39 = v36 + 3962 * v21;
    _DWORD *v37 = (unint64_t)(v38 + v30) >> 11;
    v23 *= 10033;
    v37[64] = (unint64_t)(v30 - v38) >> 11;
    v37[8] = (unint64_t)(v23 + v25) >> 11;
    v37[56] = (unint64_t)(v25 - v23) >> 11;
    v37[16] = (unint64_t)(v34 + v31) >> 11;
    v37[48] = (unint64_t)(v31 - v34) >> 11;
    v37[24] = (unint64_t)(v39 + v32) >> 11;
    v37[40] = (unint64_t)(v32 - v39) >> 11;
    v37[32] = v26 >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v40 = 0;
  uint64_t v41 = v6 - 384;
  uint64_t result = 4294957263;
  do
  {
    int v43 = &v72[v40];
    int v44 = v43[1];
    int v45 = v43[6];
    int v46 = v43[7];
    int v47 = (*v43 << 13) + 134348800;
    int v48 = v47 + 5793 * v45;
    int v49 = v43[2];
    int v50 = v43[3];
    int v51 = v43[4];
    LODWORD(v43) = v43[5];
    int v52 = v47 - 11586 * v45;
    int v53 = v49 - v51;
    int v54 = v52 + 5793 * (v49 - v51);
    int v55 = 10887 * (v51 + v49);
    v49 *= 8875;
    unint64_t v56 = (v52 + 268423870 * v53);
    int v57 = 2012 * v51;
    int v58 = v55 - 2012 * v51 + v48;
    int v59 = v48 - v55;
    int v60 = v48 - v49;
    int v61 = v59 + v49;
    v50 *= -10033;
    int v62 = 7447 * (v43 + v44);
    int v63 = 3962 * (v46 + v44);
    int v64 = v60 + v57;
    int v65 = v62 - v50 + v63;
    int v66 = v43 - v46;
    LODWORD(v43) = v44 - (v43 + v46);
    int v67 = (unsigned char *)(*(void *)(a4 + v40) + a5);
    *int v67 = *(unsigned char *)(v41 + (((unint64_t)(v65 + v58) >> 18) & 0x3FF));
    LODWORD(v43) = 10033 * v43;
    v67[8] = *(unsigned char *)(v41 + (((unint64_t)(v58 - v65) >> 18) & 0x3FF));
    v67[1] = *(unsigned char *)(v41 + (((unint64_t)(v43 + v54) >> 18) & 0x3FF));
    v66 *= 11409;
    int v68 = v50 - v66 + v62;
    v67[7] = *(unsigned char *)(v41 + (((unint64_t)(v54 - v43) >> 18) & 0x3FF));
    v67[2] = *(unsigned char *)(v41 + (((unint64_t)(v68 + v61) >> 18) & 0x3FF));
    int v69 = v66 + v50 + v63;
    v67[6] = *(unsigned char *)(v41 + (((unint64_t)(v61 - v68) >> 18) & 0x3FF));
    v67[3] = *(unsigned char *)(v41 + (((unint64_t)(v69 + v64) >> 18) & 0x3FF));
    v67[5] = *(unsigned char *)(v41 + (((unint64_t)(v64 - v69) >> 18) & 0x3FF));
    v67[4] = *(unsigned char *)(v41 + ((v56 >> 18) & 0x3FF));
    v40 += 8;
  }
  while (v40 != 72);
  return result;
}

uint64_t jpeg_idct_10x10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v72 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v10 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v11 = v9 + 9373 * v10;
    uint64_t v12 = v9 - 3580 * v10;
    unint64_t v13 = v9 - 11586 * v10;
    uint64_t v14 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v15 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v16 = 6810 * (v14 + v15);
    uint64_t v17 = v16 + 4209 * v14;
    uint64_t v18 = v16 - 17828 * v15;
    uint64_t v19 = v17 + v11;
    uint64_t v20 = v11 - v17;
    uint64_t v21 = v18 + v12;
    uint64_t v22 = v12 - v18;
    uint64_t v23 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v24 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v26 = v24 + (int)v7 * (uint64_t)(int)v8;
    uint64_t v27 = v24 - (int)v7 * (uint64_t)(int)v8;
    uint64_t v28 = 2531 * v27 + (v25 << 13);
    uint64_t v29 = 7791 * v26 + 11443 * v23 + v28;
    uint64_t v30 = 1812 * v23 - 7791 * v26 + v28;
    uint64_t v31 = 4815 * v26;
    uint64_t v32 = -6627 * v27 + (v25 << 13);
    LODWORD(v27) = v23 - v25 - v27;
    uint64_t v33 = 10323 * v23 - (v31 + v32);
    uint64_t v34 = 5260 * v23 - v31;
    uint64_t v35 = &v74[v5];
    uint64_t v36 = v34 + v32;
    *uint64_t v35 = (unint64_t)(v29 + v19) >> 11;
    v35[72] = (unint64_t)(v19 - v29) >> 11;
    v35[8] = (unint64_t)(v33 + v21) >> 11;
    v35[64] = (unint64_t)(v21 - v33) >> 11;
    v35[16] = (v13 >> 11) + 4 * v27;
    v35[56] = (v13 >> 11) - 4 * v27;
    v35[24] = (unint64_t)(v36 + v22) >> 11;
    v35[48] = (unint64_t)(v22 - v36) >> 11;
    v35[32] = (unint64_t)(v30 + v20) >> 11;
    v35[40] = (unint64_t)(v20 - v30) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v37 = 0;
  uint64_t v38 = v72 - 384;
  uint64_t result = 2531;
  do
  {
    uint64_t v40 = &v74[v37];
    uint64_t v41 = *(void *)(a4 + v37);
    int v42 = v40[1];
    int v43 = v40[4];
    int v44 = v40[5];
    int v45 = (*v40 << 13) + 134348800;
    int v46 = v45 + 9373 * v43;
    int v47 = v45 - 3580 * v43;
    int v49 = v40[2];
    int v48 = v40[3];
    int v50 = v45 - 11586 * v43;
    uint64_t v51 = a4;
    int v53 = v40[6];
    int v52 = v40[7];
    LODWORD(v4CoreML::Specification::Normalizer::New(this, 0) = 6810 * (v53 + v49);
    int v54 = v40 + 4209 * v49;
    int v55 = v40 - 17828 * v53;
    int v56 = v54 + v46;
    LODWORD(v4CoreML::Specification::Normalizer::New(this, 0) = v46 - v54;
    int v57 = v55 + v47;
    int v58 = v52 + v48;
    int v59 = v48 - v52;
    int v60 = v47 - v55;
    int v61 = 2531 * v59 + (v44 << 13);
    int v62 = 7791 * v58 + 11443 * v42 + v61;
    int v63 = (unsigned char *)(v41 + a5);
    int v64 = 1812 * v42 - 7791 * v58 + v61;
    int v65 = 4815 * v58;
    unint64_t v66 = (v62 + v56);
    unint64_t v67 = (v56 - v62);
    int v68 = -6627 * v59 + (v44 << 13);
    *int v63 = *(unsigned char *)(v38 + ((v66 >> 18) & 0x3FF));
    LODWORD(v66) = 10323 * v42 - (v65 + v68);
    v63[9] = *(unsigned char *)(v38 + ((v67 >> 18) & 0x3FF));
    int v69 = v42 - v44 - v59;
    v63[1] = *(unsigned char *)(v38 + (((unint64_t)(v66 + v57) >> 18) & 0x3FF));
    v63[8] = *(unsigned char *)(v38 + (((unint64_t)(v57 - v66) >> 18) & 0x3FF));
    int v70 = 5260 * v42 - v65;
    v63[2] = *(unsigned char *)(v38 + (((unint64_t)(v50 + (v69 << 13)) >> 18) & 0x3FF));
    v63[7] = *(unsigned char *)(v38 + (((unint64_t)(v50 - (v69 << 13)) >> 18) & 0x3FF));
    v63[3] = *(unsigned char *)(v38 + (((unint64_t)(v70 + v68 + v60) >> 18) & 0x3FF));
    unint64_t v71 = (v60 - (v70 + v68));
    a4 = v51;
    v63[6] = *(unsigned char *)(v38 + ((v71 >> 18) & 0x3FF));
    v63[4] = *(unsigned char *)(v38 + (((unint64_t)(v64 + v40) >> 18) & 0x3FF));
    v63[5] = *(unsigned char *)(v38 + (((unint64_t)(v40 - v64) >> 18) & 0x3FF));
    v37 += 8;
  }
  while (v37 != 80);
  return result;
}

uint64_t jpeg_idct_11x11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v79 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    int v9 = *v7 * *v8;
    uint64_t v10 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v11 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v12 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v13 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v14 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v15 = (int)v7[40] * (uint64_t)v8[40];
    uint64_t v16 = (int)v7[56] * (uint64_t)v8[56];
    uint64_t v17 = v10 + v12 - v11;
    uint64_t v18 = v13 + v16;
    uint64_t v19 = 3264 * (v13 + v14 + v15 + v16);
    uint64_t v20 = 7274 * (v13 + v14);
    uint64_t v21 = 5492 * (v13 + v15);
    uint64_t v22 = v20 - 7562 * v13 + v21;
    uint64_t v23 = v19 - 9527 * (v14 + v15);
    uint64_t v24 = v21 - 9766 * v15 + v23;
    uint64_t v25 = v20 + 16984 * v14 - 14731 * (v14 + v16) + v23;
    uint64_t v26 = v19 + 3000 * v18;
    uint64_t v27 = v22 + v26;
    uint64_t v28 = -14731 * (v14 + v16) + 17223 * v16 + v26;
    uint64_t v29 = &v82[v5];
    uint64_t v30 = ((uint64_t)v9 << 13) | 0x400;
    uint64_t v31 = -12019 * v14 + 8203 * v15;
    uint64_t v32 = v30 + 11116 * v17;
    uint64_t v33 = 20862 * (v11 - v12);
    uint64_t v34 = v32 + 3529 * (v11 - v10);
    uint64_t v35 = v32 + v33;
    uint64_t v36 = v31 - 13802 * v16 + v19;
    uint64_t v37 = v34 - 14924 * v11 + v33;
    uint64_t v38 = v35 + 17333 * v12;
    _DWORD *v29 = (unint64_t)(v27 + v38) >> 11;
    v29[80] = (unint64_t)(v38 - v27) >> 11;
    unint64_t v39 = v25 + v37;
    unint64_t v40 = v37 - v25;
    uint64_t v41 = v32 - 9467 * (v10 + v12);
    v29[8] = v39 >> 11;
    uint64_t v42 = -11395 * v10 + 15929 * v11 + v41;
    uint64_t v43 = v41 - 6461 * v12;
    v29[16] = (unint64_t)(v24 + v43) >> 11;
    v29[64] = (unint64_t)(v43 - v24) >> 11;
    v29[72] = v40 >> 11;
    uint64_t v44 = v34 - 12399 * v10;
    v29[24] = (unint64_t)(v28 + v44) >> 11;
    v29[56] = (unint64_t)(v44 - v28) >> 11;
    v29[32] = (unint64_t)(v36 + v42) >> 11;
    v29[48] = (unint64_t)(v42 - v36) >> 11;
    v29[40] = (unint64_t)(v30 + 0x7FFFFFFD2BFLL * v17) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v45 = 0;
  uint64_t v46 = v79 - 384;
  do
  {
    int v47 = &v82[v45];
    int v48 = v47[1];
    int v49 = (unsigned char *)(*(void *)(a4 + v45) + a5);
    int v50 = (*v47 << 13) + 134348800;
    int v51 = v47[4];
    int v52 = v47[5];
    int v54 = v47[6];
    int v53 = v47[7];
    int v55 = 20862 * (v51 - v54);
    int v56 = v47[2];
    int v57 = v47[3];
    int v58 = v54 + v56 - v51;
    int v59 = v50 + 11116 * v58;
    LODWORD(v47) = v59 + 3529 * (v51 - v56);
    int v60 = v47 - 14924 * v51;
    int v61 = v59 + v55 + 17333 * v54;
    int v62 = v47 - 12399 * v56;
    int v63 = v59 - 9467 * (v54 + v56);
    int v64 = -11395 * v56 + 15929 * v51;
    unint64_t v65 = (v50 + 268423871 * v58);
    int v66 = v63 - 6461 * v54;
    int v67 = 3264 * (v57 + v48 + v52 + v53);
    int v68 = 7274 * (v57 + v48);
    int v69 = v64 + v63;
    int v70 = 5492 * (v52 + v48);
    int v71 = v67 + 3000 * (v53 + v48);
    int v72 = v60 + v55;
    int v73 = v68 - 7562 * v48 + v70 + v71;
    unsigned char *v49 = *(unsigned char *)(v46 + (((unint64_t)(v73 + v61) >> 18) & 0x3FF));
    int v74 = v67 - 9527 * (v52 + v57);
    int v75 = v70 - 9766 * v52 + v74;
    int v76 = v68 + 16984 * v57 - 14731 * (v53 + v57) + v74;
    v49[10] = *(unsigned char *)(v46 + (((unint64_t)(v61 - v73) >> 18) & 0x3FF));
    v49[1] = *(unsigned char *)(v46 + (((unint64_t)(v76 + v72) >> 18) & 0x3FF));
    LOBYTE(v73) = *(unsigned char *)(v46 + (((unint64_t)(v72 - v76) >> 18) & 0x3FF));
    uint64_t result = (-14731 * (v53 + v57) + 17223 * v53 + v71);
    v49[9] = v73;
    v49[2] = *(unsigned char *)(v46 + (((unint64_t)(v75 + v66) >> 18) & 0x3FF));
    v49[8] = *(unsigned char *)(v46 + (((unint64_t)(v66 - v75) >> 18) & 0x3FF));
    v49[3] = *(unsigned char *)(v46 + (((unint64_t)(result + v62) >> 18) & 0x3FF));
    int v78 = -12019 * v57 + 8203 * v52 - 13802 * v53 + v67;
    v49[7] = *(unsigned char *)(v46 + (((unint64_t)(v62 - result) >> 18) & 0x3FF));
    v49[4] = *(unsigned char *)(v46 + (((unint64_t)(v78 + v69) >> 18) & 0x3FF));
    v49[6] = *(unsigned char *)(v46 + (((unint64_t)(v69 - v78) >> 18) & 0x3FF));
    v49[5] = *(unsigned char *)(v46 + ((v65 >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 88);
  return result;
}

unsigned char *jpeg_idct_12x12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v81 = *MEMORY[0x263EF8340];
  uint64_t v78 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v10 = 10033 * (int)v7[32] * (uint64_t)v8[32];
    uint64_t v11 = v10 + v9;
    uint64_t v12 = v9 - v10;
    uint64_t v13 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v14 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v15 = v9 + ((v13 - v14) << 13);
    uint64_t v16 = v9 - ((v13 - v14) << 13);
    uint64_t v17 = 11190 * v13 + (v14 << 13);
    uint64_t v18 = v17 + v11;
    uint64_t v19 = v11 - v17;
    uint64_t v20 = 2998 * v13 - (v14 << 13);
    uint64_t v21 = v20 + v12;
    uint64_t v22 = v12 - v20;
    uint64_t v23 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v24 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v26 = 10703 * v24;
    uint64_t v27 = -4433 * v24;
    uint64_t v28 = 7053 * (v23 + v25 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v29 = v28 + 2139 * (v23 + v25);
    uint64_t v30 = v24 - v25;
    uint64_t v31 = v26 + 2295 * v23 + v29;
    uint64_t v32 = -8565 * (v25 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v33 = v27 - 12112 * v25 - 8565 * (v25 + (int)v7 * (uint64_t)(int)v8) + v29;
    uint64_t v34 = (int)v7 * (uint64_t)(int)v8;
    uint64_t v35 = 12998 * v34 - v26 + v32;
    uint64_t v36 = v23 - v34;
    uint64_t v37 = &v80[v5];
    uint64_t v38 = v35 + v28;
    uint64_t v39 = v27 - 5540 * v23 - 16244 * v34 + v28;
    uint64_t v40 = 4433 * (v36 + v30);
    uint64_t v41 = v40 + 6270 * v36;
    uint64_t v42 = v40 - 15137 * v30;
    _DWORD *v37 = (unint64_t)(v31 + v18) >> 11;
    v37[88] = (unint64_t)(v18 - v31) >> 11;
    v37[8] = (unint64_t)(v41 + v15) >> 11;
    v37[80] = (unint64_t)(v15 - v41) >> 11;
    v37[16] = (unint64_t)(v33 + v21) >> 11;
    v37[72] = (unint64_t)(v21 - v33) >> 11;
    v37[24] = (unint64_t)(v38 + v22) >> 11;
    v37[64] = (unint64_t)(v22 - v38) >> 11;
    v37[32] = (unint64_t)(v42 + v16) >> 11;
    v37[56] = (unint64_t)(v16 - v42) >> 11;
    v37[40] = (unint64_t)(v39 + v19) >> 11;
    v37[48] = (unint64_t)(v19 - v39) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v43 = 0;
  uint64_t v44 = v78 - 384;
  do
  {
    uint64_t v45 = &v80[v43];
    int v46 = v45[1];
    int v47 = (*v45 << 13) + 134348800;
    int v48 = v45[5];
    int v49 = 10033 * v45[4];
    int v50 = v47 + v49;
    int v52 = v45[2];
    int v51 = v45[3];
    int v53 = v45[6];
    int v54 = v45[7];
    int v55 = v47 - v49;
    int v56 = v47 + ((v52 - v53) << 13);
    int v57 = v47 - ((v52 - v53) << 13);
    int v58 = 11190 * v52 + (v53 << 13);
    int v59 = v58 + v50;
    LODWORD(v45) = v50 - v58;
    int v60 = 2998 * v52 - (v53 << 13);
    int v61 = 10703 * v51;
    int v62 = -4433 * v51;
    int v63 = v60 + v55;
    int v64 = 7053 * (v48 + v46 + v54);
    int v65 = v64 + 2139 * (v48 + v46);
    int v66 = v55 - v60;
    int v67 = 10703 * v51 + 2295 * v46 + v65;
    int v68 = -8565 * (v54 + v48);
    int v69 = -4433 * v51 - 12112 * v48 - 8565 * (v54 + v48) + v65;
    int v70 = v51 - v48;
    uint64_t result = (unsigned char *)(*(void *)(a4 + v43) + a5);
    *uint64_t result = *(unsigned char *)(v44 + (((unint64_t)(v67 + v59) >> 18) & 0x3FF));
    unint64_t v72 = (v59 - v67);
    int v73 = 4433 * (v46 - v54 + v70);
    int v74 = v73 + 6270 * (v46 - v54);
    result[11] = *(unsigned char *)(v44 + ((v72 >> 18) & 0x3FF));
    result[1] = *(unsigned char *)(v44 + (((unint64_t)(v74 + v56) >> 18) & 0x3FF));
    LODWORD(v72) = 12998 * v54 - v61 + v64 + v68;
    result[10] = *(unsigned char *)(v44 + (((unint64_t)(v56 - v74) >> 18) & 0x3FF));
    result[2] = *(unsigned char *)(v44 + (((unint64_t)(v69 + v63) >> 18) & 0x3FF));
    result[9] = *(unsigned char *)(v44 + (((unint64_t)(v63 - v69) >> 18) & 0x3FF));
    int v75 = v62 - 5540 * v46 - 16244 * v54 + v64;
    result[3] = *(unsigned char *)(v44 + (((unint64_t)(v72 + v66) >> 18) & 0x3FF));
    int v76 = v73 - 15137 * v70;
    result[8] = *(unsigned char *)(v44 + (((unint64_t)(v66 - v72) >> 18) & 0x3FF));
    result[4] = *(unsigned char *)(v44 + (((unint64_t)(v76 + v57) >> 18) & 0x3FF));
    result[7] = *(unsigned char *)(v44 + (((unint64_t)(v57 - v76) >> 18) & 0x3FF));
    result[5] = *(unsigned char *)(v44 + (((unint64_t)(v75 + v45) >> 18) & 0x3FF));
    result[6] = *(unsigned char *)(v44 + (((unint64_t)(v45 - v75) >> 18) & 0x3FF));
    v43 += 8;
  }
  while (v43 != 96);
  return result;
}

uint64_t jpeg_idct_13x13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v85 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    int v9 = v8[16];
    int v10 = v7[16];
    uint64_t v11 = v10 * (uint64_t)v8[16];
    uint64_t v12 = (int)v7[32] * (uint64_t)v8[32];
    int v13 = v7[48];
    uint64_t v14 = v12 + v13 * (uint64_t)v8[48];
    uint64_t v15 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v16 = v12 - v13 * (uint64_t)v8[48];
    uint64_t v17 = v15 + 793 * v16;
    uint64_t v18 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v19 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v20 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v21 = 10832 * (v18 + v19);
    uint64_t v22 = 9534 * (v18 + v20);
    uint64_t v23 = v18 + (int)v7 * (uint64_t)(int)v8;
    uint64_t v24 = 9465 * v14 + 11249 * v11 + v17;
    uint64_t v25 = -2773 * (v19 + v20);
    uint64_t v26 = v21 - 16549 * v18 + v22 + 7682 * v23;
    uint64_t v27 = -9534 * (v19 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v28 = v21 + 6859 * v19 + v25 - 9534 * (v19 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v29 = -9465 * v14 + 4108 * v11 + v17;
    uint64_t v30 = (int)v7 * (uint64_t)(int)v8;
    uint64_t v31 = v15 + 3989 * v16;
    uint64_t v32 = v25 - 12879 * v20 + v22 - 5384 * (v20 + v30);
    uint64_t v33 = 2592 * v14 - 10258 * v11 + v31;
    uint64_t v34 = -2592 * v14 + 8672 * v11 + v31;
    v14 *= 3570;
    uint64_t v35 = v27 + 18068 * v30 + 7682 * v23 - 5384 * (v20 + v30);
    uint64_t v36 = -v14 - 1396 * v11;
    uint64_t v37 = v16 - v10 * (uint64_t)v9;
    uint64_t v38 = &v88[v5];
    uint64_t v39 = v15 - 7678 * v16;
    uint64_t v40 = v14 - 6581 * v11 + v39;
    uint64_t v41 = v36 + v39;
    _DWORD *v38 = (unint64_t)(v26 + v24) >> 11;
    v38[96] = (unint64_t)(v24 - v26) >> 11;
    v38[8] = (unint64_t)(v28 + v34) >> 11;
    v38[88] = (unint64_t)(v34 - v28) >> 11;
    v38[16] = (unint64_t)(v32 + v29) >> 11;
    uint64_t v42 = 7682 * (v20 - v19) + 2773 * v23;
    v38[80] = (unint64_t)(v29 - v32) >> 11;
    unsigned char v38[24] = (unint64_t)(v35 + v41) >> 11;
    v38[72] = (unint64_t)(v41 - v35) >> 11;
    uint64_t v43 = v42 + 2611 * v18 - 3818 * v19;
    v38[32] = (unint64_t)(v43 + v40) >> 11;
    unsigned char v38[64] = (unint64_t)(v40 - v43) >> 11;
    uint64_t v44 = v42 + 3150 * v20 - 14273 * v30;
    v38[40] = (unint64_t)(v44 + v33) >> 11;
    v38[56] = (unint64_t)(v33 - v44) >> 11;
    v38[48] = (unint64_t)(v15 + 11585 * v37) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v45 = 0;
  uint64_t v46 = v85 - 384;
  do
  {
    int v47 = &v88[v45];
    int v48 = v47[1];
    int v50 = v47[4];
    int v49 = v47[5];
    int v51 = (*v47 << 13) + 134348800;
    int v52 = v47[6];
    int v53 = v47[7];
    int v54 = v52 + v50;
    int v55 = v50 - v52;
    int v56 = 9465 * (v52 + v50);
    int v57 = v51 + 793 * v55;
    int v59 = v47[2];
    int v58 = v47[3];
    int v60 = 4108 * v59 - v56;
    int v61 = v56 + 11249 * v59 + v57;
    int v62 = v51 + 3989 * v55;
    int v63 = -2592 * v54 + 8672 * v59;
    LODWORD(v47) = 2592 * v54 - 10258 * v59;
    v54 *= 3570;
    int v64 = v47 + v62;
    int v65 = v51 - 7678 * v55;
    int v66 = -v54 - 1396 * v59;
    int v67 = v54 - 6581 * v59 + v65;
    int v68 = v60 + v57;
    unint64_t v69 = (v51 + 11585 * (v55 - v59));
    int v70 = 10832 * (v58 + v48);
    int v71 = v63 + v62;
    int v72 = 9534 * (v49 + v48);
    int v73 = v66 + v65;
    int v74 = v70 - 16549 * v48 + v72 + 7682 * (v53 + v48);
    int v75 = -2773 * (v49 + v58);
    int v76 = v70 + 6859 * v58 + v75 - 9534 * (v53 + v58);
    int v77 = v75 - 12879 * v49 + v72 - 5384 * (v53 + v49);
    uint64_t v78 = (unsigned char *)(*(void *)(a4 + v45) + a5);
    unsigned char *v78 = *(unsigned char *)(v46 + (((unint64_t)(v74 + v61) >> 18) & 0x3FF));
    v78[12] = *(unsigned char *)(v46 + (((unint64_t)(v61 - v74) >> 18) & 0x3FF));
    int v79 = -9534 * (v53 + v58) + 18068 * v53 + 7682 * (v53 + v48) - 5384 * (v53 + v49);
    v78[1] = *(unsigned char *)(v46 + (((unint64_t)(v76 + v71) >> 18) & 0x3FF));
    v78[11] = *(unsigned char *)(v46 + (((unint64_t)(v71 - v76) >> 18) & 0x3FF));
    v78[2] = *(unsigned char *)(v46 + (((unint64_t)(v77 + v68) >> 18) & 0x3FF));
    unint64_t v80 = (v68 - v77);
    int v81 = 7682 * (v49 - v58) + 2773 * (v53 + v48);
    v78[10] = *(unsigned char *)(v46 + ((v80 >> 18) & 0x3FF));
    v78[3] = *(unsigned char *)(v46 + (((unint64_t)(v79 + v73) >> 18) & 0x3FF));
    int v82 = v81 + 2611 * v48 - 3818 * v58;
    v78[9] = *(unsigned char *)(v46 + (((unint64_t)(v73 - v79) >> 18) & 0x3FF));
    v78[4] = *(unsigned char *)(v46 + (((unint64_t)(v82 + v67) >> 18) & 0x3FF));
    int v83 = v81 + 3150 * v49 - 14273 * v53;
    v78[8] = *(unsigned char *)(v46 + (((unint64_t)(v67 - v82) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v46 + (((unint64_t)(v83 + v64) >> 18) & 0x3FF));
    v78[5] = result;
    v78[7] = *(unsigned char *)(v46 + (((unint64_t)(v64 - v83) >> 18) & 0x3FF));
    v78[6] = *(unsigned char *)(v46 + ((v69 >> 18) & 0x3FF));
    v45 += 8;
  }
  while (v45 != 104);
  return result;
}

uint64_t jpeg_idct_14x14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v92 = *MEMORY[0x263EF8340];
  uint64_t v88 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v11 = v10 + 10438 * v9;
    uint64_t v12 = v10 + 2578 * v9;
    uint64_t v13 = v10 - 7223 * v9;
    uint64_t v14 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v15 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v16 = 9058 * (v14 + v15);
    uint64_t v17 = v16 + 2237 * v14;
    uint64_t v18 = v16 - 14084 * v15;
    uint64_t v19 = 5027 * v14 - 11295 * v15;
    uint64_t v20 = v17 + v11;
    uint64_t v21 = v11 - v17;
    uint64_t v22 = v18 + v12;
    uint64_t v23 = v12 - v18;
    uint64_t v24 = v19 + v13;
    uint64_t v25 = v13 - v19;
    uint64_t v26 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v27 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v28 = (int)v7[40] * (uint64_t)v8[40];
    uint64_t v29 = (int)v7[56] * (uint64_t)v8[56];
    uint64_t v30 = 10935 * (v26 + v27);
    uint64_t v31 = 9810 * (v26 + v28);
    uint64_t v32 = v30 - 9232 * v26 + v31;
    uint64_t v33 = -1297 * (v27 + v28) - (v29 << 13);
    uint64_t v34 = v30 - 3474 * v27 + v33;
    uint64_t v35 = v31 - 19447 * v28 + v33;
    uint64_t v36 = 6164 * (v26 + v28);
    uint64_t v37 = v26 - v27;
    uint64_t v38 = 11512 * (v28 - v27);
    uint64_t v39 = v38 - 13850 * v28 + v36;
    uint64_t v40 = v36 - 8693 * v26;
    uint64_t v41 = v38 + 5529 * v27;
    uint64_t v42 = 3826 * v37 - (v29 << 13);
    uint64_t v43 = v40 + v42;
    uint64_t v44 = v41 + v42;
    uint64_t v45 = &v91[v5];
    uint64_t v46 = v32 + (v29 << 13);
    uint64_t v47 = v39 + (v29 << 13);
    LODWORD(v29) = v37 - v28 + v29;
    *uint64_t v45 = (unint64_t)(v46 + v20) >> 11;
    v45[104] = (unint64_t)(v20 - v46) >> 11;
    v45[8] = (unint64_t)(v34 + v22) >> 11;
    v45[96] = (unint64_t)(v22 - v34) >> 11;
    v45[16] = (unint64_t)(v35 + v24) >> 11;
    unint64_t v48 = (unint64_t)(v10 - 11586 * v9) >> 11;
    v45[88] = (unint64_t)(v24 - v35) >> 11;
    v45[24] = v48 + 4 * v29;
    v45[80] = v48 - 4 * v29;
    v45[32] = (unint64_t)(v47 + v25) >> 11;
    v45[72] = (unint64_t)(v25 - v47) >> 11;
    v45[40] = (unint64_t)(v44 + v23) >> 11;
    v45[64] = (unint64_t)(v23 - v44) >> 11;
    v45[48] = (unint64_t)(v43 + v21) >> 11;
    v45[56] = (unint64_t)(v21 - v43) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v49 = 0;
  uint64_t v50 = v88 - 384;
  do
  {
    int v51 = &v91[v49];
    int v52 = v51[1];
    int v53 = (*v51 << 13) + 134348800;
    int v55 = v51[4];
    int v54 = v51[5];
    int v56 = v53 + 10438 * v55;
    int v57 = v53 + 2578 * v55;
    int v58 = v53 - 7223 * v55;
    int v60 = v51[2];
    int v59 = v51[3];
    int v61 = v51[6];
    int v62 = v51[7];
    int v63 = v53 - 11586 * v55;
    LODWORD(v51) = 9058 * (v61 + v60);
    int v64 = v51 + 2237 * v60;
    int v65 = v51 - 14084 * v61;
    LODWORD(v51) = 5027 * v60 - 11295 * v61;
    int v66 = v64 + v56;
    int v67 = v56 - v64;
    int v68 = v51 + v58;
    LODWORD(v51) = v58 - v51;
    int v69 = v65 + v57;
    int v70 = 10935 * (v59 + v52);
    int v71 = 9810 * (v54 + v52);
    int v72 = v70 - 9232 * v52 + v71 + (v62 << 13);
    int v73 = v57 - v65;
    int v74 = -1297 * (v54 + v59) - (v62 << 13);
    int v75 = v70 - 3474 * v59 + v74;
    int v76 = v71 - 19447 * v54 + v74;
    int v77 = -13850 * v54 + (v62 << 13);
    int v78 = 3826 * (v52 - v59) - (v62 << 13);
    int v79 = v52 - v59 - v54 + v62;
    unint64_t v80 = (unsigned char *)(*(void *)(a4 + v49) + a5);
    unsigned char *v80 = *(unsigned char *)(v50 + (((unint64_t)(v72 + v66) >> 18) & 0x3FF));
    v80[13] = *(unsigned char *)(v50 + (((unint64_t)(v66 - v72) >> 18) & 0x3FF));
    v80[1] = *(unsigned char *)(v50 + (((unint64_t)(v75 + v69) >> 18) & 0x3FF));
    v80[12] = *(unsigned char *)(v50 + (((unint64_t)(v69 - v75) >> 18) & 0x3FF));
    v80[2] = *(unsigned char *)(v50 + (((unint64_t)(v76 + v68) >> 18) & 0x3FF));
    int v81 = 6164 * (v54 + v52);
    int v82 = 11512 * (v54 - v59);
    LOBYTE(v66) = *(unsigned char *)(v50 + (((unint64_t)(v68 - v76) >> 18) & 0x3FF));
    uint64_t result = 4294958603;
    int v84 = v81 - 8693 * v52;
    v80[11] = v66;
    int v85 = v77 + v82 + v81;
    v80[3] = *(unsigned char *)(v50 + (((unint64_t)(v63 + (v79 << 13)) >> 18) & 0x3FF));
    v80[10] = *(unsigned char *)(v50 + (((unint64_t)(v63 - (v79 << 13)) >> 18) & 0x3FF));
    v80[4] = *(unsigned char *)(v50 + (((unint64_t)(v85 + v51) >> 18) & 0x3FF));
    int v86 = v84 + v78;
    int v87 = v82 + 5529 * v59 + v78;
    v80[9] = *(unsigned char *)(v50 + (((unint64_t)(v51 - v85) >> 18) & 0x3FF));
    v80[5] = *(unsigned char *)(v50 + (((unint64_t)(v87 + v73) >> 18) & 0x3FF));
    v80[8] = *(unsigned char *)(v50 + (((unint64_t)(v73 - v87) >> 18) & 0x3FF));
    v80[6] = *(unsigned char *)(v50 + (((unint64_t)(v86 + v67) >> 18) & 0x3FF));
    v80[7] = *(unsigned char *)(v50 + (((unint64_t)(v67 - v86) >> 18) & 0x3FF));
    v49 += 8;
  }
  while (v49 != 112);
  return result;
}

uint64_t jpeg_idct_15x15(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v90 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    int v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v10 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v11 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    int v12 = v7[32];
    uint64_t v13 = v11 - 3580 * v10;
    uint64_t v14 = v11 + 9373 * v10;
    uint64_t v15 = v9 - v12 * (uint64_t)v8[32];
    uint64_t v16 = v9 + v12 * (uint64_t)v8[32];
    uint64_t v17 = 11795 * v9;
    uint64_t v18 = 374 * v15 + 10958 * v16 + v14;
    uint64_t v19 = 11795 * v9 - 10958 * v16 + 374 * v15 + v13;
    uint64_t v20 = -3271 * v15 - 4482 * v16 + v14;
    uint64_t v21 = 4482 * v16 - v17 + -3271 * v15 + v13;
    uint64_t v22 = 6476 * v16;
    uint64_t v23 = 2896 * v15 + 6476 * v16 + v13;
    uint64_t v24 = v14 - v22 + 2896 * v15;
    uint64_t v25 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v26 = (int)v7[24] * (uint64_t)v8[24];
    int v27 = v8[40];
    int v28 = v7[40];
    uint64_t v29 = 10033 * v28 * (uint64_t)v8[40];
    uint64_t v30 = (int)v7[56] * (uint64_t)v8[56];
    uint64_t v31 = -11018 * v26;
    uint64_t v32 = v29 + 11522 * (v25 - v30);
    uint64_t v33 = 11018 * v26 + 20131 * v30 + v32;
    uint64_t v34 = -6810 * v26 - 9113 * v25 + v32;
    uint64_t v35 = v26 - v30;
    uint64_t v36 = -6810 * v26 + 3897 * v25 - v29;
    uint64_t v37 = &v93[v5];
    uint64_t v38 = 4712 * (v25 + v30);
    uint64_t v39 = v36 + v38;
    uint64_t v40 = v29 + v31 - 7121 * v30 + v38;
    _DWORD *v37 = (unint64_t)(v33 + v18) >> 11;
    v37[112] = (unint64_t)(v18 - v33) >> 11;
    uint64_t v41 = 6810 * (v35 + v25);
    uint64_t v42 = v41 + 4209 * v25;
    v37[8] = (unint64_t)(v42 + v23) >> 11;
    v37[104] = (unint64_t)(v23 - v42) >> 11;
    uint64_t v43 = v11 - 11586 * v10;
    uint64_t v44 = v43 + 5792 * v15;
    uint64_t v45 = 10033 * (v25 - v30 - v28 * (uint64_t)v27);
    v37[16] = (unint64_t)(v45 + v44) >> 11;
    v37[96] = (unint64_t)(v44 - v45) >> 11;
    v37[24] = (unint64_t)(v39 + v19) >> 11;
    v37[88] = (unint64_t)(v19 - v39) >> 11;
    uint64_t v46 = v41 - 17828 * v35;
    v37[32] = (unint64_t)(v46 + v24) >> 11;
    v37[80] = (unint64_t)(v24 - v46) >> 11;
    v37[40] = (unint64_t)(v40 + v20) >> 11;
    v37[72] = (unint64_t)(v20 - v40) >> 11;
    v37[48] = (unint64_t)(v34 + v21) >> 11;
    v37[64] = (unint64_t)(v21 - v34) >> 11;
    v37[56] = (unint64_t)(v43 + 0x7FFFFFFD2C0 * v15) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v47 = 0;
  uint64_t v48 = v90 - 384;
  do
  {
    uint64_t v49 = &v93[v47];
    uint64_t v50 = (unsigned char *)(*(void *)(a4 + v47) + a5);
    int v51 = v49[1];
    int v52 = (*v49 << 13) + 134348800;
    int v53 = v49[6];
    int v54 = v49[7];
    int v55 = v52 - 3580 * v53;
    int v56 = v52 + 9373 * v53;
    int v57 = v49[2];
    int v58 = v49[3];
    int v59 = v49[4];
    int v60 = v49[5];
    LODWORD(v49) = v52 - 11586 * v53;
    int v61 = v57 - v59;
    int v62 = v59 + v57;
    v57 *= 11795;
    int v63 = 374 * v61 + 10958 * v62 + v56;
    int v64 = v57 - 10958 * v62 + 374 * v61;
    int v65 = -3271 * v61 - 4482 * v62 + v56;
    int v66 = 4482 * v62 - v57 - 3271 * v61;
    v62 *= 6476;
    int v67 = 2896 * v61;
    int v68 = v64 + v55;
    int v69 = 2896 * v61 + v62 + v55;
    int v70 = v56 - v62;
    int v71 = v49 + 5792 * v61;
    unint64_t v72 = (v49 + 268423872 * v61);
    int v73 = v66 + v55;
    int v74 = 10033 * v60;
    int v75 = v58 - v54;
    int v76 = -11018 * v58;
    int v77 = 10033 * v60 + 11522 * (v51 - v54);
    int v78 = v70 + v67;
    int v79 = 11018 * v58 + 20131 * v54 + v77;
    unint64_t v80 = (v79 + v63);
    unint64_t v81 = (v63 - v79);
    int v82 = 6810 * (v58 - v54 + v51);
    *uint64_t v50 = *(unsigned char *)(v48 + ((v80 >> 18) & 0x3FF));
    LODWORD(v8CoreML::Specification::Normalizer::New(this, 0) = v82 + 4209 * v51;
    v50[14] = *(unsigned char *)(v48 + ((v81 >> 18) & 0x3FF));
    v50[1] = *(unsigned char *)(v48 + (((unint64_t)(v80 + v69) >> 18) & 0x3FF));
    int v83 = 10033 * (v51 - v54 - v60);
    v50[13] = *(unsigned char *)(v48 + (((unint64_t)(v69 - v80) >> 18) & 0x3FF));
    v58 *= -6810;
    v50[2] = *(unsigned char *)(v48 + (((unint64_t)(v83 + v71) >> 18) & 0x3FF));
    LODWORD(v81) = 4712 * (v54 + v51);
    unint64_t v84 = (v71 - v83);
    int v85 = v58 + 3897 * v51 - v74 + v81;
    v50[12] = *(unsigned char *)(v48 + ((v84 >> 18) & 0x3FF));
    int v86 = v82 - 17828 * v75;
    v50[3] = *(unsigned char *)(v48 + (((unint64_t)(v85 + v68) >> 18) & 0x3FF));
    uint64_t result = (v74 + v76);
    v50[11] = *(unsigned char *)(v48 + (((unint64_t)(v68 - v85) >> 18) & 0x3FF));
    v50[4] = *(unsigned char *)(v48 + (((unint64_t)(v86 + v78) >> 18) & 0x3FF));
    int v88 = result - 7121 * v54 + v81;
    v50[10] = *(unsigned char *)(v48 + (((unint64_t)(v78 - v86) >> 18) & 0x3FF));
    v50[5] = *(unsigned char *)(v48 + (((unint64_t)(v88 + v65) >> 18) & 0x3FF));
    int v89 = v58 - 9113 * v51 + v77;
    v50[9] = *(unsigned char *)(v48 + (((unint64_t)(v65 - v88) >> 18) & 0x3FF));
    v50[6] = *(unsigned char *)(v48 + (((unint64_t)(v89 + v73) >> 18) & 0x3FF));
    v50[8] = *(unsigned char *)(v48 + (((unint64_t)(v73 - v89) >> 18) & 0x3FF));
    v50[7] = *(unsigned char *)(v48 + ((v72 >> 18) & 0x3FF));
    v47 += 8;
  }
  while (v47 != 120);
  return result;
}

uint64_t jpeg_idct_16x16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v109 = *(void *)(a1 + 440);
  uint64_t v112 = *(void *)(a2 + 88);
  do
  {
    uint64_t v6 = (_DWORD *)(v112 + 4 * v5);
    uint64_t v7 = (__int16 *)(a3 + 2 * v5);
    uint64_t v8 = (int)v6[32] * (uint64_t)v7[32];
    uint64_t v9 = 10703 * v8;
    uint64_t v10 = ((uint64_t)(*v6 * *v7) << 13) | 0x400;
    v8 *= 4433;
    uint64_t v11 = v9 + v10;
    uint64_t v12 = v10 - v9;
    uint64_t v13 = v8 + v10;
    uint64_t v14 = v10 - v8;
    uint64_t v15 = (int)v6[16] * (uint64_t)v7[16];
    uint64_t v16 = (int)v6[48] * (uint64_t)v7[48];
    uint64_t v17 = 2260 * (v15 - v16);
    uint64_t v18 = 11363 * (v15 - v16);
    uint64_t v19 = v18 + 20995 * v16;
    uint64_t v20 = v17 + 7373 * v15;
    uint64_t v21 = v18 - 4926 * v15;
    uint64_t v22 = v17 - 4176 * v16;
    uint64_t v23 = v19 + v11;
    uint64_t v114 = v11 - v19;
    uint64_t v24 = v20 + v13;
    uint64_t v25 = v13 - v20;
    uint64_t v26 = v21 + v14;
    uint64_t v27 = v14 - v21;
    uint64_t v28 = v22 + v12;
    uint64_t v29 = v12 - v22;
    uint64_t v30 = (int)v6[8] * (uint64_t)v7[8];
    uint64_t v31 = (int)v6[24] * (uint64_t)v7[24];
    int v32 = v7[40];
    int v33 = v6[40];
    int v34 = v7[56];
    int v35 = v6[56];
    uint64_t v36 = v30 + v33 * (uint64_t)v7[40];
    uint64_t v37 = 11086 * (v30 + v31);
    uint64_t v38 = 10217 * v36;
    uint64_t v39 = 8956 * (v30 + v35 * (uint64_t)v34);
    uint64_t v40 = 7350 * (v30 - v35 * (uint64_t)v34);
    uint64_t v41 = 5461 * v36;
    uint64_t v42 = 3363 * (v30 - v31);
    uint64_t v43 = v37 - 18730 * v30 + 10217 * v36 + v39;
    uint64_t v44 = v42 - 15038 * v30 + 5461 * v36 + v40;
    uint64_t v45 = 1136 * (v31 + v33 * (uint64_t)v32);
    uint64_t v46 = v31 + v35 * (uint64_t)v34;
    uint64_t v47 = -5461 * v46;
    uint64_t v48 = v37 + 589 * v31 + v45 - 5461 * v46;
    uint64_t v49 = v33 * (uint64_t)v32;
    uint64_t v50 = 11529 * (v49 - v31);
    v46 *= -10217;
    uint64_t v51 = v42 + 16154 * v31 + v50 + v46;
    uint64_t v52 = v45 - 9222 * v49 + v38 - 11086 * (v49 + v35 * (uint64_t)v34);
    uint64_t v53 = v35 * (uint64_t)v34;
    uint64_t v54 = v47 + 8728 * v53 + v39 - 11086 * (v49 + v53);
    uint64_t v55 = 3363 * (v53 - v49);
    uint64_t v56 = v46 + 25733 * v53 + v40 + v55;
    int v57 = &v115[v5];
    uint64_t v58 = v50 - 6278 * v49 + v41 + v55;
    _DWORD *v57 = (unint64_t)(v43 + v23) >> 11;
    v57[120] = (unint64_t)(v23 - v43) >> 11;
    v57[8] = (unint64_t)(v48 + v24) >> 11;
    v57[112] = (unint64_t)(v24 - v48) >> 11;
    v57[16] = (unint64_t)(v52 + v26) >> 11;
    v57[104] = (unint64_t)(v26 - v52) >> 11;
    v57[24] = (unint64_t)(v54 + v28) >> 11;
    v57[96] = (unint64_t)(v28 - v54) >> 11;
    v57[32] = (unint64_t)(v56 + v29) >> 11;
    v57[88] = (unint64_t)(v29 - v56) >> 11;
    v57[40] = (unint64_t)(v58 + v27) >> 11;
    v57[80] = (unint64_t)(v27 - v58) >> 11;
    v57[48] = (unint64_t)(v51 + v25) >> 11;
    v57[72] = (unint64_t)(v25 - v51) >> 11;
    v57[56] = (unint64_t)(v44 + v114) >> 11;
    v57[64] = (unint64_t)(v114 - v44) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v59 = 0;
  uint64_t v60 = v109 - 384;
  do
  {
    int v61 = &v115[v59];
    int v62 = v61[1];
    int v63 = v61[4];
    int v64 = v61[5];
    int v65 = (*v61 << 13) + 134348800;
    int v66 = 10703 * v63;
    v63 *= 4433;
    int v67 = v65 + v66;
    int v68 = v65 - v66;
    int v70 = v61[2];
    int v69 = v61[3];
    int v71 = v65 + v63;
    int v72 = v61[6];
    int v73 = v61[7];
    int v74 = 2260 * (v70 - v72);
    int v75 = v65 - v63;
    LODWORD(v61) = 11363 * (v70 - v72);
    int v76 = v61 + 20995 * v72;
    int v77 = v74 + 7373 * v70;
    int v78 = v61 - 4926 * v70;
    int v79 = v74 - 4176 * v72;
    int v80 = v76 + v67;
    LODWORD(v61) = v67 - v76;
    int v81 = v77 + v71;
    int v82 = v71 - v77;
    int v83 = v78 + v75;
    uint64_t result = (v75 - v78);
    int v85 = 11086 * (v69 + v62);
    int v86 = 10217 * (v64 + v62);
    int v87 = 8956 * (v73 + v62);
    int v88 = v79 + v68;
    int v89 = 7350 * (v62 - v73);
    int v90 = 5461 * (v64 + v62);
    int v91 = 3363 * (v62 - v69);
    int v92 = v68 - v79;
    int v93 = v85 - 18730 * v62 + v86 + v87;
    int v94 = v91 - 15038 * v62 + v90 + v89;
    int v95 = 1136 * (v64 + v69);
    int v96 = v95 - 9222 * v64;
    int v97 = v85 + 589 * v69 + v95 - 5461 * (v73 + v69);
    int v98 = v96 + v86 - 11086 * (v73 + v64);
    int v99 = -5461 * (v73 + v69) + 8728 * v73 + v87 - 11086 * (v73 + v64);
    uint64_t v100 = (unsigned char *)(*(void *)(a4 + v59) + a5);
    *uint64_t v100 = *(unsigned char *)(v60 + (((unint64_t)(v93 + v80) >> 18) & 0x3FF));
    v100[15] = *(unsigned char *)(v60 + (((unint64_t)(v80 - v93) >> 18) & 0x3FF));
    v100[1] = *(unsigned char *)(v60 + (((unint64_t)(v97 + v81) >> 18) & 0x3FF));
    int v101 = -10217 * (v73 + v69);
    int v102 = v101 + 25733 * v73;
    int v103 = 3363 * (v73 - v64);
    int v104 = v102 + v89 + v103;
    v100[14] = *(unsigned char *)(v60 + (((unint64_t)(v81 - v97) >> 18) & 0x3FF));
    v100[2] = *(unsigned char *)(v60 + (((unint64_t)(v98 + v83) >> 18) & 0x3FF));
    v100[13] = *(unsigned char *)(v60 + (((unint64_t)(v83 - v98) >> 18) & 0x3FF));
    v100[3] = *(unsigned char *)(v60 + (((unint64_t)(v99 + v88) >> 18) & 0x3FF));
    v100[12] = *(unsigned char *)(v60 + (((unint64_t)(v88 - v99) >> 18) & 0x3FF));
    v100[4] = *(unsigned char *)(v60 + (((unint64_t)(v104 + v92) >> 18) & 0x3FF));
    int v105 = v91 + 16154 * v69;
    int v106 = 11529 * (v64 - v69);
    int v107 = v106 - 6278 * v64 + v90 + v103;
    v100[11] = *(unsigned char *)(v60 + (((unint64_t)(v92 - v104) >> 18) & 0x3FF));
    v100[5] = *(unsigned char *)(v60 + (((unint64_t)(v107 + result) >> 18) & 0x3FF));
    int v108 = v105 + v106 + v101;
    v100[10] = *(unsigned char *)(v60 + (((unint64_t)(result - v107) >> 18) & 0x3FF));
    v100[6] = *(unsigned char *)(v60 + (((unint64_t)(v108 + v82) >> 18) & 0x3FF));
    v100[9] = *(unsigned char *)(v60 + (((unint64_t)(v82 - v108) >> 18) & 0x3FF));
    v100[7] = *(unsigned char *)(v60 + (((unint64_t)(v94 + v61) >> 18) & 0x3FF));
    v100[8] = *(unsigned char *)(v60 + (((unint64_t)(v61 - v94) >> 18) & 0x3FF));
    v59 += 8;
  }
  while (v59 != 128);
  return result;
}

uint64_t jpeg_idct_16x8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v6 = (__int16 *)(a3 + 64);
  uint64_t v7 = *(void *)(a2 + 88) + 128;
  uint64_t v91 = *(void *)(a1 + 440);
  for (unsigned int i = 9; i > 1; --i)
  {
    uint64_t v9 = (_DWORD *)(v7 + v5);
    unsigned __int16 v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10) {
      goto LABEL_9;
    }
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      unsigned __int16 v10 = 0;
LABEL_9:
      uint64_t v11 = *v9 * *v6;
      uint64_t v12 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      uint64_t v13 = v12 + (v11 << 13);
      uint64_t v14 = v12 - (v11 << 13);
      uint64_t v15 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      uint64_t v16 = (int)v9[16] * (uint64_t)v6[16];
      uint64_t v17 = 4433 * (v15 + v16);
      uint64_t v18 = v17 + 6270 * v15;
      uint64_t v19 = v17 - 15137 * v16;
      uint64_t v20 = v18 + v13;
      uint64_t v21 = v13 - v18;
      uint64_t v22 = v19 + v14;
      uint64_t v23 = v14 - v19;
      uint64_t v24 = (int)v9[24] * (uint64_t)v6[24];
      uint64_t v25 = (int)v9[8] * (uint64_t)v6[8];
      uint64_t v26 = (int)*(v9 - 8) * (uint64_t)*(v6 - 8);
      uint64_t v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      uint64_t v28 = 9633 * (v25 + v27 + v24 + v26);
      uint64_t v29 = v28 - 16069 * (v24 + v26);
      uint64_t v30 = v28 - 3196 * (v25 + v27);
      uint64_t v31 = -7373 * (v24 + v27);
      uint64_t v32 = v31 + 2446 * v24 + v29;
      uint64_t v33 = v31 + 12299 * v27 + v30;
      uint64_t v34 = -20995 * (v25 + v26);
      uint64_t v35 = v34 + 16819 * v25 + v30;
      uint64_t v36 = v34 + 25172 * v26 + v29;
      uint64_t v37 = &v94[v5];
      _DWORD *v37 = (unint64_t)(v33 + v20) >> 11;
      v37[56] = (unint64_t)(v20 - v33) >> 11;
      v37[8] = (unint64_t)(v36 + v22) >> 11;
      v37[48] = (unint64_t)(v22 - v36) >> 11;
      v37[16] = (unint64_t)(v35 + v23) >> 11;
      v37[40] = (unint64_t)(v23 - v35) >> 11;
      v37[24] = (unint64_t)(v32 + v21) >> 11;
      unint64_t v38 = (unint64_t)(v21 - v32) >> 11;
      uint64_t v39 = 32;
      goto LABEL_10;
    }
    LODWORD(v38) = 4 * *(v6 - 32) * *(v9 - 32);
    uint64_t v40 = &v94[v5];
    *uint64_t v40 = v38;
    v40[8] = v38;
    v40[16] = v38;
    v40[24] = v38;
    v40[32] = v38;
    v40[40] = v38;
    v40[48] = v38;
    uint64_t v39 = 56;
LABEL_10:
    *(_DWORD *)&v94[4 * v39 + v5] = v38;
    v5 += 4;
    ++v6;
  }
  uint64_t v41 = 0;
  uint64_t v42 = v91 - 384;
  do
  {
    uint64_t v43 = &v94[4 * v41];
    int v44 = v43[1];
    int v45 = v43[4];
    int v46 = v43[5];
    int v47 = (*v43 << 13) + 134348800;
    int v48 = 10703 * v45;
    v45 *= 4433;
    int v49 = v47 + v48;
    int v50 = v47 - v48;
    int v52 = v43[2];
    int v51 = v43[3];
    int v53 = v47 + v45;
    int v54 = v43[6];
    int v55 = v43[7];
    int v56 = 2260 * (v52 - v54);
    int v57 = v47 - v45;
    LODWORD(v43) = 11363 * (v52 - v54);
    int v58 = v43 + 20995 * v54;
    int v59 = v56 + 7373 * v52;
    int v60 = v43 - 4926 * v52;
    int v61 = v56 - 4176 * v54;
    int v62 = v58 + v49;
    LODWORD(v43) = v49 - v58;
    int v63 = v59 + v53;
    int v64 = v53 - v59;
    int v65 = v60 + v57;
    uint64_t result = (v57 - v60);
    int v67 = 11086 * (v51 + v44);
    int v68 = 10217 * (v46 + v44);
    int v69 = 8956 * (v55 + v44);
    int v70 = v61 + v50;
    int v71 = 7350 * (v44 - v55);
    int v72 = 5461 * (v46 + v44);
    int v73 = 3363 * (v44 - v51);
    int v74 = v50 - v61;
    int v75 = v67 - 18730 * v44 + v68 + v69;
    int v76 = v73 - 15038 * v44 + v72 + v71;
    int v77 = 1136 * (v46 + v51);
    int v78 = v77 - 9222 * v46;
    int v79 = v67 + 589 * v51 + v77 - 5461 * (v55 + v51);
    int v80 = v78 + v68 - 11086 * (v55 + v46);
    int v81 = -5461 * (v55 + v51) + 8728 * v55 + v69 - 11086 * (v55 + v46);
    int v82 = (unsigned char *)(*(void *)(a4 + v41) + a5);
    unsigned char *v82 = *(unsigned char *)(v42 + (((unint64_t)(v75 + v62) >> 18) & 0x3FF));
    v82[15] = *(unsigned char *)(v42 + (((unint64_t)(v62 - v75) >> 18) & 0x3FF));
    v82[1] = *(unsigned char *)(v42 + (((unint64_t)(v79 + v63) >> 18) & 0x3FF));
    int v83 = -10217 * (v55 + v51);
    int v84 = v83 + 25733 * v55;
    int v85 = 3363 * (v55 - v46);
    int v86 = v84 + v71 + v85;
    v82[14] = *(unsigned char *)(v42 + (((unint64_t)(v63 - v79) >> 18) & 0x3FF));
    v82[2] = *(unsigned char *)(v42 + (((unint64_t)(v80 + v65) >> 18) & 0x3FF));
    v82[13] = *(unsigned char *)(v42 + (((unint64_t)(v65 - v80) >> 18) & 0x3FF));
    void v82[3] = *(unsigned char *)(v42 + (((unint64_t)(v81 + v70) >> 18) & 0x3FF));
    v82[12] = *(unsigned char *)(v42 + (((unint64_t)(v70 - v81) >> 18) & 0x3FF));
    v82[4] = *(unsigned char *)(v42 + (((unint64_t)(v86 + v74) >> 18) & 0x3FF));
    int v87 = v73 + 16154 * v51;
    int v88 = 11529 * (v46 - v51);
    int v89 = v88 - 6278 * v46 + v72 + v85;
    v82[11] = *(unsigned char *)(v42 + (((unint64_t)(v74 - v86) >> 18) & 0x3FF));
    v82[5] = *(unsigned char *)(v42 + (((unint64_t)(v89 + result) >> 18) & 0x3FF));
    int v90 = v87 + v88 + v83;
    v82[10] = *(unsigned char *)(v42 + (((unint64_t)(result - v89) >> 18) & 0x3FF));
    v82[6] = *(unsigned char *)(v42 + (((unint64_t)(v90 + v64) >> 18) & 0x3FF));
    v82[9] = *(unsigned char *)(v42 + (((unint64_t)(v64 - v90) >> 18) & 0x3FF));
    v82[7] = *(unsigned char *)(v42 + (((unint64_t)(v76 + v43) >> 18) & 0x3FF));
    v82[8] = *(unsigned char *)(v42 + (((unint64_t)(v43 - v76) >> 18) & 0x3FF));
    v41 += 8;
  }
  while (v41 != 64);
  return result;
}

uint64_t jpeg_idct_14x7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v69 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = &v72[v5];
    uint64_t v8 = (_DWORD *)(v6 + 4 * v5);
    uint64_t v9 = (__int16 *)(a3 + 2 * v5);
    uint64_t v10 = ((uint64_t)(*v8 * *v9) << 13) | 0x400;
    uint64_t v11 = (int)v8[16] * (uint64_t)v9[16];
    uint64_t v12 = (int)v8[32] * (uint64_t)v9[32];
    uint64_t v13 = (int)v8[48] * (uint64_t)v9[48];
    uint64_t v14 = 7223 * (v12 - v13);
    uint64_t v15 = 2578 * (v11 - v12);
    uint64_t v16 = v10 - 15083 * v12 + v15 + v14;
    uint64_t v17 = v10 + 10438 * (v11 + v13);
    uint64_t v18 = v14 - 637 * v13 + v17;
    uint64_t v19 = v15 - 20239 * v11 + v17;
    unint64_t v20 = v10 + 11585 * (v12 - (v11 + v13));
    uint64_t v21 = (int)v8[8] * (uint64_t)v9[8];
    uint64_t v22 = (int)v8[24] * (uint64_t)v9[24];
    uint64_t v23 = (int)v8[40] * (uint64_t)v9[40];
    uint64_t v24 = 7663 * (v21 + v22);
    uint64_t v25 = 1395 * (v21 - v22);
    uint64_t v26 = v24 - v25;
    uint64_t v27 = v24 + v25 - 11295 * (v22 + v23);
    uint64_t v28 = 5027 * (v21 + v23);
    uint64_t v29 = v28 + v26;
    uint64_t v30 = v28 + 15326 * v23 - 11295 * (v22 + v23);
    *uint64_t v7 = (unint64_t)(v29 + v18) >> 11;
    v7[48] = (unint64_t)(v18 - v29) >> 11;
    v7[8] = (unint64_t)(v27 + v16) >> 11;
    v7[40] = (unint64_t)(v16 - v27) >> 11;
    v7[16] = (unint64_t)(v30 + v19) >> 11;
    v7[32] = (unint64_t)(v19 - v30) >> 11;
    v7[24] = v20 >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v31 = 0;
  uint64_t v32 = v69 - 384;
  do
  {
    uint64_t v33 = &v72[v31];
    int v34 = v33[1];
    int v35 = (*v33 << 13) + 134348800;
    int v36 = v33[4];
    int v37 = v33[5];
    int v38 = v35 + 10438 * v36;
    int v39 = v35 + 2578 * v36;
    int v40 = v35 - 7223 * v36;
    int v42 = v33[2];
    int v41 = v33[3];
    int v43 = v33[6];
    int v44 = v33[7];
    int v45 = v35 - 11586 * v36;
    LODWORD(v33) = 9058 * (v43 + v42);
    int v46 = v33 + 2237 * v42;
    int v47 = v33 - 14084 * v43;
    LODWORD(v33) = 5027 * v42 - 11295 * v43;
    int v48 = v46 + v38;
    int v49 = v38 - v46;
    int v50 = v33 + v40;
    LODWORD(v33) = v40 - v33;
    int v51 = v47 + v39;
    int v52 = 10935 * (v41 + v34);
    int v53 = 9810 * (v37 + v34);
    int v54 = v52 - 9232 * v34 + v53 + (v44 << 13);
    int v55 = v39 - v47;
    int v56 = -1297 * (v37 + v41) - (v44 << 13);
    int v57 = v52 - 3474 * v41 + v56;
    int v58 = v53 - 19447 * v37 + v56;
    int v59 = -13850 * v37 + (v44 << 13);
    int v60 = 3826 * (v34 - v41) - (v44 << 13);
    int v61 = v34 - v41 - v37 + v44;
    int v62 = (unsigned char *)(*(void *)(a4 + v31) + a5);
    unsigned char *v62 = *(unsigned char *)(v32 + (((unint64_t)(v54 + v48) >> 18) & 0x3FF));
    v62[13] = *(unsigned char *)(v32 + (((unint64_t)(v48 - v54) >> 18) & 0x3FF));
    v62[1] = *(unsigned char *)(v32 + (((unint64_t)(v57 + v51) >> 18) & 0x3FF));
    v62[12] = *(unsigned char *)(v32 + (((unint64_t)(v51 - v57) >> 18) & 0x3FF));
    v62[2] = *(unsigned char *)(v32 + (((unint64_t)(v58 + v50) >> 18) & 0x3FF));
    int v63 = 6164 * (v37 + v34);
    int v64 = 11512 * (v37 - v41);
    LOBYTE(v48) = *(unsigned char *)(v32 + (((unint64_t)(v50 - v58) >> 18) & 0x3FF));
    uint64_t result = 4294958603;
    int v66 = v63 - 8693 * v34;
    v62[11] = v48;
    int v67 = v59 + v64 + v63;
    v62[3] = *(unsigned char *)(v32 + (((unint64_t)(v45 + (v61 << 13)) >> 18) & 0x3FF));
    v62[10] = *(unsigned char *)(v32 + (((unint64_t)(v45 - (v61 << 13)) >> 18) & 0x3FF));
    v62[4] = *(unsigned char *)(v32 + (((unint64_t)(v67 + v33) >> 18) & 0x3FF));
    int v68 = v64 + 5529 * v41 + v60;
    v62[9] = *(unsigned char *)(v32 + (((unint64_t)(v33 - v67) >> 18) & 0x3FF));
    v62[5] = *(unsigned char *)(v32 + (((unint64_t)(v68 + v55) >> 18) & 0x3FF));
    v62[8] = *(unsigned char *)(v32 + (((unint64_t)(v55 - v68) >> 18) & 0x3FF));
    v62[6] = *(unsigned char *)(v32 + (((unint64_t)(v66 + v60 + v49) >> 18) & 0x3FF));
    v62[7] = *(unsigned char *)(v32 + (((unint64_t)(v49 - (v66 + v60)) >> 18) & 0x3FF));
    v31 += 8;
  }
  while (v31 != 56);
  return result;
}

uint64_t jpeg_idct_12x6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v59[v5];
    uint64_t v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[32] * (uint64_t)v10[32];
    uint64_t v13 = v11 + 5793 * v12;
    unint64_t v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    uint64_t v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    uint64_t v16 = v15 + v13;
    uint64_t v17 = v13 - v15;
    uint64_t v18 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v19 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v20 = (int)v9[40] * (uint64_t)v10[40];
    uint64_t v21 = 2998 * (v18 + v20);
    uint64_t v22 = v21 + ((v18 + v19) << 13);
    uint64_t v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = v18 - (v19 + v20);
    _DWORD *v8 = (unint64_t)(v22 + v16) >> 11;
    v8[40] = (unint64_t)(v16 - v22) >> 11;
    unsigned char v8[8] = v14 + 4 * v18;
    v8[32] = v14 - 4 * v18;
    v8[16] = (unint64_t)(v23 + v17) >> 11;
    v8[24] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v24 = 0;
  uint64_t v25 = v6 - 384;
  do
  {
    uint64_t v26 = &v59[v24];
    int v27 = v26[1];
    int v28 = (*v26 << 13) + 134348800;
    int v29 = v26[5];
    int v30 = 10033 * v26[4];
    int v31 = v28 + v30;
    int v33 = v26[2];
    int v32 = v26[3];
    int v34 = v26[6];
    int v35 = v26[7];
    int v36 = v28 - v30;
    int v37 = v28 + ((v33 - v34) << 13);
    int v38 = v28 - ((v33 - v34) << 13);
    int v39 = 11190 * v33 + (v34 << 13);
    int v40 = v39 + v31;
    LODWORD(v26) = v31 - v39;
    int v41 = 2998 * v33 - (v34 << 13);
    int v42 = 10703 * v32;
    int v43 = -4433 * v32;
    int v44 = v41 + v36;
    int v45 = 7053 * (v29 + v27 + v35);
    int v46 = v45 + 2139 * (v29 + v27);
    int v47 = v36 - v41;
    int v48 = 10703 * v32 + 2295 * v27 + v46;
    int v49 = -8565 * (v35 + v29);
    int v50 = -4433 * v32 - 12112 * v29 - 8565 * (v35 + v29) + v46;
    int v51 = v32 - v29;
    int v52 = (unsigned char *)(*(void *)(a4 + v24) + a5);
    unsigned char *v52 = *(unsigned char *)(v25 + (((unint64_t)(v48 + v40) >> 18) & 0x3FF));
    unint64_t v53 = (v40 - v48);
    uint64_t result = (4433 * (v27 - v35 + v51));
    int v55 = result + 6270 * (v27 - v35);
    v52[11] = *(unsigned char *)(v25 + ((v53 >> 18) & 0x3FF));
    v52[1] = *(unsigned char *)(v25 + (((unint64_t)(v55 + v37) >> 18) & 0x3FF));
    int v56 = 12998 * v35 - v42 + v45 + v49;
    v52[10] = *(unsigned char *)(v25 + (((unint64_t)(v37 - v55) >> 18) & 0x3FF));
    v52[2] = *(unsigned char *)(v25 + (((unint64_t)(v50 + v44) >> 18) & 0x3FF));
    v52[9] = *(unsigned char *)(v25 + (((unint64_t)(v44 - v50) >> 18) & 0x3FF));
    int v57 = v43 - 5540 * v27 - 16244 * v35 + v45;
    v52[3] = *(unsigned char *)(v25 + (((unint64_t)(v56 + v47) >> 18) & 0x3FF));
    int v58 = result - 15137 * v51;
    v52[8] = *(unsigned char *)(v25 + (((unint64_t)(v47 - v56) >> 18) & 0x3FF));
    v52[4] = *(unsigned char *)(v25 + (((unint64_t)(v58 + v38) >> 18) & 0x3FF));
    v52[7] = *(unsigned char *)(v25 + (((unint64_t)(v38 - v58) >> 18) & 0x3FF));
    v52[5] = *(unsigned char *)(v25 + (((unint64_t)(v57 + v26) >> 18) & 0x3FF));
    v52[6] = *(unsigned char *)(v25 + (((unint64_t)(v26 - v57) >> 18) & 0x3FF));
    v24 += 8;
  }
  while (v24 != 48);
  return result;
}

uint64_t jpeg_idct_10x5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v56[v5];
    uint64_t v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[16] * (uint64_t)v10[16];
    int v13 = v9[32];
    uint64_t v14 = 6476 * (v12 + v13 * (uint64_t)v10[32]);
    uint64_t v15 = v12 - v13 * (uint64_t)v10[32];
    uint64_t v16 = v11 + 2896 * v15;
    uint64_t v17 = v16 + v14;
    uint64_t v18 = v16 - v14;
    unint64_t v19 = v11 + 0x7FFFFFFD2C0 * v15;
    uint64_t v20 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v21 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v22 = 6810 * (v20 + v21);
    uint64_t v23 = v22 + 4209 * v20;
    uint64_t v24 = v22 - 17828 * v21;
    _DWORD *v8 = (unint64_t)(v23 + v17) >> 11;
    v8[32] = (unint64_t)(v17 - v23) >> 11;
    unsigned char v8[8] = (unint64_t)(v24 + v18) >> 11;
    v8[24] = (unint64_t)(v18 - v24) >> 11;
    v8[16] = v19 >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v25 = 0;
  uint64_t v26 = v6 - 384;
  uint64_t result = 2531;
  do
  {
    int v28 = &v56[v25];
    int v29 = v28[1];
    int v30 = v28[4];
    int v31 = v28[5];
    int v32 = (*v28 << 13) + 134348800;
    int v33 = v32 + 9373 * v30;
    int v34 = v32 - 3580 * v30;
    int v36 = v28[2];
    int v35 = v28[3];
    int v37 = v32 - 11586 * v30;
    int v39 = v28[6];
    int v38 = v28[7];
    LODWORD(v28) = 6810 * (v39 + v36);
    int v40 = v28 + 4209 * v36;
    int v41 = v28 - 17828 * v39;
    int v42 = v40 + v33;
    LODWORD(v28) = v33 - v40;
    int v43 = v41 + v34;
    int v44 = v38 + v35;
    int v45 = v35 - v38;
    int v46 = v34 - v41;
    int v47 = 2531 * v45 + (v31 << 13);
    int v48 = 7791 * v44 + 11443 * v29 + v47;
    int v49 = (unsigned char *)(*(void *)(a4 + v25) + a5);
    int v50 = 1812 * v29 - 7791 * v44 + v47;
    int v51 = 4815 * v44;
    unint64_t v52 = (v48 + v42);
    unint64_t v53 = (v42 - v48);
    int v54 = -6627 * v45 + (v31 << 13);
    unsigned char *v49 = *(unsigned char *)(v26 + ((v52 >> 18) & 0x3FF));
    LODWORD(v52) = 10323 * v29 - (v51 + v54);
    v49[9] = *(unsigned char *)(v26 + ((v53 >> 18) & 0x3FF));
    int v55 = v29 - v31 - v45;
    v49[1] = *(unsigned char *)(v26 + (((unint64_t)(v52 + v43) >> 18) & 0x3FF));
    v49[8] = *(unsigned char *)(v26 + (((unint64_t)(v43 - v52) >> 18) & 0x3FF));
    v49[2] = *(unsigned char *)(v26 + (((unint64_t)(v37 + (v55 << 13)) >> 18) & 0x3FF));
    LODWORD(v53) = 5260 * v29 - v51 + v54;
    v49[7] = *(unsigned char *)(v26 + (((unint64_t)(v37 - (v55 << 13)) >> 18) & 0x3FF));
    v49[3] = *(unsigned char *)(v26 + (((unint64_t)(v53 + v46) >> 18) & 0x3FF));
    v49[6] = *(unsigned char *)(v26 + (((unint64_t)(v46 - v53) >> 18) & 0x3FF));
    v49[4] = *(unsigned char *)(v26 + (((unint64_t)(v50 + v28) >> 18) & 0x3FF));
    v49[5] = *(unsigned char *)(v26 + (((unint64_t)(v28 - v50) >> 18) & 0x3FF));
    v25 += 8;
  }
  while (v25 != 40);
  return result;
}

uint64_t jpeg_idct_8x4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v56[v5];
    uint64_t v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    int v11 = *v9 * *v10;
    int v12 = v9[16] * v10[16];
    int v13 = v12 + v11;
    int v14 = 4 * (v12 + v11);
    int v15 = v11 - v12;
    uint64_t v16 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v17 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v18 = 4433 * (v16 + v17) + 1024;
    unint64_t v19 = (unint64_t)(v18 + 6270 * v16) >> 11;
    unint64_t v20 = (unint64_t)(v18 - 15137 * v17) >> 11;
    _DWORD *v8 = v19 + 4 * v13;
    v8[24] = v14 - v19;
    unsigned char v8[8] = v20 + 4 * v15;
    v8[16] = 4 * v15 - v20;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v21 = 0;
  uint64_t v22 = v6 - 384;
  uint64_t result = 4294959923;
  do
  {
    uint64_t v24 = &v56[v21];
    uint64_t v25 = (unsigned char *)(*(void *)(a4 + v21) + a5);
    int v26 = v24[1];
    int v27 = *v24 + 16400;
    int v28 = v24[4];
    int v29 = v24[5];
    int v30 = v27 + v28;
    int v31 = v27 - v28;
    int v32 = v24[6];
    int v33 = v24[7];
    int v34 = v30 << 13;
    int v35 = v24[2];
    LODWORD(v24) = v24[3];
    int v36 = 4433 * (v32 + v35);
    int v37 = v36 + 6270 * v35;
    int v38 = v36 - 15137 * v32;
    int v39 = v24 + v33;
    int v40 = 9633 * (v26 + v29 + v24 + v33);
    int v41 = v37 + (v30 << 13);
    int v42 = v40 - 3196 * (v26 + v29);
    int v43 = -7373 * (v26 + v33);
    int v44 = v43 + 12299 * v26 + v42;
    int v45 = v43 + 2446 * v33;
    int v46 = -20995 * (v24 + v29);
    int v47 = v46 + 16819 * v29;
    LODWORD(v24) = v46 + 25172 * v24;
    unint64_t v48 = (v44 + v41);
    int v49 = v40 - 16069 * v39;
    unint64_t v50 = (v41 - v44);
    int v51 = v31 << 13;
    *uint64_t v25 = *(unsigned char *)(v22 + ((v48 >> 18) & 0x3FF));
    int v52 = v38 + (v31 << 13);
    LODWORD(v24) = v24 + v49;
    int v53 = v51 - v38;
    v25[7] = *(unsigned char *)(v22 + ((v50 >> 18) & 0x3FF));
    int v54 = v47 + v42;
    v25[1] = *(unsigned char *)(v22 + (((unint64_t)(v24 + v52) >> 18) & 0x3FF));
    v25[6] = *(unsigned char *)(v22 + (((unint64_t)(v52 - v24) >> 18) & 0x3FF));
    int v55 = v45 + v49;
    v25[2] = *(unsigned char *)(v22 + (((unint64_t)(v54 + v53) >> 18) & 0x3FF));
    v25[5] = *(unsigned char *)(v22 + (((unint64_t)(v53 - v54) >> 18) & 0x3FF));
    void v25[3] = *(unsigned char *)(v22 + (((unint64_t)(v55 + v34 - v37) >> 18) & 0x3FF));
    v25[4] = *(unsigned char *)(v22 + (((unint64_t)(v34 - v37 - v55) >> 18) & 0x3FF));
    v21 += 8;
  }
  while (v21 != 32);
  return result;
}

uint64_t jpeg_idct_6x3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v34[4 * v5];
    uint64_t v9 = (_DWORD *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[16] * (uint64_t)v10[16];
    uint64_t v13 = v11 + 5793 * v12;
    uint64_t v14 = 10033 * (int)v9[8] * (uint64_t)v10[8];
    _DWORD *v8 = (unint64_t)(v14 + v13) >> 11;
    v8[12] = (unint64_t)(v13 - v14) >> 11;
    v8[6] = (unint64_t)(v11 + 0x7FFFFFFD2BELL * v12) >> 11;
    ++v5;
  }
  while (v5 != 6);
  uint64_t v15 = 0;
  uint64_t v16 = v6 - 384;
  uint64_t v17 = a5;
  do
  {
    uint64_t v18 = *a4++;
    unint64_t v19 = (unsigned char *)(v18 + v17);
    int v20 = *(_DWORD *)&v34[v15 + 4];
    int v21 = *(_DWORD *)&v34[v15 + 16];
    int v22 = *(_DWORD *)&v34[v15 + 20];
    int v23 = (*(_DWORD *)&v34[v15] << 13) + 134348800;
    int v24 = v23 + 5793 * v21;
    int v25 = *(_DWORD *)&v34[v15 + 12];
    int v26 = 10033 * *(_DWORD *)&v34[v15 + 8];
    int v27 = 2998 * (v22 + v20);
    int v28 = v27 + ((v25 + v20) << 13);
    int v29 = v22 - v25;
    int v30 = v20 - (v25 + v22);
    int v31 = v23 - 11586 * v21;
    *unint64_t v19 = *(unsigned char *)(v16 + (((unint64_t)(v28 + v24 + v26) >> 18) & 0x3FF));
    int v32 = v27 + (v29 << 13);
    void v19[5] = *(unsigned char *)(v16 + (((unint64_t)(v24 + v26 - v28) >> 18) & 0x3FF));
    v19[1] = *(unsigned char *)(v16 + (((unint64_t)(v31 + (v30 << 13)) >> 18) & 0x3FF));
    v19[4] = *(unsigned char *)(v16 + (((unint64_t)(v31 - (v30 << 13)) >> 18) & 0x3FF));
    std::string v19[2] = *(unsigned char *)(v16 + (((unint64_t)(v32 + v24 - v26) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v16 + (((unint64_t)(v24 - v26 - v32) >> 18) & 0x3FF));
    v19[3] = result;
    v15 += 24;
  }
  while (v15 != 72);
  return result;
}

uint64_t jpeg_idct_4x2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  v28[8] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v28[v5];
    uint64_t v9 = (int *)(v7 + 4 * v5);
    uint64_t v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = *v9 * (uint64_t)*v10;
    LODWORD(v1CoreML::Specification::Normalizer::New(this, 0) = v10[8];
    LODWORD(v9) = v9[8];
    void *v8 = v11 + (int)v9 * (uint64_t)(int)v10;
    v8[4] = v11 - (int)v9 * (uint64_t)(int)v10;
    ++v5;
  }
  while (v5 != 4);
  uint64_t v12 = 0;
  uint64_t v13 = v6 - 384;
  uint64_t v14 = v28;
  uint64_t v15 = 1;
  uint64_t v16 = a5;
  do
  {
    uint64_t v17 = (unsigned char *)(*(void *)(a4 + 8 * v12) + v16);
    int v18 = *v14 + 4100;
    int v19 = v14[4];
    int v20 = v14[2];
    int v21 = v14[6];
    int v22 = 4433 * (v21 + v20);
    int v23 = v22 + 6270 * v20;
    int v24 = v22 - 15137 * v21;
    *uint64_t v17 = *(unsigned char *)(v13 + (((unint64_t)(v23 + ((v18 + v19) << 13)) >> 16) & 0x3FF));
    unint64_t v25 = ((unint64_t)(((v18 + v19) << 13) - v23) >> 16) & 0x3FF;
    int v26 = v18 - v19;
    void v17[3] = *(unsigned char *)(v13 + v25);
    v17[1] = *(unsigned char *)(v13 + (((unint64_t)(v24 + (v26 << 13)) >> 16) & 0x3FF));
    uint64_t result = v15;
    v17[2] = *(unsigned char *)(v13 + (((unint64_t)((v26 << 13) - v24) >> 16) & 0x3FF));
    v14 += 8;
    uint64_t v12 = 1;
    uint64_t v15 = 0;
  }
  while ((result & 1) != 0);
  return result;
}

uint64_t jpeg_idct_2x1(uint64_t result, uint64_t a2, unsigned __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(result + 440) - 384;
  uint64_t v6 = *(_DWORD **)(a2 + 88);
  uint64_t v7 = (unsigned char *)(*a4 + a5);
  int v8 = *v6 * *a3 + 4100;
  LODWORD(v6) = v6[1] * a3[1];
  *uint64_t v7 = *(unsigned char *)(v5 + (((unint64_t)(v6 + v8) >> 3) & 0x3FF));
  v7[1] = *(unsigned char *)(v5 + (((unint64_t)(v8 - v6) >> 3) & 0x3FF));
  return result;
}

uint64_t jpeg_idct_8x16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v94 = *(void *)(a1 + 440);
  uint64_t v97 = *(void *)(a2 + 88);
  do
  {
    uint64_t v6 = (_DWORD *)(v97 + 4 * v5);
    uint64_t v7 = (__int16 *)(a3 + 2 * v5);
    uint64_t v8 = (int)v6[32] * (uint64_t)v7[32];
    uint64_t v9 = 10703 * v8;
    uint64_t v10 = ((uint64_t)(*v6 * *v7) << 13) | 0x400;
    v8 *= 4433;
    uint64_t v11 = v9 + v10;
    uint64_t v12 = v10 - v9;
    uint64_t v13 = v8 + v10;
    uint64_t v14 = v10 - v8;
    uint64_t v15 = (int)v6[16] * (uint64_t)v7[16];
    uint64_t v16 = (int)v6[48] * (uint64_t)v7[48];
    uint64_t v17 = 2260 * (v15 - v16);
    uint64_t v18 = 11363 * (v15 - v16);
    uint64_t v19 = v18 + 20995 * v16;
    uint64_t v20 = v17 + 7373 * v15;
    uint64_t v21 = v18 - 4926 * v15;
    uint64_t v22 = v17 - 4176 * v16;
    uint64_t v23 = v19 + v11;
    uint64_t v99 = v11 - v19;
    uint64_t v24 = v20 + v13;
    uint64_t v25 = v13 - v20;
    uint64_t v26 = v21 + v14;
    uint64_t v27 = v14 - v21;
    uint64_t v28 = v22 + v12;
    uint64_t v29 = v12 - v22;
    uint64_t v30 = (int)v6[8] * (uint64_t)v7[8];
    uint64_t v31 = (int)v6[24] * (uint64_t)v7[24];
    LODWORD(v22) = v7[40];
    int v32 = v6[40];
    int v33 = v7[56];
    int v34 = v6[56];
    uint64_t v35 = v30 + v32 * (uint64_t)v7[40];
    uint64_t v36 = 11086 * (v30 + v31);
    uint64_t v37 = 10217 * v35;
    uint64_t v38 = 8956 * (v30 + v34 * (uint64_t)v33);
    uint64_t v39 = 7350 * (v30 - v34 * (uint64_t)v33);
    uint64_t v40 = 5461 * v35;
    uint64_t v41 = 3363 * (v30 - v31);
    uint64_t v42 = v36 - 18730 * v30 + 10217 * v35 + v38;
    uint64_t v43 = v41 - 15038 * v30 + 5461 * v35 + v39;
    uint64_t v44 = 1136 * (v31 + v32 * (uint64_t)(int)v22);
    uint64_t v45 = v31 + v34 * (uint64_t)v33;
    uint64_t v46 = -5461 * v45;
    uint64_t v47 = v36 + 589 * v31 + v44 - 5461 * v45;
    uint64_t v48 = v32 * (uint64_t)(int)v22;
    uint64_t v49 = 11529 * (v48 - v31);
    v45 *= -10217;
    uint64_t v50 = v41 + 16154 * v31 + v49 + v45;
    uint64_t v51 = v44 - 9222 * v48 + v37 - 11086 * (v48 + v34 * (uint64_t)v33);
    uint64_t v52 = v38 - 11086 * (v48 + v34 * (uint64_t)v33);
    uint64_t v53 = v34 * (uint64_t)v33;
    uint64_t v54 = v46 + 8728 * v53 + v52;
    uint64_t v55 = 3363 * (v53 - v48);
    uint64_t v56 = v45 + 25733 * v53 + v39 + v55;
    uint64_t v57 = &v100[v5];
    uint64_t v58 = v49 - 6278 * v48 + v40 + v55;
    _DWORD *v57 = (unint64_t)(v42 + v23) >> 11;
    v57[120] = (unint64_t)(v23 - v42) >> 11;
    v57[8] = (unint64_t)(v47 + v24) >> 11;
    v57[112] = (unint64_t)(v24 - v47) >> 11;
    v57[16] = (unint64_t)(v51 + v26) >> 11;
    v57[104] = (unint64_t)(v26 - v51) >> 11;
    v57[24] = (unint64_t)(v54 + v28) >> 11;
    v57[96] = (unint64_t)(v28 - v54) >> 11;
    v57[32] = (unint64_t)(v56 + v29) >> 11;
    v57[88] = (unint64_t)(v29 - v56) >> 11;
    v57[40] = (unint64_t)(v58 + v27) >> 11;
    v57[80] = (unint64_t)(v27 - v58) >> 11;
    v57[48] = (unint64_t)(v50 + v25) >> 11;
    v57[72] = (unint64_t)(v25 - v50) >> 11;
    v57[56] = (unint64_t)(v43 + v99) >> 11;
    v57[64] = (unint64_t)(v99 - v43) >> 11;
    ++v5;
  }
  while (v5 != 8);
  uint64_t v59 = 0;
  uint64_t v60 = v94 - 384;
  uint64_t result = 4294959923;
  do
  {
    int v62 = &v100[v59];
    int v63 = (unsigned char *)(*(void *)(a4 + v59) + a5);
    int v64 = v62[1];
    int v65 = *v62 + 16400;
    int v66 = v62[4];
    int v67 = v62[5];
    int v68 = v65 + v66;
    int v69 = v65 - v66;
    int v70 = v62[6];
    int v71 = v62[7];
    int v72 = v68 << 13;
    int v73 = v62[2];
    LODWORD(v62) = v62[3];
    int v74 = 4433 * (v70 + v73);
    int v75 = v74 + 6270 * v73;
    int v76 = v74 - 15137 * v70;
    int v77 = v62 + v71;
    int v78 = 9633 * (v64 + v67 + v62 + v71);
    int v79 = v75 + (v68 << 13);
    int v80 = v78 - 3196 * (v64 + v67);
    int v81 = -7373 * (v64 + v71);
    int v82 = v81 + 12299 * v64 + v80;
    int v83 = v81 + 2446 * v71;
    int v84 = -20995 * (v62 + v67);
    int v85 = v84 + 16819 * v67;
    LODWORD(v62) = v84 + 25172 * v62;
    unint64_t v86 = (v82 + v79);
    int v87 = v78 - 16069 * v77;
    unint64_t v88 = (v79 - v82);
    int v89 = v69 << 13;
    *int v63 = *(unsigned char *)(v60 + ((v86 >> 18) & 0x3FF));
    int v90 = v76 + (v69 << 13);
    LODWORD(v62) = v62 + v87;
    int v91 = v89 - v76;
    v63[7] = *(unsigned char *)(v60 + ((v88 >> 18) & 0x3FF));
    int v92 = v85 + v80;
    v63[1] = *(unsigned char *)(v60 + (((unint64_t)(v62 + v90) >> 18) & 0x3FF));
    v63[6] = *(unsigned char *)(v60 + (((unint64_t)(v90 - v62) >> 18) & 0x3FF));
    int v93 = v83 + v87;
    v63[2] = *(unsigned char *)(v60 + (((unint64_t)(v92 + v91) >> 18) & 0x3FF));
    v63[5] = *(unsigned char *)(v60 + (((unint64_t)(v91 - v92) >> 18) & 0x3FF));
    v63[3] = *(unsigned char *)(v60 + (((unint64_t)(v93 + v72 - v75) >> 18) & 0x3FF));
    v63[4] = *(unsigned char *)(v60 + (((unint64_t)(v72 - v75 - v93) >> 18) & 0x3FF));
    v59 += 8;
  }
  while (v59 != 128);
  return result;
}

uint64_t jpeg_idct_7x14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t v79 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    uint64_t v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v10 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v11 = v10 + 10438 * v9;
    uint64_t v12 = v10 + 2578 * v9;
    uint64_t v13 = v10 - 7223 * v9;
    uint64_t v14 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v15 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v16 = 9058 * (v14 + v15);
    uint64_t v17 = v16 + 2237 * v14;
    uint64_t v18 = v16 - 14084 * v15;
    uint64_t v19 = 5027 * v14 - 11295 * v15;
    uint64_t v20 = v17 + v11;
    uint64_t v21 = v11 - v17;
    uint64_t v22 = v18 + v12;
    uint64_t v23 = v12 - v18;
    uint64_t v24 = v19 + v13;
    uint64_t v25 = v13 - v19;
    uint64_t v26 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v27 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v28 = (int)v7[40] * (uint64_t)v8[40];
    uint64_t v29 = (int)v7[56] * (uint64_t)v8[56];
    uint64_t v30 = 10935 * (v26 + v27);
    uint64_t v31 = 9810 * (v26 + v28);
    uint64_t v32 = v30 - 9232 * v26 + v31;
    uint64_t v33 = -1297 * (v27 + v28) - (v29 << 13);
    uint64_t v34 = v30 - 3474 * v27 + v33;
    uint64_t v35 = v31 - 19447 * v28 + v33;
    uint64_t v36 = 6164 * (v26 + v28);
    uint64_t v37 = v26 - v27;
    uint64_t v38 = 11512 * (v28 - v27);
    uint64_t v39 = v38 - 13850 * v28 + v36;
    uint64_t v40 = v36 - 8693 * v26;
    uint64_t v41 = v38 + 5529 * v27;
    uint64_t v42 = 3826 * v37 - (v29 << 13);
    uint64_t v43 = v40 + v42;
    uint64_t v44 = v41 + v42;
    uint64_t v45 = &v81[4 * v5];
    uint64_t v46 = v32 + (v29 << 13);
    uint64_t v47 = v39 + (v29 << 13);
    LODWORD(v29) = v37 - v28 + v29;
    *uint64_t v45 = (unint64_t)(v46 + v20) >> 11;
    v45[91] = (unint64_t)(v20 - v46) >> 11;
    v45[7] = (unint64_t)(v34 + v22) >> 11;
    v45[84] = (unint64_t)(v22 - v34) >> 11;
    v45[14] = (unint64_t)(v35 + v24) >> 11;
    unint64_t v48 = (unint64_t)(v10 - 11586 * v9) >> 11;
    v45[77] = (unint64_t)(v24 - v35) >> 11;
    v45[21] = v48 + 4 * v29;
    v45[70] = v48 - 4 * v29;
    v45[28] = (unint64_t)(v47 + v25) >> 11;
    v45[63] = (unint64_t)(v25 - v47) >> 11;
    v45[35] = (unint64_t)(v44 + v23) >> 11;
    v45[56] = (unint64_t)(v23 - v44) >> 11;
    v45[42] = (unint64_t)(v43 + v21) >> 11;
    v45[49] = (unint64_t)(v21 - v43) >> 11;
    ++v5;
  }
  while (v5 != 7);
  uint64_t v49 = 0;
  uint64_t v50 = v79 - 384;
  uint64_t result = 11585;
  do
  {
    uint64_t v52 = *a4++;
    int v53 = *(_DWORD *)&v81[v49 + 4];
    int v54 = (*(_DWORD *)&v81[v49] << 13) + 134348800;
    int v56 = *(_DWORD *)&v81[v49 + 20];
    int v55 = *(_DWORD *)&v81[v49 + 24];
    int v57 = *(_DWORD *)&v81[v49 + 16];
    int v58 = 7223 * (v57 - v55);
    int v60 = *(_DWORD *)&v81[v49 + 8];
    int v59 = *(_DWORD *)&v81[v49 + 12];
    int v61 = 2578 * (v60 - v57);
    int v62 = v61 + v58;
    int v63 = v55 + v60;
    int v64 = v58 - 637 * v55;
    int v65 = 7663 * (v59 + v53);
    int v66 = v61 - 20239 * v60;
    int v67 = 1395 * (v53 - v59);
    int v68 = v65 - v67;
    int v69 = v65 + v67;
    int v70 = v54 + 10438 * v63;
    int v71 = v64 + v70;
    int v72 = 5027 * (v56 + v53);
    int v73 = v68 + v72;
    int v74 = v54 - 15083 * v57 + v62;
    int v75 = (unsigned char *)(v52 + a5);
    *int v75 = *(unsigned char *)(v50 + (((unint64_t)(v73 + v71) >> 18) & 0x3FF));
    int v76 = -11295 * (v56 + v59);
    int v77 = v69 + v76;
    v75[6] = *(unsigned char *)(v50 + (((unint64_t)(v71 - v73) >> 18) & 0x3FF));
    int v78 = v72 + 15326 * v56 + v76;
    v75[1] = *(unsigned char *)(v50 + (((unint64_t)(v77 + v74) >> 18) & 0x3FF));
    v75[5] = *(unsigned char *)(v50 + (((unint64_t)(v74 - v77) >> 18) & 0x3FF));
    v75[2] = *(unsigned char *)(v50 + (((unint64_t)(v78 + v66 + v70) >> 18) & 0x3FF));
    v75[4] = *(unsigned char *)(v50 + (((unint64_t)(v66 + v70 - v78) >> 18) & 0x3FF));
    v75[3] = *(unsigned char *)(v50 + (((unint64_t)(v54 + 11585 * (v57 - v63)) >> 18) & 0x3FF));
    v49 += 28;
  }
  while (v49 != 392);
  return result;
}

uint64_t jpeg_idct_6x12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v61 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    uint64_t v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v10 = 10033 * (int)v7[32] * (uint64_t)v8[32];
    uint64_t v11 = v10 + v9;
    uint64_t v12 = v9 - v10;
    uint64_t v13 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v14 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v15 = v9 + ((v13 - v14) << 13);
    uint64_t v16 = v9 - ((v13 - v14) << 13);
    uint64_t v17 = 11190 * v13 + (v14 << 13);
    uint64_t v18 = v17 + v11;
    uint64_t v19 = v11 - v17;
    uint64_t v20 = 2998 * v13 - (v14 << 13);
    uint64_t v21 = v20 + v12;
    uint64_t v22 = v12 - v20;
    uint64_t v23 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v24 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v26 = 10703 * v24;
    uint64_t v27 = -4433 * v24;
    uint64_t v28 = 7053 * (v23 + v25 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v29 = v28 + 2139 * (v23 + v25);
    uint64_t v30 = v24 - v25;
    uint64_t v31 = v26 + 2295 * v23 + v29;
    uint64_t v32 = -8565 * (v25 + (int)v7 * (uint64_t)(int)v8);
    uint64_t v33 = v27 - 12112 * v25 - 8565 * (v25 + (int)v7 * (uint64_t)(int)v8) + v29;
    uint64_t v34 = (int)v7 * (uint64_t)(int)v8;
    uint64_t v35 = 12998 * v34 - v26 + v32;
    uint64_t v36 = v23 - v34;
    uint64_t v37 = &v63[4 * v5];
    uint64_t v38 = v35 + v28;
    uint64_t v39 = v27 - 5540 * v23 - 16244 * v34 + v28;
    uint64_t v40 = 4433 * (v36 + v30);
    uint64_t v41 = v40 + 6270 * v36;
    uint64_t v42 = v40 - 15137 * v30;
    _DWORD *v37 = (unint64_t)(v31 + v18) >> 11;
    v37[66] = (unint64_t)(v18 - v31) >> 11;
    v37[6] = (unint64_t)(v41 + v15) >> 11;
    v37[60] = (unint64_t)(v15 - v41) >> 11;
    v37[12] = (unint64_t)(v33 + v21) >> 11;
    v37[54] = (unint64_t)(v21 - v33) >> 11;
    v37[18] = (unint64_t)(v38 + v22) >> 11;
    v37[48] = (unint64_t)(v22 - v38) >> 11;
    v37[24] = (unint64_t)(v42 + v16) >> 11;
    v37[42] = (unint64_t)(v16 - v42) >> 11;
    v37[30] = (unint64_t)(v39 + v19) >> 11;
    v37[36] = (unint64_t)(v19 - v39) >> 11;
    ++v5;
  }
  while (v5 != 6);
  uint64_t v43 = 0;
  uint64_t v44 = v61 - 384;
  do
  {
    uint64_t v45 = *a4++;
    uint64_t v46 = (unsigned char *)(v45 + a5);
    int v47 = *(_DWORD *)&v63[v43 + 4];
    int v48 = *(_DWORD *)&v63[v43 + 16];
    int v49 = *(_DWORD *)&v63[v43 + 20];
    int v50 = (*(_DWORD *)&v63[v43] << 13) + 134348800;
    int v51 = v50 + 5793 * v48;
    int v52 = *(_DWORD *)&v63[v43 + 12];
    int v53 = 10033 * *(_DWORD *)&v63[v43 + 8];
    int v54 = 2998 * (v49 + v47);
    int v55 = v54 + ((v52 + v47) << 13);
    int v56 = v49 - v52;
    int v57 = v47 - (v52 + v49);
    int v58 = v50 - 11586 * v48;
    *uint64_t v46 = *(unsigned char *)(v44 + (((unint64_t)(v55 + v51 + v53) >> 18) & 0x3FF));
    int v59 = v54 + (v56 << 13);
    v46[5] = *(unsigned char *)(v44 + (((unint64_t)(v51 + v53 - v55) >> 18) & 0x3FF));
    v46[1] = *(unsigned char *)(v44 + (((unint64_t)(v58 + (v57 << 13)) >> 18) & 0x3FF));
    v46[4] = *(unsigned char *)(v44 + (((unint64_t)(v58 - (v57 << 13)) >> 18) & 0x3FF));
    v46[2] = *(unsigned char *)(v44 + (((unint64_t)(v59 + v51 - v53) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v44 + (((unint64_t)(v51 - v53 - v59) >> 18) & 0x3FF));
    v46[3] = result;
    v43 += 24;
  }
  while (v43 != 288);
  return result;
}

uint64_t jpeg_idct_5x10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v55 = *(void *)(a1 + 440);
  uint64_t v6 = *(void *)(a2 + 88);
  do
  {
    uint64_t v7 = (_DWORD *)(v6 + 4 * v5);
    uint64_t v8 = (__int16 *)(a3 + 2 * v5);
    uint64_t v9 = ((uint64_t)(*v7 * *v8) << 13) | 0x400;
    uint64_t v10 = (int)v7[32] * (uint64_t)v8[32];
    uint64_t v11 = v9 + 9373 * v10;
    uint64_t v12 = v9 - 3580 * v10;
    unint64_t v13 = v9 - 11586 * v10;
    uint64_t v14 = (int)v7[16] * (uint64_t)v8[16];
    uint64_t v15 = (int)v7[48] * (uint64_t)v8[48];
    uint64_t v16 = 6810 * (v14 + v15);
    uint64_t v17 = v16 + 4209 * v14;
    uint64_t v18 = v16 - 17828 * v15;
    uint64_t v19 = v17 + v11;
    uint64_t v20 = v11 - v17;
    uint64_t v21 = v18 + v12;
    uint64_t v22 = v12 - v18;
    uint64_t v23 = (int)v7[8] * (uint64_t)v8[8];
    uint64_t v24 = (int)v7[24] * (uint64_t)v8[24];
    uint64_t v25 = (int)v7[40] * (uint64_t)v8[40];
    LODWORD(v8) = v8[56];
    LODWORD(v7) = v7[56];
    uint64_t v26 = v24 + (int)v7 * (uint64_t)(int)v8;
    uint64_t v27 = v24 - (int)v7 * (uint64_t)(int)v8;
    uint64_t v28 = 2531 * v27 + (v25 << 13);
    uint64_t v29 = 7791 * v26 + 11443 * v23 + v28;
    uint64_t v30 = 1812 * v23 - 7791 * v26 + v28;
    uint64_t v31 = 4815 * v26;
    uint64_t v32 = -6627 * v27 + (v25 << 13);
    LODWORD(v27) = v23 - v25 - v27;
    uint64_t v33 = 10323 * v23 - (v31 + v32);
    uint64_t v34 = 5260 * v23 - v31;
    uint64_t v35 = &v57[4 * v5];
    uint64_t v36 = v34 + v32;
    *uint64_t v35 = (unint64_t)(v29 + v19) >> 11;
    v35[45] = (unint64_t)(v19 - v29) >> 11;
    v35[5] = (unint64_t)(v33 + v21) >> 11;
    v35[40] = (unint64_t)(v21 - v33) >> 11;
    v35[10] = (v13 >> 11) + 4 * v27;
    v35[35] = (v13 >> 11) - 4 * v27;
    v35[15] = (unint64_t)(v36 + v22) >> 11;
    v35[30] = (unint64_t)(v22 - v36) >> 11;
    v35[20] = (unint64_t)(v30 + v20) >> 11;
    v35[25] = (unint64_t)(v20 - v30) >> 11;
    ++v5;
  }
  while (v5 != 5);
  uint64_t v37 = 0;
  uint64_t v38 = v55 - 384;
  uint64_t result = a5;
  do
  {
    uint64_t v40 = *a4++;
    int v41 = *(_DWORD *)&v57[v37 + 4];
    uint64_t v42 = (unsigned char *)(v40 + a5);
    int v43 = (*(_DWORD *)&v57[v37] << 13) + 134348800;
    int v44 = *(_DWORD *)&v57[v37 + 8];
    int v45 = *(_DWORD *)&v57[v37 + 12];
    int v46 = *(_DWORD *)&v57[v37 + 16];
    int v47 = 6476 * (v46 + v44);
    int v48 = v44 - v46;
    int v49 = v43 + 2896 * v48;
    int v50 = 6810 * (v45 + v41);
    int v51 = v49 + v47;
    int v52 = v50 + 4209 * v41;
    int v53 = v50 - 17828 * v45;
    *uint64_t v42 = *(unsigned char *)(v38 + (((unint64_t)(v52 + v49 + v47) >> 18) & 0x3FF));
    int v54 = v49 - v47;
    v42[4] = *(unsigned char *)(v38 + (((unint64_t)(v51 - v52) >> 18) & 0x3FF));
    v42[1] = *(unsigned char *)(v38 + (((unint64_t)(v53 + v54) >> 18) & 0x3FF));
    v42[3] = *(unsigned char *)(v38 + (((unint64_t)(v54 - v53) >> 18) & 0x3FF));
    v42[2] = *(unsigned char *)(v38 + (((unint64_t)(v43 + 268423872 * v48) >> 18) & 0x3FF));
    v37 += 20;
  }
  while (v37 != 200);
  return result;
}

uint64_t jpeg_idct_4x8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v6 = (__int16 *)(a3 + 64);
  uint64_t v7 = *(void *)(a2 + 88) + 128;
  uint64_t v58 = *(void *)(a1 + 440);
  for (unsigned int i = 5; i > 1; --i)
  {
    uint64_t v9 = (_DWORD *)(v7 + v5);
    unsigned __int16 v10 = *(v6 - 16);
    if ((unsigned __int16)*(v6 - 24) | v10) {
      goto LABEL_9;
    }
    if (*(v6 - 8) || *v6 || v6[8] || v6[16] || v6[24])
    {
      unsigned __int16 v10 = 0;
LABEL_9:
      uint64_t v11 = *v9 * *v6;
      uint64_t v12 = ((uint64_t)(*(v9 - 32) * *(v6 - 32)) << 13) | 0x400;
      uint64_t v13 = v12 + (v11 << 13);
      uint64_t v14 = v12 - (v11 << 13);
      uint64_t v15 = (int)*(v9 - 16) * (uint64_t)(__int16)v10;
      uint64_t v16 = (int)v9[16] * (uint64_t)v6[16];
      uint64_t v17 = 4433 * (v15 + v16);
      uint64_t v18 = v17 + 6270 * v15;
      uint64_t v19 = v17 - 15137 * v16;
      uint64_t v20 = v18 + v13;
      uint64_t v21 = v13 - v18;
      uint64_t v22 = v19 + v14;
      uint64_t v23 = v14 - v19;
      uint64_t v24 = (int)v9[24] * (uint64_t)v6[24];
      uint64_t v25 = (int)v9[8] * (uint64_t)v6[8];
      int v26 = *(v9 - 8);
      uint64_t v27 = (int)*(v9 - 24) * (uint64_t)*(v6 - 24);
      uint64_t v28 = v24 + v26 * (uint64_t)*(v6 - 8);
      uint64_t v29 = 9633 * (v25 + v27 + v28);
      uint64_t v30 = v29 - 16069 * v28;
      uint64_t v31 = v29 - 3196 * (v25 + v27);
      uint64_t v32 = -7373 * (v24 + v27);
      uint64_t v33 = v32 + 2446 * v24 + v30;
      uint64_t v34 = v32 + 12299 * v27 + v31;
      uint64_t v35 = -20995 * (v25 + v26 * (uint64_t)*(v6 - 8));
      uint64_t v36 = v35 + 16819 * v25 + v31;
      uint64_t v37 = v35 + 25172 * v26 * (uint64_t)*(v6 - 8) + v30;
      uint64_t v38 = &v60[v5];
      _DWORD *v38 = (unint64_t)(v34 + v20) >> 11;
      v38[28] = (unint64_t)(v20 - v34) >> 11;
      v38[4] = (unint64_t)(v37 + v22) >> 11;
      unsigned char v38[24] = (unint64_t)(v22 - v37) >> 11;
      v38[8] = (unint64_t)(v36 + v23) >> 11;
      v38[20] = (unint64_t)(v23 - v36) >> 11;
      v38[12] = (unint64_t)(v33 + v21) >> 11;
      unint64_t v39 = (unint64_t)(v21 - v33) >> 11;
      uint64_t v40 = 16;
      goto LABEL_10;
    }
    LODWORD(v39) = 4 * *(v6 - 32) * *(v9 - 32);
    int v41 = &v60[v5];
    *int v41 = v39;
    v41[4] = v39;
    v41[8] = v39;
    v41[12] = v39;
    v41[16] = v39;
    v41[20] = v39;
    v41[24] = v39;
    uint64_t v40 = 28;
LABEL_10:
    *(_DWORD *)&v60[4 * v40 + v5] = v39;
    v5 += 4;
    ++v6;
  }
  uint64_t v42 = 0;
  uint64_t v43 = v58 - 384;
  do
  {
    uint64_t v44 = *a4++;
    int v45 = (unsigned char *)(v44 + a5);
    int v46 = *(_DWORD *)&v60[v42 + 4];
    int v47 = *(_DWORD *)&v60[v42 + 8];
    int v48 = *(_DWORD *)&v60[v42 + 12];
    int v49 = *(_DWORD *)&v60[v42] + 16400;
    int v50 = v49 + v47;
    int v51 = (v49 + v47) << 13;
    int v52 = v49 - v47;
    int v53 = 4433 * (v48 + v46);
    int v54 = v52 << 13;
    int v55 = v53 + 6270 * v46;
    int v56 = v53 - 15137 * v48;
    *int v45 = *(unsigned char *)(v43 + (((unint64_t)(v55 + (v50 << 13)) >> 18) & 0x3FF));
    v45[3] = *(unsigned char *)(v43 + (((unint64_t)(v51 - v55) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v43 + (((unint64_t)(v56 + (v52 << 13)) >> 18) & 0x3FF));
    v45[1] = result;
    v45[2] = *(unsigned char *)(v43 + (((unint64_t)(v54 - v56) >> 18) & 0x3FF));
    v42 += 16;
  }
  while (v42 != 128);
  return result;
}

uint64_t jpeg_idct_3x6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = 0;
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(void *)(a2 + 88);
  do
  {
    uint64_t v8 = &v34[4 * v5];
    uint64_t v9 = (_DWORD *)(v7 + 4 * v5);
    unsigned __int16 v10 = (__int16 *)(a3 + 2 * v5);
    uint64_t v11 = ((uint64_t)(*v9 * *v10) << 13) | 0x400;
    uint64_t v12 = (int)v9[32] * (uint64_t)v10[32];
    uint64_t v13 = v11 + 5793 * v12;
    unint64_t v14 = (unint64_t)(v11 - 11586 * v12) >> 11;
    uint64_t v15 = 10033 * (int)v9[16] * (uint64_t)v10[16];
    uint64_t v16 = v15 + v13;
    uint64_t v17 = v13 - v15;
    uint64_t v18 = (int)v9[8] * (uint64_t)v10[8];
    uint64_t v19 = (int)v9[24] * (uint64_t)v10[24];
    uint64_t v20 = (int)v9[40] * (uint64_t)v10[40];
    uint64_t v21 = 2998 * (v18 + v20);
    uint64_t v22 = v21 + ((v18 + v19) << 13);
    uint64_t v23 = v21 + ((v20 - v19) << 13);
    LODWORD(v18) = v18 - (v19 + v20);
    _DWORD *v8 = (unint64_t)(v22 + v16) >> 11;
    v8[15] = (unint64_t)(v16 - v22) >> 11;
    v8[3] = v14 + 4 * v18;
    v8[12] = v14 - 4 * v18;
    v8[6] = (unint64_t)(v23 + v17) >> 11;
    v8[9] = (unint64_t)(v17 - v23) >> 11;
    ++v5;
  }
  while (v5 != 3);
  uint64_t v24 = 0;
  uint64_t v25 = v6 - 384;
  do
  {
    uint64_t v26 = *a4++;
    uint64_t v27 = (unsigned char *)(v26 + a5);
    int v28 = (*(_DWORD *)&v34[v24] << 13) + 134348800;
    int v29 = *(_DWORD *)&v34[v24 + 8];
    int v30 = v28 + 5793 * v29;
    unint64_t v31 = (v28 + 268423870 * v29);
    int v32 = 10033 * *(_DWORD *)&v34[v24 + 4];
    *uint64_t v27 = *(unsigned char *)(v25 + (((unint64_t)(v30 + v32) >> 18) & 0x3FF));
    uint64_t result = *(unsigned __int8 *)(v25 + (((unint64_t)(v30 - v32) >> 18) & 0x3FF));
    _OWORD v27[2] = result;
    v27[1] = *(unsigned char *)(v25 + ((v31 >> 18) & 0x3FF));
    v24 += 12;
  }
  while (v24 != 72);
  return result;
}

uint64_t jpeg_idct_2x4(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 440);
  uint64_t v6 = v26;
  uint64_t v7 = *(int **)(a2 + 88);
  char v8 = 1;
  do
  {
    char v9 = v8;
    uint64_t v10 = *v7 * (uint64_t)*a3;
    int v11 = v7[16];
    uint64_t v12 = (v10 + v11 * (uint64_t)a3[16]) << 13;
    uint64_t v13 = v10 - v11 * (uint64_t)a3[16];
    uint64_t v14 = v7[8] * (uint64_t)a3[8];
    uint64_t v15 = v7[24] * (uint64_t)a3[24];
    uint64_t v16 = 4433 * (v14 + v15);
    uint64_t v17 = v16 + 6270 * v14;
    uint64_t v18 = v16 - 15137 * v15;
    uint64_t result = v17 + v12;
    void *v6 = v17 + v12;
    v6[6] = v12 - v17;
    std::string v6[2] = v18 + (v13 << 13);
    v6[4] = (v13 << 13) - v18;
    ++a3;
    ++v7;
    ++v6;
    char v8 = 0;
  }
  while ((v9 & 1) != 0);
  uint64_t v20 = 0;
  uint64_t v21 = v5 - 384;
  do
  {
    uint64_t v22 = *a4++;
    uint64_t v23 = (unsigned char *)(v22 + a5);
    int v24 = *(_DWORD *)&v26[v20] + 33587200;
    int v25 = *(_DWORD *)&v26[v20 + 8];
    unsigned char *v23 = *(unsigned char *)(v21 + (((unint64_t)(v24 + v25) >> 16) & 0x3FF));
    v23[1] = *(unsigned char *)(v21 + (((unint64_t)(v24 - v25) >> 16) & 0x3FF));
    v20 += 16;
  }
  while (v20 != 64);
  return result;
}

uint64_t jpeg_idct_1x2(uint64_t result, uint64_t a2, unsigned __int16 *a3, void *a4, unsigned int a5)
{
  uint64_t v5 = *(void *)(result + 440) - 384;
  uint64_t v6 = *(_DWORD **)(a2 + 88);
  int v7 = *v6 * *a3 + 4100;
  LODWORD(v6) = v6[8] * a3[8];
  *(unsigned char *)(*a4 + a5) = *(unsigned char *)(v5 + (((unint64_t)(v6 + v7) >> 3) & 0x3FF));
  *(unsigned char *)(a4[1] + a5) = *(unsigned char *)(v5 + (((unint64_t)(v7 - v6) >> 3) & 0x3FF));
  return result;
}

const char *jinit_memory_mgr(turi::neural_net::float_scalar *a1)
{
  *((void *)a1 + 1) = 0;
  uint64_t v2 = turi::neural_net::float_scalar::shape(a1);
  uint64_t v7 = v2;
  small = (char *)jpeg_get_small((int)a1, 0xA8uLL);
  if (!small)
  {
    turi::neural_net::float_scalar::~float_scalar(a1);
    *(void *)(*(void *)a1 + 4CoreML::Specification::Normalizer::New(this, 0) = 56;
    (**(void (***)(turi::neural_net::float_scalar *))a1)(a1);
  }
  *(void *)small = alloc_small;
  *((void *)small + 1) = alloc_large;
  *((void *)small + 2) = alloc_sarray;
  *((void *)small + 3) = alloc_barray;
  *((void *)small + 4) = request_virt_sarray;
  *((void *)small + 5) = request_virt_barray;
  *((void *)small + 6) = realize_virt_arrays;
  *((void *)small + 7) = access_virt_sarray;
  *((void *)small + 8) = access_virt_barray;
  *((void *)small + 9) = free_pool;
  *((void *)small + 11) = v2;
  *((void *)small + 12) = 1000000000;
  *((void *)small + 1CoreML::Specification::Normalizer::New(this, 0) = self_destruct;
  *(_OWORD *)(small + 104) = 0u;
  *(_OWORD *)(small + 12CoreML::Specification::Normalizer::New(this, 0) = 0u;
  *(_OWORD *)(small + 136) = 0u;
  *((void *)small + 19) = 168;
  *((void *)a1 + 1) = small;
  uint64_t result = getenv("JPEGMEM");
  if (result)
  {
    char v6 = 120;
    uint64_t result = (const char *)sscanf(result, "%ld%c", &v7, &v6);
    if ((int)result >= 1)
    {
      if ((v6 & 0xDF) == 0x4D) {
        uint64_t v5 = 1000 * v7;
      }
      else {
        uint64_t v5 = v7;
      }
      *((void *)small + 11) = 1000 * v5;
    }
  }
  return result;
}

uint64_t alloc_small(void *a1, signed int a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  if (a3 > 0x3B9AC9E8)
  {
    *(void *)(*a1 + 4CoreML::Specification::Normalizer::New(this, 0) = 0x100000038;
    (*(void (**)(void *))*a1)(a1);
  }
  unint64_t v7 = a3 + 7;
  if (a2 >= 2)
  {
    uint64_t v8 = *a1;
    *(_DWORD *)(v8 + 4CoreML::Specification::Normalizer::New(this, 0) = 15;
    *(_DWORD *)(v8 + 44) = a2;
    (*(void (**)(void *))*a1)(a1);
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = v6 + 8 * a2;
  uint64_t v13 = *(void **)(v10 + 104);
  uint64_t v12 = (void *)(v10 + 104);
  int v11 = v13;
  if (v13)
  {
    while (1)
    {
      uint64_t v14 = v11;
      if (v11[2] >= v9) {
        break;
      }
      int v11 = (void *)*v11;
      if (!*v14) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v14 = 0;
LABEL_10:
    unint64_t v15 = v9 + 24;
    uint64_t v16 = &extra_pool_slop;
    if (!v14) {
      uint64_t v16 = &first_pool_slop;
    }
    if (v16[a2] >= 999999976 - v9) {
      unint64_t v17 = 999999976 - v9;
    }
    else {
      unint64_t v17 = v16[a2];
    }
    unint64_t v18 = v15 + v17;
    for (unsigned int i = jpeg_get_small((int)a1, v15 + v17); !i; unsigned int i = jpeg_get_small((int)a1, v15 + v17))
    {
      if (v17 <= 0x63)
      {
        *(void *)(*a1 + 4CoreML::Specification::Normalizer::New(this, 0) = 0x200000038;
        (*(void (**)(void *))*a1)(a1);
      }
      v17 >>= 1;
      unint64_t v18 = v15 + v17;
    }
    *(void *)(v6 + 152) += v18;
    *unsigned int i = 0;
    i[1] = 0;
    i[2] = v17 + v9;
    if (v14) {
      uint64_t v20 = v14;
    }
    else {
      uint64_t v20 = v12;
    }
    *uint64_t v20 = i;
    uint64_t v14 = i;
  }
  uint64_t v21 = v14[1];
  uint64_t result = (uint64_t)v14 + v21 + 24;
  unint64_t v23 = v14[2] - v9;
  v14[1] = v21 + v9;
  v14[2] = v23;
  return result;
}

void *alloc_large(void *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v6 = a1[1];
  if (a3 >= 0x3B9AC9E9)
  {
    *(void *)(*a1 + 4CoreML::Specification::Normalizer::New(this, 0) = 0x300000038;
    (*(void (**)(void *))*a1)(a1);
  }
  unint64_t v7 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (a2 >= 2)
  {
    uint64_t v8 = *a1;
    *(_DWORD *)(v8 + 4CoreML::Specification::Normalizer::New(this, 0) = 15;
    *(_DWORD *)(v8 + 44) = a2;
    (*(void (**)(void *))*a1)(a1);
  }
  large = jpeg_get_large((int)a1, v7 + 24);
  if (!large)
  {
    *(void *)(*a1 + 4CoreML::Specification::Normalizer::New(this, 0) = 0x400000038;
    (*(void (**)(void *))*a1)(a1);
  }
  *(void *)(v6 + 152) += v7 + 24;
  uint64_t v10 = v6 + 8 * (int)a2;
  void *large = *(void *)(v10 + 120);
  large[1] = v7;
  large[2] = 0;
  *(void *)(v10 + 12CoreML::Specification::Normalizer::New(this, 0) = large;
  return large + 3;
}

uint64_t alloc_sarray(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = a1[1];
  unsigned int v9 = 0x3B9AC9E8 / a3;
  if (a3 > 0x3B9AC9E8)
  {
    uint64_t v10 = *a1;
    *(_DWORD *)(v10 + 4CoreML::Specification::Normalizer::New(this, 0) = 72;
    (*(void (**)(uint64_t *))v10)(a1);
  }
  if (v9 >= a4) {
    unsigned int v9 = a4;
  }
  *(_DWORD *)(v8 + 16CoreML::Specification::Normalizer::New(this, 0) = v9;
  uint64_t v11 = alloc_small(a1, a2, 8 * a4);
  if (a4)
  {
    uint64_t v12 = 0;
    do
    {
      if (v9 >= a4 - v12) {
        unsigned int v9 = a4 - v12;
      }
      uint64_t v13 = alloc_large(a1, a2, a3 * (unint64_t)v9);
      if (v9)
      {
        unsigned int v14 = v9;
        do
        {
          uint64_t v15 = (v12 + 1);
          *(void *)(v11 + 8 * v12) = v13;
          uint64_t v13 = (void *)((char *)v13 + a3);
          LODWORD(v12) = v12 + 1;
          --v14;
        }
        while (v14);
      }
      else
      {
        uint64_t v15 = v12;
      }
      uint64_t v12 = v15;
    }
    while (v15 < a4);
  }
  return v11;
}

uint64_t alloc_barray(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = a1[1];
  unint64_t v9 = (unint64_t)a3 << 7;
  unint64_t v10 = 0x3B9AC9E8 / v9;
  if (a3 >= 0x773594)
  {
    uint64_t v11 = *a1;
    *(_DWORD *)(v11 + 4CoreML::Specification::Normalizer::New(this, 0) = 72;
    (*(void (**)(uint64_t *))v11)(a1);
  }
  if (v10 >= a4) {
    LODWORD(v1CoreML::Specification::Normalizer::New(this, 0) = a4;
  }
  *(_DWORD *)(v8 + 16CoreML::Specification::Normalizer::New(this, 0) = v10;
  uint64_t v12 = alloc_small(a1, a2, 8 * a4);
  if (a4)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (unint64_t)a3 << 7;
    do
    {
      if (v10 >= a4 - v13) {
        unint64_t v10 = a4 - v13;
      }
      else {
        unint64_t v10 = v10;
      }
      uint64_t v15 = alloc_large(a1, a2, v9 * v10);
      if (v10)
      {
        int v16 = v10;
        do
        {
          uint64_t v17 = (v13 + 1);
          *(void *)(v12 + 8 * v13) = v15;
          uint64_t v15 = (void *)((char *)v15 + v14);
          LODWORD(v13) = v13 + 1;
          --v16;
        }
        while (v16);
      }
      else
      {
        uint64_t v17 = v13;
      }
      uint64_t v13 = v17;
    }
    while (v17 < a4);
  }
  return v12;
}

uint64_t request_virt_sarray(void *a1, signed int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = a1[1];
  if (a2 != 1)
  {
    uint64_t v13 = (void (**)(void))*a1;
    *((_DWORD *)v13 + 1CoreML::Specification::Normalizer::New(this, 0) = 15;
    *((_DWORD *)v13 + 11) = a2;
    (*(void (**)(void *))*a1)(a1);
  }
  uint64_t result = alloc_small(a1, a2, 0x98uLL);
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a6;
  *(_DWORD *)(result + 36) = a3;
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 48) = *(void *)(v12 + 136);
  *(void *)(v12 + 136) = result;
  return result;
}

uint64_t request_virt_barray(void *a1, signed int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = a1[1];
  if (a2 != 1)
  {
    uint64_t v13 = (void (**)(void))*a1;
    *((_DWORD *)v13 + 1CoreML::Specification::Normalizer::New(this, 0) = 15;
    *((_DWORD *)v13 + 11) = a2;
    (*(void (**)(void *))*a1)(a1);
  }
  uint64_t result = alloc_small(a1, a2, 0x98uLL);
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = a5;
  *(_DWORD *)(result + 12) = a4;
  *(_DWORD *)(result + 16) = a6;
  *(_DWORD *)(result + 36) = a3;
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 48) = *(void *)(v12 + 144);
  *(void *)(v12 + 144) = result;
  return result;
}

uint64_t realize_virt_arrays(uint64_t result)
{
  uint64_t v1 = (uint64_t *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(v2 + 136);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    do
    {
      if (!*(void *)v3)
      {
        unsigned int v6 = *(_DWORD *)(v3 + 12);
        v5 += *(unsigned int *)(v3 + 16) * (unint64_t)v6;
        v4 += *(unsigned int *)(v3 + 8) * (unint64_t)v6;
      }
      uint64_t v3 = *(void *)(v3 + 48);
    }
    while (v3);
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  for (uint64_t i = *(void *)(v2 + 144); i; uint64_t i = *(void *)(i + 48))
  {
    if (!*(void *)i)
    {
      unint64_t v8 = (unint64_t)*(unsigned int *)(i + 12) << 7;
      v5 += v8 * *(unsigned int *)(i + 16);
      v4 += v8 * *(unsigned int *)(i + 8);
    }
  }
  if (v5 >= 1)
  {
    uint64_t result = jpeg_mem_available(result, v5, v4, *(void *)(v2 + 152));
    if (result >= v4)
    {
      uint64_t v9 = 1000000000;
    }
    else if (result / v5 <= 1)
    {
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = result / v5;
    }
    for (uint64_t j = *(void *)(v2 + 136); j; uint64_t j = *(void *)(j + 48))
    {
      if (!*(void *)j)
      {
        uint64_t v11 = *(unsigned int *)(j + 8);
        uint64_t v12 = *(unsigned int *)(j + 16);
        if ((v11 - 1) / v12 >= v9)
        {
          *(_DWORD *)(j + 2CoreML::Specification::Normalizer::New(this, 0) = v12 * v9;
          jpeg_open_backing_store(v1);
          *(_DWORD *)(j + 44) = 1;
          LODWORD(v11) = *(_DWORD *)(j + 20);
        }
        else
        {
          *(_DWORD *)(j + 2CoreML::Specification::Normalizer::New(this, 0) = v11;
        }
        uint64_t result = alloc_sarray(v1, 1u, *(_DWORD *)(j + 12), v11);
        *(void *)uint64_t j = result;
        *(void *)(j + 24) = *(unsigned int *)(v2 + 160);
        *(_DWORD *)(j + 32) = 0;
        *(_DWORD *)(j + 4CoreML::Specification::Normalizer::New(this, 0) = 0;
      }
    }
    for (uint64_t k = *(void *)(v2 + 144); k; uint64_t k = *(void *)(k + 48))
    {
      if (!*(void *)k)
      {
        uint64_t v14 = *(unsigned int *)(k + 8);
        uint64_t v15 = *(unsigned int *)(k + 16);
        if ((v14 - 1) / v15 >= v9)
        {
          *(_DWORD *)(k + 2CoreML::Specification::Normalizer::New(this, 0) = v15 * v9;
          jpeg_open_backing_store(v1);
          *(_DWORD *)(k + 44) = 1;
          LODWORD(v14) = *(_DWORD *)(k + 20);
        }
        else
        {
          *(_DWORD *)(k + 2CoreML::Specification::Normalizer::New(this, 0) = v14;
        }
        uint64_t result = alloc_barray(v1, 1u, *(_DWORD *)(k + 12), v14);
        *(void *)uint64_t k = result;
        *(void *)(k + 24) = *(unsigned int *)(v2 + 160);
        *(_DWORD *)(k + 32) = 0;
        *(_DWORD *)(k + 4CoreML::Specification::Normalizer::New(this, 0) = 0;
      }
    }
  }
  return result;
}

uint64_t access_virt_sarray(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v10 = a4 + a3;
  if (v10 > *(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 16) < a4 || !*(void *)a2)
  {
    uint64_t v11 = *a1;
    *(_DWORD *)(v11 + 4CoreML::Specification::Normalizer::New(this, 0) = 23;
    (*(void (**)(uint64_t *))v11)(a1);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 28);
  if (v12 > a3 || v10 > *(_DWORD *)(a2 + 20) + v12)
  {
    if (!*(_DWORD *)(a2 + 44))
    {
      uint64_t v13 = *a1;
      *(_DWORD *)(v13 + 4CoreML::Specification::Normalizer::New(this, 0) = 71;
      (*(void (**)(uint64_t *))v13)(a1);
    }
    if (*(_DWORD *)(a2 + 40))
    {
      do_sarray_io((uint64_t)a1, a2, 1);
      *(_DWORD *)(a2 + 4CoreML::Specification::Normalizer::New(this, 0) = 0;
    }
    unsigned int v14 = a3;
    if (*(_DWORD *)(a2 + 28) >= a3) {
      unsigned int v14 = (v10 - *(_DWORD *)(a2 + 20)) & ~((v10 - *(unsigned int *)(a2 + 20)) >> 63);
    }
    *(_DWORD *)(a2 + 28) = v14;
    do_sarray_io((uint64_t)a1, a2, 0);
  }
  unsigned int v15 = *(_DWORD *)(a2 + 32);
  if (v15 < v10)
  {
    if (v15 >= a3)
    {
      if (a5)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v10;
        if (!*(_DWORD *)(a2 + 36)) {
          goto LABEL_26;
        }
        goto LABEL_22;
      }
      if (*(_DWORD *)(a2 + 36))
      {
LABEL_22:
        int v17 = *(_DWORD *)(a2 + 28);
        if (v15 - v17 < (int)v10 - v17)
        {
          size_t v18 = *(unsigned int *)(a2 + 12);
          uint64_t v19 = 8 * (v15 - v17);
          unsigned int v20 = a4 + a3 - v15;
          do
          {
            bzero(*(void **)(*(void *)a2 + v19), v18);
            v19 += 8;
            --v20;
          }
          while (v20);
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (a5)
      {
        uint64_t v16 = *a1;
        *(_DWORD *)(v16 + 4CoreML::Specification::Normalizer::New(this, 0) = 23;
        (*(void (**)(uint64_t *))v16)(a1);
        unsigned int v15 = a3;
        goto LABEL_19;
      }
      unsigned int v15 = a3;
      if (*(_DWORD *)(a2 + 36)) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = *a1;
    *(_DWORD *)(v22 + 4CoreML::Specification::Normalizer::New(this, 0) = 23;
    (*(void (**)(uint64_t *))v22)(a1);
    return *(void *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
  }
LABEL_25:
  if (a5) {
LABEL_26:
  }
    *(_DWORD *)(a2 + 4CoreML::Specification::Normalizer::New(this, 0) = 1;
  return *(void *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
}

uint64_t access_virt_barray(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v10 = a4 + a3;
  if (v10 > *(_DWORD *)(a2 + 8) || *(_DWORD *)(a2 + 16) < a4 || !*(void *)a2)
  {
    uint64_t v11 = *a1;
    *(_DWORD *)(v11 + 4CoreML::Specification::Normalizer::New(this, 0) = 23;
    (*(void (**)(uint64_t *))v11)(a1);
  }
  unsigned int v12 = *(_DWORD *)(a2 + 28);
  if (v12 > a3 || v10 > *(_DWORD *)(a2 + 20) + v12)
  {
    if (!*(_DWORD *)(a2 + 44))
    {
      uint64_t v13 = *a1;
      *(_DWORD *)(v13 + 4CoreML::Specification::Normalizer::New(this, 0) = 71;
      (*(void (**)(uint64_t *))v13)(a1);
    }
    if (*(_DWORD *)(a2 + 40))
    {
      do_barray_io((uint64_t)a1, a2, 1);
      *(_DWORD *)(a2 + 4CoreML::Specification::Normalizer::New(this, 0) = 0;
    }
    unsigned int v14 = a3;
    if (*(_DWORD *)(a2 + 28) >= a3) {
      unsigned int v14 = (v10 - *(_DWORD *)(a2 + 20)) & ~((v10 - *(unsigned int *)(a2 + 20)) >> 63);
    }
    *(_DWORD *)(a2 + 28) = v14;
    do_barray_io((uint64_t)a1, a2, 0);
  }
  unsigned int v15 = *(_DWORD *)(a2 + 32);
  if (v15 < v10)
  {
    if (v15 >= a3)
    {
      if (a5)
      {
LABEL_19:
        *(_DWORD *)(a2 + 32) = v10;
        if (!*(_DWORD *)(a2 + 36)) {
          goto LABEL_26;
        }
        goto LABEL_22;
      }
      if (*(_DWORD *)(a2 + 36))
      {
LABEL_22:
        int v17 = *(_DWORD *)(a2 + 28);
        if (v15 - v17 < (int)v10 - v17)
        {
          size_t v18 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
          uint64_t v19 = 8 * (v15 - v17);
          unsigned int v20 = a4 + a3 - v15;
          do
          {
            bzero(*(void **)(*(void *)a2 + v19), v18);
            v19 += 8;
            --v20;
          }
          while (v20);
        }
        goto LABEL_25;
      }
    }
    else
    {
      if (a5)
      {
        uint64_t v16 = *a1;
        *(_DWORD *)(v16 + 4CoreML::Specification::Normalizer::New(this, 0) = 23;
        (*(void (**)(uint64_t *))v16)(a1);
        unsigned int v15 = a3;
        goto LABEL_19;
      }
      unsigned int v15 = a3;
      if (*(_DWORD *)(a2 + 36)) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = *a1;
    *(_DWORD *)(v22 + 4CoreML::Specification::Normalizer::New(this, 0) = 23;
    (*(void (**)(uint64_t *))v22)(a1);
    return *(void *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
  }
LABEL_25:
  if (a5) {
LABEL_26:
  }
    *(_DWORD *)(a2 + 4CoreML::Specification::Normalizer::New(this, 0) = 1;
  return *(void *)a2 + 8 * (a3 - *(_DWORD *)(a2 + 28));
}

void free_pool(void *a1, signed int a2)
{
  uint64_t v4 = (void *)a1[1];
  if (a2 < 2)
  {
    if (a2 == 1)
    {
      for (uint64_t i = v4[17]; i; uint64_t i = *(void *)(i + 48))
      {
        if (*(_DWORD *)(i + 44))
        {
          *(_DWORD *)(i + 44) = 0;
          (*(void (**)(void *, uint64_t))(i + 72))(a1, i + 56);
        }
      }
      v4[17] = 0;
      for (uint64_t j = v4[18]; j; uint64_t j = *(void *)(j + 48))
      {
        if (*(_DWORD *)(j + 44))
        {
          *(_DWORD *)(j + 44) = 0;
          (*(void (**)(void *, uint64_t))(j + 72))(a1, j + 56);
        }
      }
      v4[18] = 0;
    }
  }
  else
  {
    uint64_t v5 = (void (**)(void))*a1;
    *((_DWORD *)v5 + 1CoreML::Specification::Normalizer::New(this, 0) = 15;
    *((_DWORD *)v5 + 11) = a2;
    (*(void (**)(void *))*a1)(a1);
  }
  uint64_t v8 = a2;
  uint64_t v9 = &v4[a2];
  uint64_t v10 = (void *)v9[15];
  v9[15] = 0;
  if (v10)
  {
    do
    {
      uint64_t v11 = (void *)*v10;
      uint64_t v12 = v10[1] + v10[2] + 24;
      jpeg_free_small((int)a1, v10);
      v4[19] -= v12;
      uint64_t v10 = v11;
    }
    while (v11);
  }
  uint64_t v13 = &v4[v8];
  unsigned int v14 = (void *)v13[13];
  v13[13] = 0;
  if (v14)
  {
    do
    {
      unsigned int v15 = (void *)*v14;
      uint64_t v16 = v14[1] + v14[2] + 24;
      jpeg_free_small((int)a1, v14);
      v4[19] -= v16;
      unsigned int v14 = v15;
    }
    while (v15);
  }
}

void self_destruct(uint64_t a1)
{
  for (signed int i = 1; i != -1; --i)
    free_pool((void *)a1, i);
  jpeg_free_small(a1, *(void **)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  turi::neural_net::float_scalar::~float_scalar((turi::neural_net::float_scalar *)a1);
}

uint64_t do_sarray_io(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3)
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    unint64_t v9 = *(unsigned int *)(a2 + 28) * (unint64_t)v7;
    uint64_t v10 = a2 + 56;
    if (a3) {
      uint64_t v11 = 64;
    }
    else {
      uint64_t v11 = 56;
    }
    do
    {
      uint64_t v12 = v3 - v6;
      if (v12 >= v8) {
        uint64_t v12 = v8;
      }
      unint64_t v13 = v6 + *(unsigned int *)(a2 + 28);
      if (v12 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v13)) {
        uint64_t v12 = *(unsigned int *)(a2 + 32) - v13;
      }
      uint64_t v14 = *(unsigned int *)(a2 + 8) - v13;
      if (v12 >= v14) {
        uint64_t v12 = v14;
      }
      if (v12 < 1) {
        break;
      }
      uint64_t v15 = v12 * v7;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t, uint64_t))(a2 + v11))(v5, v10, *(void *)(*(void *)a2 + 8 * v6), v9, v12 * v7);
      v9 += v15;
      unint64_t v3 = *(unsigned int *)(a2 + 20);
      uint64_t v8 = *(unsigned int *)(a2 + 24);
      v6 += v8;
    }
    while (v6 < v3);
  }
  return result;
}

uint64_t do_barray_io(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3 = *(unsigned int *)(a2 + 20);
  if (v3)
  {
    uint64_t v5 = result;
    unint64_t v6 = 0;
    unint64_t v7 = (unint64_t)*(unsigned int *)(a2 + 12) << 7;
    uint64_t v8 = *(unsigned int *)(a2 + 24);
    unint64_t v9 = v7 * *(unsigned int *)(a2 + 28);
    uint64_t v10 = a2 + 56;
    if (a3) {
      uint64_t v11 = 64;
    }
    else {
      uint64_t v11 = 56;
    }
    do
    {
      uint64_t v12 = v3 - v6;
      if (v12 >= v8) {
        uint64_t v12 = v8;
      }
      unint64_t v13 = v6 + *(unsigned int *)(a2 + 28);
      if (v12 >= (uint64_t)(*(unsigned int *)(a2 + 32) - v13)) {
        uint64_t v12 = *(unsigned int *)(a2 + 32) - v13;
      }
      uint64_t v14 = *(unsigned int *)(a2 + 8) - v13;
      if (v12 >= v14) {
        uint64_t v12 = v14;
      }
      if (v12 < 1) {
        break;
      }
      unint64_t v15 = v12 * v7;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, unint64_t, unint64_t))(a2 + v11))(v5, v10, *(void *)(*(void *)a2 + 8 * v6), v9, v12 * v7);
      v9 += v15;
      unint64_t v3 = *(unsigned int *)(a2 + 20);
      uint64_t v8 = *(unsigned int *)(a2 + 24);
      v6 += v8;
    }
    while (v6 < v3);
  }
  return result;
}

void CoreML::validate<(MLModelType)501>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v4 = *(CoreML **)(a1 + 16);
  }
  else {
    uint64_t v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v10);
  CoreML::validateModelDescription(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v7);
  uint64_t v10 = v7;
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v8;
  uint64_t v12 = v9;
  if (CoreML::Result::good((CoreML::Result *)&v10))
  {
    CoreML::Recommender::constructAndValidateItemSimilarityRecommenderFromSpec((CoreML::Recommender *)a1, &v5);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    CoreML::Result::Result((CoreML::Result *)a2);
  }
  else
  {
    *(void *)a2 = v10;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v12;
    long long __p = 0uLL;
    uint64_t v12 = 0;
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
}

void *jpeg_get_small(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x1914B082uLL);
}

void jpeg_free_small(int a1, void *a2)
{
}

void *jpeg_get_large(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x131737E5uLL);
}

uint64_t jpeg_mem_available(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 88);
  if (v4) {
    return v4 - a4;
  }
  else {
    return a3;
  }
}

uint64_t jpeg_open_backing_store(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(_DWORD *)(v1 + 4CoreML::Specification::Normalizer::New(this, 0) = 51;
  return (*(uint64_t (**)(uint64_t *))v1)(a1);
}

uint64_t jinit_1pass_quantizer(uint64_t a1)
{
  uint64_t v2 = (void (**)(uint64_t))(**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 656) = v2;
  turi::neural_net *v2 = start_pass_1_quant;
  void v2[2] = (void (*)(uint64_t))finish_pass_1_quant;
  v2[3] = (void (*)(uint64_t))new_color_map_1_quant;
  v2[14] = 0;
  v2[10] = 0;
  if (*(int *)(a1 + 144) >= 5)
  {
    *(void *)(*(void *)a1 + 4CoreML::Specification::Normalizer::New(this, 0) = 0x400000039;
    (**(void (***)(uint64_t))a1)(a1);
  }
  int v3 = *(_DWORD *)(a1 + 120);
  if (v3 >= 257)
  {
    *(void *)(*(void *)a1 + 4CoreML::Specification::Normalizer::New(this, 0) = 0x1000000003BLL;
    (**(void (***)(uint64_t))a1)(a1);
    int v3 = *(_DWORD *)(a1 + 120);
  }
  uint64_t v4 = *(void *)(a1 + 656);
  uint64_t v5 = *(unsigned int *)(a1 + 144);
  uint64_t v6 = v3;
  uint64_t v7 = 1;
  do
  {
    unsigned int v8 = v7++;
    uint64_t v9 = v7;
    if ((int)v5 >= 2)
    {
      int v10 = v5 - 1;
      uint64_t v9 = v7;
      do
      {
        v9 *= v7;
        --v10;
      }
      while (v10);
    }
  }
  while (v9 <= v3);
  if (v8 <= 1)
  {
    uint64_t v11 = *(void *)a1;
    *(_DWORD *)(v11 + 4CoreML::Specification::Normalizer::New(this, 0) = 58;
    *(_DWORD *)(v11 + 44) = v9;
    (**(void (***)(uint64_t))a1)(a1);
  }
  if ((int)v5 < 1)
  {
    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v12 = v4 + 60;
    uint64_t v13 = (v5 + 1) & 0x1FFFFFFFELL;
    uint64x2_t v14 = (uint64x2_t)vdupq_n_s64(v5 - 1);
    int32x2_t v15 = vdup_n_s32(v8);
    int64x2_t v16 = (int64x2_t)xmmword_2246C5F80;
    int v17 = (unsigned int *)(v4 + 64);
    int32x2_t v18 = (int32x2_t)0x100000001;
    int64x2_t v19 = vdupq_n_s64(2uLL);
    do
    {
      int8x8_t v20 = (int8x8_t)v18;
      int8x8_t v21 = (int8x8_t)vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)v16));
      if (v21.i8[0]) {
        *(v17 - 1) = v8;
      }
      if (v21.i8[4]) {
        *int v17 = v8;
      }
      int32x2_t v18 = vmul_s32(v18, v15);
      int64x2_t v16 = vaddq_s64(v16, v19);
      v17 += 2;
      v13 -= 2;
    }
    while (v13);
    int8x8_t v22 = vbsl_s8(v21, (int8x8_t)v18, v20);
    uint64_t v23 = (v22.i32[0] * v22.i32[1]);
    uint64_t v24 = 0;
    int v25 = *(_DWORD *)(a1 + 64);
    char v26 = 1;
    while (1)
    {
      int v27 = v24;
      if (v25 == 2) {
        int v27 = select_ncolors_RGB_order[v24];
      }
      uint64_t v28 = *(int *)(v12 + 4 * v27);
      int v29 = v28 + 1;
      uint64_t v30 = (int)v23 / (int)v28 * (v28 + 1);
      if (v30 <= v6)
      {
        char v26 = 0;
        *(_DWORD *)(v12 + 4 * v27) = v29;
        ++v24;
        uint64_t v23 = v30;
        if (v24 != v5) {
          continue;
        }
      }
      uint64_t v24 = 0;
      char v31 = v26;
      char v26 = 1;
      if (v31) {
        break;
      }
    }
  }
  int v32 = *(_DWORD *)(a1 + 144);
  uint64_t v33 = *(void (***)(uint64_t, uint64_t))a1;
  *(_DWORD *)(*(void *)a1 + 44) = v23;
  if (v32 == 3)
  {
    *((_DWORD *)v33 + 12) = *(_DWORD *)(v4 + 60);
    *((_DWORD *)v33 + 13) = *(_DWORD *)(v4 + 64);
    *((_DWORD *)v33 + 14) = *(_DWORD *)(v4 + 68);
    int v34 = 96;
    uint64_t v35 = v33;
  }
  else
  {
    uint64_t v35 = *(void (***)(uint64_t, uint64_t))a1;
    int v34 = 97;
  }
  *((_DWORD *)v33 + 1CoreML::Specification::Normalizer::New(this, 0) = v34;
  v35[1](a1, 1);
  uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 8) + 16))(a1, 1, v23, *(unsigned int *)(a1 + 144));
  int v37 = *(_DWORD *)(a1 + 144);
  if (v37 >= 1)
  {
    uint64_t v38 = 0;
    int v39 = v23;
    do
    {
      uint64_t v40 = *(unsigned int *)(v4 + 4 * v38 + 60);
      uint64_t v41 = (v39 / (int)v40);
      if ((int)v40 >= 1)
      {
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        do
        {
          if (v42 * (int)v41 < (int)v23)
          {
            uint64_t v44 = v43;
            do
            {
              if ((int)v41 >= 1)
              {
                for (uint64_t i = 0; i != v41; ++i)
                  *(unsigned char *)(*(void *)(v36 + 8 * v38) + v44 + i) = ((unint64_t)((v40 - 1) >> 1)
                                                                    - v42
                                                                    + (v42 << 8))
                                                                   / (v40 - 1);
              }
              v44 += v39;
            }
            while (v44 < (int)v23);
          }
          ++v42;
          v43 += (int)v41;
        }
        while (v42 != v40);
        int v37 = *(_DWORD *)(a1 + 144);
      }
      ++v38;
      v39 /= (int)v40;
    }
    while (v38 < v37);
  }
  *(void *)(v4 + 32) = v36;
  *(_DWORD *)(v4 + 4CoreML::Specification::Normalizer::New(this, 0) = v23;
  uint64_t result = create_colorindex(a1);
  if (*(_DWORD *)(a1 + 112) == 2)
  {
    return alloc_fs_workspace(a1);
  }
  return result;
}

void start_pass_1_quant(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  *(void *)(a1 + 16CoreML::Specification::Normalizer::New(this, 0) = *(void *)(v2 + 32);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(v2 + 40);
  int v3 = *(_DWORD *)(a1 + 112);
  if (v3 == 2)
  {
    *(void *)(v2 + 8) = quantize_fs_dither;
    *(_DWORD *)(v2 + 144) = 0;
    if (!*(void *)(v2 + 112)) {
      alloc_fs_workspace(a1);
    }
    if (*(int *)(a1 + 144) >= 1)
    {
      uint64_t v5 = 0;
      size_t v6 = 2 * (*(_DWORD *)(a1 + 136) + 2);
      uint64_t v7 = v2 + 112;
      do
        bzero(*(void **)(v7 + 8 * v5++), v6);
      while (v5 < *(int *)(a1 + 144));
    }
  }
  else if (v3 == 1)
  {
    unsigned int v8 = quantize_ord_dither;
    if (*(_DWORD *)(a1 + 144) == 3) {
      unsigned int v8 = quantize3_ord_dither;
    }
    *(void *)(v2 + 8) = v8;
    *(_DWORD *)(v2 + 76) = 0;
    if (!*(_DWORD *)(v2 + 56)) {
      create_colorindex(a1);
    }
    if (!*(void *)(v2 + 80))
    {
      int v9 = *(_DWORD *)(a1 + 144);
      if (v9 >= 1)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 656);
        uint64_t v12 = v11 + 60;
        do
        {
          int v13 = *(_DWORD *)(v11 + 4 * v10 + 60);
          if (!v10) {
            goto LABEL_25;
          }
          uint64_t v14 = 0;
          while (v13 != *(_DWORD *)(v12 + 4 * v14))
          {
            if (v10 == ++v14) {
              goto LABEL_25;
            }
          }
          uint64_t v15 = *(void *)(v12 + 8 * v14 + 20);
          if (!v15)
          {
LABEL_25:
            uint64_t v15 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 1024);
            uint64_t v16 = 0;
            int v17 = (unsigned __int8 *)&base_dither_matrix;
            uint64_t v18 = v15;
            do
            {
              for (uint64_t i = 0; i != 16; ++i)
                *(_DWORD *)(v18 + 4 * i) = 255 * (255 - 2 * v17[i]) / ((uint64_t)(v13 - 1) << 9);
              ++v16;
              v18 += 64;
              v17 += 16;
            }
            while (v16 != 16);
            int v9 = *(_DWORD *)(a1 + 144);
          }
          *(void *)(v11 + 8 * v10++ + 8CoreML::Specification::Normalizer::New(this, 0) = v15;
        }
        while (v10 < v9);
      }
    }
  }
  else if (v3)
  {
    uint64_t v20 = *(void *)a1;
    *(_DWORD *)(v20 + 4CoreML::Specification::Normalizer::New(this, 0) = 49;
    int8x8_t v21 = *(void (**)(void))v20;
    v21();
  }
  else
  {
    if (*(_DWORD *)(a1 + 144) == 3) {
      uint64_t v4 = color_quantize3;
    }
    else {
      uint64_t v4 = color_quantize;
    }
    *(void *)(v2 + 8) = v4;
  }
}

uint64_t new_color_map_1_quant(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(_DWORD *)(v1 + 4CoreML::Specification::Normalizer::New(this, 0) = 47;
  return (*(uint64_t (**)(uint64_t *))v1)(a1);
}

uint64_t create_colorindex(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  int v3 = *(_DWORD *)(a1 + 112);
  if (v3 == 1) {
    uint64_t v4 = 766;
  }
  else {
    uint64_t v4 = 256;
  }
  *(_DWORD *)(v2 + 56) = v3 == 1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(a1 + 8) + 16))(a1, 1, v4, *(unsigned int *)(a1 + 144));
  *(void *)(v2 + 48) = result;
  if (*(int *)(a1 + 144) >= 1)
  {
    uint64_t v6 = 0;
    int v7 = *(_DWORD *)(v2 + 40);
    do
    {
      uint64_t v8 = *(int *)(v2 + 4 * v6 + 60);
      uint64_t v9 = *(void *)(v2 + 48);
      if (v3 == 1)
      {
        *(void *)(v9 + 8 * v6) += 255;
        uint64_t v9 = *(void *)(v2 + 48);
      }
      uint64_t v10 = 0;
      int v11 = 0;
      uint64_t v12 = *(char **)(v9 + 8 * v6);
      uint64_t v13 = v8 - 1;
      uint64_t v14 = 2 * ((int)v8 - 1);
      uint64_t v15 = (v8 + 254) / v14;
      v7 /= (int)v8;
      do
      {
        if (v10 > (int)v15)
        {
          int v16 = 2 * v11 + 3;
          do
          {
            uint64_t v15 = (v13 - v16 + ((uint64_t)v16 << 8)) / v14;
            ++v11;
            v16 += 2;
          }
          while (v10 > (int)v15);
        }
        v12[v10++] = v11 * v7;
      }
      while (v10 != 256);
      if (v3 == 1)
      {
        uint64_t v17 = 0;
        char v18 = *v12;
        int64x2_t v19 = v12 + 256;
        do
        {
          v12[v17 - 1] = v18;
          *v19++ = v12[255];
          --v17;
        }
        while (v17 != -255);
      }
      ++v6;
    }
    while (v6 < *(int *)(a1 + 144));
  }
  return result;
}

uint64_t alloc_fs_workspace(uint64_t result)
{
  if (*(int *)(result + 144) >= 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = 0;
    uint64_t v3 = 2 * (*(_DWORD *)(result + 136) + 2);
    uint64_t v4 = *(void *)(result + 656) + 112;
    do
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 8) + 8))(v1, 1, v3);
      *(void *)(v4 + 8 * v2++) = result;
    }
    while (v2 < *(int *)(v1 + 144));
  }
  return result;
}

uint64_t color_quantize3(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(uint64_t **)(*(void *)(result + 656) + 48);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v8 = v5[2];
    int v9 = *(_DWORD *)(result + 136);
    do
    {
      if (v9)
      {
        uint64_t v10 = *(unsigned char **)(a3 + 8 * v4);
        int v11 = *(unsigned __int8 **)(a2 + 8 * v4);
        int v12 = v9;
        do
        {
          uint64_t result = *(unsigned __int8 *)(v7 + v11[1]);
          *v10++ = result + *(unsigned char *)(v6 + *v11) + *(unsigned char *)(v8 + v11[2]);
          v11 += 3;
          --v12;
        }
        while (v12);
      }
      ++v4;
    }
    while (v4 != a4);
  }
  return result;
}

uint64_t color_quantize(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(uint64_t **)(*(void *)(result + 656) + 48);
    int v6 = *(_DWORD *)(result + 136);
    uint64_t v7 = *(unsigned int *)(result + 144);
    uint64_t v8 = a4;
    do
    {
      if (v6)
      {
        int v9 = *(unsigned char **)(a3 + 8 * v4);
        uint64_t v10 = *(unsigned __int8 **)(a2 + 8 * v4);
        int v11 = v6;
        do
        {
          if ((int)v7 < 1)
          {
            char v12 = 0;
          }
          else
          {
            char v12 = 0;
            uint64_t result = v7;
            uint64_t v13 = v5;
            uint64_t v14 = v10;
            do
            {
              uint64_t v16 = *v13++;
              uint64_t v15 = v16;
              LODWORD(v16) = *v14++;
              v12 += *(unsigned char *)(v15 + v16);
              --result;
            }
            while (result);
            v10 += (v7 - 1) + 1;
          }
          *v9++ = v12;
          --v11;
        }
        while (v11);
      }
      ++v4;
    }
    while (v4 != v8);
  }
  return result;
}

uint64_t quantize3_ord_dither(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(result + 656);
    int v6 = *(uint64_t **)(v5 + 48);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v9 = v6[2];
    int v10 = *(_DWORD *)(result + 136);
    uint64_t v11 = a4;
    int v12 = *(_DWORD *)(v5 + 76);
    do
    {
      if (v10)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(v5 + 80) + ((uint64_t)v12 << 6);
        uint64_t result = *(void *)(v5 + 88) + ((uint64_t)v12 << 6);
        uint64_t v15 = *(void *)(v5 + 96) + ((uint64_t)v12 << 6);
        uint64_t v16 = *(unsigned char **)(a3 + 8 * v4);
        uint64_t v17 = *(unsigned __int8 **)(a2 + 8 * v4);
        int v18 = v10;
        do
        {
          *v16++ = *(unsigned char *)(v8 + *(int *)(result + 4 * v13) + (unint64_t)v17[1])
                 + *(unsigned char *)(v7 + *(int *)(v14 + 4 * v13) + (unint64_t)*v17)
                 + *(unsigned char *)(v9 + *(int *)(v15 + 4 * v13) + (unint64_t)v17[2]);
          uint64_t v13 = ((_BYTE)v13 + 1) & 0xF;
          v17 += 3;
          --v18;
        }
        while (v18);
      }
      int v12 = ((_BYTE)v12 + 1) & 0xF;
      *(_DWORD *)(v5 + 76) = v12;
      ++v4;
    }
    while (v4 != v11);
  }
  return result;
}

void quantize_ord_dither(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 656);
    size_t v8 = *(unsigned int *)(a1 + 136);
    uint64_t v9 = *(unsigned int *)(a1 + 144);
    int v10 = *(_DWORD *)(a1 + 144);
    uint64_t v11 = a4;
    do
    {
      bzero(*(void **)(a3 + 8 * v6), v8);
      uint64_t v12 = *(int *)(v7 + 76);
      if (v10 >= 1)
      {
        uint64_t v13 = 0;
        do
        {
          if (v8)
          {
            uint64_t v14 = 0;
            uint64_t v15 = *(void *)(*(void *)(v7 + 48) + 8 * v13);
            uint64_t v16 = *(void *)(v7 + 8 * v13 + 80) + (v12 << 6);
            uint64_t v17 = *(unsigned char **)(a3 + 8 * v6);
            uint64_t v18 = *(void *)(a2 + 8 * v6);
            int v19 = v8;
            do
            {
              *v17++ += *(unsigned char *)(v15 + *(int *)(v16 + 4 * v14) + (unint64_t)*(unsigned __int8 *)(v18 + v13));
              uint64_t v14 = ((_BYTE)v14 + 1) & 0xF;
              v18 += (int)v9;
              --v19;
            }
            while (v19);
          }
          ++v13;
        }
        while (v13 != v9);
      }
      *(_DWORD *)(v7 + 76) = ((_BYTE)v12 + 1) & 0xF;
      ++v6;
    }
    while (v6 != v11);
  }
}

void quantize_fs_dither(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 656);
    uint64_t v8 = *(unsigned int *)(a1 + 144);
    size_t v9 = *(unsigned int *)(a1 + 136);
    uint64_t v10 = *(void *)(a1 + 440);
    uint64_t v11 = (v9 - 1);
    uint64_t v12 = (v11 * v8);
    uint64_t v13 = -(int)v8;
    uint64_t v31 = a4;
    do
    {
      uint64_t v14 = v13;
      uint64_t v15 = v11;
      bzero(*(void **)(a3 + 8 * v6), v9);
      uint64_t v11 = v15;
      uint64_t v13 = v14;
      if ((int)v8 >= 1)
      {
        for (uint64_t i = 0; i != v8; ++i)
        {
          uint64_t v17 = (unsigned __int8 *)(*(void *)(a2 + 8 * v6) + i);
          uint64_t v18 = *(unsigned char **)(a3 + 8 * v6);
          if (*(_DWORD *)(v7 + 144))
          {
            v17 += v12;
            v18 += v11;
            int v19 = (_WORD *)(*(void *)(v7 + 8 * i + 112) + 2 * (v9 + 1));
            uint64_t v20 = -1;
            int v21 = v14;
          }
          else
          {
            int v19 = *(_WORD **)(v7 + 8 * i + 112);
            uint64_t v20 = 1;
            int v21 = v8;
          }
          __int16 v22 = 0;
          if (v9)
          {
            __int16 v23 = 0;
            int v24 = 0;
            uint64_t v25 = *(void *)(*(void *)(v7 + 48) + 8 * i);
            uint64_t v26 = *(void *)(*(void *)(v7 + 32) + 8 * i);
            int v27 = v9;
            do
            {
              uint64_t v28 = *(unsigned __int8 *)(v10 + *v17 + (uint64_t)((v24 + (__int16)v19[v20] + 8) >> 4));
              uint64_t v29 = *(unsigned __int8 *)(v25 + v28);
              *v18 += v29;
              LODWORD(v29) = v28 - *(unsigned __int8 *)(v26 + v29);
              __int16 v30 = 3 * v29 + v22;
              __int16 v22 = 5 * v29 + v23;
              int v24 = 7 * v29;
              v17 += v21;
              *int v19 = v30;
              v18 += v20;
              v19 += v20;
              __int16 v23 = v29;
              --v27;
            }
            while (v27);
          }
          *int v19 = v22;
        }
      }
      *(_DWORD *)(v7 + 144) = *(_DWORD *)(v7 + 144) == 0;
      ++v6;
    }
    while (v6 != v31);
  }
}

void CoreML::validate<(MLModelType)609>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v3 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  if (*(_DWORD *)(a1 + 44) != 609)
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "Model not an array feature extractor.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if ((SHIBYTE(__p) & 0x80000000) == 0) {
      return;
    }
    uint64_t v10 = v17;
    goto LABEL_34;
  }
  CoreML::Result::Result((CoreML::Result *)&v17);
  CoreML::validateModelDescription((CoreML *)v3, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v14);
  uint64_t v17 = v14;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v15;
  uint64_t v19 = v16;
  if (!CoreML::Result::good((CoreML::Result *)&v17)) {
    goto LABEL_31;
  }
  uint64_t v5 = operator new(4uLL);
  uint64_t v11 = v5;
  *uint64_t v5 = 5;
  uint64_t v12 = v5 + 1;
  uint64_t v13 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 2), 1, (int **)&v11, (uint64_t)&v14);
  uint64_t v17 = v14;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v15;
  uint64_t v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v17)) {
    goto LABEL_31;
  }
  uint64_t v6 = operator new(0xCuLL);
  uint64_t v12 = v6 + 3;
  uint64_t v13 = v6 + 3;
  *(void *)uint64_t v6 = 0x100000002;
  std::string v6[2] = 5;
  uint64_t v11 = v6;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v3 + 5), 1, (int **)&v11, (uint64_t)&v14);
  uint64_t v17 = v14;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v15;
  uint64_t v19 = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v17);
  if (!v7) {
    goto LABEL_31;
  }
  if (*((_DWORD *)v3 + 6) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "Exactly one input array column must be specified.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_27;
  }
  uint64_t v8 = *(uint64_t **)(*(void *)(v3[7] + 8) + 32);
  if (!v8) {
    uint64_t v8 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  if (*((_DWORD *)v8 + 9) == 2)
  {
    size_t v9 = *(_DWORD *)(a1 + 44) == 609
       ? *(uint64_t **)(a1 + 32)
       : CoreML::Specification::ArrayFeatureExtractor::default_instance((CoreML::Specification::ArrayFeatureExtractor *)v7);
    if (*((_DWORD *)v9 + 4) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "If output type is Double in interface, exactly one extraction index must be specified.");
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_27:
      if (SHIBYTE(v15) < 0) {
        operator delete(v14);
      }
      goto LABEL_32;
    }
  }
LABEL_31:
  *(void *)a2 = v17;
  *(_OWORD *)(a2 + 8) = __p;
  *(void *)(a2 + 24) = v19;
  long long __p = 0uLL;
  uint64_t v19 = 0;
LABEL_32:
  if ((SHIBYTE(v19) & 0x80000000) == 0) {
    return;
  }
  uint64_t v10 = (void *)__p;
LABEL_34:
  operator delete(v10);
}

void sub_2242C88F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t jinit_2pass_quantizer(uint64_t a1)
{
  uint64_t v2 = (**(uint64_t (***)(void))(a1 + 8))();
  *(void *)(a1 + 656) = v2;
  *(void *)uint64_t v2 = start_pass_2_quant;
  *(void *)(v2 + 24) = new_color_map_2_quant;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 8CoreML::Specification::Normalizer::New(this, 0) = 0;
  if (*(_DWORD *)(a1 + 144) != 3)
  {
    uint64_t v3 = *(void *)a1;
    *(_DWORD *)(v3 + 4CoreML::Specification::Normalizer::New(this, 0) = 48;
    (*(void (**)(uint64_t))v3)(a1);
  }
  uint64_t v4 = 0;
  *(void *)(v2 + 48) = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a1, 1, 256);
  do
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 4096);
    *(void *)(*(void *)(v2 + 48) + v4) = result;
    v4 += 8;
  }
  while (v4 != 256);
  *(_DWORD *)(v2 + 56) = 1;
  if (!*(_DWORD *)(a1 + 132))
  {
    *(void *)(v2 + 32) = 0;
    goto LABEL_13;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 120);
  if ((int)v6 < 8)
  {
    uint64_t v7 = 0x80000003ALL;
LABEL_11:
    *(void *)(*(void *)a1 + 4CoreML::Specification::Normalizer::New(this, 0) = v7;
    (**(void (***)(uint64_t))a1)(a1);
    goto LABEL_12;
  }
  if (v6 >= 0x101)
  {
    uint64_t v7 = 0x1000000003BLL;
    goto LABEL_11;
  }
LABEL_12:
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 16))(a1, 1, v6, 3);
  *(void *)(v2 + 32) = result;
  *(_DWORD *)(v2 + 4CoreML::Specification::Normalizer::New(this, 0) = v6;
LABEL_13:
  if (*(_DWORD *)(a1 + 112))
  {
    *(_DWORD *)(a1 + 112) = 2;
    *(void *)(v2 + 64) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 8))(a1, 1, 6 * (*(_DWORD *)(a1 + 136) + 2));
    return init_error_limit(a1);
  }
  return result;
}

void start_pass_2_quant(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 656);
  uint64_t v4 = *(void *)(v3 + 48);
  if (*(_DWORD *)(a1 + 112))
  {
    *(_DWORD *)(a1 + 112) = 2;
    uint64_t v5 = pass2_fs_dither;
    if (a2)
    {
LABEL_3:
      *(void *)(v3 + 8) = prescan_quantize;
      *(void *)(v3 + 16) = finish_pass1;
      *(_DWORD *)(v3 + 56) = 1;
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v5 = pass2_no_dither;
    if (a2) {
      goto LABEL_3;
    }
  }
  *(void *)(v3 + 8) = v5;
  *(void *)(v3 + 16) = finish_pass2;
  int v6 = *(_DWORD *)(a1 + 156);
  if (v6 < 1)
  {
    uint64_t v7 = 0x10000003ALL;
  }
  else
  {
    if (v6 < 0x101) {
      goto LABEL_10;
    }
    uint64_t v7 = 0x1000000003BLL;
  }
  *(void *)(*(void *)a1 + 4CoreML::Specification::Normalizer::New(this, 0) = v7;
  (**(void (***)(uint64_t))a1)(a1);
LABEL_10:
  if (*(_DWORD *)(a1 + 112) == 2)
  {
    size_t v8 = 6 * (*(_DWORD *)(a1 + 136) + 2);
    size_t v9 = *(void **)(v3 + 64);
    if (!v9)
    {
      size_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(void *)(a1 + 8) + 8))(a1, 1, v8);
      *(void *)(v3 + 64) = v9;
    }
    bzero(v9, v8);
    if (!*(void *)(v3 + 80)) {
      init_error_limit(a1);
    }
    *(_DWORD *)(v3 + 72) = 0;
  }
LABEL_16:
  if (*(_DWORD *)(v3 + 56))
  {
    for (uint64_t i = 0; i != 256; i += 8)
      bzero(*(void **)(v4 + i), 0x1000uLL);
    *(_DWORD *)(v3 + 56) = 0;
  }
}

uint64_t new_color_map_2_quant(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 656) + 56) = 1;
  return result;
}

uint64_t init_error_limit(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 656);
  uint64_t result = (**(uint64_t (***)(void))(a1 + 8))();
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = result + 1020;
  *(void *)(v1 + 8CoreML::Specification::Normalizer::New(this, 0) = result + 1020;
  do
  {
    *(_DWORD *)(v5 + 4 * v4) = v4;
    *(_DWORD *)(v5 + 4 * v3) = v3;
    ++v4;
    --v3;
  }
  while (v4 != 16);
  int v6 = 16;
  uint64_t v7 = 271;
  uint64_t v8 = 956;
  do
  {
    *(_DWORD *)(result + 4 * v7) = v6;
    *(_DWORD *)(result + v8) = -v6;
    v6 += ((v7++ - 254) & 1) == 0;
    v8 -= 4;
  }
  while (v7 != 303);
  uint64_t v9 = 1212;
  for (uint64_t i = 828; i != -4; i -= 4)
  {
    *(_DWORD *)(result + v9) = 32;
    *(_DWORD *)(result + i) = -32;
    v9 += 4;
  }
  return result;
}

uint64_t prescan_quantize(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(*(void *)(result + 656) + 48);
    int v6 = *(_DWORD *)(result + 136);
    do
    {
      if (v6)
      {
        uint64_t v7 = *(unsigned char **)(a2 + 8 * v4);
        int v8 = v6;
        do
        {
          uint64_t v9 = *(void *)(v5 + (*v7 & 0xF8)) + ((16 * v7[1]) & 0xFC0);
          unint64_t v10 = ((unint64_t)v7[2] >> 2) & 0x3E;
          int v11 = *(unsigned __int16 *)(v9 + v10);
          if (((v11 + 1) & 0x10000) == 0) {
            LOWORD(v11) = v11 + 1;
          }
          *(_WORD *)(v9 + v1CoreML::Specification::Normalizer::New(this, 0) = v11;
          v7 += 3;
          --v8;
        }
        while (v8);
      }
      ++v4;
    }
    while (v4 != a4);
  }
  return result;
}

uint64_t finish_pass1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  *(void *)(a1 + 16CoreML::Specification::Normalizer::New(this, 0) = *(void *)(v2 + 32);
  uint64_t v56 = v2;
  int v3 = *(_DWORD *)(v2 + 40);
  uint64_t v4 = (**(uint64_t (***)(void))(a1 + 8))();
  *(_OWORD *)uint64_t v4 = xmmword_2246ED9D0;
  *(void *)(v4 + 16) = 0x1F00000000;
  uint64_t v58 = v4;
  uint64_t v59 = a1;
  update_box(a1, v4);
  unsigned int v5 = 1;
  if (v3 < 2) {
    goto LABEL_35;
  }
  uint64_t v6 = 1;
  while (1)
  {
    if (v3 >= (unint64_t)(2 * v6))
    {
      uint64_t v7 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = v6;
      uint64_t v10 = v58;
      uint64_t v14 = v58;
      do
      {
        if (*(void *)(v14 + 32) > v12 && *(uint64_t *)(v14 + 24) > 0)
        {
          uint64_t v12 = *(void *)(v14 + 32);
          uint64_t v7 = v14;
        }
        v14 += 40;
        --v13;
      }
      while (v13);
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = v6;
      uint64_t v10 = v58;
      uint64_t v11 = v58;
      do
      {
        if (*(void *)(v11 + 24) > v8)
        {
          uint64_t v8 = *(void *)(v11 + 24);
          uint64_t v7 = v11;
        }
        v11 += 40;
        --v9;
      }
      while (v9);
    }
    if (!v7) {
      break;
    }
    uint64_t v15 = v10 + 40 * v6;
    *(_DWORD *)(v15 + 2CoreML::Specification::Normalizer::New(this, 0) = *(_DWORD *)(v7 + 20);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v7;
    int v16 = *(_DWORD *)(v7 + 20);
    *(_DWORD *)(v15 + 16) = *(_DWORD *)(v7 + 16);
    uint64_t v17 = (_DWORD *)(v15 + 16);
    int v19 = *(_DWORD *)v7;
    int v18 = *(_DWORD *)(v7 + 4);
    int v20 = 16 * (v18 - *(_DWORD *)v7);
    int v22 = *(_DWORD *)(v7 + 8);
    int v21 = *(_DWORD *)(v7 + 12);
    int v23 = *(_DWORD *)(v7 + 16);
    BOOL v24 = v20 <= 12 * (v21 - v22);
    if (v20 <= 12 * (v21 - v22)) {
      int v20 = 12 * (v21 - v22);
    }
    if (v20 >= 8 * (v16 - v23)) {
      int v25 = v24;
    }
    else {
      int v25 = 2;
    }
    if (v25 == 2)
    {
      int v28 = v23 + v16;
      if (v23 + v16 < 0 != __OFADD__(v23, v16)) {
        ++v28;
      }
      int v27 = v28 >> 1;
      *(_DWORD *)(v7 + 2CoreML::Specification::Normalizer::New(this, 0) = v27;
    }
    else if (v25 == 1)
    {
      uint64_t v17 = (_DWORD *)(v10 + 40 * v6 + 8);
      int v29 = v22 + v21;
      if (v22 + v21 < 0 != __OFADD__(v22, v21)) {
        ++v29;
      }
      int v27 = v29 >> 1;
      *(_DWORD *)(v7 + 12) = v27;
    }
    else
    {
      int v26 = v19 + v18;
      if (v19 + v18 < 0 != __OFADD__(v19, v18)) {
        ++v26;
      }
      int v27 = v26 >> 1;
      *(_DWORD *)(v7 + 4) = v26 >> 1;
      uint64_t v17 = (_DWORD *)(v10 + 40 * v6);
    }
    *uint64_t v17 = v27 + 1;
    update_box(a1, v7);
    update_box(a1, v15);
    if (++v6 == v3) {
      goto LABEL_34;
    }
  }
  int v3 = v6;
LABEL_34:
  unsigned int v5 = v3;
  if (v3 >= 1)
  {
LABEL_35:
    uint64_t v30 = 0;
    unsigned int v55 = v5;
    uint64_t v57 = v5;
    do
    {
      uint64_t v31 = (int *)(v58 + 40 * v30);
      int v32 = v31[1];
      uint64_t v33 = *v31;
      if ((int)v33 <= v32)
      {
        uint64_t v37 = 0;
        uint64_t v36 = 0;
        uint64_t v35 = 0;
        uint64_t v34 = 0;
        uint64_t v38 = (int *)(v58 + 40 * v30);
        int v39 = v38[5];
        uint64_t v40 = v38[4];
        int v41 = v38[3];
        uint64_t v42 = v38[2];
        int v43 = v32 + 1;
        do
        {
          if ((int)v42 <= v41)
          {
            uint64_t v44 = v42;
            do
            {
              if ((int)v40 <= v39)
              {
                int v45 = (8 * v40) | 4;
                int v46 = v39 - v40 + 1;
                int v47 = (unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v59 + 656) + 48) + 8 * v33)
                                         + (v44 << 6)
                                         + 2 * v40);
                do
                {
                  unsigned int v48 = *v47++;
                  uint64_t v49 = v34 + v48;
                  uint64_t v50 = v35 + (int)v48 * (uint64_t)(int)((8 * v33) | 4);
                  uint64_t v51 = v36 + (int)v48 * (uint64_t)(int)((4 * v44) | 2);
                  uint64_t v52 = v37 + (int)v48 * (uint64_t)v45;
                  if (v48)
                  {
                    uint64_t v34 = v49;
                    uint64_t v35 = v50;
                    uint64_t v36 = v51;
                    uint64_t v37 = v52;
                  }
                  v45 += 8;
                  --v46;
                }
                while (v46);
              }
              ++v44;
            }
            while (v41 + 1 != v44);
          }
          ++v33;
        }
        while (v43 != v33);
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        uint64_t v37 = 0;
      }
      *(unsigned char *)(**(void **)(v59 + 160) + v3CoreML::Specification::Normalizer::New(this, 0) = (v35 + (v34 >> 1)) / v34;
      *(unsigned char *)(*(void *)(*(void *)(v59 + 160) + 8) + v3CoreML::Specification::Normalizer::New(this, 0) = (v36 + (v34 >> 1)) / v34;
      *(unsigned char *)(*(void *)(*(void *)(v59 + 160) + 16) + v30++) = (v37 + (v34 >> 1)) / v34;
    }
    while (v30 != v57);
    unsigned int v5 = v55;
  }
  *(_DWORD *)(v59 + 156) = v5;
  uint64_t v53 = *(void *)v59;
  *(_DWORD *)(v53 + 4CoreML::Specification::Normalizer::New(this, 0) = 98;
  *(_DWORD *)(v53 + 44) = v5;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v59 + 8))(v59, 1);
  *(_DWORD *)(v56 + 56) = 1;
  return result;
}

uint64_t pass2_fs_dither(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v56 = result;
  if (a4 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(result + 656);
    uint64_t v6 = *(void *)(v5 + 48);
    int v7 = *(_DWORD *)(result + 136);
    uint64_t result = *(void *)(result + 440);
    uint64_t v8 = *(void *)(v5 + 80);
    uint64_t v9 = *(uint64_t **)(v56 + 160);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = v9[2];
    uint64_t v44 = (v7 - 1);
    uint64_t v42 = (3 * v7 + 3);
    uint64_t v43 = (3 * v7 - 3);
    uint64_t v45 = a4;
    uint64_t v47 = *(void *)(v56 + 656);
    int v46 = *(_DWORD *)(v56 + 136);
    uint64_t v54 = *v9;
    uint64_t v55 = *(void *)(v56 + 440);
    uint64_t v52 = v12;
    uint64_t v53 = v6;
    uint64_t v51 = v8;
    do
    {
      uint64_t v13 = *(void *)(a2 + 8 * v4);
      uint64_t v14 = *(unsigned char **)(a3 + 8 * v4);
      uint64_t v50 = v4;
      if (*(_DWORD *)(v5 + 72))
      {
        int v15 = 0;
        v13 += v43;
        v14 += v44;
        int v16 = (_WORD *)(*(void *)(v5 + 64) + 2 * v42);
        int v17 = -3;
        uint64_t v18 = -1;
      }
      else
      {
        int v16 = *(_WORD **)(v5 + 64);
        int v17 = 3;
        int v15 = 1;
        uint64_t v18 = 1;
      }
      *(_DWORD *)(v5 + 72) = v15;
      if (v7)
      {
        int v19 = 0;
        __int16 v20 = 0;
        __int16 v21 = 0;
        __int16 v22 = 0;
        __int16 v23 = 0;
        __int16 v24 = 0;
        __int16 v25 = 0;
        int v26 = 0;
        int v27 = 0;
        uint64_t v60 = v17;
        uint64_t v61 = v17;
        int v28 = (unsigned __int8 *)(v13 + 2);
        int v29 = v16;
        uint64_t v57 = v18;
        do
        {
          __int16 v62 = v23;
          __int16 v63 = v22;
          __int16 v64 = v21;
          int v16 = &v29[v60];
          unint64_t v30 = *(unsigned __int8 *)(result
                                   + *(int *)(v8 + 4 * ((v19 + (__int16)v29[v60] + 8) >> 4))
                                   + (unint64_t)*(v28 - 2));
          unint64_t v31 = *(unsigned __int8 *)(result
                                   + *(int *)(v8 + 4 * ((v27 + (__int16)v29[v60 + 1] + 8) >> 4))
                                   + (unint64_t)*(v28 - 1));
          unint64_t v32 = *(unsigned __int8 *)(result
                                   + *(int *)(v8 + 4 * ((v26 + (__int16)v29[v60 + 2] + 8) >> 4))
                                   + (unint64_t)*v28);
          uint64_t v33 = (_WORD *)(*(void *)(v6 + 8 * (v30 >> 3)) + (v31 >> 2 << 6) + 2 * (v32 >> 3));
          unsigned int v34 = (unsigned __int16)*v33;
          if (!*v33)
          {
            uint64_t v35 = v11;
            __int16 v59 = v24;
            __int16 v58 = v25;
            fill_inverse_cmap(v56, v30 >> 3, v31 >> 2, v32 >> 3);
            __int16 v25 = v58;
            __int16 v24 = v59;
            uint64_t v8 = v51;
            uint64_t v12 = v52;
            uint64_t v11 = v35;
            uint64_t v18 = v57;
            uint64_t v10 = v54;
            uint64_t result = v55;
            uint64_t v6 = v53;
            unsigned int v34 = (unsigned __int16)*v33;
          }
          uint64_t v36 = v34 - 1;
          *uint64_t v14 = v36;
          int v37 = v30 - *(unsigned __int8 *)(v10 + v36);
          int v38 = v31 - *(unsigned __int8 *)(v11 + v36);
          int v39 = v32 - *(unsigned __int8 *)(v12 + v36);
          __int16 v22 = 5 * v37 + v25;
          __int16 v40 = 3 * (v31 - *(unsigned __int8 *)(v11 + v36)) + v64;
          __int16 v21 = 5 * v38 + v24;
          __int16 v41 = 3 * (v32 - *(unsigned __int8 *)(v12 + v36)) + v20;
          int v19 = 7 * v37;
          __int16 v20 = 5 * v39 + v62;
          int v27 = 7 * v38;
          _WORD *v29 = 3 * (v30 - *(unsigned __int8 *)(v10 + v36)) + v63;
          v29[1] = v40;
          int v26 = 7 * v39;
          v14 += v18;
          v28 += v61;
          v29[2] = v41;
          int v29 = (_WORD *)((char *)v29 + v60 * 2);
          __int16 v23 = v39;
          __int16 v24 = v38;
          __int16 v25 = v37;
          --v7;
        }
        while (v7);
      }
      else
      {
        __int16 v22 = 0;
        __int16 v21 = 0;
        __int16 v20 = 0;
      }
      *int v16 = v22;
      v16[1] = v21;
      void v16[2] = v20;
      uint64_t v4 = v50 + 1;
      uint64_t v5 = v47;
      int v7 = v46;
    }
    while (v50 + 1 != v45);
  }
  return result;
}

void pass2_no_dither(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(*(void *)(a1 + 656) + 48);
    int v8 = *(_DWORD *)(a1 + 136);
    uint64_t v9 = a4;
    do
    {
      if (v8)
      {
        uint64_t v10 = *(unsigned char **)(a3 + 8 * v6);
        uint64_t v11 = *(unsigned __int8 **)(a2 + 8 * v6);
        int v12 = v8;
        do
        {
          unint64_t v13 = (unint64_t)*v11 >> 3;
          unint64_t v14 = (unint64_t)v11[1] >> 2;
          unint64_t v15 = (unint64_t)v11[2] >> 3;
          int v16 = (__int16 *)(*(void *)(v7 + 8 * v13) + (v14 << 6) + 2 * v15);
          __int16 v17 = *v16;
          if (!*v16)
          {
            fill_inverse_cmap(a1, v13, v14, v15);
            LOBYTE(v17) = *(unsigned char *)v16;
          }
          *v10++ = v17 - 1;
          v11 += 3;
          --v12;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != v9);
  }
}

uint64_t update_box(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 656) + 48);
  LODWORD(v4) = *(_DWORD *)a2;
  int v3 = *(_DWORD *)(a2 + 4);
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 12);
  uint64_t v7 = v5;
  int v8 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  uint64_t v10 = v8;
  if (v3 > *(_DWORD *)a2)
  {
    uint64_t v11 = (int)v4;
    uint64_t result = (v6 + 1);
    while (v5 > v6)
    {
LABEL_4:
      if (v3 + 1 == ++v11) {
        goto LABEL_14;
      }
    }
    uint64_t v12 = v5;
    while (v8 > v9)
    {
LABEL_11:
      if (result == ++v12) {
        goto LABEL_4;
      }
    }
    unint64_t v13 = (_WORD *)(*(void *)(v2 + 8 * v11) + (v12 << 6) + 2 * v8);
    int v14 = v9 - v8 + 1;
    while (!*v13)
    {
      ++v13;
      if (!--v14) {
        goto LABEL_11;
      }
    }
    *(_DWORD *)a2 = v11;
    LODWORD(v4) = v11;
  }
LABEL_14:
  if (v3 > (int)v4)
  {
    uint64_t v15 = v3;
    uint64_t result = (v6 + 1);
    while (v5 > v6)
    {
LABEL_17:
      BOOL v16 = v15-- <= (int)v4;
      if (v16) {
        goto LABEL_28;
      }
    }
    uint64_t v17 = v5;
    while (v8 > v9)
    {
LABEL_25:
      if (result == ++v17) {
        goto LABEL_17;
      }
    }
    uint64_t v18 = (_WORD *)(*(void *)(v2 + 8 * v15) + (v17 << 6) + 2 * v8);
    int v19 = v9 - v8 + 1;
    while (!*v18)
    {
      ++v18;
      if (!--v19) {
        goto LABEL_25;
      }
    }
    *(_DWORD *)(a2 + 4) = v15;
    int v3 = v15;
  }
LABEL_28:
  if (v6 > v5)
  {
    uint64_t result = (v3 + 1);
    while (v3 < (int)v4)
    {
LABEL_31:
      if (v6 + 1 == ++v7) {
        goto LABEL_41;
      }
    }
    uint64_t v20 = (int)v4;
    while (v8 > v9)
    {
LABEL_38:
      if (result == ++v20) {
        goto LABEL_31;
      }
    }
    __int16 v21 = (_WORD *)(*(void *)(v2 + 8 * v20) + (v7 << 6) + 2 * v8);
    int v22 = v9 - v8 + 1;
    while (!*v21)
    {
      ++v21;
      if (!--v22) {
        goto LABEL_38;
      }
    }
    *(_DWORD *)(a2 + 8) = v7;
    int v5 = v7;
  }
LABEL_41:
  if (v6 > v5)
  {
    uint64_t v23 = v6;
    uint64_t result = (v3 + 1);
    while (v3 < (int)v4)
    {
LABEL_44:
      BOOL v16 = v23-- <= v5;
      if (v16) {
        goto LABEL_55;
      }
    }
    uint64_t v24 = (int)v4;
    while (v8 > v9)
    {
LABEL_52:
      if (result == ++v24) {
        goto LABEL_44;
      }
    }
    __int16 v25 = (_WORD *)(*(void *)(v2 + 8 * v24) + (v23 << 6) + 2 * v8);
    int v26 = v9 - v8 + 1;
    while (!*v25)
    {
      ++v25;
      if (!--v26) {
        goto LABEL_52;
      }
    }
    *(_DWORD *)(a2 + 12) = v23;
    int v6 = v23;
  }
LABEL_55:
  if (v9 > v8)
  {
    uint64_t result = (v3 + 1);
    while (v3 < (int)v4)
    {
LABEL_58:
      if (v9 + 1 == ++v10) {
        goto LABEL_68;
      }
    }
    uint64_t v27 = (int)v4;
    while (v6 < v5)
    {
LABEL_65:
      if (result == ++v27) {
        goto LABEL_58;
      }
    }
    int v28 = (_WORD *)(*(void *)(v2 + 8 * v27) + ((uint64_t)v5 << 6) + 2 * v10);
    int v29 = v6 - v5 + 1;
    while (!*v28)
    {
      v28 += 32;
      if (!--v29) {
        goto LABEL_65;
      }
    }
    *(_DWORD *)(a2 + 16) = v10;
    int v8 = v10;
  }
LABEL_68:
  if (v9 > v8)
  {
    uint64_t v30 = v9;
    uint64_t result = (v3 + 1);
    while (v3 < (int)v4)
    {
LABEL_71:
      BOOL v16 = v30-- <= v8;
      if (v16) {
        goto LABEL_82;
      }
    }
    uint64_t v31 = (int)v4;
    while (v6 < v5)
    {
LABEL_79:
      if (result == ++v31) {
        goto LABEL_71;
      }
    }
    unint64_t v32 = (_WORD *)(*(void *)(v2 + 8 * v31) + ((uint64_t)v5 << 6) + 2 * v30);
    int v33 = v6 - v5 + 1;
    while (!*v32)
    {
      v32 += 32;
      if (!--v33) {
        goto LABEL_79;
      }
    }
    *(_DWORD *)(a2 + 2CoreML::Specification::Normalizer::New(this, 0) = v30;
    int v9 = v30;
  }
LABEL_82:
  *(void *)(a2 + 24) = 12 * (v6 - v5) * (uint64_t)(12 * (v6 - v5))
                       + 16 * (v3 - (int)v4) * (uint64_t)(16 * (v3 - (int)v4))
                       + 8 * (v9 - v8) * (uint64_t)(8 * (v9 - v8));
  uint64_t v34 = 0;
  if (v3 >= (int)v4)
  {
    uint64_t result = (v6 + 1);
    uint64_t v4 = (int)v4;
    int v35 = v3 + 1;
    do
    {
      if (v6 >= v5)
      {
        uint64_t v36 = v5;
        do
        {
          if (v9 >= v8)
          {
            int v37 = (unsigned __int16 *)(*(void *)(v2 + 8 * v4) + (v36 << 6) + 2 * v8);
            int v38 = v9 - v8 + 1;
            do
            {
              if (*v37++) {
                ++v34;
              }
              --v38;
            }
            while (v38);
          }
          ++v36;
        }
        while (result != v36);
      }
      ++v4;
    }
    while (v35 != v4);
  }
  *(void *)(a2 + 32) = v34;
  return result;
}

void fill_inverse_cmap(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  __b[256] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(*(void *)(a1 + 656) + 48);
  uint64_t v8 = *(unsigned int *)(a1 + 156);
  if ((int)v8 <= 0) {
    goto LABEL_43;
  }
  uint64_t v10 = 0;
  int v11 = (32 * (a2 >> 2)) | 4;
  uint64_t v12 = 4 * a3;
  unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFE0 | 2;
  uint64_t v14 = 8 * (int)a4;
  unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFE0 | 4;
  int v16 = (8 * a2) | 0x1C;
  uint64_t v17 = v12 | 0x1E;
  unsigned int v18 = (v13 + (v12 | 0x1E)) >> 1;
  uint64_t v19 = v14 | 0x1C;
  uint64_t v20 = *(uint64_t **)(a1 + 160);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v23 = v20[2];
  uint64_t v24 = 0x7FFFFFFFLL;
  do
  {
    signed int v25 = *(unsigned __int8 *)(v22 + v10);
    int v26 = v25 - v11;
    if (v25 < v11)
    {
      uint64_t v27 = 2 * v26 * (uint64_t)(2 * v26);
      int v26 = v25 - v16;
LABEL_9:
      int v29 = 2 * v26;
      goto LABEL_10;
    }
    int v28 = v25 - v16;
    if (v25 > v16)
    {
      uint64_t v27 = 2 * v28 * (uint64_t)(2 * v28);
      goto LABEL_9;
    }
    if ((v11 + v16) >> 1 < v25)
    {
      uint64_t v27 = 0;
      goto LABEL_9;
    }
    uint64_t v27 = 0;
    int v29 = 2 * v28;
LABEL_10:
    uint64_t v30 = v29 * (uint64_t)v29;
    uint64_t v31 = *(unsigned __int8 *)(v21 + v10);
    uint64_t v32 = 3 * (v31 - (int)v13) * 3 * (v31 - (int)v13);
    uint64_t v33 = 3 * (v31 - (int)v17);
    uint64_t v34 = v33 * v33;
    if (v18 < v31) {
      uint64_t v34 = 3 * (v31 - (int)v13) * 3 * (v31 - (int)v13);
    }
    uint64_t v35 = v27 + v33 * v33;
    if ((int)v31 <= (int)v17)
    {
      uint64_t v35 = v27;
      uint64_t v32 = v34;
    }
    unint64_t v36 = v27 + 3 * (v31 - v13) * 3 * (v31 - v13);
    if ((int)v31 < (int)v13)
    {
      uint64_t v37 = 3 * (v31 - v17) * 3 * (v31 - v17);
    }
    else
    {
      unint64_t v36 = v35;
      uint64_t v37 = v32;
    }
    uint64_t v38 = v37 + v30;
    uint64_t v39 = *(unsigned __int8 *)(v23 + v10);
    uint64_t v40 = (v39 - (int)v15) * (v39 - (int)v15);
    uint64_t v41 = v39 - (int)v19;
    uint64_t v42 = v41 * v41;
    if ((v15 + v19) >> 1 < v39) {
      uint64_t v42 = (v39 - (int)v15) * (v39 - (int)v15);
    }
    unint64_t v43 = v36 + v41 * v41;
    if ((int)v39 <= (int)v19)
    {
      unint64_t v43 = v36;
      uint64_t v40 = v42;
    }
    unint64_t v44 = v36 + (v39 - v15) * (v39 - v15);
    if ((int)v39 < (int)v15)
    {
      uint64_t v45 = (v39 - v19) * (v39 - v19);
    }
    else
    {
      unint64_t v44 = v43;
      uint64_t v45 = v40;
    }
    uint64_t v46 = v38 + v45;
    __b[v10] = v44;
    if (v46 < v24) {
      uint64_t v24 = v46;
    }
    ++v10;
  }
  while (v8 != v10);
  uint64_t v47 = 0;
  int v48 = 0;
  do
  {
    if (__b[v47] <= v24) {
      v78[v48++ + 128] = v47;
    }
    ++v47;
  }
  while (v8 != v47);
  memset_pattern16(__b, &unk_2246ED9E0, 0x400uLL);
  if (v48 >= 1)
  {
    uint64_t v49 = 0;
    uint64_t v50 = (int)v13;
    uint64_t v51 = (int)v15;
    uint64_t v52 = v48;
    do
    {
      uint64_t v53 = v78[v49 + 128];
      uint64_t v54 = *(void **)(a1 + 160);
      int v55 = 2 * (v11 - *(unsigned __int8 *)(*v54 + v53));
      uint64_t v56 = v50 - *(unsigned __int8 *)(v54[1] + v53);
      uint64_t v57 = v51 - *(unsigned __int8 *)(v54[2] + v53);
      uint64_t v58 = 3 * v56 * 3 * v56 + v55 * (uint64_t)v55 + v57 * v57;
      uint64_t v59 = 32 * v55 + 256;
      uint64_t v60 = 72 * v56 + 144;
      uint64_t v61 = 16 * v57 + 64;
      int v62 = 3;
      __int16 v63 = __b;
      __int16 v64 = v78;
      do
      {
        int v65 = v62;
        int v66 = 7;
        uint64_t v67 = v60;
        uint64_t v68 = v58;
        do
        {
          uint64_t v69 = 0;
          int v70 = v66;
          uint64_t v71 = v61;
          uint64_t v72 = v68;
          do
          {
            if (v72 < v63[v69])
            {
              v63[v69] = v72;
              unsigned char *v64 = v53;
            }
            v72 += v71;
            v71 += 128;
            ++v64;
            ++v69;
          }
          while ((v69 * 8) != 32);
          v68 += v67;
          v67 += 288;
          int v66 = v70 - 1;
          __int16 v63 = (void *)((char *)v63 + v69 * 8);
        }
        while (v70);
        v58 += v59;
        v59 += 512;
        int v62 = v65 - 1;
      }
      while (v65);
      ++v49;
    }
    while (v49 != v52);
  }
LABEL_43:
  uint64_t v73 = 0;
  int v74 = v78;
  do
  {
    uint64_t v75 = 0;
    uint64_t v76 = *(void *)(v7 + 8 * (v73 + (int)(a2 & 0xFFFFFFFC)))
        + ((2 * a4) & 0x1FFFFFFF8)
        + ((uint64_t)(int)(a3 & 0xFFFFFFF8) << 6);
    do
    {
      for (uint64_t i = 0; i != 4; ++i)
        *(_WORD *)(v76 + 2 * i) = v74[i] + 1;
      ++v75;
      v76 += 64;
      v74 += 4;
    }
    while (v75 != 8);
    ++v73;
  }
  while (v73 != 4);
}

uint64_t jdiv_round_up(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) / a2;
}

uint64_t jround_up(uint64_t a1, uint64_t a2)
{
  return (a1 + a2 - 1) / a2 * a2;
}

char *jcopy_sample_rows(char *result, int a2, uint64_t a3, int a4, int a5, size_t __n)
{
  if (a5 >= 1)
  {
    size_t v6 = __n;
    uint64_t v7 = (void **)(a3 + 8 * a4);
    unsigned int v8 = a5 + 1;
    int v9 = (const void **)&result[8 * a2];
    do
    {
      int v11 = *v9++;
      uint64_t v10 = v11;
      uint64_t v12 = *v7++;
      uint64_t result = (char *)memcpy(v12, v10, v6);
      --v8;
    }
    while (v8 > 1);
  }
  return result;
}

void *jcopy_block_row(void *__src, void *__dst, unsigned int a3)
{
  return memcpy(__dst, __src, (unint64_t)a3 << 7);
}

_DWORD *jsonChildren::inc(_DWORD *this)
{
  int v1 = this[2];
  if (v1 == this[3])
  {
    uint64_t v2 = this;
    if (v1)
    {
      uint64_t v3 = (2 * v1);
      this[3] = v3;
      this = json_realloc<JSONNode *>(*(void **)this, v3);
      *(void *)uint64_t v2 = this;
    }
    else
    {
      this = json_malloc<JSONNode *>(8);
      *(void *)uint64_t v2 = this;
      v2[3] = 8;
    }
  }
  return this;
}

void *json_malloc<JSONNode *>(uint64_t a1)
{
  return malloc_type_malloc(8 * a1, 0x2004093837F09uLL);
}

void *json_realloc<JSONNode *>(void *a1, uint64_t a2)
{
  return malloc_type_realloc(a1, 8 * a2, 0x2004093837F09uLL);
}

internalJSONNode **jsonChildren::deleteAll(internalJSONNode **this, JSONNode *a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2)
  {
    uint64_t v3 = (internalJSONNode ***)*this;
    uint64_t v4 = 8 * v2;
    do
    {
      int v5 = *v3++;
      this = JSONNode::deleteJSONNode(v5, a2);
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

void CoreML::validate<(MLModelType)600>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    uint64_t v4 = *(CoreML **)(a1 + 16);
  }
  else {
    uint64_t v4 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v19);
  CoreML::validateModelDescription(v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&v16);
  uint64_t v19 = v16;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v17;
  uint64_t v21 = v18;
  if (!CoreML::Result::good((CoreML::Result *)&v19)) {
    goto LABEL_27;
  }
  int v5 = operator new(8uLL);
  unint64_t v13 = v5;
  *int v5 = 0x300000001;
  uint64_t v14 = v5 + 1;
  unint64_t v15 = v5 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 16, 1, (int **)&v13, (uint64_t)&v16);
  uint64_t v19 = v16;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v17;
  uint64_t v21 = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v19);
  if (!v6) {
    goto LABEL_27;
  }
  if (*(_DWORD *)(a1 + 44) == 600) {
    uint64_t v7 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v7 = CoreML::Specification::OneHotEncoder::default_instance((CoreML::Specification::OneHotEncoder *)v6);
  }
  int v8 = *((unsigned __int8 *)v7 + 16);
  int v9 = operator new(4uLL);
  if (v8) {
    int v10 = 6;
  }
  else {
    int v10 = 5;
  }
  unint64_t v13 = v9;
  *int v9 = v10;
  uint64_t v14 = v9 + 1;
  unint64_t v15 = v9 + 1;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v4 + 40, 1, (int **)&v13, (uint64_t)&v16);
  uint64_t v19 = v16;
  if (SHIBYTE(v21) < 0) {
    operator delete((void *)__p);
  }
  long long __p = v17;
  uint64_t v21 = v18;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  BOOL v11 = CoreML::Result::good((CoreML::Result *)&v19);
  if (v11
    && (*(_DWORD *)(a1 + 44) != 600
      ? (uint64_t v12 = CoreML::Specification::OneHotEncoder::default_instance((CoreML::Specification::OneHotEncoder *)v11))
      : (uint64_t v12 = *(uint64_t **)(a1 + 32)),
        !*((_DWORD *)v12 + 9)))
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "OneHotEncoder parameter incorrect type");
    CoreML::Result::Result((_DWORD *)a2, 13);
    if (SHIBYTE(v17) < 0) {
      operator delete(v16);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
LABEL_27:
    *(void *)a2 = v19;
    *(_OWORD *)(a2 + 8) = __p;
    *(void *)(a2 + 24) = v21;
  }
}

void sub_2242CA0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void JSONNode::JSONNode()
{
}

{
  internalJSONNode::newInternal(0);
}

{
  internalJSONNode::newInternal(0);
}

{
  internalJSONNode::newInternal(0);
}

{
  internalJSONNode::newInternal(0);
}

{
  internalJSONNode::newInternal(0);
}

internalJSONNode *JSONNode::duplicate@<X0>(internalJSONNode **this@<X0>, const internalJSONNode *a2@<X1>, internalJSONNode **a3@<X8>)
{
  uint64_t result = *this;
  uint64_t v5 = *((void *)result + 10);
  *((void *)result + 1CoreML::Specification::Normalizer::New(this, 0) = v5 + 1;
  *a3 = result;
  if ((unint64_t)(v5 + 1) >= 2)
  {
    *((void *)result + 1CoreML::Specification::Normalizer::New(this, 0) = v5;
    uint64_t result = (internalJSONNode *)internalJSONNode::newInternal(result, a2);
  }
  *a3 = result;
  return result;
}

internalJSONNode **JSONNode::deleteJSONNode(internalJSONNode **this, JSONNode *a2)
{
  if (this)
  {
    uint64_t v2 = *this;
    if (v2)
    {
      uint64_t v3 = *((void *)v2 + 10) - 1;
      *((void *)v2 + 1CoreML::Specification::Normalizer::New(this, 0) = v3;
      if (!v3) {
        internalJSONNode::deleteInternal(v2, a2);
      }
    }
    JUMPOUT(0x22A614FA0);
  }
  return this;
}

void JSONNode::newJSONNode()
{
}

{
  operator new();
}

void CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/DictVectorizer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_DictVectorizer_default_instance_ = (uint64_t)&unk_26D777780;
  unk_26808D958 = 0;
  qword_26808D968 = 0;
  byte_26808D970 = 1;
}

void CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(CoreML::Specification::protobuf_DictVectorizer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_DictVectorizer_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2242CA640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::DictVectorizer *CoreML::Specification::DictVectorizer::DictVectorizer(CoreML::Specification::DictVectorizer *this)
{
  *(void *)this = &unk_26D777780;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::DictVectorizer *)&CoreML::Specification::_DictVectorizer_default_instance_) {
    CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(this);
  }
  *((void *)this + 3) = 0;
  return this;
}

void sub_2242CA6B4(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DictVectorizer::~DictVectorizer(CoreML::Specification::DictVectorizer *this)
{
  *(void *)this = &unk_26D777780;
  if (*((_DWORD *)this + 7)) {
    CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::DictVectorizer::~DictVectorizer(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::DictVectorizer::default_instance(CoreML::Specification::DictVectorizer *this)
{
  return &CoreML::Specification::_DictVectorizer_default_instance_;
}

void CoreML::Specification::DictVectorizer::New(CoreML::Specification::DictVectorizer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2242CA7D8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DictVectorizer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DictVectorizer>);
  }
  return result;
}

uint64_t CoreML::Specification::DictVectorizer::MergePartialFromCodedStream(CoreML::Specification::DictVectorizer *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_18;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_18;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 18) {
        goto LABEL_18;
      }
      if (*((_DWORD *)this + 7) != 2)
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        operator new();
      }
      BOOL v11 = (CoreML::Specification::Int64Vector *)*((void *)this + 2);
      unint64_t v15 = *a2;
      if (*a2 >= a2[1] || *v15 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v15;
        *a2 = v15 + 1;
      }
      unint64_t v21 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v21 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v19 = v21;
      uint64_t result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v11, a2, v22);
      if (!result) {
        return result;
      }
LABEL_39:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v19))return 0; {
    }
      }
    if (v7 >> 3 == 1 && v7 == 10)
    {
      if (*((_DWORD *)this + 7) != 1)
      {
        CoreML::Specification::V5::Dimension::clear_dimension((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        operator new();
      }
      int v10 = (CoreML::Specification::StringVector *)*((void *)this + 2);
      unint64_t v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        int v14 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (v14 < 0) {
          return 0;
        }
      }
      else
      {
        int v14 = *v13;
        *a2 = v13 + 1;
      }
      unint64_t v17 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v14);
      if ((v17 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v19 = v17;
      uint64_t result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v10, a2, v18);
      if (!result) {
        return result;
      }
      goto LABEL_39;
    }
LABEL_18:
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_2242CAA44(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DictVectorizer::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if (v6 == 2)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DictVectorizer::ByteSizeLong(CoreML::Specification::DictVectorizer *this)
{
  int v2 = *((_DWORD *)this + 7);
  if (v2 == 2)
  {
    uint64_t v3 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 2));
  }
  else
  {
    if (v2 != 1)
    {
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 2));
  }
  uint64_t result = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_7:
  *((_DWORD *)this + 6) = result;
  return result;
}

std::string *CoreML::Specification::DictVectorizer::MergeFrom(std::string *this, const CoreML::Specification::DictVectorizer *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 7);
  if (v5 == 2)
  {
    if (*(_DWORD *)(v3 + 28) != 2)
    {
      CoreML::Specification::V5::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 2;
      operator new();
    }
    uint64_t v7 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((void *)a2 + 2);
    int v9 = *(unint64_t **)(v3 + 16);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v9, v7);
  }
  else if (v5 == 1)
  {
    if (*(_DWORD *)(v3 + 28) != 1)
    {
      CoreML::Specification::V5::Dimension::clear_dimension(v3);
      *(_DWORD *)(v3 + 28) = 1;
      operator new();
    }
    int v6 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 2);
    int v8 = *(std::string **)(v3 + 16);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v8, v6);
  }
  return this;
}

void sub_2242CACCC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::DictVectorizer::IsInitialized(CoreML::Specification::DictVectorizer *this)
{
  return 1;
}

void *CoreML::Specification::DictVectorizer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DictVectorizer");
}

void CoreML::Specification::DictVectorizer::New(CoreML::Specification::DictVectorizer *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DictVectorizer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t JSONWorker::UTF8(JSONWorker *this, const char **a2, const char *a3)
{
  uint64_t v3 = *(void *)this;
  if ((uint64_t)a2 - *(void *)this < 5)
  {
    return 0;
  }
  else
  {
    *(void *)this = v3 + 4;
    char v4 = *(unsigned char *)(v3 + 3);
    unsigned int v5 = (v4 - 58);
    int v6 = *(unsigned __int8 *)(v3 + 4);
    unsigned int v7 = v6 - 48;
    char v8 = v6 - 87;
    char v9 = v6 - 55;
    if (v7 <= 9) {
      char v9 = v7;
    }
    if (v7 > 0x30) {
      char v9 = v8;
    }
    char v10 = 16 * v4;
    if (v5 < 0xF6) {
      v10 -= 112;
    }
    return (v9 | v10);
  }
}

void JSONWorker::SpecialChar(std::string::value_type **this, const char **a2, std::string *a3)
{
  uint64_t v3 = *this;
  if (*this != (std::string::value_type *)a2)
  {
    int v6 = *v3;
    if (v6 > 91)
    {
      if (v6 > 109)
      {
        std::string::value_type v7 = 9;
        switch(*v3)
        {
          case 'n':
            std::string::value_type v7 = 10;
            break;
          case 'r':
            std::string::value_type v7 = 13;
            break;
          case 't':
            goto LABEL_6;
          case 'u':
            std::string::value_type v7 = JSONWorker::UTF8((JSONWorker *)this, a2, (const char *)a3);
            break;
          case 'v':
            std::string::value_type v7 = 11;
            break;
          case 'x':
            if ((char *)a2 - v3 < 4) {
              goto LABEL_33;
            }
            *this = v3 + 2;
            char v8 = v3[1];
            unsigned int v9 = (v8 - 58);
            int v10 = v3[2];
            unsigned int v11 = v10 - 48;
            char v12 = v10 - 87;
            char v13 = v10 - 55;
            if (v11 <= 9) {
              char v13 = v11;
            }
            if (v11 > 0x30) {
              char v13 = v12;
            }
            char v14 = 16 * v8;
            if (v9 < 0xF6) {
              v14 -= 112;
            }
            std::string::value_type v7 = v13 | v14;
            break;
          default:
            goto LABEL_32;
        }
        goto LABEL_6;
      }
      switch(v6)
      {
        case '\\':
          std::string::value_type v7 = 92;
          goto LABEL_6;
        case 'b':
          std::string::value_type v7 = 8;
          goto LABEL_6;
        case 'f':
          std::string::value_type v7 = 12;
LABEL_6:
          std::string::push_back(a3, v7);
          return;
      }
    }
    else
    {
      if ((v6 - 48) < 8)
      {
        if ((char *)a2 - v3 < 4)
        {
LABEL_33:
          std::string::value_type v7 = 0;
        }
        else
        {
          *this = v3 + 2;
          std::string::value_type v7 = (8 * v3[1]) ^ 0x80 | (*v3 << 6) | (v3[2] - 48);
        }
        goto LABEL_6;
      }
      if (v6 == 1)
      {
        std::string::value_type v7 = 34;
        goto LABEL_6;
      }
      if (v6 == 47)
      {
        std::string::value_type v7 = 47;
        goto LABEL_6;
      }
    }
LABEL_32:
    std::string::value_type v7 = *v3;
    goto LABEL_6;
  }
}

void JSONWorker::FixString(uint64_t a1@<X0>, unsigned char *a2@<X1>, std::string *a3@<X8>)
{
  char v4 = (std::string::value_type *)a1;
  *a2 = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 23) >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a1 + 8);
  }
  std::string::reserve(a3, v6);
  if (v4[23] < 0)
  {
    char v8 = v4;
    char v4 = *(std::string::value_type **)v4;
    uint64_t v7 = *((void *)v8 + 1);
  }
  else
  {
    uint64_t v7 = v4[23];
  }
  unsigned int v9 = (const char **)&v4[v7];
  unsigned int v11 = v4;
  if (v4 != &v4[v7])
  {
    do
    {
      int v10 = *v4;
      if (v10 == 92)
      {
        *a2 = 1;
        unsigned int v11 = v4 + 1;
        JSONWorker::SpecialChar(&v11, v9, a3);
        char v4 = v11;
      }
      else
      {
        std::string::push_back(a3, v10);
      }
      unsigned int v11 = ++v4;
    }
    while (v4 != (std::string::value_type *)v9);
  }
}

void sub_2242CB060(void *a1)
{
  std::string::~string(v1);
  __cxa_call_unexpected(a1);
}

void JSONWorker::toUTF8(JSONWorker *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v2 = this;
  std::string::basic_string[abi:ne180100]<0>(a2, "\\u");
  std::string::append(a2, "00");
  if (((v2 >> 4) | 0x30) <= 0x39) {
    std::string::value_type v4 = (v2 >> 4) | 0x30;
  }
  else {
    std::string::value_type v4 = (v2 >> 4) + 55;
  }
  std::string::push_back(a2, v4);
  if ((v2 & 0xF | 0x30) <= 0x39) {
    std::string::value_type v5 = v2 & 0xF | 0x30;
  }
  else {
    std::string::value_type v5 = (v2 & 0xF) + 55;
  }
  std::string::push_back(a2, v5);
}

void sub_2242CB0F8(void *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_call_unexpected(a1);
}

void JSONWorker::UnfixString(uint64_t a1, char a2, std::string *this)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  int v5 = (char)v4;
  if (a2)
  {
    std::string::size_type v6 = (unsigned char *)(a1 + v4);
    if (v5 >= 0) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = (unsigned char *)(*(void *)a1 + *(void *)(a1 + 8));
    }
    if (v5 >= 0) {
      char v8 = (unsigned char *)a1;
    }
    else {
      char v8 = *(unsigned char **)a1;
    }
    while (v8 != v7)
    {
      int v9 = (char)*v8;
      if (v9 <= 33)
      {
        switch(*v8)
        {
          case 8:
            int v10 = "\\b";
            goto LABEL_22;
          case 9:
            int v10 = "\\t";
            goto LABEL_22;
          case 0xA:
            int v10 = "\\n";
            goto LABEL_22;
          case 0xC:
            int v10 = "\\f";
            goto LABEL_22;
          case 0xD:
            int v10 = "\\r";
            goto LABEL_22;
          default:
            goto LABEL_25;
        }
      }
      switch(v9)
      {
        case '\\':
          int v10 = "\\\\"";
          break;
        case '/':
          int v10 = "\\/";
          break;
        case '""':
          int v10 = "\\\"";
          break;
        default:
LABEL_25:
          if ((v9 - 127) <= 0xA0u)
          {
            JSONWorker::toUTF8((JSONWorker *)*v8, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            std::string::append(this, (const std::string::value_type *)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            std::string::push_back(this, v9);
          }
          goto LABEL_23;
      }
LABEL_22:
      std::string::append(this, v10);
LABEL_23:
      ++v8;
    }
  }
  else
  {
    if ((v4 & 0x80u) == 0) {
      char v13 = (const std::string::value_type *)a1;
    }
    else {
      char v13 = *(const std::string::value_type **)a1;
    }
    if ((v4 & 0x80u) == 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v14 = *(void *)(a1 + 8);
    }
    std::string::append(this, v13, v14);
  }
}

void sub_2242CB2EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_call_unexpected(a1);
}

void JSONWorker::DoArray(internalJSONNode *this, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (**(unsigned char **)a2 == 91)
    {
      unint64_t v4 = *(void *)(a2 + 8);
LABEL_6:
      if (v4 >= 3)
      {
        memset(&__p, 0, sizeof(__p));
        uint64_t Next = JSONWorker::FindNextRelevant<(char)44>((uint64_t *)a2, 1);
        if (Next == -1)
        {
          uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
          if ((v7 & 0x80u) == 0) {
            uint64_t v8 = a2;
          }
          else {
            uint64_t v8 = *(void *)a2;
          }
          if ((v7 & 0x80u) != 0) {
            uint64_t v7 = *(void *)(a2 + 8);
          }
          std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__p, (std::string::value_type *)(v8 + 1), (std::string::value_type *)(v8 + v7 - 1), v7 - 2);
          if (JSONWorker::FindNextRelevant<(char)58>((uint64_t *)&__p, 0) == -1)
          {
            {
              jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
              qword_268067230 = 0;
              __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_223D44000);
            }
            JSONWorker::NewNode((uint64_t)this, (char *)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, (char *)&__p, 1);
          }
        }
        else
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v6 = a2;
          }
          else {
            uint64_t v6 = *(void *)a2;
          }
          std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&__p, (std::string::value_type *)(v6 + 1), (std::string::value_type *)(v6 + Next), Next - 1);
          if (JSONWorker::FindNextRelevant<(char)58>((uint64_t *)&__p, 0) == -1)
          {
            {
              {
                jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
                qword_268067230 = 0;
                __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_223D44000);
              }
            }
            JSONWorker::NewNode((uint64_t)this, (char *)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, (char *)&__p, 1);
          }
        }
        internalJSONNode::Nullify(this);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      return;
    }
  }
  else if (*(unsigned char *)a2 == 91)
  {
    unint64_t v4 = *(unsigned __int8 *)(a2 + 23);
    goto LABEL_6;
  }
  internalJSONNode::Nullify(this);
}

void sub_2242CB594(void *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t JSONWorker::FindNextRelevant<(char)44>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  int v3 = (char)v2;
  unint64_t v4 = (char *)a1 + v2;
  BOOL v5 = v3 < 0;
  if (v3 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = (char *)(*a1 + a1[1]);
  }
  if (v5) {
    uint64_t v7 = *a1;
  }
  else {
    uint64_t v7 = (uint64_t)a1;
  }
  uint64_t v8 = (char *)(v7 + a2);
  if ((char *)(v7 + a2) == v6) {
    return -1;
  }
  uint64_t result = -1;
  while (1)
  {
    int v10 = *v8;
    if (v10 == 44) {
      return (uint64_t)&v8[-v7];
    }
    if (v10 > 92)
    {
      if (v10 == 123)
      {
        uint64_t v17 = 1;
        while (1)
        {
          int v19 = *++v8;
          int v18 = v19;
          if (v19 <= 122)
          {
            if (v18 == 34)
            {
              while (1)
              {
                int v22 = *++v8;
                int v21 = v22;
                if (v22 == 34) {
                  break;
                }
                if (!v21) {
                  return -1;
                }
              }
            }
            else if (!v18)
            {
              return -1;
            }
          }
          else
          {
            uint64_t v20 = v17 - 1;
            if (v18 != 125) {
              uint64_t v20 = v17;
            }
            if (v18 == 123) {
              ++v17;
            }
            else {
              uint64_t v17 = v20;
            }
          }
          if (!v17) {
            goto LABEL_49;
          }
        }
      }
      if (v10 == 93 || v10 == 125) {
        return result;
      }
    }
    else if (v10 == 34)
    {
      while (1)
      {
        int v24 = *++v8;
        int v23 = v24;
        if (v24 == 34) {
          break;
        }
        if (!v23) {
          return -1;
        }
      }
    }
    else if (v10 == 91)
    {
      uint64_t v11 = 1;
      do
      {
        int v13 = *++v8;
        int v12 = v13;
        if (v13 <= 90)
        {
          if (v12 == 34)
          {
            while (1)
            {
              int v16 = *++v8;
              int v15 = v16;
              if (v16 == 34) {
                break;
              }
              if (!v15) {
                return -1;
              }
            }
          }
          else if (!v12)
          {
            return -1;
          }
        }
        else
        {
          uint64_t v14 = v11 - 1;
          if (v12 != 93) {
            uint64_t v14 = v11;
          }
          if (v12 == 91) {
            ++v11;
          }
          else {
            uint64_t v11 = v14;
          }
        }
      }
      while (v11);
    }
LABEL_49:
    if (++v8 == v6) {
      return -1;
    }
  }
}

uint64_t JSONWorker::FindNextRelevant<(char)58>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  int v3 = (char)v2;
  unint64_t v4 = (char *)a1 + v2;
  BOOL v5 = v3 < 0;
  if (v3 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = (char *)(*a1 + a1[1]);
  }
  if (v5) {
    uint64_t v7 = *a1;
  }
  else {
    uint64_t v7 = (uint64_t)a1;
  }
  uint64_t v8 = (char *)(v7 + a2);
  if ((char *)(v7 + a2) == v6) {
    return -1;
  }
  uint64_t result = -1;
  while (1)
  {
    int v10 = *v8;
    if (v10 == 58) {
      return (uint64_t)&v8[-v7];
    }
    if (v10 > 92)
    {
      if (v10 == 123)
      {
        uint64_t v17 = 1;
        while (1)
        {
          int v19 = *++v8;
          int v18 = v19;
          if (v19 <= 122)
          {
            if (v18 == 34)
            {
              while (1)
              {
                int v22 = *++v8;
                int v21 = v22;
                if (v22 == 34) {
                  break;
                }
                if (!v21) {
                  return -1;
                }
              }
            }
            else if (!v18)
            {
              return -1;
            }
          }
          else
          {
            uint64_t v20 = v17 - 1;
            if (v18 != 125) {
              uint64_t v20 = v17;
            }
            if (v18 == 123) {
              ++v17;
            }
            else {
              uint64_t v17 = v20;
            }
          }
          if (!v17) {
            goto LABEL_49;
          }
        }
      }
      if (v10 == 93 || v10 == 125) {
        return result;
      }
    }
    else if (v10 == 34)
    {
      while (1)
      {
        int v24 = *++v8;
        int v23 = v24;
        if (v24 == 34) {
          break;
        }
        if (!v23) {
          return -1;
        }
      }
    }
    else if (v10 == 91)
    {
      uint64_t v11 = 1;
      do
      {
        int v13 = *++v8;
        int v12 = v13;
        if (v13 <= 90)
        {
          if (v12 == 34)
          {
            while (1)
            {
              int v16 = *++v8;
              int v15 = v16;
              if (v16 == 34) {
                break;
              }
              if (!v15) {
                return -1;
              }
            }
          }
          else if (!v12)
          {
            return -1;
          }
        }
        else
        {
          uint64_t v14 = v11 - 1;
          if (v12 != 93) {
            uint64_t v14 = v11;
          }
          if (v12 == 91) {
            ++v11;
          }
          else {
            uint64_t v11 = v14;
          }
        }
      }
      while (v11);
    }
LABEL_49:
    if (++v8 == v6) {
      return -1;
    }
  }
}

void JSONWorker::NewNode(uint64_t a1, char *a2, char *a3, int a4)
{
  memset(&__str, 0, sizeof(__str));
  if (!a4) {
    a3 = a2;
  }
  if (a3[23] >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(char **)a3;
  }
  if (*v6 == 35)
  {
    while (1)
    {
      uint64_t v7 = 0;
      do
        int v8 = v6[++v7];
      while (v8 != 35);
      if (v7 != 1)
      {
        std::string::basic_string[abi:ne180100](__p, v6 + 1, v7 - 1);
        if ((v15 & 0x80u) == 0) {
          int v9 = __p;
        }
        else {
          int v9 = (void **)__p[0];
        }
        if ((v15 & 0x80u) == 0) {
          std::string::size_type v10 = v15;
        }
        else {
          std::string::size_type v10 = (std::string::size_type)__p[1];
        }
        std::string::append(&__str, (const std::string::value_type *)v9, v10);
        if ((char)v15 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v11 = &v6[v7];
      int v12 = &v6[v7];
      int v13 = v12[1];
      uint64_t v6 = v12 + 1;
      if (v13 != 35) {
        break;
      }
      std::string::push_back(&__str, 10);
    }
    uint64_t v6 = v11 + 1;
    if (a4)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(__p, v6);
      internalJSONNode::newInternal();
    }
  }
  else if (a4)
  {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v6 + 1);
  internalJSONNode::newInternal();
}

void sub_2242CB9DC(void *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::string *a7, uint64_t a8, void *__pa, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

std::string *JSONWorker::DoNode(std::string *this, uint64_t a2)
{
  int v3 = (internalJSONNode *)this;
  if (*(char *)(a2 + 23) < 0)
  {
    if (**(unsigned char **)a2 != 123) {
      goto LABEL_23;
    }
    unint64_t v4 = *(void *)(a2 + 8);
  }
  else
  {
    if (*(unsigned char *)a2 != 123) {
      goto LABEL_23;
    }
    unint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  if (v4 < 3) {
    return this;
  }
  uint64_t Next = JSONWorker::FindNextRelevant<(char)58>((uint64_t *)a2, 1);
  if (Next != -1)
  {
    uint64_t v6 = Next;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v13, (char *)(v7 + 1), (char *)(v7 + Next - 1), Next - 2);
    uint64_t v8 = JSONWorker::FindNextRelevant<(char)44>((uint64_t *)a2, v6);
    if (v8 != -1)
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, (char *)(v9 + v6 + 1), (char *)(v9 + v8), v8 - (v6 + 1));
      JSONWorker::NewNode((uint64_t)v3, (char *)&v13, __p, 0);
    }
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(void *)a2;
    }
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, (char *)(v11 + v6 + 1), (char *)(v11 + v10 - 1), v10 - 1 - (v6 + 1));
    JSONWorker::NewNode((uint64_t)v3, (char *)&v13, __p, 0);
  }
LABEL_23:
  return internalJSONNode::Nullify(v3);
}

void sub_2242CBC30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  __cxa_call_unexpected(a1);
}

std::string *internalJSONNode::WriteName(std::string *result, int a2, char a3, std::string *this)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v6 = (uint64_t)result;
    std::string::append(this, "\"");
    JSONWorker::UnfixString(v6 + 8, *(unsigned char *)(v6 + 32), this);
    if (a2) {
      uint64_t v7 = "\" : ";
    }
    else {
      uint64_t v7 = "\":";
    }
    return std::string::append(this, v7);
  }
  return result;
}

void internalJSONNode::WriteChildren(jsonSingletonNEW_LINE *a1, size_t a2, std::string *a3)
{
  uint64_t v3 = *((void *)a1 + 15);
  uint64_t v4 = *(unsigned int *)(v3 + 8);
  if (!v4) {
    return;
  }
  size_t v6 = a2;
  memset(&__p, 0, sizeof(__p));
  if (a2 == -1)
  {
    uint64_t v11 = *(void ***)v3;
    uint64_t v12 = *(void *)v3 + 8 * v4;
  }
  else
  {
    Value = jsonSingletonNEW_LINE::getValue(a1);
    size_t v6 = (v6 + 1);
    makeIndent(v6, &v23);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v23, (uint64_t)Value, &v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v24;
    *((unsigned char *)&v24.__r_.__value_.__s + 23) = 0;
    v24.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = *((void *)a1 + 15);
    uint64_t v4 = *(unsigned int *)(v10 + 8);
    if (!v4) {
      goto LABEL_21;
    }
    uint64_t v11 = *(void ***)v10;
    uint64_t v12 = *(void *)v10 + 8 * v4;
  }
  unint64_t v13 = 0;
  unint64_t v14 = (v4 - 1);
  do
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a3, (const std::string::value_type *)p_p, size);
    uint64_t v9 = (jsonSingletonNEW_LINE *)internalJSONNode::Write(**v11, v6, *(unsigned __int8 *)a1 == 4, a3);
    if (v13 < v14) {
      std::string::push_back(a3, 44);
    }
    ++v11;
    ++v13;
  }
  while (v11 != (void **)v12);
LABEL_21:
  if (v6 != -1)
  {
    uint64_t v17 = (char *)jsonSingletonNEW_LINE::getValue(v9);
    int v18 = v17[23];
    if (v18 >= 0) {
      int v19 = v17;
    }
    else {
      int v19 = *(const std::string::value_type **)v17;
    }
    if (v18 >= 0) {
      std::string::size_type v20 = v17[23];
    }
    else {
      std::string::size_type v20 = *((void *)v17 + 1);
    }
    std::string::append(a3, v19, v20);
    makeIndent((v6 - 1), &v24);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v21 = &v24;
    }
    else {
      int v21 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = v24.__r_.__value_.__l.__size_;
    }
    std::string::append(a3, (const std::string::value_type *)v21, v22);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2242CBEA8(void *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::string *a13, uint64_t a14, void *__pa, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0) {
    operator delete(__pa);
  }
  std::string::~string((std::string *)&a21);
  __cxa_call_unexpected(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    BOOL v5 = (const std::string::value_type *)a2;
  }
  else {
    BOOL v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  uint64_t v7 = (__n128 *)std::string::insert(this, 0, v5, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void *jsonSingletonNEW_LINE::getValue(jsonSingletonNEW_LINE *this)
{
  {
    jsonSingletonNEW_LINE::jsonSingletonNEW_LINE((jsonSingletonNEW_LINE *)&jsonSingletonNEW_LINE::getValue(void)::single);
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonNEW_LINE::getValue(void)::single, &dword_223D44000);
  }
  return &jsonSingletonNEW_LINE::getValue(void)::single;
}

void makeIndent(size_t __len@<X0>, std::string *a2@<X8>)
{
  if (__len == -1)
  {
    int v4 = (uint64_t *)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single;
    {
      jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
      qword_268067230 = 0;
      __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_223D44000);
    }
  }
  else
  {
    unsigned int v3 = __len;
    if (__len > 7)
    {
      if (__len > 0xF)
      {
        if (__len > 0x17)
        {
          std::string::basic_string[abi:ne180100](a2, __len, 9);
          return;
        }
        {
          std::string::basic_string[abi:ne180100]<0>(makeIndent::cache, "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[24], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[48], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[72], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[96], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[120], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[144], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[168], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_39, 0, &dword_223D44000);
        }
        BOOL v5 = makeIndent::cache;
        unsigned int v6 = v3 - 16;
      }
      else
      {
        {
          std::string::basic_string[abi:ne180100]<0>(makeIndent::cache, "\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[24], "\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[48], "\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[72], "\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[96], "\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[120], "\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[144], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          std::string::basic_string[abi:ne180100]<0>(&makeIndent::cache[168], "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
          __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_30, 0, &dword_223D44000);
        }
        BOOL v5 = makeIndent::cache;
        unsigned int v6 = v3 - 8;
      }
      int v4 = (uint64_t *)&v5[24 * v6];
    }
    else
    {
      {
        makeIndent::cache[0] = 0;
        unk_268067BE0 = 0;
        qword_268067BE8 = 0;
        std::string::basic_string[abi:ne180100]<0>(qword_268067BF0, "\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_268067BF0[3], "\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_268067BF0[6], "\t\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_268067BF0[9], "\t\t\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_268067BF0[12], "\t\t\t\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_268067BF0[15], "\t\t\t\t\t\t");
        std::string::basic_string[abi:ne180100]<0>(&qword_268067BF0[18], "\t\t\t\t\t\t\t");
        __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_2, 0, &dword_223D44000);
      }
      int v4 = &makeIndent::cache[3 * v3];
    }
  }
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v4, v4[1]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = v4[2];
  }
}

void sub_2242CC3BC(void *a1)
{
}

void internalJSONNode::Write(std::string *a1, size_t a2, char a3, std::string *a4)
{
  internalJSONNode::WriteComment((uint64_t)a1, a2, a4);
  if (a2 == -1 && !a1[3].__r_.__value_.__s.__data_[16])
  {
    internalJSONNode::WriteName(a1, 0, a3, a4);
LABEL_14:
    internalJSONNode::DumpRawString((uint64_t)a1, a4);
  }
  else
  {
    internalJSONNode::WriteName(a1, a2 != -1, a3, a4);
    switch(a1->__r_.__value_.__s.__data_[0])
    {
      case 0:
      case 2:
      case 3:
        if (a1[2].__r_.__value_.__s.__data_[15] < 0)
        {
          uint64_t v8 = (char *)a1[1].__r_.__value_.__r.__words[2];
          std::string::pointer data = a1[2].__r_.__value_.__l.__data_;
        }
        else
        {
          uint64_t v8 = &a1[1].__r_.__value_.__s.__data_[16];
          std::string::pointer data = (std::string::pointer)a1[2].__r_.__value_.__s.__data_[15];
        }
        std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(a4, v8, &data[(void)v8]);
        return;
      case 4:
        internalJSONNode::Fetch((internalJSONNode *)a1);
        std::string::append(a4, "[");
        internalJSONNode::WriteChildren((jsonSingletonNEW_LINE *)a1, a2, a4);
        uint64_t v10 = "]";
        goto LABEL_12;
      case 5:
        internalJSONNode::Fetch((internalJSONNode *)a1);
        std::string::append(a4, "{");
        internalJSONNode::WriteChildren((jsonSingletonNEW_LINE *)a1, a2, a4);
        uint64_t v10 = "}";
        goto LABEL_12;
      default:
        if (!a1[3].__r_.__value_.__s.__data_[16]) {
          goto LABEL_14;
        }
        std::string::append(a4, "\"");
        JSONWorker::UnfixString((uint64_t)&a1[1].__r_.__value_.__r.__words[2], a1[2].__r_.__value_.__s.__data_[16], a4);
        uint64_t v10 = "\"";
LABEL_12:
        std::string::append(a4, v10);
        break;
    }
  }
}

void internalJSONNode::WriteComment(uint64_t a1, size_t a2, std::string *a3)
{
  if (a2 != -1)
  {
    if (*(char *)(a1 + 119) < 0)
    {
      if (!*(void *)(a1 + 104)) {
        return;
      }
    }
    else if (!*(unsigned char *)(a1 + 119))
    {
      return;
    }
    unsigned int v6 = (char *)(a1 + 96);
    uint64_t v7 = (jsonSingletonNEW_LINE *)std::string::find((const std::string *)(a1 + 96), 10, 0);
    Value = jsonSingletonNEW_LINE::getValue(v7);
    makeIndent(a2, &__p);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (uint64_t)Value, &v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v9 = &v37;
    }
    else {
      uint64_t v9 = (std::string *)v37.__r_.__value_.__r.__words[0];
    }
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v37.__r_.__value_.__l.__size_;
    }
    if (v7 == (jsonSingletonNEW_LINE *)-1)
    {
      uint64_t v11 = std::string::append(a3, (const std::string::value_type *)v9, size);
      uint64_t v12 = (char *)jsonSingletonSINGLELINE_COMMENT::getValue((jsonSingletonSINGLELINE_COMMENT *)v11);
      int v13 = v12[23];
      if (v13 >= 0) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = *(const std::string::value_type **)v12;
      }
      if (v13 >= 0) {
        std::string::size_type v15 = v12[23];
      }
      else {
        std::string::size_type v15 = *((void *)v12 + 1);
      }
      std::string::append(a3, v14, v15);
      if (*(char *)(a1 + 119) < 0)
      {
        unsigned int v6 = *(char **)(a1 + 96);
        uint64_t v16 = *(void *)(a1 + 104);
      }
      else
      {
        uint64_t v16 = *(unsigned __int8 *)(a1 + 119);
      }
      std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(a3, v6, &v6[v16]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v37;
      }
      else {
        uint64_t v17 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = v37.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)v17, v18);
    }
    else
    {
      int v19 = std::string::append(a3, (const std::string::value_type *)v9, size);
      std::string::size_type v20 = jsonSingletonNEW_LINE::getValue((jsonSingletonNEW_LINE *)v19);
      makeIndent((a2 + 1), &v35);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v35, (uint64_t)v20, &__p);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      std::string::append(a3, "/*");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)p_p, v22);
      std::string v23 = 0;
      if (!v7) {
        goto LABEL_48;
      }
      while (v7 != (jsonSingletonNEW_LINE *)-1)
      {
        uint64_t v24 = a1 + 96;
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v24 = *(void *)v6;
        }
        if (*((unsigned char *)v7 + v24 - 1) == 13) {
          uint64_t v7 = (jsonSingletonNEW_LINE *)((char *)v7 - 1);
        }
        do
        {
LABEL_48:
          uint64_t v25 = a1 + 96;
          if (*(char *)(a1 + 119) < 0) {
            uint64_t v25 = *(void *)v6;
          }
          std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(a3, &v23[v25], (char *)v7 + v25);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v26 = &__p;
          }
          else {
            int v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(a3, (const std::string::value_type *)v26, v27);
          uint64_t v28 = a1 + 96;
          if (*(char *)(a1 + 119) < 0) {
            uint64_t v28 = *(void *)v6;
          }
          if (*((unsigned char *)v7 + v28) == 13) {
            uint64_t v29 = 2;
          }
          else {
            uint64_t v29 = 1;
          }
          std::string v23 = (char *)v7 + v29;
          uint64_t v7 = (jsonSingletonNEW_LINE *)std::string::find((const std::string *)(a1 + 96), 10, (std::string::size_type)v7 + v29);
        }
        while (!v7);
      }
      if (*(char *)(a1 + 119) < 0)
      {
        unsigned int v6 = *(char **)(a1 + 96);
        uint64_t v30 = *(void *)(a1 + 104);
      }
      else
      {
        uint64_t v30 = *(unsigned __int8 *)(a1 + 119);
      }
      std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(a3, &v23[(void)v6], &v6[v30]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &v37;
      }
      else {
        uint64_t v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = v37.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)v31, v32);
      std::string::append(a3, "*/");
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v33 = &v37;
      }
      else {
        uint64_t v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = v37.__r_.__value_.__l.__size_;
      }
      std::string::append(a3, (const std::string::value_type *)v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2242CC8E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  __cxa_call_unexpected(a1);
}

void *jsonSingletonSINGLELINE_COMMENT::getValue(jsonSingletonSINGLELINE_COMMENT *this)
{
  {
    jsonSingletonSINGLELINE_COMMENT::jsonSingletonSINGLELINE_COMMENT((jsonSingletonSINGLELINE_COMMENT *)&jsonSingletonSINGLELINE_COMMENT::getValue(void)::single);
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonSINGLELINE_COMMENT::getValue(void)::single, &dword_223D44000);
  }
  return &jsonSingletonSINGLELINE_COMMENT::getValue(void)::single;
}

void internalJSONNode::DumpRawString(uint64_t a1, std::string *this)
{
  if (used_ascii_one)
  {
    if (*(char *)(a1 + 63) < 0)
    {
      unsigned int v3 = *(char **)(a1 + 40);
      unint64_t v4 = *(void *)(a1 + 48);
    }
    else
    {
      unsigned int v3 = (char *)(a1 + 40);
      unint64_t v4 = *(unsigned __int8 *)(a1 + 63);
    }
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&__p, v3, &v3[v4], v4);
    std::string::size_type v7 = v17;
    unsigned __int8 v8 = v17;
    uint64_t v9 = (void **)__p;
    std::string::size_type v10 = v16;
    if ((v17 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v17 & 0x80u) == 0) {
      std::string::size_type v12 = v17;
    }
    else {
      std::string::size_type v12 = v16;
    }
    if (v12)
    {
      do
      {
        if (*p_p == 1) {
          unsigned char *p_p = 34;
        }
        ++p_p;
        --v12;
      }
      while (v12);
      std::string::size_type v7 = v17;
      uint64_t v9 = (void **)__p;
      std::string::size_type v10 = v16;
      unsigned __int8 v8 = v17;
    }
    if ((v8 & 0x80u) == 0) {
      int v13 = &__p;
    }
    else {
      int v13 = v9;
    }
    if ((v8 & 0x80u) == 0) {
      std::string::size_type v14 = v7;
    }
    else {
      std::string::size_type v14 = v10;
    }
    std::string::append(this, (const std::string::value_type *)v13, v14);
    if ((char)v17 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    if (*(char *)(a1 + 63) < 0)
    {
      BOOL v5 = *(char **)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
    }
    else
    {
      BOOL v5 = (char *)(a1 + 40);
      uint64_t v6 = *(unsigned __int8 *)(a1 + 63);
    }
    std::string::append[abi:ne180100]<std::__wrap_iter<char const*>,0>(this, v5, &v5[v6]);
  }
}

void sub_2242CCACC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void jsonSingletonNEW_LINE::jsonSingletonNEW_LINE(jsonSingletonNEW_LINE *this)
{
}

void jsonSingletonSINGLELINE_COMMENT::jsonSingletonSINGLELINE_COMMENT(jsonSingletonSINGLELINE_COMMENT *this)
{
}

void __cxx_global_array_dtor_2()
{
  for (uint64_t i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(makeIndent::cache[i + 23]) < 0) {
      operator delete((void *)makeIndent::cache[i + 21]);
    }
  }
}

void __cxx_global_array_dtor_30()
{
  for (uint64_t i = 0; i != -192; i -= 24)
  {
    if (makeIndent::cache[i + 191] < 0) {
      operator delete(*(void **)&makeIndent::cache[i + 168]);
    }
  }
}

void __cxx_global_array_dtor_39()
{
  for (uint64_t i = 0; i != -192; i -= 24)
  {
    if (makeIndent::cache[i + 191] < 0) {
      operator delete(*(void **)&makeIndent::cache[i + 168]);
    }
  }
}

void internalJSONNode::internalJSONNode(internalJSONNode *this, const internalJSONNode *a2)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 7) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 4CoreML::Specification::DictVectorizer::New(this, 0) = v5;
  }
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)this + 1CoreML::Specification::DictVectorizer::New(this, 0) = 1;
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 6);
    *((void *)this + 14) = *((void *)a2 + 14);
    *((_OWORD *)this + 6) = v6;
  }
  *((void *)this + 15) = 0;
  if ((*(unsigned char *)this & 0xFE) == 4) {
    operator new();
  }
}

void sub_2242CCE04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 + 63) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 31) < 0) {
    operator delete(*v11);
  }
  __cxa_call_unexpected(a1);
}

void JSONNode::~JSONNode(internalJSONNode **this, JSONNode *a2)
{
  uint64_t v2 = *this;
  if (v2)
  {
    uint64_t v3 = *((void *)v2 + 10) - 1;
    *((void *)v2 + 1CoreML::Specification::DictVectorizer::New(this, 0) = v3;
    if (!v3)
    {
      internalJSONNode::~internalJSONNode(v2, a2);
      MEMORY[0x22A614FA0]();
    }
  }
}

std::string *internalJSONNode::Nullify(internalJSONNode *this)
{
  *(unsigned char *)this = 0;
  {
    jsonSingletonCONST_NULL::jsonSingletonCONST_NULL((jsonSingletonCONST_NULL *)&jsonSingletonCONST_NULL::getValue(void)::single);
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonCONST_NULL::getValue(void)::single, &dword_223D44000);
  }
  __n128 result = std::string::operator=((std::string *)((char *)this + 40), (const std::string *)&jsonSingletonCONST_NULL::getValue(void)::single);
  *((unsigned char *)this + 88) = 1;
  return result;
}

uint64_t internalJSONNode::internalJSONNode(uint64_t a1, uint64_t a2, const std::string *a3)
{
  *(unsigned char *)a1 = 0;
  JSONWorker::FixString(a2, (unsigned char *)(a1 + 32), (std::string *)(a1 + 8));
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 4CoreML::Specification::DictVectorizer::New(this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = xmmword_2246C5F80;
  *(unsigned char *)(a1 + 88) = 0;
  {
    jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
    qword_268067230 = 0;
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_223D44000);
  }
  if (SHIBYTE(qword_268067230) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), (const std::string::value_type *)jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, *((std::string::size_type *)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single + 1));
  }
  else
  {
    *(_OWORD *)(a1 + 96) = jsonSingletonEMPTY_JSON_STRING::getValue(void)::single;
    *(void *)(a1 + 112) = qword_268067230;
  }
  *(void *)(a1 + 12CoreML::Specification::DictVectorizer::New(this, 0) = 0;
  std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a3->__r_.__value_.__l.__size_;
  }
  if (!size)
  {
LABEL_86:
    *(unsigned char *)a1 = 0;
    goto LABEL_87;
  }
  std::string::operator=((std::string *)(a1 + 40), a3);
  int v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  BOOL v7 = v6 < 0;
  if (v6 >= 0) {
    unsigned __int8 v8 = a3;
  }
  else {
    unsigned __int8 v8 = (const std::string *)a3->__r_.__value_.__r.__words[0];
  }
  if (v7) {
    std::string::size_type v9 = a3->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v9 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  }
  int v10 = v8->__r_.__value_.__s.__data_[0];
  int v11 = v8->__r_.__value_.__s.__data_[v9 - 1];
  if (v10 > 90)
  {
    if (v10 > 109)
    {
      if (v10 != 110)
      {
        if (v10 != 116)
        {
          if (v10 == 123)
          {
            if (v11 == 125)
            {
              *(unsigned char *)a1 = 5;
              operator new();
            }
            goto LABEL_89;
          }
LABEL_78:
          if (NumberToString::isNumeric((uint64_t)a3))
          {
            char v24 = 2;
            goto LABEL_80;
          }
LABEL_89:
          internalJSONNode::Nullify((internalJSONNode *)a1);
          return a1;
        }
        goto LABEL_44;
      }
LABEL_59:
      {
        jsonSingletonCONST_NULL::jsonSingletonCONST_NULL((jsonSingletonCONST_NULL *)&jsonSingletonCONST_NULL::getValue(void)::single);
        __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonCONST_NULL::getValue(void)::single, &dword_223D44000);
      }
      uint64_t v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v20 & 0x80u) == 0) {
        std::string::size_type v21 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = a3->__r_.__value_.__l.__size_;
      }
      uint64_t v22 = byte_268067EA7;
      if (byte_268067EA7 < 0) {
        uint64_t v22 = qword_268067E98;
      }
      if (v21 != v22) {
        goto LABEL_89;
      }
      if (byte_268067EA7 >= 0) {
        std::string v23 = &jsonSingletonCONST_NULL::getValue(void)::single;
      }
      else {
        std::string v23 = (uint64_t *)jsonSingletonCONST_NULL::getValue(void)::single;
      }
      if ((v20 & 0x80) != 0)
      {
        if (memcmp(a3->__r_.__value_.__l.__data_, v23, a3->__r_.__value_.__l.__size_)) {
          goto LABEL_89;
        }
      }
      else if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
      {
        while (a3->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
        {
          a3 = (const std::string *)((char *)a3 + 1);
          std::string v23 = (uint64_t *)((char *)v23 + 1);
          if (!--v20) {
            goto LABEL_86;
          }
        }
        goto LABEL_89;
      }
      goto LABEL_86;
    }
    if (v10 == 91)
    {
      if (v11 == 93)
      {
        *(unsigned char *)a1 = 4;
        operator new();
      }
      goto LABEL_89;
    }
    if (v10 != 102) {
      goto LABEL_78;
    }
LABEL_27:
    {
      jsonSingletonCONST_FALSE::jsonSingletonCONST_FALSE((jsonSingletonCONST_FALSE *)&jsonSingletonCONST_FALSE::getValue(void)::single);
      __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonCONST_FALSE::getValue(void)::single, &dword_223D44000);
    }
    uint64_t v12 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v12 & 0x80u) == 0) {
      std::string::size_type v13 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v14 = byte_268067E87;
    if (byte_268067E87 < 0) {
      uint64_t v14 = qword_268067E78;
    }
    if (v13 != v14) {
      goto LABEL_89;
    }
    if (byte_268067E87 >= 0) {
      std::string::size_type v15 = &jsonSingletonCONST_FALSE::getValue(void)::single;
    }
    else {
      std::string::size_type v15 = (uint64_t *)jsonSingletonCONST_FALSE::getValue(void)::single;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(a3->__r_.__value_.__l.__data_, v15, a3->__r_.__value_.__l.__size_)) {
        goto LABEL_89;
      }
    }
    else if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
    {
      while (a3->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
      {
        a3 = (const std::string *)((char *)a3 + 1);
        std::string::size_type v15 = (uint64_t *)((char *)v15 + 1);
        if (!--v12) {
          goto LABEL_82;
        }
      }
      goto LABEL_89;
    }
LABEL_82:
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)a1 = 3;
LABEL_87:
    *(unsigned char *)(a1 + 88) = 1;
    return a1;
  }
  if (v10 > 77)
  {
    if (v10 != 78)
    {
      if (v10 != 84) {
        goto LABEL_78;
      }
LABEL_44:
      {
        jsonSingletonCONST_TRUE::jsonSingletonCONST_TRUE((jsonSingletonCONST_TRUE *)&jsonSingletonCONST_TRUE::getValue(void)::single);
        __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonCONST_TRUE::getValue(void)::single, &dword_223D44000);
      }
      uint64_t v16 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v16 & 0x80u) == 0) {
        std::string::size_type v17 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v17 = a3->__r_.__value_.__l.__size_;
      }
      uint64_t v18 = byte_268067E67;
      if (byte_268067E67 < 0) {
        uint64_t v18 = qword_268067E58;
      }
      if (v17 != v18) {
        goto LABEL_89;
      }
      if (byte_268067E67 >= 0) {
        int v19 = &jsonSingletonCONST_TRUE::getValue(void)::single;
      }
      else {
        int v19 = (uint64_t *)jsonSingletonCONST_TRUE::getValue(void)::single;
      }
      if ((v16 & 0x80) != 0)
      {
        if (memcmp(a3->__r_.__value_.__l.__data_, v19, a3->__r_.__value_.__l.__size_)) {
          goto LABEL_89;
        }
      }
      else if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
      {
        while (a3->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
        {
          a3 = (const std::string *)((char *)a3 + 1);
          int v19 = (uint64_t *)((char *)v19 + 1);
          if (!--v16) {
            goto LABEL_84;
          }
        }
        goto LABEL_89;
      }
LABEL_84:
      *(unsigned char *)(a1 + 72) = 1;
      *(unsigned char *)a1 = 3;
      goto LABEL_87;
    }
    goto LABEL_59;
  }
  if (v10 != 34)
  {
    if (v10 != 70) {
      goto LABEL_78;
    }
    goto LABEL_27;
  }
  if (v11 != 34) {
    goto LABEL_89;
  }
  char v24 = 1;
LABEL_80:
  *(unsigned char *)a1 = v24;
  *(unsigned char *)(a1 + 88) = 0;
  return a1;
}

void sub_2242CD47C(void *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v4);
  }
  std::string::~string(v3);
  std::string::~string(v2);
  __cxa_call_unexpected(a1);
}

BOOL NumberToString::isNumeric(uint64_t a1)
{
  BOOL result = 0;
  unint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0) {
    long long v4 = (unsigned char *)a1;
  }
  else {
    long long v4 = *(unsigned char **)a1;
  }
  char v5 = 0;
  switch(*v4)
  {
    case '+':
    case '-':
      int v12 = (char)v4[1];
      if (v12 <= 47)
      {
        if (!v4[1]) {
          return 0;
        }
        BOOL result = 0;
        char v5 = 0;
        if (v12 != 46) {
          goto LABEL_5;
        }
      }
      else
      {
        if (v12 == 101) {
          return 0;
        }
        BOOL result = 0;
        if (v12 != 69)
        {
          LOBYTE(result) = 0;
          char v5 = 0;
          if (v12 == 48) {
            ++v4;
          }
          goto LABEL_5;
        }
      }
      return result;
    case '.':
      char v5 = 0;
      LOBYTE(result) = 1;
      goto LABEL_5;
    case '0':
      uint64_t v14 = v4 + 1;
      int v13 = (char)v4[1];
      if (v13 <= 68)
      {
        if ((v13 - 49) < 7)
        {
          unint64_t v15 = *(void *)(a1 + 8);
          if ((v3 & 0x80u) == 0) {
            unint64_t v15 = v3;
          }
          if (v15 >= 2)
          {
            uint64_t v16 = 0;
            unint64_t v17 = v15 - 1;
            while (memchr("01234567", (char)v14[v16], 8uLL))
            {
              ++v16;
              BOOL result = 1;
              if (v17 == v16) {
                return result;
              }
            }
            return v16 == -2;
          }
          return 1;
        }
        BOOL result = 1;
        if (!v4[1]) {
          return result;
        }
        if (v13 == 46)
        {
          char v5 = 0;
          ++v4;
          goto LABEL_5;
        }
        return 0;
      }
      if (v13 != 69)
      {
        if (v13 == 120) {
          return std::string::find_first_not_of[abi:ne180100]((uint64_t *)a1, "0123456789ABCDEFabcdef", 2uLL) == -1;
        }
        if (v13 != 101) {
          return 0;
        }
      }
      BOOL result = 0;
      int v19 = (char)v4[2];
      v4 += 2;
      int v18 = v19;
      char v5 = 1;
      if ((v19 - 48) < 0xA || v18 == 43 || v18 == 45)
      {
LABEL_5:
        int v6 = v4 + 1;
        char v7 = v4[1];
        if (v7)
        {
          while (1)
          {
            if ((v7 - 48) >= 0xA)
            {
              if (v7 == 101 || v7 == 69)
              {
                if (v5) {
                  return 0;
                }
                int v6 = v4 + 2;
                int v10 = (char)v4[2];
                if ((v10 - 48) >= 0xA)
                {
                  if (v10 != 45 && v10 != 43) {
                    return 0;
                  }
                  int v11 = (char)v4[3];
                  if (v11 < 0 || (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v11 + 60) & 0x400) == 0) {
                    return 0;
                  }
                }
                char v5 = 1;
              }
              else
              {
                if (v7 != 46) {
                  return 0;
                }
                char v9 = result | v5;
                char v5 = 0;
                if (v9) {
                  return 0;
                }
                LOBYTE(result) = 1;
              }
            }
            long long v4 = v6;
            int v8 = *++v6;
            char v7 = v8;
            if (!v8) {
              return 1;
            }
          }
        }
        return 1;
      }
      return result;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      goto LABEL_5;
    default:
      return result;
  }
}

void internalJSONNode::~internalJSONNode(internalJSONNode *this, JSONNode *a2)
{
  unint64_t v3 = (internalJSONNode **)*((void *)this + 15);
  if (v3)
  {
    jsonChildren::~jsonChildren(v3, a2);
    MEMORY[0x22A614FA0]();
  }
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void internalJSONNode::FetchString(internalJSONNode *this)
{
  uint64_t v2 = (void **)((char *)this + 40);
  uint64_t v3 = *((unsigned __int8 *)this + 63);
  if (*((char *)this + 63) < 0)
  {
    uint64_t v4 = *((void *)this + 6);
    if (!v4 || *(unsigned char *)*v2 != 34) {
      goto LABEL_17;
    }
  }
  else
  {
    if (!*((unsigned char *)this + 63) || *(unsigned char *)v2 != 34) {
      goto LABEL_17;
    }
    uint64_t v4 = *((unsigned __int8 *)this + 63);
  }
  uint64_t v5 = v4 - 1;
  if ((v3 & 0x80) != 0)
  {
    char v7 = (char *)*v2;
    if (*((unsigned char *)*v2 + v5) == 34)
    {
      int v6 = v7 + 1;
      uint64_t v3 = *((void *)this + 6);
      goto LABEL_12;
    }
  }
  else if (*((unsigned char *)v2 + v5) == 34)
  {
    int v6 = (char *)this + 41;
    char v7 = (char *)this + 40;
LABEL_12:
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(__p, v6, &v7[v3 - 1], &v7[v3 - 1] - v6);
    JSONWorker::FixString((uint64_t)__p, (unsigned char *)this + 64, &v10);
    if (*((char *)this + 63) < 0) {
      operator delete(*v2);
    }
    *(std::string *)uint64_t v2 = v10;
    *((unsigned char *)&v10.__r_.__value_.__s + 23) = 0;
    v10.__r_.__value_.__s.__data_[0] = 0;
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
LABEL_17:
  internalJSONNode::Nullify(this);
}

std::string *internalJSONNode::FetchNode(std::string *this)
{
  uint64_t v2 = &this[1].__r_.__value_.__r.__words[2];
  if (this[2].__r_.__value_.__s.__data_[15] < 0)
  {
    std::string::pointer data = this[2].__r_.__value_.__l.__data_;
    if (!data || *(unsigned char *)*v2 != 123) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!this[2].__r_.__value_.__s.__data_[15] || *(unsigned char *)v2 != 123) {
      goto LABEL_13;
    }
    std::string::pointer data = (std::string::pointer)this[2].__r_.__value_.__s.__data_[15];
  }
  std::string::pointer v4 = data - 1;
  uint64_t v5 = &this[1].__r_.__value_.__s.__data_[16];
  if (this[2].__r_.__value_.__s.__data_[15] < 0) {
    uint64_t v5 = (std::string::value_type *)*v2;
  }
  if (v4[(void)v5] == 125)
  {
    BOOL result = JSONWorker::DoNode(this, (uint64_t)v2);
    if (this[2].__r_.__value_.__s.__data_[15] < 0)
    {
      *(unsigned char *)this[1].__r_.__value_.__r.__words[2] = 0;
      this[2].__r_.__value_.__r.__words[0] = 0;
    }
    else
    {
      this[1].__r_.__value_.__s.__data_[16] = 0;
      this[2].__r_.__value_.__s.__data_[15] = 0;
    }
    return result;
  }
LABEL_13:
  return internalJSONNode::Nullify((internalJSONNode *)this);
}

void internalJSONNode::FetchArray(internalJSONNode *this)
{
  uint64_t v2 = (unsigned char **)((char *)this + 40);
  if (*((char *)this + 63) < 0)
  {
    uint64_t v3 = *((void *)this + 6);
    if (!v3 || **v2 != 91) {
      goto LABEL_13;
    }
  }
  else
  {
    if (!*((unsigned char *)this + 63) || *(unsigned char *)v2 != 91) {
      goto LABEL_13;
    }
    uint64_t v3 = *((unsigned __int8 *)this + 63);
  }
  uint64_t v4 = v3 - 1;
  uint64_t v5 = (char *)this + 40;
  if ((*((unsigned char *)this + 63) & 0x80) != 0) {
    uint64_t v5 = *v2;
  }
  if (v5[v4] == 93)
  {
    JSONWorker::DoArray(this, (uint64_t)v2);
    if (*((char *)this + 63) < 0)
    {
      **((unsigned char **)this + 5) = 0;
      *((void *)this + 6) = 0;
    }
    else
    {
      *((unsigned char *)this + 4CoreML::Specification::DictVectorizer::New(this, 0) = 0;
      *((unsigned char *)this + 63) = 0;
    }
    return;
  }
LABEL_13:
  internalJSONNode::Nullify(this);
}

void internalJSONNode::Fetch(internalJSONNode *this)
{
  if (!*((unsigned char *)this + 88))
  {
    switch(*(unsigned char *)this)
    {
      case 1:
        internalJSONNode::FetchString(this);
        break;
      case 2:
        uint64_t v2 = (char *)this + 40;
        if (*((char *)this + 63) < 0) {
          uint64_t v2 = *(const char **)v2;
        }
        *((double *)this + 9) = atof(v2);
        break;
      case 4:
        internalJSONNode::FetchArray(this);
        break;
      case 5:
        internalJSONNode::FetchNode((std::string *)this);
        break;
      default:
        internalJSONNode::Nullify(this);
        break;
    }
    *((unsigned char *)this + 88) = 1;
  }
}

std::string *internalJSONNode::Set(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)a1 = 1;
  BOOL result = std::string::operator=((std::string *)(a1 + 40), a2);
  *(unsigned char *)(a1 + 64) = 1;
  *(unsigned char *)(a1 + 88) = 1;
  return result;
}

double internalJSONNode::Set(internalJSONNode *this, int a2)
{
  *(unsigned char *)this = 2;
  *((double *)this + 9) = (double)a2;
  NumberToString::_itoa<int>(a2, &v5);
  uint64_t v3 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v3 = v5;
  *((void *)this + 7) = v6;
  *((unsigned char *)this + 88) = 1;
  return result;
}

void *NumberToString::_itoa<int>@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v8[1] = 0;
  uint64_t v4 = v8;
  if (a1 >= 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = -a1;
  }
  do
  {
    *v4-- = (v5 % 0xA) | 0x30;
    BOOL v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (a1 < 0) {
    *uint64_t v4 = 45;
  }
  else {
    ++v4;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

void sub_2242CDCA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_call_unexpected(a1);
}

double internalJSONNode::Set(internalJSONNode *this, unint64_t a2)
{
  *(unsigned char *)this = 2;
  *((double *)this + 9) = (double)a2;
  NumberToString::_uitoa<unsigned long>(a2, &v5);
  uint64_t v3 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v3 = v5;
  *((void *)this + 7) = v6;
  *((unsigned char *)this + 88) = 1;
  return result;
}

void *NumberToString::_uitoa<unsigned long>@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = &v6;
  char v6 = 0;
  do
  {
    *--uint64_t v3 = (a1 % 0xA) | 0x30;
    BOOL v4 = a1 > 9;
    a1 /= 0xAuLL;
  }
  while (v4);
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void sub_2242CDDA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_call_unexpected(a1);
}

void *NumberToString::_itoa<long long>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  v8[1] = 0;
  BOOL v4 = v8;
  if (a1 >= 0) {
    unint64_t v5 = a1;
  }
  else {
    unint64_t v5 = -a1;
  }
  do
  {
    *v4-- = (v5 % 0xA) | 0x30;
    BOOL v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (a1 < 0) {
    *BOOL v4 = 45;
  }
  else {
    ++v4;
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

void sub_2242CDE5C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_call_unexpected(a1);
}

void *NumberToString::_ftoa@<X0>(double a1@<D0>, void *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1 < 0.0) {
    goto LABEL_5;
  }
  double v4 = (double)(unint64_t)a1;
  BOOL v5 = a1 - v4 < 0.00001;
  if (v4 >= a1) {
    BOOL v5 = a1 - v4 > -0.00001;
  }
  if (v5)
  {
    return NumberToString::_uitoa<unsigned long>((unint64_t)a1, a2);
  }
  else
  {
LABEL_5:
    double v6 = (double)(uint64_t)a1;
    BOOL v7 = a1 - v6 > -0.00001;
    if (v6 < a1) {
      BOOL v7 = a1 - v6 < 0.00001;
    }
    if (v7)
    {
      return NumberToString::_itoa<long long>((uint64_t)a1, a2);
    }
    else
    {
      int v8 = __str;
      snprintf(__str, 0x3FuLL, "%Lf", a1);
      while (*v8)
      {
        if (*v8 == 46)
        {
          std::string v10 = v8;
LABEL_16:
          int v11 = v10 + 1;
          while (1)
          {
            int v13 = *v11++;
            int v12 = v13;
            if (!v13) {
              break;
            }
            if (v12 != 48)
            {
              std::string v10 = v11 - 1;
              int v8 = v11;
              goto LABEL_16;
            }
          }
          char *v8 = 0;
          return std::string::basic_string[abi:ne180100]<0>(a2, __str);
        }
        ++v8;
      }
      return std::string::basic_string[abi:ne180100]<0>(a2, __str);
    }
  }
}

void sub_2242CE01C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_call_unexpected(a1);
}

double internalJSONNode::Set(internalJSONNode *this, float a2)
{
  *(unsigned char *)this = 2;
  double v3 = a2;
  *((double *)this + 9) = v3;
  NumberToString::_ftoa(v3, &v6);
  double v4 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0) {
    operator delete(*v4);
  }
  double result = *(double *)&v6;
  *(_OWORD *)double v4 = v6;
  *((void *)this + 7) = v7;
  *((unsigned char *)this + 88) = 1;
  return result;
}

double internalJSONNode::Set(internalJSONNode *this, double a2)
{
  *(unsigned char *)this = 2;
  *((double *)this + 9) = a2;
  NumberToString::_ftoa(a2, &v5);
  double v3 = (void **)((char *)this + 40);
  if (*((char *)this + 63) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)double v3 = v5;
  *((void *)this + 7) = v6;
  *((unsigned char *)this + 88) = 1;
  return result;
}

unsigned char *internalJSONNode::push_back(unsigned char *result)
{
  if ((*result & 0xFE) == 4) {
    JSONNode::newJSONNode();
  }
  return result;
}

internalJSONNode *internalJSONNode::deleteInternal(internalJSONNode *this, internalJSONNode *a2)
{
  if (this)
  {
    internalJSONNode::~internalJSONNode(this, a2);
    JUMPOUT(0x22A614FA0);
  }
  return this;
}

void internalJSONNode::newInternal(internalJSONNode *this)
{
}

void internalJSONNode::newInternal()
{
}

void internalJSONNode::newInternal(internalJSONNode *this, const internalJSONNode *a2)
{
}

void jsonSingletonCONST_TRUE::jsonSingletonCONST_TRUE(jsonSingletonCONST_TRUE *this)
{
}

void jsonSingletonCONST_FALSE::jsonSingletonCONST_FALSE(jsonSingletonCONST_FALSE *this)
{
}

void jsonSingletonCONST_NULL::jsonSingletonCONST_NULL(jsonSingletonCONST_NULL *this)
{
}

uint64_t std::string::find_first_not_of[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  BOOL v8 = v6 > a3;
  unint64_t v9 = v6 - a3;
  if (!v8) {
    return -1;
  }
  size_t v10 = v7;
  int v11 = (char *)(v5 + a3);
  if (v7)
  {
    while (memchr(__s, *v11, v10))
    {
      ++v11;
      if (!--v9) {
        return -1;
      }
    }
  }
  return (uint64_t)&v11[-v5];
}

void jsonChildren::~jsonChildren(internalJSONNode **this, JSONNode *a2)
{
  if (*this)
  {
    jsonChildren::deleteAll(this, a2);
    free(*this);
    *this = 0;
  }
}

void internalJSONNode::internalJSONNode(internalJSONNode *this, char a2)
{
  *(unsigned char *)this = a2;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_2246C5F80;
  *((unsigned char *)this + 88) = 1;
  {
    jsonSingletonEMPTY_JSON_STRING::getValue(void)::single = 0uLL;
    qword_268067230 = 0;
    __cxa_atexit((void (*)(void *))jsonSingletonEMPTY_JSON_STRING::~jsonSingletonEMPTY_JSON_STRING, &jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, &dword_223D44000);
  }
  if (SHIBYTE(qword_268067230) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, (const std::string::value_type *)jsonSingletonEMPTY_JSON_STRING::getValue(void)::single, *((std::string::size_type *)&jsonSingletonEMPTY_JSON_STRING::getValue(void)::single + 1));
  }
  else
  {
    *((_OWORD *)this + 6) = jsonSingletonEMPTY_JSON_STRING::getValue(void)::single;
    *((void *)this + 14) = qword_268067230;
  }
  if ((*(unsigned char *)this & 0xFE) == 4) {
    operator new();
  }
  *((void *)this + 15) = 0;
}

void sub_2242CE504(void *a1)
{
  std::string::~string(v2);
  std::string::~string(v1);
  __cxa_call_unexpected(a1);
}

void *png_init_filter_functions_neon(void *result, int a2)
{
  result[144] = png_read_filter_row_up_neon;
  uint64_t v2 = png_read_filter_row_paeth3_neon;
  double v3 = png_read_filter_row_avg3_neon;
  double v4 = png_read_filter_row_sub3_neon;
  if (a2 != 3)
  {
    if (a2 != 4) {
      return result;
    }
    uint64_t v2 = png_read_filter_row_paeth4_neon;
    double v3 = png_read_filter_row_avg4_neon;
    double v4 = png_read_filter_row_sub4_neon;
  }
  result[143] = v4;
  result[145] = v3;
  result[146] = v2;
  return result;
}

int8x16_t png_read_filter_row_up_neon(uint64_t a1, int8x16_t *a2, int8x16_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 1)
  {
    double v4 = (int8x16_t *)((char *)a2 + v3);
    do
    {
      int8x16_t v5 = *a3++;
      int8x16_t result = vaddq_s8(v5, *a2);
      *a2++ = result;
    }
    while (a2 < v4);
  }
  return result;
}

int8x16_t png_read_filter_row_sub3_neon(uint64_t a1, unint64_t a2, int8x16_t result)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 1)
  {
    unint64_t v4 = a2 + v3;
    int8x16_t result = *(int8x16_t *)a2;
    int8x8_t v5 = (int8x8_t)vextq_s8(result, result, 8uLL).u64[0];
    int8x8_t v6 = 0;
    unint64_t v7 = a2;
    do
    {
      int8x8_t v8 = vadd_s8(*(int8x8_t *)result.i8, v6);
      int8x8_t v9 = vadd_s8(vext_s8(*(int8x8_t *)result.i8, v5, 3uLL), v8);
      int8x8_t v10 = vadd_s8(v9, vext_s8(*(int8x8_t *)result.i8, v5, 6uLL));
      int8x16_t v11 = *(int8x16_t *)(v7 + 12);
      v7 += 12;
      int8x16_t result = v11;
      int8x8_t v6 = vadd_s8(v10, vext_s8(v5, v5, 1uLL));
      *(_DWORD *)a2 = v8.i32[0];
      *(_DWORD *)(a2 + 3) = v9.i32[0];
      int8x8_t v5 = (int8x8_t)vextq_s8(result, result, 8uLL).u64[0];
      *(_DWORD *)(a2 + 6) = v10.i32[0];
      *(_DWORD *)(a2 + 9) = v6.i32[0];
      a2 = v7;
    }
    while (v7 < v4);
  }
  return result;
}

int8x8_t png_read_filter_row_sub4_neon(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 1)
  {
    unint64_t v3 = a2 + v2;
    int8x8_t v4 = 0;
    do
    {
      float32x2x4_t v8 = vld4_f32((const float *)a2);
      int8x8_t result = vadd_s8(v4, (int8x8_t)v8.val[0]);
      int8x8_t v6 = vadd_s8(result, (int8x8_t)v8.val[1]);
      int8x8_t v7 = vadd_s8(v6, (int8x8_t)v8.val[2]);
      int8x8_t v4 = vadd_s8(v7, (int8x8_t)v8.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v6.i32[0];
      *(_DWORD *)(a2 + 8) = v7.i32[0];
      *(_DWORD *)(a2 + 12) = v4.i32[0];
      a2 += 16;
    }
    while (a2 < v3);
  }
  return result;
}

int8x8_t png_read_filter_row_avg3_neon(uint64_t a1, unint64_t a2, _OWORD *a3, int8x8_t result)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= 1)
  {
    unint64_t v5 = a2 + v4;
    int8x16_t v6 = *(int8x16_t *)a2;
    int8x8_t result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
    uint8x8_t v7 = 0;
    unint64_t v8 = a2;
    do
    {
      int8x16_t v9 = *(int8x16_t *)a3;
      a3 = (_OWORD *)((char *)a3 + 12);
      int8x16_t v10 = v9;
      uint8x8_t v11 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v7, *(uint8x8_t *)v9.i8), *(int8x8_t *)v6.i8);
      int8x8_t v12 = vext_s8(*(int8x8_t *)v6.i8, result, 6uLL);
      uint8x8_t v13 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v11, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 3uLL)), vext_s8(*(int8x8_t *)v6.i8, result, 3uLL));
      int8x8_t v14 = vext_s8(result, result, 1uLL);
      int8x16_t v15 = *(int8x16_t *)(v8 + 12);
      v8 += 12;
      int8x16_t v6 = v15;
      int8x8_t result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
      uint8x8_t v16 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v13, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, v10, 6uLL)), v12);
      *(_DWORD *)a2 = v11.i32[0];
      *(_DWORD *)(a2 + 3) = v13.i32[0];
      uint8x8_t v7 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v16, (uint8x8_t)*(_OWORD *)&vextq_s8(v10, vextq_s8(v10, v10, 8uLL), 9uLL)), v14);
      *(_DWORD *)(a2 + 6) = v16.i32[0];
      *(_DWORD *)(a2 + 9) = v7.i32[0];
      a2 = v8;
    }
    while (v8 < v5);
  }
  return result;
}

uint8x8_t png_read_filter_row_avg4_neon(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 1)
  {
    unint64_t v4 = a2 + v3;
    uint8x8_t v5 = 0;
    do
    {
      float32x2x4_t v9 = vld4_f32((const float *)a2);
      float32x2x4_t v10 = vld4_f32(a3);
      uint8x8_t result = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v5, (uint8x8_t)v10.val[0]), (int8x8_t)v9.val[0]);
      uint8x8_t v7 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(result, (uint8x8_t)v10.val[1]), (int8x8_t)v9.val[1]);
      uint8x8_t v8 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v7, (uint8x8_t)v10.val[2]), (int8x8_t)v9.val[2]);
      uint8x8_t v5 = (uint8x8_t)vadd_s8((int8x8_t)vhadd_u8(v8, (uint8x8_t)v10.val[3]), (int8x8_t)v9.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v7.i32[0];
      *(_DWORD *)(a2 + 8) = v8.i32[0];
      *(_DWORD *)(a2 + 12) = v5.i32[0];
      a2 += 16;
      a3 += 4;
    }
    while (a2 < v4);
  }
  return result;
}

int8x8_t png_read_filter_row_paeth3_neon(uint64_t a1, unint64_t a2, _OWORD *a3, int8x8_t result)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= 1)
  {
    unint64_t v5 = a2 + v4;
    int8x16_t v6 = *(int8x16_t *)a2;
    uint8x8_t result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
    int8x8_t v7 = 0;
    int8x8_t v8 = 0;
    unint64_t v9 = a2;
    do
    {
      int8x16_t v10 = *(int8x16_t *)a3;
      a3 = (_OWORD *)((char *)a3 + 12);
      int8x16_t v11 = v10;
      uint16x8_t v12 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v8), vshll_n_u8((uint8x8_t)v7, 1uLL));
      int8x8_t v13 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v12, vabdl_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v7))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v8, (uint8x8_t)v7), vabd_u8(*(uint8x8_t *)v10.i8, (uint8x8_t)v7))), v8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v8, (uint8x8_t)v7), v12)), v7, *(int8x8_t *)v10.i8)), *(int8x8_t *)v6.i8);
      v12.i64[0] = vextq_s8(v11, v11, 3uLL).u64[0];
      uint16x8_t v14 = vabdq_u16(vaddl_u8((uint8x8_t)v13, *(uint8x8_t *)v12.i8), vshll_n_u8(*(uint8x8_t *)v10.i8, 1uLL));
      *(int8x8_t *)v14.i8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v14, vabdl_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v10.i8))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v13, *(uint8x8_t *)v10.i8), vabd_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v10.i8))), v13, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v13, *(uint8x8_t *)v10.i8), v14)), *(int8x8_t *)v10.i8, *(int8x8_t *)v12.i8)), vext_s8(*(int8x8_t *)v6.i8, result, 3uLL));
      int8x8_t v15 = (int8x8_t)vextq_s8(v11, v11, 6uLL).u64[0];
      uint16x8_t v16 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v14.i8, (uint8x8_t)v15), vshll_n_u8(*(uint8x8_t *)v12.i8, 1uLL));
      *(int8x8_t *)v12.i8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v16, vabdl_u8((uint8x8_t)v15, *(uint8x8_t *)v12.i8))), (int8x8_t)vcge_u8(vabd_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v12.i8), vabd_u8((uint8x8_t)v15, *(uint8x8_t *)v12.i8))), *(int8x8_t *)v14.i8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8(*(uint8x8_t *)v14.i8, *(uint8x8_t *)v12.i8), v16)), *(int8x8_t *)v12.i8, v15)), vext_s8(*(int8x8_t *)v6.i8, result, 6uLL));
      int8x8_t v17 = vext_s8(result, result, 1uLL);
      int8x16_t v18 = *(int8x16_t *)(v9 + 12);
      v9 += 12;
      int8x16_t v6 = v18;
      int8x8_t v7 = (int8x8_t)vextq_s8(v11, vextq_s8(v11, v11, 8uLL), 9uLL).u64[0];
      uint8x8_t result = (int8x8_t)vextq_s8(v6, v6, 8uLL).u64[0];
      uint16x8_t v19 = vabdq_u16(vaddl_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v7), vshll_n_u8((uint8x8_t)v15, 1uLL));
      *(_DWORD *)a2 = v13.i32[0];
      *(_DWORD *)(a2 + 3) = v14.i32[0];
      int8x8_t v8 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v19, vabdl_u8((uint8x8_t)v7, (uint8x8_t)v15))), (int8x8_t)vcge_u8(vabd_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v15), vabd_u8((uint8x8_t)v7, (uint8x8_t)v15))), *(int8x8_t *)v12.i8, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8(*(uint8x8_t *)v12.i8, (uint8x8_t)v15), v19)), v15, v7)), v17);
      *(_DWORD *)(a2 + 6) = v12.i32[0];
      *(_DWORD *)(a2 + 9) = v8.i32[0];
      a2 = v9;
    }
    while (v9 < v5);
  }
  return result;
}

int8x8_t png_read_filter_row_paeth4_neon(uint64_t a1, unint64_t a2, const float *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 1)
  {
    unint64_t v4 = a2 + v3;
    int8x8_t v5 = 0;
    int8x8_t v6 = 0;
    do
    {
      float32x2x4_t v15 = vld4_f32((const float *)a2);
      float32x2x4_t v14 = vld4_f32(a3);
      uint16x8_t v7 = vabdq_u16(vaddl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v6), vshll_n_u8((uint8x8_t)v5, 1uLL));
      int8x8_t result = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v7, vabdl_u8((uint8x8_t)v14.val[0], (uint8x8_t)v5))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v6, (uint8x8_t)v5), vabd_u8((uint8x8_t)v14.val[0], (uint8x8_t)v5))), v6, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v6, (uint8x8_t)v5), v7)), v5, (int8x8_t)v14.val[0])), (int8x8_t)v15.val[0]);
      uint16x8_t v9 = vabdq_u16(vaddl_u8((uint8x8_t)result, (uint8x8_t)v14.val[1]), vshll_n_u8((uint8x8_t)v14.val[0], 1uLL));
      int8x8_t v10 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v9, vabdl_u8((uint8x8_t)v14.val[1], (uint8x8_t)v14.val[0]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)result, (uint8x8_t)v14.val[0]), vabd_u8((uint8x8_t)v14.val[1], (uint8x8_t)v14.val[0]))), result, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)result, (uint8x8_t)v14.val[0]), v9)), (int8x8_t)v14.val[0], (int8x8_t)v14.val[1])), (int8x8_t)v15.val[1]);
      uint16x8_t v11 = vabdq_u16(vaddl_u8((uint8x8_t)v10, (uint8x8_t)v14.val[2]), vshll_n_u8((uint8x8_t)v14.val[1], 1uLL));
      int8x8_t v12 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v11, vabdl_u8((uint8x8_t)v14.val[2], (uint8x8_t)v14.val[1]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v10, (uint8x8_t)v14.val[1]), vabd_u8((uint8x8_t)v14.val[2], (uint8x8_t)v14.val[1]))), v10, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v10, (uint8x8_t)v14.val[1]), v11)), (int8x8_t)v14.val[1], (int8x8_t)v14.val[2])), (int8x8_t)v15.val[2]);
      uint16x8_t v13 = vabdq_u16(vaddl_u8((uint8x8_t)v12, (uint8x8_t)v14.val[3]), vshll_n_u8((uint8x8_t)v14.val[2], 1uLL));
      int8x8_t v6 = vadd_s8(vbsl_s8(vand_s8(vmovn_s16((int16x8_t)vcgeq_u16(v13, vabdl_u8((uint8x8_t)v14.val[3], (uint8x8_t)v14.val[2]))), (int8x8_t)vcge_u8(vabd_u8((uint8x8_t)v12, (uint8x8_t)v14.val[2]), vabd_u8((uint8x8_t)v14.val[3], (uint8x8_t)v14.val[2]))), v12, vbsl_s8(vmovn_s16((int16x8_t)vcgtq_u16(vabdl_u8((uint8x8_t)v12, (uint8x8_t)v14.val[2]), v13)), (int8x8_t)v14.val[2], (int8x8_t)v14.val[3])), (int8x8_t)v15.val[3]);
      *(_DWORD *)a2 = result.i32[0];
      *(_DWORD *)(a2 + 4) = v10.i32[0];
      *(_DWORD *)(a2 + 8) = v12.i32[0];
      *(_DWORD *)(a2 + 12) = v6.i32[0];
      a2 += 16;
      a3 += 4;
      int8x8_t v5 = (int8x8_t)v14.val[3];
    }
    while (a2 < v4);
  }
  return result;
}

uint64_t png_riffle_palette_neon(uint64_t result)
{
  uint64_t v1 = *(const char **)(result + 584);
  uint64_t v2 = *(char **)(result + 976);
  uint64_t v3 = *(char **)(result + 736);
  uint64_t v4 = *(unsigned __int16 *)(result + 600);
  unint64_t v5 = -16;
  *(void *)&long long v6 = -1;
  *((void *)&v6 + 1) = -1;
  uint16x8_t v7 = v2;
  do
  {
    int8x16x3_t v10 = vld3q_s8(v1);
    v1 += 48;
    vst4q_s8(v7, *(int8x16x4_t *)(&v6 - 3));
    v7 += 64;
    v5 += 16;
  }
  while (v5 < 0xF0);
  if (v4)
  {
    int8x8_t v8 = v2 + 3;
    do
    {
      char v9 = *v3++;
      unsigned char *v8 = v9;
      v8 += 4;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t png_do_expand_palette_rgba8_neon(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4, void *a5)
{
  unint64_t v5 = *a2;
  if (v5 < 4) {
    return 0;
  }
  uint64_t v7 = 0;
  int v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = *(void *)(a1 + 976);
  *a5 -= 15;
  do
  {
    uint16x8_t v11 = (unsigned __int8 *)(*a4 + v7);
    LODWORD(v12) = *(_DWORD *)(v10 + 4 * *(v11 - 3));
    DWORD1(v12) = *(_DWORD *)(v10 + 4 * *(v11 - 2));
    DWORD2(v12) = *(_DWORD *)(v10 + 4 * *(v11 - 1));
    HIDWORD(v12) = *(_DWORD *)(v10 + 4 * *v11);
    *(_OWORD *)(*a5 - v8) = v12;
    v9 += 4;
    v8 += 16;
    v7 -= 4;
  }
  while (v9 < v5);
  if (v5 == v9) {
    uint64_t result = v9;
  }
  else {
    uint64_t result = (v9 - 4);
  }
  *a4 -= result;
  *a5 -= 4 * (int)result;
  return result;
}

uint64_t png_do_expand_palette_rgb8_neon(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4, void *a5)
{
  unsigned int v5 = *a2;
  if (*a2 < 9) {
    return 0;
  }
  int v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = *(void *)(a1 + 584);
  *a5 -= 23;
  do
  {
    uint64_t v10 = (unsigned __int8 *)(*a4 - (int)v8);
    uint16x8_t v11 = (const char *)(v9 + 3 * *(v10 - 7));
    int8x8x3_t v20 = vld3_dup_s8(v11);
    long long v12 = (__int8 *)(v9 + 3 * *(v10 - 6));
    v20.val[0].i8[1] = *v12;
    v20.val[1].i8[1] = v12[1];
    v20.val[2].i8[1] = v12[2];
    uint16x8_t v13 = (__int8 *)(v9 + 3 * *(v10 - 5));
    v20.val[0].i8[2] = *v13;
    v20.val[1].i8[2] = v13[1];
    v20.val[2].i8[2] = v13[2];
    float32x2x4_t v14 = (__int8 *)(v9 + 3 * *(v10 - 4));
    v20.val[0].i8[3] = *v14;
    v20.val[1].i8[3] = v14[1];
    v20.val[2].i8[3] = v14[2];
    float32x2x4_t v15 = (__int8 *)(v9 + 3 * *(v10 - 3));
    v20.val[0].i8[4] = *v15;
    v20.val[1].i8[4] = v15[1];
    v20.val[2].i8[4] = v15[2];
    uint16x8_t v16 = (__int8 *)(v9 + 3 * *(v10 - 2));
    v20.val[0].i8[5] = *v16;
    v20.val[1].i8[5] = v16[1];
    v20.val[2].i8[5] = v16[2];
    int8x8_t v17 = (__int8 *)(v9 + 3 * *(v10 - 1));
    v20.val[0].i8[6] = *v17;
    v20.val[1].i8[6] = v17[1];
    v20.val[2].i8[6] = v17[2];
    int8x16_t v18 = (__int8 *)(v9 + 3 * *v10);
    v20.val[0].i8[7] = *v18;
    v20.val[1].i8[7] = v18[1];
    v20.val[2].i8[7] = v18[2];
    uint16x8_t v19 = (char *)(*a5 - v7);
    vst3_s8(v19, v20);
    v8 += 8;
    v7 += 24;
  }
  while (v8 < v5);
  if (v5 == v8) {
    uint64_t result = v8;
  }
  else {
    uint64_t result = v8 - 8;
  }
  *a4 -= (int)result;
  *a5 -= 3 * (int)result;
  return result;
}

unint64_t turi::hash64_proportion_cutoff(turi *this, double a2)
{
  unint64_t v2 = vcvtd_n_u64_f64(a2, 0x3FuLL);
  unint64_t v3 = 0x8000000000000000;
  if (v2 < 0x8000000000000000) {
    unint64_t v3 = v2;
  }
  if (v2 >= 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }
  return v3 + v2;
}

uint64_t CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec@<X0>(CoreML::TreeEnsembles *this@<X0>, void *a2@<X8>)
{
  v217[19] = *MEMORY[0x263EF8340];
  uint64_t v212 = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v209);
  v208[0] = &v212;
  v208[1] = v209;
  int v5 = *((_DWORD *)this + 11);
  if (v5 != 302 && v5 != 402)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Model is not a tree ensemble.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2646D6758, MEMORY[0x263F8C080]);
  }
  if (*(void *)(*((void *)this + 4) + 16)) {
    long long v6 = *(uint64_t **)(*((void *)this + 4) + 16);
  }
  else {
    long long v6 = &CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  }
  uint64_t v205 = 0;
  int v206 = 0;
  uint64_t v207 = 0;
  unint64_t v7 = v6[8];
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Given output dimension equals 0.");
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  BOOL v184 = this;
  uint64_t v194 = 0;
  unint64_t v195 = 0;
  v193 = &v194;
  uint64_t v8 = v6[4];
  if (v8) {
    uint64_t v9 = v8 + 8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *((int *)v6 + 6);
  unint64_t v185 = v7;
  uint64_t v182 = a2;
  BOOL v183 = v6;
  if (!v10)
  {
    int v202 = &v193;
    uint64_t v203 = (void **)v208;
    goto LABEL_118;
  }
  uint64_t v186 = v9 + 8 * v10;
  std::string::size_type v188 = *(void *)(MEMORY[0x263F8C2C8] + 24);
  std::string::size_type v189 = *MEMORY[0x263F8C2C8];
  do
  {
    uint64_t v11 = *(void *)v9;
    std::string::size_type v13 = *(void *)(*(void *)v9 + 40);
    std::string::size_type v12 = *(void *)(*(void *)v9 + 48);
    float32x2x4_t v14 = v194;
    float32x2x4_t v15 = &v194;
    if (v194)
    {
      uint16x8_t v16 = &v194;
      do
      {
        std::string::size_type v17 = v14[4];
        if (v17 >= v13)
        {
          if (v13 >= v17)
          {
            if (v14[5] < v12) {
              ++v14;
            }
            else {
              uint16x8_t v16 = (void **)v14;
            }
          }
          else
          {
            uint16x8_t v16 = (void **)v14;
          }
        }
        else
        {
          ++v14;
        }
        float32x2x4_t v14 = (void *)*v14;
      }
      while (v14);
      float32x2x4_t v15 = &v194;
      if (v16 != &v194)
      {
        int8x16_t v18 = v16[6];
        if (v18[4] == v13)
        {
          float32x2x4_t v15 = v16;
          if (v18[5] == v12)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Tree Node with TreeID=", 22);
            uint16x8_t v19 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"and NodeID=", 11);
            int8x8x3_t v20 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" duplicated in specification.", 29);
            std::stringbuf::str();
            CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
            if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v190.__r_.__value_.__l.__data_);
            }
            __p.__r_.__value_.__r.__words[0] = v189;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v189 - 24)) = v188;
            __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
            if (v216 < 0) {
              operator delete(v215);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x22A614E30](v217);
            goto LABEL_69;
          }
        }
        else
        {
          float32x2x4_t v15 = v16;
        }
      }
    }
    std::string::size_type v21 = (char *)operator new(0xB0uLL);
    uint64_t v22 = v21;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = 0;
    *(_OWORD *)(v21 + 24) = 0u;
    std::string::size_type v23 = (std::string::size_type)(v21 + 24);
    *(void *)std::string::size_type v21 = &unk_26D777830;
    *(_OWORD *)(v21 + 4CoreML::Specification::DictVectorizer::New(this, 0) = 0u;
    *(_OWORD *)(v21 + 56) = 0u;
    *(_OWORD *)(v21 + 72) = 0u;
    *(_OWORD *)(v21 + 88) = 0u;
    *(_OWORD *)(v21 + 104) = 0u;
    *(_OWORD *)(v21 + 12CoreML::Specification::DictVectorizer::New(this, 0) = 0u;
    *(_OWORD *)(v21 + 136) = 0u;
    *(_OWORD *)(v21 + 152) = 0u;
    *((void *)v21 + 21) = 0;
    *(_OWORD *)(v21 + 56) = *(_OWORD *)(v11 + 40);
    unsigned int v24 = *(_DWORD *)(v11 + 56);
    v21[24] = v24 == 6;
    *((void *)v21 + 12) = *(void *)(v11 + 96);
    uint64_t v187 = v15;
    if (v24 == 6)
    {
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v21 + 104), *(int *)(v11 + 24));
      uint64_t v25 = *(unsigned int *)(v11 + 24);
      int v26 = (unint64_t *)*((void *)v22 + 13);
      if ((int)v25 >= 1)
      {
        std::string::size_type v27 = v26 + 1;
        uint64_t v28 = (uint64_t *)(*(void *)(v11 + 32) + 8);
        do
        {
          uint64_t v29 = *v28++;
          uint64_t v30 = *(void *)(v29 + 24);
          *(v27 - 1) = *(void *)(v29 + 16);
          *std::string::size_type v27 = v30;
          v27 += 2;
          --v25;
        }
        while (v25);
      }
      uint64_t v31 = (unint64_t *)*((void *)v22 + 14);
      uint64_t v32 = (char *)v31 - (char *)v26;
      if (v31 == v26)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Leaf Node (TreeID=", 18);
        uint64_t v38 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", NodeID=", 9);
        uint64_t v39 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") has no evaluation value(s) specified.", 39);
        std::stringbuf::str();
        CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
        if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v190.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = v189;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v189 - 24)) = v188;
        __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
        if (v216 < 0) {
          operator delete(v215);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x22A614E30](v217);
      }
      else
      {
        if ((unint64_t)v32 >= 0x11)
        {
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(v26, *((double **)v22 + 14), (uint64_t)&__p, 126 - 2 * __clz(v32 >> 4), 1);
          int v26 = (unint64_t *)*((void *)v22 + 13);
          uint64_t v31 = (unint64_t *)*((void *)v22 + 14);
        }
        if (v26 == v31)
        {
          std::string v37 = v31;
        }
        else
        {
          do
          {
            if (*v26 >= v185)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Leaf Node (TreeID=", 18);
              uint64_t v33 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", NodeID=", 9);
              std::string::size_type v34 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)") specifies evaluation value applied to dimension ", 50);
              std::string v35 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"; which is out of range. Dimension must be less than ",
                53);
              unint64_t v36 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
              std::stringbuf::str();
              CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v190.__r_.__value_.__l.__data_);
              }
              __p.__r_.__value_.__r.__words[0] = v189;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v189 - 24)) = v188;
              __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
              if (v216 < 0) {
                operator delete(v215);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x22A614E30](v217);
            }
            v26 += 2;
          }
          while (v26 != v31);
          uint64_t v31 = (unint64_t *)*((void *)v22 + 13);
          std::string v37 = (unint64_t *)*((void *)v22 + 14);
        }
        if ((char *)v37 - (char *)v31 != 16)
        {
          uint64_t v40 = 0;
          unint64_t v41 = 0;
          do
          {
            if (v31[v40] == v31[v40 + 2])
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Leaf Node (TreeID=", 18);
              uint64_t v42 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", NodeID=", 9);
              unint64_t v43 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") specifies multipule evaluation values applied to dimension ", 61);
              unint64_t v44 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)".", 1);
              std::stringbuf::str();
              CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v190.__r_.__value_.__l.__data_);
              }
              __p.__r_.__value_.__r.__words[0] = v189;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v189 - 24)) = v188;
              __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
              if (v216 < 0) {
                operator delete(v215);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x22A614E30](v217);
              uint64_t v31 = (unint64_t *)*((void *)v22 + 13);
              std::string v37 = (unint64_t *)*((void *)v22 + 14);
            }
            ++v41;
            v40 += 2;
          }
          while (v41 < (((char *)v37 - (char *)v31) >> 4) - 1);
        }
      }
    }
    else
    {
      if (v24 >= 6)
      {
        int v177 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v177, "Branch mode hit bad value -- this is confusing; error in validator?");
        __cxa_throw(v177, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      *((_DWORD *)v21 + 7) = v24;
      *((void *)v21 + 4) = *(void *)(v11 + 64);
      *((void *)v21 + 5) = *(void *)(v11 + 72);
      *(_OWORD *)(v21 + 72) = *(_OWORD *)(v11 + 80);
      v21[88] = *(unsigned char *)(v11 + 60);
    }
    __p.__r_.__value_.__r.__words[0] = v13;
    __p.__r_.__value_.__l.__size_ = v12;
    __p.__r_.__value_.__r.__words[2] = v23;
    uint64_t v214 = (std::__shared_weak_count *)v22;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v22 + 1, 1uLL, memory_order_relaxed);
    std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>((uint64_t **)&v193, v187, (unint64_t *)&__p, (uint64_t)&__p);
    if (v214) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v214);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v22);
LABEL_69:
    v9 += 8;
  }
  while (v9 != v186);
  uint64_t v45 = v193;
  int v202 = &v193;
  uint64_t v203 = (void **)v208;
  if (v193 != &v194)
  {
    while (1)
    {
      uint64_t v46 = v45[6];
      if (!*(unsigned char *)v46) {
        break;
      }
LABEL_110:
      int v78 = (void *)v45[1];
      if (v78)
      {
        do
        {
          uint64_t v79 = (void **)v78;
          int v78 = (void *)*v78;
        }
        while (v78);
      }
      else
      {
        do
        {
          uint64_t v79 = (void **)v45[2];
          BOOL v80 = *v79 == v45;
          uint64_t v45 = v79;
        }
        while (!v80);
      }
      uint64_t v45 = v79;
      if (v79 == &v194) {
        goto LABEL_118;
      }
    }
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()((uint64_t *)&v202, *(void *)(v46 + 32), *(void *)(v46 + 56), &v199);
    uint64_t v47 = (std::__shared_weak_count **)v199;
    if (v199 == (void *)v45[6])
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"False child and parent have same ID (TreeID=", 44);
      uint64_t v67 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)", NodeID=", 9);
      uint64_t v68 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)")", 1);
      std::stringbuf::str();
      CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
      goto LABEL_104;
    }
    int v48 = (std::__shared_weak_count *)*((void *)v199 + 14);
    if (v48
      && (uint64_t v49 = std::__shared_weak_count::lock(v48)) != 0
      && (uint64_t v50 = v47[13], std::__shared_weak_count::__release_shared[abi:ne180100](v49), v50))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"In TreeID=", 10);
      uint64_t v51 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", false child of NodeID=", 24);
      uint64_t v52 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" is already the child of node NodeID=", 37);
      uint64_t v53 = std::__shared_weak_count::lock(v47[14]);
      std::ostream::operator<<();
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      std::stringbuf::str();
      CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
LABEL_104:
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v190.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = v189;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v189 - 24)) = v188;
      __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
      if (v216 < 0) {
        operator delete(v215);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22A614E30](v217);
      uint64_t v75 = (std::__shared_weak_count *)v200;
      if (!v200) {
        goto LABEL_110;
      }
    }
    else
    {
      uint64_t v54 = v45[6];
      int v55 = (std::__shared_weak_count *)v200;
      if (v200) {
        atomic_fetch_add_explicit(v200 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = *(std::__shared_weak_count **)(v54 + 144);
      *(void *)(v54 + 136) = v47;
      *(void *)(v54 + 144) = v55;
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      uint64_t v58 = (std::__shared_weak_count *)v45[6];
      uint64_t v57 = (std::__shared_weak_count *)v45[7];
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v59 = v47[14];
      v47[13] = v58;
      v47[14] = v57;
      if (v59) {
        std::__shared_weak_count::__release_weak(v59);
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()((uint64_t *)&v202, *(void *)(v45[6] + 32), *(void *)(v45[6] + 48), &v199);
      uint64_t v60 = v199;
      if (v199 == (void *)v45[6])
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"True child and parent have same ID (TreeID=", 43);
        uint64_t v76 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)", NodeID=", 9);
        int v77 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)")", 1);
        std::stringbuf::str();
        CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
        goto LABEL_104;
      }
      uint64_t v61 = (std::__shared_weak_count *)*((void *)v199 + 14);
      if (v61)
      {
        int v62 = std::__shared_weak_count::lock(v61);
        if (v62)
        {
          uint64_t v63 = *((void *)v60 + 13);
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          if (v63)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"In TreeID=", 10);
            __int16 v64 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", true child of NodeID=", 23);
            int v65 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" is already the child of node NodeID=", 37);
            int v66 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)v60 + 14));
            std::ostream::operator<<();
            std::__shared_weak_count::__release_shared[abi:ne180100](v66);
            std::stringbuf::str();
            CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
            goto LABEL_104;
          }
        }
      }
      uint64_t v69 = v45[6];
      int v70 = v200;
      if (v200) {
        atomic_fetch_add_explicit(v200 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v71 = *(std::__shared_weak_count **)(v69 + 128);
      *(void *)(v69 + 12CoreML::Specification::DictVectorizer::New(this, 0) = v60;
      *(void *)(v69 + 128) = v70;
      if (v71) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v71);
      }
      uint64_t v73 = v45[6];
      uint64_t v72 = v45[7];
      if (v72) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 16), 1uLL, memory_order_relaxed);
      }
      int v74 = (std::__shared_weak_count *)*((void *)v60 + 14);
      *((void *)v60 + 13) = v73;
      *((void *)v60 + 14) = v72;
      if (v74) {
        std::__shared_weak_count::__release_weak(v74);
      }
      if (!v70) {
        goto LABEL_110;
      }
      uint64_t v75 = (std::__shared_weak_count *)v70;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
    goto LABEL_110;
  }
LABEL_118:
  std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::reserve((uint64_t *)&v205, v195);
  int v81 = (long long *)v193;
  if (v193 != &v194)
  {
    do
    {
      std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::push_back[abi:ne180100]((uint64_t *)&v205, v81 + 3);
      uint64_t v82 = (long long *)*((void *)v81 + 1);
      if (v82)
      {
        do
        {
          int v83 = v82;
          uint64_t v82 = *(long long **)v82;
        }
        while (v82);
      }
      else
      {
        do
        {
          int v83 = (long long *)*((void *)v81 + 2);
          BOOL v80 = *(void *)v83 == (void)v81;
          int v81 = v83;
        }
        while (!v80);
      }
      int v81 = v83;
    }
    while (v83 != (long long *)&v194);
  }
  std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,turi::lazy_id_translation_functor>>>::destroy((uint64_t)&v193, v194);
  int v202 = 0;
  uint64_t v203 = 0;
  uint64_t v204 = 0;
  memset(&v190, 0, sizeof(v190));
  int v84 = v205;
  int v85 = v206;
  if (v205 != v206)
  {
    do
    {
      uint64_t v86 = *(void *)v84;
      int v87 = *(std::__shared_weak_count **)(*(void *)v84 + 112);
      if (!v87
        || (unint64_t v88 = std::__shared_weak_count::lock(v87)) == 0
        || (uint64_t v89 = *(void *)(v86 + 104), std::__shared_weak_count::__release_shared[abi:ne180100](v88), !v89))
      {
        uint64_t v91 = *(void *)(*(void *)v84 + 32);
        uint64_t v90 = *(void *)(*(void *)v84 + 40);
        std::string::size_type size = v190.__r_.__value_.__l.__size_;
        if (v190.__r_.__value_.__l.__size_ >= v190.__r_.__value_.__r.__words[2])
        {
          uint64_t v94 = (void *)v190.__r_.__value_.__r.__words[0];
          uint64_t v95 = (uint64_t)(v190.__r_.__value_.__l.__size_ - v190.__r_.__value_.__r.__words[0]) >> 4;
          unint64_t v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          int64_t v97 = v190.__r_.__value_.__r.__words[2] - v190.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v190.__r_.__value_.__r.__words[2] - v190.__r_.__value_.__r.__words[0]) >> 3 > v96) {
            unint64_t v96 = v97 >> 3;
          }
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v98 = v96;
          }
          if (v98)
          {
            uint64_t v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v190.__r_.__value_.__r.__words[2], v98);
            std::string::size_type size = v190.__r_.__value_.__l.__size_;
            uint64_t v94 = (void *)v190.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v99 = 0;
          }
          uint64_t v100 = &v99[16 * v95];
          *(void *)uint64_t v100 = v91;
          *((void *)v100 + 1) = v90;
          std::string::size_type v101 = (std::string::size_type)v100;
          if ((void *)size != v94)
          {
            do
            {
              *(_OWORD *)(v101 - 16) = *(_OWORD *)(size - 16);
              v101 -= 16;
              size -= 16;
            }
            while ((void *)size != v94);
            uint64_t v94 = (void *)v190.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v93 = (std::string::size_type)(v100 + 16);
          v190.__r_.__value_.__r.__words[0] = v101;
          v190.__r_.__value_.__l.__size_ = (std::string::size_type)(v100 + 16);
          v190.__r_.__value_.__r.__words[2] = (std::string::size_type)&v99[16 * v98];
          if (v94) {
            operator delete(v94);
          }
        }
        else
        {
          *(void *)v190.__r_.__value_.__l.__size_ = v91;
          *(void *)(size + 8) = v90;
          std::string::size_type v93 = size + 16;
        }
        v190.__r_.__value_.__l.__size_ = v93;
        std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::push_back[abi:ne180100]((uint64_t *)&v202, v84);
      }
      ++v84;
    }
    while (v84 != v85);
    if (v203 != v202)
    {
      unint64_t v102 = 126 - 2 * __clz((uint64_t)(v190.__r_.__value_.__l.__size_ - v190.__r_.__value_.__r.__words[0]) >> 4);
      uint64_t v103 = v190.__r_.__value_.__l.__size_ == v190.__r_.__value_.__r.__words[0] ? 0 : v102;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>((uint64_t)v190.__r_.__value_.__l.__data_, (unint64_t *)v190.__r_.__value_.__l.__size_, (uint64_t)&v193, v103, 1);
      std::string::size_type v105 = v190.__r_.__value_.__l.__size_;
      std::string::size_type v104 = v190.__r_.__value_.__r.__words[0];
      if (v190.__r_.__value_.__l.__size_ - v190.__r_.__value_.__r.__words[0] != 16)
      {
        unint64_t v106 = 0;
        unint64_t v107 = (uint64_t)(v190.__r_.__value_.__l.__size_ - v190.__r_.__value_.__r.__words[0]) >> 4;
        std::string::size_type v108 = *MEMORY[0x263F8C2C8];
        std::string::size_type v109 = *(void *)(MEMORY[0x263F8C2C8] + 24);
        do
        {
          uint64_t v110 = *(void *)(v104 + 16 * v106);
          unint64_t v111 = v106 + 1;
          if (*(void *)(v104 + 16 * (v106 + 1)) == v110)
          {
            if (v111 < v107)
            {
              uint64_t v112 = (uint64_t *)(v104 + 16 * v106 + 16);
              while (1)
              {
                uint64_t v113 = *v112;
                v112 += 2;
                if (v113 != v110) {
                  break;
                }
                if (v107 == ++v111)
                {
                  unint64_t v111 = v107;
                  break;
                }
              }
            }
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Tree TreeID=", 12);
            uint64_t v114 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)" has multiple root nodes: ", 26);
            unint64_t v115 = v111 - v106;
            if (v111 > v106)
            {
              uint64_t v116 = (16 * v106) | 8;
              do
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"NodeID=", 7);
                std::ostream::operator<<();
                if (v115 != 1) {
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)", ", 2);
                }
                v116 += 16;
                --v115;
              }
              while (v115);
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)".", 1);
            std::stringbuf::str();
            CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v193, 0);
            if (SHIBYTE(v195) < 0) {
              operator delete(v193);
            }
            __p.__r_.__value_.__r.__words[0] = v108;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v108 - 24)) = v109;
            __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
            if (v216 < 0) {
              operator delete(v215);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x22A614E30](v217);
            std::string::size_type v105 = v190.__r_.__value_.__l.__size_;
            std::string::size_type v104 = v190.__r_.__value_.__r.__words[0];
          }
          unint64_t v107 = (uint64_t)(v105 - v104) >> 4;
          unint64_t v106 = v111;
        }
        while (v111 < v107 - 1);
      }
    }
  }
  uint64_t v194 = 0;
  unint64_t v195 = 0;
  v193 = &v194;
  uint64_t v199 = 0;
  uint64_t v200 = 0;
  uint64_t v201 = 0;
  int v117 = v202;
  uint64_t v118 = v203;
  uint64_t v119 = v184;
  if (v202 == v203) {
    goto LABEL_202;
  }
  while (2)
  {
    std::string::size_type v120 = (std::string::size_type)*v117;
    uint64_t v121 = (std::__shared_weak_count *)v117[1];
    if (v121)
    {
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v121;
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      __p.__r_.__value_.__l.__size_ = 0;
    }
    __p.__r_.__value_.__r.__words[0] = v120;
    __p.__r_.__value_.__r.__words[2] = 0;
    std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*>((uint64_t)&v199, (uint64_t *)&__p, (uint64_t *)&v214, 1uLL);
    uint64_t v122 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_) {
      goto LABEL_175;
    }
    while (2)
    {
      uint64_t v126 = v200;
      if (v199 != v200)
      {
        uint64_t v128 = *(v200 - 3);
        uint64_t v127 = (std::__shared_weak_count *)*(v200 - 2);
        if (v127) {
          atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!v128)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "Internal error: null child node; likely specification error.");
          CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&__p, 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (*(unsigned char *)v128)
        {
LABEL_192:
          uint64_t v129 = v200;
          uint64_t v130 = (std::__shared_weak_count *)*(v200 - 2);
          if (v130) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v130);
          }
          uint64_t v200 = v129 - 3;
        }
        else
        {
          uint64_t v123 = *(v126 - 1);
          if (v123 == 1)
          {
            *(v126 - 1) = 2;
            __p.__r_.__value_.__r.__words[0] = *(void *)(v128 + 120);
            std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v193, (unint64_t *)&__p, (uint64_t *)&__p);
            std::string::size_type v125 = *(void *)(v128 + 128);
            __p.__r_.__value_.__r.__words[0] = *(void *)(v128 + 120);
            __p.__r_.__value_.__l.__size_ = v125;
            if (v125) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v125 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            if (v123) {
              goto LABEL_192;
            }
            *(v126 - 1) = 1;
            __p.__r_.__value_.__r.__words[0] = *(void *)(v128 + 136);
            std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v193, (unint64_t *)&__p, (uint64_t *)&__p);
            std::string::size_type v124 = *(void *)(v128 + 144);
            __p.__r_.__value_.__r.__words[0] = *(void *)(v128 + 136);
            __p.__r_.__value_.__l.__size_ = v124;
            if (v124) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
            }
          }
          __p.__r_.__value_.__r.__words[2] = 0;
          std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v199, (uint64_t)&__p);
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        if (v127)
        {
          uint64_t v122 = v127;
LABEL_175:
          std::__shared_weak_count::__release_shared[abi:ne180100](v122);
          continue;
        }
        continue;
      }
      break;
    }
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    v117 += 2;
    if (v117 != v118) {
      continue;
    }
    break;
  }
  uint64_t v131 = (std::string::size_type *)v202;
  int v132 = (std::string::size_type *)v203;
  uint64_t v119 = v184;
  if (v202 != v203)
  {
    do
    {
      __p.__r_.__value_.__r.__words[0] = *v131;
      std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v193, (unint64_t *)&__p, (uint64_t *)&__p);
      v131 += 2;
    }
    while (v131 != v132);
  }
LABEL_202:
  uint64_t v133 = (std::string::size_type *)MEMORY[0x263F8C2C8];
  if (v195 != v206 - v205)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Node detected that are not connected to any single root node. Note: ", 68);
    unsigned __int8 v134 = v205;
    for (uint64_t i = v206; v134 != i; ++v134)
    {
      uint64_t v136 = v194;
      if (v194)
      {
        unint64_t v137 = *(void *)v134;
        uint64_t v138 = &v194;
        do
        {
          int v139 = v136;
          int v140 = v138;
          unint64_t v141 = v136[4];
          uint64_t v142 = v136 + 1;
          if (v141 >= v137)
          {
            uint64_t v142 = v139;
            uint64_t v138 = (void **)v139;
          }
          uint64_t v136 = (void *)*v142;
        }
        while (v136);
        if (v138 != &v194)
        {
          if (v141 < v137) {
            int v139 = v140;
          }
          if (v137 >= v139[4]) {
            continue;
          }
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"(TreeID=", 8);
      int v143 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)", NodeID=", 9);
      int v144 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144, (uint64_t)") ", 2);
    }
    std::stringbuf::str();
    uint64_t v133 = (std::string::size_type *)MEMORY[0x263F8C2C8];
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v197, 0);
    if (v198 < 0) {
      operator delete(v197);
    }
    __p.__r_.__value_.__r.__words[0] = *v133;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                              + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = v133[3];
    __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
    if (v216 < 0) {
      operator delete(v215);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22A614E30](v217);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v193, v194);
  if (v190.__r_.__value_.__r.__words[0])
  {
    v190.__r_.__value_.__l.__size_ = v190.__r_.__value_.__r.__words[0];
    operator delete(v190.__r_.__value_.__l.__data_);
  }
  int v145 = (char *)operator new(0xA0uLL);
  *((void *)v145 + 1) = 0;
  *((void *)v145 + 2) = 0;
  *(void *)int v145 = &unk_26D777880;
  *(_OWORD *)(v145 + 4CoreML::Specification::DictVectorizer::New(this, 0) = 0u;
  *(_OWORD *)(v145 + 56) = 0u;
  *(_OWORD *)(v145 + 88) = 0u;
  *(_OWORD *)(v145 + 104) = 0u;
  *(_OWORD *)(v145 + 12CoreML::Specification::DictVectorizer::New(this, 0) = 0u;
  *(_OWORD *)(v145 + 136) = 0u;
  *((void *)v145 + 19) = 0;
  *(_OWORD *)(v145 + 24) = 0u;
  *uint64_t v182 = v145 + 24;
  v182[1] = v145;
  int v146 = (uint64_t *)v202;
  long long v147 = (uint64_t *)v203;
  unint64_t v148 = ((char *)v203 - (char *)v202) >> 4;
  *(_OWORD *)(v145 + 72) = 0u;
  std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>((uint64_t)(v145 + 72), v146, v147, v148);
  uint64_t v149 = ((char *)v203 - (char *)v202) >> 4;
  *((void *)v145 + 3) = v206 - v205;
  *((void *)v145 + 4) = v149;
  *((void *)v145 + 5) = v185;
  std::vector<double>::resize((uint64_t)(v145 + 48), v185);
  uint64_t v150 = *((int *)v183 + 10);
  if (v150)
  {
    if (v185 == v150)
    {
      if ((int)v150 >= 1)
      {
        int v151 = (void *)*((void *)v145 + 6);
        uint64_t v152 = *((unsigned int *)v183 + 10);
        int v153 = (uint64_t *)(v183[6] + 8);
        do
        {
          uint64_t v154 = *v153++;
          *v151++ = v154;
          --v152;
        }
        while (v152);
      }
    }
    else
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Dimension of default value array (", 34);
      int v155 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v155, (uint64_t)") does not match specified output dimension (", 45);
      long long v156 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v156, (uint64_t)").", 2);
      std::stringbuf::str();
      CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v190, 0);
      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v190.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = *v133;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = v133[3];
      __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
      if (v216 < 0) {
        operator delete(v215);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22A614E30](v217);
    }
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    std::vector<double>::assign((char **)v145 + 6, v185, &__p);
  }
  int v157 = *((_DWORD *)v119 + 11);
  if (v157 == 402)
  {
    uint64_t v158 = *((void *)v119 + 4);
    CoreML::Specification::Int64Vector::Int64Vector((CoreML::Specification::Int64Vector *)&v193);
    int v159 = (std::string *)CoreML::Specification::StringVector::StringVector((CoreML::Specification::StringVector *)&v190);
    int v160 = *(_DWORD *)(v158 + 44);
    if (v160 == 100)
    {
      int v159 = CoreML::Specification::StringVector::CopyFrom(&v190, *(std::string **)(v158 + 32));
    }
    else if (v160 == 101)
    {
      int v159 = (std::string *)CoreML::Specification::Int64Vector::CopyFrom((unint64_t *)&v193, *(const CoreML::Specification::GLMRegressor_DoubleArray **)(v158 + 32));
    }
    if (*((_DWORD *)v119 + 11) == 402) {
      int v161 = (uint64_t *)*((void *)v119 + 4);
    }
    else {
      int v161 = CoreML::Specification::TreeEnsembleClassifier::default_instance((CoreML::Specification::TreeEnsembleClassifier *)v159);
    }
    *((_DWORD *)v145 + 38) = *((_DWORD *)v161 + 6);
    int v162 = v195;
    int v163 = v191;
    if ((int)v195 <= v191) {
      int v164 = v191;
    }
    else {
      int v164 = v195;
    }
    if (!v164)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v145 + 13);
      if (v185 == 1)
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = xmmword_2246C5F80;
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v145 + 128, (char *)&__p, (uint64_t)&__p.__r_.__value_.__r.__words[2], 2uLL);
        int v167 = 1;
      }
      else
      {
        std::vector<unsigned long>::resize((uint64_t)(v145 + 128), v185);
        if (v185)
        {
          uint64_t v172 = 0;
          uint64_t v173 = *((void *)v145 + 16);
          do
          {
            *(void *)(v173 + 8 * v172) = v172;
            ++v172;
          }
          while (v185 != v172);
        }
        int v167 = 2;
      }
      *((_DWORD *)v145 + 24) = v167;
      goto LABEL_276;
    }
    std::vector<std::string>::size_type v165 = v164;
    if (v185 == 1 && v164 == 2)
    {
      int v166 = 1;
    }
    else
    {
      if (v185 < 2 || v185 != v164)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Specified output dimension (", 28);
        int v174 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v174, (uint64_t)") does not match the given number of classes (", 46);
        int v175 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)").", 2);
        std::stringbuf::str();
        CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v208, (uint64_t)&v199, 0);
        if (SHIBYTE(v201) < 0) {
          operator delete(v199);
        }
        __p.__r_.__value_.__r.__words[0] = *v133;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                  + *(void *)(__p.__r_.__value_.__r.__words[0] - 24)) = v133[3];
        __p.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
        if (v216 < 0) {
          operator delete(v215);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x22A614E30](v217);
        goto LABEL_276;
      }
      int v166 = 2;
    }
    *((_DWORD *)v145 + 24) = v166;
    if (v162 <= v163) {
      std::vector<std::string>::resize((std::vector<std::string> *)(v145 + 104), v165);
    }
    else {
      std::vector<unsigned long>::resize((uint64_t)(v145 + 128), v165);
    }
    uint64_t v168 = 0;
    uint64_t v169 = 0;
    uint64_t v170 = 0;
    if (v165 <= 1) {
      std::vector<std::string>::size_type v165 = 1;
    }
    do
    {
      uint64_t v171 = v168 >> 32;
      if (v162 <= v163) {
        std::string::operator=((std::string *)(*((void *)v145 + 13) + v169), *(const std::string **)(v192 + 8 * v171 + 8));
      }
      else {
        *(void *)(*((void *)v145 + 16) + 8 * v17CoreML::Specification::DictVectorizer::New(this, 0) = *(void *)(v196 + 8 * v171 + 8);
      }
      ++v170;
      v169 += 24;
      v168 += 0x100000000;
    }
    while (v165 != v170);
LABEL_276:
    CoreML::Specification::StringVector::~StringVector((CoreML::Specification::StringVector *)&v190);
    CoreML::Specification::Int64Vector::~Int64Vector((CoreML::Specification::Int64Vector *)&v193);
    uint64_t v133 = (std::string::size_type *)MEMORY[0x263F8C2C8];
    goto LABEL_277;
  }
  if (v157 == 302)
  {
    *((_DWORD *)v145 + 24) = 0;
    *((_DWORD *)v145 + 38) = *(_DWORD *)(*((void *)v119 + 4) + 24);
  }
LABEL_277:
  if (v212)
  {
    uint64_t v178 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    uint64_t v179 = std::string::insert(&v190, 0, "Error(s) in tree structure: \n");
    long long v180 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v179->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v180;
    v179->__r_.__value_.__l.__size_ = 0;
    v179->__r_.__value_.__r.__words[2] = 0;
    v179->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v178, &__p);
    __cxa_throw(v178, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v205;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v209[0] = *v133;
  *(void *)((char *)v209 + *(void *)(v209[0] - 24)) = v133[3];
  v209[1] = MEMORY[0x263F8C318] + 16;
  if (v210 < 0) {
    operator delete((void *)v209[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v211);
}

void sub_2242D0A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x230]);
  CoreML::Specification::StringVector::~StringVector((CoreML::Specification::StringVector *)&a20);
  CoreML::Specification::Int64Vector::~Int64Vector((CoreML::Specification::Int64Vector *)&a26);
  std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  STACK[0x230] = (unint64_t)&a40;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  a20 = &a43;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::ostringstream::~ostringstream((uint64_t)&a48);
  _Unwind_Resume(a1);
}

void *CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(void **a1, uint64_t a2, int a3)
{
  ++**a1;
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[1], (uint64_t)"\n  ", 3);
  if (a3) {
    unint64_t v7 = "FATAL: ";
  }
  else {
    unint64_t v7 = "";
  }
  if (a3) {
    uint64_t v8 = 7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = *(void *)a2;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 8);
  }
  std::string::size_type v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)";", 1);
  if (**a1 >= 0x32uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1[1], (uint64_t)"\n  FATAL: maximum number of errors reached; aborting processing.",
      64);
LABEL_17:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    uint16x8_t v16 = std::string::insert(&v18, 0, "Errors encountered during processing tree model:\n");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v19);
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  if (a3) {
    goto LABEL_17;
  }
  return result;
}

void sub_2242D0F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_2::operator()@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  v16[0] = a2;
  v16[1] = a3;
  uint64_t result = std::__tree<std::pair<unsigned long,unsigned long>>::find<std::pair<unsigned long,unsigned long>>(*a1, v16);
  if ((void *)(*a1 + 8) == result)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Tree Node with TreeID=", 22);
    uint64_t v8 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" and NodeID=", 12);
    uint64_t v9 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" referenced but not declared in specification.", 46);
    int v10 = (void **)a1[1];
    std::stringbuf::str();
    CoreML::TreeEnsembles::constructAndValidateTreeEnsembleFromSpec(CoreML::Specification::Model const&)::$_0::operator()(v10, (uint64_t)&__p, 0);
    if (v12 < 0) {
      operator delete(__p);
    }
    *a4 = 0;
    a4[1] = 0;
    v13[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v13[1] = MEMORY[0x263F8C318] + 16;
    if (v14 < 0) {
      operator delete((void *)v13[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x22A614E30](&v15);
  }
  else
  {
    uint64_t v7 = result[7];
    *a4 = result[6];
    a4[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void sub_2242D11A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v7);
  }
  return result;
}

void sub_2242D1258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2242D1374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v12);
    char v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *(_OWORD *)char v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    unint64_t v16[2] = v14 + 24;
    std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer(v16);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_2242D149C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<double>::assign(char **a1, unint64_t a2, void *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    unint64_t v13 = a1[1];
    unint64_t v14 = (v13 - result) >> 3;
    if (v14 >= a2) {
      uint64_t v15 = a2;
    }
    else {
      uint64_t v15 = (v13 - result) >> 3;
    }
    if (v15)
    {
      uint64_t v16 = result;
      do
      {
        *(void *)uint64_t v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      long long v17 = &v13[8 * (a2 - v14)];
      uint64_t v18 = 8 * a2 - 8 * v14;
      do
      {
        *(void *)unint64_t v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v8 = v6 >> 2;
    if (v6 >> 2 <= a2) {
      uint64_t v8 = a2;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = std::vector<unsigned long>::__vallocate[abi:ne180100](a1, v9);
    unint64_t v10 = a1[1];
    unint64_t v11 = &v10[8 * a2];
    uint64_t v12 = 8 * a2;
    do
    {
      *(void *)unint64_t v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *,false>(unint64_t *a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,double> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(void *)(a2 - 16);
      unint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1)
      {
        double v8 = *(double *)(a1 + 8);
        double v9 = *(double *)(a2 - 8);
LABEL_30:
        *(void *)a1 = v6;
        *(void *)(a2 - 16) = v7;
        *(double *)(a1 + 8) = v9;
        *(double *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        double v9 = *(double *)(a2 - 8);
        double v8 = *(double *)(a1 + 8);
        if (v9 < v8) {
          goto LABEL_30;
        }
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unint64_t *)(a2 - 16));
      return 1;
    default:
      uint64_t v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long long,double> *>((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
LABEL_6:
  unint64_t v14 = *(void *)v11;
  unint64_t v15 = *(void *)v10;
  if (*(void *)v11 >= *(void *)v10)
  {
    if (v15 < v14) {
      goto LABEL_21;
    }
    double v16 = *(double *)(v11 + 8);
    double v17 = *(double *)(v10 + 8);
    if (v16 >= v17) {
      goto LABEL_21;
    }
  }
  else
  {
    double v16 = *(double *)(v11 + 8);
    double v17 = *(double *)(v10 + 8);
  }
  *(void *)uint64_t v11 = v15;
  *(double *)(v11 + 8) = v17;
  uint64_t v18 = a1;
  if (v10 == a1) {
    goto LABEL_20;
  }
  uint64_t v19 = v12;
  while (1)
  {
    uint64_t v20 = a1 + v19;
    unint64_t v21 = *(void *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        uint64_t v18 = v10;
        goto LABEL_20;
      }
      double v22 = *(double *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        uint64_t v18 = a1 + v19 + 32;
LABEL_20:
        *(void *)uint64_t v18 = v14;
        *(double *)(v18 + 8) = v16;
        if (++v13 == 8) {
          return v11 + 16 == a2;
        }
LABEL_21:
        uint64_t v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2) {
          return 1;
        }
        goto LABEL_6;
      }
    }
    else
    {
      double v22 = *(double *)(v20 + 24);
    }
    v10 -= 16;
    *(void *)(v20 + 32) = v21;
    *(double *)(a1 + v19 + 4CoreML::Specification::DictVectorizer::New(this, 0) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      uint64_t v18 = a1;
      goto LABEL_20;
    }
  }
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D777830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D777830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeComputationNode>::__on_zero_shared(uint64_t a1)
{
  std::allocator<CoreML::TreeEnsembles::_TreeComputationNode>::destroy[abi:ne180100]((uint64_t)&v1, (void *)(a1 + 24));
}

void std::allocator<CoreML::TreeEnsembles::_TreeComputationNode>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  unint64_t v3 = (std::__shared_weak_count *)a2[18];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[16];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)a2[14];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = (void *)a2[10];
  if (v6)
  {
    a2[11] = v6;
    operator delete(v6);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>>::__emplace_hint_unique_key_args<std::pair<unsigned long,unsigned long>,std::pair<std::pair<unsigned long,unsigned long> const,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t v6 = (void **)std::__tree<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::__map_value_compare<std::pair<unsigned long,unsigned long>,std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>,std::less<std::pair<unsigned long,unsigned long>>,true>,std::allocator<std::__value_type<std::pair<unsigned long,unsigned long>,std::vector<turi::sframe>>>>::__find_equal<std::pair<unsigned long,unsigned long>>(a1, a2, &v12, &v11, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    double v8 = (uint64_t **)v6;
    unint64_t v7 = (uint64_t *)operator new(0x40uLL);
    long long v9 = *(_OWORD *)(a4 + 16);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a4;
    *((_OWORD *)v7 + 3) = v9;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, v7);
  }
  return v7;
}

uint64_t std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::reverse_iterator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>,std::reverse_iterator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>,std::reverse_iterator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::reverse_iterator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>,std::reverse_iterator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>,std::reverse_iterator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::reverse_iterator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::reverse_iterator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (unint64_t *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v23 = *(a2 - 2);
          unint64_t v24 = *v11;
          if (v23 < *v11 || v24 >= v23 && *(a2 - 1) < v11[1])
          {
            *uint64_t v11 = v23;
            *(a2 - 2) = v24;
            unint64_t v25 = v11[1];
            v11[1] = *(a2 - 1);
            *(a2 - 1) = v25;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,std::pair<unsigned long,unsigned long> *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v11, &v11[2 * (v15 >> 1)], a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v11 + 2, v17 - 2, a2 - 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v11 + 4, &v11[2 * v16 + 2], a2 - 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v17 - 2, v17, &v11[2 * v16 + 2]);
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)double v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v19 = *(v11 - 2);
    if (v19 >= *v11 && (*v11 < v19 || *(v11 - 1) >= v11[1]))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,unsigned long> *,std::__less<void,void> &>(v11, a2);
      uint64_t v11 = (unint64_t *)result;
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,unsigned long> *,std::__less<void,void> &>(v11, a2);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v11, v20);
    uint64_t v11 = v20 + 2;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v20 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v22)
    {
LABEL_19:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,false>(v10, v20, a3, -v13, a5 & 1);
      uint64_t v11 = v20 + 2;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(v11, a2);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,std::vector<turi::groupby_aggregate_impl::groupby_element> *> *>(v11, a2);
  }
}

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *result, unint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  unint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  uint64_t v4 = result;
  do
  {
    char v5 = v4;
    uint64_t v4 = v2;
    unint64_t v6 = v5[2];
    unint64_t v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_19;
      }
      unint64_t v8 = v5[3];
      if (v8 >= v5[1]) {
        goto LABEL_19;
      }
    }
    else
    {
      unint64_t v8 = v5[3];
    }
    std::string v5[2] = v7;
    v4[1] = v5[1];
    long long v9 = result;
    if (v5 == result) {
      goto LABEL_18;
    }
    uint64_t v10 = v3;
    while (1)
    {
      unint64_t v11 = *(unint64_t *)((char *)result + v10 - 16);
      if (v6 >= v11) {
        break;
      }
      unint64_t v12 = *(unint64_t *)((char *)result + v10 - 8);
LABEL_12:
      v5 -= 2;
      uint64_t v13 = (unint64_t *)((char *)result + v10);
      *uint64_t v13 = v11;
      v13[1] = v12;
      v10 -= 16;
      if (!v10)
      {
        long long v9 = result;
        goto LABEL_18;
      }
    }
    if (v11 >= v6)
    {
      long long v9 = (unint64_t *)((char *)result + v10);
      unint64_t v12 = *(unint64_t *)((char *)result + v10 - 8);
      if (v8 >= v12) {
        goto LABEL_18;
      }
      goto LABEL_12;
    }
    long long v9 = v5;
LABEL_18:
    *long long v9 = v6;
    v9[1] = v8;
LABEL_19:
    unint64_t v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    unint64_t v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1])) {
      return 0;
    }
    *a2 = v9;
    *a3 = v3;
    unint64_t v11 = (uint64_t *)(a2 + 1);
    unint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    unint64_t v12 = *a2;
    unint64_t v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1])) {
      return 1;
    }
    *a1 = v12;
    unint64_t v6 = (uint64_t *)(a1 + 1);
    *a2 = v13;
    uint64_t v8 = 2;
  }
  else
  {
    unint64_t v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      unint64_t v6 = (uint64_t *)(a1 + 1);
      *a3 = v4;
      unint64_t v7 = (uint64_t *)(a3 + 1);
      uint64_t v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      unint64_t v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      unint64_t v15 = *a3;
      unint64_t v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14)) {
        return 1;
      }
      *a2 = v15;
      *a3 = v16;
      unint64_t v7 = (uint64_t *)(a3 + 1);
      uint64_t v8 = 2;
      unint64_t v6 = (uint64_t *)(a2 + 1);
    }
    unint64_t v11 = v7;
  }
  uint64_t v17 = *v6;
  uint64_t *v6 = *v11;
  *unint64_t v11 = v17;
  return v8;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,unsigned long> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (uint64_t i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    uint64_t i = a1;
    do
    {
      unint64_t v7 = i[2];
      i += 2;
      unint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      unint64_t v8 = *(a2 - 2);
      unint64_t v4 = v8;
    }
  }
  if (i < a2)
  {
    unint64_t v9 = *i;
    unint64_t v10 = *a2;
    do
    {
      *uint64_t i = v10;
      *a2 = v9;
      unint64_t v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        unint64_t v12 = i[2];
        i += 2;
        unint64_t v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          unint64_t v13 = *(a2 - 2);
          a2 -= 2;
          unint64_t v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned long,unsigned long> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  while (1)
  {
    unint64_t v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unint64_t v8 = *(a2 - 2);
      a2 -= 2;
      unint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        unint64_t v10 = *(a2 - 2);
        a2 -= 2;
        unint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unint64_t v13 = (unint64_t *)v6;
  }
  else
  {
    unint64_t v12 = *a2;
    unint64_t v13 = (unint64_t *)v6;
    unint64_t v14 = a2;
    do
    {
      *unint64_t v13 = v12;
      *unint64_t v14 = v5;
      unint64_t v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          unint64_t v16 = v13[2];
          v13 += 2;
          unint64_t v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && v13[1] < v4);
      do
      {
        unint64_t v17 = *(v14 - 2);
        v14 -= 2;
        unint64_t v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unint64_t v13 = *v10;
    unint64_t v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      unint64_t v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v15 = v10[1];
    }
    unint64_t *v10 = v14;
    v10[1] = v9[1];
    unint64_t v16 = a1;
    if (v9 == a1) {
      goto LABEL_22;
    }
    uint64_t v17 = v11;
    while (1)
    {
      long long v18 = (char *)a1 + v17;
      unint64_t v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        unint64_t v20 = *((void *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        unint64_t v16 = v9;
        goto LABEL_22;
      }
      unint64_t v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *((void *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 4CoreML::Specification::DictVectorizer::New(this, 0) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        unint64_t v16 = a1;
        goto LABEL_22;
      }
    }
    unint64_t v16 = (unint64_t *)((char *)a1 + v17 + 32);
LABEL_22:
    *unint64_t v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a2, a3);
  unint64_t v9 = *a4;
  unint64_t v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = *a3;
    unint64_t v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unint64_t v15 = *a2;
      unint64_t v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unint64_t v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unint64_t v14 = *a4;
    unint64_t v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unint64_t v17 = *a3;
      unint64_t v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unint64_t v20 = *a2;
        unint64_t v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unint64_t v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *,std::pair<unsigned long,unsigned long> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        unint64_t v15 = *v14;
        unint64_t v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *unint64_t v14 = v16;
          *a1 = v15;
          unint64_t v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v18 = (unint64_t)v8 >> 4;
      unint64_t v19 = a2 - 2;
      do
      {
        unint64_t v21 = *a1;
        unint64_t v20 = a1[1];
        unint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(a1, a4, v18);
        if (v19 == v22)
        {
          *unint64_t v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *unint64_t v22 = *v19;
          v22[1] = v19[1];
          *unint64_t v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 4);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(void *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *v8;
      unint64_t v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          unint64_t v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }
        else
        {
          unint64_t v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unint64_t v14 = (unint64_t *)(result + 16 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unint64_t v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(void *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            unint64_t v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13) {
              break;
            }
            unint64_t *v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_23;
            }
          }
        }
        unint64_t v14 = v8;
LABEL_23:
        *unint64_t v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unint64_t v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    unint64_t *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned long,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    unint64_t v7 = *v6;
    unint64_t v8 = *(void *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      unint64_t v9 = *(void *)(a2 - 8);
      if (*(void *)(result + 16 * v5 + 8) >= v9) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *(void *)(a2 - 8);
    }
    *(void *)(a2 - 16) = v7;
    *(void *)(a2 - 8) = *(void *)(result + 16 * v5 + 8);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v11 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v10 = (unint64_t *)(result + 16 * v5);
        unint64_t v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12) {
            break;
          }
          unint64_t v13 = *(void *)(result + 16 * v5 + 8);
          if (v13 >= v9) {
            break;
          }
        }
        else
        {
          unint64_t v13 = v10[1];
        }
        unint64_t *v6 = v12;
        v6[1] = v13;
        uint64_t v6 = (unint64_t *)(result + 16 * v5);
        if (v11 <= 1) {
          goto LABEL_13;
        }
      }
    }
    unint64_t v10 = v6;
LABEL_13:
    unint64_t *v10 = v8;
    v10[1] = v9;
  }
  return result;
}

void std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*,0>(a2, v13, v9);
    unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*,0>(a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      unint64_t v17 = *(std::__shared_weak_count **)(v16 - 16);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_2242D3174(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2242D317C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<turi::query_eval::execution_node::input_node>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4[2] = a2[2];
      v4 += 3;
      a2 += 3;
    }
    while (a2 != a3);
    unint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long> const*,std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*,0>(uint64_t *a1, uint64_t *a2, void *a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>::operator=[abi:ne180100](a3, v4);
      v4 += 3;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>::operator=[abi:ne180100](void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v5;
  a1[1] = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  a1[2] = a2[2];
  return a1;
}

uint64_t std::vector<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::reverse_iterator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>,std::reverse_iterator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>,std::reverse_iterator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::reverse_iterator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>,std::reverse_iterator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>,std::reverse_iterator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *(void *)(v8 + 16) = a3[2];
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::reverse_iterator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>>,std::reverse_iterator<std::pair<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>,unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::execution_node::input_node>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D777880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D777880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<CoreML::TreeEnsembles::_TreeEnsemble>::__on_zero_shared(uint64_t a1)
{
  std::allocator<CoreML::TreeEnsembles::_TreeEnsemble>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<CoreML::TreeEnsembles::_TreeEnsemble>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 104);
  if (v3)
  {
    *(void *)(a2 + 112) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)(a2 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a2 + 48);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(void *)(a2 + 32) = v4;
    operator delete(v4);
  }
}

void std::vector<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>::__assign_with_size[abi:ne180100]<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((void *)a1, v12);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v20, a2, v15, v9);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      unint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_2242D36DC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2242D36E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  long long v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>>,std::shared_ptr<CoreML::TreeEnsembles::_TreeComputationNode>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t png_sig_cmp(uint64_t a1, unint64_t a2, size_t a3)
{
  if (a3 <= 8)
  {
    if (!a3) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    a3 = 8;
  }
  if (a2 > 7) {
    return 0xFFFFFFFFLL;
  }
  if (a3 + a2 > 8) {
    a3 = 8 - a2;
  }
  return memcmp((const void *)(a1 + a2), (char *)&unk_2246EE008 + a2, a3);
}

void *png_zalloc(void *result, unsigned int a2, unsigned int a3)
{
  if (result) {
    return png_malloc_warn(result, a3 * (unint64_t)a2);
  }
  return result;
}

uLong png_reset_crc(uint64_t a1)
{
  uLong result = crc32(0, 0, 0);
  *(_DWORD *)(a1 + 58CoreML::Specification::DictVectorizer::New(this, 0) = result;
  return result;
}

uint64_t png_calculate_crc(uint64_t result, Bytef *buf, uint64_t a3)
{
  if ((*(unsigned char *)(result + 531) & 0x20) != 0) {
    BOOL v3 = (~*(_DWORD *)(result + 296) & 0x300) != 0;
  }
  else {
    BOOL v3 = (*(_DWORD *)(result + 296) & 0x800) == 0;
  }
  if (a3 && v3)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uLong result = *(unsigned int *)(result + 580);
    do
    {
      if (v4) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = 0xFFFFFFFFLL;
      }
      uLong result = crc32(result, buf, v7);
      buf += v7;
      v4 -= v7;
    }
    while (v4);
    *(_DWORD *)(v6 + 58CoreML::Specification::DictVectorizer::New(this, 0) = result;
  }
  return result;
}

uint64_t png_user_version_check(uint64_t a1, unsigned char *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    do
    {
      int v6 = a2[v4];
      if (v6 != a1637[v4]) {
        *(_DWORD *)(a1 + 296) |= 0x20000u;
      }
      if (v6 == 46) {
        ++v5;
      }
    }
    while (v5 <= 1 && v4++ != 6 && v6 != 0);
    if ((*(unsigned char *)(a1 + 298) & 2) == 0) {
      return 1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 296) |= 0x20000u;
  }
  unint64_t v10 = png_safecat((uint64_t)v13, 0x80uLL, 0, "Application built with libpng-");
  unint64_t v11 = png_safecat((uint64_t)v13, 0x80uLL, v10, a2);
  unint64_t v12 = png_safecat((uint64_t)v13, 0x80uLL, v11, " but running with ");
  png_safecat((uint64_t)v13, 0x80uLL, v12, "1.6.37");
  png_warning(a1, v13);
  return 0;
}

void *png_create_png_struct(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __src[157] = *MEMORY[0x263EF8340];
  memset(v16, 0, sizeof(v16));
  bzero(__src, 0x4E8uLL);
  HIDWORD(__src[131]) = 1000000;
  __src[132] = 0x3E8000F4240;
  __src[133] = 8000000;
  png_set_mem_fn(__src, a5, a6, a7);
  png_set_error_fn(__src, a2, a3, a4);
  if (setjmp((int *)v16)) {
    return 0;
  }
  __src[25] = v16;
  __src[26] = 0;
  __src[24] = MEMORY[0x263EF8948];
  if (!png_user_version_check((uint64_t)__src, a1)) {
    return 0;
  }
  uLong result = png_malloc_warn(__src, 0x4E8uLL);
  if (result)
  {
    long long v15 = result;
    __src[47] = png_zalloc;
    __src[48] = png_zfree;
    __src[49] = result;
    memset(&__src[24], 0, 24);
    memcpy(result, __src, 0x4E8uLL);
    return v15;
  }
  return result;
}

double png_create_info_struct(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = png_malloc_base(a1, 0x168uLL);
    if (v1)
    {
      v1[44] = 0;
      double result = 0.0;
      *((_OWORD *)v1 + 2CoreML::Specification::DictVectorizer::New(this, 0) = 0u;
      *((_OWORD *)v1 + 21) = 0u;
      *((_OWORD *)v1 + 18) = 0u;
      *((_OWORD *)v1 + 19) = 0u;
      *((_OWORD *)v1 + 16) = 0u;
      *((_OWORD *)v1 + 17) = 0u;
      *((_OWORD *)v1 + 14) = 0u;
      *((_OWORD *)v1 + 15) = 0u;
      *((_OWORD *)v1 + 12) = 0u;
      *((_OWORD *)v1 + 13) = 0u;
      *((_OWORD *)v1 + 1CoreML::Specification::DictVectorizer::New(this, 0) = 0u;
      *((_OWORD *)v1 + 11) = 0u;
      *((_OWORD *)v1 + 8) = 0u;
      *((_OWORD *)v1 + 9) = 0u;
      *((_OWORD *)v1 + 6) = 0u;
      *((_OWORD *)v1 + 7) = 0u;
      *((_OWORD *)v1 + 4) = 0u;
      *((_OWORD *)v1 + 5) = 0u;
      *((_OWORD *)v1 + 2) = 0u;
      *((_OWORD *)v1 + 3) = 0u;
      *(_OWORD *)uint64_t v1 = 0u;
      *((_OWORD *)v1 + 1) = 0u;
    }
  }
  return result;
}

void png_destroy_info_struct(uint64_t a1, void **a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v2 = *a2;
      if (*a2)
      {
        *a2 = 0;
        png_free_data(a1, (uint64_t)v2, 0xFFFFu, -1);
        v2[44] = 0;
        *((_OWORD *)v2 + 2CoreML::Specification::DictVectorizer::New(this, 0) = 0u;
        *((_OWORD *)v2 + 21) = 0u;
        *((_OWORD *)v2 + 18) = 0u;
        *((_OWORD *)v2 + 19) = 0u;
        *((_OWORD *)v2 + 16) = 0u;
        *((_OWORD *)v2 + 17) = 0u;
        *((_OWORD *)v2 + 14) = 0u;
        *((_OWORD *)v2 + 15) = 0u;
        *((_OWORD *)v2 + 12) = 0u;
        *((_OWORD *)v2 + 13) = 0u;
        *((_OWORD *)v2 + 1CoreML::Specification::DictVectorizer::New(this, 0) = 0u;
        *((_OWORD *)v2 + 11) = 0u;
        *((_OWORD *)v2 + 8) = 0u;
        *((_OWORD *)v2 + 9) = 0u;
        *((_OWORD *)v2 + 6) = 0u;
        *((_OWORD *)v2 + 7) = 0u;
        *((_OWORD *)v2 + 4) = 0u;
        *((_OWORD *)v2 + 5) = 0u;
        *((_OWORD *)v2 + 2) = 0u;
        *((_OWORD *)v2 + 3) = 0u;
        *(_OWORD *)uint64_t v2 = 0u;
        *((_OWORD *)v2 + 1) = 0u;
        png_free(a1, v2);
      }
    }
  }
}

void png_free_data(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a1 && a2)
  {
    char v8 = *(void **)(a2 + 160);
    if (v8 && (a3 & *(_DWORD *)(a2 + 300) & 0x4000) != 0)
    {
      if (a4 == -1)
      {
        if (*(int *)(a2 + 148) >= 1)
        {
          uint64_t v9 = 0;
          uint64_t v10 = 8;
          do
          {
            png_free(a1, *(void **)(*(void *)(a2 + 160) + v10));
            ++v9;
            v10 += 56;
          }
          while (v9 < *(int *)(a2 + 148));
          char v8 = *(void **)(a2 + 160);
        }
        png_free(a1, v8);
        *(void *)(a2 + 16CoreML::Specification::DictVectorizer::New(this, 0) = 0;
        *(_DWORD *)(a2 + 148) = 0;
        *(_DWORD *)(a2 + 152) = 0;
      }
      else
      {
        png_free(a1, *((void **)v8 + 7 * a4 + 1));
        *(void *)(*(void *)(a2 + 160) + 56 * a4 + 8) = 0;
      }
    }
    int v11 = *(_DWORD *)(a2 + 300);
    if ((a3 & v11 & 0x2000) != 0)
    {
      *(_DWORD *)(a2 + 8) &= ~0x10u;
      png_free(a1, *(void **)(a2 + 184));
      *(void *)(a2 + 184) = 0;
      *(_WORD *)(a2 + 34) = 0;
      int v11 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v11 & 0x100) != 0)
    {
      png_free(a1, *(void **)(a2 + 336));
      png_free(a1, *(void **)(a2 + 344));
      *(void *)(a2 + 336) = 0;
      *(void *)(a2 + 344) = 0;
      *(_DWORD *)(a2 + 8) &= ~0x4000u;
      int v11 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v11 & 0x80) != 0)
    {
      png_free(a1, *(void **)(a2 + 264));
      png_free(a1, *(void **)(a2 + 280));
      *(void *)(a2 + 264) = 0;
      *(void *)(a2 + 28CoreML::Specification::DictVectorizer::New(this, 0) = 0;
      unint64_t v12 = *(void **)(a2 + 288);
      if (v12)
      {
        if (*(unsigned char *)(a2 + 297))
        {
          unint64_t v13 = 0;
          do
            png_free(a1, *(void **)(*(void *)(a2 + 288) + 8 * v13++));
          while (v13 < *(unsigned __int8 *)(a2 + 297));
          unint64_t v12 = *(void **)(a2 + 288);
        }
        png_free(a1, v12);
        *(void *)(a2 + 288) = 0;
      }
      *(_DWORD *)(a2 + 8) &= ~0x400u;
      int v11 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v11 & 0x10) != 0)
    {
      png_free(a1, *(void **)(a2 + 128));
      png_free(a1, *(void **)(a2 + 136));
      *(void *)(a2 + 128) = 0;
      *(void *)(a2 + 136) = 0;
      *(_DWORD *)(a2 + 8) &= ~0x1000u;
    }
    uint64_t v14 = *(void **)(a2 + 320);
    if (v14 && (a3 & *(_DWORD *)(a2 + 300) & 0x20) != 0)
    {
      if (a4 == -1)
      {
        if (*(int *)(a2 + 328) >= 1)
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          do
          {
            png_free(a1, *(void **)(*(void *)(a2 + 320) + v16));
            png_free(a1, *(void **)(*(void *)(a2 + 320) + v16 + 16));
            ++v17;
            v16 += 32;
          }
          while (v17 < *(int *)(a2 + 328));
          uint64_t v14 = *(void **)(a2 + 320);
        }
        png_free(a1, v14);
        *(void *)(a2 + 32CoreML::Specification::DictVectorizer::New(this, 0) = 0;
        *(_DWORD *)(a2 + 328) = 0;
        *(_DWORD *)(a2 + 8) &= ~0x2000u;
      }
      else
      {
        png_free(a1, *((void **)v14 + 4 * a4));
        png_free(a1, *(void **)(*(void *)(a2 + 320) + 32 * a4 + 16));
        long long v15 = (void *)(*(void *)(a2 + 320) + 32 * a4);
        *long long v15 = 0;
        void v15[2] = 0;
      }
    }
    uint64_t v18 = *(void **)(a2 + 304);
    if (v18 && (a3 & *(_DWORD *)(a2 + 300) & 0x200) != 0)
    {
      if (a4 == -1)
      {
        if (*(int *)(a2 + 312) >= 1)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 8;
          do
          {
            png_free(a1, *(void **)(*(void *)(a2 + 304) + v20));
            ++v19;
            v20 += 32;
          }
          while (v19 < *(int *)(a2 + 312));
          uint64_t v18 = *(void **)(a2 + 304);
        }
        png_free(a1, v18);
        *(void *)(a2 + 304) = 0;
        *(_DWORD *)(a2 + 312) = 0;
      }
      else
      {
        png_free(a1, *((void **)v18 + 4 * a4 + 1));
        *(void *)(*(void *)(a2 + 304) + 32 * a4 + 8) = 0;
      }
    }
    int v21 = *(_DWORD *)(a2 + 300);
    if ((a3 & v21 & 0x8000) != 0)
    {
      unint64_t v22 = *(void **)(a2 + 248);
      if (v22)
      {
        png_free(a1, v22);
        *(void *)(a2 + 248) = 0;
      }
      unint64_t v23 = *(void **)(a2 + 240);
      if (v23)
      {
        png_free(a1, v23);
        *(void *)(a2 + 24CoreML::Specification::DictVectorizer::New(this, 0) = 0;
      }
      *(_DWORD *)(a2 + 8) &= ~0x10000u;
      int v21 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v21 & 8) != 0)
    {
      png_free(a1, *(void **)(a2 + 256));
      *(void *)(a2 + 256) = 0;
      *(_DWORD *)(a2 + 8) &= ~0x40u;
      int v21 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v21 & 0x1000) != 0)
    {
      png_free(a1, *(void **)(a2 + 24));
      *(void *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 8) &= ~8u;
      *(_WORD *)(a2 + 32) = 0;
      int v21 = *(_DWORD *)(a2 + 300);
    }
    if ((a3 & v21 & 0x40) != 0)
    {
      unint64_t v24 = *(void **)(a2 + 352);
      if (v24)
      {
        if (*(_DWORD *)(a2 + 4))
        {
          unint64_t v25 = 0;
          do
            png_free(a1, *(void **)(*(void *)(a2 + 352) + 8 * v25++));
          while (v25 < *(unsigned int *)(a2 + 4));
          unint64_t v24 = *(void **)(a2 + 352);
        }
        png_free(a1, v24);
        *(void *)(a2 + 352) = 0;
        int v21 = *(_DWORD *)(a2 + 300);
      }
      *(_DWORD *)(a2 + 8) &= ~0x8000u;
    }
    unsigned int v26 = a3 & 0xFFFFBDDF;
    if (a4 == -1) {
      unsigned int v26 = a3;
    }
    *(_DWORD *)(a2 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v21 & ~v26;
  }
}

uint64_t png_get_io_ptr(uint64_t result)
{
  if (result) {
    return *(void *)(result + 256);
  }
  return result;
}

uint64_t png_handle_as_unknown(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    int v4 = *(_DWORD *)(a1 + 956);
    if (v4)
    {
      unint64_t v5 = *(void *)(a1 + 960);
      unint64_t v6 = v5 + (5 * v4);
      unint64_t v7 = v6;
      while (1)
      {
        int v8 = *(_DWORD *)(v7 - 5);
        v7 -= 5;
        if (*a2 == v8) {
          break;
        }
        unint64_t v6 = v7;
        if (v7 <= v5) {
          return 0;
        }
      }
      return *(unsigned __int8 *)(v6 - 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t png_chunk_unknown_handling(uint64_t a1, int a2)
{
  LOBYTE(v3) = HIBYTE(a2);
  BYTE1(v3) = BYTE2(a2);
  BYTE2(v3) = BYTE1(a2);
  HIBYTE(v3) = a2;
  char v4 = 0;
  return png_handle_as_unknown(a1, &v3);
}

uint64_t png_zstream_error(uint64_t result, int a2)
{
  if (!*(void *)(result + 360))
  {
    if ((a2 + 7) > 9) {
      uint64_t v2 = "unexpected zlib return code";
    }
    else {
      uint64_t v2 = off_2646D7968[a2 + 7];
    }
    *(void *)(result + 36CoreML::Specification::DictVectorizer::New(this, 0) = v2;
  }
  return result;
}

uint64_t png_colorspace_set_gamma(uint64_t result, uint64_t a2, int a3)
{
  if ((a3 - 625000001) < 0xDABF41CF)
  {
    __int16 v4 = *(_WORD *)(a2 + 74);
    unint64_t v5 = "gamma value out of range";
LABEL_6:
    *(_WORD *)(a2 + 74) = v4 | 0x8000;
    return png_chunk_report(result, v5, 1);
  }
  __int16 v4 = *(_WORD *)(a2 + 74);
  if ((*(unsigned char *)(result + 293) & 0x80) != 0 && (v4 & 8) != 0)
  {
    unint64_t v5 = "duplicate";
    goto LABEL_6;
  }
  if ((*(_WORD *)(a2 + 74) & 0x8000) == 0)
  {
    uint64_t result = png_colorspace_check_gamma(result, a2, a3, 1);
    if (result)
    {
      *(_DWORD *)a2 = a3;
      *(_WORD *)(a2 + 74) = v4 | 9;
    }
  }
  return result;
}

uint64_t png_colorspace_check_gamma(uint64_t a1, uint64_t a2, int a3, int a4)
{
  __int16 v4 = *(_WORD *)(a2 + 74);
  if (v4)
  {
    if (!a3
      || !*(_DWORD *)a2
      || ((double v5 = floor((double)*(int *)a2 * 100000.0 / (double)a3 + 0.5), v5 <= 2147483650.0)
        ? (BOOL v6 = v5 < -2147483650.0)
        : (BOOL v6 = 1),
          !v6 ? (BOOL v7 = ((int)v5 - 95000) >= 0x2711) : (BOOL v7 = 1),
          v7))
    {
      if (a4 == 2 || (v4 & 0x20) != 0)
      {
        BOOL v8 = a4 == 2;
        png_chunk_report(a1, "gamma value does not match sRGB", 2);
        return v8;
      }
      png_chunk_report(a1, "gamma value does not match libpng estimate", 0);
    }
  }
  return 1;
}

void png_colorspace_sync_info(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  if (*(__int16 *)(a2 + 126) < 0)
  {
    *(_DWORD *)(a2 + 8) = v2 & 0xFFFFE7FA;
    png_free_data(a1, a2, 0x10u, -1);
  }
  else
  {
    unsigned int v3 = *(unsigned __int16 *)(a2 + 126);
    unsigned int v4 = v2 & 0xFFFFF7FB | (((v3 >> 7) & 1) << 11) | (4 * ((v3 >> 1) & 1));
    if (v3) {
      unsigned int v5 = v4 | 1;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFFE;
    }
    *(_DWORD *)(a2 + 8) = v5;
  }
}

void png_colorspace_sync(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    long long v2 = *(_OWORD *)(a1 + 1176);
    *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 1192);
    long long v3 = *(_OWORD *)(a1 + 1224);
    *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 1208);
    *(_OWORD *)(a2 + 10CoreML::Specification::DictVectorizer::New(this, 0) = v3;
    *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 1236);
    *(_OWORD *)(a2 + 52) = v2;
    png_colorspace_sync_info(a1, a2);
  }
}

uint64_t png_colorspace_set_chromaticities(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v11 = 0;
  memset(v10, 0, sizeof(v10));
  int v8 = png_colorspace_check_xy((int *)v10, a3);
  if (v8 == 1)
  {
    *(_WORD *)(a2 + 74) |= 0x8000u;
    png_benign_error(a1, "invalid chromaticities");
    return 0;
  }
  else
  {
    if (v8)
    {
      *(_WORD *)(a2 + 74) |= 0x8000u;
      png_error(a1, "internal error checking chromaticities");
    }
    return png_colorspace_set_xy_and_XYZ(a1, a2, (uint64_t)a3, (uint64_t)v10, a4);
  }
}

uint64_t png_colorspace_check_xy(int *a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 0x186A0) {
    return 1;
  }
  int v5 = a2[1];
  uint64_t result = 1;
  if ((v5 & 0x80000000) == 0 && v5 <= 100000 - v2)
  {
    unsigned int v6 = a2[2];
    if (v6 <= 0x186A0)
    {
      signed int v7 = a2[3];
      if ((v7 & 0x80000000) == 0 && v7 <= (int)(100000 - v6))
      {
        unsigned int v8 = a2[4];
        if (v8 <= 0x186A0)
        {
          signed int v9 = a2[5];
          if ((v9 & 0x80000000) == 0 && v9 <= (int)(100000 - v8))
          {
            unsigned int v10 = a2[6];
            if (v10 <= 0x186A0)
            {
              int v11 = a2[7];
              if (v11 >= 5 && v11 <= (int)(100000 - v10))
              {
                int v12 = 0;
                int v13 = v5 - v9;
                int v14 = v6 - v8;
                if (v6 != v8 && v5 != v9)
                {
                  double v15 = floor((double)v14 * (double)v13 / 7.0 + 0.5);
                  if (v15 > 2147483650.0 || v15 < -2147483650.0) {
                    return 2;
                  }
                  int v12 = (int)v15;
                }
                int v17 = 0;
                int v18 = v7 - v9;
                int v19 = v2 - v8;
                if (v2 != v8 && v7 != v9)
                {
                  double v20 = floor((double)v19 * (double)v18 / 7.0 + 0.5);
                  if (v20 > 2147483650.0 || v20 < -2147483650.0) {
                    return 2;
                  }
                  int v17 = (int)v20;
                }
                int v22 = 0;
                int v23 = v11 - v9;
                if (v6 != v8 && v11 != v9)
                {
                  double v24 = floor((double)v14 * (double)v23 / 7.0 + 0.5);
                  if (v24 > 2147483650.0 || v24 < -2147483650.0) {
                    return 2;
                  }
                  int v22 = (int)v24;
                }
                int v26 = 0;
                int v27 = v10 - v8;
                if (v7 != v9 && v10 != v8)
                {
                  double v28 = floor((double)v18 * (double)v27 / 7.0 + 0.5);
                  if (v28 > 2147483650.0 || v28 < -2147483650.0) {
                    return 2;
                  }
                  int v26 = (int)v28;
                }
                int v30 = v22 - v26;
                if (v22 == v26) {
                  return 1;
                }
                int v31 = v12 - v17;
                if (v12 == v17)
                {
                  int v32 = 0;
                }
                else
                {
                  double v33 = floor((double)v11 * (double)v31 / (double)v30 + 0.5);
                  if (v33 > 2147483650.0 || v33 < -2147483650.0) {
                    return 1;
                  }
                  int v32 = (int)v33;
                }
                if (v32 <= v11) {
                  return 1;
                }
                int v35 = 0;
                if (v5 != v9 && v10 != v8)
                {
                  double v36 = floor((double)v13 * (double)v27 / 7.0 + 0.5);
                  if (v36 > 2147483650.0 || v36 < -2147483650.0) {
                    return 2;
                  }
                  int v35 = (int)v36;
                }
                int v38 = 0;
                if (v2 == v8 || v11 == v9)
                {
LABEL_67:
                  if (v35 != v38)
                  {
                    if (v12 == v17)
                    {
                      int v41 = 0;
                    }
                    else
                    {
                      double v42 = floor((double)v11 * (double)v31 / (double)(v35 - v38) + 0.5);
                      if (v42 > 2147483650.0 || v42 < -2147483650.0) {
                        return 1;
                      }
                      int v41 = (int)v42;
                    }
                    if (v41 <= v11) {
                      return 1;
                    }
                    double v44 = 1.0e10 / (double)v11 + 0.5;
                    double v45 = floor(v44);
                    BOOL v46 = v45 < -2147483650.0 || v45 > 2147483650.0;
                    unsigned int v47 = vcvtmd_s64_f64(v44);
                    if (v46) {
                      unsigned int v47 = 0;
                    }
                    double v48 = (double)v32;
                    double v49 = 1.0e10 / (double)v32 + 0.5;
                    double v50 = floor(v49);
                    BOOL v51 = v50 < -2147483650.0 || v50 > 2147483650.0;
                    unsigned int v52 = vcvtmd_s64_f64(v49);
                    double v53 = (double)v41;
                    if (v51) {
                      unsigned int v54 = 0;
                    }
                    else {
                      unsigned int v54 = v52;
                    }
                    double v55 = 1.0e10 / v53 + 0.5;
                    double v56 = floor(v55);
                    BOOL v57 = v56 < -2147483650.0 || v56 > 2147483650.0;
                    unsigned int v58 = vcvtmd_s64_f64(v55);
                    if (v57) {
                      unsigned int v58 = 0;
                    }
                    int v59 = v47 - (v54 + v58);
                    if (v59 < 1) {
                      return 1;
                    }
                    if (v2)
                    {
                      double v60 = floor((double)v2 * 100000.0 / v48 + 0.5);
                      if (v60 > 2147483650.0 || v60 < -2147483650.0) {
                        return 1;
                      }
                      int v2 = (int)v60;
                    }
                    *a1 = v2;
                    int v62 = a2[1];
                    if (v62)
                    {
                      double v63 = floor((double)v62 * 100000.0 / v48 + 0.5);
                      if (v63 > 2147483650.0 || v63 < -2147483650.0) {
                        return 1;
                      }
                      int v62 = (int)v63;
                    }
                    a1[1] = v62;
                    int v65 = 100000 - (a2[1] + *a2);
                    if (v65)
                    {
                      double v66 = floor((double)v65 * 100000.0 / v48 + 0.5);
                      if (v66 > 2147483650.0 || v66 < -2147483650.0) {
                        return 1;
                      }
                      int v65 = (int)v66;
                    }
                    a1[2] = v65;
                    int v68 = a2[2];
                    if (v68)
                    {
                      double v69 = floor((double)v68 * 100000.0 / v53 + 0.5);
                      if (v69 > 2147483650.0 || v69 < -2147483650.0) {
                        return 1;
                      }
                      int v68 = (int)v69;
                    }
                    a1[3] = v68;
                    int v71 = a2[3];
                    if (v71)
                    {
                      double v72 = floor((double)v71 * 100000.0 / v53 + 0.5);
                      if (v72 > 2147483650.0 || v72 < -2147483650.0) {
                        return 1;
                      }
                      int v71 = (int)v72;
                    }
                    a1[4] = v71;
                    int v74 = 100000 - (a2[3] + a2[2]);
                    if (v74)
                    {
                      double v75 = floor((double)v74 * 100000.0 / v53 + 0.5);
                      if (v75 > 2147483650.0 || v75 < -2147483650.0) {
                        return 1;
                      }
                      int v74 = (int)v75;
                    }
                    a1[5] = v74;
                    int v77 = a2[4];
                    if (v77)
                    {
                      double v78 = floor((double)v59 * (double)v77 / 100000.0 + 0.5);
                      if (v78 > 2147483650.0 || v78 < -2147483650.0) {
                        return 1;
                      }
                      int v77 = (int)v78;
                    }
                    a1[6] = v77;
                    int v80 = a2[5];
                    if (v80)
                    {
                      double v81 = floor((double)v59 * (double)v80 / 100000.0 + 0.5);
                      if (v81 > 2147483650.0 || v81 < -2147483650.0) {
                        return 1;
                      }
                      int v80 = (int)v81;
                    }
                    a1[7] = v80;
                    int v83 = 100000 - (a2[5] + a2[4]);
                    if (v83)
                    {
                      double v84 = floor((double)v59 * (double)v83 / 100000.0 + 0.5);
                      if (v84 > 2147483650.0 || v84 < -2147483650.0) {
                        return 1;
                      }
                      int v83 = (int)v84;
                    }
                    memset(v87, 0, sizeof(v87));
                    a1[8] = v83;
                    if (!png_xy_from_XYZ((int *)v87, a1)) {
                      return !png_colorspace_endpoints_match(a2, v87, 5);
                    }
                  }
                  return 1;
                }
                double v39 = floor((double)v19 * (double)v23 / 7.0 + 0.5);
                if (v39 <= 2147483650.0 && v39 >= -2147483650.0)
                {
                  int v38 = (int)v39;
                  goto LABEL_67;
                }
                return 2;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t png_colorspace_set_xy_and_XYZ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = *(__int16 *)(a2 + 74);
  if (v5 < 0) {
    return 0;
  }
  if (a5 > 1 || (v5 & 2) == 0) {
    goto LABEL_6;
  }
  if (!png_colorspace_endpoints_match((int *)a3, (_DWORD *)(a2 + 4), 100))
  {
    *(_WORD *)(a2 + 74) = v5 | 0x8000;
    png_benign_error(a1, "inconsistent chromaticities");
    return 0;
  }
  if (!a5) {
    return 1;
  }
LABEL_6:
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 4) = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 2CoreML::Specification::DictVectorizer::New(this, 0) = v11;
  long long v12 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)a4;
  *(_OWORD *)(a2 + 52) = v12;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a4 + 32);
  BOOL v13 = png_colorspace_endpoints_match((int *)a3, &sRGB_xy, 1000);
  __int16 v14 = v5 & 0xFFBD | 2;
  if (v13) {
    __int16 v14 = v5 | 0x42;
  }
  *(_WORD *)(a2 + 74) = v14;
  return 2;
}

uint64_t png_colorspace_set_sRGB(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v3 = *(__int16 *)(a2 + 74);
  if (v3 < 0) {
    return 0;
  }
  __int16 v4 = a3;
  if (a3 >= 4)
  {
    unint64_t v7 = (int)a3;
    unsigned int v8 = "invalid sRGB rendering intent";
LABEL_13:
    png_icc_profile_error(a1, a2, "sRGB", v7, v8);
    return 0;
  }
  if ((v3 & 4) != 0 && *(unsigned __int16 *)(a2 + 72) != a3)
  {
    unint64_t v7 = a3;
    unsigned int v8 = "inconsistent rendering intents";
    goto LABEL_13;
  }
  if ((v3 & 0x20) != 0)
  {
    png_benign_error(a1, "duplicate sRGB information ignored");
    return 0;
  }
  if ((v3 & 2) != 0 && !png_colorspace_endpoints_match((int *)&sRGB_xy, (_DWORD *)(a2 + 4), 100)) {
    png_chunk_report(a1, "cHRM chunk does not match sRGB", 2);
  }
  png_colorspace_check_gamma(a1, a2, 45455, 2);
  *(_OWORD *)(a2 + 4) = sRGB_xy;
  *(_OWORD *)(a2 + 2CoreML::Specification::DictVectorizer::New(this, 0) = unk_2246EE064;
  *(_OWORD *)(a2 + 36) = png_colorspace_set_sRGB_sRGB_XYZ;
  *(_WORD *)(a2 + 72) = v4;
  __int16 v9 = *(_WORD *)(a2 + 74);
  *(_DWORD *)(a2 + 68) = 95053;
  *(_OWORD *)(a2 + 52) = unk_2246EE040;
  *(_DWORD *)a2 = 45455;
  *(_WORD *)(a2 + 74) = v9 | 0xE7;
  return 1;
}

uint64_t png_icc_profile_error(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4, unsigned char *a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a2) {
    *(_WORD *)(a2 + 74) |= 0x8000u;
  }
  unint64_t v10 = png_safecat((uint64_t)v26, 0xC4uLL, 0, "profile '");
  unint64_t v11 = png_safecat((uint64_t)v26, v10 + 79, v10, a3);
  unint64_t v12 = png_safecat((uint64_t)v26, 0xC4uLL, v11, "': ");
  unint64_t v13 = v12;
  unint64_t v14 = a4 >> 24;
  if ((a4 >> 24 == 32 || v14 - 48 < 0xA || (v14 & 0xFFFFFFFFFFFFFFDFLL) - 65 <= 0x19)
    && (((a4 >> 16) & 0xDF) - 65 < 0x1A || BYTE2(a4) == 32 || (unint64_t)BYTE2(a4) - 48 <= 9)
    && (((a4 >> 8) & 0xDF) - 65 < 0x1A || BYTE1(a4) == 32 || (unint64_t)BYTE1(a4) - 48 <= 9)
    && ((unint64_t)(a4 & 0xDF) - 65 < 0x1A
     || a4 == 32
     || (unint64_t)a4 - 48 <= 9))
  {
    double v20 = &v26[v12];
    v26[v12] = 39;
    char v21 = BYTE3(a4);
    if (BYTE3(a4) - 32 >= 0x5F) {
      char v21 = 63;
    }
    v20[1] = v21;
    char v22 = BYTE2(a4);
    if (BYTE2(a4) - 32 >= 0x5F) {
      char v22 = 63;
    }
    void v20[2] = v22;
    unsigned int v23 = a4 >> 8;
    if (BYTE1(a4) - 32 >= 0x5F) {
      LOBYTE(v23) = 63;
    }
    v20[3] = v23;
    if (a4 - 32 >= 0x5F) {
      char v24 = 63;
    }
    else {
      char v24 = a4;
    }
    v20[4] = v24;
    *(_WORD *)(v20 + 5) = 14887;
    unint64_t v17 = v12 + 8;
    v20[7] = 32;
  }
  else
  {
    double v15 = (unsigned char *)png_format_number((unint64_t)v25, (uint64_t)v26, 3, a4);
    unint64_t v16 = png_safecat((uint64_t)v26, 0xC4uLL, v13, v15);
    unint64_t v17 = png_safecat((uint64_t)v26, 0xC4uLL, v16, "h: ");
  }
  png_safecat((uint64_t)v26, 0xC4uLL, v17, a5);
  if (a2) {
    int v18 = 2;
  }
  else {
    int v18 = 1;
  }
  return png_chunk_report(a1, v26, v18);
}

BOOL png_colorspace_endpoints_match(int *a1, _DWORD *a2, int a3)
{
  int v3 = a1[6];
  int v4 = a2[6];
  int v5 = v4 - a3;
  int v6 = v4 + a3;
  if (v3 >= v5)
  {
    BOOL v9 = __OFSUB__(v3, v6);
    BOOL v7 = v3 == v6;
    BOOL v8 = v3 - v6 < 0;
  }
  else
  {
    BOOL v9 = 0;
    BOOL v7 = 0;
    BOOL v8 = 0;
  }
  if (!(v8 ^ v9 | v7)) {
    return 0;
  }
  int v10 = a1[7];
  int v11 = a2[7];
  int v12 = v11 - a3;
  int v13 = v11 + a3;
  if (v10 >= v12)
  {
    BOOL v16 = __OFSUB__(v10, v13);
    BOOL v14 = v10 == v13;
    BOOL v15 = v10 - v13 < 0;
  }
  else
  {
    BOOL v16 = 0;
    BOOL v14 = 0;
    BOOL v15 = 0;
  }
  if (!(v15 ^ v16 | v14)) {
    return 0;
  }
  int v17 = *a1;
  int v18 = *a2 + a3;
  if (*a1 >= *a2 - a3)
  {
    BOOL v21 = __OFSUB__(v17, v18);
    BOOL v19 = v17 == v18;
    BOOL v20 = v17 - v18 < 0;
  }
  else
  {
    BOOL v21 = 0;
    BOOL v19 = 0;
    BOOL v20 = 0;
  }
  if (!(v20 ^ v21 | v19)) {
    return 0;
  }
  uint64_t v22 = 0;
  int v24 = a1[1];
  int v25 = a2[1];
  if (v24 >= v25 - a3 && v24 <= v25 + a3)
  {
    uint64_t v22 = 0;
    int v26 = a1[2];
    int v27 = a2[2];
    if (v26 >= v27 - a3 && v26 <= v27 + a3)
    {
      uint64_t v22 = 0;
      int v28 = a1[3];
      int v29 = a2[3];
      if (v28 >= v29 - a3 && v28 <= v29 + a3)
      {
        uint64_t v22 = 0;
        int v30 = a1[4];
        int v31 = a2[4];
        if (v30 >= v31 - a3 && v30 <= v31 + a3)
        {
          int v32 = a1[5];
          int v33 = a2[5];
          int v34 = v33 - a3;
          int v35 = v33 + a3;
          if (v32 >= v34)
          {
            BOOL v38 = __OFSUB__(v32, v35);
            BOOL v36 = v32 == v35;
            BOOL v37 = v32 - v35 < 0;
          }
          else
          {
            BOOL v38 = 0;
            BOOL v36 = 0;
            BOOL v37 = 0;
          }
          return (v37 ^ v38 | v36) != 0;
        }
      }
    }
  }
  return v22;
}

uint64_t png_icc_check_length(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4)
{
  if (a4 <= 0x83)
  {
    a4 = a4;
    int v4 = "too short";
LABEL_6:
    png_icc_profile_error(a1, a2, a3, a4, v4);
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 1064);
  if (v5 && v5 < a4)
  {
    a4 = a4;
    int v4 = "exceeds application limits";
    goto LABEL_6;
  }
  return 1;
}

uint64_t png_icc_check_header(uint64_t a1, uint64_t a2, unsigned char *a3, unint64_t a4, uint64_t a5, char a6)
{
  int v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  unint64_t v9 = bswap32(*(_DWORD *)a5);
  if (v9 != a4)
  {
    int v12 = "length does not match profile";
LABEL_13:
    a4 = v9;
    goto LABEL_14;
  }
  if ((a4 & 3) != 0 && *(unsigned __int8 *)(a5 + 8) >= 4u)
  {
    a4 = a4;
    int v12 = "invalid length";
LABEL_5:
    a1 = v8;
    a2 = v7;
    a3 = v6;
LABEL_14:
    png_icc_profile_error(a1, a2, a3, a4, v12);
    return 0;
  }
  unint64_t v9 = bswap32(*(_DWORD *)(a5 + 128));
  if (v9 > 0x1555554A || 12 * (int)v9 + 132 > a4)
  {
    int v12 = "tag count too large";
    goto LABEL_13;
  }
  a4 = bswap32(*(_DWORD *)(a5 + 64));
  if (a4 >= 0xFFFF)
  {
    int v12 = "invalid rendering intent";
    goto LABEL_5;
  }
  if (a4 >= 4) {
    png_icc_profile_error(a1, 0, a3, a4, "intent outside defined range");
  }
  a4 = bswap32(*(_DWORD *)(a5 + 36));
  if (a4 != 1633907568)
  {
    int v12 = "invalid signature";
    goto LABEL_5;
  }
  if (*(void *)(a5 + 68) != 0x100D6F60000 || *(_DWORD *)(a5 + 76) != 768802816) {
    png_icc_profile_error(v8, 0, v6, 0, "PCS illuminant is not D50");
  }
  a4 = bswap32(*(_DWORD *)(a5 + 16));
  if (a4 == 1196573017)
  {
    if ((a6 & 2) != 0)
    {
      int v12 = "Gray color space not permitted on RGB PNG";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1196573017;
      goto LABEL_14;
    }
  }
  else
  {
    if (a4 != 1380401696)
    {
      int v12 = "invalid ICC profile color space";
      goto LABEL_5;
    }
    if ((a6 & 2) == 0)
    {
      int v12 = "RGB color space not permitted on grayscale PNG";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1380401696;
      goto LABEL_14;
    }
  }
  unint64_t v16 = bswap32(*(_DWORD *)(a5 + 12));
  if ((int)v16 <= 1852662635)
  {
    if (v16 == 1633842036)
    {
      int v12 = "invalid embedded Abstract ICC profile";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1633842036;
      goto LABEL_14;
    }
    if (v16 == 1818848875)
    {
      int v12 = "unexpected DeviceLink ICC profile class";
      a1 = v8;
      a2 = v7;
      a3 = v6;
      a4 = 1818848875;
      goto LABEL_14;
    }
    int v17 = 1835955314;
  }
  else if ((int)v16 > 1935896177)
  {
    if (v16 == 1935896178) {
      goto LABEL_47;
    }
    int v17 = 1936744803;
  }
  else
  {
    if (v16 == 1852662636)
    {
      int v18 = "unexpected NamedColor ICC profile class";
      uint64_t v19 = v8;
      BOOL v20 = v6;
      unint64_t v16 = 1852662636;
      goto LABEL_46;
    }
    int v17 = 1886549106;
  }
  if (v16 != v17)
  {
    int v18 = "unrecognized ICC profile class";
    uint64_t v19 = v8;
    BOOL v20 = v6;
LABEL_46:
    png_icc_profile_error(v19, 0, v20, v16, v18);
  }
LABEL_47:
  a4 = bswap32(*(_DWORD *)(a5 + 20));
  uint64_t result = 1;
  if (a4 != 1281450528 && a4 != 1482250784)
  {
    int v12 = "unexpected ICC PCS encoding";
    goto LABEL_5;
  }
  return result;
}

uint64_t png_icc_check_tag_table(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned int a4, uint64_t a5)
{
  unsigned int v5 = bswap32(*(_DWORD *)(a5 + 128));
  if (!v5) {
    return 1;
  }
  for (uint64_t i = a5 + 132; ; i += 12)
  {
    unint64_t v11 = bswap32(*(_DWORD *)i);
    unsigned int v12 = _byteswap_ulong(*(_DWORD *)(i + 4));
    BOOL v13 = a4 >= v12;
    unsigned int v14 = a4 - v12;
    if (!v13 || bswap32(*(_DWORD *)(i + 8)) > v14) {
      break;
    }
    if ((*(unsigned char *)(i + 7) & 3) != 0) {
      png_icc_profile_error(a1, 0, a3, v11, "ICC profile tag start not a multiple of 4");
    }
    if (!--v5) {
      return 1;
    }
  }
  png_icc_profile_error(a1, a2, a3, v11, "ICC profile tag outside profile");
  return 0;
}

uint64_t png_icc_set_sRGB(uint64_t result, uint64_t a2, unsigned int *a3, uLong a4)
{
  if ((~*(_DWORD *)(result + 896) & 0x30) == 0) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uInt v8 = 0;
  unsigned int v9 = bswap32(a3[21]);
  unsigned int v10 = 0x10000;
  for (uint64_t i = &dword_2246EE088; ; i += 8)
  {
    if (v9 == *(i - 1) && bswap32(a3[22]) == *i && bswap32(a3[23]) == i[1] && bswap32(a3[24]) == i[2])
    {
      if (!v8)
      {
        uInt v8 = bswap32(*a3);
        unsigned int v10 = bswap32(a3[16]);
      }
      if (v8 == *(i - 2) && v10 == *((unsigned __int16 *)i + 7)) {
        break;
      }
    }
    if (++v7 == 7) {
      return result;
    }
  }
  if (!a4)
  {
    uLong v12 = adler32(0, 0, 0);
    a4 = adler32(v12, (const Bytef *)a3, v8);
  }
  if (a4 == *(i - 4))
  {
    uLong v13 = crc32(0, 0, 0);
    if (crc32(v13, (const Bytef *)a3, v8) == *(i - 3))
    {
      if (v7 >= 5)
      {
        unsigned int v14 = "known incorrect sRGB profile";
        uint64_t v15 = v6;
        int v16 = 2;
      }
      else
      {
        if ((unint64_t)(v7 - 4) > 2)
        {
LABEL_25:
          unsigned int v17 = bswap32(a3[16]);
          return png_colorspace_set_sRGB(v6, a2, v17);
        }
        unsigned int v14 = "out-of-date sRGB profile with no signature";
        uint64_t v15 = v6;
        int v16 = 0;
      }
      png_chunk_report(v15, v14, v16);
      goto LABEL_25;
    }
  }
  return png_chunk_report(v6, "Not recognizing known sRGB profile that has been edited", 0);
}

uint64_t png_colorspace_set_rgb_coefficients(uint64_t result)
{
  if (*(unsigned char *)(result + 969) || (*(_WORD *)(result + 1250) & 2) == 0) {
    return result;
  }
  int v1 = *(_DWORD *)(result + 1216);
  if (v1 < 0) {
    goto LABEL_46;
  }
  int v2 = *(_DWORD *)(result + 1228);
  int v3 = *(_DWORD *)(result + 1240);
  int v4 = v2 + v1 + v3;
  if (v4 < 1) {
    goto LABEL_46;
  }
  if (v1)
  {
    double v5 = (double)v1 * 32768.0 / (double)v4 + 0.5;
    double v6 = floor(v5);
    BOOL v7 = v6 <= 2147483650.0 && v6 >= -2147483650.0;
    unsigned int v8 = vcvtmd_s64_f64(v5);
    if (v7) {
      int v1 = v8;
    }
    if (v2 < 0) {
LABEL_46:
    }
      png_error(result, "internal error handling cHRM->XYZ");
  }
  else
  {
    BOOL v7 = 1;
    if (v2 < 0) {
      goto LABEL_46;
    }
  }
  if (!v7 || v1 < 0 || v1 > 0x8000) {
    goto LABEL_46;
  }
  if (v2)
  {
    double v9 = (double)v2 * 32768.0 / (double)v4 + 0.5;
    double v10 = floor(v9);
    BOOL v11 = v10 <= 2147483650.0 && v10 >= -2147483650.0;
    unsigned int v12 = vcvtmd_s64_f64(v9);
    if (v11) {
      int v2 = v12;
    }
    if (v3 < 0) {
      goto LABEL_46;
    }
  }
  else
  {
    BOOL v11 = 1;
    if (v3 < 0) {
      goto LABEL_46;
    }
  }
  if (!v11 || v2 < 0 || v2 > 0x8000) {
    goto LABEL_46;
  }
  if (v3)
  {
    double v13 = (double)v3 * 32768.0 / (double)v4 + 0.5;
    double v14 = floor(v13);
    if (v14 > 2147483650.0 || v14 < -2147483650.0) {
      goto LABEL_46;
    }
    unsigned int v16 = vcvtmd_s64_f64(v13);
    if (v16 > 0x8000) {
      goto LABEL_46;
    }
  }
  else
  {
    unsigned int v16 = 0;
  }
  unsigned int v17 = v2 + v1 + v16;
  if (v17 > 0x8001) {
    goto LABEL_46;
  }
  if (v17 == 32769)
  {
    int v18 = -1;
LABEL_36:
    if (v2 < v1 || v2 < v16)
    {
      if (v1 < v2 || v1 < v16) {
        v16 += v18;
      }
      else {
        v1 += v18;
      }
    }
    else
    {
      v2 += v18;
    }
    goto LABEL_43;
  }
  if (!(v17 >> 15))
  {
    int v18 = 1;
    goto LABEL_36;
  }
LABEL_43:
  if (v2 + v1 + v16 != 0x8000) {
    png_error(result, "internal error handling cHRM coefficients");
  }
  *(_WORD *)(result + 97CoreML::Specification::DictVectorizer::New(this, 0) = v1;
  *(_WORD *)(result + 972) = v2;
  return result;
}

uint64_t png_muldiv(int *a1, int a2, int a3, int a4)
{
  if (!a4) {
    return 0;
  }
  int v4 = 0;
  if (!a2 || !a3) {
    goto LABEL_10;
  }
  double v5 = floor((double)a2 * (double)a3 / (double)a4 + 0.5);
  if (v5 > 2147483650.0 || v5 < -2147483650.0) {
    return 0;
  }
  int v4 = (int)v5;
LABEL_10:
  *a1 = v4;
  return 1;
}

uint64_t png_check_IHDR(uint64_t result, unsigned int a2, unsigned int a3, int a4, unsigned int a5, int a6, int a7, int a8)
{
  uint64_t v15 = result;
  if (a2)
  {
    if ((a2 & 0x80000000) == 0)
    {
      int v16 = 0;
      goto LABEL_7;
    }
    unsigned int v17 = "Invalid image width in IHDR";
  }
  else
  {
    unsigned int v17 = "Image width is zero in IHDR";
  }
  uint64_t result = png_warning(result, v17);
  int v16 = 1;
LABEL_7:
  if (*(_DWORD *)(v15 + 1052) < a2)
  {
    uint64_t result = png_warning(v15, "Image width exceeds user limit in IHDR");
    int v16 = 1;
  }
  if (a3)
  {
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_14;
    }
    int v18 = "Invalid image height in IHDR";
  }
  else
  {
    int v18 = "Image height is zero in IHDR";
  }
  uint64_t result = png_warning(v15, v18);
  int v16 = 1;
LABEL_14:
  if (*(_DWORD *)(v15 + 1056) < a3)
  {
    uint64_t result = png_warning(v15, "Image height exceeds user limit in IHDR");
    int v16 = 1;
  }
  if (a4 > 0x10 || ((1 << a4) & 0x10116) == 0)
  {
    uint64_t result = png_warning(v15, "Invalid bit depth in IHDR");
    int v16 = 1;
  }
  unsigned int v19 = a5 & 0xFFFFFFFB;
  if (a5 > 6 || v19 == 1)
  {
    uint64_t result = png_warning(v15, "Invalid color type in IHDR");
    int v16 = 1;
  }
  if (a4 > 8 && a5 == 3 || (a5 != 4 ? (BOOL v20 = v19 == 2) : (BOOL v20 = 1), !v20 ? (v21 = 0) : (v21 = 1), a4 < 8 && v21))
  {
    uint64_t result = png_warning(v15, "Invalid color type/bit depth combination in IHDR");
    int v16 = 1;
  }
  if (a6 >= 2)
  {
    uint64_t result = png_warning(v15, "Unknown interlace method in IHDR");
    int v16 = 1;
  }
  if (a7)
  {
    uint64_t result = png_warning(v15, "Unknown compression method in IHDR");
    int v16 = 1;
  }
  if ((*(unsigned char *)(v15 + 293) & 0x10) != 0 && *(_DWORD *)(v15 + 984)) {
    uint64_t result = png_warning(v15, "MNG features are not allowed in a PNG datastream");
  }
  if (a8 && (a8 != 64 || (*(_DWORD *)(v15 + 984) & 4) == 0 || v19 != 2 || (*(_DWORD *)(v15 + 292) & 0x1000) != 0))
  {
    png_warning(v15, "Unknown filter method in IHDR");
    if ((*(unsigned char *)(v15 + 293) & 0x10) != 0) {
      png_warning(v15, "Invalid filter method in IHDR");
    }
LABEL_49:
    png_error(v15, "Invalid IHDR data");
  }
  if (v16) {
    goto LABEL_49;
  }
  return result;
}

uint64_t png_check_fp_number(uint64_t a1, unint64_t a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v4 = *a3;
  unint64_t v5 = *a4;
  if (*a4 < a2)
  {
    while (2)
    {
      int v6 = 4;
      switch(*(unsigned char *)(a1 + v5))
      {
        case '+':
          goto LABEL_4;
        case '-':
          int v6 = 132;
          goto LABEL_4;
        case '.':
          int v6 = 16;
          goto LABEL_4;
        case '0':
          int v6 = 8;
          goto LABEL_4;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
          int v6 = 264;
          goto LABEL_4;
        case 'E':
          int v6 = 32;
LABEL_4:
          int v7 = v6 & 0x3C | v4 & 3;
          switch(v7)
          {
            case 4:
              if ((v4 & 0x3C) == 0)
              {
                v4 |= v6;
                break;
              }
              goto LABEL_27;
            case 5:
            case 7:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
              goto LABEL_27;
            case 6:
              if ((v4 & 0x3C) == 0)
              {
                v4 |= 4u;
                break;
              }
              goto LABEL_27;
            case 8:
              if ((v4 & 0x10) != 0) {
                unsigned int v4 = v4 & 0x180 | 0x11;
              }
              goto LABEL_15;
            case 9:
LABEL_15:
              v4 |= v6 | 0x40;
              break;
            case 10:
              v4 |= 0x48u;
              break;
            case 16:
              if ((v4 & 0x10) != 0) {
                goto LABEL_27;
              }
              int v8 = v4 & 0x1C0 | v6 | 1;
              int v9 = v6 | v4;
              if ((v4 & 8) != 0) {
                unsigned int v4 = v9;
              }
              else {
                unsigned int v4 = v8;
              }
              break;
            default:
              if (v7 != 32 && v7 != 33 || (v4 & 8) == 0) {
                goto LABEL_27;
              }
              unsigned int v4 = v4 & 0x1C0 | 2;
              break;
          }
          if (a2 != ++v5) {
            continue;
          }
          unint64_t v5 = a2;
          break;
        default:
          goto LABEL_27;
      }
      break;
    }
  }
LABEL_27:
  *a3 = v4;
  *a4 = v5;
  return (v4 >> 3) & 1;
}

uint64_t png_check_fp_string(uint64_t a1, unint64_t a2)
{
  unsigned int v6 = 0;
  unint64_t v5 = 0;
  uint64_t result = png_check_fp_number(a1, a2, &v6, &v5);
  if (result)
  {
    if (v5 == a2 || !*(unsigned char *)(a1 + v5)) {
      return v6;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t png_reciprocal(int a1)
{
  double v1 = 1.0e10 / (double)a1 + 0.5;
  double v2 = floor(v1);
  BOOL v3 = v2 < -2147483650.0 || v2 > 2147483650.0;
  unsigned int v4 = vcvtmd_s64_f64(v1);
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

BOOL png_gamma_significant(int a1)
{
  return (a1 - 105001) < 0xFFFFD8EF;
}

unsigned int png_reciprocal2(int a1, int a2)
{
  if (a1
    && a2
    && ((v2 = 1.0e15 / (double)a1 / (double)a2 + 0.5, double v3 = floor(v2), v3 <= 2147483650.0)
      ? (BOOL v4 = v3 < -2147483650.0)
      : (BOOL v4 = 1),
        !v4))
  {
    return vcvtmd_s64_f64(v2);
  }
  else
  {
    return 0;
  }
}

uint64_t png_gamma_8bit_correct(uint64_t result, int a2)
{
  if ((result - 1) <= 0xFD) {
    LOBYTE(result) = vcvtmd_s64_f64(pow((double)(int)result / 255.0, (double)a2 * 0.00001) * 255.0 + 0.5);
  }
  return result;
}

uint64_t png_gamma_correct(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a2 - 1;
  if (*(unsigned char *)(a1 + 608) == 8)
  {
    if (v3 <= 0xFD) {
      LOBYTE(a2) = vcvtmd_s64_f64(pow((double)a2 / 255.0, (double)a3 * 0.00001) * 255.0 + 0.5);
    }
    LOWORD(a2) = a2;
  }
  else if (v3 <= 0xFFFD)
  {
    LOWORD(a2) = vcvtmd_s64_f64(pow((double)a2 / 65535.0, (double)a3 * 0.00001) * 65535.0 + 0.5);
  }
  return (unsigned __int16)a2;
}

void png_destroy_gamma_table(uint64_t a1)
{
  png_free(a1, *(void **)(a1 + 672));
  *(void *)(a1 + 672) = 0;
  double v2 = *(void **)(a1 + 680);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 664);
    if (v3 != -23)
    {
      uint64_t v4 = 0;
      int v5 = 1 << (8 - v3);
      if (v5 <= 1) {
        int v5 = 1;
      }
      uint64_t v6 = 8 * v5;
      do
      {
        png_free(a1, *(void **)(*(void *)(a1 + 680) + v4));
        v4 += 8;
      }
      while (v6 != v4);
      double v2 = *(void **)(a1 + 680);
    }
    png_free(a1, v2);
    *(void *)(a1 + 68CoreML::Specification::DictVectorizer::New(this, 0) = 0;
  }
  png_free(a1, *(void **)(a1 + 688));
  *(void *)(a1 + 688) = 0;
  png_free(a1, *(void **)(a1 + 696));
  *(void *)(a1 + 696) = 0;
  int v7 = *(void **)(a1 + 704);
  if (v7)
  {
    int v8 = *(_DWORD *)(a1 + 664);
    if (v8 != -23)
    {
      uint64_t v9 = 0;
      int v10 = 1 << (8 - v8);
      if (v10 <= 1) {
        int v10 = 1;
      }
      uint64_t v11 = 8 * v10;
      do
      {
        png_free(a1, *(void **)(*(void *)(a1 + 704) + v9));
        v9 += 8;
      }
      while (v11 != v9);
      int v7 = *(void **)(a1 + 704);
    }
    png_free(a1, v7);
    *(void *)(a1 + 704) = 0;
  }
  unsigned int v12 = *(void **)(a1 + 712);
  if (v12)
  {
    int v13 = *(_DWORD *)(a1 + 664);
    if (v13 != -23)
    {
      uint64_t v14 = 0;
      int v15 = 1 << (8 - v13);
      if (v15 <= 1) {
        int v15 = 1;
      }
      uint64_t v16 = 8 * v15;
      do
      {
        png_free(a1, *(void **)(*(void *)(a1 + 712) + v14));
        v14 += 8;
      }
      while (v16 != v14);
      unsigned int v12 = *(void **)(a1 + 712);
    }
    png_free(a1, v12);
    *(void *)(a1 + 712) = 0;
  }
}

void png_build_gamma_table(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 672) || *(void *)(a1 + 680))
  {
    png_warning(a1, "gamma table being rebuilt");
    png_destroy_gamma_table(a1);
  }
  if (a2 > 8)
  {
    if ((*(unsigned char *)(a1 + 607) & 2) != 0)
    {
      unsigned int v9 = *(unsigned __int8 *)(a1 + 720);
      if (*(unsigned __int8 *)(a1 + 721) > v9) {
        unsigned int v9 = *(unsigned __int8 *)(a1 + 721);
      }
      if (*(unsigned __int8 *)(a1 + 722) > v9) {
        unsigned int v9 = *(unsigned __int8 *)(a1 + 722);
      }
    }
    else
    {
      unsigned int v9 = *(unsigned __int8 *)(a1 + 723);
    }
    unsigned int v10 = v9 - 1;
    unsigned __int8 v11 = 16 - v9;
    if (v10 >= 0xF) {
      unsigned __int8 v11 = 0;
    }
    char v12 = v11;
    if (v11 <= 5u) {
      char v12 = 5;
    }
    int v13 = *(_DWORD *)(a1 + 300) & 0x4000400;
    if (v13) {
      unsigned __int8 v11 = v12;
    }
    if ((v11 & 0xF8) != 0) {
      int v14 = 8;
    }
    else {
      int v14 = v11;
    }
    *(_DWORD *)(a1 + 664) = v14;
    int v15 = *(_DWORD *)(a1 + 668);
    uint64_t v16 = "uncIZN4turi10query_evalL21ec_scatter_partitionsENS2_6sframeEmRKNS_6vectorIbNS_9allocatorIbEEEENS_10shared_ptrINS2_6sarrayINS2_13flexible_typeEEEEEE3$_0NS6_ISG_EEFvmmEEE";
    if (v13)
    {
      if (v15 < 1)
      {
        double v21 = 1.0;
      }
      else
      {
        double v17 = (double)*(int *)(a1 + 1176) * 0.00001 * (double)v15 + 0.5;
        double v18 = floor(v17);
        int v19 = vcvtmd_s64_f64(v17);
        if (v18 < -2147483650.0 || v18 > 2147483650.0) {
          double v21 = 0.0;
        }
        else {
          double v21 = (double)v19 * 0.00001;
        }
      }
      char v26 = 8 - v14;
      uint64_t v27 = (1 << (8 - v14));
      int v28 = png_calloc((void *)a1, 8 * v27);
      *(void *)(a1 + 68CoreML::Specification::DictVectorizer::New(this, 0) = v28;
      int v29 = v28;
      do
      {
        *v29++ = png_malloc((void *)a1, 0x200uLL);
        --v27;
      }
      while (v27);
      unsigned int v30 = 0;
      int v31 = 0;
      unsigned int v32 = 0xFFu >> v14;
      do
      {
        unsigned int v33 = vcvtmd_s64_f64(pow((double)((unsigned __int16)(257 * v31) + 128) / 65535.0, v21) * 65535.0 + 0.5);
        unsigned int v34 = ((v33 << (16 - v14)) - v33 + 0x8000) / 0xFFFF;
        if (v30 <= v34)
        {
          do
          {
            *(_WORD *)(v28[v30 & v32] + 2 * (v30 >> v26)) = 257 * v31;
            ++v30;
          }
          while (v34 + 1 != v30);
          unsigned int v30 = v34 + 1;
        }
        ++v31;
      }
      while (v31 != 255);
      uint64_t v16 = "NSt3__110__function6__funcIZN4turi10query_evalL21ec_scatter_partitionsENS2_6sframeEmRKNS_6vectorIbNS_9alloca"
            "torIbEEEENS_10shared_ptrINS2_6sarrayINS2_13flexible_typeEEEEEE3$_0NS6_ISG_EEFvmmEEE"
          + 23;
      if (v30 < 256 << v26)
      {
        do
        {
          *(_WORD *)(v28[v30 & v32] + 2 * (v30 >> v26)) = -1;
          ++v30;
        }
        while (256 << v26 != v30);
      }
    }
    else
    {
      if (v15 < 1)
      {
        int v47 = 100000;
      }
      else
      {
        int v22 = *(_DWORD *)(a1 + 1176);
        if (!v22
          || ((v23 = 1.0e15 / (double)v22 / (double)v15 + 0.5, double v24 = floor(v23), v24 <= 2147483650.0)
            ? (BOOL v25 = v24 < -2147483650.0)
            : (BOOL v25 = 1),
              v25))
        {
          int v47 = 0;
        }
        else
        {
          int v47 = vcvtmd_s64_f64(v23);
        }
      }
      png_build_16bit_table((void *)a1, (void *)(a1 + 680), v14, v47);
    }
    if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
    {
      double v48 = 1.0e10 / (double)*(int *)(a1 + 1176) + 0.5;
      double v49 = floor(v48);
      double v50 = *((double *)v16 + 289);
      BOOL v51 = v49 < -2147483650.0 || v49 > v50;
      unsigned int v52 = vcvtmd_s64_f64(v48);
      if (v51) {
        int v53 = 0;
      }
      else {
        int v53 = v52;
      }
      png_build_16bit_table((void *)a1, (void *)(a1 + 712), v14, v53);
      int v54 = *(_DWORD *)(a1 + 668);
      if (v54 < 1)
      {
        int v59 = *(_DWORD *)(a1 + 1176);
      }
      else
      {
        double v55 = 1.0e10 / (double)v54 + 0.5;
        double v56 = floor(v55);
        BOOL v57 = v56 < -2147483650.0 || v56 > v50;
        unsigned int v58 = vcvtmd_s64_f64(v55);
        if (v57) {
          int v59 = 0;
        }
        else {
          int v59 = v58;
        }
      }
      png_build_16bit_table((void *)a1, (void *)(a1 + 704), v14, v59);
    }
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 668);
    if (v4 < 1)
    {
      int v35 = 100000;
    }
    else
    {
      int v5 = *(_DWORD *)(a1 + 1176);
      if (!v5
        || ((v6 = 1.0e15 / (double)v5 / (double)v4 + 0.5, double v7 = floor(v6), v7 <= 2147483650.0)
          ? (BOOL v8 = v7 < -2147483650.0)
          : (BOOL v8 = 1),
            v8))
      {
        int v35 = 0;
      }
      else
      {
        int v35 = vcvtmd_s64_f64(v6);
      }
    }
    png_build_8bit_table((void *)a1, (void *)(a1 + 672), v35);
    if ((*(_DWORD *)(a1 + 300) & 0x600080) != 0)
    {
      double v36 = 1.0e10 / (double)*(int *)(a1 + 1176) + 0.5;
      double v37 = floor(v36);
      BOOL v38 = v37 < -2147483650.0 || v37 > 2147483650.0;
      unsigned int v39 = vcvtmd_s64_f64(v36);
      if (v38) {
        int v40 = 0;
      }
      else {
        int v40 = v39;
      }
      png_build_8bit_table((void *)a1, (void *)(a1 + 696), v40);
      int v41 = *(_DWORD *)(a1 + 668);
      if (v41 < 1)
      {
        int v46 = *(_DWORD *)(a1 + 1176);
      }
      else
      {
        double v42 = 1.0e10 / (double)v41 + 0.5;
        double v43 = floor(v42);
        BOOL v44 = v43 < -2147483650.0 || v43 > 2147483650.0;
        unsigned int v45 = vcvtmd_s64_f64(v42);
        if (v44) {
          int v46 = 0;
        }
        else {
          int v46 = v45;
        }
      }
      png_build_8bit_table((void *)a1, (void *)(a1 + 688), v46);
    }
  }
}

void png_build_8bit_table(void *a1, void *a2, int a3)
{
  int v5 = png_malloc(a1, 0x100uLL);
  double v6 = v5;
  *a2 = v5;
  if ((a3 - 95000) > 0x2710)
  {
    for (uint64_t i = 0; i != 256; ++i)
    {
      if ((i - 1) > 0xFD) {
        char v11 = i;
      }
      else {
        char v11 = vcvtmd_s64_f64(pow((double)(int)i / 255.0, (double)a3 * 0.00001) * 255.0 + 0.5);
      }
      *((unsigned char *)v6 + i) = v11;
    }
  }
  else
  {
    uint64_t v7 = 0;
    int8x16_t v8 = (int8x16_t)xmmword_2246ED7E0;
    v9.i64[0] = 0x1010101010101010;
    v9.i64[1] = 0x1010101010101010;
    do
    {
      *(int8x16_t *)&v5[v7] = v8;
      v7 += 2;
      int8x16_t v8 = vaddq_s8(v8, v9);
    }
    while (v7 != 32);
  }
}

void png_build_16bit_table(void *a1, void *a2, int a3, int a4)
{
  unsigned int v7 = 8 - a3;
  int v8 = ~(-1 << (16 - a3));
  double v43 = 1.0 / (double)v8;
  int v9 = 1 << (15 - a3);
  uint64_t v39 = (1 << (8 - a3));
  char v11 = png_calloc(a1, 8 * v39);
  uint64_t v12 = 0;
  *a2 = v11;
  unsigned int v13 = a4 - 95000;
  double v14 = (double)a4 * 0.00001;
  uint32x4_t v42 = (uint32x4_t)vdupq_n_s32(v7);
  float64x2_t v41 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
  __asm { FMOV            V0.2D, #0.5 }
  float64x2_t v40 = _Q0;
  do
  {
    BOOL v20 = png_malloc(a1, 0x200uLL);
    double v21 = v20;
    v11[v12] = v20;
    if (v13 > 0x2710)
    {
      uint64_t v24 = 0;
      int32x4_t v44 = vdupq_n_s32(v12);
      uint32x4_t v25 = (uint32x4_t)xmmword_2246C0930;
      uint32x4_t v26 = (uint32x4_t)xmmword_2246EE010;
      do
      {
        int32x4_t v50 = (int32x4_t)v26;
        int32x4_t v51 = (int32x4_t)v25;
        int32x4_t v27 = vaddq_s32((int32x4_t)vshlq_u32(v26, v42), v44);
        int32x4_t v28 = vaddq_s32((int32x4_t)vshlq_u32(v25, v42), v44);
        v29.i64[0] = v28.u32[0];
        v29.i64[1] = v28.u32[1];
        float64x2_t v30 = vcvtq_f64_u64(v29);
        v29.i64[0] = v28.u32[2];
        v29.i64[1] = v28.u32[3];
        float64x2_t v31 = vcvtq_f64_u64(v29);
        v29.i64[0] = v27.u32[0];
        v29.i64[1] = v27.u32[1];
        float64x2_t v32 = vcvtq_f64_u64(v29);
        v29.i64[0] = v27.u32[2];
        v29.i64[1] = v27.u32[3];
        float64x2_t v53 = vmulq_n_f64(v32, v43);
        float64x2_t v54 = vmulq_n_f64(vcvtq_f64_u64(v29), v43);
        float64x2_t v52 = vmulq_n_f64(v31, v43);
        float64x2_t v48 = vmulq_n_f64(v30, v43);
        long double v49 = pow(v48.f64[0], v14);
        long double v47 = pow(v48.f64[1], v14);
        v48.f64[0] = pow(v52.f64[0], v14);
        v52.f64[0] = pow(v52.f64[1], v14);
        long double v46 = pow(v53.f64[0], v14);
        long double v45 = pow(v53.f64[1], v14);
        v53.f64[0] = pow(v54.f64[0], v14);
        long double v33 = pow(v54.f64[1], v14);
        *(long double *)v55.val[2].i64 = v46;
        *(long double *)&v55.val[2].i64[1] = v45;
        *(long double *)v55.val[1].i64 = v49;
        *(long double *)&v55.val[1].i64[1] = v47;
        v34.f64[0] = v53.f64[0];
        v34.f64[1] = v33;
        v35.f64[0] = v48.f64[0];
        v35.f64[1] = v52.f64[0];
        v55.val[0].i64[1] = *(void *)&v41.f64[1];
        float64x2_t v36 = vmlaq_f64(v40, v41, v35);
        float64x2_t v37 = vmlaq_f64(v40, v41, v34);
        float64x2_t v38 = vrndmq_f64(vmlaq_f64(v40, v41, (float64x2_t)v55.val[1]));
        *(int32x2_t *)v55.val[1].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v36)));
        *(int32x2_t *)v55.val[3].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(v37)));
        *(int32x2_t *)v55.val[0].i8 = vmovn_s64(vcvtq_s64_f64(v38));
        *(int32x2_t *)v55.val[2].i8 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmlaq_f64(v40, v41, (float64x2_t)v55.val[2]))));
        *(int8x16_t *)&v21[v24] = vqtbl4q_s8(v55, (int8x16_t)xmmword_2246EE020);
        *(void *)&v36.f64[0] = 0x800000008;
        *(void *)&v36.f64[1] = 0x800000008;
        uint32x4_t v25 = (uint32x4_t)vaddq_s32(v51, (int32x4_t)v36);
        uint32x4_t v26 = (uint32x4_t)vaddq_s32(v50, (int32x4_t)v36);
        v24 += 2;
      }
      while (v24 != 64);
    }
    else
    {
      for (uint64_t i = 0; i != 256; ++i)
      {
        unsigned int v23 = (i << v7) + v12;
        if (a3) {
          unsigned int v23 = (v9 - v23 + (v23 << 16)) / v8;
        }
        *((_WORD *)v20 + i) = v23;
      }
    }
    ++v12;
  }
  while (v12 != v39);
}

uint64_t png_set_option(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = 1;
  if (a1 && a2 <= 0xB && (a2 & 1) == 0)
  {
    int v4 = 3 << a2;
    if (a3) {
      int v5 = 3;
    }
    else {
      int v5 = 2;
    }
    int v6 = *(_DWORD *)(a1 + 896);
    *(_DWORD *)(a1 + 896) = v6 & ~v4 | (v5 << a2);
    return (v6 & v4) >> a2;
  }
  return v3;
}

uint64_t png_xy_from_XYZ(int *a1, int *a2)
{
  int v2 = *a2;
  int v3 = a2[1] + *a2 + a2[2];
  if (v3)
  {
    if (v2)
    {
      double v4 = floor((double)v2 * 100000.0 / (double)v3 + 0.5);
      if (v4 > 2147483650.0 || v4 < -2147483650.0) {
        return 1;
      }
      int v2 = (int)v4;
    }
    *a1 = v2;
    int v6 = a2[1];
    if (v6)
    {
      double v7 = floor((double)v6 * 100000.0 / (double)v3 + 0.5);
      if (v7 > 2147483650.0 || v7 < -2147483650.0) {
        return 1;
      }
      int v6 = (int)v7;
    }
    a1[1] = v6;
    int v9 = a2[3];
    int v10 = a2[4] + v9 + a2[5];
    if (v10)
    {
      int v12 = *a2;
      int v11 = a2[1];
      if (v9)
      {
        double v13 = floor((double)v9 * 100000.0 / (double)v10 + 0.5);
        if (v13 > 2147483650.0 || v13 < -2147483650.0) {
          return 1;
        }
        int v9 = (int)v13;
      }
      a1[2] = v9;
      int v15 = a2[4];
      if (v15)
      {
        double v16 = floor((double)v15 * 100000.0 / (double)v10 + 0.5);
        if (v16 > 2147483650.0 || v16 < -2147483650.0) {
          return 1;
        }
        int v15 = (int)v16;
      }
      a1[3] = v15;
      int v18 = a2[6];
      int v19 = a2[7] + v18 + a2[8];
      if (v19)
      {
        int v21 = a2[3];
        int v20 = a2[4];
        if (v18)
        {
          double v22 = floor((double)v18 * 100000.0 / (double)v19 + 0.5);
          if (v22 > 2147483650.0 || v22 < -2147483650.0) {
            return 1;
          }
          int v18 = (int)v22;
        }
        a1[4] = v18;
        int v24 = a2[7];
        if (v24)
        {
          double v25 = floor((double)v24 * 100000.0 / (double)v19 + 0.5);
          if (v25 > 2147483650.0 || v25 < -2147483650.0) {
            return 1;
          }
          int v24 = (int)v25;
        }
        a1[5] = v24;
        int v27 = v10 + v3 + v19;
        if (v27)
        {
          int v28 = v21 + v12;
          int v29 = a2[7];
          int v30 = v28 + a2[6];
          if (v30)
          {
            double v31 = floor((double)v30 * 100000.0 / (double)v27 + 0.5);
            if (v31 > 2147483650.0 || v31 < -2147483650.0) {
              return 1;
            }
            int v30 = (int)v31;
          }
          a1[6] = v30;
          int v33 = v20 + v11 + v29;
          if (!v33)
          {
            int v38 = 0;
            goto LABEL_56;
          }
          double v34 = floor((double)v33 * 100000.0 / (double)v27 + 0.5);
          if (v34 <= 2147483650.0 && v34 >= -2147483650.0)
          {
            int v38 = (int)v34;
LABEL_56:
            uint64_t v36 = 0;
            a1[7] = v38;
            return v36;
          }
        }
      }
    }
  }
  return 1;
}

void png_error(uint64_t a1, const char *a2)
{
  if (a1)
  {
    double v4 = *(void (**)(uint64_t, const char *))(a1 + 216);
    if (v4) {
      v4(a1, a2);
    }
  }
  png_default_error(a1, a2);
}

void png_default_error(uint64_t a1, const char *a2)
{
  int v3 = (FILE **)MEMORY[0x263EF8348];
  double v4 = "undefined";
  if (a2) {
    double v4 = a2;
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "libpng error: %s", v4);
  fputc(10, *v3);
  png_longjmp(a1);
}

unint64_t png_safecat(uint64_t a1, unint64_t a2, unint64_t a3, unsigned char *a4)
{
  if (a1 && a3 < a2)
  {
    if (a4 && (char v4 = *a4) != 0 && a2 - 1 > a3)
    {
      int v5 = a4 + 1;
      do
      {
        *(unsigned char *)(a1 + a3) = v4;
        unint64_t v6 = a3 + 1;
        int v7 = *v5++;
        char v4 = v7;
        if (v7) {
          BOOL v8 = v6 >= a2 - 1;
        }
        else {
          BOOL v8 = 1;
        }
        ++a3;
      }
      while (!v8);
    }
    else
    {
      unint64_t v6 = a3;
    }
    *(unsigned char *)(a1 + v6) = 0;
    return v6;
  }
  return a3;
}

unint64_t png_format_number(unint64_t a1, uint64_t a2, int a3, unint64_t a4)
{
  *(unsigned char *)(a2 - 1) = 0;
  unint64_t v4 = a2 - 1;
  if (v4 > a1)
  {
    int v5 = 0;
    int v6 = 0;
    int v7 = 1;
    while (2)
    {
      if (a4 || v6 < v7)
      {
        switch(a3)
        {
          case 1:
            goto LABEL_7;
          case 2:
            int v7 = 2;
LABEL_7:
            unint64_t v8 = a4 / 0xA;
            *(unsigned char *)--unint64_t v4 = png_format_number_digits[a4 % 0xA];
            goto LABEL_11;
          case 3:
            goto LABEL_10;
          case 4:
            int v7 = 2;
LABEL_10:
            *(unsigned char *)--unint64_t v4 = png_format_number_digits[a4 & 0xF];
            unint64_t v8 = a4 >> 4;
LABEL_11:
            ++v6;
            a4 = v8;
            goto LABEL_12;
          case 5:
            unint64_t v9 = a4 % 0xA;
            if (v5 || v9)
            {
              *(unsigned char *)--unint64_t v4 = png_format_number_digits[v9];
              int v5 = 1;
            }
            else
            {
              int v5 = 0;
            }
            int v7 = 5;
            a4 /= 0xAuLL;
            goto LABEL_19;
          default:
            a4 = 0;
LABEL_19:
            ++v6;
            if (a3 == 5 && v6 == 5 && v4 > a1)
            {
              if (v5)
              {
                *(unsigned char *)--unint64_t v4 = 46;
              }
              else
              {
                int v5 = 0;
                if (!a4) {
                  *(unsigned char *)--unint64_t v4 = 48;
                }
              }
              int v6 = 5;
            }
LABEL_12:
            if (v4 <= a1) {
              return v4;
            }
            continue;
        }
      }
      break;
    }
  }
  return v4;
}

uint64_t png_warning(uint64_t a1, unsigned char *a2)
{
  if (a1)
  {
    if (*a2 == 35)
    {
      for (uint64_t i = 1; i != 15; ++i)
      {
        if (a2[i] == 32) {
          break;
        }
      }
    }
    else
    {
      LODWORD(i) = 0;
    }
    int v3 = *(uint64_t (**)(void))(a1 + 224);
    if (v3)
    {
      return v3();
    }
  }
  else
  {
    LODWORD(i) = 0;
  }
  int v5 = (FILE **)MEMORY[0x263EF8348];
  fprintf((FILE *)*MEMORY[0x263EF8348], "libpng warning: %s", &a2[i]);
  int v6 = *v5;
  return fputc(10, v6);
}

uint64_t png_warning_parameter(uint64_t result, int a2, unsigned char *a3)
{
  uint64_t v3 = (a2 - 1);
  if (v3 <= 7 && result)
  {
    uint64_t v4 = result + 32 * v3;
    if (a3 && (LOBYTE(v5) = *a3) != 0)
    {
      unint64_t v6 = 0;
      do
      {
        unint64_t v7 = v6 + 1;
        *(unsigned char *)(v4 + v6) = v5;
        if (v6 > 0x1D) {
          break;
        }
        int v5 = a3[++v6];
      }
      while (v5);
    }
    else
    {
      unint64_t v7 = 0;
    }
    *(unsigned char *)(v4 + v7) = 0;
  }
  return result;
}

unsigned char *png_warning_parameter_signed(uint64_t a1, int a2, int a3, unint64_t a4)
{
  int v4 = a4;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((a4 & 0x80000000) == 0) {
    a4 = a4;
  }
  else {
    a4 = -(int)a4;
  }
  uint64_t result = (unsigned char *)png_format_number((unint64_t)v13, (uint64_t)&v14, a3, a4);
  if (v4 < 0 && result > v13) {
    *--uint64_t result = 45;
  }
  uint64_t v8 = (a2 - 1);
  if (v8 <= 7 && a1)
  {
    uint64_t v9 = a1 + 32 * v8;
    LOBYTE(v1CoreML::Specification::DictVectorizer::New(this, 0) = *result;
    if (*result)
    {
      unint64_t v11 = 0;
      do
      {
        unint64_t v12 = v11 + 1;
        *(unsigned char *)(v9 + v11) = v10;
        if (v11 > 0x1D) {
          break;
        }
        int v10 = result[++v11];
      }
      while (v10);
    }
    else
    {
      unint64_t v12 = 0;
    }
    *(unsigned char *)(v9 + v12) = 0;
  }
  return result;
}

uint64_t png_formatted_warning(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  while (1)
  {
    int v4 = *a3;
    if (!*a3) {
      break;
    }
    if (!a2 || v4 != 64) {
      goto LABEL_19;
    }
    int v5 = a3 + 1;
    int v4 = a3[1];
    if (!a3[1])
    {
      LOBYTE(v4) = 64;
LABEL_19:
      int v5 = a3;
      goto LABEL_20;
    }
    uint64_t v6 = 0;
    uint64_t v7 = a2 - 32;
    do
    {
      int v8 = v6 + 1;
      v7 += 32;
      if (v6 == 9) {
        break;
      }
      int v9 = png_formatted_warning_valid_parameters[v6++];
    }
    while (v9 != v4);
    if (((v8 - 1) & 0xFFFFFFF8) == 0)
    {
      if (v3 <= 0xBE)
      {
        unint64_t v10 = 0;
        while (*(unsigned char *)(v7 + v10) && v10 <= 0x1F)
        {
          v14[v3 + v10] = *(unsigned char *)(v7 + v10);
          ++v10;
          if (v3 + v10 == 191)
          {
            unint64_t v3 = 191;
            goto LABEL_24;
          }
        }
        v3 += v10;
      }
LABEL_24:
      a3 += 2;
      unint64_t v12 = v3;
      goto LABEL_21;
    }
LABEL_20:
    a3 = v5 + 1;
    unint64_t v12 = v3 + 1;
    v14[v3++] = v4;
LABEL_21:
    if (v12 >= 0xBF) {
      goto LABEL_26;
    }
  }
  unint64_t v12 = v3;
LABEL_26:
  v14[v12] = 0;
  return png_warning(a1, v14);
}

uint64_t png_benign_error(uint64_t a1, char *a2)
{
  int v2 = *(_DWORD *)(a1 + 292);
  if ((*(unsigned char *)(a1 + 298) & 0x10) == 0)
  {
    if ((v2 & 0x8000) == 0 || !*(_DWORD *)(a1 + 528)) {
      png_error(a1, a2);
    }
    png_chunk_error(a1, a2);
  }
  if ((v2 & 0x8000) != 0 && *(_DWORD *)(a1 + 528))
  {
    return png_chunk_warning(a1, a2);
  }
  else
  {
    return png_warning(a1, a2);
  }
}

uint64_t png_chunk_warning(uint64_t a1, const char *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1)
  {
    png_format_buffer(a1, (uint64_t)v6, (uint64_t)a2);
    return png_warning(a1, v6);
  }
  else
  {
    int v4 = (FILE **)MEMORY[0x263EF8348];
    fprintf((FILE *)*MEMORY[0x263EF8348], "libpng warning: %s", a2);
    int v5 = *v4;
    return fputc(10, v5);
  }
}

void png_chunk_error(uint64_t a1, const char *a2)
{
  if (!a1) {
    png_error(0, a2);
  }
  png_format_buffer(a1, (uint64_t)v3, (uint64_t)a2);
  png_error(a1, v3);
}

uint64_t png_app_warning(uint64_t a1, char *a2)
{
  if ((*(unsigned char *)(a1 + 298) & 0x20) == 0) {
    png_error(a1, a2);
  }
  return png_warning(a1, a2);
}

uint64_t png_app_error(uint64_t a1, char *a2)
{
  if ((*(unsigned char *)(a1 + 298) & 0x40) == 0) {
    png_error(a1, a2);
  }
  return png_warning(a1, a2);
}

uint64_t png_format_buffer(uint64_t result, uint64_t a2, uint64_t a3)
{
  LODWORD(v3) = 0;
  unsigned int v4 = *(_DWORD *)(result + 528);
  for (int i = 24; i != -8; i -= 8)
  {
    unsigned int v6 = v4 >> i;
    int v7 = (v4 >> i);
    unsigned int v8 = v7 - 123;
    unsigned int v9 = v7 - 91;
    uint64_t v10 = (int)v3;
    if (v8 >= 0xFFFFFFC6 && v9 > 5)
    {
      *(unsigned char *)(a2 + (int)v3) = v6;
    }
    else
    {
      unint64_t v12 = (unsigned char *)(a2 + (int)v3);
      unsigned char *v12 = 91;
      v12[1] = png_digit[v6 >> 4];
      LODWORD(v3) = v3 + 3;
      v12[2] = png_digit[v6 & 0xF];
      *(unsigned char *)(a2 + v10 + 3) = 93;
    }
    uint64_t v13 = (int)v3;
    uint64_t v3 = (int)v3 + 1;
  }
  if (a3)
  {
    uint64_t v14 = 0;
    *(unsigned char *)(a2 + v3) = 58;
    int v15 = v13 + 3;
    *(unsigned char *)(v13 + a2 + 2) = 32;
    LODWORD(v3) = v13 + 198;
    while (*(unsigned char *)(a3 + v14))
    {
      *(unsigned char *)(a2 + v15 + v14) = *(unsigned char *)(a3 + v14);
      if (++v14 == 195) {
        goto LABEL_15;
      }
    }
    LODWORD(v3) = v15 + v14;
  }
LABEL_15:
  *(unsigned char *)(a2 + (int)v3) = 0;
  return result;
}

uint64_t png_chunk_benign_error(uint64_t a1, const char *a2)
{
  if ((*(unsigned char *)(a1 + 298) & 0x10) == 0) {
    png_chunk_error(a1, a2);
  }
  return png_chunk_warning(a1, a2);
}

uint64_t png_chunk_report(uint64_t a1, char *a2, int a3)
{
  if ((*(unsigned char *)(a1 + 293) & 0x80) != 0)
  {
    if (a3 > 1) {
      return png_chunk_benign_error(a1, a2);
    }
    else {
      return png_chunk_warning(a1, a2);
    }
  }
  else if (a3 <= 0)
  {
    return png_app_warning(a1, a2);
  }
  else
  {
    return png_app_error(a1, a2);
  }
}

void png_free_jmpbuf(void *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (a1)
  {
    int v2 = (void *)a1[25];
    if (v2)
    {
      if (v2 != a1 && a1[26] != 0)
      {
        memset(v4, 0, sizeof(v4));
        if (!setjmp((int *)v4))
        {
          a1[25] = v4;
          a1[26] = 0;
          a1[24] = MEMORY[0x263EF8948];
          png_free((uint64_t)a1, v2);
        }
      }
    }
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
}

void png_longjmp(uint64_t a1)
{
  if (a1)
  {
    double v1 = *(void (**)(void))(a1 + 192);
    if (v1)
    {
      if (*(void *)(a1 + 200)) {
        v1();
      }
    }
  }
  abort();
}

void *png_set_error_fn(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result[28] = a4;
    result[29] = a2;
    result[27] = a3;
  }
  return result;
}

uint64_t png_get_IHDR(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, int *a7, _DWORD *a8, _DWORD *a9)
{
  uint64_t v9 = 0;
  if (a1 && a2)
  {
    if (a3) {
      *a3 = *(_DWORD *)a2;
    }
    if (a4) {
      *a4 = *(_DWORD *)(a2 + 4);
    }
    if (a5) {
      *a5 = *(unsigned __int8 *)(a2 + 36);
    }
    if (a6) {
      *a6 = *(unsigned __int8 *)(a2 + 37);
    }
    if (a8) {
      *a8 = *(unsigned __int8 *)(a2 + 38);
    }
    if (a9) {
      *a9 = *(unsigned __int8 *)(a2 + 39);
    }
    int v10 = *(unsigned __int8 *)(a2 + 40);
    if (a7) {
      *a7 = v10;
    }
    png_check_IHDR(a1, *(_DWORD *)a2, *(_DWORD *)(a2 + 4), *(unsigned __int8 *)(a2 + 36), *(unsigned __int8 *)(a2 + 37), v10, *(unsigned __int8 *)(a2 + 38), *(unsigned __int8 *)(a2 + 39));
    return 1;
  }
  return v9;
}

void png_destroy_png_struct(void *__src)
{
  v2[157] = *MEMORY[0x263EF8340];
  if (__src)
  {
    memcpy(v2, __src, 0x4E8uLL);
    bzero(__src, 0x4E8uLL);
    if (v2[126]) {
      ((void (*)(void *, void *))v2[126])(v2, __src);
    }
    else {
      free(__src);
    }
    png_free_jmpbuf(v2);
  }
}

void png_free(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    int v2 = *(void (**)(void))(a1 + 1008);
    if (v2) {
      v2();
    }
    else {
      free(a2);
    }
  }
}

void *png_calloc(void *a1, size_t a2)
{
  uint64_t v3 = png_malloc(a1, a2);
  unsigned int v4 = v3;
  if (v3) {
    bzero(v3, a2);
  }
  return v4;
}

void *png_malloc(void *result, size_t __size)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    if (!__size) {
      goto LABEL_7;
    }
    uint64_t v3 = (uint64_t (*)(void *))result[125];
    if (v3)
    {
      uint64_t result = (void *)v3(result);
      if (result) {
        return result;
      }
LABEL_7:
      png_error(v2, "Out of memory");
    }
    uint64_t result = malloc(__size);
    if (!result) {
      goto LABEL_7;
    }
  }
  return result;
}

void *png_malloc_base(uint64_t a1, size_t __size)
{
  if (!__size) {
    return 0;
  }
  if (a1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(a1 + 1000);
    if (v2) {
      return (void *)v2();
    }
  }
  return malloc(__size);
}

void *png_malloc_array(uint64_t a1, int a2, unint64_t a3)
{
  if (a2 < 1 || !a3) {
    png_error(a1, "internal error: array alloc");
  }
  return png_malloc_array_checked(a1, a2, a3);
}

void *png_malloc_array_checked(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (!is_mul_ok(a3, a2)) {
    return 0;
  }
  size_t v4 = a2 * a3;
  if (!(v3 * a3)) {
    return 0;
  }
  if (a1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(a1 + 1000);
    if (v5) {
      return (void *)v5();
    }
  }
  return malloc(v4);
}

char *png_realloc_array(uint64_t a1, const void *a2, unsigned int a3, unsigned int a4, unint64_t a5)
{
  if ((a3 & 0x80000000) != 0 || (int)a4 < 1 || !a5 || !a2 && a3) {
    png_error(a1, "internal error: array realloc");
  }
  if ((a3 ^ 0x7FFFFFFF) < a4) {
    return 0;
  }
  int v10 = (char *)png_malloc_array_checked(a1, a4 + a3, a5);
  uint64_t v9 = v10;
  if (v10)
  {
    if (a3)
    {
      size_t v11 = a3 * a5;
      memcpy(v10, a2, v11);
    }
    else
    {
      size_t v11 = 0;
    }
    bzero(&v9[v11], a4 * a5);
  }
  return v9;
}

void *png_malloc_warn(void *result, size_t __size)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    if (!__size) {
      goto LABEL_5;
    }
    uint64_t v3 = (uint64_t (*)(void *))result[125];
    if (v3)
    {
      uint64_t result = (void *)v3(result);
      if (result) {
        return result;
      }
      goto LABEL_5;
    }
    uint64_t result = malloc(__size);
    if (!result)
    {
LABEL_5:
      png_warning(v2, "Out of memory");
      return 0;
    }
  }
  return result;
}

void *png_set_mem_fn(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    result[124] = a2;
    result[125] = a3;
    result[126] = a4;
  }
  return result;
}

void CoreML::validate<(MLModelType)300>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    size_t v4 = *(uint64_t **)(a1 + 16);
  }
  else {
    size_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::validateRegressorInterface((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&v22);
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v22);
  if (!v5)
  {
    *(void *)a2 = v22;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    uint64_t v11 = v24;
LABEL_25:
    *(void *)(a2 + 24) = v11;
    return;
  }
  if (*((int *)v4 + 6) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      int v7 = operator new(0xCuLL);
      int v20 = v7 + 3;
      int v21 = v7 + 3;
      *(void *)int v7 = 0x500000002;
      v7[2] = 1;
      int v19 = v7;
      CoreML::validateSchemaTypes((int **)&v19, *(void *)(v4[4] + 8 * v6 + 8), (CoreML::Result *)&v14);
      uint64_t v22 = v14;
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v15;
      uint64_t v24 = v16;
      HIBYTE(v16) = 0;
      LOBYTE(v15) = 0;
      if (v19)
      {
        int v20 = v19;
        operator delete(v19);
      }
      BOOL v5 = CoreML::Result::good((CoreML::Result *)&v22);
      if (!v5) {
        goto LABEL_24;
      }
    }
    while (++v6 < *((int *)v4 + 6));
  }
  if (*((int *)v4 + 12) >= 1)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = operator new(4uLL);
      int v19 = v9;
      *uint64_t v9 = 2;
      int v20 = v9 + 1;
      int v21 = v9 + 1;
      CoreML::validateSchemaTypes((int **)&v19, *(void *)(v4[7] + 8 * v8 + 8), (CoreML::Result *)&v14);
      uint64_t v22 = v14;
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v15;
      uint64_t v24 = v16;
      HIBYTE(v16) = 0;
      LOBYTE(v15) = 0;
      if (v19)
      {
        int v20 = v19;
        operator delete(v19);
      }
      BOOL v5 = CoreML::Result::good((CoreML::Result *)&v22);
      if (!v5) {
        break;
      }
      if (++v8 >= *((int *)v4 + 12)) {
        goto LABEL_21;
      }
    }
LABEL_24:
    *(void *)a2 = v22;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    uint64_t v11 = v24;
    goto LABEL_25;
  }
LABEL_21:
  if (*(_DWORD *)(a1 + 44) == 300) {
    int v10 = *(uint64_t **)(a1 + 32);
  }
  else {
    int v10 = CoreML::Specification::GLMRegressor::default_instance((CoreML::Specification::GLMRegressor *)v5);
  }
  CoreML::Specification::GLMRegressor::GLMRegressor((CoreML::Specification::GLMRegressor *)&v14, (const CoreML::Specification::GLMRegressor *)v10);
  if (v16 != v18)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "Weights and offsets must be the same size.");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_35:
    if (SHIBYTE(v21) < 0) {
      operator delete(v19);
    }
    goto LABEL_37;
  }
  if ((int)v16 >= 2)
  {
    uint64_t v12 = v17 + 16;
    uint64_t v13 = v16 - 1;
    while (*(_DWORD *)(*(void *)v12 + 16) == *(_DWORD *)(*(void *)(v17 + 8) + 16))
    {
      v12 += 8;
      if (!--v13) {
        goto LABEL_33;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v19, "All weight coefficients must be the same size.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_35;
  }
LABEL_33:
  CoreML::Result::Result((CoreML::Result *)a2);
LABEL_37:
  CoreML::Specification::GLMRegressor::~GLMRegressor((CoreML::Specification::GLMRegressor *)&v14);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2242D7DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  CoreML::Specification::GLMRegressor::~GLMRegressor((CoreML::Specification::GLMRegressor *)&a9);
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)400>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    size_t v4 = *(const CoreML::Specification::ModelDescription **)(a1 + 16);
  }
  else {
    size_t v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  BOOL v5 = (CoreML::Specification::GLMClassifier *)CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v30, v4);
  if (*(_DWORD *)(a1 + 44) == 400) {
    uint64_t v6 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v6 = CoreML::Specification::GLMClassifier::default_instance(v5);
  }
  CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::GLMClassifier>(a1, (uint64_t)v6, 0, 0, (uint64_t)&v27);
  if (!CoreML::Result::good((CoreML::Result *)&v27))
  {
    *(void *)a2 = v27;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    uint64_t v9 = v29;
LABEL_15:
    *(void *)(a2 + 24) = v9;
    goto LABEL_16;
  }
  CoreML::validateDescriptionsAreAllVectorizableTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v31, (uint64_t)&v19);
  uint64_t v27 = v19;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)std::string __p = v20;
  uint64_t v29 = v21;
  BOOL v7 = CoreML::Result::good((CoreML::Result *)&v27);
  if (!v7)
  {
    *(void *)a2 = v27;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)__p;
    uint64_t v9 = v29;
    goto LABEL_15;
  }
  if (*(_DWORD *)(a1 + 44) == 400) {
    uint64_t v8 = *(uint64_t **)(a1 + 32);
  }
  else {
    uint64_t v8 = CoreML::Specification::GLMClassifier::default_instance((CoreML::Specification::GLMClassifier *)v7);
  }
  CoreML::Specification::GLMClassifier::GLMClassifier((CoreML::Specification::GLMClassifier *)&v19, (const CoreML::Specification::GLMClassifier *)v8);
  if (v23 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "Invalid post evaluation transform");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
  if (v24 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "Invalid class encoding");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
  if (!v21)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "The number of DoubleArrays in weights must be greater than zero");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
  if (v21 != v22)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "The number of DoubleArrays in weights must match number of offsets");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
  if (v26)
  {
    if (v26 == 100)
    {
      int v10 = *(_DWORD *)(v25 + 24);
    }
    else if (v26 == 101)
    {
      int v10 = *(_DWORD *)(v25 + 16);
    }
    else
    {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = -1;
  }
  if (!v24)
  {
    if (v10 != -1 && v21 != v10 - 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "With ReferenceClass encoding the number of DoubleArrays in weights must be one less than number of classes");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_30;
    }
    goto LABEL_46;
  }
  if (v10 == -1) {
    goto LABEL_49;
  }
  if (v10 != 2)
  {
    if (v21 != v10)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "With OneVsRest encoding the number of DoubleArrays in weights must equal the number of classes");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_30;
    }
LABEL_46:
    if (v10 < 3 || v23 != 1) {
      goto LABEL_49;
    }
    std::string::basic_string[abi:ne180100]<0>(&v16, "Probit post evaluation transform is only supported for binary classification");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_30:
    if (SHIBYTE(v18) < 0) {
      operator delete(v16);
    }
    goto LABEL_32;
  }
  if (v21 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "When using OneVsRest encoding for only two classes, the number of DoubleArrays in weights must be one");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_30;
  }
LABEL_49:
  _tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::RepeatedPtrField((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v16, (uint64_t)&v20 + 8);
  int v11 = *(_DWORD *)(*(void *)(v18 + 8) + 16);
  if (!v11)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "Weight DoubleArrays must have nonzero length");
    CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_58:
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    goto LABEL_60;
  }
  if (v17 >= 2)
  {
    uint64_t v12 = v18 + 16;
    uint64_t v13 = v17 - 1;
    while (v11 == *(_DWORD *)(*(void *)v12 + 16))
    {
      v12 += 8;
      if (!--v13) {
        goto LABEL_54;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v14, "Weight DoubleArrays must have the same length");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_58;
  }
LABEL_54:
  CoreML::Result::Result((CoreML::Result *)a2);
LABEL_60:
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(&v16);
LABEL_32:
  CoreML::Specification::GLMClassifier::~GLMClassifier((CoreML::Specification::GLMClassifier *)&v19);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
LABEL_16:
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)v30);
}

void sub_2242D820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(&a15);
  CoreML::Specification::GLMClassifier::~GLMClassifier((CoreML::Specification::GLMClassifier *)&a21);
  if (a38 < 0) {
    operator delete(a33);
  }
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)(v38 - 152));
  _Unwind_Resume(a1);
}

void CoreML::validateClassifierInterface<CoreML::Specification::Model,CoreML::Specification::GLMClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v7 = *(_DWORD *)(a2 + 84);
  if (!v7)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier models must provide class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
LABEL_15:
    if (*(void *)(a1 + 16)) {
      uint64_t v9 = *(CoreML **)(a1 + 16);
    }
    else {
      uint64_t v9 = (CoreML *)&CoreML::Specification::_ModelDescription_default_instance_;
    }
    CoreML::validateFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (uint64_t)&__p);
    if (!CoreML::Result::good((CoreML::Result *)&__p))
    {
      *(void *)a5 = __p;
      *(_OWORD *)(a5 + 8) = v12;
      *(void *)(a5 + 24) = v13;
      return;
    }
    CoreML::validateClassifierFeatureDescriptions(v9, (const CoreML::Specification::ModelDescription *)a4, a5);
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      return;
    }
    int v10 = (void *)v12;
    goto LABEL_27;
  }
  if (v7 == 100)
  {
    if ((a3 & 1) == 0 && !*(_DWORD *)(*(void *)(a2 + 72) + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have String class labels must provide labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    if (*((_DWORD *)CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)a1) + 4))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with String class labels must provide exclusively String class labels.");
      CoreML::Result::Result((_DWORD *)a5, 13);
      goto LABEL_25;
    }
    goto LABEL_14;
  }
  if (v7 != 101)
  {
LABEL_14:
    a4 = 0;
    goto LABEL_15;
  }
  if ((a3 & 1) == 0 && !*(_DWORD *)(*(void *)(a2 + 72) + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared to have Int64 class labels must provide labels.");
    CoreML::Result::Result((_DWORD *)a5, 13);
    goto LABEL_25;
  }
  if (!*((_DWORD *)CoreML::Specification::StringVector::default_instance((CoreML::Specification::StringVector *)a1) + 6))
  {
    a4 = 1;
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Classifier declared with Int64 class labels must provide exclusively Int64 class labels.");
  CoreML::Result::Result((_DWORD *)a5, 13);
LABEL_25:
  if ((SHIBYTE(v12) & 0x80000000) == 0) {
    return;
  }
  int v10 = __p;
LABEL_27:
  operator delete(v10);
}

void sub_2242D84A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Result *CoreML::validateDescriptionsAreAllVectorizableTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = CoreML::Result::Result((CoreML::Result *)a2);
  if (*(int *)(a1 + 8) >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (void **)(a2 + 8);
    do
    {
      int v7 = operator new(0xCuLL);
      uint64_t v9 = v7 + 3;
      int v10 = (char *)(v7 + 3);
      *(void *)int v7 = 0x100000002;
      v7[2] = 5;
      std::string __p = v7;
      CoreML::validateSchemaTypes((int **)&__p, *(void *)(*(void *)(a1 + 16) + 8 * v5 + 8), (CoreML::Result *)&v11);
      *(void *)a2 = v11;
      if (*(char *)(a2 + 31) < 0) {
        operator delete(*v6);
      }
      *(_OWORD *)uint64_t v6 = v12;
      *(void *)(a2 + 24) = v13;
      HIBYTE(v13) = 0;
      LOBYTE(v12) = 0;
      if (__p)
      {
        uint64_t v9 = __p;
        operator delete(__p);
      }
      uint64_t result = (CoreML::Result *)CoreML::Result::good((CoreML::Result *)a2);
      if ((result & 1) == 0) {
        break;
      }
      ++v5;
    }
    while (v5 < *(int *)(a1 + 8));
  }
  return result;
}

void sub_2242D85E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (*(char *)(v11 + 31) < 0) {
    operator delete(*v12);
  }
  _Unwind_Resume(exception_object);
}

_tc_google::protobuf::internal::RepeatedPtrFieldBase *_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::RepeatedPtrField(_tc_google::protobuf::internal::RepeatedPtrFieldBase *this, uint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    size_t v4 = (CoreML::Specification::GLMRegressor_DoubleArray **)(*(void *)(a2 + 16) + 8);
    uint64_t v5 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend(this, *(_DWORD *)(a2 + 8));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>((unint64_t *)this, (CoreML::Specification::GLMRegressor_DoubleArray **)v5, v4, v3, **((_DWORD **)this + 2) - *((_DWORD *)this + 2));
    signed int v6 = *((_DWORD *)this + 2) + v3;
    *((_DWORD *)this + 2) = v6;
    int v7 = (signed int *)*((void *)this + 2);
    if (*v7 < v6) {
      *int v7 = v6;
    }
  }
  return this;
}

unint64_t *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMClassifier_DoubleArray>::TypeHandler>(unint64_t *result, CoreML::Specification::GLMRegressor_DoubleArray **a2, CoreML::Specification::GLMRegressor_DoubleArray **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    long long v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      char v15 = *v12++;
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    uint64_t v19 = &a3[a5];
    long long v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::GLMClassifier_DoubleArray::GLMClassifier_DoubleArray(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::GLMClassifier_DoubleArray>);
      uint64_t result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::GLMRegressor_DoubleArray>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_2242D87C0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

void *png_create_read_struct(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return png_create_read_struct_2(a1, a2, a3, a4, 0, 0, 0);
}

void *png_create_read_struct_2(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  png_struct = png_create_png_struct(a1, a2, a3, a4, a5, a6, a7);
  uint64_t v8 = png_struct;
  if (png_struct)
  {
    *((_DWORD *)png_struct + 73) = 0x8000;
    *((_DWORD *)png_struct + 282) = 0x2000;
    *((_DWORD *)png_struct + 74) |= 0x300000u;
    png_set_read_fn(png_struct, 0, 0);
  }
  return v8;
}

void png_read_info(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return;
  }
  png_read_sig(a1, a2);
  uint64_t chunk_header = png_read_chunk_header(a1);
  for (int i = *(_DWORD *)(a1 + 528); i != 1229209940; int i = *(_DWORD *)(a1 + 528))
  {
    int v8 = *(_DWORD *)(a1 + 292);
    if ((v8 & 4) != 0) {
      *(_DWORD *)(a1 + 292) = v8 | 0x2008;
    }
    if (i == 1229278788)
    {
      png_handle_IEND(a1, a2, chunk_header);
    }
    else if (i == 1229472850)
    {
      png_handle_IHDR(a1, a2, chunk_header);
    }
    else
    {
      int v9 = png_chunk_unknown_handling(a1, i);
      if (v9)
      {
        png_handle_unknown(a1, a2, chunk_header, v9);
        if (i == 1347179589) {
          *(_DWORD *)(a1 + 292) |= 2u;
        }
        goto LABEL_22;
      }
      if (i <= 1883455819)
      {
        if (i <= 1732332864)
        {
          if (i > 1665684044)
          {
            if (i == 1665684045)
            {
              png_handle_cHRM(a1, a2, chunk_header);
            }
            else
            {
              if (i != 1700284774)
              {
LABEL_69:
                png_handle_unknown(a1, a2, chunk_header, 0);
                goto LABEL_22;
              }
              png_handle_eXIf(a1, a2, chunk_header);
            }
          }
          else if (i == 1347179589)
          {
            png_handle_PLTE(a1, a2, chunk_header);
          }
          else
          {
            if (i != 1649100612) {
              goto LABEL_69;
            }
            png_handle_bKGD(a1, a2, chunk_header);
          }
        }
        else if (i <= 1766015823)
        {
          if (i == 1732332865)
          {
            png_handle_gAMA(a1, a2, chunk_header);
          }
          else
          {
            if (i != 1749635924) {
              goto LABEL_69;
            }
            png_handle_hIST(a1, a2, chunk_header);
          }
        }
        else
        {
          switch(i)
          {
            case 1766015824:
              png_handle_iCCP(a1, a2, chunk_header);
              break;
            case 1767135348:
              png_handle_iTXt(a1, a2, chunk_header);
              break;
            case 1866876531:
              png_handle_oFFs(a1, a2, chunk_header);
              break;
            default:
              goto LABEL_69;
          }
        }
      }
      else if (i > 1934772033)
      {
        if (i <= 1950960964)
        {
          if (i == 1934772034)
          {
            png_handle_sRGB(a1, a2, chunk_header);
          }
          else
          {
            if (i != 1950701684) {
              goto LABEL_69;
            }
            png_handle_tEXt(a1, a2, chunk_header);
          }
        }
        else
        {
          switch(i)
          {
            case 1950960965:
              png_handle_tIME(a1, a2, chunk_header);
              break;
            case 1951551059:
              png_handle_tRNS(a1, a2, chunk_header);
              break;
            case 2052348020:
              png_handle_zTXt(a1, a2, chunk_header);
              break;
            default:
              goto LABEL_69;
          }
        }
      }
      else if (i <= 1933723987)
      {
        if (i == 1883455820)
        {
          png_handle_pCAL(a1, a2, chunk_header);
        }
        else
        {
          if (i != 1883789683) {
            goto LABEL_69;
          }
          png_handle_pHYs(a1, a2, chunk_header);
        }
      }
      else
      {
        switch(i)
        {
          case 1933723988:
            png_handle_sBIT(a1, a2, chunk_header);
            break;
          case 1933787468:
            png_handle_sCAL(a1, a2, chunk_header);
            break;
          case 1934642260:
            png_handle_sPLT(a1, a2, chunk_header);
            break;
          default:
            goto LABEL_69;
        }
      }
    }
LABEL_22:
    uint64_t chunk_header = png_read_chunk_header(a1);
  }
  int v6 = *(_DWORD *)(a1 + 292);
  if ((v6 & 1) == 0)
  {
    uint64_t v10 = "Missing IHDR before IDAT";
    goto LABEL_72;
  }
  if ((v6 & 2) == 0 && *(unsigned char *)(a1 + 607) == 3)
  {
    uint64_t v10 = "Missing PLTE before IDAT";
LABEL_72:
    png_chunk_error(a1, v10);
  }
  if ((v6 & 8) != 0)
  {
    png_chunk_benign_error(a1, "Too many IDATs found");
    int v6 = *(_DWORD *)(a1 + 292);
  }
  *(_DWORD *)(a1 + 292) = v6 | 4;
  int v7 = png_chunk_unknown_handling(a1, 1229209940);
  if (v7)
  {
    png_handle_unknown(a1, a2, chunk_header, v7);
    LODWORD(chunk_header) = 0;
  }
  *(_DWORD *)(a1 + 576) = chunk_header;
}

void png_read_row(uint64_t a1, char *a2, char *__dst)
{
  if (a1)
  {
    if ((*(unsigned char *)(a1 + 296) & 0x40) == 0) {
      png_read_start_row(a1);
    }
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    LODWORD(v32) = *(_DWORD *)(a1 + 520);
    unint64_t v6 = *(unsigned __int8 *)(a1 + 610);
    unint64_t v7 = (v6 * v32 + 7) >> 3;
    if (v6 >= 8) {
      unint64_t v7 = (v6 >> 3) * (unint64_t)v32;
    }
    unsigned __int16 v8 = *(_WORD *)(a1 + 607);
    unint64_t v33 = v7;
    uint64_t v34 = v8;
    BYTE2(v34) = *(unsigned char *)(a1 + 611);
    BYTE3(v34) = v6;
    if (!*(unsigned char *)(a1 + 604) || (*(unsigned char *)(a1 + 300) & 2) == 0)
    {
LABEL_8:
      if ((*(unsigned char *)(a1 + 292) & 4) == 0)
      {
        uint64_t v25 = "Invalid attempt to read row data";
        goto LABEL_83;
      }
      **(unsigned char **)(a1 + 544) = -1;
      size_t v9 = v33 + 1;
      png_read_IDAT_data(a1, *(void *)(a1 + 544), v33 + 1);
      uint64_t v10 = *(unsigned char **)(a1 + 544);
      unsigned int v11 = *v10;
      if (*v10)
      {
        if (v11 > 4)
        {
          uint64_t v25 = "bad adaptive filter value";
          goto LABEL_83;
        }
        png_read_filter_row(a1, (uint64_t)&v32, (uint64_t)(v10 + 1), *(void *)(a1 + 536) + 1, v11);
        uint64_t v10 = *(unsigned char **)(a1 + 544);
        size_t v9 = v33 + 1;
      }
      memcpy(*(void **)(a1 + 536), v10, v9);
      if ((*(unsigned char *)(a1 + 984) & 4) != 0 && *(unsigned char *)(a1 + 988) == 64 && (v34 & 2) != 0)
      {
        uint64_t v13 = *(void *)(a1 + 544);
        int v14 = v32;
        if (BYTE1(v34) == 16)
        {
          if (v34 == 2)
          {
            uint64_t v17 = 6;
          }
          else
          {
            if (v34 != 6) {
              goto LABEL_58;
            }
            uint64_t v17 = 8;
          }
          if (v32)
          {
            long long v20 = (unsigned __int16 *)(v13 + 3);
            do
            {
              unsigned int v21 = *v20;
              unsigned int v22 = __rev16(v21) + (bswap32(*(v20 - 1)) >> 16);
              unsigned int v23 = __rev16(v20[1]) + (bswap32(v21) >> 16);
              *((unsigned char *)v20 - 2) = BYTE1(v22);
              *((unsigned char *)v20 - 1) = v22;
              *((unsigned char *)v20 + 2) = BYTE1(v23);
              *((unsigned char *)v20 + 3) = v23;
              long long v20 = (unsigned __int16 *)((char *)v20 + v17);
              --v14;
            }
            while (v14);
          }
          goto LABEL_58;
        }
        if (BYTE1(v34) == 8)
        {
          if (v34 == 2)
          {
            uint64_t v15 = 3;
LABEL_50:
            if (v32)
            {
              uint64_t v18 = (unsigned char *)(v13 + 3);
              do
              {
                char v19 = *(v18 - 1);
                *(v18 - 2) += v19;
                *v18 += v19;
                v18 += v15;
                --v14;
              }
              while (v14);
            }
            goto LABEL_58;
          }
          if (v34 == 6)
          {
            uint64_t v15 = 4;
            goto LABEL_50;
          }
        }
      }
LABEL_58:
      if (*(_DWORD *)(a1 + 300)) {
        png_do_read_transformations(a1, (unsigned int *)&v32, v12);
      }
      unsigned int v24 = BYTE3(v34);
      if (*(unsigned char *)(a1 + 615))
      {
        if (*(unsigned __int8 *)(a1 + 615) != BYTE3(v34))
        {
          uint64_t v25 = "internal sequential row size calculation error";
          goto LABEL_83;
        }
LABEL_64:
        if (*(unsigned char *)(a1 + 604) && (int v26 = *(_DWORD *)(a1 + 300), (v26 & 2) != 0))
        {
          unsigned int v30 = *(unsigned __int8 *)(a1 + 605);
          if (v30 <= 5) {
            png_do_read_interlace((uint64_t)&v32, *(void *)(a1 + 544) + 1, v30, v26);
          }
          if (__dst) {
            png_combine_row(a1, __dst, 1);
          }
          if (!a2) {
            goto LABEL_77;
          }
          uint64_t v27 = a1;
          int v28 = a2;
          int v29 = 0;
        }
        else
        {
          if (a2) {
            png_combine_row(a1, a2, -1);
          }
          if (!__dst) {
            goto LABEL_77;
          }
          uint64_t v27 = a1;
          int v28 = __dst;
          int v29 = -1;
        }
        png_combine_row(v27, v28, v29);
LABEL_77:
        png_read_finish_row(a1);
        uint64_t v31 = *(void (**)(uint64_t, void, void))(a1 + 760);
        if (v31) {
          v31(a1, *(unsigned int *)(a1 + 524), *(unsigned __int8 *)(a1 + 605));
        }
        return;
      }
      *(unsigned char *)(a1 + 615) = BYTE3(v34);
      if (v24 <= *(unsigned __int8 *)(a1 + 614)) {
        goto LABEL_64;
      }
      uint64_t v25 = "sequential row overflow";
LABEL_83:
      png_error(a1, v25);
    }
    int v16 = *(_DWORD *)(a1 + 524);
    switch(*(unsigned char *)(a1 + 605))
    {
      case 0:
        if ((v16 & 7) == 0) {
          goto LABEL_8;
        }
        goto LABEL_41;
      case 1:
        if ((v16 & 7) != 0 || *(_DWORD *)(a1 + 496) <= 4u) {
          goto LABEL_41;
        }
        goto LABEL_8;
      case 2:
        if ((*(_DWORD *)(a1 + 524) & 7) == 4) {
          goto LABEL_8;
        }
        if (!__dst || (v16 & 4) == 0) {
          goto LABEL_43;
        }
        goto LABEL_42;
      case 3:
        if ((v16 & 3) != 0 || *(_DWORD *)(a1 + 496) <= 2u) {
          goto LABEL_41;
        }
        goto LABEL_8;
      case 4:
        if ((*(_DWORD *)(a1 + 524) & 3) == 2) {
          goto LABEL_8;
        }
        if (!__dst || (v16 & 2) == 0) {
          goto LABEL_43;
        }
        goto LABEL_42;
      case 5:
        if ((v16 & 1) == 0 && *(_DWORD *)(a1 + 496) > 1u) {
          goto LABEL_8;
        }
LABEL_41:
        if (__dst) {
LABEL_42:
        }
          png_combine_row(a1, __dst, 1);
LABEL_43:
        png_read_finish_row(a1);
        break;
      default:
        if ((v16 & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_8;
    }
  }
}

void png_read_end(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (!png_chunk_unknown_handling(a1, 1229209940)) {
      png_read_finish_IDAT(a1);
    }
    if (*(unsigned char *)(a1 + 607) == 3 && *(_DWORD *)(a1 + 596) > (int)*(unsigned __int16 *)(a1 + 592)) {
      png_benign_error(a1, "Read palette index exceeding num_palette");
    }
    do
    {
      uint64_t chunk_header = png_read_chunk_header(a1);
      int v5 = *(_DWORD *)(a1 + 528);
      if (v5 == 1229209940) {
        goto LABEL_11;
      }
      *(_DWORD *)(a1 + 292) |= 0x2000u;
      if (v5 == 1229472850)
      {
        png_handle_IHDR(a1, a2, chunk_header);
        continue;
      }
      if (v5 != 1229278788)
      {
LABEL_11:
        if (!a2) {
          goto LABEL_70;
        }
        int v6 = png_chunk_unknown_handling(a1, v5);
        if (v6)
        {
          int v7 = v6;
          if (v5 != 1229209940)
          {
            png_handle_unknown(a1, a2, chunk_header, v6);
            if (v5 == 1347179589) {
              *(_DWORD *)(a1 + 292) |= 2u;
            }
            continue;
          }
          if (chunk_header && (*(unsigned char *)(a1 + 296) & 8) == 0 || (*(unsigned char *)(a1 + 293) & 0x20) != 0) {
            png_benign_error(a1, ".Too many IDATs found");
          }
          uint64_t v8 = a1;
          uint64_t v9 = a2;
          size_t v10 = chunk_header;
          int v11 = v7;
        }
        else
        {
          if (v5 > 1883455819)
          {
            if (v5 > 1934772033)
            {
              if (v5 <= 1950960964)
              {
                if (v5 == 1934772034)
                {
                  png_handle_sRGB(a1, a2, chunk_header);
                  continue;
                }
                if (v5 == 1950701684)
                {
                  png_handle_tEXt(a1, a2, chunk_header);
                  continue;
                }
              }
              else
              {
                switch(v5)
                {
                  case 1950960965:
                    png_handle_tIME(a1, a2, chunk_header);
                    continue;
                  case 1951551059:
                    png_handle_tRNS(a1, a2, chunk_header);
                    continue;
                  case 2052348020:
                    png_handle_zTXt(a1, a2, chunk_header);
                    continue;
                }
              }
            }
            else if (v5 <= 1933723987)
            {
              if (v5 == 1883455820)
              {
                png_handle_pCAL(a1, a2, chunk_header);
                continue;
              }
              if (v5 == 1883789683)
              {
                png_handle_pHYs(a1, a2, chunk_header);
                continue;
              }
            }
            else
            {
              switch(v5)
              {
                case 1933723988:
                  png_handle_sBIT(a1, a2, chunk_header);
                  continue;
                case 1933787468:
                  png_handle_sCAL(a1, a2, chunk_header);
                  continue;
                case 1934642260:
                  png_handle_sPLT(a1, a2, chunk_header);
                  continue;
              }
            }
          }
          else if (v5 > 1732332864)
          {
            if (v5 <= 1766015823)
            {
              if (v5 == 1732332865)
              {
                png_handle_gAMA(a1, a2, chunk_header);
                continue;
              }
              if (v5 == 1749635924)
              {
                png_handle_hIST(a1, a2, chunk_header);
                continue;
              }
            }
            else
            {
              switch(v5)
              {
                case 1766015824:
                  png_handle_iCCP(a1, a2, chunk_header);
                  continue;
                case 1767135348:
                  png_handle_iTXt(a1, a2, chunk_header);
                  continue;
                case 1866876531:
                  png_handle_oFFs(a1, a2, chunk_header);
                  continue;
              }
            }
          }
          else if (v5 <= 1649100611)
          {
            if (v5 == 1229209940)
            {
              if (chunk_header && (*(unsigned char *)(a1 + 296) & 8) == 0 || (*(unsigned char *)(a1 + 293) & 0x20) != 0) {
                png_benign_error(a1, "..Too many IDATs found");
              }
LABEL_70:
              png_crc_finish(a1, chunk_header);
              continue;
            }
            if (v5 == 1347179589)
            {
              png_handle_PLTE(a1, a2, chunk_header);
              continue;
            }
          }
          else
          {
            switch(v5)
            {
              case 1649100612:
                png_handle_bKGD(a1, a2, chunk_header);
                continue;
              case 1665684045:
                png_handle_cHRM(a1, a2, chunk_header);
                continue;
              case 1700284774:
                png_handle_eXIf(a1, a2, chunk_header);
                continue;
            }
          }
          uint64_t v8 = a1;
          uint64_t v9 = a2;
          size_t v10 = chunk_header;
          int v11 = 0;
        }
        png_handle_unknown(v8, v9, v10, v11);
      }
      else
      {
        png_handle_IEND(a1, a2, chunk_header);
      }
    }
    while ((*(unsigned char *)(a1 + 292) & 0x10) == 0);
  }
}

void png_destroy_read_struct(uint64_t *a1, void **a2, void **a3)
{
  if (a1)
  {
    uint64_t v4 = *a1;
    if (*a1)
    {
      png_destroy_info_struct(*a1, a3);
      png_destroy_info_struct(v4, a2);
      *a1 = 0;
      png_destroy_gamma_table(v4);
      png_free(v4, *(void **)(v4 + 1016));
      *(void *)(v4 + 1016) = 0;
      png_free(v4, *(void **)(v4 + 1136));
      *(void *)(v4 + 1136) = 0;
      png_free(v4, *(void **)(v4 + 1112));
      *(void *)(v4 + 1112) = 0;
      png_free(v4, *(void **)(v4 + 880));
      *(void *)(v4 + 88CoreML::Specification::DictVectorizer::New(this, 0) = 0;
      png_free(v4, *(void **)(v4 + 888));
      *(void *)(v4 + 888) = 0;
      int v6 = *(_DWORD *)(v4 + 932);
      if ((v6 & 0x1000) != 0)
      {
        png_zfree(v4, *(void *)(v4 + 584));
        *(void *)(v4 + 584) = 0;
        int v6 = *(_DWORD *)(v4 + 932);
      }
      unsigned int v7 = v6 & 0xFFFFEFFF;
      *(_DWORD *)(v4 + 932) = v6 & 0xFFFFEFFF;
      if ((v6 & 0x2000) != 0)
      {
        png_free(v4, *(void **)(v4 + 736));
        *(void *)(v4 + 736) = 0;
        unsigned int v7 = *(_DWORD *)(v4 + 932);
      }
      *(_DWORD *)(v4 + 932) = v7 & 0xFFFFDFFF;
      inflateEnd((z_streamp)(v4 + 312));
      png_free(v4, *(void **)(v4 + 808));
      *(void *)(v4 + 808) = 0;
      png_free(v4, *(void **)(v4 + 1080));
      *(void *)(v4 + 108CoreML::Specification::DictVectorizer::New(this, 0) = 0;
      png_free(v4, *(void **)(v4 + 960));
      *(void *)(v4 + 96CoreML::Specification::DictVectorizer::New(this, 0) = 0;
      png_free(v4, *(void **)(v4 + 976));
      *(void *)(v4 + 976) = 0;
      png_destroy_png_struct((void *)v4);
    }
  }
}

uint64_t png_read_data(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 248);
  if (!v1) {
    png_error(a1, "Call to NULL read function");
  }
  return v1();
}

size_t png_default_read_data(size_t result, void *__ptr, size_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t result = fread(__ptr, 1uLL, a3, *(FILE **)(result + 256));
    if (result != a3) {
      png_error(v4, "Read Error");
    }
  }
  return result;
}

void *png_set_read_fn(void *result, uint64_t a2, size_t (*a3)(size_t result, void *__ptr, size_t a3))
{
  if (result)
  {
    unsigned int v3 = result;
    if (a3) {
      uint64_t v4 = a3;
    }
    else {
      uint64_t v4 = png_default_read_data;
    }
    result[31] = v4;
    result[32] = a2;
    if (result[30])
    {
      result[30] = 0;
      uint64_t result = (void *)png_warning((uint64_t)result, "Can't set both read_data_fn and write_data_fn in the same structure");
    }
    v3[81] = 0;
  }
  return result;
}

uint64_t png_set_scale_16(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return png_app_error(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x4000000u;
    }
  }
  return result;
}

uint64_t png_set_palette_to_rgb(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return png_app_error(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x2001000u;
    }
  }
  return result;
}

uint64_t png_set_expand_gray_1_2_4_to_8(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 296);
    if ((v1 & 0x40) != 0)
    {
      return png_app_error(result, "invalid after png_start_read_image or png_read_update_info");
    }
    else
    {
      *(_DWORD *)(result + 296) = v1 | 0x4000;
      *(_DWORD *)(result + 300) |= 0x1000u;
    }
  }
  return result;
}

void png_init_read_transformations(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 1176);
  int v3 = *(_DWORD *)(a1 + 668);
  if (v2)
  {
    if (v3)
    {
      int v88 = 0;
      if (png_muldiv(&v88, v2, v3, 100000))
      {
        BOOL v4 = png_gamma_significant(v88);
        *(_WORD *)(a1 + 1250) |= 1u;
        if (!v4) {
          goto LABEL_13;
        }
      }
      else
      {
        *(_WORD *)(a1 + 1250) |= 1u;
      }
      unsigned int v5 = *(_DWORD *)(a1 + 300) | 0x2000;
      goto LABEL_14;
    }
    *(_DWORD *)(a1 + 668) = png_reciprocal(*(_DWORD *)(a1 + 1176));
  }
  else if (v3)
  {
    *(_DWORD *)(a1 + 1176) = png_reciprocal(*(_DWORD *)(a1 + 668));
  }
  else
  {
    *(_DWORD *)(a1 + 1176) = 100000;
    *(_DWORD *)(a1 + 668) = 100000;
  }
  *(_WORD *)(a1 + 1250) |= 1u;
LABEL_13:
  unsigned int v5 = *(_DWORD *)(a1 + 300) & 0xFFFFDFFF;
LABEL_14:
  *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v5;
  if ((v5 & 0x40080) == 0x40000)
  {
    *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v5 & 0xFD7FFEFF;
    *(_DWORD *)(a1 + 296) &= ~0x2000u;
    *(_WORD *)(a1 + 60CoreML::Specification::DictVectorizer::New(this, 0) = 0;
  }
  BOOL v6 = png_gamma_significant(*(_DWORD *)(a1 + 668));
  unsigned int v7 = *(_DWORD *)(a1 + 300);
  if (!v6)
  {
    v7 &= ~0x800000u;
    *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v7;
    *(_DWORD *)(a1 + 296) &= ~0x2000u;
  }
  if ((v7 & 0x600000) != 0)
  {
    png_colorspace_set_rgb_coefficients(a1);
    unsigned int v7 = *(_DWORD *)(a1 + 300);
  }
  if ((v7 & 0x100) != 0)
  {
    if ((*(unsigned char *)(a1 + 607) & 2) == 0) {
      *(_DWORD *)(a1 + 292) |= 0x800u;
    }
  }
  else if ((~v7 & 0x4080) == 0)
  {
    int v8 = *(unsigned __int16 *)(a1 + 630);
    if (v8 == *(unsigned __int16 *)(a1 + 632) && v8 == *(unsigned __int16 *)(a1 + 634))
    {
      *(_DWORD *)(a1 + 292) |= 0x800u;
      *(_WORD *)(a1 + 636) = v8;
    }
  }
  int v9 = *(unsigned __int8 *)(a1 + 607);
  if (v9 == 3)
  {
    uint64_t v10 = *(unsigned __int16 *)(a1 + 600);
    if (*(_WORD *)(a1 + 600))
    {
      int v11 = 0;
      uint8x8_t v12 = *(unsigned __int8 **)(a1 + 736);
      uint64_t v13 = *(unsigned __int16 *)(a1 + 600);
      do
      {
        int v15 = *v12++;
        int v14 = v15;
        if (v15 != 255)
        {
          if (v14)
          {
            unsigned int v16 = v7;
            goto LABEL_49;
          }
          int v11 = 1;
        }
        --v13;
      }
      while (v13);
      unsigned int v16 = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 296) &= ~0x2000u;
      if (v11) {
        goto LABEL_49;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 296) &= ~0x2000u;
    }
    unsigned int v16 = v7 & 0xFF7FFE7F;
    *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v7 & 0xFF7FFE7F;
LABEL_49:
    if ((~v16 & 0x1100) == 0)
    {
      unsigned int v21 = (unsigned __int8 *)(*(void *)(a1 + 584) + 3 * *(unsigned __int8 *)(a1 + 628));
      *(_WORD *)(a1 + 63CoreML::Specification::DictVectorizer::New(this, 0) = *v21;
      *(_WORD *)(a1 + 632) = v21[1];
      *(_WORD *)(a1 + 634) = v21[2];
      if (v10)
      {
        if ((v16 & 0x2080000) == 0x80000)
        {
          unsigned int v22 = *(unsigned char **)(a1 + 736);
          do
          {
            *unsigned int v22 = ~*v22;
            ++v22;
            --v10;
          }
          while (v10);
          unsigned int v16 = *(_DWORD *)(a1 + 300);
        }
      }
    }
  }
  else
  {
    if ((v9 & 4) != 0)
    {
      unsigned int v16 = v7;
    }
    else
    {
      int v17 = *(unsigned __int16 *)(a1 + 600);
      unsigned int v16 = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v7 & 0xFF7FFFFF;
      *(_DWORD *)(a1 + 296) &= ~0x2000u;
      if (!v17)
      {
        unsigned int v16 = v7 & 0xFF7FFE7F;
        *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v7 & 0xFF7FFE7F;
      }
    }
    if ((v9 & 2) == 0 && (v16 & 0x1100) == 0x1100)
    {
      __int16 v18 = *(_WORD *)(a1 + 636);
      __int16 v19 = *(_WORD *)(a1 + 752);
      int v20 = *(unsigned __int8 *)(a1 + 608);
      switch(v20)
      {
        case 4:
          v18 *= 17;
          v19 *= 17;
          break;
        case 2:
          v18 *= 85;
          v19 *= 85;
          break;
        case 1:
          v18 *= 255;
          v19 *= 255;
          break;
      }
      *(_WORD *)(a1 + 634) = v18;
      *(_WORD *)(a1 + 632) = v18;
      *(_WORD *)(a1 + 63CoreML::Specification::DictVectorizer::New(this, 0) = v18;
      if ((v16 & 0x2000000) == 0)
      {
        *(_WORD *)(a1 + 75CoreML::Specification::DictVectorizer::New(this, 0) = v19;
        *(_WORD *)(a1 + 748) = v19;
        *(_WORD *)(a1 + 746) = v19;
      }
    }
  }
  if ((v16 & 0x380) == 0x280 && *(unsigned char *)(a1 + 608) != 16) {
    *(int16x4_t *)(a1 + 63CoreML::Specification::DictVectorizer::New(this, 0) = vaddhn_s32((int32x4_t)vmull_u16(*(uint16x4_t *)(a1 + 630), (uint16x4_t)0xFF00FF00FF00FFLL), vdupq_n_s32(0x807Fu));
  }
  if ((v16 & 0x4000400) != 0 && (v16 & 0x180) == 0x80 && *(unsigned char *)(a1 + 608) == 16) {
    *(int16x4_t *)(a1 + 63CoreML::Specification::DictVectorizer::New(this, 0) = vmul_s16(*(int16x4_t *)(a1 + 630), (int16x4_t)0x101010101010101);
  }
  *(_WORD *)(a1 + 646) = *(_WORD *)(a1 + 636);
  *(void *)(a1 + 638) = *(void *)(a1 + 628);
  if ((v16 & 0x2000) != 0) {
    goto LABEL_88;
  }
  if ((v16 & 0x600000) != 0)
  {
    if (png_gamma_significant(*(_DWORD *)(a1 + 1176)) || png_gamma_significant(*(_DWORD *)(a1 + 668))) {
      goto LABEL_88;
    }
    unsigned int v16 = *(_DWORD *)(a1 + 300);
  }
  if ((v16 & 0x80) != 0
    && (png_gamma_significant(*(_DWORD *)(a1 + 1176))
     || png_gamma_significant(*(_DWORD *)(a1 + 668))
     || *(unsigned char *)(a1 + 620) == 3 && png_gamma_significant(*(_DWORD *)(a1 + 624))))
  {
    goto LABEL_88;
  }
  unsigned int v23 = *(_DWORD *)(a1 + 300);
  if ((v23 & 0x800000) != 0)
  {
    if (!png_gamma_significant(*(_DWORD *)(a1 + 668)))
    {
      unsigned int v23 = *(_DWORD *)(a1 + 300);
      goto LABEL_75;
    }
LABEL_88:
    png_build_gamma_table(a1, *(unsigned __int8 *)(a1 + 608));
    unsigned int v23 = *(_DWORD *)(a1 + 300);
    if ((v23 & 0x80) == 0)
    {
      if (*(unsigned char *)(a1 + 607) == 3 && ((v23 & 0x1000) == 0 || (v23 & 0x600000) == 0))
      {
        uint64_t v34 = *(unsigned __int16 *)(a1 + 592);
        if (*(_WORD *)(a1 + 592))
        {
          uint64_t v35 = *(void *)(a1 + 672);
          uint64_t v36 = (unsigned char *)(*(void *)(a1 + 584) + 2);
          do
          {
            *(v36 - 2) = *(unsigned char *)(v35 + *(v36 - 2));
            *(v36 - 1) = *(unsigned char *)(v35 + *(v36 - 1));
            *uint64_t v36 = *(unsigned char *)(v35 + *v36);
            v36 += 3;
            --v34;
          }
          while (v34);
        }
        v23 &= ~0x2000u;
        goto LABEL_144;
      }
      goto LABEL_145;
    }
    if ((v23 & 0x600000) != 0) {
      png_warning(a1, "libpng does not support gamma+background+rgb_to_gray");
    }
    if (*(unsigned char *)(a1 + 607) == 3)
    {
      unsigned int v37 = 100000;
      uint64_t v38 = *(void *)(a1 + 584);
      uint64_t v39 = *(unsigned __int16 *)(a1 + 592);
      int v40 = *(unsigned __int8 *)(a1 + 620);
      if (v40 == 1)
      {
        int v41 = *(_DWORD *)(a1 + 668);
      }
      else if (v40 == 3)
      {
        int v41 = png_reciprocal(*(_DWORD *)(a1 + 624));
        unsigned int v37 = png_reciprocal2(*(_DWORD *)(a1 + 624), *(_DWORD *)(a1 + 668));
      }
      else
      {
        int v41 = 100000;
        if (v40 == 2)
        {
          uint64_t v42 = *(void *)(a1 + 672);
          uint64_t v43 = *(unsigned __int16 *)(a1 + 630);
          LOBYTE(v44) = *(unsigned char *)(v42 + v43);
          uint64_t v45 = *(unsigned __int16 *)(a1 + 632);
          char v46 = *(unsigned char *)(v42 + v45);
          uint64_t v47 = *(unsigned __int16 *)(a1 + 634);
          char v48 = *(unsigned char *)(v42 + v47);
          uint64_t v49 = *(void *)(a1 + 696);
          LOBYTE(v5CoreML::Specification::DictVectorizer::New(this, 0) = *(unsigned char *)(v49 + v43);
          unsigned __int8 v51 = *(unsigned char *)(v49 + v45);
          unsigned __int8 v52 = *(unsigned char *)(v49 + v47);
          if (!*(_WORD *)(a1 + 592)) {
            goto LABEL_143;
          }
LABEL_133:
          unint64_t v63 = 0;
          __int16 v64 = (unsigned char *)(v38 + 2);
          while (v63 < *(unsigned __int16 *)(a1 + 600))
          {
            uint64_t v65 = *(void *)(a1 + 736);
            int v66 = *(unsigned __int8 *)(v65 + v63);
            if (v66 == 255) {
              break;
            }
            if (*(unsigned char *)(v65 + v63))
            {
              uint64_t v69 = *(void *)(a1 + 696);
              __int16 v70 = *(unsigned __int8 *)(v69 + *(v64 - 2)) * (_WORD)v66
                  + (v66 ^ 0xFF) * v50
                  + 128;
              uint64_t v71 = *(void *)(a1 + 688);
              *(v64 - 2) = *(unsigned char *)(v71 + ((unsigned __int16)(v70 + HIBYTE(v70)) >> 8));
              __int16 v72 = *(unsigned __int8 *)(v65 + v63) * *(unsigned __int8 *)(v69 + *(v64 - 1))
                  + (*(unsigned __int8 *)(v65 + v63) ^ 0xFF) * v51
                  + 128;
              *(v64 - 1) = *(unsigned char *)(v71 + ((unsigned __int16)(v72 + HIBYTE(v72)) >> 8));
              __int16 v73 = *(unsigned __int8 *)(v65 + v63) * *(unsigned __int8 *)(v69 + *v64)
                  + (*(unsigned __int8 *)(v65 + v63) ^ 0xFF) * v52
                  + 128;
              char v68 = *(unsigned char *)(v71 + ((unsigned __int16)(v73 + HIBYTE(v73)) >> 8));
              goto LABEL_139;
            }
            *(v64 - 2) = v44;
            *(v64 - 1) = v46;
            unsigned char *v64 = v48;
LABEL_140:
            ++v63;
            v64 += 3;
            if (v39 == v63) {
              goto LABEL_143;
            }
          }
          uint64_t v67 = *(void *)(a1 + 672);
          *(v64 - 2) = *(unsigned char *)(v67 + *(v64 - 2));
          *(v64 - 1) = *(unsigned char *)(v67 + *(v64 - 1));
          char v68 = *(unsigned char *)(v67 + *v64);
LABEL_139:
          unsigned char *v64 = v68;
          goto LABEL_140;
        }
      }
      BOOL v61 = png_gamma_significant(v37);
      __int16 v44 = *(_WORD *)(a1 + 630);
      if (v61)
      {
        LOBYTE(v44) = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 630), v37);
        char v46 = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 632), v37);
        char v48 = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 634), v37);
      }
      else
      {
        char v46 = *(unsigned char *)(a1 + 632);
        char v48 = *(unsigned char *)(a1 + 634);
      }
      BOOL v62 = png_gamma_significant(v41);
      __int16 v50 = *(_WORD *)(a1 + 630);
      if (v62)
      {
        LOBYTE(v5CoreML::Specification::DictVectorizer::New(this, 0) = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 630), v41);
        unsigned __int8 v51 = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 632), v41);
        unsigned __int8 v52 = png_gamma_8bit_correct(*(unsigned __int16 *)(a1 + 634), v41);
        if (!v39) {
          goto LABEL_143;
        }
      }
      else
      {
        unsigned __int8 v51 = *(unsigned char *)(a1 + 632);
        unsigned __int8 v52 = *(unsigned char *)(a1 + 634);
        if (!v39)
        {
LABEL_143:
          unsigned int v23 = *(_DWORD *)(a1 + 300) & 0xFFFFDF7F;
LABEL_144:
          *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v23;
          goto LABEL_145;
        }
      }
      goto LABEL_133;
    }
    int v53 = *(unsigned __int8 *)(a1 + 620);
    switch(v53)
    {
      case 3:
        int v55 = png_reciprocal(*(_DWORD *)(a1 + 624));
        int v56 = *(_DWORD *)(a1 + 624);
        break;
      case 2:
        int v55 = png_reciprocal(*(_DWORD *)(a1 + 1176));
        int v56 = *(_DWORD *)(a1 + 1176);
        break;
      case 1:
        unsigned int v54 = 100000;
        int v55 = *(_DWORD *)(a1 + 668);
        goto LABEL_111;
      default:
        png_error(a1, "invalid background gamma type");
    }
    unsigned int v54 = png_reciprocal2(v56, *(_DWORD *)(a1 + 668));
LABEL_111:
    BOOL v57 = png_gamma_significant(v55);
    BOOL v58 = png_gamma_significant(v54);
    if (v57) {
      *(_WORD *)(a1 + 646) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 636), v55);
    }
    if (v58) {
      *(_WORD *)(a1 + 636) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 636), v54);
    }
    int v59 = *(unsigned __int16 *)(a1 + 630);
    if (v59 == *(unsigned __int16 *)(a1 + 632)
      && v59 == *(unsigned __int16 *)(a1 + 634)
      && v59 == *(unsigned __int16 *)(a1 + 636))
    {
      __int16 v60 = *(_WORD *)(a1 + 646);
      *(_WORD *)(a1 + 644) = v60;
      *(_WORD *)(a1 + 642) = v60;
      *(_WORD *)(a1 + 64CoreML::Specification::DictVectorizer::New(this, 0) = v60;
      *(_WORD *)(a1 + 634) = v59;
      *(_WORD *)(a1 + 632) = v59;
      *(_WORD *)(a1 + 63CoreML::Specification::DictVectorizer::New(this, 0) = v59;
    }
    else
    {
      if (v57)
      {
        *(_WORD *)(a1 + 64CoreML::Specification::DictVectorizer::New(this, 0) = png_gamma_correct(a1, v59, v55);
        *(_WORD *)(a1 + 642) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 632), v55);
        *(_WORD *)(a1 + 644) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 634), v55);
      }
      if (v58)
      {
        *(_WORD *)(a1 + 63CoreML::Specification::DictVectorizer::New(this, 0) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 630), v54);
        *(_WORD *)(a1 + 632) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 632), v54);
        *(_WORD *)(a1 + 634) = png_gamma_correct(a1, *(unsigned __int16 *)(a1 + 634), v54);
      }
    }
    *(unsigned char *)(a1 + 62CoreML::Specification::DictVectorizer::New(this, 0) = 1;
    unsigned int v23 = *(_DWORD *)(a1 + 300);
    goto LABEL_145;
  }
LABEL_75:
  if ((v23 & 0x80) != 0 && *(unsigned char *)(a1 + 607) == 3)
  {
    uint64_t v24 = *(unsigned __int16 *)(a1 + 600);
    if (*(_WORD *)(a1 + 600))
    {
      uint64_t v25 = 0;
      __int16 v26 = *(unsigned __int8 *)(a1 + 630);
      __int16 v27 = *(unsigned __int8 *)(a1 + 632);
      __int16 v28 = *(unsigned __int8 *)(a1 + 634);
      int v29 = (unsigned char *)(*(void *)(a1 + 584) + 2);
      do
      {
        uint64_t v30 = *(void *)(a1 + 736);
        int v31 = *(unsigned __int8 *)(v30 + v25);
        if (v31 != 255)
        {
          if (*(unsigned char *)(v30 + v25))
          {
            __int16 v32 = *(v29 - 2) * (_WORD)v31 + v26 * (v31 ^ 0xFF) + 128;
            *(v29 - 2) = (unsigned __int16)(v32 + ((unsigned __int16)(v32 & 0xFF00) >> 8)) >> 8;
            *(v29 - 1) = (unsigned __int16)(*(unsigned __int8 *)(v30 + v25) * *(v29 - 1)
                                          + v27 * (*(unsigned __int8 *)(v30 + v25) ^ 0xFF)
                                          + 128
                                          + ((unsigned __int16)((*(unsigned __int8 *)(v30 + v25)
                                                               * *(v29 - 1)
                                                               + v27 * (*(unsigned __int8 *)(v30 + v25) ^ 0xFF)
                                                               + 128) & 0xFF00) >> 8)) >> 8;
            __int16 v33 = *(unsigned __int8 *)(v30 + v25) * *v29
                + v28 * (*(unsigned __int8 *)(v30 + v25) ^ 0xFF)
                + 128;
            unsigned char *v29 = (unsigned __int16)(v33 + ((unsigned __int16)(v33 & 0xFF00) >> 8)) >> 8;
          }
          else
          {
            *(v29 - 2) = v26;
            *(v29 - 1) = v27;
            unsigned char *v29 = v28;
          }
        }
        ++v25;
        v29 += 3;
      }
      while (v24 != v25);
      unsigned int v23 = *(_DWORD *)(a1 + 300);
    }
    v23 &= ~0x80u;
    goto LABEL_144;
  }
LABEL_145:
  if ((v23 & 0x1008) == 8 && *(unsigned char *)(a1 + 607) == 3)
  {
    uint64_t v74 = *(unsigned __int16 *)(a1 + 592);
    int v75 = *(unsigned __int8 *)(a1 + 720);
    *(_DWORD *)(a1 + 30CoreML::Specification::DictVectorizer::New(this, 0) = v23 & 0xFFFFFFF7;
    if ((v75 - 1) <= 6 && v74)
    {
      char v76 = 8 - v75;
      int v77 = *(unsigned char **)(a1 + 584);
      uint64_t v78 = v74;
      do
      {
        *int v77 = *v77 >> v76;
        v77 += 3;
        --v78;
      }
      while (v78);
    }
    int v79 = *(unsigned __int8 *)(a1 + 721);
    if ((v79 - 1) <= 6 && v74 != 0)
    {
      char v81 = 8 - v79;
      uint64_t v82 = (unsigned char *)(*(void *)(a1 + 584) + 1);
      uint64_t v83 = v74;
      do
      {
        unsigned char *v82 = *v82 >> v81;
        v82 += 3;
        --v83;
      }
      while (v83);
    }
    int v84 = *(unsigned __int8 *)(a1 + 722);
    if ((v84 - 1) <= 6 && v74 != 0)
    {
      char v86 = 8 - v84;
      int v87 = (unsigned char *)(*(void *)(a1 + 584) + 2);
      do
      {
        *int v87 = *v87 >> v86;
        v87 += 3;
        --v74;
      }
      while (v74);
    }
  }
}

uint64_t png_do_read_transformations(uint64_t result, unsigned int *a2, uint8x8_t a3)
{
  uint64_t v3 = result;
  uint64_t v395 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(result + 544);
  if (!v4)
  {
    uint64_t v391 = "NULL row buffer";
    goto LABEL_674;
  }
  if ((*(_DWORD *)(result + 296) & 0x4040) == 0x4000)
  {
    uint64_t v391 = "Uninitialized row";
    goto LABEL_674;
  }
  int v6 = *(_DWORD *)(result + 300);
  if ((v6 & 0x1000) != 0)
  {
    unsigned int v7 = *(unsigned __int16 *)(result + 600);
    if (*((unsigned char *)a2 + 16) != 3)
    {
      if ((v6 & 0x2000000) != 0 && *(_WORD *)(result + 600))
      {
        __int16 v18 = (unsigned __int16 *)(result + 744);
        __int16 v19 = a2;
      }
      else
      {
        __int16 v19 = a2;
        __int16 v18 = 0;
      }
      uint64_t result = (uint64_t)png_do_expand(v19, v4 + 1, v18);
      goto LABEL_60;
    }
    if (*(_WORD *)(result + 600) && *(unsigned char *)(result + 608) == 8 && !*(void *)(result + 976))
    {
      *(void *)(result + 976) = png_malloc((void *)result, 0x400uLL);
      uint64_t result = png_riffle_palette_neon(v3);
      if (*((unsigned char *)a2 + 16) != 3) {
        goto LABEL_60;
      }
      uint64_t v4 = *(void *)(v3 + 544);
      unsigned int v7 = *(unsigned __int16 *)(v3 + 600);
    }
    uint64_t v8 = *(void *)(v3 + 584);
    uint64_t v9 = *(void *)(v3 + 736);
    uint64_t v10 = v4 + 1;
    uint64_t v11 = *a2;
    unsigned int v12 = *((unsigned __int8 *)a2 + 17);
    if (v12 > 7)
    {
      if (v12 != 8) {
        goto LABEL_60;
      }
      goto LABEL_44;
    }
    if (v12 == 1)
    {
      int v20 = (unsigned __int8 *)(v10 + ((v11 - 1) >> 3));
      uint64_t v392 = v4 + v11;
      uint64_t v393 = (uint64_t)v20;
      if (v11)
      {
        int v21 = -(int)v11 & 7;
        uint64_t v22 = v11 + v4 - 1;
        int v23 = v11;
        do
        {
          *(unsigned char *)(v22 + 1) = (*v20 >> v21) & 1;
          if (v21 == 7)
          {
            int v21 = 0;
            uint64_t v393 = (uint64_t)--v20;
          }
          else
          {
            ++v21;
          }
          uint64_t v392 = v22--;
          --v23;
        }
        while (v23);
        goto LABEL_41;
      }
    }
    else if (v12 == 2)
    {
      uint64_t v24 = (unsigned __int8 *)(v10 + ((v11 - 1) >> 2));
      uint64_t v392 = v4 + v11;
      uint64_t v393 = (uint64_t)v24;
      if (v11)
      {
        int v25 = ~(2 * v11 + 6) & 6;
        uint64_t v26 = v11 + v4 - 1;
        int v27 = v11;
        do
        {
          *(unsigned char *)(v26 + 1) = (*v24 >> v25) & 3;
          if (v25 == 6)
          {
            int v25 = 0;
            uint64_t v393 = (uint64_t)--v24;
          }
          else
          {
            v25 += 2;
          }
          uint64_t v392 = v26--;
          --v27;
        }
        while (v27);
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v13 = *a2;
      if (v12 != 4)
      {
LABEL_43:
        *((unsigned char *)a2 + 17) = 8;
        *((unsigned char *)a2 + 19) = 8;
        *((void *)a2 + 1) = v13;
LABEL_44:
        uint64_t v393 = v10 + v11 - 1;
        if (v7)
        {
          uint64_t v392 = v10 + 4 * v11 - 1;
          if (*(void *)(v3 + 976)) {
            uint64_t result = png_do_expand_palette_rgba8_neon(v3, a2, v10, &v393, &v392);
          }
          else {
            uint64_t result = 0;
          }
          int v39 = v11 - result;
          if (v11 > result)
          {
            int v40 = (unsigned __int8 *)v393;
            do
            {
              uint64_t v41 = *v40;
              if (v7 <= v41)
              {
                __int16 v44 = (unsigned char *)v392--;
                *__int16 v44 = -1;
              }
              else
              {
                char v42 = *(unsigned char *)(v9 + v41);
                uint64_t v43 = (unsigned char *)v392--;
                *uint64_t v43 = v42;
              }
              uint64_t v45 = (unsigned char *)v392;
              char v46 = *(unsigned char *)(v8 + 3 * *(unsigned __int8 *)v393 + 2);
              --v392;
              *uint64_t v45 = v46;
              uint64_t v47 = (unsigned char *)v392;
              char v48 = *(unsigned char *)(v8 + 3 * *(unsigned __int8 *)v393 + 1);
              --v392;
              *uint64_t v47 = v48;
              uint64_t v49 = (unsigned char *)v392;
              char v50 = *(unsigned char *)(v8 + 3 * *(unsigned __int8 *)v393);
              --v392;
              unsigned char *v49 = v50;
              int v40 = (unsigned __int8 *)--v393;
              --v39;
            }
            while (v39);
          }
          *((unsigned char *)a2 + 17) = 8;
          *((unsigned char *)a2 + 19) = 32;
          uint64_t v28 = (4 * v11);
          char v37 = 4;
          char v38 = 6;
        }
        else
        {
          uint64_t v28 = (3 * v11);
          uint64_t v392 = v10 + v28 - 1;
          uint64_t result = png_do_expand_palette_rgb8_neon(v3, a2, v10, &v393, &v392);
          int v29 = v11 - result;
          if (v11 > result)
          {
            uint64_t v30 = (unsigned __int8 *)v393;
            do
            {
              char v31 = *(unsigned char *)(v8 + 3 * *v30 + 2);
              __int16 v32 = (unsigned char *)v392--;
              *__int16 v32 = v31;
              __int16 v33 = (unsigned char *)v392;
              char v34 = *(unsigned char *)(v8 + 3 * *(unsigned __int8 *)v393 + 1);
              --v392;
              *__int16 v33 = v34;
              uint64_t v35 = (unsigned char *)v392;
              char v36 = *(unsigned char *)(v8 + 3 * *(unsigned __int8 *)v393);
              --v392;
              *uint64_t v35 = v36;
              uint64_t v30 = (unsigned __int8 *)--v393;
              --v29;
            }
            while (v29);
          }
          *((unsigned char *)a2 + 17) = 8;
          *((unsigned char *)a2 + 19) = 24;
          char v37 = 3;
          char v38 = 2;
        }
        *((void *)a2 + 1) = v28;
        *((unsigned char *)a2 + 16) = v38;
        *((unsigned char *)a2 + 18) = v37;
        goto LABEL_60;
      }
      int v14 = (unsigned __int8 *)(v10 + ((v11 - 1) >> 1));
      uint64_t v392 = v4 + v11;
      uint64_t v393 = (uint64_t)v14;
      if (v11)
      {
        int v15 = 4 * (v11 & 1);
        uint64_t v16 = v11 + v4 - 1;
        int v17 = v11;
        do
        {
          *(unsigned char *)(v16 + 1) = (*v14 >> v15) & 0xF;
          if (v15 == 4)
          {
            int v15 = 0;
            uint64_t v393 = (uint64_t)--v14;
          }
          else
          {
            v15 += 4;
          }
          uint64_t v392 = v16--;
          --v17;
        }
        while (v17);
LABEL_41:
        uint64_t v13 = v11;
        goto LABEL_43;
      }
    }
    uint64_t v13 = 0;
    goto LABEL_43;
  }
LABEL_60:
  int v51 = *(_DWORD *)(v3 + 300);
  if ((v51 & 0x40080) == 0x40000 && (*((unsigned __int8 *)a2 + 16) | 2) == 6)
  {
    uint64_t result = png_do_strip_channel((uint64_t)a2, (unsigned char *)(*(void *)(v3 + 544) + 1), 0);
    int v51 = *(_DWORD *)(v3 + 300);
  }
  if ((v51 & 0x600000) == 0) {
    goto LABEL_130;
  }
  char v52 = *((unsigned char *)a2 + 16);
  if ((v52 & 3) != 2) {
    goto LABEL_130;
  }
  int v53 = (unsigned __int8 *)(*(void *)(v3 + 544) + 1);
  int v54 = *(unsigned __int16 *)(v3 + 970);
  int v55 = *(unsigned __int16 *)(v3 + 972);
  int v56 = 0x8000 - (v54 + v55);
  unsigned int v57 = *a2;
  unsigned int v58 = *a2;
  if (*((unsigned char *)a2 + 17) == 8)
  {
    uint64_t v59 = *(void *)(v3 + 688);
    if (v59)
    {
      uint64_t v60 = *(void *)(v3 + 696);
      if (v60)
      {
        if (v58)
        {
          int v61 = 0;
          uint64_t result = *(void *)(v3 + 544) + 1;
          while (1)
          {
            BOOL v62 = (unsigned char *)*v53;
            uint64_t v63 = v53[1];
            uint64_t v64 = v53[2];
            BOOL v65 = v62 == v63 && v62 == v64;
            if (!v65) {
              break;
            }
            uint64_t v66 = *(void *)(v3 + 672);
            if (v66)
            {
              v62 += v66;
              goto LABEL_77;
            }
LABEL_78:
            *(unsigned char *)uint64_t result = (_BYTE)v62;
            if ((v52 & 4) != 0)
            {
              unsigned __int8 v67 = v53[3];
              v53 += 4;
              *(unsigned char *)(result + 1) = v67;
              result += 2;
            }
            else
            {
              v53 += 3;
              ++result;
            }
            if (!--v58) {
              goto LABEL_124;
            }
          }
          BOOL v62 = (unsigned char *)(v59
                        + ((*(unsigned __int8 *)(v60 + v63) * v55
                          + v62[v60] * v54
                          + v56 * *(unsigned __int8 *)(v60 + v64)
                          + 0x4000) >> 15));
          int v61 = 1;
LABEL_77:
          LOBYTE(v62) = *v62;
          goto LABEL_78;
        }
        goto LABEL_123;
      }
    }
    if (v58)
    {
      int v61 = 0;
      uint64_t v82 = (unsigned __int8 *)(*(void *)(v3 + 544) + 1);
      do
      {
        int v83 = *v82;
        int v84 = v82[1];
        int v85 = v82[2];
        if (v83 != v84 || v83 != v85)
        {
          LOBYTE(v83) = (v83 * v54 + v84 * v55 + v56 * v85) >> 15;
          int v61 = 1;
        }
        *int v53 = v83;
        uint64_t result = (uint64_t)(v53 + 1);
        if ((v52 & 4) != 0)
        {
          unsigned __int8 v87 = v82[3];
          v82 += 4;
          v53[1] = v87;
          v53 += 2;
        }
        else
        {
          v82 += 3;
          ++v53;
        }
        --v58;
      }
      while (v58);
      goto LABEL_124;
    }
LABEL_123:
    int v61 = 0;
    goto LABEL_124;
  }
  uint64_t v68 = *(void *)(v3 + 712);
  if (v68 && (uint64_t v69 = *(void *)(v3 + 704)) != 0)
  {
    if (!v58) {
      goto LABEL_123;
    }
    int v61 = 0;
    uint64_t result = *(void *)(v3 + 544) + 1;
    do
    {
      int v70 = *(unsigned __int8 *)result;
      int v71 = *(unsigned __int8 *)(result + 1);
      unsigned int v72 = v71 | (v70 << 8);
      uint64_t v73 = *(unsigned __int8 *)(result + 2);
      unsigned int v74 = *(unsigned __int8 *)(result + 3);
      unsigned int v75 = __rev16(*(unsigned __int16 *)(result + 4));
      if ((v74 | (v73 << 8)) == v72 && v72 == v75)
      {
        uint64_t v80 = *(void *)(v3 + 680);
        if (v80)
        {
          LOBYTE(v71) = *(_WORD *)(*(void *)(v80 + 8 * (v74 >> *(_DWORD *)(v3 + 664))) + 2 * v73);
          int v70 = HIBYTE(*(unsigned __int16 *)(*(void *)(v80 + 8 * (v74 >> *(_DWORD *)(v3 + 664))) + 2 * v73));
        }
      }
      else
      {
        char v77 = *(_DWORD *)(v3 + 664);
        unsigned int v78 = *(unsigned __int16 *)(*(void *)(v68 + 8 * (v74 >> v77)) + 2 * v73) * v55
            + *(unsigned __int16 *)(*(void *)(v68 + 8 * (v72 >> v77)) + 2 * (v72 >> 8)) * v54
            + v56 * *(unsigned __int16 *)(*(void *)(v68 + 8 * (v75 >> v77)) + 2 * (v75 >> 8))
            + 0x4000;
        unsigned int v79 = *(unsigned __int16 *)(*(void *)(v69 + 8 * ((v78 >> 15) >> v77))
                                  + 2 * (v78 >> 23));
        LOBYTE(v71) = v79;
        int v70 = v79 >> 8;
        int v61 = 1;
      }
      *int v53 = v70;
      v53[1] = v71;
      if ((v52 & 4) != 0)
      {
        v53[2] = *(unsigned char *)(result + 6);
        unsigned __int8 v81 = *(unsigned char *)(result + 7);
        result += 8;
        v53[3] = v81;
        v53 += 4;
      }
      else
      {
        result += 6;
        v53 += 2;
      }
      --v58;
    }
    while (v58);
  }
  else
  {
    if (!v58) {
      goto LABEL_123;
    }
    int v61 = 0;
    int v88 = (unsigned __int16 *)(*(void *)(v3 + 544) + 1);
    do
    {
      unsigned int v89 = __rev16(*v88);
      unsigned int v90 = __rev16(v88[1]);
      unsigned int v91 = v88[2];
      unsigned int v92 = __rev16(v91);
      if (v89 != bswap32(v91) >> 16 || v89 != v90) {
        int v61 = 1;
      }
      unsigned int v94 = v90 * v55 + v89 * v54 + v92 * v56 + 0x4000;
      uint64_t result = v94 >> 15;
      *int v53 = v94 >> 23;
      v53[1] = result;
      if ((v52 & 4) != 0)
      {
        v53[2] = *((unsigned char *)v88 + 6);
        unsigned __int8 v95 = *((unsigned char *)v88 + 7);
        v88 += 4;
        v53[3] = v95;
        v53 += 4;
      }
      else
      {
        v88 += 3;
        v53 += 2;
      }
      --v58;
    }
    while (v58);
  }
LABEL_124:
  char v96 = *((unsigned char *)a2 + 18) - 2;
  *((unsigned char *)a2 + 18) = v96;
  *((unsigned char *)a2 + 16) &= ~2u;
  unsigned __int8 v97 = *((unsigned char *)a2 + 17) * v96;
  *((unsigned char *)a2 + 19) = v97;
  unint64_t v98 = (v97 * (unint64_t)v57 + 7) >> 3;
  unint64_t v99 = v57 * (unint64_t)(v97 >> 3);
  if (v97 < 8u) {
    unint64_t v99 = v98;
  }
  *((void *)a2 + 1) = v99;
  int v51 = *(_DWORD *)(v3 + 300);
  if (v61)
  {
    *(unsigned char *)(v3 + 968) = 1;
    if ((v51 & 0x600000) == 0x400000)
    {
      uint64_t result = png_warning(v3, "png_do_rgb_to_gray found nongray pixel");
      int v51 = *(_DWORD *)(v3 + 300);
    }
    if ((v51 & 0x600000) == 0x200000)
    {
      uint64_t v391 = "png_do_rgb_to_gray found nongray pixel";
      goto LABEL_674;
    }
  }
LABEL_130:
  if ((v51 & 0x4000) != 0 && (*(unsigned char *)(v3 + 293) & 8) == 0)
  {
    uint64_t result = (uint64_t)png_do_gray_to_rgb(a2, *(void *)(v3 + 544) + 1);
    int v51 = *(_DWORD *)(v3 + 300);
  }
  if ((v51 & 0x80) != 0)
  {
    unint64_t v115 = *(unsigned __int8 **)(v3 + 544);
    uint64_t v116 = v115 + 1;
    uint64_t v117 = *(void *)(v3 + 672);
    uint64_t result = *(void *)(v3 + 688);
    uint64_t v118 = *(void *)(v3 + 696);
    uint64_t v119 = *(void *)(v3 + 680);
    uint64_t v120 = *(void *)(v3 + 704);
    uint64_t v121 = *(void *)(v3 + 712);
    int v122 = *(_DWORD *)(v3 + 664);
    int v123 = *(_DWORD *)(v3 + 296);
    unsigned int v124 = *a2;
    switch(*((unsigned char *)a2 + 16))
    {
      case 0:
        switch(*((unsigned char *)a2 + 17))
        {
          case 1:
            if (v124)
            {
              int v125 = *(unsigned __int16 *)(v3 + 752);
              int v126 = 7;
              do
              {
                unsigned int v127 = *v116;
                if (((v127 >> v126) & 1) == v125) {
                  *uint64_t v116 = (*(unsigned __int16 *)(v3 + 636) << v126) | (0x7F7Fu >> (7 - v126)) & v127;
                }
                BOOL v128 = v126 == 0;
                if (v126) {
                  --v126;
                }
                else {
                  int v126 = 7;
                }
                if (v128) {
                  ++v116;
                }
                --v124;
              }
              while (v124);
            }
            break;
          case 2:
            if (v117)
            {
              if (v124)
              {
                int v360 = *(unsigned __int16 *)(v3 + 752);
                int v361 = 6;
                do
                {
                  unsigned int v362 = *v116;
                  unsigned int v363 = (v362 >> v361) & 3;
                  if (v363 == v360)
                  {
                    v362 &= 0x3F3Fu >> (6 - v361);
                    LOBYTE(v364) = *(unsigned __int16 *)(v3 + 636) << v361;
                  }
                  else
                  {
                    uint64_t result = 0x3F3Fu >> (6 - v361);
                    LOBYTE(v362) = result & v362;
                    int v364 = *(unsigned __int8 *)(v117 + 85 * v363) >> 6 << v361;
                  }
                  *uint64_t v116 = v364 | v362;
                  BOOL v365 = v361 == 0;
                  if (v361) {
                    v361 -= 2;
                  }
                  else {
                    int v361 = 6;
                  }
                  if (v365) {
                    ++v116;
                  }
                  --v124;
                }
                while (v124);
              }
            }
            else if (v124)
            {
              int v379 = *(unsigned __int16 *)(v3 + 752);
              int v380 = 6;
              do
              {
                unsigned int v381 = *v116;
                if (((v381 >> v380) & 3) == v379) {
                  *uint64_t v116 = (*(unsigned __int16 *)(v3 + 636) << v380) | (0x3F3Fu >> (6 - v380)) & v381;
                }
                BOOL v382 = v380 == 0;
                if (v380) {
                  v380 -= 2;
                }
                else {
                  int v380 = 6;
                }
                if (v382) {
                  ++v116;
                }
                --v124;
              }
              while (v124);
            }
            break;
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_134;
          case 4:
            if (v117)
            {
              if (v124)
              {
                int v366 = *(unsigned __int16 *)(v3 + 752);
                int v367 = 4;
                do
                {
                  unsigned int v368 = *v116;
                  uint64_t v369 = (v368 >> v367) & 0xF;
                  unsigned int v370 = (0xF0Fu >> (4 - v367)) & v368;
                  if (v369 == v366) {
                    LOBYTE(v371) = *(unsigned __int16 *)(v3 + 636) << v367;
                  }
                  else {
                    int v371 = *(unsigned __int8 *)(v117 + (v369 | (16 * v369))) >> 4 << v367;
                  }
                  *uint64_t v116 = v371 | v370;
                  BOOL v372 = v367 == 0;
                  if (v367) {
                    v367 -= 4;
                  }
                  else {
                    int v367 = 4;
                  }
                  if (v372) {
                    ++v116;
                  }
                  --v124;
                }
                while (v124);
              }
            }
            else if (v124)
            {
              int v383 = *(unsigned __int16 *)(v3 + 752);
              int v384 = 4;
              do
              {
                unsigned int v385 = *v116;
                if (((v385 >> v384) & 0xF) == v383) {
                  *uint64_t v116 = (*(unsigned __int16 *)(v3 + 636) << v384) | (0xF0Fu >> (4 - v384)) & v385;
                }
                BOOL v386 = v384 == 0;
                if (v384) {
                  v384 -= 4;
                }
                else {
                  int v384 = 4;
                }
                if (v386) {
                  ++v116;
                }
                --v124;
              }
              while (v124);
            }
            break;
          case 8:
            if (v117)
            {
              if (v124)
              {
                int v373 = *(unsigned __int16 *)(v3 + 752);
                do
                {
                  uint64_t v374 = *v116;
                  if (v373 == v374) {
                    unsigned __int8 v375 = *(unsigned char *)(v3 + 636);
                  }
                  else {
                    unsigned __int8 v375 = *(unsigned char *)(v117 + v374);
                  }
                  *v116++ = v375;
                  --v124;
                }
                while (v124);
              }
            }
            else if (v124)
            {
              int v387 = *(unsigned __int16 *)(v3 + 752);
              do
              {
                if (v387 == *v116) {
                  *uint64_t v116 = *(unsigned char *)(v3 + 636);
                }
                ++v116;
                --v124;
              }
              while (v124);
            }
            break;
          default:
            if (*((unsigned char *)a2 + 17) == 16)
            {
              if (v119)
              {
                if (v124)
                {
                  int v329 = *(unsigned __int16 *)(v3 + 752);
                  do
                  {
                    uint64_t v330 = *v116;
                    unsigned int v331 = v116[1];
                    v332 = (unsigned __int16 *)(v3 + 636);
                    if ((v331 | (v330 << 8)) != v329) {
                      v332 = (unsigned __int16 *)(*(void *)(v119 + 8 * (v331 >> v122)) + 2 * v330);
                    }
                    *(_WORD *)uint64_t v116 = bswap32(*v332) >> 16;
                    v116 += 2;
                    --v124;
                  }
                  while (v124);
                }
              }
              else if (v124)
              {
                int v389 = *(unsigned __int16 *)(v3 + 752);
                uint64_t v390 = v115 + 2;
                do
                {
                  if (v389 == bswap32(*(unsigned __int16 *)(v390 - 1)) >> 16) {
                    *(_WORD *)(v390 - 1) = bswap32(*(unsigned __int16 *)(v3 + 636)) >> 16;
                  }
                  v390 += 2;
                  --v124;
                }
                while (v124);
              }
            }
            break;
        }
        goto LABEL_134;
      case 2:
        if (*((unsigned char *)a2 + 17) == 8)
        {
          if (v117)
          {
            if (v124)
            {
              unsigned int v137 = *(unsigned __int16 *)(v3 + 746);
              uint64_t v138 = v115 + 3;
              do
              {
                uint64_t v139 = *(v138 - 2);
                uint64_t v140 = *(v138 - 1);
                if (__PAIR64__(*(unsigned __int16 *)(v3 + 748), v137) == __PAIR64__(v140, v139)
                  && *(_WORD *)(v3 + 750) == *v138)
                {
                  *(v138 - 2) = *(unsigned char *)(v3 + 630);
                  *(v138 - 1) = *(unsigned char *)(v3 + 632);
                  char v141 = *(unsigned char *)(v3 + 634);
                }
                else
                {
                  *(v138 - 2) = *(unsigned char *)(v117 + v139);
                  *(v138 - 1) = *(unsigned char *)(v117 + v140);
                  char v141 = *(unsigned char *)(v117 + *v138);
                }
                unsigned char *v138 = v141;
                v138 += 3;
                --v124;
              }
              while (v124);
            }
          }
          else if (v124)
          {
            int v356 = *(unsigned __int16 *)(v3 + 746);
            v357 = v115 + 3;
            do
            {
              if (v356 == *(v357 - 2)
                && *(_WORD *)(v3 + 748) == *(v357 - 1)
                && *(_WORD *)(v3 + 750) == *v357)
              {
                *(v357 - 2) = *(unsigned char *)(v3 + 630);
                *(v357 - 1) = *(unsigned char *)(v3 + 632);
                unsigned char *v357 = *(unsigned char *)(v3 + 634);
              }
              v357 += 3;
              --v124;
            }
            while (v124);
          }
        }
        else if (v119)
        {
          if (v124)
          {
            int v154 = *(unsigned __int16 *)(v3 + 746);
            int v155 = v115 + 3;
            do
            {
              uint64_t v156 = *(v155 - 2);
              unsigned int v157 = *(v155 - 1);
              uint64_t v158 = v155[2];
              unsigned int v159 = v155[3];
              uint64_t result = v155[1];
              unsigned int v160 = *v155;
              if ((v157 | (v156 << 8)) == v154
                && (result | (v160 << 8)) == *(unsigned __int16 *)(v3 + 748)
                && (v159 | (v158 << 8)) == *(unsigned __int16 *)(v3 + 750))
              {
                *((_WORD *)v155 - 1) = bswap32(*(unsigned __int16 *)(v3 + 630)) >> 16;
                *(_WORD *)int v155 = bswap32(*(unsigned __int16 *)(v3 + 632)) >> 16;
                int v161 = (unsigned __int16 *)(v3 + 634);
              }
              else
              {
                *((_WORD *)v155 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v119 + 8 * (v157 >> v122)) + 2 * v156)) >> 16;
                *(_WORD *)int v155 = bswap32(*(unsigned __int16 *)(*(void *)(v119 + 8 * (result >> v122))
                                                             + 2 * v160)) >> 16;
                int v161 = (unsigned __int16 *)(*(void *)(v119 + 8 * (v159 >> v122)) + 2 * v158);
              }
              *((_WORD *)v155 + 1) = bswap32(*v161) >> 16;
              v155 += 6;
              --v124;
            }
            while (v124);
          }
        }
        else if (v124)
        {
          int v358 = *(unsigned __int16 *)(v3 + 746);
          v359 = (unsigned __int16 *)(v115 + 3);
          do
          {
            if (v358 == bswap32(*(v359 - 1)) >> 16
              && *(unsigned __int16 *)(v3 + 748) == bswap32(*v359) >> 16
              && __rev16(v359[1]) == *(unsigned __int16 *)(v3 + 750))
            {
              *(v359 - 1) = bswap32(*(unsigned __int16 *)(v3 + 630)) >> 16;
              unsigned __int16 *v359 = bswap32(*(unsigned __int16 *)(v3 + 632)) >> 16;
              v359[1] = bswap32(*(unsigned __int16 *)(v3 + 634)) >> 16;
            }
            v359 += 3;
            --v124;
          }
          while (v124);
        }
        goto LABEL_134;
      case 4:
        if (*((unsigned char *)a2 + 17) == 8)
        {
          if (v118 && result && v117)
          {
            for (; v124; --v124)
            {
              int v142 = v116[1];
              if (v116[1])
              {
                if (v142 == 255)
                {
                  LOBYTE(v143) = *(unsigned char *)(v117 + *v116);
                }
                else
                {
                  unsigned __int16 v144 = *(unsigned __int8 *)(v118 + *v116) * (_WORD)v142 + *(_WORD *)(v3 + 646) * (v142 ^ 0xFF) + 128;
                  unsigned int v143 = HIBYTE(v144) + v144;
                  if ((v123 & 0x2000) != 0) {
                    v143 >>= 8;
                  }
                  else {
                    LOBYTE(v143) = *(unsigned char *)(result + BYTE1(v143));
                  }
                }
              }
              else
              {
                LOBYTE(v143) = *(unsigned char *)(v3 + 636);
              }
              *uint64_t v116 = v143;
              v116 += 2;
            }
          }
          else
          {
            for (; v124; --v124)
            {
              int v333 = v116[1];
              if (v333 != 255)
              {
                if (v116[1])
                {
                  unsigned __int16 v335 = *v116 * (_WORD)v333 + *(_WORD *)(v3 + 636) * (v333 ^ 0xFF) + 128;
                  unsigned int v334 = (HIBYTE(v335) + v335) >> 8;
                }
                else
                {
                  LOBYTE(v334) = *(unsigned char *)(v3 + 636);
                }
                *uint64_t v116 = v334;
              }
              v116 += 2;
            }
          }
          goto LABEL_134;
        }
        if (!v119 || !v120 || !v121)
        {
          if (v124)
          {
            uint64_t v342 = v115 + 2;
            do
            {
              unsigned int v343 = __rev16(*(unsigned __int16 *)(v342 + 1));
              if (v343 != 0xFFFF)
              {
                if (v343)
                {
                  unsigned int v344 = __rev16(*(unsigned __int16 *)(v342 - 1)) * v343
                       + (v343 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 636)
                       + 0x8000;
                  unsigned int v345 = v344 + HIWORD(v344);
                  *(v342 - 1) = HIBYTE(v345);
                  *uint64_t v342 = BYTE2(v345);
                }
                else
                {
                  *(_WORD *)(v342 - 1) = bswap32(*(unsigned __int16 *)(v3 + 636)) >> 16;
                }
              }
              v342 += 4;
              --v124;
            }
            while (v124);
          }
          goto LABEL_134;
        }
        if (!v124) {
          goto LABEL_134;
        }
        int v162 = v115 + 2;
        while (1)
        {
          unsigned int v163 = __rev16(*(unsigned __int16 *)(v162 + 1));
          if (v163)
          {
            if (v163 != 0xFFFF)
            {
              uint64_t result = (v163 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 646);
              unsigned int v165 = result
                   + v163 * *(unsigned __int16 *)(*(void *)(v121 + 8 * (*v162 >> v122)) + 2 * *(v162 - 1))
                   + 0x8000;
              unsigned int v166 = v165 + HIWORD(v165);
              if ((v123 & 0x2000) != 0)
              {
                unsigned int v167 = HIWORD(v166);
                unsigned int v168 = HIBYTE(v166);
              }
              else
              {
                unsigned int v167 = *(unsigned __int16 *)(*(void *)(v120 + 8 * (BYTE2(v166) >> v122)) + 2 * HIBYTE(v166));
                unsigned int v168 = v167 >> 8;
              }
              *(v162 - 1) = v168;
              *int v162 = v167;
              goto LABEL_254;
            }
            unsigned int v164 = *(unsigned __int16 *)(*(void *)(v119 + 8 * (*v162 >> v122)) + 2 * *(v162 - 1));
          }
          else
          {
            unsigned int v164 = *(unsigned __int16 *)(v3 + 636);
          }
          *(_WORD *)(v162 - 1) = bswap32(v164) >> 16;
LABEL_254:
          v162 += 4;
          if (!--v124) {
            goto LABEL_134;
          }
        }
      case 6:
        if (*((unsigned char *)a2 + 17) == 8)
        {
          if (v118 && result && v117)
          {
            if (v124)
            {
              int v145 = v115 + 2;
              do
              {
                int v146 = v145[2];
                if (v145[2])
                {
                  if (v146 == 255)
                  {
                    *(v145 - 1) = *(unsigned char *)(v117 + *(v145 - 1));
                    *int v145 = *(unsigned char *)(v117 + *v145);
                    LOBYTE(v147) = *(unsigned char *)(v117 + v145[1]);
                  }
                  else
                  {
                    int v148 = v146 ^ 0xFF;
                    int v149 = *(unsigned __int16 *)(v3 + 640) * (v146 ^ 0xFF)
                         + *(unsigned __int8 *)(v118 + *(v145 - 1)) * v146
                         + 128;
                    unsigned int v150 = v149 + BYTE1(v149);
                    if ((v123 & 0x2000) != 0) {
                      v150 >>= 8;
                    }
                    else {
                      LOBYTE(v15CoreML::Specification::DictVectorizer::New(this, 0) = *(unsigned char *)(result + BYTE1(v150));
                    }
                    *(v145 - 1) = v150;
                    int v151 = *(unsigned __int16 *)(v3 + 642) * v148 + *(unsigned __int8 *)(v118 + *v145) * v146 + 128;
                    unsigned int v152 = v151 + BYTE1(v151);
                    if ((v123 & 0x2000) != 0) {
                      v152 >>= 8;
                    }
                    else {
                      LOBYTE(v152) = *(unsigned char *)(result + BYTE1(v152));
                    }
                    *int v145 = v152;
                    int v153 = *(unsigned __int16 *)(v3 + 644) * v148 + *(unsigned __int8 *)(v118 + v145[1]) * v146 + 128;
                    unsigned int v147 = v153 + BYTE1(v153);
                    if ((v123 & 0x2000) != 0) {
                      v147 >>= 8;
                    }
                    else {
                      LOBYTE(v147) = *(unsigned char *)(result + BYTE1(v147));
                    }
                  }
                }
                else
                {
                  *(v145 - 1) = *(unsigned char *)(v3 + 630);
                  *int v145 = *(unsigned char *)(v3 + 632);
                  LOBYTE(v147) = *(unsigned char *)(v3 + 634);
                }
                v145[1] = v147;
                v145 += 4;
                --v124;
              }
              while (v124);
            }
          }
          else if (v124)
          {
            uint64_t v336 = v115 + 2;
            do
            {
              int v337 = v336[2];
              if (v337 != 255)
              {
                if (v336[2])
                {
                  __int16 v339 = *(_WORD *)(v3 + 630) * (v337 ^ 0xFF) + *(v336 - 1) * (_WORD)v337 + 128;
                  *(v336 - 1) = (unsigned __int16)(v339 + HIBYTE(v339)) >> 8;
                  __int16 v340 = *(_WORD *)(v3 + 632) * (v337 ^ 0xFF) + *v336 * (_WORD)v337 + 128;
                  *uint64_t v336 = (unsigned __int16)(v340 + HIBYTE(v340)) >> 8;
                  int v341 = *(unsigned __int16 *)(v3 + 634) * (v337 ^ 0xFF) + v336[1] * v337 + 128;
                  unsigned int v338 = (v341 + BYTE1(v341)) >> 8;
                }
                else
                {
                  *(v336 - 1) = *(unsigned char *)(v3 + 630);
                  *uint64_t v336 = *(unsigned char *)(v3 + 632);
                  LOBYTE(v338) = *(unsigned char *)(v3 + 634);
                }
                v336[1] = v338;
              }
              v336 += 4;
              --v124;
            }
            while (v124);
          }
          goto LABEL_134;
        }
        if (!v119 || !v120 || !v121)
        {
          if (v124)
          {
            unsigned int v346 = v115 + 4;
            do
            {
              unsigned int v347 = __rev16(*(unsigned __int16 *)(v346 + 3));
              if (v347 != 0xFFFF)
              {
                if (v347)
                {
                  unsigned int v348 = __rev16(*(unsigned __int16 *)(v346 - 1));
                  unsigned int v349 = __rev16(*(unsigned __int16 *)(v346 + 1));
                  unsigned int v350 = (v347 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 630)
                       + __rev16(*(unsigned __int16 *)(v346 - 3)) * v347
                       + 0x8000;
                  unsigned int v351 = v350 + HIWORD(v350);
                  *(v346 - 3) = HIBYTE(v351);
                  *(v346 - 2) = BYTE2(v351);
                  unsigned int v352 = (v347 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 632) + v348 * v347 + 0x8000;
                  unsigned int v353 = v352 + HIWORD(v352);
                  *(v346 - 1) = HIBYTE(v353);
                  *unsigned int v346 = BYTE2(v353);
                  unsigned int v354 = (v347 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 634) + v349 * v347 + 0x8000;
                  unsigned int v355 = v354 + HIWORD(v354);
                  v346[1] = HIBYTE(v355);
                  v346[2] = BYTE2(v355);
                }
                else
                {
                  *(_WORD *)(v346 - 3) = bswap32(*(unsigned __int16 *)(v3 + 630)) >> 16;
                  *(_WORD *)(v346 - 1) = bswap32(*(unsigned __int16 *)(v3 + 632)) >> 16;
                  *(_WORD *)(v346 + 1) = bswap32(*(unsigned __int16 *)(v3 + 634)) >> 16;
                }
              }
              v346 += 8;
              --v124;
            }
            while (v124);
          }
          goto LABEL_134;
        }
        if (!v124) {
          goto LABEL_134;
        }
        uint64_t v169 = v115 + 4;
        break;
      default:
        goto LABEL_134;
    }
    do
    {
      unsigned int v170 = __rev16(*(unsigned __int16 *)(v169 + 3));
      if (v170)
      {
        if (v170 != 0xFFFF)
        {
          int v172 = v170 ^ 0xFFFF;
          unsigned int v173 = (v170 ^ 0xFFFF) * *(unsigned __int16 *)(v3 + 640)
               + v170 * *(unsigned __int16 *)(*(void *)(v121 + 8 * (*(v169 - 2) >> v122)) + 2 * *(v169 - 3))
               + 0x8000;
          unsigned int v174 = v173 + HIWORD(v173);
          unsigned int v175 = HIBYTE(v174);
          if ((v123 & 0x2000) != 0)
          {
            unsigned int v176 = HIWORD(v174);
          }
          else
          {
            unsigned int v176 = *(unsigned __int16 *)(*(void *)(v120 + 8 * (BYTE2(v174) >> v122)) + 2 * v175);
            unsigned int v175 = v176 >> 8;
          }
          *(v169 - 3) = v175;
          *(v169 - 2) = v176;
          unsigned int v177 = v172 * *(unsigned __int16 *)(v3 + 642)
               + v170 * *(unsigned __int16 *)(*(void *)(v121 + 8 * (*v169 >> v122)) + 2 * *(v169 - 1))
               + 0x8000;
          unsigned int v178 = v177 + HIWORD(v177);
          unsigned int v179 = HIBYTE(v178);
          if ((v123 & 0x2000) != 0)
          {
            unsigned int v180 = HIWORD(v178);
          }
          else
          {
            unsigned int v180 = *(unsigned __int16 *)(*(void *)(v120 + 8 * (BYTE2(v178) >> v122)) + 2 * v179);
            unsigned int v179 = v180 >> 8;
          }
          *(v169 - 1) = v179;
          *uint64_t v169 = v180;
          uint64_t result = *(unsigned __int16 *)(*(void *)(v121 + 8 * (v169[2] >> v122)) + 2 * v169[1]);
          unsigned int v181 = v172 * *(unsigned __int16 *)(v3 + 644)
               + v170 * result
               + 0x8000
               + ((v172 * *(unsigned __int16 *)(v3 + 644) + v170 * result + 0x8000) >> 16);
          unsigned int v182 = HIBYTE(v181);
          if ((v123 & 0x2000) != 0)
          {
            unsigned int v183 = HIWORD(v181);
          }
          else
          {
            unsigned int v183 = *(unsigned __int16 *)(*(void *)(v120 + 8 * (BYTE2(v181) >> v122)) + 2 * v182);
            unsigned int v182 = v183 >> 8;
          }
          v169[1] = v182;
          v169[2] = v183;
          goto LABEL_276;
        }
        *(_WORD *)(v169 - 3) = bswap32(*(unsigned __int16 *)(*(void *)(v119 + 8 * (*(v169 - 2) >> v122))
                                                           + 2 * *(v169 - 3))) >> 16;
        *(_WORD *)(v169 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v119 + 8 * (*v169 >> v122))
                                                           + 2 * *(v169 - 1))) >> 16;
        unsigned int v171 = *(unsigned __int16 *)(*(void *)(v119 + 8 * (v169[2] >> v122)) + 2 * v169[1]);
      }
      else
      {
        *(_WORD *)(v169 - 3) = bswap32(*(unsigned __int16 *)(v3 + 630)) >> 16;
        *(_WORD *)(v169 - 1) = bswap32(*(unsigned __int16 *)(v3 + 632)) >> 16;
        unsigned int v171 = *(unsigned __int16 *)(v3 + 634);
      }
      *(_WORD *)(v169 + 1) = bswap32(v171) >> 16;
LABEL_276:
      v169 += 8;
      --v124;
    }
    while (v124);
  }
LABEL_134:
  int v100 = *(_DWORD *)(v3 + 300);
  if ((v100 & 0x602000) != 0x2000) {
    goto LABEL_170;
  }
  if ((v100 & 0x80) != 0)
  {
    if (*(_WORD *)(v3 + 600)) {
      goto LABEL_170;
    }
    int v101 = *(unsigned __int8 *)(v3 + 607);
    if ((v101 & 4) != 0) {
      goto LABEL_170;
    }
  }
  else
  {
    int v101 = *(unsigned __int8 *)(v3 + 607);
  }
  if (v101 != 3)
  {
    if ((unint64_t v102 = *(unsigned __int8 **)(v3 + 544),
          uint64_t v103 = *(void *)(v3 + 672),
          uint64_t v104 = *(void *)(v3 + 680),
          int v105 = *(_DWORD *)(v3 + 664),
          unsigned int v106 = *a2,
          unsigned int v107 = *((unsigned __int8 *)a2 + 17),
          v107 <= 8)
      && v103
      || v107 == 16 && v104)
    {
      std::string::size_type v108 = v102 + 1;
      switch(*((unsigned char *)a2 + 16))
      {
        case 0:
          if (v107 == 2 && v106)
          {
            unsigned int v109 = 0;
            uint64_t v110 = v102 + 1;
            do
            {
              unsigned int v111 = *v110;
              unint64_t v112 = v111 & 0xC;
              int v113 = (v111 & 0xC) >> 2;
              uint64_t result = (*(unsigned __int8 *)(v103
                                           + ((4 * v112) & 0xFFFFFF3F | ((v113 & 3) << 6) | (v112 >> 2) | v112)) >> 4) & 0xC;
              *v110++ = (*(unsigned char *)(v103
                                  + (((v111 & 0x30) >> 2) & 0xFFFFFF3F | ((((v111 & 0x30) >> 4) & 3) << 6) | ((v111 & 0x30) >> 4) | (unint64_t)(v111 & 0x30))) >> 2) & 0x30 | *(unsigned char *)(v103 + ((v111 >> 6) | ((v111 & 0xC0) >> 4) | ((v111 & 0xC0) >> 2) | (unint64_t)(v111 & 0xC0))) & 0xC0 | (*(unsigned char *)(v103 + ((4 * v112) & 0xFFFFFF3F | ((v113 & 3) << 6) | (v112 >> 2) | v112)) >> 4) & 0xC | (*(unsigned char *)(v103 + 85 * (v111 & 3)) >> 6);
              v109 += 4;
            }
            while (v109 < v106);
            unsigned int v107 = *((unsigned __int8 *)a2 + 17);
          }
          if (v107 == 4)
          {
            if (v106)
            {
              for (unsigned int i = 0; i < v106; i += 2)
              {
                *std::string::size_type v108 = *(unsigned char *)(v103 + (*v108 & 0xF0 | ((unint64_t)*v108 >> 4))) & 0xF0 | (*(unsigned char *)(v103 + (*v108 & 0xF | (16 * (*v108 & 0xF)))) >> 4);
                ++v108;
              }
            }
          }
          else if (v107 == 8)
          {
            for (; v106; --v106)
            {
              *std::string::size_type v108 = *(unsigned char *)(v103 + *v108);
              ++v108;
            }
          }
          else if (v107 == 16 && v106)
          {
            uint64_t v114 = v102 + 2;
            do
            {
              *(_WORD *)(v114 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v104 + 8 * (*v114 >> v105))
                                                                 + 2 * *(v114 - 1))) >> 16;
              v114 += 2;
              --v106;
            }
            while (v106);
          }
          break;
        case 2:
          if (v107 == 8)
          {
            for (; v106; --v106)
            {
              *std::string::size_type v108 = *(unsigned char *)(v103 + *v108);
              v108[1] = *(unsigned char *)(v103 + v108[1]);
              v108[2] = *(unsigned char *)(v103 + v108[2]);
              v108 += 3;
            }
          }
          else if (v106)
          {
            BOOL v376 = v102 + 3;
            do
            {
              *((_WORD *)v376 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v104 + 8 * (*(v376 - 1) >> v105))
                                                                 + 2 * *(v376 - 2))) >> 16;
              *(_WORD *)BOOL v376 = bswap32(*(unsigned __int16 *)(*(void *)(v104 + 8 * (v376[1] >> v105)) + 2 * *v376)) >> 16;
              *((_WORD *)v376 + 1) = bswap32(*(unsigned __int16 *)(*(void *)(v104 + 8 * (v376[3] >> v105))
                                                                 + 2 * v376[2])) >> 16;
              v376 += 6;
              --v106;
            }
            while (v106);
          }
          break;
        case 4:
          if (v107 == 8)
          {
            for (; v106; --v106)
            {
              *std::string::size_type v108 = *(unsigned char *)(v103 + *v108);
              v108 += 2;
            }
          }
          else if (v106)
          {
            BOOL v377 = v102 + 2;
            do
            {
              *(_WORD *)(v377 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v104 + 8 * (*v377 >> v105))
                                                                 + 2 * *(v377 - 1))) >> 16;
              v377 += 4;
              --v106;
            }
            while (v106);
          }
          break;
        case 6:
          if (v107 == 8)
          {
            for (; v106; --v106)
            {
              *std::string::size_type v108 = *(unsigned char *)(v103 + *v108);
              v108[1] = *(unsigned char *)(v103 + v108[1]);
              v108[2] = *(unsigned char *)(v103 + v108[2]);
              v108 += 4;
            }
          }
          else if (v106)
          {
            v378 = v102 + 3;
            do
            {
              *((_WORD *)v378 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v104 + 8 * (*(v378 - 1) >> v105))
                                                                 + 2 * *(v378 - 2))) >> 16;
              *(_WORD *)v378 = bswap32(*(unsigned __int16 *)(*(void *)(v104 + 8 * (v378[1] >> v105)) + 2 * *v378)) >> 16;
              *((_WORD *)v378 + 1) = bswap32(*(unsigned __int16 *)(*(void *)(v104 + 8 * (v378[3] >> v105))
                                                                 + 2 * v378[2])) >> 16;
              v378 += 8;
              --v106;
            }
            while (v106);
          }
          break;
        default:
          break;
      }
    }
  }
LABEL_170:
  int v129 = *(_DWORD *)(v3 + 300);
  if ((~v129 & 0x40080) == 0 && (*((unsigned __int8 *)a2 + 16) | 2) == 6)
  {
    uint64_t result = png_do_strip_channel((uint64_t)a2, (unsigned char *)(*(void *)(v3 + 544) + 1), 0);
    int v129 = *(_DWORD *)(v3 + 300);
  }
  if ((v129 & 0x800000) != 0 && (a2[4] & 4) != 0)
  {
    uint64_t v130 = *(void *)(v3 + 544);
    unsigned int v131 = *a2;
    int v132 = *((unsigned __int8 *)a2 + 17);
    if (v132 != 16)
    {
      if (v132 == 8)
      {
        uint64_t v133 = *(void *)(v3 + 688);
        if (v133)
        {
          if (v131)
          {
            uint64_t v134 = v130 + 1;
            if ((a2[4] & 2) != 0) {
              uint64_t v135 = 4;
            }
            else {
              uint64_t v135 = 2;
            }
            uint64_t v136 = (unsigned char *)(v134 + (v135 - 1));
            do
            {
              unsigned char *v136 = *(unsigned char *)(v133 + *v136);
              v136 += v135;
              --v131;
            }
            while (v131);
          }
          goto LABEL_287;
        }
      }
LABEL_286:
      uint64_t result = png_warning(v3, "png_do_encode_alpha: unexpected call");
      goto LABEL_287;
    }
    uint64_t v184 = *(void *)(v3 + 704);
    if (!v184) {
      goto LABEL_286;
    }
    if (v131)
    {
      int v185 = *(_DWORD *)(v3 + 664);
      if ((a2[4] & 2) != 0) {
        uint64_t v186 = 8;
      }
      else {
        uint64_t v186 = 4;
      }
      uint64_t v187 = (unsigned __int8 *)((v186 - 4) + v130 + 4);
      do
      {
        *(_WORD *)(v187 - 1) = bswap32(*(unsigned __int16 *)(*(void *)(v184 + 8 * (*v187 >> v185))
                                                           + 2 * *(v187 - 1))) >> 16;
        v187 += v186;
        --v131;
      }
      while (v131);
    }
  }
LABEL_287:
  int v188 = *(_DWORD *)(v3 + 300);
  if ((v188 & 0x4000000) != 0 && *((unsigned char *)a2 + 17) == 16)
  {
    uint64_t v189 = *((void *)a2 + 1);
    if (v189 >= 1)
    {
      std::string v190 = (unsigned __int8 *)(*(void *)(v3 + 544) + 1);
      int v191 = &v190[v189];
      uint64_t v192 = v190;
      do
      {
        *v192++ = *v190 + ((0xFFFF * (v190[1] - *v190) + 8388480) >> 24);
        v190 += 2;
      }
      while (v190 < v191);
      int v188 = *(_DWORD *)(v3 + 300);
    }
    *((unsigned char *)a2 + 17) = 8;
    int v193 = *((unsigned __int8 *)a2 + 18);
    *((unsigned char *)a2 + 19) = 8 * v193;
    *((void *)a2 + 1) = *a2 * v193;
  }
  if ((v188 & 0x400) != 0 && *((unsigned char *)a2 + 17) == 16)
  {
    uint64_t v194 = *((void *)a2 + 1);
    if (v194 >= 1)
    {
      unint64_t v195 = (char *)(*(void *)(v3 + 544) + 1);
      uint64_t v196 = &v195[v194];
      uint64_t v197 = v195;
      do
      {
        char v198 = *v197;
        v197 += 2;
        *v195++ = v198;
      }
      while (v197 < v196);
      int v188 = *(_DWORD *)(v3 + 300);
    }
    *((unsigned char *)a2 + 17) = 8;
    int v199 = *((unsigned __int8 *)a2 + 18);
    *((unsigned char *)a2 + 19) = 8 * v199;
    *((void *)a2 + 1) = *a2 * v199;
  }
  if ((v188 & 0x40) != 0)
  {
    if (*((unsigned char *)a2 + 17) != 8)
    {
LABEL_319:
      if (*((void *)a2 + 1))
      {
        int v188 = *(_DWORD *)(v3 + 300);
        goto LABEL_321;
      }
      uint64_t v391 = "png_do_quantize returned rowbytes=0";
LABEL_674:
      png_error(v3, v391);
    }
    uint64_t v200 = (unsigned char *)(*(void *)(v3 + 544) + 1);
    uint64_t v201 = *(void *)(v3 + 880);
    uint64_t v202 = *(void *)(v3 + 888);
    unsigned int v203 = *a2;
    unsigned int v204 = *a2;
    int v205 = *((unsigned __int8 *)a2 + 16);
    if (v201 && v205 == 2)
    {
      if (v204)
      {
        int v206 = (unsigned __int8 *)(*(void *)(v3 + 544) + 1);
        do
        {
          *v200++ = *(unsigned char *)(v201
                             + ((*v206 << 7) & 0x7C00 | (32 * (((unint64_t)v206[1] >> 3) & 0x1F)) | ((unint64_t)v206[2] >> 3)));
          v206 += 3;
          --v204;
        }
        while (v204);
        goto LABEL_314;
      }
    }
    else
    {
      if (!v201 || v205 != 6)
      {
        if (v202 && v205 == 3 && v204)
        {
          do
          {
            *uint64_t v200 = *(unsigned char *)(v202 + *v200);
            ++v200;
            --v204;
          }
          while (v204);
        }
        goto LABEL_319;
      }
      if (v204)
      {
        uint64_t v207 = (unsigned __int8 *)(*(void *)(v3 + 544) + 1);
        do
        {
          *v200++ = *(unsigned char *)(v201
                             + ((*v207 << 7) & 0x7C00 | (32 * (((unint64_t)v207[1] >> 3) & 0x1F)) | ((unint64_t)v207[2] >> 3)));
          v207 += 4;
          --v204;
        }
        while (v204);
LABEL_314:
        unsigned int v208 = *((unsigned __int8 *)a2 + 17);
        *((unsigned char *)a2 + 16) = 3;
        *((unsigned char *)a2 + 18) = 1;
        *((unsigned char *)a2 + 19) = v208;
        if (v208 < 8)
        {
          unint64_t v209 = (v208 * (unint64_t)v203 + 7) >> 3;
LABEL_318:
          *((void *)a2 + 1) = v209;
          goto LABEL_319;
        }
LABEL_317:
        unint64_t v209 = v203 * (unint64_t)(v208 >> 3);
        goto LABEL_318;
      }
    }
    *((unsigned char *)a2 + 16) = 3;
    *((_WORD *)a2 + 9) = 2049;
    unsigned int v208 = 8;
    goto LABEL_317;
  }
LABEL_321:
  if ((v188 & 0x200) != 0 && *((unsigned char *)a2 + 17) == 8 && *((unsigned char *)a2 + 16) != 3)
  {
    uint64_t v210 = *((void *)a2 + 1);
    if (v210 >= 1)
    {
      uint64_t v211 = *(void *)(v3 + 544);
      unint64_t v212 = v211 + 1 + v210 + v210;
      unsigned int v213 = (char *)(v211 + v210);
      uint64_t v214 = v213;
      do
      {
        char v215 = *v214--;
        *(unsigned char *)(v212 - 2) = v215;
        v212 -= 2;
        *(unsigned char *)(v212 + 1) = v215;
        BOOL v216 = v212 > (unint64_t)v213;
        unsigned int v213 = v214;
      }
      while (v216);
      uint64_t v210 = *((void *)a2 + 1);
      int v188 = *(_DWORD *)(v3 + 300);
    }
    *((void *)a2 + 1) = 2 * v210;
    *((unsigned char *)a2 + 17) = 16;
    *((unsigned char *)a2 + 19) = 16 * *((unsigned char *)a2 + 18);
  }
  if ((v188 & 0x4000) != 0 && (*(unsigned char *)(v3 + 293) & 8) != 0)
  {
    uint64_t result = (uint64_t)png_do_gray_to_rgb(a2, *(void *)(v3 + 544) + 1);
    int v188 = *(_DWORD *)(v3 + 300);
  }
  if ((v188 & 0x20) != 0)
  {
    uint64_t result = png_do_invert((uint64_t)a2, (unsigned char *)(*(void *)(v3 + 544) + 1));
    int v188 = *(_DWORD *)(v3 + 300);
  }
  if ((v188 & 0x80000) != 0)
  {
    uint64_t v217 = *(void *)(v3 + 544);
    unsigned int v218 = *a2;
    int v219 = *((unsigned __int8 *)a2 + 16);
    if (v219 == 4)
    {
      if (*((unsigned char *)a2 + 17) == 8)
      {
        if (v218)
        {
          int v221 = (unsigned char *)(v217 + *((void *)a2 + 1));
          do
          {
            *int v221 = ~*v221;
            v221 -= 2;
            --v218;
          }
          while (v218);
        }
      }
      else if (v218)
      {
        int v223 = (unsigned char *)(v217 + *((void *)a2 + 1));
        do
        {
          *int v223 = ~*v223;
          *(v223 - 1) = ~*(v223 - 1);
          v223 -= 4;
          --v218;
        }
        while (v218);
      }
    }
    else if (v219 == 6)
    {
      if (*((unsigned char *)a2 + 17) == 8)
      {
        if (v218)
        {
          int v220 = (unsigned char *)(v217 + *((void *)a2 + 1));
          do
          {
            *int v220 = ~*v220;
            v220 -= 4;
            --v218;
          }
          while (v218);
        }
      }
      else if (v218)
      {
        v222 = (unsigned char *)(v217 + *((void *)a2 + 1));
        do
        {
          unsigned char *v222 = ~*v222;
          *(v222 - 1) = ~*(v222 - 1);
          v222 -= 8;
          --v218;
        }
        while (v218);
      }
    }
  }
  int v224 = *(_DWORD *)(v3 + 300);
  if ((v224 & 8) != 0)
  {
    int v225 = *((unsigned __int8 *)a2 + 16);
    if (v225 != 3)
    {
      uint64_t v226 = *(void *)(v3 + 544);
      int v227 = *((unsigned __int8 *)a2 + 17);
      if ((v225 & 2) != 0)
      {
        int v228 = *(unsigned __int8 *)(v3 + 725);
        int v230 = v227 - *(unsigned __int8 *)(v3 + 727);
        HIDWORD(v393) = v227 - *(unsigned __int8 *)(v3 + 726);
        int v394 = v230;
        int v229 = 3;
      }
      else
      {
        int v228 = *(unsigned __int8 *)(v3 + 728);
        int v229 = 1;
      }
      uint64_t v231 = (unsigned char *)(v226 + 1);
      LODWORD(v393) = v227 - v228;
      if ((v225 & 4) != 0) {
        *((_DWORD *)&v393 + v229++) = v227 - *(unsigned __int8 *)(v3 + 729);
      }
      uint64_t v232 = 0;
      int v233 = 0;
      do
      {
        int v234 = *(_DWORD *)((char *)&v393 + v232);
        BOOL v235 = v234 > 0;
        uint64_t result = v234 < v227;
        if ((v235 & result) == 0) {
          int v234 = 0;
        }
        *(_DWORD *)((char *)&v393 + v232) = v234;
        if ((v235 & result) != 0) {
          int v233 = 1;
        }
        v232 += 4;
      }
      while (4 * v229 != v232);
      if (v233)
      {
        HIDWORD(v236) = v227;
        LODWORD(v236) = v227 - 2;
        switch((v236 >> 1))
        {
          case 0u:
            uint64_t v237 = *((void *)a2 + 1);
            if (v237 >= 1)
            {
              uint64_t v238 = &v231[v237];
              do
              {
                *uint64_t v231 = (*v231 >> 1) & 0x55;
                ++v231;
              }
              while (v231 < v238);
            }
            break;
          case 1u:
            uint64_t v239 = *((void *)a2 + 1);
            if (v239 >= 1)
            {
              BOOL v240 = &v231[v239];
              char v241 = v393;
              unsigned int v242 = (0xFu >> v393) | (16 * (0xFu >> v393));
              do
              {
                *uint64_t v231 = (*v231 >> v241) & v242;
                ++v231;
              }
              while (v231 < v240);
            }
            break;
          case 3u:
            uint64_t v243 = *((void *)a2 + 1);
            if (v243 >= 1)
            {
              int v244 = 0;
              unint64_t v245 = &v231[v243];
              do
              {
                int v246 = *v231 >> *((_DWORD *)&v393 + v244);
                if (v244 + 1 < v229) {
                  ++v244;
                }
                else {
                  int v244 = 0;
                }
                *v231++ = v246;
              }
              while (v231 < v245);
            }
            break;
          case 7u:
            uint64_t v247 = *((void *)a2 + 1);
            if (v247 >= 1)
            {
              int v248 = 0;
              unsigned int v249 = &v231[v247];
              do
              {
                unsigned int v250 = __rev16(*(unsigned __int16 *)v231) >> *((_DWORD *)&v393 + v248);
                if (v248 + 1 < v229) {
                  ++v248;
                }
                else {
                  int v248 = 0;
                }
                *(_WORD *)uint64_t v231 = __rev16(v250);
                v231 += 2;
              }
              while (v231 < v249);
            }
            break;
          default:
            break;
        }
        int v224 = *(_DWORD *)(v3 + 300);
      }
    }
  }
  if ((v224 & 4) != 0)
  {
    unsigned int v251 = *((unsigned __int8 *)a2 + 17);
    if (v251 <= 7)
    {
      uint64_t v252 = *(void *)(v3 + 544);
      uint64_t v253 = v252 + 1;
      uint64_t v254 = *a2;
      if (v251 == 4)
      {
        if (v254)
        {
          int v260 = 4 * (*a2 & 1);
          uint64_t v261 = (unsigned __int8 *)(v253 + ((v254 - 1) >> 1));
          int v262 = (unsigned char *)(v252 + v254);
          unsigned int v263 = *a2;
          do
          {
            int v264 = *v261 >> v260;
            BOOL v65 = v260 == 0;
            BOOL v265 = v260 == 0;
            *v262-- = v264 & 0xF;
            uint64_t v266 = !v65;
            v261 -= v266;
            int v260 = 4 * v265;
            --v263;
          }
          while (v263);
        }
      }
      else if (v251 == 2)
      {
        if (v254)
        {
          int v267 = ~(2 * v254 + 6) & 6;
          BOOL v268 = (unsigned __int8 *)(v253 + ((v254 - 1) >> 2));
          v269 = (unsigned char *)(v252 + v254);
          unsigned int v270 = *a2;
          do
          {
            *v269-- = (*v268 >> v267) & 3;
            BOOL v65 = v267 == 6;
            uint64_t v271 = v267 == 6;
            v267 += 2;
            if (v65) {
              int v267 = 0;
            }
            v268 -= v271;
            --v270;
          }
          while (v270);
        }
      }
      else if (v251 == 1 && v254)
      {
        int v255 = -(int)v254 & 7;
        uint64_t v256 = (unsigned __int8 *)(v253 + ((v254 - 1) >> 3));
        uint64_t v257 = (unsigned char *)(v252 + v254);
        unsigned int v258 = *a2;
        do
        {
          *v257-- = (*v256 >> v255) & 1;
          uint64_t v259 = v255 == 7;
          if (v255 == 7) {
            int v255 = 0;
          }
          else {
            ++v255;
          }
          v256 -= v259;
          --v258;
        }
        while (v258);
      }
      *((unsigned char *)a2 + 17) = 8;
      int v272 = *((unsigned __int8 *)a2 + 18);
      *((unsigned char *)a2 + 19) = 8 * v272;
      *((void *)a2 + 1) = (v254 * v272);
    }
  }
  if (*((unsigned char *)a2 + 16) == 3 && (*(_DWORD *)(v3 + 596) & 0x80000000) == 0) {
    uint64_t result = png_do_check_palette_indexes(v3, (uint64_t)a2);
  }
  int v273 = *(_DWORD *)(v3 + 300);
  if (v273)
  {
    uint64_t result = (uint64_t)png_do_bgr((int *)a2, (__int16 *)(*(void *)(v3 + 544) + 1));
    int v273 = *(_DWORD *)(v3 + 300);
    if ((v273 & 0x10000) == 0)
    {
LABEL_426:
      if ((v273 & 0x8000) == 0) {
        goto LABEL_478;
      }
      goto LABEL_430;
    }
  }
  else if ((v273 & 0x10000) == 0)
  {
    goto LABEL_426;
  }
  uint64_t result = png_do_packswap((uint64_t)a2, (unsigned char *)(*(void *)(v3 + 544) + 1));
  int v273 = *(_DWORD *)(v3 + 300);
  if ((v273 & 0x8000) == 0) {
    goto LABEL_478;
  }
LABEL_430:
  uint64_t v274 = *(void *)(v3 + 544);
  uint64_t v275 = v274 + 1;
  unsigned int v276 = *(unsigned __int16 *)(v3 + 618);
  int v277 = *(_DWORD *)(v3 + 296);
  uint64_t v278 = *a2;
  if (*((unsigned char *)a2 + 16) == 2)
  {
    int v284 = *((unsigned __int8 *)a2 + 17);
    if (v284 == 16)
    {
      if ((v277 & 0x80) != 0)
      {
        uint64_t v308 = v275 + 6 * v278 + 2 * v278;
        if (v278 >= 2)
        {
          int v309 = v278 - 1;
          uint64_t v310 = (unsigned char *)(6 * v278 + v274 - 2);
          __int16 v311 = __rev16(v276);
          do
          {
            *(_WORD *)(v308 - 2) = v311;
            *(unsigned char *)(v308 - 3) = v310[2];
            *(unsigned char *)(v308 - 4) = v310[1];
            *(unsigned char *)(v308 - 5) = *v310;
            *(unsigned char *)(v308 - 6) = *(v310 - 1);
            *(unsigned char *)(v308 - 7) = *(v310 - 2);
            *(unsigned char *)(v308 - 8) = *(v310 - 3);
            v308 -= 8;
            v310 -= 6;
            --v309;
          }
          while (v309);
        }
        *(_WORD *)(v308 - 2) = __rev16(v276);
      }
      else if (v278)
      {
        unsigned int v291 = (unsigned char *)(v274 + 6 * v278 - 2);
        int v292 = (unsigned char *)(v274 + 8 * v278 - 3);
        unsigned int v293 = *a2;
        do
        {
          v292[3] = v291[2];
          v292[2] = v291[1];
          v292[1] = *v291;
          *int v292 = *(v291 - 1);
          *(v292 - 1) = *(v291 - 2);
          *(v292 - 2) = *(v291 - 3);
          *(v292 - 3) = v276;
          *(v292 - 4) = BYTE1(v276);
          v291 -= 6;
          v292 -= 8;
          --v293;
        }
        while (v293);
      }
      char v298 = 3;
      char v299 = 64;
    }
    else
    {
      if (v284 != 8) {
        goto LABEL_478;
      }
      if ((v277 & 0x80) != 0)
      {
        uint64_t v301 = v275 + v278 + 3 * v278;
        if (v278 >= 2)
        {
          int v302 = v278 - 1;
          unint64_t v303 = (unsigned char *)(v274 + 3 * v278);
          do
          {
            *(unsigned char *)(v301 - 1) = v276;
            *(unsigned char *)(v301 - 2) = *v303;
            *(unsigned char *)(v301 - 3) = *(v303 - 1);
            *(unsigned char *)(v301 - 4) = *(v303 - 2);
            v301 -= 4;
            v303 -= 3;
            --v302;
          }
          while (v302);
        }
        *(unsigned char *)(v301 - 1) = v276;
      }
      else if (v278)
      {
        uint64_t v285 = (unsigned char *)(v274 + 3 * v278);
        int v286 = (unsigned char *)(v274 + 4 * v278 - 1);
        unsigned int v287 = *a2;
        do
        {
          v286[1] = *v285;
          unsigned char *v286 = *(v285 - 1);
          *(v286 - 1) = *(v285 - 2);
          *(v286 - 2) = v276;
          v285 -= 3;
          v286 -= 4;
          --v287;
        }
        while (v287);
      }
      char v298 = 2;
      char v299 = 32;
    }
    char v300 = 4;
  }
  else
  {
    if (*((unsigned char *)a2 + 16)) {
      goto LABEL_478;
    }
    int v279 = *((unsigned __int8 *)a2 + 17);
    if (v279 == 16)
    {
      if ((v277 & 0x80) != 0)
      {
        uint64_t v304 = v275 + 2 * v278 + 2 * v278;
        __int16 v305 = __rev16(v276);
        if (v278 >= 2)
        {
          int v306 = v278 - 1;
          int v307 = (unsigned char *)(v274 + 2 * v278);
          do
          {
            *(_WORD *)(v304 - 2) = v305;
            *(unsigned char *)(v304 - 3) = *v307;
            *(unsigned char *)(v304 - 4) = *(v307 - 1);
            v304 -= 4;
            v307 -= 2;
            --v306;
          }
          while (v306);
        }
        *(_WORD *)(v304 - 2) = v305;
      }
      else if (v278)
      {
        uint64_t v288 = (unsigned char *)(v274 + 2 * v278);
        uint64_t v289 = (unsigned char *)(v274 + 4 * v278 - 1);
        unsigned int v290 = *a2;
        do
        {
          v289[1] = *v288;
          unsigned char *v289 = *(v288 - 1);
          *(v289 - 1) = v276;
          *(v289 - 2) = BYTE1(v276);
          v288 -= 2;
          v289 -= 4;
          --v290;
        }
        while (v290);
      }
      char v300 = 2;
      char v299 = 32;
      char v298 = 2;
    }
    else
    {
      if (v279 != 8) {
        goto LABEL_478;
      }
      if ((v277 & 0x80) != 0)
      {
        uint64_t v294 = v275 + v278 + v278;
        if (v278 >= 2)
        {
          BOOL v295 = (char *)(v274 + v278);
          int v296 = v278 - 1;
          do
          {
            *(unsigned char *)(v294 - 1) = v276;
            char v297 = *v295--;
            *(unsigned char *)(v294 - 2) = v297;
            v294 -= 2;
            --v296;
          }
          while (v296);
        }
        *(unsigned char *)(v294 - 1) = v276;
      }
      else if (v278)
      {
        uint64_t v280 = (unsigned char *)(v274 + 2 * v278);
        uint64_t v281 = (char *)(v274 + v278);
        unsigned int v282 = *a2;
        do
        {
          char v283 = *v281--;
          *uint64_t v280 = v283;
          *(v280 - 1) = v276;
          v280 -= 2;
          --v282;
        }
        while (v282);
      }
      char v298 = 1;
      char v299 = 16;
      char v300 = 2;
    }
  }
  *((unsigned char *)a2 + 18) = v300;
  *((unsigned char *)a2 + 19) = v299;
  *((void *)a2 + 1) = (v278 << v298);
  int v273 = *(_DWORD *)(v3 + 300);
LABEL_478:
  if ((v273 & 0x20000) != 0)
  {
    uint64_t v312 = *(void *)(v3 + 544);
    unsigned int v313 = *a2;
    int v314 = *((unsigned __int8 *)a2 + 16);
    if (v314 == 4)
    {
      if (*((unsigned char *)a2 + 17) == 8)
      {
        if (v313)
        {
          uint64_t v317 = (char *)(v312 + *((void *)a2 + 1));
          do
          {
            char v318 = *v317;
            *uint64_t v317 = *(v317 - 1);
            *(v317 - 1) = v318;
            v317 -= 2;
            --v313;
          }
          while (v313);
        }
      }
      else if (v313)
      {
        int v320 = (__int32 *)(*((void *)a2 + 1) + v312 - 3);
        do
        {
          a3.i32[0] = *v320;
          int16x8_t v321 = (int16x8_t)vmovl_u8(a3);
          *(int8x8_t *)v321.i8 = vext_s8(*(int8x8_t *)v321.i8, *(int8x8_t *)v321.i8, 4uLL);
          a3 = (uint8x8_t)vmovn_s16(v321);
          *v320-- = a3.i32[0];
          --v313;
        }
        while (v313);
      }
    }
    else if (v314 == 6)
    {
      if (*((unsigned char *)a2 + 17) == 8)
      {
        if (v313)
        {
          uint64_t v315 = (__int32 *)(*((void *)a2 + 1) + v312 - 3);
          do
          {
            a3.i32[0] = *v315;
            int16x8_t v316 = (int16x8_t)vmovl_u8(a3);
            *(int8x8_t *)v316.i8 = vext_s8(*(int8x8_t *)v316.i8, *(int8x8_t *)v316.i8, 6uLL);
            a3 = (uint8x8_t)vmovn_s16(v316);
            *v315-- = a3.i32[0];
            --v313;
          }
          while (v313);
        }
      }
      else if (v313)
      {
        unsigned int v319 = (int8x8_t *)(*((void *)a2 + 1) + v312 - 7);
        do
        {
          *unsigned int v319 = vext_s8(*v319, *v319, 6uLL);
          --v319;
          --v313;
        }
        while (v313);
      }
    }
  }
  int v322 = *(_DWORD *)(v3 + 300);
  if ((v322 & 0x10) != 0)
  {
    uint64_t result = png_do_swap((uint64_t)a2, (char *)(*(void *)(v3 + 544) + 1));
    int v322 = *(_DWORD *)(v3 + 300);
  }
  if ((v322 & 0x100000) != 0)
  {
    BOOL v323 = *(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(v3 + 264);
    if (v323) {
      uint64_t result = v323(v3, a2, *(void *)(v3 + 544) + 1);
    }
    if (*(unsigned char *)(v3 + 288)) {
      *((unsigned char *)a2 + 17) = *(unsigned char *)(v3 + 288);
    }
    char v324 = *(unsigned char *)(v3 + 289);
    if (v324) {
      *((unsigned char *)a2 + 18) = v324;
    }
    else {
      char v324 = *((unsigned char *)a2 + 18);
    }
    unsigned __int8 v325 = v324 * *((unsigned char *)a2 + 17);
    *((unsigned char *)a2 + 19) = v325;
    BOOL v326 = v325 >= 8u;
    unint64_t v327 = (*a2 * (unint64_t)v325 + 7) >> 3;
    unint64_t v328 = *a2 * (unint64_t)(v325 >> 3);
    if (!v326) {
      unint64_t v328 = v327;
    }
    *((void *)a2 + 1) = v328;
  }
  return result;
}