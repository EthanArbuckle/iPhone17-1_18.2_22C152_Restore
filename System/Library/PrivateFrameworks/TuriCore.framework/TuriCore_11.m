void sub_22434BA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10)
{
  boost::system::system_error::~system_error(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::unique_lock<turi::simple_spinlock>::lock(uint64_t result)
{
  v1 = *(atomic_uchar **)result;
  if (!*(void *)result)
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
    goto LABEL_7;
  }
  if (*(unsigned char *)(result + 8))
  {
LABEL_7:
    std::__throw_system_error(11, "unique_lock::lock: already locked");
    return boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>();
  }
  do
  {
    while (*v1 == 1)
      ;
  }
  while (atomic_exchange(v1, 1u));
  *(unsigned char *)(result + 8) = 1;
  return result;
}

uint64_t boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    char v6 = 0;
    boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::try_lock((uint64_t)&v5);
    if (v6)
    {
      uint64_t v2 = boost::detail::try_lock_impl<std::unique_lock<turi::simple_spinlock> *>(v2 + 16, a2);
      if (v2 == a2)
      {
        uint64_t v5 = 0;
        char v6 = 0;
        uint64_t v2 = a2;
      }
    }
    boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(&v5);
  }
  return v2;
}

void sub_22434BB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void boost::detail::range_lock_guard<std::unique_lock<turi::simple_spinlock> *>::~range_lock_guard(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  while (v1 != v2)
  {
    if (!*(unsigned char *)(v1 + 8))
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
      return;
    }
    v3 = *(unsigned char **)v1;
    __dmb(0xBu);
    unsigned char *v3 = 0;
    *(unsigned char *)(v1 + 8) = 0;
    uint64_t v2 = a1[1];
    uint64_t v1 = *a1 + 16;
    *a1 = v1;
  }
}

unsigned char *boost::unique_lock<std::unique_lock<turi::simple_spinlock>>::~unique_lock(unsigned char *result)
{
  if (result[8])
  {
    uint64_t v1 = *(void *)result;
    if (!*(unsigned char *)(*(void *)result + 8))
    {
      std::__throw_system_error(1, "unique_lock::unlock: not locked");
      __break(1u);
      JUMPOUT(0x22434BC24);
    }
    uint64_t v2 = *(unsigned char **)v1;
    __dmb(0xBu);
    *uint64_t v2 = 0;
    *(unsigned char *)(v1 + 8) = 0;
  }
  return result;
}

void std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>::reserve(void **a1, unint64_t a2)
{
  v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    char v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void turi::ml_data_internal::column_statistics::resize_global_arrays<std::vector<unsigned long>,std::vector<turi::ml_data_internal::column_statistics::element_statistics_accumulator>>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 88);
  v9 = (std::mutex *)(a1 + 296);
  std::mutex::lock((std::mutex *)(a1 + 296));
  if (*(void *)(a1 + 288) <= a2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 2 * (v8 + a2) + 2;
    do
    {
      v12 = &v19[v10];
      *(void *)v12 = 0;
      v12[8] = 0;
      v10 += 16;
    }
    while (v10 != 1024);
    uint64_t v13 = 0;
    uint64_t v14 = a1 + 168;
    do
    {
      v15 = &v19[v13];
      if (v19[v13 + 8])
      {
        v16 = *(unsigned char **)v15;
        __dmb(0xBu);
        unsigned char *v16 = 0;
      }
      *(void *)&v19[v13] = v14;
      v15[8] = 0;
      v13 += 16;
      ++v14;
    }
    while (v13 != 1024);
    boost::detail::lock_impl<std::unique_lock<turi::simple_spinlock> *>(v19, (uint64_t)&v20);
    std::vector<unsigned long>::resize(a3, v11);
    std::vector<xgboost_old::tree::RTreeNodeStat>::resize(a4, v11);
    *(void *)(a1 + 288) = v11;
    uint64_t v17 = 1024;
    do
    {
      if (v19[v17 - 8])
      {
        v18 = *(unsigned char **)&v19[v17 - 16];
        __dmb(0xBu);
        unsigned char *v18 = 0;
      }
      v17 -= 16;
    }
    while (v17);
  }
  std::mutex::unlock(v9);
}

void sub_22434BE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = 1024;
  while (1)
  {
    if (*((unsigned char *)&a9 + v11 - 8))
    {
      v12 = *(unsigned char **)((char *)&a9 + v11 - 16);
      __dmb(0xBu);
      unsigned char *v12 = 0;
    }
    v11 -= 16;
    if (!v11)
    {
      std::mutex::unlock(v9);
      _Unwind_Resume(a1);
    }
  }
}

void turi::dense_bitset::load(turi::dense_bitset *this, turi::iarchive *a2)
{
  v4 = *(void **)this;
  if (v4) {
    free(v4);
  }
  *(void *)this = 0;
  uint64_t v5 = *((void *)a2 + 2);
  if (v5)
  {
    *((void *)this + 1) = *(void *)(v5 + *((void *)a2 + 3));
    *((void *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  char v6 = (uint64_t *)((char *)this + 16);
  uint64_t v7 = *((void *)a2 + 2);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + *((void *)a2 + 3));
    *char v6 = v8;
    *((void *)a2 + 3) += 8;
    if (!v8) {
      return;
    }
  }
  else
  {
    std::istream::read();
    uint64_t v8 = *v6;
    if (!*v6) {
      return;
    }
  }
  v9 = malloc_type_malloc(8 * v8, 0x100004000313F17uLL);
  *(void *)this = v9;
  size_t v10 = 8 * *((void *)this + 2);
  uint64_t v11 = *((void *)a2 + 2);
  if (v11)
  {
    memcpy(v9, (const void *)(v11 + *((void *)a2 + 3)), v10);
    *((void *)a2 + 3) += v10;
  }
  else
  {
    std::istream::read();
  }
}

uint64_t turi::dense_bitset::save(const void **this, turi::oarchive *a2)
{
  v4 = this + 1;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v5)
    {
      size_t v15 = 2 * v5 + 16;
      *((void *)a2 + 5) = v15;
      v16 = (char **)*((void *)a2 + 2);
      if (v16)
      {
        char v6 = *v16;
        size_t v17 = v16[1] - *v16;
        BOOL v18 = v15 >= v17;
        std::vector<char>::size_type v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v19);
          char v6 = (char *)**((void **)a2 + 2);
        }
        else if (!v18)
        {
          v16[1] = &v6[v15];
        }
      }
      else
      {
        char v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v15, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v6;
    }
    else
    {
      char v6 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v6[*((void *)a2 + 4)] = *v4;
    *((void *)a2 + 4) += 8;
  }
  uint64_t v7 = this + 2;
  if (*(void *)a2)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v9 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v9)
    {
      size_t v20 = 2 * v9 + 16;
      *((void *)a2 + 5) = v20;
      v21 = (uint64_t *)*((void *)a2 + 2);
      if (v21)
      {
        uint64_t result = *v21;
        size_t v22 = v21[1] - *v21;
        BOOL v23 = v20 >= v22;
        std::vector<char>::size_type v24 = v20 - v22;
        if (v24 != 0 && v23)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v24);
          uint64_t result = **((void **)a2 + 2);
        }
        else if (!v23)
        {
          v21[1] = result + v20;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*((void **)a2 + 3), v20, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = result;
    }
    else
    {
      uint64_t result = *((void *)a2 + 3);
    }
    *(void *)(result + *((void *)a2 + 4)) = *v7;
    *((void *)a2 + 4) += 8;
  }
  uint64_t v10 = *v7;
  if (*v7)
  {
    uint64_t v11 = *this;
    size_t v12 = 8 * v10;
    if (*(void *)a2)
    {
      return std::ostream::write();
    }
    else
    {
      size_t v13 = *((void *)a2 + 5);
      if (*((void *)a2 + 4) + v12 > v13)
      {
        size_t v25 = 2 * (v13 + v12);
        *((void *)a2 + 5) = v25;
        v26 = (char **)*((void *)a2 + 2);
        if (v26)
        {
          uint64_t v14 = *v26;
          size_t v27 = v26[1] - *v26;
          BOOL v28 = v25 >= v27;
          std::vector<char>::size_type v29 = v25 - v27;
          if (v29 != 0 && v28)
          {
            std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v29);
            uint64_t v14 = (char *)**((void **)a2 + 2);
          }
          else if (!v28)
          {
            v26[1] = &v14[v25];
          }
        }
        else
        {
          uint64_t v14 = (char *)malloc_type_realloc(*((void **)a2 + 3), v25, 0xF6EA6B1uLL);
        }
        *((void *)a2 + 3) = v14;
      }
      else
      {
        uint64_t v14 = (char *)*((void *)a2 + 3);
      }
      uint64_t result = (uint64_t)memcpy(&v14[*((void *)a2 + 4)], v11, v12);
      *((void *)a2 + 4) += v12;
    }
  }
  return result;
}

__n128 OUTLINED_FUNCTION_2_5(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

__n128 OUTLINED_FUNCTION_3_6(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

unint64_t turi::ml_data_internal::estimate_row_block_size(unint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  unint64_t v4 = turi::ml_data_internal::ML_DATA_TARGET_ROW_BYTE_MINIMUM;
  if (*(unsigned char *)(a2 + 2))
  {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  else
  {
    uint64_t v7 = *(uint64_t **)(a2 + 56);
    uint64_t v8 = *(uint64_t **)(a2 + 64);
    if (v7 == v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *v7;
        v7 += 2;
        uint64_t v11 = *(void *)(v10 + 72);
        if (v11 == -1) {
          uint64_t v11 = 0;
        }
        v9 += v11;
      }
      while (v7 != v8);
    }
    if (a1 >= 0x3E8) {
      unint64_t v12 = 1000;
    }
    else {
      unint64_t v12 = a1;
    }
    unint64_t v23 = v12;
    uint64_t v24 = v9;
    std::vector<unsigned long>::vector(&__p, v12, &v24);
    size_t v13 = operator new(0x28uLL);
    *size_t v13 = &unk_26D779B50;
    v13[1] = &v23;
    v13[2] = a2;
    v13[3] = a3;
    v13[4] = &__p;
    v25[3] = v13;
    turi::in_parallel((turi::thread_pool *)v25);
    std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](v25);
    uint64_t v14 = (unint64_t *)__p;
    unint64_t v15 = (unint64_t)((v22 - (unsigned char *)__p) >> 3) >> 1;
    v16 = (unint64_t *)((char *)__p + 8 * v15);
    if (v16 != (unint64_t *)v22)
    {
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>((uint64_t)__p, v16, (unint64_t *)v22);
      uint64_t v14 = (unint64_t *)__p;
    }
    unint64_t v5 = v14[v15];
    size_t v22 = (char *)v14;
    operator delete(v14);
  }
  if (v5 <= 1) {
    unint64_t v17 = 1;
  }
  else {
    unint64_t v17 = v5;
  }
  long double v18 = log2((double)(v4 >> 3) / (double)v17 + 1.0);
  double v19 = exp2(ceil(v18 + 1.0));
  if ((unint64_t)v19 <= 1) {
    return 1;
  }
  else {
    return (unint64_t)v19;
  }
}

void sub_22434C420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D779B50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D779B50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(v5 + 48))
  {
    unint64_t v7 = 0;
    uint64_t v8 = **(void **)(a1 + 8);
    unint64_t v9 = v8 * v3;
    unint64_t v10 = v9 / v4;
    unint64_t v11 = (v8 + v9) / v4;
    do
    {
      uint64_t v12 = *(void *)(v5 + 56) + 16 * v7;
      BOOL v13 = *(void *)(*(void *)v12 + 72) != -1 || v10 >= v11;
      unint64_t v14 = v10;
      if (!v13)
      {
        do
        {
          unint64_t v15 = v14 + 16;
          if (v11 >= v14 + 16) {
            unint64_t v16 = v14 + 16;
          }
          else {
            unint64_t v16 = v11;
          }
          uint64_t v17 = *(void *)(**(void **)(a1 + 24) + 16 * v7);
          (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t *))(*(void *)v17 + 48))(v17, v14, v16, &v21);
          uint64_t v18 = v21;
          if (v22 != v21)
          {
            uint64_t v19 = 0;
            unint64_t v20 = 0;
            do
            {
              *(void *)(**(void **)(a1 + 32) + 8 * (v20 + v14)) += ((uint64_t (*)(uint64_t, uint64_t))turi::ml_data_internal::estimate_num_data_entries)(v12, v18 + v19);
              ++v20;
              uint64_t v18 = v21;
              v19 += 16;
            }
            while (v20 < (v22 - v21) >> 4);
          }
          v14 += 16;
        }
        while (v15 < v11);
        uint64_t v5 = *(void *)(a1 + 16);
      }
      ++v7;
    }
    while (v7 < *(void *)(v5 + 48));
  }
  uint64_t v24 = (void **)&v21;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
}

void sub_22434C664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0,std::allocator<turi::ml_data_internal::estimate_row_block_size(unsigned long,turi::ml_data_internal::row_metadata const&,std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>> const&)::$_0>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  if (a3 != a2)
  {
    uint64_t v3 = a3;
    uint64_t v5 = (unint64_t *)result;
    do
    {
      unint64_t v6 = v3 - v5;
      if (v6 < 2) {
        break;
      }
      if (v6 == 3)
      {
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v5 + 1, v3 - 1);
      }
      if (v6 == 2)
      {
        unint64_t v33 = *(v3 - 1);
        unint64_t v34 = *v5;
        if (v33 < *v5)
        {
          *uint64_t v5 = v33;
          *(v3 - 1) = v34;
        }
        return result;
      }
      if ((char *)v3 - (char *)v5 <= 63)
      {
        return (uint64_t)std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v3);
      }
      unint64_t v7 = &v5[v6 >> 1];
      uint64_t v8 = v3 - 1;
      __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(v5, v7, v3 - 1);
      unint64_t v9 = *v5;
      if (*v5 >= *v7)
      {
        unint64_t v10 = v3 - 1;
        while (--v10 != v5)
        {
          if (*v10 < *v7)
          {
            *uint64_t v5 = *v10;
            unint64_t *v10 = v9;
            __n128 result = (result + 1);
            goto LABEL_13;
          }
        }
        uint64_t v22 = v5 + 1;
        if (v9 >= *v8)
        {
          while (v22 != v8)
          {
            unint64_t v23 = *v22;
            if (v9 < *v22)
            {
              *v22++ = *v8;
              *uint64_t v8 = v23;
              goto LABEL_45;
            }
            ++v22;
          }
          return result;
        }
LABEL_45:
        if (v22 == v8) {
          return result;
        }
        while (1)
        {
          unint64_t v27 = *v5;
          do
          {
            unint64_t v29 = *v22++;
            unint64_t v28 = v29;
          }
          while (v27 >= v29);
          v30 = v22 - 1;
          do
          {
            unint64_t v32 = *--v8;
            unint64_t v31 = v32;
          }
          while (v27 < v32);
          if (v30 >= v8) {
            break;
          }
          unint64_t *v30 = v31;
          *uint64_t v8 = v28;
        }
        uint64_t v5 = v22 - 1;
        if (v30 > a2) {
          return result;
        }
      }
      else
      {
        unint64_t v10 = v3 - 1;
LABEL_13:
        unint64_t v11 = v5 + 1;
        if (v5 + 1 >= v10)
        {
          unint64_t v16 = v5 + 1;
        }
        else
        {
          uint64_t v12 = v5 + 1;
          while (1)
          {
            unint64_t v13 = *v7;
            do
            {
              unint64_t v15 = *v12++;
              unint64_t v14 = v15;
            }
            while (v15 < v13);
            unint64_t v16 = v12 - 1;
            do
            {
              unint64_t v18 = *--v10;
              unint64_t v17 = v18;
            }
            while (v18 >= v13);
            if (v16 >= v10) {
              break;
            }
            unint64_t *v16 = v17;
            unint64_t *v10 = v14;
            __n128 result = (result + 1);
            if (v16 == v7) {
              unint64_t v7 = v10;
            }
          }
        }
        if (v16 != v7)
        {
          unint64_t v19 = *v16;
          if (*v7 < *v16)
          {
            unint64_t *v16 = *v7;
            unint64_t *v7 = v19;
            __n128 result = (result + 1);
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!result)
        {
          if (v16 <= a2)
          {
            uint64_t v24 = v16 + 1;
            while (v24 != v3)
            {
              unint64_t v26 = *(v24 - 1);
              unint64_t v25 = *v24++;
              if (v25 < v26) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v11 != v16)
            {
              unint64_t v21 = *(v11 - 1);
              unint64_t v20 = *v11++;
              if (v20 < v21) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          uint64_t v5 = v16 + 1;
        }
        else {
          uint64_t v3 = v16;
        }
      }
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  unint64_t v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    unint64_t v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<unsigned long *>>(unint64_t *result, unint64_t *a2)
{
  while (result != a2 - 1)
  {
    uint64_t v2 = result++;
    if (v2 != a2 && result != a2)
    {
      unint64_t v3 = *v2;
      unint64_t v4 = result;
      unint64_t v5 = v2;
      unint64_t v6 = result;
      do
      {
        unint64_t v8 = *v6++;
        unint64_t v7 = v8;
        if (v8 < v3)
        {
          unint64_t v3 = v7;
          unint64_t v5 = v4;
        }
        unint64_t v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v2)
      {
        unint64_t v9 = *v2;
        *uint64_t v2 = *v5;
        *unint64_t v5 = v9;
      }
    }
  }
  return result;
}

void validateTrainingInputs<CoreML::Specification::NeuralNetwork>(uint64_t a1@<X0>, void *a2@<X1>, CoreML::Result *a3@<X8>)
{
  v108[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)v105);
  memset(&v104, 0, sizeof(v104));
  if (*(int *)(a1 + 72) <= 1)
  {
    MEMORY[0x22A614700](&v104, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_161;
  }
  uint64_t v7 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  do
  {
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_8:
      unint64_t v10 = v102;
      if (v102 >= v103)
      {
        uint64_t v12 = v101;
        uint64_t v13 = (v102 - v101) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v103 - v101;
        if ((v103 - v101) >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v103, v16);
          uint64_t v12 = v101;
          unint64_t v10 = v102;
        }
        else
        {
          unint64_t v17 = 0;
        }
        unint64_t v18 = &v17[4 * v13];
        *(_DWORD *)unint64_t v18 = v7;
        unint64_t v11 = v18 + 4;
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v101 = v18;
        v102 = v11;
        v103 = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)v102 = v7;
        unint64_t v11 = v10 + 4;
      }
      v102 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(CoreML::Specification **)(*(void *)(a1 + 80) + 8 * v7 + 8);
      while (!CoreML::Specification::isEquivalent(v9, *(const CoreML::Specification::FeatureDescription **)(*(void *)(a1 + 32) + 8 * v8 + 8), v6))
      {
        if (++v8 >= *(int *)(a1 + 24)) {
          goto LABEL_8;
        }
      }
    }
    ++v7;
    uint64_t v20 = *(int *)(a1 + 72);
  }
  while (v7 < v20);
  if (v102 == v101)
  {
    MEMORY[0x22A614700](&v104, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_159;
  }
  if (v20 == (v102 - v101) >> 2)
  {
    MEMORY[0x22A614700](&v104, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_159;
  }
  memset(&v100, 0, sizeof(v100));
  unint64_t v21 = (uint64_t *)a2[8];
  if (!v21) {
    unint64_t v21 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
  uint64_t v22 = *(void *)(v21[4] + 8);
  int v23 = *(_DWORD *)(v22 + 36);
  if (v23 == 11 || v23 == 10) {
    std::string::operator=(&v100, *(const std::string **)(*(void *)(v22 + 24) + 24));
  }
  uint64_t v24 = v101;
  if (v102 == v101) {
    goto LABEL_154;
  }
  unint64_t v25 = 0;
  int v26 = 0;
  v87 = a3;
  do
  {
    int v89 = v26;
    uint64_t v27 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)&v24[4 * v25] + 8);
    unint64_t v28 = *(long long **)(v27 + 16);
    if (*((char *)v28 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v28, *((void *)v28 + 1));
    }
    else
    {
      long long v29 = *v28;
      v99.__r_.__value_.__r.__words[2] = *((void *)v28 + 2);
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v29;
    }
    uint64_t v30 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    size_t size = v99.__r_.__value_.__l.__size_;
    if (!v88) {
      goto LABEL_76;
    }
    unint64_t v32 = *(unsigned __int8 ***)(a1 + 88);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v99.__r_.__value_.__l.__size_;
    }
    unint64_t v34 = (unsigned __int8 *)*((unsigned __int8 *)v32 + 23);
    int v35 = (char)v34;
    if ((char)v34 < 0) {
      unint64_t v34 = v32[1];
    }
    if ((unsigned __int8 *)v33 != v34) {
      goto LABEL_76;
    }
    if (v35 >= 0) {
      v36 = *(unsigned __int8 **)(a1 + 88);
    }
    else {
      v36 = *v32;
    }
    if ((*((unsigned char *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v99.__r_.__value_.__l.__data_, v36, v99.__r_.__value_.__l.__size_)) {
        goto LABEL_76;
      }
    }
    else if (*((unsigned char *)&v99.__r_.__value_.__s + 23))
    {
      v37 = &v99;
      uint64_t v38 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      while (v37->__r_.__value_.__s.__data_[0] == *v36)
      {
        v37 = (std::string *)((char *)v37 + 1);
        ++v36;
        if (!--v38) {
          goto LABEL_57;
        }
      }
LABEL_76:
      int v51 = v89;
      goto LABEL_77;
    }
LABEL_57:
    uint64_t v39 = *(void *)(a1 + 56);
    if (v39) {
      v40 = (uint64_t *)(v39 + 8);
    }
    else {
      v40 = 0;
    }
    uint64_t v41 = *(int *)(a1 + 48);
    if (!v41) {
      goto LABEL_76;
    }
    v42 = &v40[v41];
    v43 = (const void *)v99.__r_.__value_.__r.__words[0];
    while (1)
    {
      uint64_t v44 = *v40;
      uint64_t v45 = *(void *)(*v40 + 16);
      uint64_t v46 = *(unsigned __int8 *)(v45 + 23);
      int v47 = (char)v46;
      if ((v46 & 0x80u) != 0) {
        uint64_t v46 = *(void *)(v45 + 8);
      }
      if (v33 != v46) {
        goto LABEL_75;
      }
      v48 = v47 >= 0 ? *(unsigned __int8 **)(*v40 + 16) : *(unsigned __int8 **)v45;
      if ((v30 & 0x80) != 0) {
        break;
      }
      if (!v30) {
        goto LABEL_104;
      }
      v49 = &v99;
      uint64_t v50 = v30;
      while (v49->__r_.__value_.__s.__data_[0] == *v48)
      {
        v49 = (std::string *)((char *)v49 + 1);
        ++v48;
        if (!--v50) {
          goto LABEL_104;
        }
      }
LABEL_75:
      if (++v40 == v42) {
        goto LABEL_76;
      }
    }
    if (memcmp(v43, v48, size)) {
      goto LABEL_75;
    }
LABEL_104:
    if (*(void *)(v27 + 32)) {
      v66 = *(uint64_t **)(v27 + 32);
    }
    else {
      v66 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*(void *)(v44 + 32)) {
      v67 = *(uint64_t **)(v44 + 32);
    }
    else {
      v67 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (CoreML::Specification::operator==((uint64_t)v66, (uint64_t)v67))
    {
      LODWORD(v30) = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      int v51 = 1;
      size_t size = v99.__r_.__value_.__l.__size_;
LABEL_77:
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v52 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v52 = v100.__r_.__value_.__l.__size_;
      }
      size_t v53 = v30;
      if ((v30 & 0x80u) != 0) {
        size_t v53 = size;
      }
      if (v52 == v53)
      {
        if ((v30 & 0x80u) == 0) {
          v54 = &v99;
        }
        else {
          v54 = (std::string *)v99.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v100.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v64 = memcmp(v100.__r_.__value_.__l.__data_, v54, v100.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((unsigned char *)&v100.__r_.__value_.__s + 23))
        {
          uint64_t v55 = HIBYTE(v100.__r_.__value_.__r.__words[2]) - 1;
          v56 = &v100;
          do
          {
            int v58 = v56->__r_.__value_.__s.__data_[0];
            v56 = (std::string *)((char *)v56 + 1);
            int v57 = v58;
            int v60 = v54->__r_.__value_.__s.__data_[0];
            v54 = (std::string *)((char *)v54 + 1);
            int v59 = v60;
            BOOL v62 = v55-- != 0;
            BOOL v63 = v57 == v59;
            BOOL v64 = v57 == v59;
          }
          while (v63 && v62);
        }
        else
        {
          BOOL v64 = 1;
        }
      }
      else
      {
        BOOL v64 = 0;
      }
      int v26 = v64 | v51;
      char v65 = 1;
      if ((v30 & 0x80) != 0) {
LABEL_100:
      }
        operator delete(v99.__r_.__value_.__l.__data_);
    }
    else
    {
      v68 = *(uint64_t **)(v44 + 32);
      if (!v68) {
        v68 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v68 + 9) == 1) {
        v69 = "Int64";
      }
      else {
        v69 = "String";
      }
      std::string::basic_string[abi:ne180100]<0>(v97, v69);
      v70 = *(uint64_t **)(v27 + 32);
      if (!v70) {
        v70 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v70 + 9) == 1) {
        v71 = "Int64";
      }
      else {
        v71 = "String";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v71);
      std::operator+<char>();
      int v26 = v89;
      v72 = std::string::append(&v90, " doesn't match the expected type of the classifier. Found: ");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if ((v96 & 0x80u) == 0) {
        v74 = __p;
      }
      else {
        v74 = (void **)__p[0];
      }
      if ((v96 & 0x80u) == 0) {
        std::string::size_type v75 = v96;
      }
      else {
        std::string::size_type v75 = (std::string::size_type)__p[1];
      }
      v76 = std::string::append(&v91, (const std::string::value_type *)v74, v75);
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      v78 = std::string::append(&v92, ", expected: ");
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      if ((v98 & 0x80u) == 0) {
        v80 = v97;
      }
      else {
        v80 = (void **)v97[0];
      }
      if ((v98 & 0x80u) == 0) {
        std::string::size_type v81 = v98;
      }
      else {
        std::string::size_type v81 = (std::string::size_type)v97[1];
      }
      v82 = std::string::append(&v93, (const std::string::value_type *)v80, v81);
      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      v84 = std::string::append(&v94, ".");
      std::string::size_type v85 = v84->__r_.__value_.__r.__words[0];
      v108[0] = v84->__r_.__value_.__l.__size_;
      *(void *)((char *)v108 + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
      char v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      v104.__r_.__value_.__r.__words[0] = v85;
      v104.__r_.__value_.__l.__size_ = v108[0];
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v108 + 7);
      *((unsigned char *)&v104.__r_.__value_.__s + 23) = v86;
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      CoreML::Result::Result(v87, 15);
      if ((char)v96 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v98 < 0) {
        operator delete(v97[0]);
      }
      char v65 = 0;
      if ((*((unsigned char *)&v99.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_100;
      }
    }
    if ((v65 & 1) == 0) {
      goto LABEL_157;
    }
    ++v25;
    uint64_t v24 = v101;
  }
  while (v25 < (v102 - v101) >> 2);
  a3 = v87;
  if (v26)
  {
    CoreML::Result::Result(v87);
    goto LABEL_157;
  }
LABEL_154:
  std::operator+<char>();
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  std::string v104 = v99;
  CoreML::Result::Result(a3, 15);
LABEL_157:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
LABEL_159:
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
LABEL_161:
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (v107 < 0) {
    operator delete(v106);
  }
}

void sub_22434D2A8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  unint64_t v3 = *(void **)(v1 - 200);
  if (v3)
  {
    *(void *)(v1 - 192) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetworkRegressor>(uint64_t a1@<X0>, void *a2@<X1>, CoreML::Result *a3@<X8>)
{
  v108[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)v105);
  memset(&v104, 0, sizeof(v104));
  if (*(int *)(a1 + 72) <= 1)
  {
    MEMORY[0x22A614700](&v104, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_161;
  }
  uint64_t v7 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  do
  {
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_8:
      unint64_t v10 = v102;
      if (v102 >= v103)
      {
        uint64_t v12 = v101;
        uint64_t v13 = (v102 - v101) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v103 - v101;
        if ((v103 - v101) >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v103, v16);
          uint64_t v12 = v101;
          unint64_t v10 = v102;
        }
        else
        {
          unint64_t v17 = 0;
        }
        unint64_t v18 = &v17[4 * v13];
        *(_DWORD *)unint64_t v18 = v7;
        unint64_t v11 = v18 + 4;
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v101 = v18;
        v102 = v11;
        v103 = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)v102 = v7;
        unint64_t v11 = v10 + 4;
      }
      v102 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(CoreML::Specification **)(*(void *)(a1 + 80) + 8 * v7 + 8);
      while (!CoreML::Specification::isEquivalent(v9, *(const CoreML::Specification::FeatureDescription **)(*(void *)(a1 + 32) + 8 * v8 + 8), v6))
      {
        if (++v8 >= *(int *)(a1 + 24)) {
          goto LABEL_8;
        }
      }
    }
    ++v7;
    uint64_t v20 = *(int *)(a1 + 72);
  }
  while (v7 < v20);
  if (v102 == v101)
  {
    MEMORY[0x22A614700](&v104, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_159;
  }
  if (v20 == (v102 - v101) >> 2)
  {
    MEMORY[0x22A614700](&v104, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_159;
  }
  memset(&v100, 0, sizeof(v100));
  unint64_t v21 = (uint64_t *)a2[8];
  if (!v21) {
    unint64_t v21 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
  uint64_t v22 = *(void *)(v21[4] + 8);
  int v23 = *(_DWORD *)(v22 + 36);
  if (v23 == 11 || v23 == 10) {
    std::string::operator=(&v100, *(const std::string **)(*(void *)(v22 + 24) + 24));
  }
  uint64_t v24 = v101;
  if (v102 == v101) {
    goto LABEL_154;
  }
  unint64_t v25 = 0;
  int v26 = 0;
  v87 = a3;
  do
  {
    int v89 = v26;
    uint64_t v27 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)&v24[4 * v25] + 8);
    unint64_t v28 = *(long long **)(v27 + 16);
    if (*((char *)v28 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)v28, *((void *)v28 + 1));
    }
    else
    {
      long long v29 = *v28;
      v99.__r_.__value_.__r.__words[2] = *((void *)v28 + 2);
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v29;
    }
    uint64_t v30 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    size_t size = v99.__r_.__value_.__l.__size_;
    if (!v88) {
      goto LABEL_76;
    }
    unint64_t v32 = *(unsigned __int8 ***)(a1 + 88);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v99.__r_.__value_.__l.__size_;
    }
    unint64_t v34 = (unsigned __int8 *)*((unsigned __int8 *)v32 + 23);
    int v35 = (char)v34;
    if ((char)v34 < 0) {
      unint64_t v34 = v32[1];
    }
    if ((unsigned __int8 *)v33 != v34) {
      goto LABEL_76;
    }
    if (v35 >= 0) {
      v36 = *(unsigned __int8 **)(a1 + 88);
    }
    else {
      v36 = *v32;
    }
    if ((*((unsigned char *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v99.__r_.__value_.__l.__data_, v36, v99.__r_.__value_.__l.__size_)) {
        goto LABEL_76;
      }
    }
    else if (*((unsigned char *)&v99.__r_.__value_.__s + 23))
    {
      v37 = &v99;
      uint64_t v38 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      while (v37->__r_.__value_.__s.__data_[0] == *v36)
      {
        v37 = (std::string *)((char *)v37 + 1);
        ++v36;
        if (!--v38) {
          goto LABEL_57;
        }
      }
LABEL_76:
      int v51 = v89;
      goto LABEL_77;
    }
LABEL_57:
    uint64_t v39 = *(void *)(a1 + 56);
    if (v39) {
      v40 = (uint64_t *)(v39 + 8);
    }
    else {
      v40 = 0;
    }
    uint64_t v41 = *(int *)(a1 + 48);
    if (!v41) {
      goto LABEL_76;
    }
    v42 = &v40[v41];
    v43 = (const void *)v99.__r_.__value_.__r.__words[0];
    while (1)
    {
      uint64_t v44 = *v40;
      uint64_t v45 = *(void *)(*v40 + 16);
      uint64_t v46 = *(unsigned __int8 *)(v45 + 23);
      int v47 = (char)v46;
      if ((v46 & 0x80u) != 0) {
        uint64_t v46 = *(void *)(v45 + 8);
      }
      if (v33 != v46) {
        goto LABEL_75;
      }
      v48 = v47 >= 0 ? *(unsigned __int8 **)(*v40 + 16) : *(unsigned __int8 **)v45;
      if ((v30 & 0x80) != 0) {
        break;
      }
      if (!v30) {
        goto LABEL_104;
      }
      v49 = &v99;
      uint64_t v50 = v30;
      while (v49->__r_.__value_.__s.__data_[0] == *v48)
      {
        v49 = (std::string *)((char *)v49 + 1);
        ++v48;
        if (!--v50) {
          goto LABEL_104;
        }
      }
LABEL_75:
      if (++v40 == v42) {
        goto LABEL_76;
      }
    }
    if (memcmp(v43, v48, size)) {
      goto LABEL_75;
    }
LABEL_104:
    if (*(void *)(v27 + 32)) {
      v66 = *(uint64_t **)(v27 + 32);
    }
    else {
      v66 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*(void *)(v44 + 32)) {
      v67 = *(uint64_t **)(v44 + 32);
    }
    else {
      v67 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (CoreML::Specification::operator==((uint64_t)v66, (uint64_t)v67))
    {
      LODWORD(v30) = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      int v51 = 1;
      size_t size = v99.__r_.__value_.__l.__size_;
LABEL_77:
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v52 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v52 = v100.__r_.__value_.__l.__size_;
      }
      size_t v53 = v30;
      if ((v30 & 0x80u) != 0) {
        size_t v53 = size;
      }
      if (v52 == v53)
      {
        if ((v30 & 0x80u) == 0) {
          v54 = &v99;
        }
        else {
          v54 = (std::string *)v99.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v100.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v64 = memcmp(v100.__r_.__value_.__l.__data_, v54, v100.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((unsigned char *)&v100.__r_.__value_.__s + 23))
        {
          uint64_t v55 = HIBYTE(v100.__r_.__value_.__r.__words[2]) - 1;
          v56 = &v100;
          do
          {
            int v58 = v56->__r_.__value_.__s.__data_[0];
            v56 = (std::string *)((char *)v56 + 1);
            int v57 = v58;
            int v60 = v54->__r_.__value_.__s.__data_[0];
            v54 = (std::string *)((char *)v54 + 1);
            int v59 = v60;
            BOOL v62 = v55-- != 0;
            BOOL v63 = v57 == v59;
            BOOL v64 = v57 == v59;
          }
          while (v63 && v62);
        }
        else
        {
          BOOL v64 = 1;
        }
      }
      else
      {
        BOOL v64 = 0;
      }
      int v26 = v64 | v51;
      char v65 = 1;
      if ((v30 & 0x80) != 0) {
LABEL_100:
      }
        operator delete(v99.__r_.__value_.__l.__data_);
    }
    else
    {
      v68 = *(uint64_t **)(v44 + 32);
      if (!v68) {
        v68 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v68 + 9) == 1) {
        v69 = "Int64";
      }
      else {
        v69 = "String";
      }
      std::string::basic_string[abi:ne180100]<0>(v97, v69);
      v70 = *(uint64_t **)(v27 + 32);
      if (!v70) {
        v70 = &CoreML::Specification::_FeatureType_default_instance_;
      }
      if (*((_DWORD *)v70 + 9) == 1) {
        v71 = "Int64";
      }
      else {
        v71 = "String";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v71);
      std::operator+<char>();
      int v26 = v89;
      v72 = std::string::append(&v90, " doesn't match the expected type of the classifier. Found: ");
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v91.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      if ((v96 & 0x80u) == 0) {
        v74 = __p;
      }
      else {
        v74 = (void **)__p[0];
      }
      if ((v96 & 0x80u) == 0) {
        std::string::size_type v75 = v96;
      }
      else {
        std::string::size_type v75 = (std::string::size_type)__p[1];
      }
      v76 = std::string::append(&v91, (const std::string::value_type *)v74, v75);
      long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v77;
      v76->__r_.__value_.__l.__size_ = 0;
      v76->__r_.__value_.__r.__words[2] = 0;
      v76->__r_.__value_.__r.__words[0] = 0;
      v78 = std::string::append(&v92, ", expected: ");
      long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v79;
      v78->__r_.__value_.__l.__size_ = 0;
      v78->__r_.__value_.__r.__words[2] = 0;
      v78->__r_.__value_.__r.__words[0] = 0;
      if ((v98 & 0x80u) == 0) {
        v80 = v97;
      }
      else {
        v80 = (void **)v97[0];
      }
      if ((v98 & 0x80u) == 0) {
        std::string::size_type v81 = v98;
      }
      else {
        std::string::size_type v81 = (std::string::size_type)v97[1];
      }
      v82 = std::string::append(&v93, (const std::string::value_type *)v80, v81);
      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      v84 = std::string::append(&v94, ".");
      std::string::size_type v85 = v84->__r_.__value_.__r.__words[0];
      v108[0] = v84->__r_.__value_.__l.__size_;
      *(void *)((char *)v108 + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
      char v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v104.__r_.__value_.__l.__data_);
      }
      v104.__r_.__value_.__r.__words[0] = v85;
      v104.__r_.__value_.__l.__size_ = v108[0];
      *(std::string::size_type *)((char *)&v104.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v108 + 7);
      *((unsigned char *)&v104.__r_.__value_.__s + 23) = v86;
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v92.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v91.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v90.__r_.__value_.__l.__data_);
      }
      CoreML::Result::Result(v87, 15);
      if ((char)v96 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v98 < 0) {
        operator delete(v97[0]);
      }
      char v65 = 0;
      if ((*((unsigned char *)&v99.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_100;
      }
    }
    if ((v65 & 1) == 0) {
      goto LABEL_157;
    }
    ++v25;
    uint64_t v24 = v101;
  }
  while (v25 < (v102 - v101) >> 2);
  a3 = v87;
  if (v26)
  {
    CoreML::Result::Result(v87);
    goto LABEL_157;
  }
LABEL_154:
  std::operator+<char>();
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  std::string v104 = v99;
  CoreML::Result::Result(a3, 15);
LABEL_157:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
LABEL_159:
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
LABEL_161:
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  if (v107 < 0) {
    operator delete(v106);
  }
}

void sub_22434DC24(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  unint64_t v3 = *(void **)(v1 - 200);
  if (v3)
  {
    *(void *)(v1 - 192) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 153) < 0) {
    operator delete(*(void **)(v1 - 176));
  }
  if (*(char *)(v1 - 121) < 0) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

void validateTrainingInputs<CoreML::Specification::NeuralNetworkClassifier>(uint64_t a1@<X0>, uint64_t a2@<X1>, CoreML::Result *a3@<X8>)
{
  v107[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)v104);
  memset(&v103, 0, sizeof(v103));
  if (*(int *)(a1 + 72) <= 1)
  {
    MEMORY[0x22A614700](&v103, "Must provide training inputs for updatable neural network (expecting both input and target for loss function).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_163;
  }
  uint64_t v7 = 0;
  std::string v100 = 0;
  v101 = 0;
  v102 = 0;
  do
  {
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_8:
      unint64_t v10 = v101;
      if (v101 >= v102)
      {
        uint64_t v12 = v100;
        uint64_t v13 = (v101 - v100) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v102 - v100;
        if ((v102 - v100) >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v102, v16);
          uint64_t v12 = v100;
          unint64_t v10 = v101;
        }
        else
        {
          unint64_t v17 = 0;
        }
        unint64_t v18 = &v17[4 * v13];
        *(_DWORD *)unint64_t v18 = v7;
        unint64_t v11 = v18 + 4;
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        std::string v100 = v18;
        v101 = v11;
        v102 = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)v101 = v7;
        unint64_t v11 = v10 + 4;
      }
      v101 = v11;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(CoreML::Specification **)(*(void *)(a1 + 80) + 8 * v7 + 8);
      while (!CoreML::Specification::isEquivalent(v9, *(const CoreML::Specification::FeatureDescription **)(*(void *)(a1 + 32) + 8 * v8 + 8), v6))
      {
        if (++v8 >= *(int *)(a1 + 24)) {
          goto LABEL_8;
        }
      }
    }
    ++v7;
    uint64_t v20 = *(int *)(a1 + 72);
  }
  while (v7 < v20);
  if (v101 == v100)
  {
    MEMORY[0x22A614700](&v103, "Training inputs don't describe required inputs for the loss (needs both the input and the target).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_161;
  }
  if (v20 == (v101 - v100) >> 2)
  {
    MEMORY[0x22A614700](&v103, "The training inputs must include at least one input from the model itself as required for training (should have at least one input in common with those used for prediction).");
    CoreML::Result::Result(a3, 15);
    goto LABEL_161;
  }
  memset(&v99, 0, sizeof(v99));
  unint64_t v21 = *(uint64_t **)(a2 + 72);
  if (!v21) {
    unint64_t v21 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
  }
  uint64_t v22 = *(void *)(v21[4] + 8);
  int v23 = *(_DWORD *)(v22 + 36);
  if (v23 == 11)
  {
    uint64_t v24 = (const std::string **)(*(void *)(v22 + 24) + 24);
    goto LABEL_36;
  }
  if (v23 == 10)
  {
    uint64_t v24 = (const std::string **)(*(void *)(v22 + 24) + 24);
LABEL_36:
    std::string::operator=(&v99, *v24);
  }
  unint64_t v25 = v100;
  if (v101 == v100) {
    goto LABEL_156;
  }
  unint64_t v26 = 0;
  int v27 = 0;
  v87 = a3;
  do
  {
    uint64_t v28 = *(void *)(*(void *)(a1 + 80) + 8 * *(int *)&v25[4 * v26] + 8);
    long long v29 = *(long long **)(v28 + 16);
    if (*((char *)v29 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v29, *((void *)v29 + 1));
    }
    else
    {
      long long v30 = *v29;
      v98.__r_.__value_.__r.__words[2] = *((void *)v29 + 2);
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v30;
    }
    uint64_t v31 = *(void *)(a1 + 88);
    size_t v32 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    size_t size = v98.__r_.__value_.__l.__size_;
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v34 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v34 = v98.__r_.__value_.__l.__size_;
    }
    uint64_t v35 = *(unsigned __int8 *)(v31 + 23);
    int v36 = (char)v35;
    if ((v35 & 0x80u) != 0) {
      uint64_t v35 = *(void *)(v31 + 8);
    }
    if (v34 != v35) {
      goto LABEL_86;
    }
    v37 = v36 >= 0 ? *(unsigned __int8 **)(a1 + 88) : *(unsigned __int8 **)v31;
    if ((*((unsigned char *)&v98.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v98.__r_.__value_.__l.__data_, v37, v98.__r_.__value_.__l.__size_)) {
        goto LABEL_86;
      }
    }
    else if (*((unsigned char *)&v98.__r_.__value_.__s + 23))
    {
      uint64_t v38 = &v98;
      uint64_t v39 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      do
      {
        if (v38->__r_.__value_.__s.__data_[0] != *v37) {
          goto LABEL_86;
        }
        uint64_t v38 = (std::string *)((char *)v38 + 1);
        ++v37;
        --v39;
      }
      while (v39);
    }
    uint64_t v40 = *(void *)(a1 + 56);
    uint64_t v41 = v40 ? v40 + 8 : 0;
    uint64_t v42 = *(int *)(a1 + 48);
    if (!v42)
    {
LABEL_86:
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v54 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v54 = v99.__r_.__value_.__l.__size_;
      }
      if ((v32 & 0x80u) == 0) {
        size_t v55 = v32;
      }
      else {
        size_t v55 = size;
      }
      if (v54 == v55)
      {
        if ((v32 & 0x80u) == 0) {
          v56 = &v98;
        }
        else {
          v56 = (std::string *)v98.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v99.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v66 = memcmp(v99.__r_.__value_.__l.__data_, v56, v99.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((unsigned char *)&v99.__r_.__value_.__s + 23))
        {
          uint64_t v57 = HIBYTE(v99.__r_.__value_.__r.__words[2]) - 1;
          int v58 = &v99;
          do
          {
            int v60 = v58->__r_.__value_.__s.__data_[0];
            int v58 = (std::string *)((char *)v58 + 1);
            int v59 = v60;
            int v62 = v56->__r_.__value_.__s.__data_[0];
            v56 = (std::string *)((char *)v56 + 1);
            int v61 = v62;
            BOOL v64 = v57-- != 0;
            BOOL v65 = v59 == v61;
            BOOL v66 = v59 == v61;
          }
          while (v65 && v64);
        }
        else
        {
          BOOL v66 = 1;
        }
      }
      else
      {
        BOOL v66 = 0;
      }
      v27 |= v66;
      char v67 = 1;
      if ((v32 & 0x80) != 0) {
        goto LABEL_110;
      }
      goto LABEL_111;
    }
    int v88 = v27;
    uint64_t v43 = v41 + 8 * v42;
    uint64_t v44 = (const void *)v98.__r_.__value_.__r.__words[0];
    while (1)
    {
      uint64_t v45 = *(void *)v41;
      uint64_t v46 = *(void *)(*(void *)v41 + 16);
      uint64_t v47 = *(unsigned __int8 *)(v46 + 23);
      int v48 = (char)v47;
      if ((v47 & 0x80u) != 0) {
        uint64_t v47 = *(void *)(v46 + 8);
      }
      if (v34 != v47) {
        goto LABEL_76;
      }
      v49 = v48 >= 0 ? *(unsigned __int8 **)(*(void *)v41 + 16) : *(unsigned __int8 **)v46;
      if ((v32 & 0x80) != 0) {
        break;
      }
      if (!v32) {
        goto LABEL_78;
      }
      uint64_t v50 = &v98;
      size_t v51 = v32;
      while (v50->__r_.__value_.__s.__data_[0] == *v49)
      {
        uint64_t v50 = (std::string *)((char *)v50 + 1);
        ++v49;
        if (!--v51) {
          goto LABEL_78;
        }
      }
LABEL_76:
      v41 += 8;
      if (v41 == v43)
      {
        int v27 = v88;
        goto LABEL_86;
      }
    }
    if (memcmp(v44, v49, size)) {
      goto LABEL_76;
    }
LABEL_78:
    if (*(void *)(v28 + 32)) {
      std::string::size_type v52 = *(uint64_t **)(v28 + 32);
    }
    else {
      std::string::size_type v52 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*(void *)(v45 + 32)) {
      size_t v53 = *(uint64_t **)(v45 + 32);
    }
    else {
      size_t v53 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (CoreML::Specification::operator==((uint64_t)v52, (uint64_t)v53))
    {
      size_t v32 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      int v27 = 1;
      size_t size = v98.__r_.__value_.__l.__size_;
      goto LABEL_86;
    }
    v68 = *(uint64_t **)(v45 + 32);
    if (!v68) {
      v68 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v68 + 9) == 1) {
      v69 = "Int64";
    }
    else {
      v69 = "String";
    }
    std::string::basic_string[abi:ne180100]<0>(v96, v69);
    v70 = *(uint64_t **)(v28 + 32);
    if (!v70) {
      v70 = &CoreML::Specification::_FeatureType_default_instance_;
    }
    if (*((_DWORD *)v70 + 9) == 1) {
      v71 = "Int64";
    }
    else {
      v71 = "String";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v71);
    int v27 = v88;
    std::operator+<char>();
    v72 = std::string::append(&v89, " doesn't match the expected type of the classifier. Found: ");
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    if ((v95 & 0x80u) == 0) {
      v74 = __p;
    }
    else {
      v74 = (void **)__p[0];
    }
    if ((v95 & 0x80u) == 0) {
      std::string::size_type v75 = v95;
    }
    else {
      std::string::size_type v75 = (std::string::size_type)__p[1];
    }
    v76 = std::string::append(&v90, (const std::string::value_type *)v74, v75);
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    v78 = std::string::append(&v91, ", expected: ");
    long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    if ((v97 & 0x80u) == 0) {
      v80 = v96;
    }
    else {
      v80 = (void **)v96[0];
    }
    if ((v97 & 0x80u) == 0) {
      std::string::size_type v81 = v97;
    }
    else {
      std::string::size_type v81 = (std::string::size_type)v96[1];
    }
    v82 = std::string::append(&v92, (const std::string::value_type *)v80, v81);
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    v84 = std::string::append(&v93, ".");
    std::string::size_type v85 = v84->__r_.__value_.__r.__words[0];
    v107[0] = v84->__r_.__value_.__l.__size_;
    *(void *)((char *)v107 + 7) = *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7);
    char v86 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
    v103.__r_.__value_.__r.__words[0] = v85;
    v103.__r_.__value_.__l.__size_ = v107[0];
    *(std::string::size_type *)((char *)&v103.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v107 + 7);
    *((unsigned char *)&v103.__r_.__value_.__s + 23) = v86;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result(v87, 15);
    if ((char)v95 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v97 < 0) {
      operator delete(v96[0]);
    }
    char v67 = 0;
    if ((*((unsigned char *)&v98.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_110:
    }
      operator delete(v98.__r_.__value_.__l.__data_);
LABEL_111:
    if ((v67 & 1) == 0) {
      goto LABEL_159;
    }
    ++v26;
    unint64_t v25 = v100;
  }
  while (v26 < (v101 - v100) >> 2);
  a3 = v87;
  if (v27)
  {
    CoreML::Result::Result(v87);
    goto LABEL_159;
  }
LABEL_156:
  std::operator+<char>();
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  std::string v103 = v98;
  CoreML::Result::Result(a3, 15);
LABEL_159:
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
LABEL_161:
  if (v100)
  {
    v101 = v100;
    operator delete(v100);
  }
LABEL_163:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v103.__r_.__value_.__l.__data_);
  }
  if (v106 < 0) {
    operator delete(v105);
  }
}

void sub_22434E53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (*(char *)(v63 - 201) < 0) {
    operator delete(*(void **)(v63 - 224));
  }
  BOOL v65 = *(void **)(v63 - 200);
  if (v65)
  {
    *(void *)(v63 - 192) = v65;
    operator delete(v65);
  }
  if (*(char *)(v63 - 153) < 0) {
    operator delete(*(void **)(v63 - 176));
  }
  if (*(char *)(v63 - 121) < 0) {
    operator delete(*(void **)(v63 - 144));
  }
  _Unwind_Resume(exception_object);
}

BOOL validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetwork>@<W0>(uint64_t a1@<X0>, CoreML::Result *a2@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v90 = *MEMORY[0x263EF8340];
  CoreML::Result::Result(a2);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a1 + 24);
  BOOL v65 = v3;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    char v6 = 0;
    while (1)
    {
      ++v5;
      while (1)
      {
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
        if (*(unsigned char *)(v7 + 120)) {
          break;
        }
        if (v5++ >= (int)v4)
        {
          if ((v6 & 1) == 0) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
      }
      int v9 = *(_DWORD *)(v7 + 140);
      if (v9 > 419)
      {
        if (v9 != 420 && v9 != 1045)
        {
LABEL_194:
          std::operator+<char>();
          int v60 = std::string::append(&v66, "' is marked as updatable, however, it is not supported as the type of this layer is neither convolution, inner-product, uni-directional lstm, nor batchedMatMul.");
          int v61 = (uint64_t *)v60->__r_.__value_.__r.__words[0];
          v89.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
          char v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          *(void *)((char *)&v82 + 7) = *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7);
          std::string::size_type v81 = v61;
          *(void *)&long long v82 = v89.__r_.__value_.__r.__words[0];
          HIBYTE(v82) = v62;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v85, 14);
          goto LABEL_21;
        }
      }
      else if (v9 != 100 && v9 != 140)
      {
        goto LABEL_194;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)v7, (uint64_t)&v81);
      *(void *)__p = v81;
      if ((__p[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__p[8]);
      }
      *(_OWORD *)&__p[8] = v82;
      *(void *)&__p[24] = v83;
      if (CoreML::Result::good((CoreML::Result *)__p))
      {
        char v6 = 1;
        uint64_t v4 = *(int *)(a1 + 24);
        if (v5 < v4) {
          continue;
        }
      }
LABEL_19:
      std::string v85 = *(std::string *)__p;
      uint64_t v86 = *(void *)&__p[24];
      memset(&__p[8], 0, 24);
      goto LABEL_23;
    }
  }
LABEL_20:
  std::string::size_type v81 = 0;
  long long v82 = 0uLL;
  MEMORY[0x22A614700](&v81, "The model is marked as updatable, but none of the layers are updatable.");
  CoreML::Result::Result(&v85, 14);
LABEL_21:
  if (SHIBYTE(v82) < 0) {
    operator delete(v81);
  }
LABEL_23:
  if ((__p[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[8]);
  }
  *(void *)unint64_t v3 = v85.__r_.__value_.__r.__words[0];
  unint64_t v10 = (void **)((char *)v3 + 8);
  if (*((char *)v3 + 31) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)unint64_t v10 = *(_OWORD *)&v85.__r_.__value_.__r.__words[1];
  *((void *)v3 + 3) = v86;
  BOOL result = CoreML::Result::good(v3);
  if (result)
  {
    BOOL v64 = (char *)v3 + 8;
    CoreML::Result::Result((CoreML::Result *)__p);
    *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85.__r_.__value_.__l.__size_;
    memset(&v66, 0, sizeof(v66));
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_44:
      int v19 = *(void *)(a1 + 64)
          ? *(uint64_t **)(a1 + 64)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v19 + 6) < 1)
      {
LABEL_63:
        long long v82 = *(_OWORD *)&__p[8];
        std::string::size_type v81 = *(uint64_t **)__p;
        long long v83 = *(char ***)&__p[24];
        memset(&__p[8], 0, 24);
      }
      else
      {
        uint64_t v20 = 0;
        while (1)
        {
          unint64_t v21 = *(long long **)(*(void *)(v19[4] + 8 * v20 + 8) + 16);
          if (*((char *)v21 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v21, *((void *)v21 + 1));
          }
          else
          {
            long long v22 = *v21;
            v89.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
            *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v22;
          }
          uint64_t v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
          if (v23)
          {
            std::operator+<char>();
            uint64_t v24 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
            std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
            v88.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v66.__r_.__value_.__l.__data_);
            }
            v66.__r_.__value_.__r.__words[0] = v25;
            v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v66.__r_.__value_.__s + 23) = v26;
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            unint64_t v3 = v65;
            CoreML::Result::Result(&v81, 14);
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          if (v23) {
            break;
          }
          if (++v20 >= *((int *)v19 + 6)) {
            goto LABEL_63;
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *(long long **)(*(void *)(*(void *)(a1 + 32) + 8 * v12 + 8) + 112);
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v13, *((void *)v13 + 1));
        }
        else
        {
          long long v14 = *v13;
          v89.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v14;
        }
        uint64_t v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
        if (v15)
        {
          std::operator+<char>();
          unint64_t v16 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
          std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
          v88.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          v66.__r_.__value_.__r.__words[0] = v17;
          v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v66.__r_.__value_.__s + 23) = v18;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v81, 14);
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (v15) {
          break;
        }
        if (++v12 >= *(int *)(a1 + 24)) {
          goto LABEL_44;
        }
      }
    }
    int v27 = v64;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v85, (char *)v85.__r_.__value_.__l.__size_);
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
    *(void *)unint64_t v3 = v81;
    if (*((char *)v3 + 31) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)BOOL v64 = v82;
    *((void *)v64 + 2) = v83;
    BOOL result = CoreML::Result::good(v3);
    if (result)
    {
      CoreML::Result::Result((CoreML::Result *)&v85);
      uint64_t v28 = *(uint64_t **)(a1 + 64);
      if (!v28) {
        uint64_t v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      uint64_t v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x22A614700](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        CoreML::Result::Result(&v66, 15);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_188;
      }
      std::string::size_type v81 = (uint64_t *)&v82;
      long long v82 = 0uLL;
      v84[0] = 0;
      v84[1] = 0;
      long long v83 = v84;
      memset(&v89, 0, sizeof(v89));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v89, *(int *)(a1 + 24) + v29);
      if (*(int *)(a1 + 24) >= 1)
      {
        uint64_t v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a1 + 32) + 8 * v30 + 8));
          std::string::size_type size = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v32 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            std::string::size_type v32 = size + 136;
          }
          v89.__r_.__value_.__l.__size_ = v32;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0) {
            operator delete(v77);
          }
          if (*(void *)&__p[24])
          {
            *(void *)&long long v76 = *(void *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a1 + 24));
      }
      std::string::size_type v33 = *(uint64_t **)(a1 + 64);
      if (!v33) {
        std::string::size_type v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v33 + 6) >= 1)
      {
        uint64_t v34 = 0;
        while (1)
        {
          uint64_t v35 = *(const std::string ***)(v33[4] + 8 * v34 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v35);
          std::string::size_type v36 = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v37 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            std::string::size_type v37 = v36 + 136;
          }
          v89.__r_.__value_.__l.__size_ = v37;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0) {
            operator delete(v77);
          }
          if (*(void *)&__p[24])
          {
            *(void *)&long long v76 = *(void *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)v35, (const CoreML::NeuralNetworkValidatorGraph *)&v81, (uint64_t)__p);
          v85.__r_.__value_.__r.__words[0] = *(void *)__p;
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)v85.__r_.__value_.__l.__size_);
          }
          *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
          uint64_t v86 = *(void *)&__p[24];
          if (!CoreML::Result::good((CoreML::Result *)&v85)) {
            break;
          }
          ++v34;
          std::string::size_type v33 = *(uint64_t **)(a1 + 64);
          if (!v33) {
            std::string::size_type v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          }
          if (v34 >= *((int *)v33 + 6)) {
            goto LABEL_107;
          }
        }
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
        unint64_t v3 = v65;
        goto LABEL_186;
      }
LABEL_107:
      uint64_t v38 = (const CoreML::Specification::Optimizer *)v33[5];
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = (const CoreML::Specification::Optimizer *)&CoreML::Specification::_Optimizer_default_instance_;
      }
      validateOptimizer(v39, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(void *)__p;
      int v27 = v64;
      unint64_t v3 = v65;
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      }
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      uint64_t v86 = *(void *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85)) {
        goto LABEL_184;
      }
      if (*(void *)(a1 + 64)) {
        uint64_t v40 = *(const CoreML::Specification::NetworkUpdateParameters **)(a1 + 64);
      }
      else {
        uint64_t v40 = (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      validateOtherTopLevelUpdateParameters(v40, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(void *)__p;
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      }
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      uint64_t v86 = *(void *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
      {
LABEL_184:
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
LABEL_187:
        *(void *)__p = &v89;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v83, v84[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v81, (char *)v82);
LABEL_188:
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85.__r_.__value_.__l.__size_);
        }
        *(void *)unint64_t v3 = v66.__r_.__value_.__r.__words[0];
        if (*((char *)v3 + 31) < 0) {
          operator delete(*(void **)v27);
        }
        *(_OWORD *)int v27 = *(_OWORD *)&v66.__r_.__value_.__r.__words[1];
        *((void *)v27 + 2) = v67;
        return CoreML::Result::good(v3);
      }
      *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = 0uLL;
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74.__r_.__value_.__l.__size_;
      uint64_t v41 = *(uint64_t **)(a1 + 64);
      if (!v41) {
        uint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v41 + 6) < 1)
      {
LABEL_182:
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
LABEL_183:
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v74, (char *)v74.__r_.__value_.__l.__size_);
LABEL_186:
        int v27 = v64;
        goto LABEL_187;
      }
      uint64_t v42 = 0;
      while (1)
      {
        uint64_t v43 = *(long long **)(*(void *)(v41[4] + 8 * v42 + 8) + 16);
        if (*((char *)v43 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v43, *((void *)v43 + 1));
        }
        else
        {
          long long v44 = *v43;
          v88.__r_.__value_.__r.__words[2] = *((void *)v43 + 2);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v44;
        }
        uint64_t v63 = v42;
        long long v76 = 0u;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (long long *)&v88);
        char v45 = 0;
        memset(&v73, 0, sizeof(v73));
        while (*((void *)&v76 + 1))
        {
          unint64_t v46 = *(void *)(*(void *)&__p[8] + 8 * ((unint64_t)v76 / 0xAA))
              + 24 * ((unint64_t)v76 % 0xAA);
          if (*(char *)(v46 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v46, *(void *)(v46 + 8));
          }
          else
          {
            long long v47 = *(_OWORD *)v46;
            v72.__r_.__value_.__r.__words[2] = *(void *)(v46 + 16);
            *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v47;
          }
          std::deque<std::string>::pop_front(__p);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v71, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          }
          else {
            std::string v71 = v72;
          }
          uint64_t NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v81, (const void **)&v71.__r_.__value_.__l.__data_);
          uint64_t v49 = NodeFromName;
          if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName) {
              goto LABEL_136;
            }
            goto LABEL_163;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if (v49)
          {
LABEL_136:
            uint64_t v50 = *(uint64_t **)v49;
            size_t v51 = *(uint64_t **)(v49 + 8);
            while (1)
            {
              if (v50 == v51)
              {
                int v54 = 0;
                goto LABEL_168;
              }
              uint64_t v52 = *v50;
              size_t v53 = (const std::string *)(*v50 + 56);
              if (*(char *)(*v50 + 79) < 0) {
                std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v52 + 56), *(void *)(v52 + 64));
              }
              else {
                std::string v70 = *v53;
              }
              if (&v74.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v74, (const void **)&v70.__r_.__value_.__l.__data_))break; {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v74, (const void **)&v70.__r_.__value_.__l.__data_, (uint64_t)&v70);
              }
              std::deque<std::string>::push_back(__p, (long long *)&v70);
              if (((*(unsigned char *)(v52 + 128) != 0) & v45) == 1)
              {
                memset(&v69, 0, sizeof(v69));
                std::operator+<char>();
                size_t v55 = std::string::append(&v68, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
                v87[0] = v55->__r_.__value_.__l.__size_;
                *(void *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
                char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v69.__r_.__value_.__l.__data_);
                }
                v69.__r_.__value_.__r.__words[0] = v56;
                v69.__r_.__value_.__l.__size_ = v87[0];
                *(std::string::size_type *)((char *)&v69.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v87 + 7);
                *((unsigned char *)&v69.__r_.__value_.__s + 23) = v57;
                if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v68.__r_.__value_.__l.__data_);
                }
                CoreML::Result::Result(&v66, 15);
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v69.__r_.__value_.__l.__data_);
                }
                char v45 = 1;
                int v54 = 1;
              }
              else if (*(unsigned char *)(v52 + 129))
              {
                int v54 = 0;
              }
              else
              {
                if (*(_DWORD *)(v52 + 48) == 175 && *(_DWORD *)(v49 + 52) == 10) {
                  break;
                }
                std::string::operator=(&v73, v53);
                int v54 = 0;
                char v45 = 1;
              }
LABEL_156:
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              if (v54 != 14 && v54) {
                goto LABEL_168;
              }
              ++v50;
            }
            int v54 = 14;
            goto LABEL_156;
          }
LABEL_163:
          std::operator+<char>();
          int v58 = std::string::append(&v69, "'.");
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v69.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v66, 15);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          int v54 = 1;
LABEL_168:
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v72.__r_.__value_.__l.__data_);
            if (v54) {
              goto LABEL_174;
            }
          }
          else if (v54)
          {
            goto LABEL_174;
          }
        }
        int v54 = 0;
LABEL_174:
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        std::deque<std::string>::~deque[abi:ne180100](__p);
        unint64_t v3 = v65;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (v54) {
          goto LABEL_183;
        }
        uint64_t v42 = v63 + 1;
        uint64_t v41 = *(uint64_t **)(a1 + 64);
        if (!v41) {
          uint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        }
        if (v42 >= *((int *)v41 + 6)) {
          goto LABEL_182;
        }
      }
    }
  }
  return result;
}

void sub_22434F458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 233) < 0) {
    operator delete(*(void **)(v47 - 256));
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a12 + 31) < 0) {
    operator delete(*(void **)(a12 + 8));
  }
  _Unwind_Resume(a1);
}

BOOL validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkRegressor>@<W0>(uint64_t a1@<X0>, CoreML::Result *a2@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v90 = *MEMORY[0x263EF8340];
  CoreML::Result::Result(a2);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a1 + 24);
  BOOL v65 = v3;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    char v6 = 0;
    while (1)
    {
      ++v5;
      while (1)
      {
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
        if (*(unsigned char *)(v7 + 120)) {
          break;
        }
        if (v5++ >= (int)v4)
        {
          if ((v6 & 1) == 0) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
      }
      int v9 = *(_DWORD *)(v7 + 140);
      if (v9 > 419)
      {
        if (v9 != 1045 && v9 != 420)
        {
LABEL_194:
          std::operator+<char>();
          int v60 = std::string::append(&v66, "' is marked as updatable, however, it is not supported as the type of this layer is neither convolution, inner-product, uni-directional lstm, nor batchedMatMul.");
          int v61 = (uint64_t *)v60->__r_.__value_.__r.__words[0];
          v89.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
          char v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          *(void *)((char *)&v82 + 7) = *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7);
          std::string::size_type v81 = v61;
          *(void *)&long long v82 = v89.__r_.__value_.__r.__words[0];
          HIBYTE(v82) = v62;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v85, 14);
          goto LABEL_21;
        }
      }
      else if (v9 != 100 && v9 != 140)
      {
        goto LABEL_194;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)v7, (uint64_t)&v81);
      *(void *)__p = v81;
      if ((__p[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__p[8]);
      }
      *(_OWORD *)&__p[8] = v82;
      *(void *)&__p[24] = v83;
      if (CoreML::Result::good((CoreML::Result *)__p))
      {
        char v6 = 1;
        uint64_t v4 = *(int *)(a1 + 24);
        if (v5 < v4) {
          continue;
        }
      }
LABEL_19:
      std::string v85 = *(std::string *)__p;
      uint64_t v86 = *(void *)&__p[24];
      memset(&__p[8], 0, 24);
      goto LABEL_23;
    }
  }
LABEL_20:
  std::string::size_type v81 = 0;
  long long v82 = 0uLL;
  MEMORY[0x22A614700](&v81, "The model is marked as updatable, but none of the layers are updatable.");
  CoreML::Result::Result(&v85, 14);
LABEL_21:
  if (SHIBYTE(v82) < 0) {
    operator delete(v81);
  }
LABEL_23:
  if ((__p[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[8]);
  }
  *(void *)unint64_t v3 = v85.__r_.__value_.__r.__words[0];
  unint64_t v10 = (void **)((char *)v3 + 8);
  if (*((char *)v3 + 31) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)unint64_t v10 = *(_OWORD *)&v85.__r_.__value_.__r.__words[1];
  *((void *)v3 + 3) = v86;
  BOOL result = CoreML::Result::good(v3);
  if (result)
  {
    BOOL v64 = (char *)v3 + 8;
    CoreML::Result::Result((CoreML::Result *)__p);
    *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85.__r_.__value_.__l.__size_;
    memset(&v66, 0, sizeof(v66));
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_44:
      int v19 = *(void *)(a1 + 64)
          ? *(uint64_t **)(a1 + 64)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v19 + 6) < 1)
      {
LABEL_63:
        long long v82 = *(_OWORD *)&__p[8];
        std::string::size_type v81 = *(uint64_t **)__p;
        long long v83 = *(char ***)&__p[24];
        memset(&__p[8], 0, 24);
      }
      else
      {
        uint64_t v20 = 0;
        while (1)
        {
          unint64_t v21 = *(long long **)(*(void *)(v19[4] + 8 * v20 + 8) + 16);
          if (*((char *)v21 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v21, *((void *)v21 + 1));
          }
          else
          {
            long long v22 = *v21;
            v89.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
            *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v22;
          }
          uint64_t v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
          if (v23)
          {
            std::operator+<char>();
            uint64_t v24 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
            std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
            v88.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v66.__r_.__value_.__l.__data_);
            }
            v66.__r_.__value_.__r.__words[0] = v25;
            v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v66.__r_.__value_.__s + 23) = v26;
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            unint64_t v3 = v65;
            CoreML::Result::Result(&v81, 14);
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          if (v23) {
            break;
          }
          if (++v20 >= *((int *)v19 + 6)) {
            goto LABEL_63;
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *(long long **)(*(void *)(*(void *)(a1 + 32) + 8 * v12 + 8) + 112);
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v13, *((void *)v13 + 1));
        }
        else
        {
          long long v14 = *v13;
          v89.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v14;
        }
        uint64_t v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
        if (v15)
        {
          std::operator+<char>();
          unint64_t v16 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
          std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
          v88.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          v66.__r_.__value_.__r.__words[0] = v17;
          v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v66.__r_.__value_.__s + 23) = v18;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v81, 14);
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (v15) {
          break;
        }
        if (++v12 >= *(int *)(a1 + 24)) {
          goto LABEL_44;
        }
      }
    }
    int v27 = v64;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v85, (char *)v85.__r_.__value_.__l.__size_);
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
    *(void *)unint64_t v3 = v81;
    if (*((char *)v3 + 31) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)BOOL v64 = v82;
    *((void *)v64 + 2) = v83;
    BOOL result = CoreML::Result::good(v3);
    if (result)
    {
      CoreML::Result::Result((CoreML::Result *)&v85);
      uint64_t v28 = *(uint64_t **)(a1 + 64);
      if (!v28) {
        uint64_t v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      uint64_t v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x22A614700](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        CoreML::Result::Result(&v66, 15);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_188;
      }
      std::string::size_type v81 = (uint64_t *)&v82;
      long long v82 = 0uLL;
      v84[0] = 0;
      v84[1] = 0;
      long long v83 = v84;
      memset(&v89, 0, sizeof(v89));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v89, *(int *)(a1 + 24) + v29);
      if (*(int *)(a1 + 24) >= 1)
      {
        uint64_t v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a1 + 32) + 8 * v30 + 8));
          std::string::size_type size = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v32 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            std::string::size_type v32 = size + 136;
          }
          v89.__r_.__value_.__l.__size_ = v32;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0) {
            operator delete(v77);
          }
          if (*(void *)&__p[24])
          {
            *(void *)&long long v76 = *(void *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a1 + 24));
      }
      std::string::size_type v33 = *(uint64_t **)(a1 + 64);
      if (!v33) {
        std::string::size_type v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v33 + 6) >= 1)
      {
        uint64_t v34 = 0;
        while (1)
        {
          uint64_t v35 = *(const std::string ***)(v33[4] + 8 * v34 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v35);
          std::string::size_type v36 = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v37 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            std::string::size_type v37 = v36 + 136;
          }
          v89.__r_.__value_.__l.__size_ = v37;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0) {
            operator delete(v77);
          }
          if (*(void *)&__p[24])
          {
            *(void *)&long long v76 = *(void *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)v35, (const CoreML::NeuralNetworkValidatorGraph *)&v81, (uint64_t)__p);
          v85.__r_.__value_.__r.__words[0] = *(void *)__p;
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)v85.__r_.__value_.__l.__size_);
          }
          *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
          uint64_t v86 = *(void *)&__p[24];
          if (!CoreML::Result::good((CoreML::Result *)&v85)) {
            break;
          }
          ++v34;
          std::string::size_type v33 = *(uint64_t **)(a1 + 64);
          if (!v33) {
            std::string::size_type v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          }
          if (v34 >= *((int *)v33 + 6)) {
            goto LABEL_107;
          }
        }
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
        unint64_t v3 = v65;
        goto LABEL_186;
      }
LABEL_107:
      uint64_t v38 = (const CoreML::Specification::Optimizer *)v33[5];
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = (const CoreML::Specification::Optimizer *)&CoreML::Specification::_Optimizer_default_instance_;
      }
      validateOptimizer(v39, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(void *)__p;
      int v27 = v64;
      unint64_t v3 = v65;
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      }
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      uint64_t v86 = *(void *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85)) {
        goto LABEL_184;
      }
      if (*(void *)(a1 + 64)) {
        uint64_t v40 = *(const CoreML::Specification::NetworkUpdateParameters **)(a1 + 64);
      }
      else {
        uint64_t v40 = (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      validateOtherTopLevelUpdateParameters(v40, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(void *)__p;
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      }
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      uint64_t v86 = *(void *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
      {
LABEL_184:
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
LABEL_187:
        *(void *)__p = &v89;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v83, v84[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v81, (char *)v82);
LABEL_188:
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85.__r_.__value_.__l.__size_);
        }
        *(void *)unint64_t v3 = v66.__r_.__value_.__r.__words[0];
        if (*((char *)v3 + 31) < 0) {
          operator delete(*(void **)v27);
        }
        *(_OWORD *)int v27 = *(_OWORD *)&v66.__r_.__value_.__r.__words[1];
        *((void *)v27 + 2) = v67;
        return CoreML::Result::good(v3);
      }
      *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = 0uLL;
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74.__r_.__value_.__l.__size_;
      uint64_t v41 = *(uint64_t **)(a1 + 64);
      if (!v41) {
        uint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v41 + 6) < 1)
      {
LABEL_182:
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
LABEL_183:
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v74, (char *)v74.__r_.__value_.__l.__size_);
LABEL_186:
        int v27 = v64;
        goto LABEL_187;
      }
      uint64_t v42 = 0;
      while (1)
      {
        uint64_t v43 = *(long long **)(*(void *)(v41[4] + 8 * v42 + 8) + 16);
        if (*((char *)v43 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v43, *((void *)v43 + 1));
        }
        else
        {
          long long v44 = *v43;
          v88.__r_.__value_.__r.__words[2] = *((void *)v43 + 2);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v44;
        }
        uint64_t v63 = v42;
        long long v76 = 0u;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (long long *)&v88);
        char v45 = 0;
        memset(&v73, 0, sizeof(v73));
        while (*((void *)&v76 + 1))
        {
          unint64_t v46 = *(void *)(*(void *)&__p[8] + 8 * ((unint64_t)v76 / 0xAA))
              + 24 * ((unint64_t)v76 % 0xAA);
          if (*(char *)(v46 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v46, *(void *)(v46 + 8));
          }
          else
          {
            long long v47 = *(_OWORD *)v46;
            v72.__r_.__value_.__r.__words[2] = *(void *)(v46 + 16);
            *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v47;
          }
          std::deque<std::string>::pop_front(__p);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v71, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          }
          else {
            std::string v71 = v72;
          }
          uint64_t NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v81, (const void **)&v71.__r_.__value_.__l.__data_);
          uint64_t v49 = NodeFromName;
          if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName) {
              goto LABEL_136;
            }
            goto LABEL_163;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if (v49)
          {
LABEL_136:
            uint64_t v50 = *(uint64_t **)v49;
            size_t v51 = *(uint64_t **)(v49 + 8);
            while (1)
            {
              if (v50 == v51)
              {
                int v54 = 0;
                goto LABEL_168;
              }
              uint64_t v52 = *v50;
              size_t v53 = (const std::string *)(*v50 + 56);
              if (*(char *)(*v50 + 79) < 0) {
                std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v52 + 56), *(void *)(v52 + 64));
              }
              else {
                std::string v70 = *v53;
              }
              if (&v74.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v74, (const void **)&v70.__r_.__value_.__l.__data_))break; {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v74, (const void **)&v70.__r_.__value_.__l.__data_, (uint64_t)&v70);
              }
              std::deque<std::string>::push_back(__p, (long long *)&v70);
              if (((*(unsigned char *)(v52 + 128) != 0) & v45) == 1)
              {
                memset(&v69, 0, sizeof(v69));
                std::operator+<char>();
                size_t v55 = std::string::append(&v68, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
                v87[0] = v55->__r_.__value_.__l.__size_;
                *(void *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
                char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v69.__r_.__value_.__l.__data_);
                }
                v69.__r_.__value_.__r.__words[0] = v56;
                v69.__r_.__value_.__l.__size_ = v87[0];
                *(std::string::size_type *)((char *)&v69.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v87 + 7);
                *((unsigned char *)&v69.__r_.__value_.__s + 23) = v57;
                if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v68.__r_.__value_.__l.__data_);
                }
                CoreML::Result::Result(&v66, 15);
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v69.__r_.__value_.__l.__data_);
                }
                char v45 = 1;
                int v54 = 1;
              }
              else if (*(unsigned char *)(v52 + 129))
              {
                int v54 = 0;
              }
              else
              {
                if (*(_DWORD *)(v52 + 48) == 175 && *(_DWORD *)(v49 + 52) == 10) {
                  break;
                }
                std::string::operator=(&v73, v53);
                int v54 = 0;
                char v45 = 1;
              }
LABEL_156:
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              if (v54 != 14 && v54) {
                goto LABEL_168;
              }
              ++v50;
            }
            int v54 = 14;
            goto LABEL_156;
          }
LABEL_163:
          std::operator+<char>();
          int v58 = std::string::append(&v69, "'.");
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v69.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v66, 15);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          int v54 = 1;
LABEL_168:
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v72.__r_.__value_.__l.__data_);
            if (v54) {
              goto LABEL_174;
            }
          }
          else if (v54)
          {
            goto LABEL_174;
          }
        }
        int v54 = 0;
LABEL_174:
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        std::deque<std::string>::~deque[abi:ne180100](__p);
        unint64_t v3 = v65;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (v54) {
          goto LABEL_183;
        }
        uint64_t v42 = v63 + 1;
        uint64_t v41 = *(uint64_t **)(a1 + 64);
        if (!v41) {
          uint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        }
        if (v42 >= *((int *)v41 + 6)) {
          goto LABEL_182;
        }
      }
    }
  }
  return result;
}

void sub_224350470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 233) < 0) {
    operator delete(*(void **)(v47 - 256));
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a12 + 31) < 0) {
    operator delete(*(void **)(a12 + 8));
  }
  _Unwind_Resume(a1);
}

BOOL validateUpdatableNeuralNetwork<CoreML::Specification::NeuralNetworkClassifier>@<W0>(uint64_t a1@<X0>, CoreML::Result *a2@<X8>)
{
  unint64_t v3 = a2;
  uint64_t v90 = *MEMORY[0x263EF8340];
  CoreML::Result::Result(a2);
  CoreML::Result::Result((CoreML::Result *)__p);
  LODWORD(v4) = *(_DWORD *)(a1 + 24);
  BOOL v65 = v3;
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    char v6 = 0;
    while (1)
    {
      ++v5;
      while (1)
      {
        uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8 * v5);
        if (*(unsigned char *)(v7 + 120)) {
          break;
        }
        if (v5++ >= (int)v4)
        {
          if ((v6 & 1) == 0) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
      }
      int v9 = *(_DWORD *)(v7 + 140);
      if (v9 > 419)
      {
        if (v9 != 1045 && v9 != 420)
        {
LABEL_194:
          std::operator+<char>();
          int v60 = std::string::append(&v66, "' is marked as updatable, however, it is not supported as the type of this layer is neither convolution, inner-product, uni-directional lstm, nor batchedMatMul.");
          int v61 = (uint64_t *)v60->__r_.__value_.__r.__words[0];
          v89.__r_.__value_.__r.__words[0] = v60->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v60->__r_.__value_.__r.__words[1] + 7);
          char v62 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          *(void *)((char *)&v82 + 7) = *(std::string::size_type *)((char *)v89.__r_.__value_.__r.__words + 7);
          std::string::size_type v81 = v61;
          *(void *)&long long v82 = v89.__r_.__value_.__r.__words[0];
          HIBYTE(v82) = v62;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v85, 14);
          goto LABEL_21;
        }
      }
      else if (v9 != 100 && v9 != 140)
      {
        goto LABEL_194;
      }
      validateWeightParamsUpdatable((const CoreML::Specification::NeuralNetworkLayer *)v7, (uint64_t)&v81);
      *(void *)__p = v81;
      if ((__p[31] & 0x80000000) != 0) {
        operator delete(*(void **)&__p[8]);
      }
      *(_OWORD *)&__p[8] = v82;
      *(void *)&__p[24] = v83;
      if (CoreML::Result::good((CoreML::Result *)__p))
      {
        char v6 = 1;
        uint64_t v4 = *(int *)(a1 + 24);
        if (v5 < v4) {
          continue;
        }
      }
LABEL_19:
      std::string v85 = *(std::string *)__p;
      uint64_t v86 = *(void *)&__p[24];
      memset(&__p[8], 0, 24);
      goto LABEL_23;
    }
  }
LABEL_20:
  std::string::size_type v81 = 0;
  long long v82 = 0uLL;
  MEMORY[0x22A614700](&v81, "The model is marked as updatable, but none of the layers are updatable.");
  CoreML::Result::Result(&v85, 14);
LABEL_21:
  if (SHIBYTE(v82) < 0) {
    operator delete(v81);
  }
LABEL_23:
  if ((__p[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[8]);
  }
  *(void *)unint64_t v3 = v85.__r_.__value_.__r.__words[0];
  unint64_t v10 = (void **)((char *)v3 + 8);
  if (*((char *)v3 + 31) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)unint64_t v10 = *(_OWORD *)&v85.__r_.__value_.__r.__words[1];
  *((void *)v3 + 3) = v86;
  BOOL result = CoreML::Result::good(v3);
  if (result)
  {
    BOOL v64 = (char *)v3 + 8;
    CoreML::Result::Result((CoreML::Result *)__p);
    *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85.__r_.__value_.__l.__size_;
    memset(&v66, 0, sizeof(v66));
    if (*(int *)(a1 + 24) < 1)
    {
LABEL_44:
      int v19 = *(void *)(a1 + 72)
          ? *(uint64_t **)(a1 + 72)
          : &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      if (*((int *)v19 + 6) < 1)
      {
LABEL_63:
        long long v82 = *(_OWORD *)&__p[8];
        std::string::size_type v81 = *(uint64_t **)__p;
        long long v83 = *(char ***)&__p[24];
        memset(&__p[8], 0, 24);
      }
      else
      {
        uint64_t v20 = 0;
        while (1)
        {
          unint64_t v21 = *(long long **)(*(void *)(v19[4] + 8 * v20 + 8) + 16);
          if (*((char *)v21 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v21, *((void *)v21 + 1));
          }
          else
          {
            long long v22 = *v21;
            v89.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
            *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v22;
          }
          uint64_t v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
          if (v23)
          {
            std::operator+<char>();
            uint64_t v24 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
            std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
            v88.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
            char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v66.__r_.__value_.__l.__data_);
            }
            v66.__r_.__value_.__r.__words[0] = v25;
            v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v66.__r_.__value_.__s + 23) = v26;
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v74.__r_.__value_.__l.__data_);
            }
            unint64_t v3 = v65;
            CoreML::Result::Result(&v81, 14);
          }
          else
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          if (v23) {
            break;
          }
          if (++v20 >= *((int *)v19 + 6)) {
            goto LABEL_63;
          }
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
      while (1)
      {
        uint64_t v13 = *(long long **)(*(void *)(*(void *)(a1 + 32) + 8 * v12 + 8) + 112);
        if (*((char *)v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)v13, *((void *)v13 + 1));
        }
        else
        {
          long long v14 = *v13;
          v89.__r_.__value_.__r.__words[2] = *((void *)v13 + 2);
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v14;
        }
        uint64_t v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v85, (const void **)&v89.__r_.__value_.__l.__data_);
        if (v15)
        {
          std::operator+<char>();
          unint64_t v16 = std::string::append(&v74, "', i.e., there are more than one layers or loss layers with this name.");
          std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
          v88.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          v66.__r_.__value_.__r.__words[0] = v17;
          v66.__r_.__value_.__l.__size_ = v88.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&v66.__r_.__value_.__s + 23) = v18;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v81, 14);
        }
        else
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v85, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&v89);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v89.__r_.__value_.__l.__data_);
        }
        if (v15) {
          break;
        }
        if (++v12 >= *(int *)(a1 + 24)) {
          goto LABEL_44;
        }
      }
    }
    int v27 = v64;
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v85, (char *)v85.__r_.__value_.__l.__size_);
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
    *(void *)unint64_t v3 = v81;
    if (*((char *)v3 + 31) < 0) {
      operator delete(*(void **)v64);
    }
    *(_OWORD *)BOOL v64 = v82;
    *((void *)v64 + 2) = v83;
    BOOL result = CoreML::Result::good(v3);
    if (result)
    {
      CoreML::Result::Result((CoreML::Result *)&v85);
      uint64_t v28 = *(uint64_t **)(a1 + 72);
      if (!v28) {
        uint64_t v28 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      uint64_t v29 = *((int *)v28 + 6);
      if ((int)v29 >= 2)
      {
        memset(__p, 0, 24);
        MEMORY[0x22A614700](__p, "This model has more than one loss layers specified, which is not supported at the moment.");
        CoreML::Result::Result(&v66, 15);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_188;
      }
      std::string::size_type v81 = (uint64_t *)&v82;
      long long v82 = 0uLL;
      v84[0] = 0;
      v84[1] = 0;
      long long v83 = v84;
      memset(&v89, 0, sizeof(v89));
      std::vector<CoreML::LayerNode>::resize((uint64_t *)&v89, *(int *)(a1 + 24) + v29);
      if (*(int *)(a1 + 24) >= 1)
      {
        uint64_t v30 = 0;
        do
        {
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, *(const CoreML::Specification::NeuralNetworkLayer **)(*(void *)(a1 + 32) + 8 * v30 + 8));
          std::string::size_type size = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v32 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            std::string::size_type v32 = size + 136;
          }
          v89.__r_.__value_.__l.__size_ = v32;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0) {
            operator delete(v77);
          }
          if (*(void *)&__p[24])
          {
            *(void *)&long long v76 = *(void *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          ++v30;
        }
        while (v30 < *(int *)(a1 + 24));
      }
      std::string::size_type v33 = *(uint64_t **)(a1 + 72);
      if (!v33) {
        std::string::size_type v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v33 + 6) >= 1)
      {
        uint64_t v34 = 0;
        while (1)
        {
          uint64_t v35 = *(const std::string ***)(v33[4] + 8 * v34 + 8);
          CoreML::LayerNode::LayerNode((CoreML::LayerNode *)__p, v35);
          std::string::size_type v36 = v89.__r_.__value_.__l.__size_;
          if (v89.__r_.__value_.__l.__size_ >= v89.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v37 = std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>((uint64_t *)&v89, (uint64_t)__p);
          }
          else
          {
            std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)&v89.__r_.__value_.__r.__words[2], v89.__r_.__value_.__l.__size_, (uint64_t)__p);
            std::string::size_type v37 = v36 + 136;
          }
          v89.__r_.__value_.__l.__size_ = v37;
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
          if (v78 < 0) {
            operator delete(v77);
          }
          if (*(void *)&__p[24])
          {
            *(void *)&long long v76 = *(void *)&__p[24];
            operator delete(*(void **)&__p[24]);
          }
          if (*(void *)__p)
          {
            *(void *)&__p[8] = *(void *)__p;
            operator delete(*(void **)__p);
          }
          CoreML::NeuralNetworkValidatorGraph::insertNode(&v81, (CoreML::LayerNode *)(v89.__r_.__value_.__l.__size_ - 136));
          validateLossLayer((const CoreML::Specification::LossLayer *)v35, (const CoreML::NeuralNetworkValidatorGraph *)&v81, (uint64_t)__p);
          v85.__r_.__value_.__r.__words[0] = *(void *)__p;
          if (SHIBYTE(v86) < 0) {
            operator delete((void *)v85.__r_.__value_.__l.__size_);
          }
          *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
          uint64_t v86 = *(void *)&__p[24];
          if (!CoreML::Result::good((CoreML::Result *)&v85)) {
            break;
          }
          ++v34;
          std::string::size_type v33 = *(uint64_t **)(a1 + 72);
          if (!v33) {
            std::string::size_type v33 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
          }
          if (v34 >= *((int *)v33 + 6)) {
            goto LABEL_107;
          }
        }
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
        unint64_t v3 = v65;
        goto LABEL_186;
      }
LABEL_107:
      uint64_t v38 = (const CoreML::Specification::Optimizer *)v33[5];
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = (const CoreML::Specification::Optimizer *)&CoreML::Specification::_Optimizer_default_instance_;
      }
      validateOptimizer(v39, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(void *)__p;
      int v27 = v64;
      unint64_t v3 = v65;
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      }
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      uint64_t v86 = *(void *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85)) {
        goto LABEL_184;
      }
      if (*(void *)(a1 + 72)) {
        uint64_t v40 = *(const CoreML::Specification::NetworkUpdateParameters **)(a1 + 72);
      }
      else {
        uint64_t v40 = (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      validateOtherTopLevelUpdateParameters(v40, (uint64_t)__p);
      v85.__r_.__value_.__r.__words[0] = *(void *)__p;
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)v85.__r_.__value_.__l.__size_);
      }
      *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[8];
      uint64_t v86 = *(void *)&__p[24];
      if (!CoreML::Result::good((CoreML::Result *)&v85))
      {
LABEL_184:
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
LABEL_187:
        *(void *)__p = &v89;
        std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v83, v84[0]);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v81, (char *)v82);
LABEL_188:
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85.__r_.__value_.__l.__size_);
        }
        *(void *)unint64_t v3 = v66.__r_.__value_.__r.__words[0];
        if (*((char *)v3 + 31) < 0) {
          operator delete(*(void **)v27);
        }
        *(_OWORD *)int v27 = *(_OWORD *)&v66.__r_.__value_.__r.__words[1];
        *((void *)v27 + 2) = v67;
        return CoreML::Result::good(v3);
      }
      *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = 0uLL;
      v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74.__r_.__value_.__l.__size_;
      uint64_t v41 = *(uint64_t **)(a1 + 72);
      if (!v41) {
        uint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
      }
      if (*((int *)v41 + 6) < 1)
      {
LABEL_182:
        std::string v66 = v85;
        uint64_t v67 = v86;
        *(_OWORD *)&v85.__r_.__value_.__r.__words[1] = 0uLL;
        uint64_t v86 = 0;
LABEL_183:
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v74, (char *)v74.__r_.__value_.__l.__size_);
LABEL_186:
        int v27 = v64;
        goto LABEL_187;
      }
      uint64_t v42 = 0;
      while (1)
      {
        uint64_t v43 = *(long long **)(*(void *)(v41[4] + 8 * v42 + 8) + 16);
        if (*((char *)v43 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v43, *((void *)v43 + 1));
        }
        else
        {
          long long v44 = *v43;
          v88.__r_.__value_.__r.__words[2] = *((void *)v43 + 2);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v44;
        }
        uint64_t v63 = v42;
        long long v76 = 0u;
        memset(__p, 0, sizeof(__p));
        std::deque<std::string>::push_back(__p, (long long *)&v88);
        char v45 = 0;
        memset(&v73, 0, sizeof(v73));
        while (*((void *)&v76 + 1))
        {
          unint64_t v46 = *(void *)(*(void *)&__p[8] + 8 * ((unint64_t)v76 / 0xAA))
              + 24 * ((unint64_t)v76 % 0xAA);
          if (*(char *)(v46 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v46, *(void *)(v46 + 8));
          }
          else
          {
            long long v47 = *(_OWORD *)v46;
            v72.__r_.__value_.__r.__words[2] = *(void *)(v46 + 16);
            *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v47;
          }
          std::deque<std::string>::pop_front(__p);
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v71, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
          }
          else {
            std::string v71 = v72;
          }
          uint64_t NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)&v81, (const void **)&v71.__r_.__value_.__l.__data_);
          uint64_t v49 = NodeFromName;
          if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (NodeFromName) {
              goto LABEL_136;
            }
            goto LABEL_163;
          }
          operator delete(v71.__r_.__value_.__l.__data_);
          if (v49)
          {
LABEL_136:
            uint64_t v50 = *(uint64_t **)v49;
            size_t v51 = *(uint64_t **)(v49 + 8);
            while (1)
            {
              if (v50 == v51)
              {
                int v54 = 0;
                goto LABEL_168;
              }
              uint64_t v52 = *v50;
              size_t v53 = (const std::string *)(*v50 + 56);
              if (*(char *)(*v50 + 79) < 0) {
                std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v52 + 56), *(void *)(v52 + 64));
              }
              else {
                std::string v70 = *v53;
              }
              if (&v74.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&v74, (const void **)&v70.__r_.__value_.__l.__data_))break; {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v74, (const void **)&v70.__r_.__value_.__l.__data_, (uint64_t)&v70);
              }
              std::deque<std::string>::push_back(__p, (long long *)&v70);
              if (((*(unsigned char *)(v52 + 128) != 0) & v45) == 1)
              {
                memset(&v69, 0, sizeof(v69));
                std::operator+<char>();
                size_t v55 = std::string::append(&v68, "), which does not support backpropagation, between an updatable marked layer and the loss function.");
                std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
                v87[0] = v55->__r_.__value_.__l.__size_;
                *(void *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
                char v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
                v55->__r_.__value_.__l.__size_ = 0;
                v55->__r_.__value_.__r.__words[2] = 0;
                v55->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v69.__r_.__value_.__l.__data_);
                }
                v69.__r_.__value_.__r.__words[0] = v56;
                v69.__r_.__value_.__l.__size_ = v87[0];
                *(std::string::size_type *)((char *)&v69.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v87 + 7);
                *((unsigned char *)&v69.__r_.__value_.__s + 23) = v57;
                if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v68.__r_.__value_.__l.__data_);
                }
                CoreML::Result::Result(&v66, 15);
                if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v69.__r_.__value_.__l.__data_);
                }
                char v45 = 1;
                int v54 = 1;
              }
              else if (*(unsigned char *)(v52 + 129))
              {
                int v54 = 0;
              }
              else
              {
                if (*(_DWORD *)(v52 + 48) == 175 && *(_DWORD *)(v49 + 52) == 10) {
                  break;
                }
                std::string::operator=(&v73, v53);
                int v54 = 0;
                char v45 = 1;
              }
LABEL_156:
              if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v70.__r_.__value_.__l.__data_);
              }
              if (v54 != 14 && v54) {
                goto LABEL_168;
              }
              ++v50;
            }
            int v54 = 14;
            goto LABEL_156;
          }
LABEL_163:
          std::operator+<char>();
          int v58 = std::string::append(&v69, "'.");
          long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v69.__r_.__value_.__l.__data_);
          }
          CoreML::Result::Result(&v66, 15);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v70.__r_.__value_.__l.__data_);
          }
          int v54 = 1;
LABEL_168:
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v72.__r_.__value_.__l.__data_);
            if (v54) {
              goto LABEL_174;
            }
          }
          else if (v54)
          {
            goto LABEL_174;
          }
        }
        int v54 = 0;
LABEL_174:
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        std::deque<std::string>::~deque[abi:ne180100](__p);
        unint64_t v3 = v65;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if (v54) {
          goto LABEL_183;
        }
        uint64_t v42 = v63 + 1;
        uint64_t v41 = *(uint64_t **)(a1 + 72);
        if (!v41) {
          uint64_t v41 = &CoreML::Specification::_NetworkUpdateParameters_default_instance_;
        }
        if (v42 >= *((int *)v41 + 6)) {
          goto LABEL_182;
        }
      }
    }
  }
  return result;
}

void sub_224351488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 233) < 0) {
    operator delete(*(void **)(v47 - 256));
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a12 + 31) < 0) {
    operator delete(*(void **)(a12 + 8));
  }
  _Unwind_Resume(a1);
}

void validateWeightParamsUpdatable(const CoreML::Specification::NeuralNetworkLayer *a1@<X0>, uint64_t a2@<X8>)
{
  v34[2] = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v31);
  __p = 0;
  long long v30 = 0uLL;
  int v4 = *((_DWORD *)a1 + 35);
  if (v4 == 140)
  {
    uint64_t v11 = *((void *)a1 + 16);
    int v12 = *(unsigned __int8 *)(v11 + 48);
    BOOL v7 = *(unsigned char *)(v11 + 48) != 0;
    BOOL v20 = *(unsigned char *)(v11 + 48)
       && ((uint64_t v13 = *(uint64_t **)(v11 + 24)) != 0
         ? (long long v14 = *(uint64_t **)(v11 + 24))
         : (long long v14 = &CoreML::Specification::_WeightParams_default_instance_),
           (int v12 = *((unsigned __int8 *)v14 + 72) != 0, v13)
         ? (BOOL v15 = v13 == &CoreML::Specification::_WeightParams_default_instance_)
         : (BOOL v15 = 1),
           !v15)
       && v13[8] != 0;
    unint64_t v21 = *(uint64_t **)(v11 + 16);
    std::string::size_type v17 = &CoreML::Specification::_WeightParams_default_instance_;
    if (v21) {
      BOOL v22 = v21 == &CoreML::Specification::_WeightParams_default_instance_;
    }
    else {
      BOOL v22 = 1;
    }
    BOOL v23 = !v22 && v21[8] != 0;
    if (v21) {
      std::string::size_type v17 = v21;
    }
    if (v23) {
      goto LABEL_50;
    }
  }
  else
  {
    if (v4 != 100) {
      goto LABEL_49;
    }
    uint64_t v5 = *((void *)a1 + 16);
    int v6 = *(unsigned __int8 *)(v5 + 153);
    BOOL v7 = *(unsigned char *)(v5 + 153) != 0;
    BOOL v16 = *(unsigned char *)(v5 + 153)
       && ((uint64_t v8 = *(uint64_t **)(v5 + 120)) != 0
         ? (int v9 = *(uint64_t **)(v5 + 120))
         : (int v9 = &CoreML::Specification::_WeightParams_default_instance_),
           (int v6 = *((unsigned __int8 *)v9 + 72), v8)
         ? (BOOL v10 = v8 == &CoreML::Specification::_WeightParams_default_instance_)
         : (BOOL v10 = 1),
           !v10)
       && v8[8] != 0;
    std::string::size_type v17 = *(uint64_t **)(v5 + 112);
    if (v17) {
      BOOL v18 = v17 == &CoreML::Specification::_WeightParams_default_instance_;
    }
    else {
      BOOL v18 = 1;
    }
    BOOL v19 = !v18 && v17[8] != 0;
    if (!v17) {
      std::string::size_type v17 = &CoreML::Specification::_WeightParams_default_instance_;
    }
    int v12 = v6 != 0;
    BOOL v20 = v16;
    if (v19) {
      goto LABEL_50;
    }
  }
  if (v20)
  {
LABEL_50:
    std::operator+<char>();
    std::string::size_type v25 = std::string::append(&v28, "', has quantized weights/bias param. Quantized weights/bias not supported for update.");
    goto LABEL_51;
  }
  if ((v12 | !v7) == 1 && *((unsigned char *)v17 + 72) != 0)
  {
LABEL_49:
    *(void *)a2 = v31;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)v32;
    *(void *)(a2 + 24) = v33;
    v32[0] = 0;
    v32[1] = 0;
    uint64_t v33 = 0;
    goto LABEL_56;
  }
  std::operator+<char>();
  std::string::size_type v25 = std::string::append(&v28, "', has a weight/bias param which is not marked as updatable.");
LABEL_51:
  char v26 = (void *)v25->__r_.__value_.__r.__words[0];
  v34[0] = v25->__r_.__value_.__l.__size_;
  *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  char v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  __p = v26;
  *(void *)&long long v30 = v34[0];
  *(void *)((char *)&v30 + 7) = *(void *)((char *)v34 + 7);
  HIBYTE(v30) = v27;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a2, 14);
LABEL_56:
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
}

void sub_22435197C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CoreML::LayerNode>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<CoreML::LayerNode>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 136 * a2;
    while (v3 != v7)
    {
      v3 -= 136;
      std::allocator<CoreML::LayerNode>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void CoreML::LayerNode::~LayerNode(void **this)
{
  unint64_t v4 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v4 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  uint64_t v2 = this[3];
  if (v2)
  {
    this[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = *this;
  if (*this)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

uint64_t *CoreML::NeuralNetworkValidatorGraph::insertNode(uint64_t **this, CoreML::LayerNode *a2)
{
  uint64_t v3 = (const void **)*((void *)a2 + 10);
  unint64_t v4 = (const void **)*((void *)a2 + 11);
  if (v3 != v4)
  {
    BOOL v5 = (char *)(this + 3);
    unint64_t v6 = (char *)(this + 4);
    std::string::size_type v37 = (char *)a2 + 16;
    do
    {
      if (v6 != (char *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v5, v3))
      {
        uint64_t v7 = *(void **)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)v5, v3);
        int v9 = (void *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = ((uint64_t)v9 - *(void *)a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = v8 - *(void *)a2;
          uint64_t v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
            uint64_t v13 = v11 + 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            BOOL v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v37, v14);
          }
          else {
            BOOL v15 = 0;
          }
          BOOL v16 = &v15[8 * v11];
          *(void *)BOOL v16 = v7;
          BOOL v10 = v16 + 8;
          BOOL v18 = *(char **)a2;
          std::string::size_type v17 = (char *)*((void *)a2 + 1);
          if (v17 != *(char **)a2)
          {
            do
            {
              uint64_t v19 = *((void *)v17 - 1);
              v17 -= 8;
              *((void *)v16 - 1) = v19;
              v16 -= 8;
            }
            while (v17 != v18);
            std::string::size_type v17 = *(char **)a2;
          }
          *(void *)a2 = v16;
          *((void *)a2 + 1) = v10;
          *((void *)a2 + 2) = &v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          void *v9 = v7;
          BOOL v10 = v9 + 1;
        }
        *((void *)a2 + 1) = v10;
        unint64_t v20 = v7[5];
        unint64_t v21 = (void *)v7[4];
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v23 = v7[3];
          uint64_t v24 = ((uint64_t)v21 - v23) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = v20 - v23;
          uint64_t v26 = v25 >> 2;
          if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27) {
            std::string v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v7 + 5), v27);
          }
          else {
            std::string v28 = 0;
          }
          uint64_t v29 = &v28[8 * v24];
          *(void *)uint64_t v29 = a2;
          BOOL v22 = v29 + 8;
          uint64_t v31 = (char *)v7[3];
          long long v30 = (char *)v7[4];
          if (v30 != v31)
          {
            do
            {
              uint64_t v32 = *((void *)v30 - 1);
              v30 -= 8;
              *((void *)v29 - 1) = v32;
              v29 -= 8;
            }
            while (v30 != v31);
            long long v30 = (char *)v7[3];
          }
          v7[3] = v29;
          v7[4] = v22;
          v7[5] = &v28[8 * v27];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          void *v21 = a2;
          BOOL v22 = v21 + 1;
        }
        v7[4] = v22;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  uint64_t v34 = (long long *)*((void *)a2 + 13);
  for (i = (long long *)*((void *)a2 + 14); v34 != i; uint64_t v34 = (long long *)((char *)v34 + 24))
  {
    uint64_t v38 = v34;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 3, (const void **)v34, (uint64_t)&std::piecewise_construct, &v38)[7] = (uint64_t)a2;
  }
  uint64_t v38 = (long long *)((char *)a2 + 56);
  BOOL result = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this, (const void **)a2 + 7, (uint64_t)&std::piecewise_construct, &v38);
  result[7] = (uint64_t)a2;
  return result;
}

void validateLossLayer(const CoreML::Specification::LossLayer *a1@<X0>, const CoreML::NeuralNetworkValidatorGraph *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  CoreML::Result::Result((CoreML::Result *)&v57);
  __p = 0;
  long long v56 = 0uLL;
  int v6 = *((_DWORD *)a1 + 9);
  if (v6 == 11)
  {
    int v9 = *(long long **)(*((void *)a1 + 3) + 16);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v54.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v10;
    }
    BOOL v16 = (char *)a2 + 24;
    std::string::size_type v17 = (CoreML::Specification::MeanSquaredErrorLossLayer *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a2 + 24, (const void **)&v54.__r_.__value_.__l.__data_);
    BOOL v18 = (const CoreML::NeuralNetworkValidatorGraph *)((char *)a2 + 32);
    if (v18 == v17)
    {
      std::operator+<char>();
      unint64_t v27 = std::string::append(&v63, "', input is not generated within the graph.");
      std::string v28 = (void *)v27->__r_.__value_.__r.__words[0];
      v62.__r_.__value_.__r.__words[0] = v27->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
      char v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v56) < 0) {
        operator delete(__p);
      }
      __p = v28;
      *(void *)&long long v56 = v62.__r_.__value_.__r.__words[0];
      *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 7);
      HIBYTE(v56) = v29;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      CoreML::Result::Result((_DWORD *)a3, 15);
      int v30 = 1;
      goto LABEL_78;
    }
    if (*((_DWORD *)a1 + 9) == 11) {
      uint64_t v19 = (uint64_t *)*((void *)a1 + 3);
    }
    else {
      uint64_t v19 = CoreML::Specification::MeanSquaredErrorLossLayer::default_instance(v17);
    }
    uint64_t v34 = v19[3];
    if (*(char *)(v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v34, *(void *)(v34 + 8));
    }
    else
    {
      long long v35 = *(_OWORD *)v34;
      v63.__r_.__value_.__r.__words[2] = *(void *)(v34 + 16);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v35;
    }
    if (v18 == (CoreML::Specification::MeanSquaredErrorLossLayer *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)v16, (const void **)&v63.__r_.__value_.__l.__data_))
    {
      int v30 = 2;
      goto LABEL_76;
    }
    std::operator+<char>();
    std::string::size_type v36 = std::string::append(&v62, "', target is generated within the graph.");
    std::string::size_type v37 = (void *)v36->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v36->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7);
    char v38 = HIBYTE(v36->__r_.__value_.__r.__words[2]);
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0) {
      operator delete(__p);
    }
    __p = v37;
    *(void *)&long long v56 = v60.__r_.__value_.__r.__words[0];
    *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    HIBYTE(v56) = v38;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    CoreML::Result::Result((_DWORD *)a3, 15);
LABEL_75:
    int v30 = 1;
LABEL_76:
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
LABEL_78:
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (v30 == 2)
    {
      *(void *)a3 = v57;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v58;
      *(void *)(a3 + 24) = v59;
      v58[0] = 0;
      v58[1] = 0;
      uint64_t v59 = 0;
    }
    goto LABEL_82;
  }
  if (v6 == 10)
  {
    uint64_t v7 = *(long long **)(*((void *)a1 + 3) + 16);
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v8 = *v7;
      v54.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v8;
    }
    unint64_t v14 = (long long *)*((void *)a1 + 2);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)v14, *((void *)v14 + 1));
    }
    else
    {
      long long v15 = *v14;
      v63.__r_.__value_.__r.__words[2] = *((void *)v14 + 2);
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v53, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
    }
    else {
      std::string v53 = v63;
    }
    uint64_t NodeFromName = CoreML::NeuralNetworkValidatorGraph::getNodeFromName((uint64_t)a2, (const void **)&v53.__r_.__value_.__l.__data_);
    unint64_t v21 = (uint64_t *)NodeFromName;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v53.__r_.__value_.__l.__data_);
      if (v21)
      {
LABEL_25:
        uint64_t v22 = *v21;
        uint64_t v23 = v21[1];
        if (*v21 == v23)
        {
LABEL_28:
          std::operator+<char>();
          uint64_t v24 = std::string::append(&v62, "', input is not generated from a softmax output.");
          uint64_t v25 = (void *)v24->__r_.__value_.__r.__words[0];
          v60.__r_.__value_.__r.__words[0] = v24->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
          char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v56) < 0) {
            operator delete(__p);
          }
          __p = v25;
          *(void *)&long long v56 = v60.__r_.__value_.__r.__words[0];
          *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
          HIBYTE(v56) = v26;
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
LABEL_74:
          CoreML::Result::Result((_DWORD *)a3, 15);
          goto LABEL_75;
        }
        while (*(_DWORD *)(*(void *)v22 + 48) != 175)
        {
          v22 += 8;
          if (v22 == v23) {
            goto LABEL_28;
          }
        }
        uint64_t v39 = *(unsigned __int8 **)(*(void *)v22 + 104);
        uint64_t v40 = v39[23];
        if ((v40 & 0x80u) == 0) {
          uint64_t v41 = v39[23];
        }
        else {
          uint64_t v41 = *((void *)v39 + 1);
        }
        std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v54.__r_.__value_.__l.__size_;
        }
        if (v41 == size)
        {
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v43 = &v54;
          }
          else {
            uint64_t v43 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          if ((v40 & 0x80) == 0)
          {
            if (v39[23])
            {
              while (*v39 == v43->__r_.__value_.__s.__data_[0])
              {
                ++v39;
                uint64_t v43 = (std::string *)((char *)v43 + 1);
                if (!--v40) {
                  goto LABEL_87;
                }
              }
              goto LABEL_70;
            }
LABEL_87:
            if (*((_DWORD *)a1 + 9) == 10) {
              uint64_t v47 = (uint64_t *)*((void *)a1 + 3);
            }
            else {
              uint64_t v47 = CoreML::Specification::CategoricalCrossEntropyLossLayer::default_instance((CoreML::Specification::CategoricalCrossEntropyLossLayer *)NodeFromName);
            }
            uint64_t v48 = v47[3];
            if (*(char *)(v48 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v48, *(void *)(v48 + 8));
            }
            else
            {
              long long v49 = *(_OWORD *)v48;
              v62.__r_.__value_.__r.__words[2] = *(void *)(v48 + 16);
              *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v49;
            }
            if ((const CoreML::NeuralNetworkValidatorGraph *)((char *)a2 + 32) == (const CoreML::NeuralNetworkValidatorGraph *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a2 + 24, (const void **)&v62.__r_.__value_.__l.__data_))
            {
              int v30 = 2;
            }
            else
            {
              std::operator+<char>();
              uint64_t v50 = std::string::append(&v60, "', target is generated within the graph.");
              size_t v51 = (void *)v50->__r_.__value_.__r.__words[0];
              v61[0] = v50->__r_.__value_.__l.__size_;
              *(void *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
              char v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(v56) < 0) {
                operator delete(__p);
              }
              __p = v51;
              *(void *)&long long v56 = v61[0];
              *(void *)((char *)&v56 + 7) = *(void *)((char *)v61 + 7);
              HIBYTE(v56) = v52;
              if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v60.__r_.__value_.__l.__data_);
              }
              CoreML::Result::Result((_DWORD *)a3, 15);
              int v30 = 1;
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
            goto LABEL_76;
          }
          uint64_t NodeFromName = memcmp(*(const void **)v39, v43, *((void *)v39 + 1));
          if (!NodeFromName) {
            goto LABEL_87;
          }
        }
LABEL_70:
        std::operator+<char>();
        long long v44 = std::string::append(&v62, "', input is not generated from a softmax output.");
        char v45 = (void *)v44->__r_.__value_.__r.__words[0];
        v60.__r_.__value_.__r.__words[0] = v44->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
        char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v56) < 0) {
          operator delete(__p);
        }
        __p = v45;
        *(void *)&long long v56 = v60.__r_.__value_.__r.__words[0];
        *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
        HIBYTE(v56) = v46;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        goto LABEL_74;
      }
    }
    else if (NodeFromName)
    {
      goto LABEL_25;
    }
    std::operator+<char>();
    uint64_t v31 = std::string::append(&v62, "'.");
    uint64_t v32 = (void *)v31->__r_.__value_.__r.__words[0];
    v60.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
    char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56) < 0) {
      operator delete(__p);
    }
    __p = v32;
    *(void *)&long long v56 = v60.__r_.__value_.__r.__words[0];
    *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 7);
    HIBYTE(v56) = v33;
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    goto LABEL_74;
  }
  std::operator+<char>();
  uint64_t v11 = std::string::append(&v54, "', only cross entropy loss and MSE are supported.");
  uint64_t v12 = (void *)v11->__r_.__value_.__r.__words[0];
  v63.__r_.__value_.__r.__words[0] = v11->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56) < 0) {
    operator delete(__p);
  }
  __p = v12;
  *(void *)&long long v56 = v63.__r_.__value_.__r.__words[0];
  *(void *)((char *)&v56 + 7) = *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 7);
  HIBYTE(v56) = v13;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  CoreML::Result::Result((_DWORD *)a3, 15);
LABEL_82:
  if (SHIBYTE(v56) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(v58[0]);
  }
}

void sub_224352498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 - 89) < 0) {
    operator delete(*(void **)(v41 - 112));
  }
  if (*(char *)(v41 - 57) < 0) {
    operator delete(*(void **)(v41 - 80));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

void validateOptimizer(const CoreML::Specification::Optimizer *a1@<X0>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v23);
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  int v4 = *((_DWORD *)a1 + 7);
  if (v4 != 10)
  {
    if (v4 != 11)
    {
      MEMORY[0x22A614700](v21, "Optimizer is not recognized.");
      CoreML::Result::Result((_DWORD *)a2, 15);
      goto LABEL_75;
    }
    BOOL v5 = (uint64_t *)*((void *)a1 + 2);
    if (v5 == &CoreML::Specification::_AdamOptimizer_default_instance_ || !v5[2])
    {
      long long v15 = "ADAM optimizer should include learningRate parameter.";
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "learningRate");
      if (v5[2]) {
        int v6 = (uint64_t *)v5[2];
      }
      else {
        int v6 = &CoreML::Specification::_DoubleParameter_default_instance_;
      }
      CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v6, (CoreML::Result *)&v18);
      uint64_t v23 = v18;
      if (SHIBYTE(v25) < 0) {
        operator delete((void *)v24);
      }
      long long v24 = v19;
      uint64_t v25 = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (!CoreML::Result::good((CoreML::Result *)&v23)) {
        goto LABEL_73;
      }
      if (v5[3])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "miniBatchSize");
        if (v5[3]) {
          uint64_t v7 = (uint64_t *)v5[3];
        }
        else {
          uint64_t v7 = &CoreML::Specification::_Int64Parameter_default_instance_;
        }
        CoreML::validateInt64Parameter((uint64_t)__p, (uint64_t)v7, 1, (CoreML::Result *)&v18);
        uint64_t v23 = v18;
        if (SHIBYTE(v25) < 0) {
          operator delete((void *)v24);
        }
        long long v24 = v19;
        uint64_t v25 = v20;
        HIBYTE(v20) = 0;
        LOBYTE(v19) = 0;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (!CoreML::Result::good((CoreML::Result *)&v23)) {
          goto LABEL_73;
        }
        if (v5[4])
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "beta1");
          if (v5[4]) {
            long long v8 = (uint64_t *)v5[4];
          }
          else {
            long long v8 = &CoreML::Specification::_DoubleParameter_default_instance_;
          }
          CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v8, (CoreML::Result *)&v18);
          uint64_t v23 = v18;
          if (SHIBYTE(v25) < 0) {
            operator delete((void *)v24);
          }
          long long v24 = v19;
          uint64_t v25 = v20;
          HIBYTE(v20) = 0;
          LOBYTE(v19) = 0;
          if (v17 < 0) {
            operator delete(__p[0]);
          }
          if (!CoreML::Result::good((CoreML::Result *)&v23)) {
            goto LABEL_73;
          }
          if (v5[5])
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "beta2");
            if (v5[5]) {
              int v9 = (uint64_t *)v5[5];
            }
            else {
              int v9 = &CoreML::Specification::_DoubleParameter_default_instance_;
            }
            CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v9, (CoreML::Result *)&v18);
            uint64_t v23 = v18;
            if (SHIBYTE(v25) < 0) {
              operator delete((void *)v24);
            }
            long long v24 = v19;
            uint64_t v25 = v20;
            HIBYTE(v20) = 0;
            LOBYTE(v19) = 0;
            if (v17 < 0) {
              operator delete(__p[0]);
            }
            if (!CoreML::Result::good((CoreML::Result *)&v23)) {
              goto LABEL_73;
            }
            if (v5[6])
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "eps");
              if (v5[6]) {
                long long v10 = (uint64_t *)v5[6];
              }
              else {
                long long v10 = &CoreML::Specification::_DoubleParameter_default_instance_;
              }
              CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v10, (CoreML::Result *)&v18);
              uint64_t v23 = v18;
              if (SHIBYTE(v25) < 0) {
                operator delete((void *)v24);
              }
              long long v24 = v19;
              uint64_t v25 = v20;
              HIBYTE(v20) = 0;
              LOBYTE(v19) = 0;
              if (v17 < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_67;
            }
            long long v15 = "ADAM optimizer should include eps (epslion) parameter.";
          }
          else
          {
            long long v15 = "ADAM optimizer should include beta2 parameter.";
          }
        }
        else
        {
          long long v15 = "ADAM optimizer should include beta1 parameter.";
        }
      }
      else
      {
        long long v15 = "ADAM optimizer should include miniBatchSize parameter.";
      }
    }
LABEL_72:
    MEMORY[0x22A614700](v21, v15);
    CoreML::Result::Result((_DWORD *)a2, 15);
    goto LABEL_75;
  }
  uint64_t v11 = (uint64_t *)*((void *)a1 + 2);
  if (v11 == &CoreML::Specification::_SGDOptimizer_default_instance_ || !v11[2])
  {
    long long v15 = "SGD optimizer should include learningRate parameter.";
    goto LABEL_72;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "learningRate");
  if (v11[2]) {
    uint64_t v12 = (uint64_t *)v11[2];
  }
  else {
    uint64_t v12 = &CoreML::Specification::_DoubleParameter_default_instance_;
  }
  CoreML::validateDoubleParameter((uint64_t)__p, (uint64_t)v12, (CoreML::Result *)&v18);
  uint64_t v23 = v18;
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  long long v24 = v19;
  uint64_t v25 = v20;
  HIBYTE(v20) = 0;
  LOBYTE(v19) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v23)) {
    goto LABEL_73;
  }
  if (!v11[3])
  {
    long long v15 = "SGD optimizer should include miniBatchSize parameter.";
    goto LABEL_72;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "miniBatchSize");
  if (v11[3]) {
    char v13 = (uint64_t *)v11[3];
  }
  else {
    char v13 = &CoreML::Specification::_Int64Parameter_default_instance_;
  }
  CoreML::validateInt64Parameter((uint64_t)__p, (uint64_t)v13, 1, (CoreML::Result *)&v18);
  uint64_t v23 = v18;
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  long long v24 = v19;
  uint64_t v25 = v20;
  HIBYTE(v20) = 0;
  LOBYTE(v19) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
LABEL_67:
  if (!CoreML::Result::good((CoreML::Result *)&v23))
  {
LABEL_73:
    *(void *)a2 = v23;
    *(_OWORD *)(a2 + 8) = v24;
    uint64_t v14 = v25;
    goto LABEL_74;
  }
  *(void *)a2 = v23;
  *(_OWORD *)(a2 + 8) = v24;
  uint64_t v14 = v25;
LABEL_74:
  *(void *)(a2 + 24) = v14;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
LABEL_75:
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
}

void sub_224352AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void validateOtherTopLevelUpdateParameters(const CoreML::Specification::NetworkUpdateParameters *a1@<X0>, uint64_t a2@<X8>)
{
  CoreML::Result::Result((CoreML::Result *)&v14);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  if (a1 == (const CoreML::Specification::NetworkUpdateParameters *)&CoreML::Specification::_NetworkUpdateParameters_default_instance_
    || *((void *)a1 + 6) == 0)
  {
    MEMORY[0x22A614700](__p, "Epochs should be included in neural network update parameters.");
    CoreML::Result::Result((_DWORD *)a2, 15);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "epochs");
    if (*((void *)a1 + 6)) {
      BOOL v5 = (uint64_t *)*((void *)a1 + 6);
    }
    else {
      BOOL v5 = &CoreML::Specification::_Int64Parameter_default_instance_;
    }
    CoreML::validateInt64Parameter((uint64_t)v7, (uint64_t)v5, 1, (CoreML::Result *)&v9);
    uint64_t v14 = v9;
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)v15);
    }
    long long v15 = v10;
    uint64_t v16 = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    if (CoreML::Result::good((CoreML::Result *)&v14) && *((void *)a1 + 8))
    {
      std::string::basic_string[abi:ne180100]<0>(v7, "seed");
      if (*((void *)a1 + 8)) {
        int v6 = (uint64_t *)*((void *)a1 + 8);
      }
      else {
        int v6 = &CoreML::Specification::_Int64Parameter_default_instance_;
      }
      CoreML::validateInt64Parameter((uint64_t)v7, (uint64_t)v6, 0, (CoreML::Result *)&v9);
      uint64_t v14 = v9;
      if (SHIBYTE(v16) < 0) {
        operator delete((void *)v15);
      }
      long long v15 = v10;
      uint64_t v16 = v11;
      HIBYTE(v11) = 0;
      LOBYTE(v10) = 0;
      if (v8 < 0) {
        operator delete(v7[0]);
      }
      CoreML::Result::good((CoreML::Result *)&v14);
    }
    *(void *)a2 = v14;
    *(_OWORD *)(a2 + 8) = v15;
    *(void *)(a2 + 24) = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
}

void sub_224352D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::NeuralNetworkValidatorGraph::getNodeFromName(uint64_t a1, const void **a2)
{
  if (a1 + 8 == std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, a2))return 0; {
  else
  }
    return *(void *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1, a2);
}

void CoreML::NeuralNetworkValidatorGraph::~NeuralNetworkValidatorGraph(char **this)
{
}

void **std::vector<CoreML::LayerNode>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 136 * a2;
      do
      {
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_OWORD *)(v7 + 72) = 0uLL;
        *(_OWORD *)(v7 + 88) = 0uLL;
        *(_OWORD *)(v7 + 104) = 0uLL;
        *(void *)(v7 + 120) = 0;
        v7 += 136;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1E1E1E1E1E1E1E1) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xF0F0F0F0F0F0F0) {
      unint64_t v11 = 0x1E1E1E1E1E1E1E1;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[136 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[136 * v11];
    long long v15 = &v14[136 * a2];
    do
    {
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)(v14 + 56) = 0uLL;
      *(_OWORD *)(v14 + 72) = 0uLL;
      *(_OWORD *)(v14 + 88) = 0uLL;
      *(_OWORD *)(v14 + 104) = 0uLL;
      *((void *)v14 + 15) = 0;
      v14 += 136;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<CoreML::LayerNode>::~__split_buffer(v16);
  }
  return result;
}

void sub_224352F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CoreML::LayerNode>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>,std::reverse_iterator<CoreML::LayerNode*>,std::reverse_iterator<CoreML::LayerNode*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>,std::reverse_iterator<CoreML::LayerNode*>,std::reverse_iterator<CoreML::LayerNode*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 136;
      std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>(a1, v7 - 136, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 136;
      *((void *)&v16 + 1) -= 136;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

__n128 std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  long long v3 = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(_OWORD *)(a2 + 56) = v3;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  __n128 result = *(__n128 *)(a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  *(_WORD *)(a2 + 128) = *(_WORD *)(a3 + 128);
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<CoreML::LayerNode>,std::reverse_iterator<CoreML::LayerNode*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](v3, v1);
      v1 += 136;
    }
    while (v1 != v2);
  }
}

void std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(a2 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a2 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*(void **)(a2 + 56));
  }
  uint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<CoreML::LayerNode>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<CoreML::LayerNode>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 136;
    std::allocator<CoreML::LayerNode>::destroy[abi:ne180100](v4, i - 136);
  }
}

uint64_t std::vector<CoreML::LayerNode>::__push_back_slow_path<CoreML::LayerNode>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  char v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_function_specification>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v10 = v7;
  uint64_t v11 = &v7[136 * v3];
  uint64_t v13 = &v7[136 * v6];
  std::allocator<CoreML::LayerNode>::construct[abi:ne180100]<CoreML::LayerNode,CoreML::LayerNode>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 136;
  std::vector<CoreML::LayerNode>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<CoreML::LayerNode>::~__split_buffer(&v10);
  return v8;
}

void sub_2243533A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CoreML::LayerNode>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

CoreML::LayerNode *CoreML::LayerNode::LayerNode(CoreML::LayerNode *this, const CoreML::Specification::NeuralNetworkLayer *a2)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  unint64_t v4 = (std::string *)((char *)this + 56);
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v5 = (std::vector<std::string> *)((char *)this + 104);
  unint64_t v6 = (std::vector<std::string> *)((char *)this + 80);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  unint64_t v32 = 0;
  unint64_t v27 = 0;
  std::string v28 = 0;
  unint64_t v29 = 0;
  uint64_t v7 = *((void *)a2 + 4);
  if (v7) {
    uint64_t v8 = (uint64_t *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *((int *)a2 + 6);
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v8;
      if ((unint64_t)v10 >= v32)
      {
        unint64_t v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v30, (long long *)v12);
      }
      else
      {
        if (*(char *)(v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
        }
        else
        {
          long long v13 = *(_OWORD *)v12;
          v10->__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        ++v10;
      }
      uint64_t v31 = (long long *)v10;
      ++v8;
      v11 -= 8;
    }
    while (v11);
  }
  uint64_t v14 = *((void *)a2 + 7);
  if (v14) {
    long long v15 = (uint64_t *)(v14 + 8);
  }
  else {
    long long v15 = 0;
  }
  uint64_t v16 = *((int *)a2 + 12);
  if (v16)
  {
    char v17 = v28;
    uint64_t v18 = 8 * v16;
    do
    {
      uint64_t v19 = *v15;
      if ((unint64_t)v17 >= v29)
      {
        char v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, (long long *)v19);
      }
      else
      {
        if (*(char *)(v19 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
        }
        else
        {
          long long v20 = *(_OWORD *)v19;
          v17->__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v20;
        }
        ++v17;
      }
      std::string v28 = v17;
      ++v15;
      v18 -= 8;
    }
    while (v18);
  }
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 13) = 0;
  if (v6 != (std::vector<std::string> *)&v30) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v6, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  }
  if (v5 != (std::vector<std::string> *)&v27) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, v27, (long long *)v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
  }
  std::string::operator=(v4, *((const std::string **)a2 + 14));
  *((unsigned char *)this + 128) = *((unsigned char *)a2 + 120);
  int v21 = *((_DWORD *)a2 + 35);
  LOBYTE(v22) = 1;
  if (v21 > 300)
  {
    if (v21 > 1044)
    {
      if (v21 == 1045 || v21 == 1140) {
        goto LABEL_32;
      }
    }
    else if (v21 == 301 || v21 == 420)
    {
      goto LABEL_32;
    }
LABEL_44:
    LOBYTE(v22) = 0;
    goto LABEL_32;
  }
  uint64_t v23 = (v21 - 100);
  if (v23 > 0x3C) {
    goto LABEL_44;
  }
  if (((1 << v23) & 0x1000010000100001) != 0) {
    goto LABEL_32;
  }
  if (v23 != 30) {
    goto LABEL_44;
  }
  unsigned int v25 = *(_DWORD *)(*((void *)a2 + 16) + 28);
  BOOL v26 = v25 >= 0x29;
  unint64_t v22 = (0x10040000400uLL >> v25) & 1;
  if (v26) {
    LOBYTE(v22) = 0;
  }
LABEL_32:
  *((unsigned char *)this + 129) = v22;
  char v33 = (void ***)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  unint64_t v27 = (std::string *)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  return this;
}

void sub_22435367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void ***a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, void ***a16)
{
  a16 = (void ***)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a10 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (*(char *)(v16 + 79) < 0) {
    operator delete(*v17);
  }
  uint64_t v19 = *(void **)(v16 + 24);
  if (v19)
  {
    *(void *)(v16 + 32) = v19;
    operator delete(v19);
  }
  long long v20 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v16 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

CoreML::LayerNode *CoreML::LayerNode::LayerNode(CoreML::LayerNode *this, const std::string **a2)
{
  *(_OWORD *)((char *)this + 56) = 0u;
  unint64_t v4 = (uint64_t *)((char *)this + 80);
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  std::string::operator=((std::string *)((char *)this + 56), a2[2]);
  int v5 = *((_DWORD *)a2 + 9);
  if (v5 == 10)
  {
    unint64_t v6 = (long long *)a2[3]->__r_.__value_.__r.__words[2];
    unint64_t v7 = *((void *)this + 11);
    if (v7 < *((void *)this + 12))
    {
LABEL_6:
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, v6);
      uint64_t v8 = v7 + 24;
LABEL_8:
      *((void *)this + 11) = v8;
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, v6);
    goto LABEL_8;
  }
  if (v5 == 11)
  {
    unint64_t v6 = (long long *)a2[3]->__r_.__value_.__r.__words[2];
    unint64_t v7 = *((void *)this + 11);
    if (v7 < *((void *)this + 12)) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_9:
  int v9 = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 12) = 0;
  *((_DWORD *)this + 13) = v9;
  *((_WORD *)this + 64) = 0;
  return this;
}

void sub_224353810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v4);
  }
  CoreML::LayerNode::LayerNode(v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<CoreML::LayerNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<CoreML::LayerNode>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *turi::ml_metadata::column_names@<X0>(turi::ml_metadata *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v5 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  std::vector<std::string>::size_type v6 = (v4 - *(void *)this) >> 4;
  __n128 result = std::vector<std::string>::vector(a2, v6);
  if (v4 != v5)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    if (v6 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v6;
    }
    do
    {
      uint64_t v11 = *(void *)this + v9;
      long long v13 = *(const std::string **)v11;
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 8);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      __n128 result = std::string::operator=(&a2->__begin_[v8], v13);
      v9 += 16;
      ++v8;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_22435399C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::feature_name(turi::ml_metadata *this@<X0>, uint64_t a2@<X1>, uint64_t rem@<X2>, char a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v10 = (uint64_t *)(*(void *)this + 16 * a2);
  uint64_t v12 = *v10;
  uint64_t v11 = (std::__shared_weak_count *)v10[1];
  uint64_t v13 = *v10;
  if (v11
    && (atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed),
        std::__shared_weak_count::__release_shared[abi:ne180100](v11),
        uint64_t v14 = (uint64_t *)(*(void *)this + 16 * a2),
        uint64_t v13 = *v14,
        (long long v15 = (std::__shared_weak_count *)v14[1]) != 0))
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    int v16 = *(_DWORD *)(v13 + 24);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  else
  {
    int v16 = *(_DWORD *)(v13 + 24);
  }
  switch(v16)
  {
    case 0:
    case 5:
      if (*(char *)(v12 + 23) < 0)
      {
        char v46 = *(const std::string::value_type **)v12;
        std::string::size_type v47 = *(void *)(v12 + 8);
        std::string::__init_copy_ctor_external(a5, v46, v47);
      }
      else
      {
        long long v23 = *(_OWORD *)v12;
        a5->__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
        *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v23;
      }
      return;
    case 1:
    case 3:
    case 4:
    case 6:
      char v17 = (uint64_t *)(*(void *)this + 16 * a2);
      uint64_t v19 = *v17;
      uint64_t v18 = (std::__shared_weak_count *)v17[1];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      long long v20 = (unsigned __int8 *)(*(void *)(*(void *)(v19 + 32) + 80) + 16 * rem);
      if (a4)
      {
        BOOL v21 = v20[12] == 2;
        if (v20[12] == 2) {
          unint64_t v22 = "[\"";
        }
        else {
          unint64_t v22 = "[";
        }
      }
      else
      {
        BOOL v21 = 0;
        unint64_t v22 = "[";
      }
      if (*(char *)(v12 + 23) >= 0) {
        size_t v24 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        size_t v24 = *(void *)(v12 + 8);
      }
      size_t v25 = strlen(v22);
      BOOL v26 = &v66;
      std::string::basic_string[abi:ne180100]((uint64_t)&v66, v24 + v25);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        BOOL v26 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if (v24)
      {
        if (*(char *)(v12 + 23) >= 0) {
          unint64_t v27 = (const std::string::value_type *)v12;
        }
        else {
          unint64_t v27 = *(const std::string::value_type **)v12;
        }
        memmove(v26, v27, v24);
      }
      std::string v28 = (char *)v26 + v24;
      if (v25) {
        memcpy(v28, v22, v25);
      }
      v28[v25] = 0;
      switch(v20[12])
      {
        case 0u:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v68);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_79;
        case 1u:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v68);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_79:
          v68.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
          std::string::size_type v57 = *(void *)(MEMORY[0x263F8C2B8] + 72);
          *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words
                                    + *(void *)(v68.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
          v68.__r_.__value_.__r.__words[2] = v57;
          uint64_t v69 = MEMORY[0x263F8C318] + 16;
          if (v72 < 0) {
            operator delete(v71);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](&v74);
          goto LABEL_86;
        case 2u:
          uint64_t v55 = *(void *)v20;
          if (*(char *)(*(void *)v20 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(v55 + 8), *(void *)(v55 + 16));
          }
          else
          {
            long long v56 = *(_OWORD *)(v55 + 8);
            v65.__r_.__value_.__r.__words[2] = *(void *)(v55 + 24);
            *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v56;
          }
          goto LABEL_86;
        case 3u:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v68, (void *)(*(void *)v20 + 8));
          goto LABEL_86;
        case 4u:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v68, (uint64_t *)(*(void *)v20 + 8));
          goto LABEL_86;
        case 5u:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v68, (void *)(*(void *)v20 + 8));
          goto LABEL_86;
        case 6u:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v20, &v65);
          goto LABEL_86;
        case 7u:
          memset(&v65, 0, sizeof(v65));
          goto LABEL_86;
        case 8u:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_86;
        case 9u:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v68, (void *)(*(void *)v20 + 8));
LABEL_86:
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v58 = &v65;
          }
          else {
            int v58 = (std::string *)v65.__r_.__value_.__r.__words[0];
          }
          if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v65.__r_.__value_.__l.__size_;
          }
          std::string v60 = std::string::append(&v66, (const std::string::value_type *)v58, size);
          long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
          v67.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v61;
          v60->__r_.__value_.__l.__size_ = 0;
          v60->__r_.__value_.__r.__words[2] = 0;
          v60->__r_.__value_.__r.__words[0] = 0;
          if (v21) {
            std::string v62 = "\"]";
          }
          else {
            std::string v62 = "]";
          }
          std::string v63 = std::string::append(&v67, v62);
          long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          a5->__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return;
          }
          char v45 = (void *)v66.__r_.__value_.__r.__words[0];
          break;
        default:
          turi::flexible_type_fail(0);
          __break(1u);
          return;
      }
      goto LABEL_101;
    case 2:
      if (*(char *)(v12 + 23) >= 0) {
        size_t v36 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        size_t v36 = *(void *)(v12 + 8);
      }
      std::string::size_type v37 = &v67;
      std::string::basic_string[abi:ne180100]((uint64_t)&v67, v36 + 1);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v37 = (std::string *)v67.__r_.__value_.__r.__words[0];
      }
      if (v36)
      {
        if (*(char *)(v12 + 23) >= 0) {
          char v38 = (const std::string::value_type *)v12;
        }
        else {
          char v38 = *(const std::string::value_type **)v12;
        }
        memmove(v37, v38, v36);
      }
      *(_WORD *)((char *)&v37->__r_.__value_.__l.__data_ + v36) = 91;
      std::to_string(&v66, rem);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v39 = &v66;
      }
      else {
        uint64_t v39 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v40 = v66.__r_.__value_.__l.__size_;
      }
      uint64_t v41 = std::string::append(&v67, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      uint64_t v43 = std::string::append(&v68, "]");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      a5->__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
      char v45 = (void *)v67.__r_.__value_.__r.__words[0];
LABEL_101:
      operator delete(v45);
      return;
    case 7:
      unint64_t v29 = (uint64_t *)(*(void *)this + 16 * a2);
      uint64_t v31 = *v29;
      int v30 = (std::__shared_weak_count *)v29[1];
      uint64_t v32 = *v29;
      if (v30
        && (atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed),
            std::__shared_weak_count::__release_shared[abi:ne180100](v30),
            char v33 = (uint64_t *)(*(void *)this + 16 * a2),
            uint64_t v32 = *v33,
            (uint64_t v34 = (std::__shared_weak_count *)v33[1]) != 0))
      {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v35 = *(void *)(v32 + 64);
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      else
      {
        unint64_t v35 = *(void *)(v32 + 64);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v68);
      int v48 = *(char *)(v12 + 23);
      if (v48 >= 0) {
        uint64_t v49 = v12;
      }
      else {
        uint64_t v49 = *(void *)v12;
      }
      if (v48 >= 0) {
        uint64_t v50 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        uint64_t v50 = *(void *)(v12 + 8);
      }
      size_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, v49, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"[", 1);
      uint64_t v52 = *(void *)(v31 + 80);
      if (*(void *)(v31 + 88) - v52 >= 1)
      {
        uint64_t v53 = 0;
        do
        {
          v35 /= *(void *)(v52 + 8 * v53);
          rem = lldiv(rem, v35).rem;
          std::ostream::operator<<();
          ++v53;
          uint64_t v52 = *(void *)(v31 + 80);
          uint64_t v54 = *(void *)(v31 + 88) - v52;
          if (v53 != v54 >> 3)
          {
            v67.__r_.__value_.__s.__data_[0] = 44;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)&v67, 1);
            uint64_t v52 = *(void *)(v31 + 80);
            uint64_t v54 = *(void *)(v31 + 88) - v52;
          }
        }
        while (v53 < v54 >> 3);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"]", 1);
      std::stringbuf::str();
      v68.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
      *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words
                                + *(void *)(v68.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                                  + 24);
      v68.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v71) < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x22A614E30](&v73);
      return;
    default:
      turi::ml_metadata::feature_name(unsigned long,unsigned long,BOOL)const::$_0::operator()();
  }
}

void sub_2243541F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::ml_metadata::feature_name(unsigned long,unsigned long,BOOL)const::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/metadata.cpp", 89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/metadata.cpp", "operator()", 99, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::ml_metadata::feature_name(unsigned long,unsigned long,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2243543F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::feature_names(turi::ml_metadata *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a3, *((void *)this + 8));
  uint64_t v5 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    unint64_t v6 = 0;
    do
    {
      char v7 = (uint64_t *)(v5 + 16 * v6);
      uint64_t v9 = *v7;
      uint64_t v8 = (std::__shared_weak_count *)v7[1];
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        int v10 = *(_DWORD *)(v9 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      else
      {
        int v10 = *(_DWORD *)(v9 + 24);
      }
      if (v10 == 1 && a2 == 0)
      {
        uint64_t v29 = *(void *)this + 16 * v6;
        uint64_t v31 = *(long long **)v29;
        int v30 = *(std::__shared_weak_count **)(v29 + 8);
        if (v30)
        {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        unint64_t v32 = *(void *)(a3 + 8);
        if (v32 >= *(void *)(a3 + 16))
        {
          uint64_t v33 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, v31);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, v31);
          uint64_t v33 = v32 + 24;
        }
        *(void *)(a3 + 8) = v33;
      }
      else
      {
        for (unint64_t i = 0; ; ++i)
        {
          uint64_t v13 = (uint64_t *)(*(void *)this + 16 * v6);
          uint64_t v15 = *v13;
          uint64_t v14 = (std::__shared_weak_count *)v13[1];
          if (v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v16 = *(void *)(v15 + 64);
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          else
          {
            unint64_t v16 = *(void *)(v15 + 64);
          }
          if (i >= v16) {
            break;
          }
          turi::ml_metadata::feature_name(this, v6, i, 0, &__p);
          unint64_t v18 = *(void *)(a3 + 8);
          unint64_t v17 = *(void *)(a3 + 16);
          if (v18 >= v17)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(void *)a3) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a3) >> 3);
            if (2 * v22 > v21) {
              unint64_t v21 = 2 * v22;
            }
            if (v22 >= 0x555555555555555) {
              unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v23 = v21;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v23) {
              size_t v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(a3 + 16, v23);
            }
            else {
              size_t v24 = 0;
            }
            size_t v25 = v24 + v20;
            __v.__first_ = v24;
            __v.__begin_ = v25;
            __v.__end_cap_.__value_ = &v24[v23];
            long long v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v25->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v25 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
            uint64_t v27 = *(void *)(a3 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            int v28 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            *(void *)(a3 + 8) = v27;
            if (v28 < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(v18 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v18 = v19;
            *(void *)(a3 + 8) = v18 + 24;
          }
        }
      }
      ++v6;
      uint64_t v5 = *(void *)this;
    }
    while (v6 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  }
}

void sub_224354758(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::__split_buffer<std::string> *a9, uint64_t a10, void *__pa)
{
}

void turi::ml_metadata::set_training_index_sizes_to_current_column_sizes(turi::ml_metadata *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2 == *(void *)this)
  {
    uint64_t v8 = *((void *)this + 1);
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    uint64_t v2 = *(void *)this;
    do
    {
      uint64_t v5 = (uint64_t *)(v2 + v3);
      uint64_t v6 = *v5;
      char v7 = (std::__shared_weak_count *)v5[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::ml_data_internal::column_metadata::set_training_index_size(v6);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      ++v4;
      uint64_t v2 = *(void *)this;
      uint64_t v8 = *((void *)this + 1);
      v3 += 16;
    }
    while (v4 < (v8 - *(void *)this) >> 4);
  }
  uint64_t v9 = *((void *)this + 3);
  if (v9)
  {
    turi::ml_data_internal::column_metadata::set_training_index_size(v9);
    uint64_t v2 = *(void *)this;
    uint64_t v8 = *((void *)this + 1);
  }
  if (v8 != v2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v2 + v10);
      uint64_t v15 = *v13;
      uint64_t v14 = (std::__shared_weak_count *)v13[1];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::ml_data_internal::column_metadata::set_training_index_offset(v15, v12);
      uint64_t v16 = *(void *)(v15 + 64);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      v12 += v16;
      ++v11;
      uint64_t v2 = *(void *)this;
      v10 += 16;
    }
    while (v11 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  }
  turi::ml_metadata::setup_cached_values(this);
}

void sub_2243548C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::ml_metadata::setup_cached_values(turi::ml_metadata *this)
{
  *((void *)this + 9) = 0;
  uint64_t v2 = *(void *)this;
  if (*((void *)this + 1) == *(void *)this)
  {
    *((void *)this + 8) = 0;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v2 + v3;
      uint64_t v7 = *(void *)(v2 + v3);
      uint64_t v6 = *(std::__shared_weak_count **)(v5 + 8);
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        int v8 = *(_DWORD *)(v7 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      else
      {
        int v8 = *(_DWORD *)(v7 + 24);
      }
      if (v8 == 5) {
        ++*((void *)this + 9);
      }
      ++v4;
      uint64_t v2 = *(void *)this;
      uint64_t v9 = *((void *)this + 1);
      v3 += 16;
    }
    while (v4 < (v9 - *(void *)this) >> 4);
    *((void *)this + 8) = 0;
    if (v9 != v2)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v13 = *(void *)(v2 + v10);
        uint64_t v12 = *(std::__shared_weak_count **)(v2 + v10 + 8);
        if (v12)
        {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          *((void *)this + 8) += *(void *)(v13 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          uint64_t v2 = *(void *)this;
          uint64_t v9 = *((void *)this + 1);
        }
        else
        {
          *((void *)this + 8) += *(void *)(v13 + 64);
        }
        ++v11;
        v10 += 16;
      }
      while (v11 < (v9 - v2) >> 4);
    }
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this + 80, *((char **)this + 11));
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = 0;
  uint64_t v14 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    do
    {
      uint64_t v17 = v14 + v15;
      long long v19 = *(long long **)v17;
      unint64_t v18 = *(std::__shared_weak_count **)(v17 + 8);
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      v20[0] = v19;
      std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 10, (const void **)v19, (uint64_t)&std::piecewise_construct, v20)[7] = v16++;
      uint64_t v14 = *(void *)this;
      v15 += 16;
    }
    while (v16 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  }
  turi::ml_data_internal::row_metadata::setup((unsigned __int8 *)this + 184, (uint64_t **)this, 0);
  if (*((void *)this + 3))
  {
    memset(v20, 0, sizeof(v20));
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::reserve((uint64_t *)v20, ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 4) + 1);
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>((uint64_t)v20, *(uint64_t **)this, *((uint64_t **)this + 1), (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::push_back[abi:ne180100]((uint64_t *)v20, (long long *)((char *)this + 24));
    turi::ml_data_internal::row_metadata::setup((unsigned __int8 *)this + 104, (uint64_t **)v20, 1u);
    unint64_t v21 = v20;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  }
  else
  {
    *(_OWORD *)((char *)this + 104) = *(_OWORD *)((char *)this + 184);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)this + 120, *((char **)this + 25), *((void *)this + 26), (uint64_t)(*((void *)this + 26) - *((void *)this + 25)) >> 3);
    *((_OWORD *)this + 9) = *((_OWORD *)this + 14);
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>((uint64_t)this + 160, *((uint64_t **)this + 30), *((uint64_t **)this + 31), (uint64_t)(*((void *)this + 31) - *((void *)this + 30)) >> 4);
  }
}

void sub_224354B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v7);
  }
  return result;
}

void sub_224354BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224354D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::ml_metadata::save(turi::ml_metadata *this, turi::oarchive *a2)
{
  __p[13] = *(void **)MEMORY[0x263EF8340];
  __p[3] = (void *)3;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v4)
    {
      size_t v6 = 2 * v4 + 16;
      *((void *)a2 + 5) = v6;
      uint64_t v7 = (char **)*((void *)a2 + 2);
      if (v7)
      {
        unint64_t v5 = *v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v10);
          unint64_t v5 = (char *)**((void **)a2 + 2);
        }
        else if (!v9)
        {
          v7[1] = &v5[v6];
        }
      }
      else
      {
        unint64_t v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v6, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      unint64_t v5 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v5[*((void *)a2 + 4)] = 3;
    *((void *)a2 + 4) += 8;
  }
  v12[0] = 0;
  v12[1] = 0;
  unint64_t v11 = v12;
  turi::flexible_type_converter<std::vector<std::string>>::set((void *)this + 5, (uint64_t)__p);
}

void sub_224354EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void turi::ml_metadata::load(turi::ml_metadata *this, turi::iarchive *a2)
{
  uint64_t v20 = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 3);
    uint64_t v20 = *(void *)(v4 + v5);
    *((void *)a2 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  v19[0] = 0;
  v19[1] = 0;
  unint64_t v18 = v19;
  turi::variant_deep_load<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t)&v18, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "original_column_names");
  size_t v6 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&v18, (const void **)__p);
  turi::variant_converter<std::vector<std::string>,void>::get(v6, &v17);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 40));
  *(std::vector<std::string> *)((char *)this + 40) = v17;
  memset(&v17, 0, sizeof(v17));
  unint64_t v21 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false>::exec((uint64_t)a2, (uint64_t *)this);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::shared_ptr<turi::ml_data_internal::column_metadata>,false,void>::exec((uint64_t)a2, (void *)this + 3);
  if (v20 == 2)
  {
    LOBYTE(v17.__begin_) = 0;
    if (*((void *)a2 + 2)) {
      ++*((void *)a2 + 3);
    }
    else {
      std::istream::read();
    }
  }
  uint64_t v7 = *(void *)this;
  if (*((void *)this + 1) != *(void *)this)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      unint64_t v11 = (uint64_t *)(v7 + v8);
      uint64_t v13 = *v11;
      uint64_t v12 = (std::__shared_weak_count *)v11[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::ml_data_internal::column_metadata::set_training_index_offset(v13, v10);
      uint64_t v14 = *(void *)(v13 + 64);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v10 += v14;
      ++v9;
      uint64_t v7 = *(void *)this;
      v8 += 16;
    }
    while (v9 < (uint64_t)(*((void *)this + 1) - *(void *)this) >> 4);
  }
  turi::ml_metadata::setup_cached_values(this);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v18, v19[0]);
}

void sub_224355104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char *a20)
{
}

void turi::variant_converter<std::vector<std::string>,void>::get(int *a1@<X1>, std::vector<std::string> *a2@<X8>)
{
  v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  v21[0] = (void **)&v20;
  uint64_t has_fallback_type = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31), (uint64_t)v21, (uint64_t)(a1 + 2));
  if (!has_fallback_type)
  {
    v21[0] = (void **)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  if ((atomic_ullong **)has_fallback_type != v22)
  {
    uint64_t v5 = *(atomic_ullong **)has_fallback_type;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(has_fallback_type + 5);
    v22[0] = v5;
    BYTE4(v22[1]) = *(unsigned char *)(has_fallback_type + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  v7.n128_f64[0] = turi::flexible_type_converter<std::vector<std::string>>::get((turi::flexible_type_internals *)v22, v4, a2);
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          unint64_t v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_39;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::vector<std::string> v17 = v22[0];
        if (v22[0])
        {
          unint64_t v18 = (void *)v22[0][1];
          if (v18)
          {
            v22[0][2] = (atomic_ullong)v18;
            operator delete(v18);
          }
          unint64_t v9 = v17;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_39;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v11 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_34;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v11 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_34:
          unint64_t v9 = v11;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v19 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          unint64_t v9 = v19;
          unsigned int v16 = -235920773;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = v22[0];
        if (v22[0])
        {
          uint64_t v13 = (void *)v22[0][6];
          if (v13)
          {
            v22[0][7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          uint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          unint64_t v9 = v12;
          unsigned int v16 = 2071181815;
LABEL_38:
          uint64_t v10 = v16 | 0x1030C4000000000;
LABEL_39:
          MEMORY[0x22A614FA0](v9, v10, v7);
        }
      }
      break;
    default:
      return;
  }
}

void sub_22435542C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  switch(*(unsigned char *)(v17 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v19 = *(void *)(v17 - 40);
      if (!v19) {
        goto LABEL_27;
      }
      if (*(char *)(v19 + 31) < 0) {
        operator delete(*(void **)(v19 + 8));
      }
      char v20 = (void *)v19;
      uint64_t v21 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      size_t v25 = *(void **)(v17 - 40);
      if (!v25) {
        goto LABEL_27;
      }
      long long v26 = (void *)v25[1];
      if (v26)
      {
        v25[2] = v26;
        operator delete(v26);
      }
      char v20 = v25;
      uint64_t v21 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v22 = *(void **)(v17 - 40);
      if (!v22) {
        goto LABEL_27;
      }
      a17 = v22 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v22 = *(void **)(v17 - 40);
      if (!v22) {
        goto LABEL_27;
      }
      a17 = v22 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_21:
      char v20 = v22;
      uint64_t v21 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v27 = *(void *)(v17 - 40);
      if (!v27) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v27 + 16));
      char v20 = (void *)v27;
      unsigned int v24 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v17 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v17 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      char v20 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v23);
      unsigned int v24 = 2071181815;
LABEL_25:
      uint64_t v21 = v24 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v20, v21);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void sub_2243555C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::exception a17)
{
  if (a2)
  {
    std::exception::~exception(&a17);
    __cxa_begin_catch(a1);
    turi::_throw_variant_error<turi::flexible_type>(a10);
  }
  _Unwind_Resume(a1);
}

void sub_2243555F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int *a10, std::string::value_type *__p, std::string::size_type a12, int a13, __int16 a14, char a15, unsigned __int8 a16, std::string *a17, long long a18, long long a19, std::string::size_type a20)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&a17, "Expecting a flexible_type. Got a ");
    turi::get_variant_which_name((turi *)(*a10 ^ (*a10 >> 31)), &__p);
    if ((a16 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = __p;
    }
    if ((a16 & 0x80u) == 0) {
      std::string::size_type v21 = a16;
    }
    else {
      std::string::size_type v21 = a12;
    }
    unint64_t v22 = std::string::append((std::string *)&a17, p_p, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    a20 = v22->__r_.__value_.__r.__words[2];
    a19 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if ((char)a16 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(a18) < 0) {
      operator delete(a17);
    }
    a17 = (std::string *)&a19;
    turi::variant_converter<std::string,void>::get(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&)::{lambda(void)#1}::operator()((const std::string **)&a17);
  }
  _Unwind_Resume(a1);
}

void sub_2243556A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x224355430);
}

void sub_2243556F8(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x224355704);
  }
  JUMPOUT(0x22435570CLL);
}

double turi::flexible_type_converter<std::vector<std::string>>::get@<D0>(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, std::vector<std::string> *a3@<X8>)
{
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  *(void *)&double result = turi::flexible_type_internals::ft_converter<12>::get<std::vector<std::string>>(a3, a1, a2).n128_u64[0];
  return result;
}

void sub_22435578C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

__n128 turi::flexible_type_internals::ft_converter<12>::get<std::vector<std::string>>(std::vector<std::string> *this, turi::flexible_type_internals *a2, const char *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  int v4 = *((unsigned __int8 *)a2 + 12);
  if (v4 == 3)
  {
    uint64_t v11 = *(void *)a2;
    std::vector<std::string>::resize(this, (uint64_t)(*(void *)(*(void *)a2 + 16) - *(void *)(*(void *)a2 + 8)) >> 3);
    if (*(void *)(v11 + 16) != *(void *)(v11 + 8))
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      std::vector<std::string>::pointer begin = this->__begin_;
      do
      {
        memset(&v27, 0, sizeof(v27));
        turi::flexible_type::flexible_type<double>((uint64_t)&v29, (void *)(*(void *)(v11 + 8) + v12));
        turi::flexible_type_internals::ft_converter<1>::get<std::string>(&v27, (char *)&v29);
        switch(v30)
        {
          case 2:
            if (atomic_fetch_add(v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v15 = v29;
              if (v29)
              {
                if (*((char *)v29 + 31) < 0) {
                  operator delete((void *)v29[1]);
                }
                unsigned int v16 = v15;
                uint64_t v17 = 0x1012C404EF22A49;
                goto LABEL_42;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unsigned int v24 = v29;
              if (v29)
              {
                size_t v25 = (void *)v29[1];
                if (v25)
                {
                  v29[2] = (atomic_ullong)v25;
                  operator delete(v25);
                }
                unsigned int v16 = v24;
                uint64_t v17 = 0x1080C409938AC02;
                goto LABEL_42;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v18 = v29;
              if (v29)
              {
                v28[0] = (void **)(v29 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v28);
                goto LABEL_37;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              unint64_t v18 = v29;
              if (v29)
              {
                v28[0] = (void **)(v29 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v28);
LABEL_37:
                unsigned int v16 = v18;
                uint64_t v17 = 0x1020C405E66F15BLL;
                goto LABEL_42;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              long long v26 = v29;
              if (v29)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v29 + 2);
                unsigned int v16 = v26;
                unsigned int v23 = -235920773;
                goto LABEL_41;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v19 = v29;
              if (v29)
              {
                char v20 = (void *)v29[6];
                if (v20)
                {
                  v29[7] = (atomic_ullong)v20;
                  operator delete(v20);
                }
                std::string::size_type v21 = (void *)v19[3];
                if (v21)
                {
                  v19[4] = (atomic_ullong)v21;
                  operator delete(v21);
                }
                unint64_t v22 = (std::__shared_weak_count *)v19[2];
                if (v22) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                }
                unsigned int v16 = v19;
                unsigned int v23 = 2071181815;
LABEL_41:
                uint64_t v17 = v23 | 0x1030C4000000000;
LABEL_42:
                MEMORY[0x22A614FA0](v16, v17);
              }
            }
            break;
          default:
            break;
        }
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(begin->__r_.__value_.__l.__data_);
        }
        __n128 result = *(__n128 *)&v27.__r_.__value_.__l.__data_;
        begin->__r_.__value_.__r.__words[2] = v27.__r_.__value_.__r.__words[2];
        *(__n128 *)&begin->__r_.__value_.__l.__data_ = result;
        ++begin;
        ++v13;
        v12 += 8;
      }
      while (v13 < (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 3);
    }
  }
  else
  {
    if (v4 != 4) {
      turi::flexible_type_internals::throw_type_conversion_error(a2, (const turi::flexible_type *)"flex_list", a3);
    }
    uint64_t v5 = *(void *)a2;
    std::vector<std::string>::resize(this, (uint64_t)(*(void *)(*(void *)a2 + 16) - *(void *)(*(void *)a2 + 8)) >> 4);
    uint64_t v7 = *(void *)(v5 + 8);
    if (*(void *)(v5 + 16) != v7)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      std::vector<std::string>::pointer v10 = this->__begin_;
      do
      {
        memset(&v27, 0, sizeof(v27));
        turi::flexible_type_internals::ft_converter<1>::get<std::string>(&v27, (char *)(v7 + v8));
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10->__r_.__value_.__l.__data_);
        }
        __n128 result = *(__n128 *)&v27.__r_.__value_.__l.__data_;
        v10->__r_.__value_.__r.__words[2] = v27.__r_.__value_.__r.__words[2];
        *(__n128 *)&v10->__r_.__value_.__l.__data_ = result;
        ++v10;
        ++v9;
        uint64_t v7 = *(void *)(v5 + 8);
        v8 += 16;
      }
      while (v9 < (*(void *)(v5 + 16) - v7) >> 4);
    }
  }
  return result;
}

void sub_224355AEC()
{
}

void sub_224355AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double turi::ml_data::ml_data(turi::ml_data *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_DWORD *)((char *)this + 47) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = -1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  return result;
}

double turi::ml_data::ml_data(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 47) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = -1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  return result;
}

turi::ml_data *turi::ml_data::ml_data(turi::ml_data *this, const turi::ml_data *a2)
{
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_DWORD *)((char *)this + 47) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = -1;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  turi::ml_data::operator=((uint64_t)this, (uint64_t *)a2);
  return this;
}

void sub_224355D60(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 184);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  turi::ml_data::ml_data(v3, v1, v2);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_data::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  size_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  if ((uint64_t *)a1 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 64), (char *)a2[8], a2[9], (a2[9] - a2[8]) >> 3);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>(a1 + 104, (uint64_t *)a2[13], (uint64_t *)a2[14], (a2[14] - a2[13]) >> 4);
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  uint64_t v7 = a2[17];
  *(void *)(a1 + 128) = a2[16];
  uint64_t v8 = a2[18];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v7;
  *(void *)(a1 + 144) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v11 = a2[22];
  uint64_t v10 = a2[23];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v11;
  *(void *)(a1 + 184) = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if ((uint64_t *)a1 != a2) {
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>>*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(a1 + 152, (uint64_t *)a2[19], (uint64_t *)a2[20], (a2[20] - a2[19]) >> 4);
  }
  return a1;
}

void turi::ml_data::fill(unsigned __int8 *a1, uint64_t a2, uint64_t a3, const void ***a4, int a5, int a6)
{
  if (*(unsigned char *)(a2 + 288)) {
    uint64_t v11 = *(void *)(a2 + 32);
  }
  else {
    uint64_t v11 = 0;
  }
  v13[0] = 0;
  v13[1] = v11;
  std::map<std::string,turi::ml_column_mode>::map[abi:ne180100]((uint64_t *)&v12, a4);
  turi::ml_data::fill(a1, a2, v13, a3, &v12, a5, a6);
}

void sub_224355F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::ml_data::fill(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, const void ***a5, int a6, int a7)
{
  char v65 = a6;
  long long v64 = *(void ***)a1;
  if (!*(void *)a1)
  {
    assert_msg(a6 ^ 1u, "immutable_metadata cannot be set for initial metadata building.");
    turi::ml_data::_setup_ml_metadata(a1);
  }
  uint64_t v12 = (uint64_t *)a3[1];
  long long v79 = (char **)*a3;
  uint64_t v11 = (uint64_t *)v79;
  long long v76 = v12;
  int64_t v13 = (char *)v12 - (char *)v79;
  if (v12 >= (uint64_t *)v79)
  {
    long long v79 = (char **)v12;
    if (*(unsigned char *)(a2 + 288)) {
      uint64_t v14 = *(uint64_t **)(a2 + 32);
    }
    else {
      uint64_t v14 = 0;
    }
    long long v76 = v14;
    if (v12 <= v14)
    {
      *((void *)a1 + 2) = 0;
      *((void *)a1 + 3) = v13;
      *((void *)a1 + 4) = v13;
      std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v79, *(const void ***)(a2 + 40), *(const void ***)(a2 + 48));
      uint64_t v15 = *(void ***)a1;
      long long v77 = 0;
      uint64_t v78 = 0;
      long long v76 = 0;
      std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>(&v76, *v15, v15[1], ((char *)v15[1] - (char *)*v15) >> 4);
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      unint64_t v75 = 0;
      unsigned int v16 = v76;
      if (v77 != v76)
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        do
        {
          uint64_t v19 = v16[v17];
          if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v79, (const void **)v19))
          {
            std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v79, (const void **)v19);
          }
          else
          {
            char v20 = v74;
            if ((unint64_t)v74 >= v75)
            {
              unint64_t v22 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v73, (long long *)v19);
            }
            else
            {
              if (*(char *)(v19 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v74, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
              }
              else
              {
                long long v21 = *(_OWORD *)v19;
                v74->__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
                *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
              }
              unint64_t v22 = v20 + 1;
            }
            uint64_t v74 = v22;
          }
          ++v18;
          unsigned int v16 = v76;
          v17 += 2;
        }
        while (v18 < ((char *)v77 - (char *)v76) >> 4);
      }
      unsigned int v23 = *(unsigned __int8 ***)(*(void *)a1 + 24);
      if (v23 && turi::sframe::contains_column(a2, v23))
      {
        std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)&v79, *(const void ***)(*(void *)a1 + 24));
        unsigned int v24 = 1;
      }
      else
      {
        unsigned int v24 = 0;
      }
      if (v12 == v11 || v73 == v74)
      {
        if (v81)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v68);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Ignoring columns not present at model construction: ", 52);
          size_t v25 = (uint64_t *)v79;
          if (v79 != &v80)
          {
            uint64_t v26 = 0;
            do
            {
              int v27 = *((char *)v25 + 55);
              if (v27 >= 0) {
                uint64_t v28 = (uint64_t)(v25 + 4);
              }
              else {
                uint64_t v28 = v25[4];
              }
              if (v27 >= 0) {
                uint64_t v29 = *((unsigned __int8 *)v25 + 55);
              }
              else {
                uint64_t v29 = v25[5];
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, v28, v29);
              if (++v26 != v81) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)", ", 2);
              }
              char v30 = (char *)v25[1];
              if (v30)
              {
                do
                {
                  uint64_t v31 = (char **)v30;
                  char v30 = *(char **)v30;
                }
                while (v30);
              }
              else
              {
                do
                {
                  uint64_t v31 = (char **)v25[2];
                  BOOL v32 = *v31 == (char *)v25;
                  size_t v25 = (uint64_t *)v31;
                }
                while (!v32);
              }
              size_t v25 = (uint64_t *)v31;
            }
            while (v31 != &v80);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)".", 1);
          uint64_t v33 = (int *)global_logger();
          if (v33[169] <= 4)
          {
            if (cppipc::must_cancel((cppipc *)v33)) {
              log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
            }
            uint64_t v34 = (file_logger *)global_logger();
            started = file_logger::start_stream(v34, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", "fill", 175, 1);
            std::stringbuf::str();
            uint64_t v36 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
            std::string::size_type v37 = pthread_getspecific(*(void *)(v36 + 592));
            if (v37)
            {
              if (*((unsigned char *)v37 + 280))
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(void *)(v37[2] - 24) + 16));
                char v38 = std::locale::use_facet(&v82, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
                std::locale::~locale(&v82);
                std::ostream::put();
                std::ostream::flush();
                file_logger::stream_flush((file_logger *)v36);
                if (*(_DWORD *)(v36 + 600) == 7)
                {
                  __print_back_trace();
                  exception = __cxa_allocate_exception(8uLL);
                  void *exception = "LOG_FATAL encountered";
                  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
                }
              }
            }
            if (v67 < 0) {
              operator delete(__p);
            }
          }
          *(void *)&long long v68 = *MEMORY[0x263F8C2C8];
          *(void *)((char *)&v68 + *(void *)(v68 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
          *((void *)&v68 + 1) = MEMORY[0x263F8C318] + 16;
          if (v71 < 0) {
            operator delete(v70);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x22A614E30](&v72);
        }
        if (v24)
        {
          turi::sframe::select_column(a2, *(unsigned __int8 ***)(*(void *)a1 + 24), &v68);
          uint64_t v39 = *(void *)(*(void *)a1 + 24);
          uint64_t type = turi::sarray<turi::flexible_type>::get_type(v68);
          ((void (*)(uint64_t, uint64_t, void))turi::ml_data_internal::check_type_consistent_with_mode)(v39, type, *(unsigned int *)(*(void *)(*(void *)a1 + 24) + 24));
          std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::push_back[abi:ne180100]((uint64_t *)&v76, (long long *)(*(void *)a1 + 24));
          if (*((void *)&v68 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
          }
        }
        turi::ml_data_internal::row_metadata::setup(a1 + 48, &v76, v24);
        *(void *)&long long v68 = &v73;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
        *(void *)&long long v68 = &v76;
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v79, v80);
        *((void *)&v68 + 1) = 0;
        uint64_t v69 = 0;
        *(void *)&long long v68 = (char *)&v68 + 8;
        if ((v65 & 1) == 0)
        {
          uint64_t v43 = *a5;
          long long v42 = a5 + 1;
          uint64_t v41 = v43;
          if (v43 != (const void **)v42)
          {
            do
            {
              if (*((_DWORD *)v41 + 14) == 6) {
                std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v68, v41 + 4, (uint64_t)(v41 + 4));
              }
              long long v44 = (const void **)v41[1];
              if (v44)
              {
                do
                {
                  char v45 = (const void ***)v44;
                  long long v44 = (const void **)*v44;
                }
                while (v44);
              }
              else
              {
                do
                {
                  char v45 = (const void ***)v41[2];
                  BOOL v32 = *v45 == v41;
                  uint64_t v41 = (const void **)v45;
                }
                while (!v32);
              }
              uint64_t v41 = (const void **)v45;
            }
            while (v45 != v42);
          }
        }
        turi::ml_data::_fill_data_blocks((unint64_t *)a1, (uint64_t *)a2, v65, v64 == 0, a7, a3, (uint64_t)&v68);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, (uint64_t)"Provided data missing required columns: ", 40);
      char v46 = v73;
      std::string::size_type v47 = v74;
      if ((char *)v74 - (char *)v73 != 24)
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0;
        do
        {
          uint64_t v50 = &v46[v48];
          int v51 = SHIBYTE(v50->__r_.__value_.__r.__words[2]);
          if (v51 >= 0) {
            uint64_t v52 = (uint64_t)v50;
          }
          else {
            uint64_t v52 = v50->__r_.__value_.__r.__words[0];
          }
          if (v51 >= 0) {
            uint64_t size = HIBYTE(v50->__r_.__value_.__r.__words[2]);
          }
          else {
            uint64_t size = v50->__r_.__value_.__l.__size_;
          }
          uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, v52, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)", ", 2);
          ++v49;
          char v46 = v73;
          std::string::size_type v47 = v74;
          ++v48;
        }
        while (v49 < -1 - 0x5555555555555555 * (((char *)v74 - (char *)v73) >> 3));
      }
      std::string::pointer data = v47[-1].__r_.__value_.__l.__data_;
      long long v56 = v47 - 1;
      uint64_t v55 = (uint64_t)data;
      int v58 = SHIBYTE(v56->__r_.__value_.__r.__words[2]);
      if (v58 >= 0) {
        uint64_t v59 = (uint64_t)v56;
      }
      else {
        uint64_t v59 = v55;
      }
      if (v58 >= 0) {
        uint64_t v60 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t v60 = v56->__r_.__value_.__l.__size_;
      }
      long long v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v68, v59, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)".", 1);
      v82.__locale_ = (std::locale::__imp *)&v68;
      turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_2::operator()();
    }
    *(void *)&long long v68 = &v79;
    *((void *)&v68 + 1) = &v76;
    turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_1::operator()();
  }
  *(void *)&long long v68 = &v79;
  *((void *)&v68 + 1) = &v76;
  turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_0::operator()();
}

void sub_2243566BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  std::ostringstream::~ostringstream((uint64_t)&a18);
  a18 = v19 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = v19 - 144;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v19 - 120, *(char **)(v19 - 112));
  _Unwind_Resume(a1);
}

void turi::ml_data::_setup_ml_metadata(void *a1)
{
  assert_msg(*a1 == 0, "Metadata already set!");
  operator new();
}

void turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row_bounds.first", 16);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"row_bounds.second", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", "operator()", 98, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int64_t v13 = v16;
  turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224356D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"row_bounds.second", 17);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  size_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"raw_data.num_rows()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  unint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", "operator()", 99, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int64_t v13 = v16;
  turi::ml_data::fill(turi::sframe const&,std::pair<unsigned long,unsigned long> const&,std::string const&,std::map<std::string,turi::ml_column_mode>,BOOL,turi::ml_missing_value_action)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22435701C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data::_fill_data_blocks(unint64_t *a1, uint64_t *a2, char a3, char a4, int a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  char v71 = a3;
  char v70 = a4;
  int v69 = a5;
  if (*a1)
  {
    if (a1[13] != a1[14])
    {
      uint64_t v11 = a1 + 6;
      uint64_t v12 = turi::thread::cpu_count((turi::thread *)a1);
      if (*v11)
      {
        turi::sframe::select_column((uint64_t)a2, *(unsigned __int8 ***)(*a1 + 24), &__p);
        uint64_t v13 = *(void *)(*a1 + 24);
        uint64_t type = turi::sarray<turi::flexible_type>::get_type(__p);
        ((void (*)(uint64_t, uint64_t, void))turi::ml_data_internal::check_type_consistent_with_mode)(v13, type, *(unsigned int *)(*(void *)(*a1 + 24) + 24));
      }
      uint64_t v15 = *a6;
      uint64_t v66 = a6[1];
      uint64_t v67 = v15;
      unint64_t v68 = v66 - v15;
      if (v66 == v15) {
        operator new();
      }
      unint64_t v52 = v12;
      uint64_t v63 = 0;
      long long v64 = 0;
      unint64_t v65 = 0;
      unsigned int v16 = (unsigned __int8 ***)a1[13];
      uint64_t v17 = (unsigned __int8 ***)a1[14];
      if (v16 == v17)
      {
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        uint64_t i = 0;
      }
      else
      {
        do
        {
          turi::sframe::select_column((uint64_t)a2, *v16, &v74);
          unint64_t v18 = v64;
          if ((unint64_t)v64 >= v65)
          {
            uint64_t v19 = ((uint64_t)v64 - v63) >> 4;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v21 = v65 - v63;
            if ((uint64_t)(v65 - v63) >> 3 > v20) {
              unint64_t v20 = v21 >> 3;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            v84 = &v65;
            unsigned int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v65, v22);
            unsigned int v24 = &v23[16 * v19];
            *(void *)&long long __p = v23;
            *((void *)&__p + 1) = v24;
            long long v83 = &v23[16 * v25];
            *(_OWORD *)unsigned int v24 = v74;
            long long v74 = 0uLL;
            std::locale v82 = v24 + 16;
            std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__swap_out_circular_buffer(&v63, &__p);
            uint64_t v26 = v64;
            std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&__p);
            long long v64 = v26;
            if (*((void *)&v74 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
            }
          }
          else
          {
            *long long v64 = v74;
            long long v64 = v18 + 1;
          }
          int v27 = *v16;
          uint64_t v28 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], *v16);
          if (v28 == a2[6])
          {
            *(void *)&long long __p = v27;
            turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
          }
          uint64_t v29 = turi::sarray<turi::flexible_type>::get_type(*(void *)(a2[23]
                                                                      - 0x5555555555555550
                                                                      * ((unint64_t)(v28 - a2[5]) >> 3)));
          ((void (*)(unsigned __int8 **, uint64_t, void))turi::ml_data_internal::check_type_consistent_with_mode)(v27, v29, *((unsigned int *)*v16 + 6));
          v16 += 2;
        }
        while (v16 != v17);
        unint64_t v30 = a1[13];
        unint64_t v31 = a1[14];
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        uint64_t v57 = 0;
        uint64_t v58 = 0;
        for (uint64_t i = 0; v30 != v31; v30 += 16)
        {
          uint64_t v33 = *(turi::ml_data_internal::column_indexer **)(*(void *)v30 + 32);
          BOOL v32 = *(std::__shared_weak_count **)(*(void *)v30 + 40);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          turi::ml_data_internal::column_indexer::initialize(v33);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v80[0] = &unk_26D779F10;
          v80[1] = v33;
          v80[2] = v32;
          v80[3] = v80;
          std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](&v60, (uint64_t)v80);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v80);
          if (v70)
          {
            unint64_t v35 = *(turi::ml_data_internal::column_statistics **)(*(void *)v30 + 48);
            uint64_t v34 = *(std::__shared_weak_count **)(*(void *)v30 + 56);
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            turi::ml_data_internal::column_statistics::initialize(v35);
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v79[0] = &unk_26D779F90;
            v79[1] = v35;
            v79[2] = v34;
            v79[3] = v79;
            std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](&v57, (uint64_t)v79);
            std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v79);
            if (v34) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            }
          }
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
        }
      }
      *(void *)&long long __p = 0;
      std::vector<unsigned long>::vector(&v56, v52, &__p);
      uint64_t v36 = (turi::thread_pool *)std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::vector(v55, a1[12]);
      unint64_t v37 = a1[12];
      *(void *)&long long v74 = a1;
      *((void *)&v74 + 1) = &v63;
      unint64_t v75 = (void **)v55;
      long long v76 = (void *)a7;
      long long v77 = &v67;
      uint64_t v78 = &v66;
      instance = (turi::thread_pool *)turi::thread_pool::get_instance(v36);
      uint64_t v39 = (turi::thread *)turi::thread_pool::size(instance);
      tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v39);
      if (!*((unsigned char *)tls_data + 8) && (unint64_t)v39 > 1)
      {
        uint64_t v41 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
        turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)&__p, v41);
        double v42 = (double)v37 / (double)(unint64_t)v39;
        v72[2] = (void *)(v42 * (double)0 + 0.0);
        v72[3] = (void *)(v42 * (double)1uLL + 0.0);
        v72[0] = (char *)boost::function0<void>::assign_to<void turi::parallel_for<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3>(unsigned long,unsigned long,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3 const&)::{lambda(void)#1}>(turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3)::stored_vtable
               + 1;
        v72[1] = &v74;
        turi::parallel_task_queue::launch((uint64_t)&__p, (uint64_t *)v72);
      }
      if (v37)
      {
        for (uint64_t j = 0; j != v37; ++j)
          turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3::operator()((void **)&v74, j);
      }
      if (*(void *)(a7 + 16))
      {
        unint64_t v54 = 0;
        if (a1[12])
        {
          unint64_t v44 = 0;
          do
          {
            char v45 = (const void ***)(a1[13] + 16 * v44);
            if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a7, *v45))
            {
              char v46 = *v45;
              if (*((char *)*v45 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)*v46, (std::string::size_type)v46[1]);
              }
              else
              {
                long long v47 = *(_OWORD *)v46;
                v53.__r_.__value_.__r.__words[2] = (std::string::size_type)v46[2];
                *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v47;
              }
              turi::ml_data_internal::column_indexer::column_indexer(&__p, &v53, *((unsigned int *)*v45 + 6), *((char *)*v45 + 28));
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v53.__r_.__value_.__l.__data_);
              }
              turi::ml_data_internal::column_indexer::initialize((turi::ml_data_internal::column_indexer *)&__p);
              v73[0] = &unk_26D77A030;
              v73[1] = &__p;
              v73[3] = v73;
              turi::scoped_finally::scoped_finally(v72, (uint64_t)v73);
              std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v73);
              uint64_t v48 = operator new(0x30uLL);
              void *v48 = &unk_26D77A0B0;
              v48[1] = &v66;
              v48[2] = &v67;
              v48[3] = v55;
              v48[4] = &v54;
              v48[5] = &__p;
              long long v76 = v48;
              turi::in_parallel((turi::thread_pool *)&v74);
              std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](&v74);
              turi::scoped_finally::~scoped_finally(v72);
              turi::ml_data_internal::column_indexer::reset_and_return_values((turi::ml_data_internal::column_indexer *)&__p, (uint64_t)&v74);
              unint64_t v50 = 126 - 2 * __clz((uint64_t)(*((void *)&v74 + 1) - v74) >> 4);
              if (*((void *)&v74 + 1) == (void)v74) {
                uint64_t v51 = 0;
              }
              else {
                uint64_t v51 = v50;
              }
              std::__introsort<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *,false>(v74, *((unsigned __int8 **)&v74 + 1), v51, 1, v49);
              turi::ml_data_internal::column_indexer::insert_values_into_index((unint64_t)(*v45)[4], (unsigned __int8 **)&v74);
              v72[0] = &v74;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
              turi::mutex::~mutex(&v87);
              *(void *)&long long v74 = &v86;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
              *(void *)&long long v74 = &v85;
              std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
              *(void *)&long long v74 = &v84;
              std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
              if (SHIBYTE(v82) < 0) {
                operator delete((void *)__p);
              }
            }
            unint64_t v44 = v54 + 1;
            unint64_t v54 = v44;
          }
          while (v44 < a1[12]);
        }
      }
      a1[16] = turi::ml_data_internal::estimate_row_block_size(v68, (uint64_t)(a1 + 6), (uint64_t)v55);
      operator new();
    }
    operator new();
  }
  turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_0::operator()();
}

void sub_224357B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  a48 = &a21;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  turi::scoped_finally::~scoped_finally(&a27);
  turi::scoped_finally::~scoped_finally(&a30);
  a48 = &a33;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void turi::ml_data::_setup_untranslated_columns(uint64_t **this, const turi::sframe *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3;
  v54[24] = *(void **)MEMORY[0x263EF8340];
  uint64_t v51 = a4;
  uint64_t v52 = a3;
  uint64_t v7 = (uint64_t *)(this + 19);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)this + 19);
  unint64_t v9 = *this;
  uint64_t v10 = **this;
  if ((*this)[1] != v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = v10 + v11;
      uint64_t v14 = *(void *)(v10 + v11);
      uint64_t v8 = *(std::__shared_weak_count **)(v13 + 8);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        int v15 = *(_DWORD *)(v14 + 24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        unint64_t v9 = *this;
      }
      else
      {
        int v15 = *(_DWORD *)(v14 + 24);
      }
      if (v15 == 5)
      {
        uint64_t v16 = *v9 + v11;
        unint64_t v18 = *(unsigned __int8 ***)v16;
        uint64_t v17 = *(std::__shared_weak_count **)(v16 + 8);
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        uint64_t v8 = (std::__shared_weak_count *)turi::sframe::select_column((uint64_t)a2, v18, &v45);
        unint64_t v20 = this[20];
        unint64_t v19 = (unint64_t)this[21];
        if ((unint64_t)v20 >= v19)
        {
          uint64_t v21 = ((uint64_t)v20 - *v7) >> 4;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v19 - *v7;
          if (v23 >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          v54[4] = this + 21;
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(this + 21), v24);
          uint64_t v26 = &v25[16 * v21];
          v54[0] = v25;
          v54[1] = v26;
          v54[3] = &v25[16 * v27];
          *(_OWORD *)uint64_t v26 = v45;
          long long v45 = 0uLL;
          v54[2] = v26 + 16;
          std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__swap_out_circular_buffer(v7, v54);
          uint64_t v28 = this[20];
          std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v54);
          uint64_t v8 = (std::__shared_weak_count *)*((void *)&v45 + 1);
          this[20] = v28;
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v20 = v45;
          this[20] = v20 + 2;
        }
        unint64_t v9 = *this;
      }
      ++v12;
      uint64_t v10 = *v9;
      v11 += 16;
    }
    while (v12 < (v9[1] - *v9) >> 4);
    uint64_t v4 = v52;
  }
  if (v4 || (*((unsigned char *)a2 + 288) ? (uint64_t v29 = *((void *)a2 + 4)) : (uint64_t v29 = 0), v51 != v29))
  {
    uint64_t v30 = turi::thread::cpu_count((turi::thread *)v8);
    unint64_t v31 = this[20];
    uint64_t v50 = v30;
    BOOL v32 = (turi::thread_pool *)std::vector<std::shared_ptr<turi::sarray_reader<turi::flexible_type>>>::vector(v49, ((char *)v31 - (char *)this[19]) >> 4);
    if (this[20] != this[19]) {
      turi::sarray<turi::flexible_type>::get_reader(*this[19]);
    }
    uint64_t v33 = ((char *)this[20] - (char *)this[19]) >> 4;
    uint64_t v34 = v50;
    *(void *)&long long v45 = &v50;
    *((void *)&v45 + 1) = &v52;
    char v46 = &v51;
    long long v47 = (turi::ml_data *)this;
    uint64_t v48 = v49;
    instance = (turi::thread_pool *)turi::thread_pool::get_instance(v32);
    uint64_t v36 = (turi::thread *)turi::thread_pool::size(instance);
    tls_std::string::pointer data = (turi::thread_pool *)turi::thread::get_tls_data(v36);
    unint64_t v38 = v34 * v33;
    if (!*((unsigned char *)tls_data + 8) && (unint64_t)v36 > 1)
    {
      uint64_t v39 = (turi::thread_pool *)turi::thread_pool::get_instance(tls_data);
      turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v54, v39);
      double v40 = (double)v38 / (double)(unint64_t)v36;
      v53[2] = (unint64_t)(v40 * (double)0 + 0.0);
      v53[3] = (unint64_t)(v40 * (double)1uLL + 0.0);
      v53[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0>(unsigned long,unsigned long,turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0 const&)::{lambda(void)#1}>(turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0)::stored_vtable
             + 1;
      v53[1] = (uint64_t)&v45;
      turi::parallel_task_queue::launch((uint64_t)v54, v53);
    }
    if (v38)
    {
      for (unint64_t i = 0; i != v38; ++i)
        turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0::operator()((unint64_t **)&v45, i);
    }
    double v42 = this[19];
    if (this[20] != v42)
    {
      uint64_t v43 = 0;
      unint64_t v44 = 0;
      do
      {
        (*(void (**)(uint64_t))(*(void *)v42[v43] + 40))(v42[v43]);
        ++v44;
        double v42 = this[19];
        v43 += 2;
      }
      while (v44 < ((char *)this[20] - (char *)v42) >> 4);
    }
    v54[0] = v49;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  }
}

void sub_22435821C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  a9 = (void **)&a15;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void turi::ml_data::_reset_block_manager(turi::ml_data *this)
{
}

void sub_224358370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v11) {
    MEMORY[0x22A614FA0](v10, 0x1030C40535333AFLL);
  }
  _Unwind_Resume(exception_object);
}

void turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", 88);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_metadata != nullptr", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data.cpp", "operator()", 336, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2243584A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::reset[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::shared_ptr[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>(&v2, a2);
}

void turi::sarray<turi::ml_data_internal::row_data_block>::open_for_write(uint64_t a1)
{
  long long v2 = (turi::fileio::fixed_size_cache_manager *)assert_msg(*(unsigned char *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  uint64_t instance = turi::fileio::fixed_size_cache_manager::get_instance(v2);
  std::string::basic_string[abi:ne180100]<0>(__p, ".sidx");
  turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, &__str);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 152), &__str);
  operator new();
}

void sub_2243588BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

void turi::ml_data_internal::column_indexer::~column_indexer(turi::ml_data_internal::column_indexer *this)
{
  turi::mutex::~mutex((pthread_mutex_t *)((char *)this + 112));
  long long v2 = (void **)((char *)this + 80);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  long long v2 = (void **)((char *)this + 56);
  std::vector<std::vector<std::pair<unsigned long,turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  long long v2 = (void **)((char *)this + 32);
  std::vector<std::pair<turi::simple_spinlock,turi::hopscotch_map<turi::hash_value,unsigned long,std::hash<turi::hash_value>,std::equal_to<turi::hash_value>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void *turi::scoped_finally::execute_and_clear(void *this)
{
  uint64_t v1 = this;
  long long v2 = (void *)this[1];
  uint64_t v3 = (uint64_t)v2 - *this;
  if (v2 != (void *)*this)
  {
    uint64_t v4 = v3 >> 5;
    unint64_t v5 = (v3 & 0xFFFFFFFFFFFFFFE0) - 8;
    do
    {
      uint64_t v6 = *(void *)(*v1 + v5);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      --v4;
      (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
      v5 -= 32;
    }
    while (v4);
    long long v2 = (void *)*v1;
    for (this = (void *)v1[1];
          this != v2;
  }
  v1[1] = v2;
  return this;
}

__n128 turi::ml_data::get_iterator@<Q0>(turi::ml_data *this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (turi::ml_data *)((char *)this + 48);
  assert_msg(*(void *)this != 0, "ml_data is not iterable if uninitialized.");
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_DWORD *)(a4 + 47) = 0;
  *(void *)(a4 + 120) = 0;
  *(void *)(a4 + 128) = -1;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(void *)(a4 + 264) = 0;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 179) = 0u;
  *(void *)&long long v9 = -1;
  *((void *)&v9 + 1) = -1;
  *(_OWORD *)(a4 + 272) = v9;
  *(_OWORD *)(a4 + 288) = v9;
  *(void *)(a4 + 304) = 0;
  *(void *)(a4 + 312) = 0;
  *(void *)(a4 + 320) = -1;
  *(void *)(a4 + 328) = -1;
  *(_WORD *)(a4 + 336) = 0;
  turi::ml_data_iterator::setup((turi::ml_data_iterator *)a4, this, v8, a2, a3);
  return result;
}

void sub_224358B20(_Unwind_Exception *a1)
{
  turi::ml_data_iterator::~ml_data_iterator(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::reset[abi:ne180100]<turi::ml_data_internal::ml_data_block_manager,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block_manager,void>(&v2, a2);
}

uint64_t turi::sarray<turi::ml_data_internal::row_data_block>::sarray(uint64_t a1)
{
  *(void *)a1 = &unk_26D779BD0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  int v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_WORD *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  return a1;
}

void sub_224358C48(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v3);
  }
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::ml_data_internal::row_data_block>::~sarray(uint64_t a1)
{
  turi::sarray<turi::ml_data_internal::row_data_block>::~sarray(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::sarray<turi::ml_data_internal::row_data_block>::set_num_segments(uint64_t a1, uint64_t a2)
{
  assert_msg(*(unsigned __int8 *)(a1 + 248), "Invalid SArray");
  assert_msg(*(unsigned __int8 *)(a1 + 249), "SArray not opened for writing");
  if (a2 && (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 120))(*(void *)(a1 + 176)) != a2)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    operator new();
  }
  return 0;
}

void sub_224358F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray<turi::ml_data_internal::row_data_block>::num_segments(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void *turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  assert_msg(*((unsigned __int8 *)a1 + 248), "Invalid SArray");
  assert_msg(*((unsigned __int8 *)a1 + 249), "SArray not opened for writing");
  long long v9 = (void *)a1[22];
  if (!v9)
  {
    v8[0] = &v9;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#1}::operator()();
  }
  v8[0] = a2;
  v7[0] = (*(uint64_t (**)(void *))(*a1 + 24))(a1);
  if (v7[0] <= a2)
  {
    long long v9 = v8;
    uint64_t v10 = v7;
    turi::sarray<std::string>::get_output_iterator(unsigned long)::{lambda(void)#2}::operator()();
  }
  long long v9 = &unk_26D779CF8;
  uint64_t v10 = a1;
  unint64_t v11 = a2;
  unint64_t v12 = &v9;
  v8[0] = &unk_26D779D88;
  v8[1] = a1;
  v8[2] = a2;
  v8[3] = v8;
  v7[0] = &unk_26D779E18;
  v7[3] = v7;
  turi::sframe_function_output_iterator<turi::ml_data_internal::row_data_block,std::function<void ()(turi::ml_data_internal::row_data_block const&)>,std::function<void ()(turi::ml_data_internal::row_data_block&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(a3, (uint64_t)&v9, (uint64_t)v8, (uint64_t)v7);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::~__value_func[abi:ne180100](&v9);
}

void sub_224359174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::ml_data_internal::row_data_block>::close(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 176) + 40))(*(void *)(a1 + 176));
  (*(void (**)(void))(**(void **)(a1 + 176) + 48))(*(void *)(a1 + 176));
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(**(void **)(a1 + 176) + 32))(*(void *)(a1 + 176)) + 64);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)v2);
  uint64_t v3 = *(void *)(v2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 24);
  *(void *)(a1 + 48) = v3;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(v2 + 48));
  if (a1 + 8 != v2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(v2 + 72), *(void *)(v2 + 80), (uint64_t)(*(void *)(v2 + 80) - *(void *)(v2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(v2 + 96), *(long long **)(v2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 104) - *(void *)(v2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(long long **)(v2 + 120), (long long *)(v2 + 128));
  }
  uint64_t v4 = *(void *)(a1 + 176);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(unsigned char *)(a1 + 249) = 0;
  turi::sarray<turi::flexible_type>::keep_array_file_ref((std::__split_buffer<std::string>::pointer)a1);
}

uint64_t turi::sarray<turi::ml_data_internal::row_data_block>::~sarray(uint64_t a1)
{
  *(void *)a1 = &unk_26D779BD0;
  uint64_t v4 = (void **)(a1 + 256);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 184));
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 128, *(void **)(a1 + 136));
  uint64_t v4 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::~sarray_group_format_writer_v2(uint64_t a1)
{
  *(void *)a1 = &unk_26D779C38;
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return a1;
}

{
  void **v2;
  void **v4;

  *(void *)a1 = &unk_26D779C38;
  uint64_t v2 = (void **)(a1 + 24);
  uint64_t v4 = (void **)(a1 + 384);
  std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  turi::v2_block_impl::block_writer::~block_writer(v2);
  return MEMORY[0x22A614FA0](a1, 0x10B3C40E6DD008DLL);
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::open(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  if (a4) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = 0;
  }
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v7 = a1 + 24;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  turi::v2_block_impl::block_writer::init(v7, &__p, v6, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 16) = v6;
  std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::resize((uint64_t *)(a1 + 384), v4);
  if (v4)
  {
    uint64_t v8 = 8;
    do
    {
      std::vector<std::vector<turi::ml_data_internal::row_data_block>>::resize((uint64_t *)(*(void *)(a1 + 384) + v8), v6);
      v8 += 56;
      --v4;
    }
    while (v4);
  }
  if (*(void *)(a1 + 16)) {
    turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::open_segment(a1, 0);
  }
}

void sub_224359598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::close(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8)) {
    turi::sarray_group_format_writer_v2<turi::flexible_type>::close(void)::{lambda(void)#1}::operator()();
  }
  *(unsigned char *)(a1 + 8) = 0;
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = 0;
    do
    {
      if (*(void *)(a1 + 392) != *(void *)(a1 + 384))
      {
        unint64_t v3 = 0;
        do
          turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, v3++, v2);
        while (v3 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3));
      }
      turi::v2_block_impl::block_writer::close_segment((turi::v2_block_impl::block_writer *)(a1 + 24), v2++);
    }
    while (v2 < *(void *)(a1 + 16));
  }
}

uint64_t turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::write_segment(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      __n128 result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, v8++, a2, v3 + v7);
      uint64_t v3 = *a3;
      v7 += 48;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      __n128 result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, v8++, a2, v3 + v7);
      uint64_t v3 = *a3;
      v7 += 48;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 4));
  }
  return result;
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::write_segment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 384) + 56 * a2 + 8);
  uint64_t v8 = v7 + 24 * a3;
  uint64_t v11 = *(void **)(v8 + 8);
  uint64_t v10 = (uint64_t *)(v8 + 8);
  long long v9 = v11;
  if ((unint64_t)v11 >= v10[1])
  {
    uint64_t v12 = std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block const&>((uint64_t *)(v7 + 24 * a3), a4);
  }
  else
  {
    std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>((uint64_t)(v10 + 1), v9, a4);
    uint64_t v12 = (uint64_t)(v9 + 6);
    uint64_t *v10 = (uint64_t)(v9 + 6);
  }
  uint64_t *v10 = v12;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4) >= *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32))
  {
    turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, a2, a3);
  }
}

{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t vars8;

  uint64_t v7 = *(void *)(*(void *)(a1 + 384) + 56 * a2 + 8);
  uint64_t v8 = v7 + 24 * a3;
  long long v9 = *(void **)(v8 + 8);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v11 = (uint64_t *)(v8 + 8);
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v12 = std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block>((uint64_t *)(v7 + 24 * a3), a4);
  }
  else
  {
    void *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    *(_OWORD *)long long v9 = *(_OWORD *)a4;
    v9[2] = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    v9[3] = 0;
    v9[4] = 0;
    v9[5] = 0;
    *(_OWORD *)(v9 + 3) = *(_OWORD *)(a4 + 24);
    v9[5] = *(void *)(a4 + 40);
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    uint64_t v12 = (uint64_t)(v9 + 6);
  }
  void *v11 = v12;
  if (0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3 + 8)
                - *(void *)(*(void *)(*(void *)(a1 + 384) + 56 * a2 + 8) + 24 * a3)) >> 4) >= *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32))
  {
    turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, a2, a3);
  }
}

void sub_2243598D4(_Unwind_Exception *a1)
{
  *unint64_t v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::write_segment()
{
  return assert_msg(0, "Cannot write to general SArray with sframe_rows");
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::write_column(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    uint64_t v8 = *(void *)(a1 + 384) + 56 * a2;
    long long v9 = (void *)(v8 + 32);
    uint64_t v10 = (uint64_t *)(*(void *)(v8 + 8) + 24 * a3);
    uint64_t v11 = v10 + 1;
    uint64_t v12 = v10 + 2;
    do
    {
      uint64_t v13 = *v11;
      if ((unint64_t)*v11 >= *v12)
      {
        uint64_t v14 = std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block const&>(v10, v4);
      }
      else
      {
        std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>((uint64_t)v12, (void *)*v11, v4);
        uint64_t v14 = v13 + 48;
        uint64_t *v11 = v13 + 48;
      }
      uint64_t *v11 = v14;
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *v10) >> 4) >= *v9) {
        turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, a2, a3);
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v4 = *a4;
  uint64_t v5 = a4[1];
  if (*a4 != v5)
  {
    uint64_t v8 = *(void *)(a1 + 384);
    long long v9 = (uint64_t *)(*(void *)(v8 + 56 * a2 + 8) + 24 * a3);
    uint64_t v10 = *(void *)(v8 + 56 * a2 + 32);
    uint64_t v11 = v9 + 1;
    uint64_t v12 = v9 + 2;
    do
    {
      uint64_t v13 = *v11;
      if ((unint64_t)*v11 >= *v12)
      {
        uint64_t v14 = std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block const&>(v9, v4);
      }
      else
      {
        std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>((uint64_t)v12, (void *)*v11, v4);
        uint64_t v14 = v13 + 48;
        uint64_t *v11 = v13 + 48;
      }
      uint64_t *v11 = v14;
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *v9) >> 4) >= v10)
      {
        turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(a1, a2, a3);
        uint64_t v10 = *(void *)(*(void *)(a1 + 384) + 56 * a2 + 32);
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
}

void sub_224359B0C(_Unwind_Exception *a1)
{
  *unint64_t v2 = v1;
  _Unwind_Resume(a1);
}

void sub_224359C30(_Unwind_Exception *a1)
{
  *unint64_t v2 = v1;
  _Unwind_Resume(a1);
}

void **turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_segment(void **result, uint64_t a2)
{
  if (result[49] != result[48])
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = 0;
    uint64_t v5 = 8;
    do
    {
      turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(v3, v4, a2);
      __n128 result = std::vector<turi::ml_data_internal::row_data_block>::shrink_to_fit((void **)(*(void *)(*(void *)(v3 + 384) + v5)
                                                                                          + 24 * a2));
      ++v4;
      v5 += 56;
    }
    while (v4 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v3 + 392) - *(void *)(v3 + 384)) >> 3));
  }
  return result;
}

void std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (turi::simple_spinlock **)*a1;
  if (*v2)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, turi::simple_spinlock *a2)
{
  unint64_t v4 = *(turi::simple_spinlock **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = (turi::simple_spinlock *)((char *)v4 - 56);
      uint64_t v6 = (void **)((char *)v4 - 48);
      std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&v6);
      turi::simple_spinlock::~simple_spinlock(v5);
      unint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__append(a1, v4);
  }
  else if (!v3)
  {
    std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (turi::simple_spinlock *)(*a1 + 56 * a2));
  }
}

void std::vector<std::vector<turi::ml_data_internal::row_data_block>>::resize(uint64_t *a1, unint64_t a2)
{
  BOOL v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      uint64_t v8 = v3;
      std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::open_segment(uint64_t a1, std::string::size_type a2)
{
  unint64_t v4 = (int *)global_logger();
  if (v4[169] <= 1)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    BOOL v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 797, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        long long v9 = std::locale::use_facet(&v34, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  assert_msg(*(unsigned __int8 *)(a1 + 8), "sarray not open");
  uint64_t index_info = turi::v2_block_impl::block_writer::get_index_info((turi::v2_block_impl::block_writer *)(a1 + 24));
  if (*(char *)(index_info + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)index_info, *(void *)(index_info + 8));
  }
  else {
    std::string __str = *(std::string *)index_info;
  }
  *(_DWORD *)((char *)v36 + 3) = 0;
  v36[0] = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  std::string::basic_string(&v33, &__str, 0, size - 5, (std::allocator<char> *)v38);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v33;
  }
  else {
    uint64_t v12 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v33.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)".", 1);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  locale = v34.__locale_;
  uint64_t v16 = (char *)&v34 + *((void *)v34.__locale_ - 3);
  if (*((_DWORD *)v16 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *((void *)v34.__locale_ - 3)));
    uint64_t v17 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 32);
    std::locale::~locale((std::locale *)&v33);
    locale = v34.__locale_;
  }
  *((_DWORD *)v16 + 36) = 48;
  *(void **)((char *)&v35[1] + *((void *)locale - 3)) = (void *)4;
  std::ostream::operator<<();
  std::stringbuf::str();
  long long v18 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
  v36[0] = v33.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v36 + 3) = *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3);
  int v19 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
  unint64_t v20 = (int *)global_logger();
  if (v20[169] > 1) {
    goto LABEL_39;
  }
  if (cppipc::must_cancel((cppipc *)v20)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  uint64_t v21 = (file_logger *)global_logger();
  unint64_t v22 = file_logger::start_stream(v21, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray_file_format_v2.hpp", "open_segment", 810, 1);
  uint64_t v23 = pthread_getspecific(*((void *)v22 + 74));
  if (v23 && *((unsigned char *)v23 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"Open segment ", 13);
  }
  uint64_t v24 = file_logger::operator<<<unsigned long>((uint64_t)v22);
  uint64_t v25 = pthread_getspecific(*(void *)(v24 + 592));
  if (v25 && *((unsigned char *)v25 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)" for write on ", 14);
  }
  if (v19 < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
  }
  else
  {
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v18;
    LODWORD(v32.__r_.__value_.__r.__words[2]) = v36[0];
    *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v36 + 3);
    *((unsigned char *)&v32.__r_.__value_.__s + 23) = v19;
  }
  uint64_t v26 = file_logger::operator<<<std::string>(v24, (uint64_t)&v32);
  uint64_t v27 = pthread_getspecific(*(void *)(v26 + 592));
  if (v27 && *((unsigned char *)v27 + 280))
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(v27[2] - 24) + 16));
    uint64_t v28 = std::locale::use_facet((const std::locale *)&v33, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale((std::locale *)&v33);
    std::ostream::put();
    std::ostream::flush();
    file_logger::stream_flush((file_logger *)v26);
    if (*(_DWORD *)(v26 + 600) == 7)
    {
      __print_back_trace();
      uint64_t v30 = __cxa_allocate_exception(8uLL);
      void *v30 = "LOG_FATAL encountered";
      __cxa_throw(v30, MEMORY[0x263F8C1D8], 0);
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_40;
    }
  }
  else
  {
LABEL_39:
    if ((v19 & 0x80000000) == 0)
    {
LABEL_40:
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v18;
      LODWORD(v31.__r_.__value_.__r.__words[2]) = v36[0];
      *(_DWORD *)((char *)&v31.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v36 + 3);
      *((unsigned char *)&v31.__r_.__value_.__s + 23) = v19;
      goto LABEL_43;
    }
  }
  std::string::__init_copy_ctor_external(&v31, (const std::string::value_type *)v18, *((std::string::size_type *)&v18 + 1));
LABEL_43:
  turi::v2_block_impl::block_writer::open_segment(a1 + 24, a2);
}

void sub_22435A580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::locale a28)
{
  std::locale::~locale(&a22);
  if (a21 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a28);
  if (v29 < 0) {
    operator delete(v28);
  }
  if (*(char *)(v30 - 105) < 0) {
    operator delete(*(void **)(v30 - 128));
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(void *)(v7 + 40) = 0;
        *(void *)(v7 + 48) = 0;
        *(void *)(v7 + 32) = 16;
        v7 += 56;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::toolkit_class_specification>>(result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    int v15 = &v14[56 * a2];
    do
    {
      *(_OWORD *)uint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((void *)v14 + 5) = 0;
      *((void *)v14 + 6) = 0;
      *((void *)v14 + 4) = 16;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_22435A7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  uint64_t v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 56;
      std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer const&>(a1, (__n128 *)(v7 - 56), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_22435A8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>::construct[abi:ne180100]<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer const&>(uint64_t a1, __n128 *a2, uint64_t a3)
{
  a2->n128_u8[0] = 0;
  a2[1].n128_u64[0] = 0;
  a2[1].n128_u64[1] = 0;
  a2->n128_u64[1] = 0;
  std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__init_with_size[abi:ne180100]<std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*>(&a2->n128_u64[1], *(uint64_t **)(a3 + 8), *(uint64_t **)(a3 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
  __n128 result = *(__n128 *)(a3 + 32);
  a2[3].n128_u64[0] = *(void *)(a3 + 48);
  a2[2] = result;
  return result;
}

void sub_22435A968(_Unwind_Exception *a1)
{
  turi::simple_spinlock::~simple_spinlock(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__init_with_size[abi:ne180100]<std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*>(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22435A9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*,std::vector<turi::ml_data_internal::row_data_block>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::ml_data_internal::row_data_block>::__init_with_size[abi:ne180100]<turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 4));
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22435AAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<turi::ml_data_internal::row_data_block>::__init_with_size[abi:ne180100]<turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::vector<turi::flexible_type>,std::string>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22435AB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*,turi::ml_data_internal::row_data_block*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>(a1, v4, v6);
      v6 += 48;
      unint64_t v4 = v12 + 6;
      v12 += 6;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_22435ABE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a2 + 3, *(uint64_t **)(a3 + 24), *(uint64_t **)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 4);
}

void sub_22435AC54(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::ml_data_internal::row_data_block>,turi::ml_data_internal::row_data_block*>::operator()[abi:ne180100](uint64_t *a1)
{
  unint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::vector<turi::ml_data_internal::row_data_block>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  unint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>,std::reverse_iterator<std::reverse_iterator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (unint64_t i = *(void ***)(a2 + 32); i != *(void ***)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = i + 1;
    std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock((turi::simple_spinlock *)i);
    unint64_t i = (void **)(*(void *)(a2 + 32) + 56);
  }
}

uint64_t std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer,std::allocator<turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::column_buffer> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v5 = (turi::simple_spinlock *)(i - 56);
    *(void *)(a1 + 16) = i - 56;
    uint64_t v6 = (void **)(i - 48);
    std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__destroy_vector::operator()[abi:ne180100](&v6);
    turi::simple_spinlock::~simple_spinlock(v5);
  }
}

void std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::~__split_buffer(&v15);
  }
}

void sub_22435B09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::ml_data_internal::row_data_block>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::ml_data_internal::row_data_block>>,std::reverse_iterator<std::vector<turi::ml_data_internal::row_data_block>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<turi::ml_data_internal::row_data_block>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<turi::ml_data_internal::row_data_block>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void turi::sarray_group_format_writer_v2<turi::ml_data_internal::row_data_block>::flush_block(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 384);
  uint64_t v4 = v3 + 56 * a2;
  uint64_t v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = (uint64_t *)(*(void *)(v4 + 8) + 24 * a3);
  uint64_t v7 = v6[1];
  if (*v6 != v7)
  {
    uint64_t v11 = (v7 - *v6) >> 4;
    uint64_t v25 = -1;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v28 = 0;
    uint64_t v12 = turi::v2_block_impl::block_writer::write_block<turi::ml_data_internal::row_data_block>((pthread_mutex_t *)(a1 + 24), a3, a2, v6, (uint64_t)&v25);
    uint64_t v13 = *v5;
    uint64_t v14 = *v5 + 24 * a3;
    uint64_t v17 = *(void *)(v14 + 8);
    uint64_t v16 = (void *)(v14 + 8);
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v13 + 24 * a3);
    if (v17 != v18)
    {
      uint64_t v19 = v13 + 24 * a3 + 16;
      do
      {
        v15 -= 48;
        std::allocator<turi::ml_data_internal::row_data_block>::destroy[abi:ne180100](v19, v15);
      }
      while (v15 != v18);
    }
    void *v16 = v18;
    do
    {
      while (*(unsigned char *)v4 == 1)
        ;
    }
    while (atomic_exchange((atomic_uchar *volatile)v4, 1u));
    unint64_t v20 = (void *)(v3 + 56 * a2);
    uint64_t v21 = v20[5] + v12;
    uint64_t v22 = v20[6] - 0x5555555555555555 * v11;
    v20[5] = v21;
    v20[6] = v22;
    unint64_t v23 = (unint64_t)(float)((float)(unint64_t)turi::SFRAME_DEFAULT_BLOCK_SIZE
                                  / (float)((float)(unint64_t)(v21 + 1) / (float)(unint64_t)(v22 + 1)));
    if (*(void *)"\b" > v23) {
      unint64_t v23 = *(void *)"\b";
    }
    v20[4] = v23;
    unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3) * *(void *)(a1 + 16);
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v24 < v23) {
      unint64_t v23 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS / v24;
    }
    v20[4] = v23;
    if (turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK < v23) {
      unint64_t v23 = turi::SFRAME_WRITER_MAX_BUFFERED_CELLS_PER_BLOCK;
    }
    v20[4] = v23;
    __dmb(0xBu);
    *(unsigned char *)uint64_t v4 = 0;
  }
}

uint64_t turi::v2_block_impl::block_writer::write_block<turi::ml_data_internal::row_data_block>(pthread_mutex_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  turi::buffer_pool<std::vector<char>>::get_new_buffer(a1, (uint64_t)&v19);
  long long v15 = 0u;
  uint64_t v17 = 0;
  long long v16 = v19.n128_u64[0];
  *((void *)&v16 + 1) = *(void *)v19.n128_u64[0];
  uint64_t v18 = *(void *)(v19.n128_u64[0] + 8) - *((void *)&v16 + 1);
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::ml_data_internal::row_data_block,false>::exec((uint64_t)&v15, a4);
  *(void *)(a5 + 16) = v17;
  *(void *)(a5 + 24) = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 4);
  uint64_t v10 = *(void *)v19.n128_u64[0];
  long long v11 = *(_OWORD *)(a5 + 32);
  v14[1] = *(_OWORD *)(a5 + 16);
  v14[2] = v11;
  v14[0] = *(_OWORD *)a5;
  uint64_t v12 = turi::v2_block_impl::block_writer::write_block((uint64_t)a1, a2, a3, v10, v14);
  turi::buffer_pool<std::vector<char>>::release_buffer(a1, &v19);
  if (v19.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.n128_u64[1]);
  }
  return v12;
}

void sub_22435B5AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 56);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::ml_data_internal::row_data_block,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v10 = 2 * v5 + 16;
      *(void *)(a1 + 40) = v10;
      long long v11 = *(char ***)(a1 + 16);
      if (v11)
      {
        uint64_t v6 = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          uint64_t v6 = **(char ***)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      uint64_t v6 = *(char **)(a1 + 24);
    }
    *(void *)&v6[*(void *)(a1 + 32)] = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      turi::ml_data_internal::row_data_block::save((turi::ml_data_internal::row_data_block *)(v7 + v8), (turi::oarchive *)a1);
      ++v9;
      uint64_t v7 = *a2;
      v8 += 48;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4));
  }
}

uint64_t std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block const&>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  std::vector<char>::size_type v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  size_t v10 = v7;
  long long v11 = &v7[48 * v3];
  BOOL v13 = &v7[48 * v6];
  std::allocator<turi::ml_data_internal::row_data_block>::construct[abi:ne180100]<turi::ml_data_internal::row_data_block,turi::ml_data_internal::row_data_block&>((uint64_t)(a1 + 2), v11, a2);
  size_t v12 = v11 + 48;
  std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(&v10);
  return v8;
}

void sub_22435B808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::ml_data_internal::row_data_block>::__push_back_slow_path<turi::ml_data_internal::row_data_block>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  size_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v7, v9);
  long long v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v12];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)long long v11 = 0;
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  v15[2] = v11 + 48;
  std::vector<turi::ml_data_internal::row_data_block>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer(v15);
  return v13;
}

void sub_22435B934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::ml_data_internal::row_data_block>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D779CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D779CF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 176) + 72))(*(void *)(*(void *)(a1 + 8) + 176), 0, *(void *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block const&)#1}>,void ()(turi::ml_data_internal::row_data_block const&)>::target_type()
{
}

__n128 std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D779D88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D779D88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 176) + 80))(*(void *)(*(void *)(a1 + 8) + 176), 0, *(void *)(a1 + 16), a2);
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::ml_data_internal::row_data_block&&)#1},std::allocator<turi::ml_data_internal::row_data_block&&>,void ()(turi::ml_data_internal::row_data_block&)>::target_type()
{
}

void *std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26D779E18;
  return result;
}

void std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D779E18;
}

uint64_t std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1},std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>::get_output_iterator(unsigned long)::{lambda(turi::sframe_rows const&)#1}>,void ()(turi::sframe_rows const&)>::target_type()
{
}

uint64_t turi::sframe_function_output_iterator<turi::ml_data_internal::row_data_block,std::function<void ()(turi::ml_data_internal::row_data_block const&)>,std::function<void ()(turi::ml_data_internal::row_data_block&&)>,std::function<void ()(turi::sframe_rows const&)>>::sframe_function_output_iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::__value_func[abi:ne180100](a1 + 64, a4);
  return a1;
}

void sub_22435BC40(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      std::vector<char>::size_type v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v4, v13);
    }
    else {
      std::vector<char>::size_type v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[32 * v10];
    uint64_t v18 = &v14[32 * v13];
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    uint64_t v17 = v16 + 32;
    std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::function<void ()(void)>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_22435BF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *turi::scoped_finally::scoped_finally(void *a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = (char *)operator new(0x20uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 32;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)> const*,std::function<void ()(void)> const*,std::function<void ()(void)>*>((uint64_t)(a1 + 2), (uint64_t)v5, (uint64_t)&v6, (uint64_t)v3);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
  return a1;
}

void sub_22435C1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void **);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v4 = v3;
  *(void *)(v2 + 8) = v4;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(void)>>,std::function<void ()(void)> const*,std::function<void ()(void)> const*,std::function<void ()(void)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_22435C248(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::scoped_finally::~scoped_finally(void **this)
{
  turi::scoped_finally::execute_and_clear(this);
  uint64_t v2 = this;
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void *std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::map<std::string,turi::ml_column_mode>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,turi::ml_column_mode>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::ml_column_mode>,std::__tree_node<std::__value_type<std::string,turi::ml_column_mode>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_22435C588(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,turi::ml_column_mode>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::ml_column_mode>,std::__tree_node<std::__value_type<std::string,turi::ml_column_mode>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,turi::unary_op>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unary_op>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unary_op>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::unary_op> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::shared_ptr[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22435C694(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::shared_ptr[abi:ne180100]<turi::sarray<turi::ml_data_internal::row_data_block>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::sarray<turi::ml_data_internal::row_data_block> *,std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::__shared_ptr_default_delete<turi::sarray<turi::ml_data_internal::row_data_block>,turi::sarray<turi::ml_data_internal::row_data_block>>,std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::sarray<turi::ml_data_internal::row_data_block> *,std::shared_ptr<turi::sarray<turi::ml_data_internal::row_data_block>>::__shared_ptr_default_delete<turi::sarray<turi::ml_data_internal::row_data_block>,turi::sarray<turi::ml_data_internal::row_data_block>>,std::allocator<turi::sarray<turi::ml_data_internal::row_data_block>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D779F10;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D779F10;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D779F10;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D779F10;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  return turi::ml_data_internal::column_indexer::finalize(*(turi::ml_data_internal::column_indexer **)(a1 + 8));
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_1>,void ()(void)>::target_type()
{
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D779F90;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D779F90;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D779F90;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D779F90;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  operator delete(__p);
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_2>,void ()(void)>::target_type()
{
}

void turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3::operator()(void **a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)((*a1)[13] + 16 * a2);
  uint64_t v6 = *v4;
  uint64_t v5 = (std::__shared_weak_count *)v4[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(_DWORD *)(v6 + 24) != 5)
  {
    uint64_t v7 = *(void *)(*a1[1] + 16 * a2);
    if (*(unsigned char *)(v7 + 248)) {
      BOOL v8 = *(unsigned __int8 *)(v7 + 249) == 0;
    }
    else {
      BOOL v8 = 0;
    }
    assert_msg(v8, "Input data not properly set up for reading.");
    turi::sarray<turi::flexible_type>::get_reader(*(void *)(*a1[1] + 16 * a2));
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_22435CCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3>(unsigned long,unsigned long,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_7ml_data17_fill_data_blocksERKNS_6sframeEbbNS_23ml_mis"
                                        "sing_value_actionERKNSt3__14pairImmEERKNS6_3setINS6_12basic_stringIcNS6_11char_t"
                                        "raitsIcEENS6_9allocatorIcEEEENS6_4lessISH_EENSF_ISH_EEEEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_7ml_data17_fill_data_blocksERKNS_6sframeEbbNS_23ml_missing_value_actionERKNSt3__14pairImmEERKNS6_3setINS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEENS6_4lessISH_EENSF_ISH_EEEEE3$_3EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3>(unsigned long,unsigned long,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3 const&)::{lambda(void)#1},void>::invoke(uint64_t a1)
{
  for (unint64_t i = *(void *)(a1 + 8); i < *(void *)(a1 + 16); ++i)
    turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_3::operator()(*(void ***)a1, i);
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::~__func()
{
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D77A030;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D77A030;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::operator()(uint64_t a1)
{
  return turi::ml_data_internal::column_indexer::finalize(*(turi::ml_data_internal::column_indexer **)(a1 + 8));
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_4>,void ()(void)>::target_type()
{
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D77A0B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D77A0B0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, const turi::flexible_type **a2, void *a3)
{
  long long v3 = *a2;
  uint64_t v4 = **(void **)(a1 + 16);
  uint64_t v5 = **(void **)(a1 + 8) - v4;
  unint64_t v6 = v5 * (void)*a2;
  unint64_t v7 = v6 / *a3;
  unint64_t v8 = v7 + v4;
  unint64_t v9 = (v5 + v6) / *a3;
  unint64_t v10 = v9 + v4;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (v7 + v4 < v9 + v4)
  {
    do
    {
      unint64_t v12 = v8;
      v8 += 4096;
      if (v8 >= **(void **)(a1 + 8)) {
        unint64_t v14 = **(void **)(a1 + 8);
      }
      else {
        unint64_t v14 = v8;
      }
      uint64_t v13 = *(void *)(**(void **)(a1 + 24) + 16 * **(void **)(a1 + 32));
      (*(void (**)(uint64_t, unint64_t, unint64_t, atomic_ullong ***))(*(void *)v13 + 48))(v13, v12, v14, &v17);
      long long v15 = v17;
      long long v16 = v18;
      while (v15 != v16)
      {
        turi::ml_data_internal::column_indexer::map_value_to_index(*(turi::ml_data_internal::column_indexer **)(a1 + 40), v3, v15);
        v15 += 2;
      }
    }
    while (v8 < v10);
  }
  unint64_t v20 = &v17;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_22435D084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_5>,void ()(unsigned long,unsigned long)>::target_type()
{
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *,false>(uint64_t result, unsigned __int8 *a2, uint64_t a3, char a4, __n128 a5)
{
  unint64_t v9 = result;
  uint64_t v299 = *MEMORY[0x263EF8340];
  while (2)
  {
    unint64_t v10 = a2 - 16;
    unint64_t v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v11;
          uint64_t v12 = (uint64_t)&a2[-v11];
          uint64_t v13 = (uint64_t)&a2[-v11] >> 4;
          if (v6 || !v5)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return result;
              case 2:
                __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v10, (unsigned __int8 *)v9, a5);
                if (result)
                {
                  __n128 v298 = *(__n128 *)v9;
                  unint64_t v104 = *(void *)v10;
                  *(void *)(v9 + 5) = *(void *)(a2 - 11);
                  *(void *)unint64_t v9 = v104;
                  unint64_t v105 = v298.n128_u64[0];
                  *(void *)(a2 - 11) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                  *(void *)unint64_t v10 = v105;
                }
                break;
              case 3:
                __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)v9, (long long *)(v9 + 16), (uint64_t)v10, a5);
                break;
              case 4:
                __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(v9, v9 + 16, v9 + 32, (uint64_t)v10, a5);
                break;
              case 5:
                char v106 = (__n128 *)(v9 + 16);
                char v107 = (__n128 *)(v9 + 32);
                v108 = (__n128 *)(v9 + 48);
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(v9, v9 + 16, v9 + 32, v9 + 48, a5);
                __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v10, (unsigned __int8 *)(v9 + 48), v109);
                if (result)
                {
                  __n128 v298 = *v108;
                  __n128 v110 = v298;
                  unint64_t v111 = *(void *)v10;
                  *(void *)(v9 + 53) = *(void *)(a2 - 11);
                  v108->n128_u64[0] = v111;
                  unint64_t v112 = v298.n128_u64[0];
                  *(void *)(a2 - 11) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                  *(void *)unint64_t v10 = v112;
                  __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v9 + 48), (unsigned __int8 *)(v9 + 32), v110);
                  if (result)
                  {
                    __n128 v298 = *v107;
                    __n128 v113 = v298;
                    v107->n128_u64[0] = v108->n128_u64[0];
                    *(void *)(v9 + 37) = *(void *)(v9 + 53);
                    v108->n128_u64[0] = v298.n128_u64[0];
                    *(void *)(v9 + 53) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                    __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v9 + 32), (unsigned __int8 *)(v9 + 16), v113);
                    if (result)
                    {
                      __n128 v298 = *v106;
                      __n128 v114 = v298;
                      v106->n128_u64[0] = v107->n128_u64[0];
                      *(void *)(v9 + 21) = *(void *)(v9 + 37);
                      v107->n128_u64[0] = v298.n128_u64[0];
                      *(void *)(v9 + 37) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                      __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v9 + 16), (unsigned __int8 *)v9, v114);
                      if (result)
                      {
                        __n128 v298 = *(__n128 *)v9;
                        *(void *)unint64_t v9 = v106->n128_u64[0];
                        *(void *)(v9 + 5) = *(void *)(v9 + 21);
                        v106->n128_u64[0] = v298.n128_u64[0];
                        *(void *)(v9 + 21) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 383)
          {
            if (a4)
            {
              if ((unsigned __int8 *)v9 != a2)
              {
                v115 = (unsigned __int8 *)(v9 + 16);
                if ((unsigned __int8 *)(v9 + 16) != a2)
                {
                  uint64_t v116 = 0;
                  v117 = (unsigned __int8 *)v9;
                  do
                  {
                    v118 = v115;
                    __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v115, v117, a5);
                    if (result)
                    {
                      unint64_t v119 = *(void *)v118;
                      *(unint64_t *)((char *)v298.n128_u64 + 5) = *(void *)(v118 + 5);
                      v298.n128_u64[0] = v119;
                      v298.n128_u8[12] = v117[28];
                      v117[28] = 0;
                      uint64_t v120 = v116;
                      while (1)
                      {
                        uint64_t v121 = v9 + v120;
                        v122 = (atomic_ullong *volatile *)(v9 + v120 + 16);
                        switch(*(unsigned char *)(v9 + v120 + 28))
                        {
                          case 2:
                            if (atomic_fetch_add(*v122, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v123 = *v122;
                              if (!*v122) {
                                goto LABEL_232;
                              }
                              if (*((char *)v123 + 31) < 0) {
                                operator delete((void *)v123[1]);
                              }
                              atomic_ullong *volatile v124 = v123;
                              uint64_t v125 = 0x1012C404EF22A49;
                              goto LABEL_231;
                            }
                            break;
                          case 3:
                            if (atomic_fetch_add(*v122, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v126 = *v122;
                              if (!*v122) {
                                goto LABEL_232;
                              }
                              v127 = (void *)v126[1];
                              if (v127)
                              {
                                v126[2] = (atomic_ullong)v127;
                                operator delete(v127);
                              }
                              atomic_ullong *volatile v124 = v126;
                              uint64_t v125 = 0x1080C409938AC02;
                              goto LABEL_231;
                            }
                            break;
                          case 4:
                            if (atomic_fetch_add(*v122, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v128 = *v122;
                              if (!*v122) {
                                goto LABEL_232;
                              }
                              *(void *)v297 = v128 + 1;
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
                              goto LABEL_217;
                            }
                            break;
                          case 5:
                            if (atomic_fetch_add(*v122, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v128 = *v122;
                              if (!*v122) {
                                goto LABEL_232;
                              }
                              *(void *)v297 = v128 + 1;
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
LABEL_217:
                              atomic_ullong *volatile v124 = v128;
                              uint64_t v125 = 0x1020C405E66F15BLL;
                              goto LABEL_231;
                            }
                            break;
                          case 8:
                            if (atomic_fetch_add(*v122, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v129 = *v122;
                              if (!*v122) {
                                goto LABEL_232;
                              }
                              boost::detail::shared_count::~shared_count((atomic_uint **)v129 + 2);
                              atomic_ullong *volatile v124 = v129;
                              unsigned int v130 = -235920773;
                              goto LABEL_230;
                            }
                            break;
                          case 9:
                            if (atomic_fetch_add(*v122, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v131 = *v122;
                              if (*v122)
                              {
                                v132 = (void *)v131[6];
                                if (v132)
                                {
                                  v131[7] = (atomic_ullong)v132;
                                  operator delete(v132);
                                }
                                v133 = (void *)v131[3];
                                if (v133)
                                {
                                  v131[4] = (atomic_ullong)v133;
                                  operator delete(v133);
                                }
                                v134 = (std::__shared_weak_count *)v131[2];
                                if (v134) {
                                  std::__shared_weak_count::__release_shared[abi:ne180100](v134);
                                }
                                atomic_ullong *volatile v124 = v131;
                                unsigned int v130 = 2071181815;
LABEL_230:
                                uint64_t v125 = v130 | 0x1030C4000000000;
LABEL_231:
                                __n128 result = MEMORY[0x22A614FA0](v124, v125);
                              }
LABEL_232:
                              atomic_ullong *volatile *v122 = 0;
                            }
                            break;
                          default:
                            break;
                        }
                        *(void *)(v9 + v120 + 21) = *(void *)(v121 + 5);
                        atomic_ullong *volatile *v122 = *(atomic_ullong *volatile *)v121;
                        *(unsigned char *)(v121 + 28) = *(unsigned char *)(v121 + 12);
                        *(unsigned char *)(v121 + 12) = 0;
                        if (!v120) {
                          break;
                        }
                        __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)&v298, (unsigned __int8 *)(v9 + v120 - 16), a5);
                        v120 -= 16;
                        if ((result & 1) == 0)
                        {
                          uint64_t v135 = v9 + v120 + 16;
                          goto LABEL_237;
                        }
                      }
                      uint64_t v135 = v9;
LABEL_237:
                      switch(*(unsigned char *)(v135 + 12))
                      {
                        case 2:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v135, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v136 = *(atomic_ullong *volatile *)v135;
                            if (!*(void *)v135) {
                              goto LABEL_269;
                            }
                            if (*((char *)v136 + 31) < 0) {
                              operator delete((void *)v136[1]);
                            }
                            atomic_ullong *volatile v137 = v136;
                            uint64_t v138 = 0x1012C404EF22A49;
                            goto LABEL_268;
                          }
                          break;
                        case 3:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v135, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v139 = *(atomic_ullong *volatile *)v135;
                            if (!*(void *)v135) {
                              goto LABEL_269;
                            }
                            v140 = (void *)v139[1];
                            if (v140)
                            {
                              v139[2] = (atomic_ullong)v140;
                              operator delete(v140);
                            }
                            atomic_ullong *volatile v137 = v139;
                            uint64_t v138 = 0x1080C409938AC02;
                            goto LABEL_268;
                          }
                          break;
                        case 4:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v135, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v141 = *(atomic_ullong *volatile *)v135;
                            if (!*(void *)v135) {
                              goto LABEL_269;
                            }
                            *(void *)v297 = v141 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
                            goto LABEL_254;
                          }
                          break;
                        case 5:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v135, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v141 = *(atomic_ullong *volatile *)v135;
                            if (!*(void *)v135) {
                              goto LABEL_269;
                            }
                            *(void *)v297 = v141 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
LABEL_254:
                            atomic_ullong *volatile v137 = v141;
                            uint64_t v138 = 0x1020C405E66F15BLL;
                            goto LABEL_268;
                          }
                          break;
                        case 8:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v135, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v142 = *(atomic_ullong *volatile *)v135;
                            if (!*(void *)v135) {
                              goto LABEL_269;
                            }
                            boost::detail::shared_count::~shared_count((atomic_uint **)v142 + 2);
                            atomic_ullong *volatile v137 = v142;
                            unsigned int v143 = -235920773;
                            goto LABEL_267;
                          }
                          break;
                        case 9:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v135, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v144 = *(atomic_ullong *volatile *)v135;
                            if (*(void *)v135)
                            {
                              v145 = (void *)v144[6];
                              if (v145)
                              {
                                v144[7] = (atomic_ullong)v145;
                                operator delete(v145);
                              }
                              v146 = (void *)v144[3];
                              if (v146)
                              {
                                v144[4] = (atomic_ullong)v146;
                                operator delete(v146);
                              }
                              v147 = (std::__shared_weak_count *)v144[2];
                              if (v147) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v147);
                              }
                              atomic_ullong *volatile v137 = v144;
                              unsigned int v143 = 2071181815;
LABEL_267:
                              uint64_t v138 = v143 | 0x1030C4000000000;
LABEL_268:
                              __n128 result = MEMORY[0x22A614FA0](v137, v138);
                            }
LABEL_269:
                            *(void *)uint64_t v135 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      unint64_t v148 = v298.n128_u64[0];
                      *(void *)(v135 + 5) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                      *(void *)uint64_t v135 = v148;
                      *(unsigned char *)(v135 + 12) = v298.n128_u8[12];
                    }
                    v115 = v118 + 16;
                    v116 += 16;
                    v117 = v118;
                  }
                  while (v118 + 16 != a2);
                }
              }
            }
            else if ((unsigned __int8 *)v9 != a2)
            {
              v261 = (unsigned __int8 *)(v9 + 16);
              if ((unsigned __int8 *)(v9 + 16) != a2)
              {
                unint64_t v262 = v9 - 16;
                do
                {
                  v263 = v261;
                  __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v261, (unsigned __int8 *)v9, a5);
                  if (result)
                  {
                    unint64_t v264 = *(void *)v263;
                    *(unint64_t *)((char *)v298.n128_u64 + 5) = *(void *)(v263 + 5);
                    v298.n128_u64[0] = v264;
                    v298.n128_u8[12] = *(unsigned char *)(v9 + 28);
                    *(unsigned char *)(v9 + 28) = 0;
                    unint64_t v265 = v262;
                    do
                    {
                      v266 = (atomic_ullong *volatile *)(v265 + 32);
                      switch(*(unsigned char *)(v265 + 44))
                      {
                        case 2:
                          if (atomic_fetch_add(*v266, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v267 = *v266;
                            if (!*v266) {
                              goto LABEL_581;
                            }
                            if (*((char *)v267 + 31) < 0) {
                              operator delete((void *)v267[1]);
                            }
                            atomic_ullong *volatile v268 = v267;
                            uint64_t v269 = 0x1012C404EF22A49;
                            goto LABEL_580;
                          }
                          break;
                        case 3:
                          if (atomic_fetch_add(*v266, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v276 = *v266;
                            if (!*v266) {
                              goto LABEL_581;
                            }
                            v277 = (void *)v276[1];
                            if (v277)
                            {
                              v276[2] = (atomic_ullong)v277;
                              operator delete(v277);
                            }
                            atomic_ullong *volatile v268 = v276;
                            uint64_t v269 = 0x1080C409938AC02;
                            goto LABEL_580;
                          }
                          break;
                        case 4:
                          if (atomic_fetch_add(*v266, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v270 = *v266;
                            if (!*v266) {
                              goto LABEL_581;
                            }
                            *(void *)v297 = v270 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
                            goto LABEL_575;
                          }
                          break;
                        case 5:
                          if (atomic_fetch_add(*v266, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v270 = *v266;
                            if (!*v266) {
                              goto LABEL_581;
                            }
                            *(void *)v297 = v270 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
LABEL_575:
                            atomic_ullong *volatile v268 = v270;
                            uint64_t v269 = 0x1020C405E66F15BLL;
                            goto LABEL_580;
                          }
                          break;
                        case 8:
                          if (atomic_fetch_add(*v266, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v278 = *v266;
                            if (!*v266) {
                              goto LABEL_581;
                            }
                            boost::detail::shared_count::~shared_count((atomic_uint **)v278 + 2);
                            atomic_ullong *volatile v268 = v278;
                            unsigned int v275 = -235920773;
                            goto LABEL_579;
                          }
                          break;
                        case 9:
                          if (atomic_fetch_add(*v266, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v271 = *v266;
                            if (*v266)
                            {
                              v272 = (void *)v271[6];
                              if (v272)
                              {
                                v271[7] = (atomic_ullong)v272;
                                operator delete(v272);
                              }
                              v273 = (void *)v271[3];
                              if (v273)
                              {
                                v271[4] = (atomic_ullong)v273;
                                operator delete(v273);
                              }
                              v274 = (std::__shared_weak_count *)v271[2];
                              if (v274) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v274);
                              }
                              atomic_ullong *volatile v268 = v271;
                              unsigned int v275 = 2071181815;
LABEL_579:
                              uint64_t v269 = v275 | 0x1030C4000000000;
LABEL_580:
                              MEMORY[0x22A614FA0](v268, v269);
                            }
LABEL_581:
                            atomic_ullong *volatile *v266 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      *(void *)(v265 + 37) = *(void *)(v265 + 21);
                      atomic_ullong *volatile *v266 = *(atomic_ullong *volatile *)(v265 + 16);
                      *(unsigned char *)(v265 + 44) = *(unsigned char *)(v265 + 28);
                      *(unsigned char *)(v265 + 28) = 0;
                      __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)&v298, (unsigned __int8 *)v265, a5);
                      v265 -= 16;
                    }
                    while ((result & 1) != 0);
                    v279 = (atomic_ullong *volatile *)(v265 + 32);
                    switch(*(unsigned char *)(v265 + 44))
                    {
                      case 2:
                        if (atomic_fetch_add(*v279, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v280 = *v279;
                          if (!*v279) {
                            goto LABEL_615;
                          }
                          if (*((char *)v280 + 31) < 0) {
                            operator delete((void *)v280[1]);
                          }
                          atomic_ullong *volatile v281 = v280;
                          uint64_t v282 = 0x1012C404EF22A49;
                          goto LABEL_614;
                        }
                        break;
                      case 3:
                        if (atomic_fetch_add(*v279, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v283 = *v279;
                          if (!*v279) {
                            goto LABEL_615;
                          }
                          v284 = (void *)v283[1];
                          if (v284)
                          {
                            v283[2] = (atomic_ullong)v284;
                            operator delete(v284);
                          }
                          atomic_ullong *volatile v281 = v283;
                          uint64_t v282 = 0x1080C409938AC02;
                          goto LABEL_614;
                        }
                        break;
                      case 4:
                        if (atomic_fetch_add(*v279, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v285 = *v279;
                          if (!*v279) {
                            goto LABEL_615;
                          }
                          *(void *)v297 = v285 + 1;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
                          goto LABEL_600;
                        }
                        break;
                      case 5:
                        if (atomic_fetch_add(*v279, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v285 = *v279;
                          if (!*v279) {
                            goto LABEL_615;
                          }
                          *(void *)v297 = v285 + 1;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
LABEL_600:
                          atomic_ullong *volatile v281 = v285;
                          uint64_t v282 = 0x1020C405E66F15BLL;
                          goto LABEL_614;
                        }
                        break;
                      case 8:
                        if (atomic_fetch_add(*v279, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v286 = *v279;
                          if (!*v279) {
                            goto LABEL_615;
                          }
                          boost::detail::shared_count::~shared_count((atomic_uint **)v286 + 2);
                          atomic_ullong *volatile v281 = v286;
                          unsigned int v287 = -235920773;
                          goto LABEL_613;
                        }
                        break;
                      case 9:
                        if (atomic_fetch_add(*v279, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v288 = *v279;
                          if (*v279)
                          {
                            v289 = (void *)v288[6];
                            if (v289)
                            {
                              v288[7] = (atomic_ullong)v289;
                              operator delete(v289);
                            }
                            v290 = (void *)v288[3];
                            if (v290)
                            {
                              v288[4] = (atomic_ullong)v290;
                              operator delete(v290);
                            }
                            v291 = (std::__shared_weak_count *)v288[2];
                            if (v291) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v291);
                            }
                            atomic_ullong *volatile v281 = v288;
                            unsigned int v287 = 2071181815;
LABEL_613:
                            uint64_t v282 = v287 | 0x1030C4000000000;
LABEL_614:
                            __n128 result = MEMORY[0x22A614FA0](v281, v282);
                          }
LABEL_615:
                          atomic_ullong *volatile *v279 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    v292 = (atomic_ullong *)v298.n128_u64[0];
                    *(void *)(v265 + 37) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                    atomic_ullong *volatile *v279 = v292;
                    *(unsigned char *)(v265 + 44) = v298.n128_u8[12];
                  }
                  v261 = v263 + 16;
                  v262 += 16;
                  unint64_t v9 = (unint64_t)v263;
                }
                while (v263 + 16 != a2);
              }
            }
            return result;
          }
          if (!a3)
          {
            if ((unsigned __int8 *)v9 != a2)
            {
              int64_t v149 = (unint64_t)(v13 - 2) >> 1;
              int64_t v150 = v149;
              do
              {
                int64_t v151 = v150;
                if (v149 >= v150)
                {
                  uint64_t v152 = (2 * v150) | 1;
                  v153 = (unsigned __int8 *)(v9 + 16 * v152);
                  if (2 * v150 + 2 < v13
                    && turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v9 + 16 * v152), v153 + 16, a5))
                  {
                    v153 += 16;
                    uint64_t v152 = 2 * v151 + 2;
                  }
                  unint64_t v154 = v9 + 16 * v151;
                  __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v153, (unsigned __int8 *)v154, a5);
                  if ((result & 1) == 0)
                  {
                    atomic_ullong *volatile v155 = *(atomic_ullong *volatile *)v154;
                    *(unint64_t *)((char *)v298.n128_u64 + 5) = *(void *)(v154 + 5);
                    v298.n128_u64[0] = (unint64_t)v155;
                    v298.n128_u8[12] = *(unsigned char *)(v154 + 12);
                    *(unsigned char *)(v154 + 12) = 0;
                    do
                    {
                      v156 = v153;
                      if (v153 != (unsigned __int8 *)v154)
                      {
                        switch(*(unsigned char *)(v154 + 12))
                        {
                          case 2:
                            if (atomic_fetch_add(*(atomic_ullong *volatile *)v154, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v157 = *(atomic_ullong *volatile *)v154;
                              if (!*(void *)v154) {
                                goto LABEL_314;
                              }
                              if (*((char *)v157 + 31) < 0) {
                                operator delete((void *)v157[1]);
                              }
                              atomic_ullong *volatile v158 = v157;
                              uint64_t v159 = 0x1012C404EF22A49;
                              goto LABEL_313;
                            }
                            break;
                          case 3:
                            if (atomic_fetch_add(*(atomic_ullong *volatile *)v154, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v160 = *(atomic_ullong *volatile *)v154;
                              if (!*(void *)v154) {
                                goto LABEL_314;
                              }
                              v161 = (void *)v160[1];
                              if (v161)
                              {
                                v160[2] = (atomic_ullong)v161;
                                operator delete(v161);
                              }
                              atomic_ullong *volatile v158 = v160;
                              uint64_t v159 = 0x1080C409938AC02;
                              goto LABEL_313;
                            }
                            break;
                          case 4:
                            if (atomic_fetch_add(*(atomic_ullong *volatile *)v154, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v162 = *(atomic_ullong *volatile *)v154;
                              if (!*(void *)v154) {
                                goto LABEL_314;
                              }
                              *(void *)v297 = v162 + 1;
                              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
                              goto LABEL_299;
                            }
                            break;
                          case 5:
                            if (atomic_fetch_add(*(atomic_ullong *volatile *)v154, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v162 = *(atomic_ullong *volatile *)v154;
                              if (!*(void *)v154) {
                                goto LABEL_314;
                              }
                              *(void *)v297 = v162 + 1;
                              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
LABEL_299:
                              atomic_ullong *volatile v158 = v162;
                              uint64_t v159 = 0x1020C405E66F15BLL;
                              goto LABEL_313;
                            }
                            break;
                          case 8:
                            if (atomic_fetch_add(*(atomic_ullong *volatile *)v154, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v163 = *(atomic_ullong *volatile *)v154;
                              if (!*(void *)v154) {
                                goto LABEL_314;
                              }
                              boost::detail::shared_count::~shared_count((atomic_uint **)v163 + 2);
                              atomic_ullong *volatile v158 = v163;
                              unsigned int v164 = -235920773;
                              goto LABEL_312;
                            }
                            break;
                          case 9:
                            if (atomic_fetch_add(*(atomic_ullong *volatile *)v154, 0xFFFFFFFFFFFFFFFFLL) == 1)
                            {
                              atomic_ullong *volatile v165 = *(atomic_ullong *volatile *)v154;
                              if (*(void *)v154)
                              {
                                v166 = (void *)v165[6];
                                if (v166)
                                {
                                  v165[7] = (atomic_ullong)v166;
                                  operator delete(v166);
                                }
                                v167 = (void *)v165[3];
                                if (v167)
                                {
                                  v165[4] = (atomic_ullong)v167;
                                  operator delete(v167);
                                }
                                v168 = (std::__shared_weak_count *)v165[2];
                                if (v168) {
                                  std::__shared_weak_count::__release_shared[abi:ne180100](v168);
                                }
                                atomic_ullong *volatile v158 = v165;
                                unsigned int v164 = 2071181815;
LABEL_312:
                                uint64_t v159 = v164 | 0x1030C4000000000;
LABEL_313:
                                __n128 result = MEMORY[0x22A614FA0](v158, v159);
                              }
LABEL_314:
                              *(void *)unint64_t v154 = 0;
                            }
                            break;
                          default:
                            break;
                        }
                        atomic_ullong *volatile v169 = *(atomic_ullong *volatile *)v156;
                        *(void *)(v154 + 5) = *(void *)(v156 + 5);
                        *(void *)unint64_t v154 = v169;
                        *(unsigned char *)(v154 + 12) = v156[12];
                        v156[12] = 0;
                      }
                      if (v149 < v152) {
                        break;
                      }
                      uint64_t v170 = (2 * v152) | 1;
                      v153 = (unsigned __int8 *)(v9 + 16 * v170);
                      uint64_t v152 = 2 * v152 + 2;
                      if (v152 < v13)
                      {
                        if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v9 + 16 * v170), v153 + 16, a5))v153 += 16; {
                        else
                        }
                          uint64_t v152 = v170;
                      }
                      else
                      {
                        uint64_t v152 = v170;
                      }
                      __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v153, (unsigned __int8 *)&v298, a5);
                      unint64_t v154 = (unint64_t)v156;
                    }
                    while (!result);
                    switch(v156[12])
                    {
                      case 2u:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v156, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v171 = *(atomic_ullong *volatile *)v156;
                          if (!*(void *)v156) {
                            goto LABEL_355;
                          }
                          if (*((char *)v171 + 31) < 0) {
                            operator delete((void *)v171[1]);
                          }
                          atomic_ullong *volatile v172 = v171;
                          uint64_t v173 = 0x1012C404EF22A49;
                          goto LABEL_354;
                        }
                        break;
                      case 3u:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v156, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v174 = *(atomic_ullong *volatile *)v156;
                          if (!*(void *)v156) {
                            goto LABEL_355;
                          }
                          v175 = (void *)v174[1];
                          if (v175)
                          {
                            v174[2] = (atomic_ullong)v175;
                            operator delete(v175);
                          }
                          atomic_ullong *volatile v172 = v174;
                          uint64_t v173 = 0x1080C409938AC02;
                          goto LABEL_354;
                        }
                        break;
                      case 4u:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v156, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v176 = *(atomic_ullong *volatile *)v156;
                          if (!*(void *)v156) {
                            goto LABEL_355;
                          }
                          *(void *)v297 = v176 + 1;
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
                          goto LABEL_340;
                        }
                        break;
                      case 5u:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v156, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v176 = *(atomic_ullong *volatile *)v156;
                          if (!*(void *)v156) {
                            goto LABEL_355;
                          }
                          *(void *)v297 = v176 + 1;
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
LABEL_340:
                          atomic_ullong *volatile v172 = v176;
                          uint64_t v173 = 0x1020C405E66F15BLL;
                          goto LABEL_354;
                        }
                        break;
                      case 8u:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v156, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v177 = *(atomic_ullong *volatile *)v156;
                          if (!*(void *)v156) {
                            goto LABEL_355;
                          }
                          boost::detail::shared_count::~shared_count((atomic_uint **)v177 + 2);
                          atomic_ullong *volatile v172 = v177;
                          unsigned int v178 = -235920773;
                          goto LABEL_353;
                        }
                        break;
                      case 9u:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v156, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v179 = *(atomic_ullong *volatile *)v156;
                          if (*(void *)v156)
                          {
                            v180 = (void *)v179[6];
                            if (v180)
                            {
                              v179[7] = (atomic_ullong)v180;
                              operator delete(v180);
                            }
                            v181 = (void *)v179[3];
                            if (v181)
                            {
                              v179[4] = (atomic_ullong)v181;
                              operator delete(v181);
                            }
                            v182 = (std::__shared_weak_count *)v179[2];
                            if (v182) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v182);
                            }
                            atomic_ullong *volatile v172 = v179;
                            unsigned int v178 = 2071181815;
LABEL_353:
                            uint64_t v173 = v178 | 0x1030C4000000000;
LABEL_354:
                            __n128 result = MEMORY[0x22A614FA0](v172, v173);
                          }
LABEL_355:
                          *(void *)v156 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    unint64_t v183 = v298.n128_u64[0];
                    *(void *)(v156 + 5) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                    *(void *)v156 = v183;
                    v156[12] = v298.n128_u8[12];
                  }
                }
                int64_t v150 = v151 - 1;
              }
              while (v151);
              uint64_t v184 = (unint64_t)v12 >> 4;
              do
              {
                uint64_t v185 = 0;
                v186 = a2;
                uint64_t v295 = *(void *)v9;
                int v293 = *(_DWORD *)(v9 + 8);
                unsigned __int8 v294 = *(unsigned char *)(v9 + 12);
                *(unsigned char *)(v9 + 12) = 0;
                unint64_t v187 = v9;
                do
                {
                  uint64_t v188 = v187 + 16 * v185 + 16;
                  uint64_t v189 = 2 * v185;
                  uint64_t v185 = (2 * v185) | 1;
                  uint64_t v190 = v189 + 2;
                  if (v189 + 2 < v184)
                  {
                    __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)v188, (unsigned __int8 *)(v188 + 16), a5);
                    if (result)
                    {
                      v188 += 16;
                      uint64_t v185 = v190;
                    }
                  }
                  if (v188 != v187)
                  {
                    switch(*(unsigned char *)(v187 + 12))
                    {
                      case 2:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v187, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v191 = *(atomic_ullong *volatile *)v187;
                          if (!*(void *)v187) {
                            goto LABEL_396;
                          }
                          if (*((char *)v191 + 31) < 0) {
                            operator delete((void *)v191[1]);
                          }
                          atomic_ullong *volatile v192 = v191;
                          uint64_t v193 = 0x1012C404EF22A49;
                          goto LABEL_395;
                        }
                        break;
                      case 3:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v187, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v200 = *(atomic_ullong *volatile *)v187;
                          if (!*(void *)v187) {
                            goto LABEL_396;
                          }
                          v201 = (void *)v200[1];
                          if (v201)
                          {
                            v200[2] = (atomic_ullong)v201;
                            operator delete(v201);
                          }
                          atomic_ullong *volatile v192 = v200;
                          uint64_t v193 = 0x1080C409938AC02;
                          goto LABEL_395;
                        }
                        break;
                      case 4:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v187, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v194 = *(atomic_ullong *volatile *)v187;
                          if (!*(void *)v187) {
                            goto LABEL_396;
                          }
                          v298.n128_u64[0] = (unint64_t)(v194 + 1);
                          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                          goto LABEL_390;
                        }
                        break;
                      case 5:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v187, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v194 = *(atomic_ullong *volatile *)v187;
                          if (!*(void *)v187) {
                            goto LABEL_396;
                          }
                          v298.n128_u64[0] = (unint64_t)(v194 + 1);
                          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
LABEL_390:
                          atomic_ullong *volatile v192 = v194;
                          uint64_t v193 = 0x1020C405E66F15BLL;
                          goto LABEL_395;
                        }
                        break;
                      case 8:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v187, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v202 = *(atomic_ullong *volatile *)v187;
                          if (!*(void *)v187) {
                            goto LABEL_396;
                          }
                          boost::detail::shared_count::~shared_count((atomic_uint **)v202 + 2);
                          atomic_ullong *volatile v192 = v202;
                          unsigned int v199 = -235920773;
                          goto LABEL_394;
                        }
                        break;
                      case 9:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)v187, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          atomic_ullong *volatile v195 = *(atomic_ullong *volatile *)v187;
                          if (*(void *)v187)
                          {
                            v196 = (void *)v195[6];
                            if (v196)
                            {
                              v195[7] = (atomic_ullong)v196;
                              operator delete(v196);
                            }
                            v197 = (void *)v195[3];
                            if (v197)
                            {
                              v195[4] = (atomic_ullong)v197;
                              operator delete(v197);
                            }
                            v198 = (std::__shared_weak_count *)v195[2];
                            if (v198) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v198);
                            }
                            atomic_ullong *volatile v192 = v195;
                            unsigned int v199 = 2071181815;
LABEL_394:
                            uint64_t v193 = v199 | 0x1030C4000000000;
LABEL_395:
                            __n128 result = MEMORY[0x22A614FA0](v192, v193);
                          }
LABEL_396:
                          *(void *)unint64_t v187 = 0;
                        }
                        break;
                      default:
                        break;
                    }
                    atomic_ullong *volatile v203 = *(atomic_ullong *volatile *)v188;
                    *(void *)(v187 + 5) = *(void *)(v188 + 5);
                    *(void *)unint64_t v187 = v203;
                    *(unsigned char *)(v187 + 12) = *(unsigned char *)(v188 + 12);
                    *(unsigned char *)(v188 + 12) = 0;
                  }
                  unint64_t v187 = v188;
                }
                while (v185 <= (uint64_t)((unint64_t)(v184 - 2) >> 1));
                a2 -= 16;
                if ((unsigned __int8 *)v188 == v186 - 16)
                {
                  switch(*(unsigned char *)(v188 + 12))
                  {
                    case 2:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v207 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_511;
                        }
                        if (*((char *)v207 + 31) < 0) {
                          operator delete((void *)v207[1]);
                        }
                        atomic_ullong *volatile v208 = v207;
                        uint64_t v209 = 0x1012C404EF22A49;
                        goto LABEL_510;
                      }
                      break;
                    case 3:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v241 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_511;
                        }
                        v242 = (void *)v241[1];
                        if (v242)
                        {
                          v241[2] = (atomic_ullong)v242;
                          operator delete(v242);
                        }
                        atomic_ullong *volatile v208 = v241;
                        uint64_t v209 = 0x1080C409938AC02;
                        goto LABEL_510;
                      }
                      break;
                    case 4:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v243 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_511;
                        }
                        v298.n128_u64[0] = (unint64_t)(v243 + 1);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                        goto LABEL_496;
                      }
                      break;
                    case 5:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v243 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_511;
                        }
                        v298.n128_u64[0] = (unint64_t)(v243 + 1);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
LABEL_496:
                        atomic_ullong *volatile v208 = v243;
                        uint64_t v209 = 0x1020C405E66F15BLL;
                        goto LABEL_510;
                      }
                      break;
                    case 8:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v244 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_511;
                        }
                        boost::detail::shared_count::~shared_count((atomic_uint **)v244 + 2);
                        atomic_ullong *volatile v208 = v244;
                        unsigned int v245 = -235920773;
                        goto LABEL_509;
                      }
                      break;
                    case 9:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v246 = *(atomic_ullong *volatile *)v188;
                        if (*(void *)v188)
                        {
                          v247 = (void *)v246[6];
                          if (v247)
                          {
                            v246[7] = (atomic_ullong)v247;
                            operator delete(v247);
                          }
                          v248 = (void *)v246[3];
                          if (v248)
                          {
                            v246[4] = (atomic_ullong)v248;
                            operator delete(v248);
                          }
                          v249 = (std::__shared_weak_count *)v246[2];
                          if (v249) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v249);
                          }
                          atomic_ullong *volatile v208 = v246;
                          unsigned int v245 = 2071181815;
LABEL_509:
                          uint64_t v209 = v245 | 0x1030C4000000000;
LABEL_510:
                          __n128 result = MEMORY[0x22A614FA0](v208, v209);
                        }
LABEL_511:
                        *(void *)uint64_t v188 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  *(void *)uint64_t v188 = v295;
                  *(_DWORD *)(v188 + 8) = v293;
                  *(unsigned char *)(v188 + 12) = v294;
                }
                else
                {
                  switch(*(unsigned char *)(v188 + 12))
                  {
                    case 2:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v204 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_438;
                        }
                        if (*((char *)v204 + 31) < 0) {
                          operator delete((void *)v204[1]);
                        }
                        atomic_ullong *volatile v205 = v204;
                        uint64_t v206 = 0x1012C404EF22A49;
                        goto LABEL_437;
                      }
                      break;
                    case 3:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v210 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_438;
                        }
                        v211 = (void *)v210[1];
                        if (v211)
                        {
                          v210[2] = (atomic_ullong)v211;
                          operator delete(v211);
                        }
                        atomic_ullong *volatile v205 = v210;
                        uint64_t v206 = 0x1080C409938AC02;
                        goto LABEL_437;
                      }
                      break;
                    case 4:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v212 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_438;
                        }
                        v298.n128_u64[0] = (unint64_t)(v212 + 1);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                        goto LABEL_423;
                      }
                      break;
                    case 5:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v212 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_438;
                        }
                        v298.n128_u64[0] = (unint64_t)(v212 + 1);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
LABEL_423:
                        atomic_ullong *volatile v205 = v212;
                        uint64_t v206 = 0x1020C405E66F15BLL;
                        goto LABEL_437;
                      }
                      break;
                    case 8:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v213 = *(atomic_ullong *volatile *)v188;
                        if (!*(void *)v188) {
                          goto LABEL_438;
                        }
                        boost::detail::shared_count::~shared_count((atomic_uint **)v213 + 2);
                        atomic_ullong *volatile v205 = v213;
                        unsigned int v214 = -235920773;
                        goto LABEL_436;
                      }
                      break;
                    case 9:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v215 = *(atomic_ullong *volatile *)v188;
                        if (*(void *)v188)
                        {
                          v216 = (void *)v215[6];
                          if (v216)
                          {
                            v215[7] = (atomic_ullong)v216;
                            operator delete(v216);
                          }
                          v217 = (void *)v215[3];
                          if (v217)
                          {
                            v215[4] = (atomic_ullong)v217;
                            operator delete(v217);
                          }
                          v218 = (std::__shared_weak_count *)v215[2];
                          if (v218) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v218);
                          }
                          atomic_ullong *volatile v205 = v215;
                          unsigned int v214 = 2071181815;
LABEL_436:
                          uint64_t v206 = v214 | 0x1030C4000000000;
LABEL_437:
                          __n128 result = MEMORY[0x22A614FA0](v205, v206);
                        }
LABEL_438:
                        *(void *)uint64_t v188 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  uint64_t v219 = *(void *)a2;
                  *(void *)(v188 + 5) = *(void *)(a2 + 5);
                  *(void *)uint64_t v188 = v219;
                  *(unsigned char *)(v188 + 12) = *(v186 - 4);
                  *((void *)v186 - 2) = v295;
                  *((_DWORD *)v186 - 2) = v293;
                  *(v186 - 4) = v294;
                  uint64_t v220 = v188 - v9 + 16;
                  if (v220 >= 17)
                  {
                    unint64_t v221 = (((unint64_t)v220 >> 4) - 2) >> 1;
                    v222 = (unsigned __int8 *)(v9 + 16 * v221);
                    __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v222, (unsigned __int8 *)v188, a5);
                    if (result)
                    {
                      atomic_ullong *volatile v223 = *(atomic_ullong *volatile *)v188;
                      *(unint64_t *)((char *)v298.n128_u64 + 5) = *(void *)(v188 + 5);
                      v298.n128_u64[0] = (unint64_t)v223;
                      v298.n128_u8[12] = *(unsigned char *)(v188 + 12);
                      *(unsigned char *)(v188 + 12) = 0;
                      do
                      {
                        v224 = v222;
                        if (v222 != (unsigned __int8 *)v188)
                        {
                          switch(*(unsigned char *)(v188 + 12))
                          {
                            case 2:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v225 = *(atomic_ullong *volatile *)v188;
                                if (!*(void *)v188) {
                                  goto LABEL_475;
                                }
                                if (*((char *)v225 + 31) < 0) {
                                  operator delete((void *)v225[1]);
                                }
                                atomic_ullong *volatile v226 = v225;
                                uint64_t v227 = 0x1012C404EF22A49;
                                goto LABEL_474;
                              }
                              break;
                            case 3:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v234 = *(atomic_ullong *volatile *)v188;
                                if (!*(void *)v188) {
                                  goto LABEL_475;
                                }
                                v235 = (void *)v234[1];
                                if (v235)
                                {
                                  v234[2] = (atomic_ullong)v235;
                                  operator delete(v235);
                                }
                                atomic_ullong *volatile v226 = v234;
                                uint64_t v227 = 0x1080C409938AC02;
                                goto LABEL_474;
                              }
                              break;
                            case 4:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v228 = *(atomic_ullong *volatile *)v188;
                                if (!*(void *)v188) {
                                  goto LABEL_475;
                                }
                                *(void *)v297 = v228 + 1;
                                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
                                goto LABEL_469;
                              }
                              break;
                            case 5:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v228 = *(atomic_ullong *volatile *)v188;
                                if (!*(void *)v188) {
                                  goto LABEL_475;
                                }
                                *(void *)v297 = v228 + 1;
                                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
LABEL_469:
                                atomic_ullong *volatile v226 = v228;
                                uint64_t v227 = 0x1020C405E66F15BLL;
                                goto LABEL_474;
                              }
                              break;
                            case 8:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v236 = *(atomic_ullong *volatile *)v188;
                                if (!*(void *)v188) {
                                  goto LABEL_475;
                                }
                                boost::detail::shared_count::~shared_count((atomic_uint **)v236 + 2);
                                atomic_ullong *volatile v226 = v236;
                                unsigned int v233 = -235920773;
                                goto LABEL_473;
                              }
                              break;
                            case 9:
                              if (atomic_fetch_add(*(atomic_ullong *volatile *)v188, 0xFFFFFFFFFFFFFFFFLL) == 1)
                              {
                                atomic_ullong *volatile v229 = *(atomic_ullong *volatile *)v188;
                                if (*(void *)v188)
                                {
                                  v230 = (void *)v229[6];
                                  if (v230)
                                  {
                                    v229[7] = (atomic_ullong)v230;
                                    operator delete(v230);
                                  }
                                  v231 = (void *)v229[3];
                                  if (v231)
                                  {
                                    v229[4] = (atomic_ullong)v231;
                                    operator delete(v231);
                                  }
                                  v232 = (std::__shared_weak_count *)v229[2];
                                  if (v232) {
                                    std::__shared_weak_count::__release_shared[abi:ne180100](v232);
                                  }
                                  atomic_ullong *volatile v226 = v229;
                                  unsigned int v233 = 2071181815;
LABEL_473:
                                  uint64_t v227 = v233 | 0x1030C4000000000;
LABEL_474:
                                  __n128 result = MEMORY[0x22A614FA0](v226, v227);
                                }
LABEL_475:
                                *(void *)uint64_t v188 = 0;
                              }
                              break;
                            default:
                              break;
                          }
                          atomic_ullong *volatile v237 = *(atomic_ullong *volatile *)v224;
                          *(void *)(v188 + 5) = *(void *)(v224 + 5);
                          *(void *)uint64_t v188 = v237;
                          *(unsigned char *)(v188 + 12) = v224[12];
                          v224[12] = 0;
                        }
                        if (!v221) {
                          break;
                        }
                        unint64_t v221 = (v221 - 1) >> 1;
                        v222 = (unsigned __int8 *)(v9 + 16 * v221);
                        __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v222, (unsigned __int8 *)&v298, a5);
                        uint64_t v188 = (uint64_t)v224;
                      }
                      while ((result & 1) != 0);
                      switch(v224[12])
                      {
                        case 2u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v224, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v238 = *(atomic_ullong *volatile *)v224;
                            if (!*(void *)v224) {
                              goto LABEL_539;
                            }
                            if (*((char *)v238 + 31) < 0) {
                              operator delete((void *)v238[1]);
                            }
                            atomic_ullong *volatile v239 = v238;
                            uint64_t v240 = 0x1012C404EF22A49;
                            goto LABEL_538;
                          }
                          break;
                        case 3u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v224, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v250 = *(atomic_ullong *volatile *)v224;
                            if (!*(void *)v224) {
                              goto LABEL_539;
                            }
                            v251 = (void *)v250[1];
                            if (v251)
                            {
                              v250[2] = (atomic_ullong)v251;
                              operator delete(v251);
                            }
                            atomic_ullong *volatile v239 = v250;
                            uint64_t v240 = 0x1080C409938AC02;
                            goto LABEL_538;
                          }
                          break;
                        case 4u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v224, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v252 = *(atomic_ullong *volatile *)v224;
                            if (!*(void *)v224) {
                              goto LABEL_539;
                            }
                            *(void *)v297 = v252 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
                            goto LABEL_524;
                          }
                          break;
                        case 5u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v224, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v252 = *(atomic_ullong *volatile *)v224;
                            if (!*(void *)v224) {
                              goto LABEL_539;
                            }
                            *(void *)v297 = v252 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v297);
LABEL_524:
                            atomic_ullong *volatile v239 = v252;
                            uint64_t v240 = 0x1020C405E66F15BLL;
                            goto LABEL_538;
                          }
                          break;
                        case 8u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v224, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v253 = *(atomic_ullong *volatile *)v224;
                            if (!*(void *)v224) {
                              goto LABEL_539;
                            }
                            boost::detail::shared_count::~shared_count((atomic_uint **)v253 + 2);
                            atomic_ullong *volatile v239 = v253;
                            unsigned int v254 = -235920773;
                            goto LABEL_537;
                          }
                          break;
                        case 9u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)v224, 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            atomic_ullong *volatile v255 = *(atomic_ullong *volatile *)v224;
                            if (*(void *)v224)
                            {
                              v256 = (void *)v255[6];
                              if (v256)
                              {
                                v255[7] = (atomic_ullong)v256;
                                operator delete(v256);
                              }
                              v257 = (void *)v255[3];
                              if (v257)
                              {
                                v255[4] = (atomic_ullong)v257;
                                operator delete(v257);
                              }
                              v258 = (std::__shared_weak_count *)v255[2];
                              if (v258) {
                                std::__shared_weak_count::__release_shared[abi:ne180100](v258);
                              }
                              atomic_ullong *volatile v239 = v255;
                              unsigned int v254 = 2071181815;
LABEL_537:
                              uint64_t v240 = v254 | 0x1030C4000000000;
LABEL_538:
                              __n128 result = MEMORY[0x22A614FA0](v239, v240);
                            }
LABEL_539:
                            *(void *)v224 = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      unint64_t v259 = v298.n128_u64[0];
                      *(void *)(v224 + 5) = *(unint64_t *)((char *)v298.n128_u64 + 5);
                      *(void *)v224 = v259;
                      v224[12] = v298.n128_u8[12];
                    }
                  }
                }
              }
              while (v184-- > 2);
            }
            return result;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unint64_t v15 = v9 + 16 * ((unint64_t)v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)v15, (long long *)v9, (uint64_t)v10, a5);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)v9, (long long *)v15, (uint64_t)v10, a5);
            unint64_t v16 = v9 + 16 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)(v9 + 16), (long long *)(v16 - 16), (uint64_t)(a2 - 32), v17);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)(v9 + 32), (long long *)(v16 + 16), (uint64_t)(a2 - 48), v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)(v16 - 16), (long long *)v15, v16 + 16, v19);
            __n128 v20 = *(__n128 *)v9;
            __n128 v298 = *(__n128 *)v9;
            uint64_t v21 = *(void *)v15;
            *(void *)(v9 + 5) = *(void *)(v15 + 5);
            *(void *)unint64_t v9 = v21;
            unint64_t v22 = v298.n128_u64[0];
            *(void *)(v15 + 5) = *(unint64_t *)((char *)v298.n128_u64 + 5);
            *(void *)unint64_t v15 = v22;
          }
          --a3;
          if ((a4 & 1) != 0
            || (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v9 - 16), (unsigned __int8 *)v9, v20) & 1) != 0)
          {
            break;
          }
          uint64_t v60 = *(void *)v9;
          *(void *)&v297[5] = *(void *)(v9 + 5);
          *(void *)v297 = v60;
          v297[12] = *(unsigned char *)(v9 + 12);
          *(unsigned char *)(v9 + 12) = 0;
          __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v297, v10, v20);
          if (result)
          {
            unint64_t v11 = v9;
            do
            {
              v11 += 16;
              __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v297, (unsigned __int8 *)v11, a5);
            }
            while ((result & 1) == 0);
          }
          else
          {
            uint64_t v61 = (unsigned __int8 *)(v9 + 16);
            do
            {
              unint64_t v11 = (unint64_t)v61;
              if (v61 >= a2) {
                break;
              }
              __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v297, v61, a5);
              uint64_t v61 = (unsigned __int8 *)(v11 + 16);
            }
            while (!result);
          }
          uint64_t v62 = a2;
          if (v11 < (unint64_t)a2)
          {
            uint64_t v62 = a2;
            do
            {
              v62 -= 2;
              __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v297, (unsigned __int8 *)v62, a5);
            }
            while ((result & 1) != 0);
          }
          while (v11 < (unint64_t)v62)
          {
            a5 = *(__n128 *)v11;
            __n128 v298 = *(__n128 *)v11;
            uint64_t v63 = *v62;
            *(void *)(v11 + 5) = *(void *)((char *)v62 + 5);
            *(void *)unint64_t v11 = v63;
            unint64_t v64 = v298.n128_u64[0];
            *(void *)((char *)v62 + 5) = *(unint64_t *)((char *)v298.n128_u64 + 5);
            *uint64_t v62 = v64;
            do
              v11 += 16;
            while (!turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v297, (unsigned __int8 *)v11, a5));
            do
            {
              v62 -= 2;
              __n128 result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v297, (unsigned __int8 *)v62, a5);
            }
            while ((result & 1) != 0);
          }
          unint64_t v65 = (uint64_t *)(v11 - 16);
          BOOL v5 = v11 - 16 >= v9;
          BOOL v6 = v11 - 16 == v9;
          if (v11 - 16 == v9)
          {
            switch(*(unsigned char *)(v11 - 4))
            {
              case 2:
                unint64_t add = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = add != 0;
                BOOL v6 = add == 1;
                if (add == 1)
                {
                  uint64_t v71 = *(void *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_180;
                  }
                  if (*(char *)(v71 + 31) < 0) {
                    operator delete(*(void **)(v71 + 8));
                  }
                  uint64_t v72 = (void *)v71;
                  uint64_t v73 = 0x1012C404EF22A49;
                  goto LABEL_179;
                }
                break;
              case 3:
                unint64_t v89 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v89 != 0;
                BOOL v6 = v89 == 1;
                if (v89 == 1)
                {
                  uint64_t v90 = *(void **)v9;
                  if (!*(void *)v9) {
                    goto LABEL_180;
                  }
                  std::string v91 = (void *)v90[1];
                  if (v91)
                  {
                    v90[2] = v91;
                    operator delete(v91);
                  }
                  uint64_t v72 = v90;
                  uint64_t v73 = 0x1080C409938AC02;
                  goto LABEL_179;
                }
                break;
              case 4:
                unint64_t v92 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v92 != 0;
                BOOL v6 = v92 == 1;
                if (v92 == 1)
                {
                  std::string v93 = *(void **)v9;
                  if (!*(void *)v9) {
                    goto LABEL_180;
                  }
                  v298.n128_u64[0] = (unint64_t)(v93 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                  goto LABEL_165;
                }
                break;
              case 5:
                unint64_t v94 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v94 != 0;
                BOOL v6 = v94 == 1;
                if (v94 == 1)
                {
                  std::string v93 = *(void **)v9;
                  if (!*(void *)v9) {
                    goto LABEL_180;
                  }
                  v298.n128_u64[0] = (unint64_t)(v93 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
LABEL_165:
                  uint64_t v72 = v93;
                  uint64_t v73 = 0x1020C405E66F15BLL;
                  goto LABEL_179;
                }
                break;
              case 8:
                unint64_t v95 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v95 != 0;
                BOOL v6 = v95 == 1;
                if (v95 == 1)
                {
                  uint64_t v96 = *(void *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_180;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v96 + 16));
                  uint64_t v72 = (void *)v96;
                  unsigned int v97 = -235920773;
                  goto LABEL_178;
                }
                break;
              case 9:
                unint64_t v98 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v98 != 0;
                BOOL v6 = v98 == 1;
                if (v98 == 1)
                {
                  std::string v99 = *(void **)v9;
                  if (*(void *)v9)
                  {
                    std::string v100 = (void *)v99[6];
                    if (v100)
                    {
                      v99[7] = v100;
                      operator delete(v100);
                    }
                    v101 = (void *)v99[3];
                    if (v101)
                    {
                      v99[4] = v101;
                      operator delete(v101);
                    }
                    v102 = (std::__shared_weak_count *)v99[2];
                    if (v102) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v102);
                    }
                    uint64_t v72 = v99;
                    unsigned int v97 = 2071181815;
LABEL_178:
                    uint64_t v73 = v97 | 0x1030C4000000000;
LABEL_179:
                    __n128 result = MEMORY[0x22A614FA0](v72, v73);
                  }
LABEL_180:
                  *(void *)unint64_t v9 = 0;
                }
                break;
              default:
                break;
            }
          }
          else
          {
            switch(*(unsigned char *)(v9 + 12))
            {
              case 2:
                unint64_t v66 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v66 != 0;
                BOOL v6 = v66 == 1;
                if (v66 == 1)
                {
                  uint64_t v67 = *(void *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_152;
                  }
                  if (*(char *)(v67 + 31) < 0) {
                    operator delete(*(void **)(v67 + 8));
                  }
                  unint64_t v68 = (void *)v67;
                  uint64_t v69 = 0x1012C404EF22A49;
                  goto LABEL_151;
                }
                break;
              case 3:
                unint64_t v74 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v74 != 0;
                BOOL v6 = v74 == 1;
                if (v74 == 1)
                {
                  unint64_t v75 = *(void **)v9;
                  if (!*(void *)v9) {
                    goto LABEL_152;
                  }
                  long long v76 = (void *)v75[1];
                  if (v76)
                  {
                    v75[2] = v76;
                    operator delete(v76);
                  }
                  unint64_t v68 = v75;
                  uint64_t v69 = 0x1080C409938AC02;
                  goto LABEL_151;
                }
                break;
              case 4:
                unint64_t v77 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v77 != 0;
                BOOL v6 = v77 == 1;
                if (v77 == 1)
                {
                  uint64_t v78 = *(void **)v9;
                  if (!*(void *)v9) {
                    goto LABEL_152;
                  }
                  v298.n128_u64[0] = (unint64_t)(v78 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                  goto LABEL_137;
                }
                break;
              case 5:
                unint64_t v79 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v79 != 0;
                BOOL v6 = v79 == 1;
                if (v79 == 1)
                {
                  uint64_t v78 = *(void **)v9;
                  if (!*(void *)v9) {
                    goto LABEL_152;
                  }
                  v298.n128_u64[0] = (unint64_t)(v78 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
LABEL_137:
                  unint64_t v68 = v78;
                  uint64_t v69 = 0x1020C405E66F15BLL;
                  goto LABEL_151;
                }
                break;
              case 8:
                unint64_t v80 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v80 != 0;
                BOOL v6 = v80 == 1;
                if (v80 == 1)
                {
                  uint64_t v81 = *(void *)v9;
                  if (!*(void *)v9) {
                    goto LABEL_152;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v81 + 16));
                  unint64_t v68 = (void *)v81;
                  unsigned int v82 = -235920773;
                  goto LABEL_150;
                }
                break;
              case 9:
                unint64_t v83 = atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL);
                BOOL v5 = v83 != 0;
                BOOL v6 = v83 == 1;
                if (v83 == 1)
                {
                  v84 = *(void **)v9;
                  if (*(void *)v9)
                  {
                    uint64_t v85 = (void *)v84[6];
                    if (v85)
                    {
                      v84[7] = v85;
                      operator delete(v85);
                    }
                    uint64_t v86 = (void *)v84[3];
                    if (v86)
                    {
                      v84[4] = v86;
                      operator delete(v86);
                    }
                    pthread_mutex_t v87 = (std::__shared_weak_count *)v84[2];
                    if (v87) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
                    }
                    unint64_t v68 = v84;
                    unsigned int v82 = 2071181815;
LABEL_150:
                    uint64_t v69 = v82 | 0x1030C4000000000;
LABEL_151:
                    __n128 result = MEMORY[0x22A614FA0](v68, v69);
                  }
LABEL_152:
                  *(void *)unint64_t v9 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v88 = *v65;
            *(void *)(v9 + 5) = *(void *)(v11 - 11);
            *(void *)unint64_t v9 = v88;
            *(unsigned char *)(v9 + 12) = *(unsigned char *)(v11 - 4);
            *(unsigned char *)(v11 - 4) = 0;
          }
          a4 = 0;
          uint64_t v103 = *(void *)v297;
          *(void *)(v11 - 11) = *(void *)&v297[5];
          *unint64_t v65 = v103;
          *(unsigned char *)(v11 - 4) = v297[12];
        }
        uint64_t v23 = 0;
        uint64_t v24 = *(void *)v9;
        *(void *)&v297[5] = *(void *)(v9 + 5);
        *(void *)v297 = v24;
        v297[12] = *(unsigned char *)(v9 + 12);
        *(unsigned char *)(v9 + 12) = 0;
        do
        {
          char v25 = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(v9 + v23 + 16), v297, v20);
          v23 += 16;
        }
        while ((v25 & 1) != 0);
        unint64_t v26 = v9 + v23;
        long long v27 = a2;
        if (v23 == 16)
        {
          long long v27 = a2;
          do
          {
            if (v26 >= (unint64_t)v27) {
              break;
            }
            v27 -= 16;
          }
          while ((turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v27, v297, v20) & 1) == 0);
        }
        else
        {
          do
            v27 -= 16;
          while (!turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v27, v297, v20));
        }
        unint64_t v11 = v9 + v23;
        if (v26 < (unint64_t)v27)
        {
          uint64_t v28 = v27;
          do
          {
            __n128 v20 = *(__n128 *)v11;
            __n128 v298 = *(__n128 *)v11;
            uint64_t v29 = *(void *)v28;
            *(void *)(v11 + 5) = *(void *)(v28 + 5);
            *(void *)unint64_t v11 = v29;
            unint64_t v30 = v298.n128_u64[0];
            *(void *)(v28 + 5) = *(unint64_t *)((char *)v298.n128_u64 + 5);
            *(void *)uint64_t v28 = v30;
            do
              v11 += 16;
            while ((turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)v11, v297, v20) & 1) != 0);
            do
              v28 -= 16;
            while (!turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(v28, v297, v20));
          }
          while (v11 < (unint64_t)v28);
        }
        std::string v31 = (uint64_t *)(v11 - 16);
        if (v11 - 16 == v9)
        {
          switch(*(unsigned char *)(v11 - 4))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v35 = *(void *)v9;
                if (!*(void *)v9) {
                  goto LABEL_93;
                }
                if (*(char *)(v35 + 31) < 0) {
                  operator delete(*(void **)(v35 + 8));
                }
                uint64_t v36 = (void *)v35;
                uint64_t v37 = 0x1012C404EF22A49;
                goto LABEL_92;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v48 = *(void **)v9;
                if (!*(void *)v9) {
                  goto LABEL_93;
                }
                __n128 v49 = (void *)v48[1];
                if (v49)
                {
                  v48[2] = v49;
                  operator delete(v49);
                }
                uint64_t v36 = v48;
                uint64_t v37 = 0x1080C409938AC02;
                goto LABEL_92;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v50 = *(void **)v9;
                if (!*(void *)v9) {
                  goto LABEL_93;
                }
                v298.n128_u64[0] = (unint64_t)(v50 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                goto LABEL_78;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v50 = *(void **)v9;
                if (!*(void *)v9) {
                  goto LABEL_93;
                }
                v298.n128_u64[0] = (unint64_t)(v50 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
LABEL_78:
                uint64_t v36 = v50;
                uint64_t v37 = 0x1020C405E66F15BLL;
                goto LABEL_92;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v51 = *(void *)v9;
                if (!*(void *)v9) {
                  goto LABEL_93;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)(v51 + 16));
                uint64_t v36 = (void *)v51;
                unsigned int v52 = -235920773;
                goto LABEL_91;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string v53 = *(void **)v9;
                if (*(void *)v9)
                {
                  unint64_t v54 = (void *)v53[6];
                  if (v54)
                  {
                    v53[7] = v54;
                    operator delete(v54);
                  }
                  uint64_t v55 = (void *)v53[3];
                  if (v55)
                  {
                    uint64_t v53[4] = v55;
                    operator delete(v55);
                  }
                  long long v56 = (std::__shared_weak_count *)v53[2];
                  if (v56) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
                  }
                  uint64_t v36 = v53;
                  unsigned int v52 = 2071181815;
LABEL_91:
                  uint64_t v37 = v52 | 0x1030C4000000000;
LABEL_92:
                  MEMORY[0x22A614FA0](v36, v37);
                }
LABEL_93:
                *(void *)unint64_t v9 = 0;
              }
              break;
            default:
              break;
          }
        }
        else
        {
          switch(*(unsigned char *)(v9 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v32 = *(void *)v9;
                if (!*(void *)v9) {
                  goto LABEL_65;
                }
                if (*(char *)(v32 + 31) < 0) {
                  operator delete(*(void **)(v32 + 8));
                }
                std::string v33 = (void *)v32;
                uint64_t v34 = 0x1012C404EF22A49;
                goto LABEL_64;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unint64_t v38 = *(void **)v9;
                if (!*(void *)v9) {
                  goto LABEL_65;
                }
                uint64_t v39 = (void *)v38[1];
                if (v39)
                {
                  v38[2] = v39;
                  operator delete(v39);
                }
                std::string v33 = v38;
                uint64_t v34 = 0x1080C409938AC02;
                goto LABEL_64;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                double v40 = *(void **)v9;
                if (!*(void *)v9) {
                  goto LABEL_65;
                }
                v298.n128_u64[0] = (unint64_t)(v40 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
                goto LABEL_50;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                double v40 = *(void **)v9;
                if (!*(void *)v9) {
                  goto LABEL_65;
                }
                v298.n128_u64[0] = (unint64_t)(v40 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v298);
LABEL_50:
                std::string v33 = v40;
                uint64_t v34 = 0x1020C405E66F15BLL;
                goto LABEL_64;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v41 = *(void *)v9;
                if (!*(void *)v9) {
                  goto LABEL_65;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)(v41 + 16));
                std::string v33 = (void *)v41;
                unsigned int v42 = -235920773;
                goto LABEL_63;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v43 = *(void **)v9;
                if (*(void *)v9)
                {
                  unint64_t v44 = (void *)v43[6];
                  if (v44)
                  {
                    v43[7] = v44;
                    operator delete(v44);
                  }
                  long long v45 = (void *)v43[3];
                  if (v45)
                  {
                    v43[4] = v45;
                    operator delete(v45);
                  }
                  char v46 = (std::__shared_weak_count *)v43[2];
                  if (v46) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
                  }
                  std::string v33 = v43;
                  unsigned int v42 = 2071181815;
LABEL_63:
                  uint64_t v34 = v42 | 0x1030C4000000000;
LABEL_64:
                  MEMORY[0x22A614FA0](v33, v34);
                }
LABEL_65:
                *(void *)unint64_t v9 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v47 = *v31;
          *(void *)(v9 + 5) = *(void *)(v11 - 11);
          *(void *)unint64_t v9 = v47;
          *(unsigned char *)(v9 + 12) = *(unsigned char *)(v11 - 4);
          *(unsigned char *)(v11 - 4) = 0;
        }
        uint64_t v57 = *(void *)v297;
        *(void *)(v11 - 11) = *(void *)&v297[5];
        *std::string v31 = v57;
        *(unsigned char *)(v11 - 4) = v297[12];
        if (v26 >= (unint64_t)v27) {
          break;
        }
LABEL_97:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *,false>(v9, v11 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(v9, v11 - 16, v20);
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(v11, (uint64_t)a2, v59);
      if (result) {
        break;
      }
      if (!v58) {
        goto LABEL_97;
      }
    }
    a2 = (unsigned __int8 *)(v11 - 16);
    if (!v58) {
      continue;
    }
    return result;
  }
}

void sub_22435F4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15, uint64_t a16, int a17, char a18)
{
  switch(v18)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_33;
      }
      if (*(char *)(a13 + 31) < 0) {
        operator delete(*(void **)(a13 + 8));
      }
      uint64_t v20 = a13;
      uint64_t v21 = 0x1012C404EF22A49;
      goto LABEL_32;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_33;
      }
      unint64_t v22 = *(void **)(a13 + 8);
      if (v22)
      {
        *(void *)(a13 + 16) = v22;
        operator delete(v22);
      }
      uint64_t v20 = a13;
      uint64_t v21 = 0x1080C409938AC02;
      goto LABEL_32;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v23 = a13;
      if (!a13) {
        goto LABEL_33;
      }
      a16 = a13 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_33;
      }
      uint64_t v23 = a13;
      if (!a13) {
        goto LABEL_33;
      }
      a16 = a13 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_18:
      uint64_t v20 = v23;
      uint64_t v21 = 0x1020C405E66F15BLL;
      goto LABEL_32;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_33;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a13 + 16));
      uint64_t v20 = a13;
      unsigned int v24 = -235920773;
      goto LABEL_31;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a13, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a13) {
        goto LABEL_33;
      }
      char v25 = *(void **)(a13 + 48);
      if (v25)
      {
        *(void *)(a13 + 56) = v25;
        operator delete(v25);
      }
      unint64_t v26 = *(void **)(a13 + 24);
      if (v26)
      {
        *(void *)(a13 + 32) = v26;
        operator delete(v26);
      }
      long long v27 = *(std::__shared_weak_count **)(a13 + 16);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      uint64_t v20 = a13;
      unsigned int v24 = 2071181815;
LABEL_31:
      uint64_t v21 = v24 | 0x1030C4000000000;
LABEL_32:
      MEMORY[0x22A614FA0](v20, v21);
LABEL_33:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_33;
  }
}

uint64_t turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()(unsigned __int8 *a1, unsigned __int8 *a2, __n128 a3)
{
  int v3 = a1[12];
  int v4 = a2[12];
  if (v3 == v4)
  {
    if (v3 != 7)
    {
      switch(a1[12])
      {
        case 0u:
          return *(void *)a1 < *(void *)a2;
        case 1u:
          return *(double *)a1 < *(double *)a2;
        case 2u:
          return std::string::compare[abi:ne180100]((const void **)(*(void *)a1 + 8), (unsigned char *)(*(void *)a2 + 8)) >> 31;
        case 3u:
          unint64_t v7 = *(double **)(*(void *)a1 + 8);
          unint64_t v8 = *(double **)(*(void *)a2 + 8);
          unint64_t v9 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v8) >> 3;
          unint64_t v10 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v7) >> 3;
          if (*(double **)(*(void *)a1 + 16) == v7) {
            return v10 < v9;
          }
          if (v10 <= 1) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = (uint64_t)(*(void *)(*(void *)a1 + 16) - (void)v7) >> 3;
          }
          uint64_t v12 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v8) >> 3;
          break;
        case 4u:
          return turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v14, (uint64_t *)(*(void *)a1 + 8), (void *)(*(void *)a2 + 8));
        case 5u:
        case 8u:
        case 9u:
          turi::flexible_type_fail(0);
          return 0;
        case 6u:
          uint64_t v13 = (uint64_t)(*(void *)a1 << 8) >> 8;
          if (v13 < (uint64_t)(*(void *)a2 << 8) >> 8) {
            return 1;
          }
          if (v13 != (uint64_t)(*(void *)a2 << 8) >> 8) {
            return 0;
          }
          return *((_DWORD *)a1 + 2) < *((_DWORD *)a2 + 2);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v12 && *v7 <= *v8)
      {
        if (*v7 < *v8) {
          return 1;
        }
        --v12;
        ++v8;
        ++v7;
        if (!--v11) {
          return v10 < v9;
        }
      }
    }
    return 0;
  }
  else
  {
    return (char)v3 < (char)v4;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(long long *a1, long long *a2, uint64_t a3, __n128 a4)
{
  char v7 = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a2, (unsigned __int8 *)a1, a4);
  uint64_t result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a3, (unsigned __int8 *)a2, v8);
  if (v7)
  {
    if (result)
    {
      long long v17 = *a1;
      uint64_t v10 = *(void *)(a3 + 5);
      *(void *)a1 = *(void *)a3;
      *(void *)((char *)a1 + 5) = v10;
    }
    else
    {
      __n128 v14 = (__n128)*a1;
      __n128 v20 = (__n128)*a1;
      uint64_t v15 = *(void *)((char *)a2 + 5);
      *(void *)a1 = *(void *)a2;
      *(void *)((char *)a1 + 5) = v15;
      *(void *)((char *)a2 + 5) = *(unint64_t *)((char *)v20.n128_u64 + 5);
      *(void *)a2 = v20.n128_u64[0];
      uint64_t result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a3, (unsigned __int8 *)a2, v14);
      if (!result) {
        return result;
      }
      long long v17 = *a2;
      uint64_t v16 = *(void *)(a3 + 5);
      *(void *)a2 = *(void *)a3;
      *(void *)((char *)a2 + 5) = v16;
    }
    *(void *)(a3 + 5) = *(void *)((char *)&v17 + 5);
    *(void *)a3 = v17;
  }
  else if (result)
  {
    __n128 v11 = (__n128)*a2;
    __n128 v18 = (__n128)*a2;
    uint64_t v12 = *(void *)(a3 + 5);
    *(void *)a2 = *(void *)a3;
    *(void *)((char *)a2 + 5) = v12;
    *(void *)(a3 + 5) = *(unint64_t *)((char *)v18.n128_u64 + 5);
    *(void *)a3 = v18.n128_u64[0];
    uint64_t result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a2, (unsigned __int8 *)a1, v11);
    if (result)
    {
      __n128 v19 = (__n128)*a1;
      uint64_t v13 = *(void *)((char *)a2 + 5);
      *(void *)a1 = *(void *)a2;
      *(void *)((char *)a1 + 5) = v13;
      *(void *)((char *)a2 + 5) = *(unint64_t *)((char *)v19.n128_u64 + 5);
      *(void *)a2 = v19.n128_u64[0];
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = a2;
  uint64_t v56 = *MEMORY[0x263EF8340];
  uint64_t v5 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v7 = (void *)(a2 - 16);
      if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(a2 - 16), (unsigned __int8 *)a1, a3))
      {
        __n128 v55 = *(__n128 *)a1;
        uint64_t v8 = *(void *)((char *)v7 + 5);
        *(void *)a1 = *v7;
        *(void *)(a1 + 5) = v8;
        *(void *)((char *)v7 + 5) = *(unint64_t *)((char *)v55.n128_u64 + 5);
        void *v7 = v55.n128_u64[0];
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)a1, (long long *)(a1 + 16), a2 - 16, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(a1, a1 + 16, a1 + 32, a2 - 16, a3);
      return 1;
    case 5:
      unint64_t v44 = (__n128 *)(a1 + 16);
      long long v45 = (__n128 *)(a1 + 32);
      char v46 = (__n128 *)(a1 + 48);
      uint64_t v47 = a2 - 16;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(a1, a1 + 16, a1 + 32, a1 + 48, a3);
      if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)v47, (unsigned __int8 *)(a1 + 48), v48))
      {
        __n128 v55 = *v46;
        __n128 v49 = v55;
        uint64_t v50 = *(void *)(v47 + 5);
        v46->n128_u64[0] = *(void *)v47;
        *(void *)(a1 + 53) = v50;
        *(void *)(v47 + 5) = *(unint64_t *)((char *)v55.n128_u64 + 5);
        *(void *)uint64_t v47 = v55.n128_u64[0];
        if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a1 + 32), v49))
        {
          __n128 v55 = *v45;
          __n128 v51 = v55;
          v45->n128_u64[0] = v46->n128_u64[0];
          *(void *)(a1 + 37) = *(void *)(a1 + 53);
          v46->n128_u64[0] = v55.n128_u64[0];
          *(void *)(a1 + 53) = *(unint64_t *)((char *)v55.n128_u64 + 5);
          if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(a1 + 32), (unsigned __int8 *)(a1 + 16), v51))
          {
            __n128 v55 = *v44;
            __n128 v52 = v55;
            v44->n128_u64[0] = v45->n128_u64[0];
            *(void *)(a1 + 21) = *(void *)(a1 + 37);
            v45->n128_u64[0] = v55.n128_u64[0];
            *(void *)(a1 + 37) = *(unint64_t *)((char *)v55.n128_u64 + 5);
            if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)(a1 + 16), (unsigned __int8 *)a1, v52))
            {
              __n128 v55 = *(__n128 *)a1;
              *(void *)a1 = v44->n128_u64[0];
              *(void *)(a1 + 5) = *(void *)(a1 + 21);
              v44->n128_u64[0] = v55.n128_u64[0];
              *(void *)(a1 + 21) = *(unint64_t *)((char *)v55.n128_u64 + 5);
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v9 = (unsigned __int8 *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)a1, (long long *)(a1 + 16), a1 + 32, a3);
      uint64_t v11 = a1 + 48;
      if (a1 + 48 == v3) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      uint64_t v53 = v3;
      break;
  }
  while (1)
  {
    if (turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)v11, v9, v10))
    {
      *(unint64_t *)((char *)v55.n128_u64 + 5) = *(void *)(v11 + 5);
      v55.n128_u64[0] = *(void *)v11;
      v55.n128_u8[12] = *(unsigned char *)(v11 + 12);
      *(unsigned char *)(v11 + 12) = 0;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        uint64_t v16 = (atomic_ullong *volatile *)(a1 + v14 + 48);
        long long v17 = (atomic_ullong *volatile *)(a1 + v14 + 32);
        if (v17 != v16)
        {
          switch(*(unsigned char *)(v15 + 60))
          {
            case 2:
              if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *v16;
                if (!*v16) {
                  goto LABEL_41;
                }
                if (*((char *)v18 + 31) < 0) {
                  operator delete((void *)v18[1]);
                }
                atomic_ullong *volatile v19 = v18;
                uint64_t v20 = 0x1012C404EF22A49;
                goto LABEL_40;
              }
              break;
            case 3:
              if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v21 = *v16;
                if (!*v16) {
                  goto LABEL_41;
                }
                unint64_t v22 = (void *)v21[1];
                if (v22)
                {
                  v21[2] = (atomic_ullong)v22;
                  operator delete(v22);
                }
                atomic_ullong *volatile v19 = v21;
                uint64_t v20 = 0x1080C409938AC02;
                goto LABEL_40;
              }
              break;
            case 4:
              if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v23 = *v16;
                if (!*v16) {
                  goto LABEL_41;
                }
                unint64_t v54 = (void **)(v23 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v54);
                goto LABEL_26;
              }
              break;
            case 5:
              if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v23 = *v16;
                if (!*v16) {
                  goto LABEL_41;
                }
                unint64_t v54 = (void **)(v23 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v54);
LABEL_26:
                atomic_ullong *volatile v19 = v23;
                uint64_t v20 = 0x1020C405E66F15BLL;
                goto LABEL_40;
              }
              break;
            case 8:
              if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v24 = *v16;
                if (!*v16) {
                  goto LABEL_41;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
                atomic_ullong *volatile v19 = v24;
                unsigned int v25 = -235920773;
                goto LABEL_39;
              }
              break;
            case 9:
              if (atomic_fetch_add(*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v26 = *v16;
                if (*v16)
                {
                  long long v27 = (void *)v26[6];
                  if (v27)
                  {
                    v26[7] = (atomic_ullong)v27;
                    operator delete(v27);
                  }
                  uint64_t v28 = (void *)v26[3];
                  if (v28)
                  {
                    v26[4] = (atomic_ullong)v28;
                    operator delete(v28);
                  }
                  uint64_t v29 = (std::__shared_weak_count *)v26[2];
                  if (v29) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
                  }
                  atomic_ullong *volatile v19 = v26;
                  unsigned int v25 = 2071181815;
LABEL_39:
                  uint64_t v20 = v25 | 0x1030C4000000000;
LABEL_40:
                  MEMORY[0x22A614FA0](v19, v20);
                }
LABEL_41:
                atomic_ullong *volatile *v16 = 0;
              }
              break;
            default:
              break;
          }
          *(void *)(a1 + v14 + 53) = *(void *)(a1 + v14 + 37);
          atomic_ullong *volatile *v16 = *v17;
          *(unsigned char *)(v15 + 60) = *(unsigned char *)(a1 + v14 + 44);
          *(unsigned char *)(a1 + v14 + 44) = 0;
        }
        if (v14 == -32) {
          break;
        }
        char v30 = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)&v55, (unsigned __int8 *)(a1 + v14 + 16), v10);
        v14 -= 16;
        if ((v30 & 1) == 0)
        {
          uint64_t v31 = a1 + v14 + 48;
          goto LABEL_47;
        }
      }
      uint64_t v31 = a1;
LABEL_47:
      switch(*(unsigned char *)(v31 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v32 = *(atomic_ullong *volatile *)v31;
            if (!*(void *)v31) {
              goto LABEL_79;
            }
            if (*((char *)v32 + 31) < 0) {
              operator delete((void *)v32[1]);
            }
            atomic_ullong *volatile v33 = v32;
            uint64_t v34 = 0x1012C404EF22A49;
            goto LABEL_78;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v31;
            if (!*(void *)v31) {
              goto LABEL_79;
            }
            uint64_t v36 = (void *)v35[1];
            if (v36)
            {
              v35[2] = (atomic_ullong)v36;
              operator delete(v36);
            }
            atomic_ullong *volatile v33 = v35;
            uint64_t v34 = 0x1080C409938AC02;
            goto LABEL_78;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v37 = *(atomic_ullong *volatile *)v31;
            if (!*(void *)v31) {
              goto LABEL_79;
            }
            unint64_t v54 = (void **)(v37 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v54);
            goto LABEL_64;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v37 = *(atomic_ullong *volatile *)v31;
            if (!*(void *)v31) {
              goto LABEL_79;
            }
            unint64_t v54 = (void **)(v37 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v54);
LABEL_64:
            atomic_ullong *volatile v33 = v37;
            uint64_t v34 = 0x1020C405E66F15BLL;
            goto LABEL_78;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v31;
            if (!*(void *)v31) {
              goto LABEL_79;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v38 + 2);
            atomic_ullong *volatile v33 = v38;
            unsigned int v39 = -235920773;
            goto LABEL_77;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v40 = *(atomic_ullong *volatile *)v31;
            if (*(void *)v31)
            {
              uint64_t v41 = (void *)v40[6];
              if (v41)
              {
                v40[7] = (atomic_ullong)v41;
                operator delete(v41);
              }
              unsigned int v42 = (void *)v40[3];
              if (v42)
              {
                v40[4] = (atomic_ullong)v42;
                operator delete(v42);
              }
              uint64_t v43 = (std::__shared_weak_count *)v40[2];
              if (v43) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v43);
              }
              atomic_ullong *volatile v33 = v40;
              unsigned int v39 = 2071181815;
LABEL_77:
              uint64_t v34 = v39 | 0x1030C4000000000;
LABEL_78:
              MEMORY[0x22A614FA0](v33, v34);
            }
LABEL_79:
            *(void *)uint64_t v31 = 0;
          }
          break;
        default:
          break;
      }
      *(void *)(v31 + 5) = *(unint64_t *)((char *)v55.n128_u64 + 5);
      *(void *)uint64_t v31 = v55.n128_u64[0];
      *(unsigned char *)(v31 + 12) = v55.n128_u8[12];
      ++v13;
      uint64_t v3 = v53;
      if (v13 == 8) {
        return v11 + 16 == v53;
      }
    }
    unint64_t v9 = (unsigned __int8 *)v11;
    v12 += 16;
    v11 += 16;
    if (v11 == v3) {
      return 1;
    }
  }
}

void sub_224360658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_ullong *volatile a11, int a12, char a13)
{
  switch(a13)
  {
    case 2:
      turi::gl_sarray::clip(&a11);
      break;
    case 3:
      turi::gl_sarray::clip(&a11);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a11);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a11);
      break;
    case 8:
      turi::gl_sarray::clip(&a11);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a11);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6 &,turi::flexible_type *>((long long *)a1, (long long *)a2, a3, a5);
  uint64_t result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a4, (unsigned __int8 *)a3, v9);
  if (result)
  {
    __n128 v11 = *(__n128 *)a3;
    __n128 v16 = *(__n128 *)a3;
    uint64_t v12 = *(void *)(a4 + 5);
    *(void *)a3 = *(void *)a4;
    *(void *)(a3 + 5) = v12;
    *(void *)(a4 + 5) = *(unint64_t *)((char *)v16.n128_u64 + 5);
    *(void *)a4 = v16.n128_u64[0];
    uint64_t result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a3, (unsigned __int8 *)a2, v11);
    if (result)
    {
      __n128 v13 = *(__n128 *)a2;
      long long v17 = *(_OWORD *)a2;
      uint64_t v14 = *(void *)(a3 + 5);
      *(void *)a2 = *(void *)a3;
      *(void *)(a2 + 5) = v14;
      *(void *)(a3 + 5) = *(void *)((char *)&v17 + 5);
      *(void *)a3 = v17;
      uint64_t result = turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_6::operator()((unsigned __int8 *)a2, (unsigned __int8 *)a1, v13);
      if (result)
      {
        long long v18 = *(_OWORD *)a1;
        uint64_t v15 = *(void *)(a2 + 5);
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 5) = v15;
        *(void *)(a2 + 5) = *(void *)((char *)&v18 + 5);
        *(void *)a2 = v18;
      }
    }
  }
  return result;
}

void *std::vector<turi::sframe_function_output_iterator<turi::ml_data_internal::row_data_block,std::function<void ()(turi::ml_data_internal::row_data_block const&)>,std::function<void ()(turi::ml_data_internal::row_data_block&&)>,std::function<void ()(turi::sframe_rows const&)>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::sframe_function_output_iterator<std::pair<std::vector<turi::flexible_type>,std::string>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string> const&)>,std::function<void ()(std::pair<std::vector<turi::flexible_type>,std::string>&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 96 * a2;
    uint64_t v6 = 96 * a2;
    char v7 = (void *)(v4 + 88);
    do
    {
      *(v7 - 8) = 0;
      *(v7 - 4) = 0;
      void *v7 = 0;
      v7 += 12;
      v6 -= 96;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2243608E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<turi::sframe_function_output_iterator<turi::ml_data_internal::row_data_block,std::function<void ()(turi::ml_data_internal::row_data_block const&)>,std::function<void ()(turi::ml_data_internal::row_data_block&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<turi::sframe_function_output_iterator<turi::ml_data_internal::row_data_block,std::function<void ()(turi::ml_data_internal::row_data_block const&)>,std::function<void ()(turi::ml_data_internal::row_data_block&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<turi::sframe_function_output_iterator<turi::ml_data_internal::row_data_block,std::function<void ()(turi::ml_data_internal::row_data_block const&)>,std::function<void ()(turi::ml_data_internal::row_data_block&&)>,std::function<void ()(turi::sframe_rows const&)>>>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = result[1]; i != a2; i -= 96)
  {
    std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100]((void *)(i - 32));
    std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block &&)>::~__value_func[abi:ne180100]((void *)(i - 64));
    uint64_t result = std::__function::__value_func<void ()(turi::ml_data_internal::row_data_block const&)>::~__value_func[abi:ne180100]((void *)(i - 96));
  }
  v3[1] = a2;
  return result;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_26D77A130;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D77A130;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::operator()(uint64_t a1, const turi::flexible_type **a2, unint64_t *a3)
{
  long long v4 = *a2;
  unint64_t v5 = *a3;
  uint64_t v6 = *(unint64_t **)(a1 + 8);
  unint64_t v7 = v6[16];
  unint64_t v8 = **(void **)(a1 + 16);
  unint64_t v9 = v8;
  if ((const turi::flexible_type *)(*a3 - 1) != *a2) {
    unint64_t v9 = (v8 + v8 * (void)v4) / v5 / v7 * v7;
  }
  memset(v26, 0, sizeof(v26));
  *(_OWORD *)unsigned int v25 = 0u;
  std::vector<std::vector<turi::flexible_type>>::vector(v24, v6[12]);
  unint64_t v10 = v8 * (unint64_t)v4 / v5 / v7 * v7;
  std::string __p = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  while (v10 != v9)
  {
    if (v6[16] + v10 >= v9) {
      unint64_t v11 = v9;
    }
    else {
      unint64_t v11 = v6[16] + v10;
    }
    unint64_t v12 = v6[12];
    if (v12)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      for (unint64_t i = 0; i < v12; ++i)
      {
        if (*(_DWORD *)(*(void *)(v6[13] + v13) + 24) != 5)
        {
          uint64_t v16 = *(void *)(**(void **)(a1 + 24) + v13);
          (*(void (**)(uint64_t, unint64_t, unint64_t, void **))(*(void *)v16 + 48))(v16, **(void **)(a1 + 32) + v10, **(void **)(a1 + 32) + v11, &v24[0][v14]);
          unint64_t v12 = v6[12];
        }
        v14 += 3;
        v13 += 16;
      }
    }
    unint64_t v17 = turi::ml_data_internal::fill_row_buffer_from_column_buffer((uint64_t)&__p, (char **)v25, (uint64_t)(v6 + 6), v24, v4, **(unsigned __int8 **)(a1 + 40), **(unsigned char **)(a1 + 48), **(_DWORD **)(a1 + 56));
    uint64_t v18 = **(void **)(a1 + 64);
    unint64_t v19 = *(void *)(v18 + 8 * (void)v4);
    if (v17 > v19) {
      unint64_t v19 = v17;
    }
    *(void *)(v18 + 8 * (void)v4) = v19;
    uint64_t v20 = *(void *)(**(void **)(a1 + 72) + 96 * (void)v4 + 24);
    if (!v20) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v20 + 48))(v20, v25);
    unint64_t v10 = v11;
  }
  if (__p)
  {
    unint64_t v22 = __p;
    operator delete(__p);
  }
  std::string __p = v24;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v24[0] = (void **)v26 + 1;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v24);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

void sub_224360CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a12 = &a18;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7,std::allocator<turi::ml_data::_fill_data_blocks(turi::sframe const&,BOOL,BOOL,turi::ml_missing_value_action,std::pair<unsigned long,unsigned long> const&,std::set<std::string> const&)::$_7>,void ()(unsigned long,unsigned long)>::target_type()
{
}

void *turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0::operator()(unint64_t **a1, unint64_t a2)
{
  v21[4] = *MEMORY[0x263EF8340];
  unint64_t v3 = **a1;
  unint64_t v4 = a2 % v3;
  uint64_t v5 = *a1[1];
  uint64_t v6 = *a1[2];
  uint64_t v7 = 16 * (a2 / v3);
  (*(void (**)(void *__return_ptr))(**(void **)(a1[3][19] + v7) + 32))(v18);
  memset(v16, 0, sizeof(v16));
  std::vector<turi::flexible_type>::reserve(v16, 0x64uLL);
  uint64_t v8 = v6 - v5;
  unint64_t v9 = (v8 + v8 * v4) / v3 + v5;
  unint64_t v10 = v8 * v4 / v3 + v5;
  while (v10 < v9)
  {
    uint64_t v11 = *(void *)(*a1[4] + v7);
    unint64_t v12 = v10;
    v10 += 100;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))(*(void *)v11 + 48))(v11, v12, v10, v16);
    if (v13)
    {
      uint64_t v14 = 0;
      do
      {
        if (!v20) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, v16[0] + v14);
        v14 += 16;
        --v13;
      }
      while (v13);
    }
  }
  unint64_t v17 = (void **)v16;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v21);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v19);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v18);
}

void sub_224360F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  va_arg(va2, void);
  va_copy((va_list)v7, va);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0>(unsigned long,unsigned long,turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      __n128 result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_7ml_data27_setup_untranslated_columnsERKNS_6sframeEmmE"
                                        "3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (__n128 result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_7ml_data27_setup_untranslated_columnsERKNS_6sframeEmmE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

unint64_t ***boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0>(unsigned long,unsigned long,turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0 const&)::{lambda(void)#1},void>::invoke(unint64_t ***result)
{
  unint64_t v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    uint64_t v2 = result;
    do
      __n128 result = (unint64_t ***)turi::ml_data::_setup_untranslated_columns(turi::sframe const&,unsigned long,unsigned long)::$_0::operator()(*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void turi::ml_data_iterator::seek(turi::ml_data_iterator *this, uint64_t a2)
{
  unint64_t v3 = *((void *)this + 43) + a2;
  assert_msg(v3 <= *((void *)this + 44), "Requested row index out of bounds.");
  uint64_t v4 = *((void *)this + 34) == *((void *)this + 43) && *((void *)this + 35) == *((void *)this + 44);
  assert_msg(v4, "Seek not supported with multithreaded iterators.");
  *((void *)this + 36) = v3;
  if (v3 != *((void *)this + 35))
  {
    turi::ml_data_iterator::setup_block_containing_current_row_index(this);
  }
}

void std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::shared_ptr[abi:ne180100]<turi::ml_data_internal::ml_data_block_manager,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22436113C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<turi::ml_data_internal::ml_data_block_manager>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::ml_data_internal::ml_data_block_manager *,std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::__shared_ptr_default_delete<turi::ml_data_internal::ml_data_block_manager,turi::ml_data_internal::ml_data_block_manager>,std::allocator<turi::ml_data_internal::ml_data_block_manager>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<turi::ml_data_internal::ml_data_block_manager *,std::shared_ptr<turi::ml_data_internal::ml_data_block_manager>::__shared_ptr_default_delete<turi::ml_data_internal::ml_data_block_manager,turi::ml_data_internal::ml_data_block_manager>,std::allocator<turi::ml_data_internal::ml_data_block_manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::ml_data_internal::ml_data_block_manager>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(a2 + 216, *(void **)(a2 + 224));
    turi::mutex::~mutex((pthread_mutex_t *)(a2 + 144));
    uint64_t v6 = (void **)(a2 + 120);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    unint64_t v3 = *(std::__shared_weak_count **)(a2 + 112);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v6 = (void **)(a2 + 72);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
    uint64_t v4 = *(void **)(a2 + 32);
    if (v4)
    {
      *(void *)(a2 + 40) = v4;
      operator delete(v4);
    }
    long long v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    MEMORY[0x22A614FA0](a2, 0x1030C40535333AFLL);
  }
}

atomic_ullong *OUTLINED_FUNCTION_11_2(atomic_ullong *result)
{
  return result;
}

char *turi::column_mode_enum_to_name(unsigned int a1)
{
  if (a1 >= 8) {
    turi::column_mode_enum_to_name(turi::ml_column_mode)::$_0::operator()();
  }
  return off_2646D7B18[a1];
}

void turi::column_mode_enum_to_name(turi::ml_column_mode)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  unint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data_column_modes.cpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data_column_modes.cpp", "operator()", 26, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::column_mode_enum_to_name(turi::ml_column_mode)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224361390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::ml_data_internal::check_type_consistent_with_mode(std::string const&,turi::flex_type_enum,turi::ml_column_mode)::$_0::operator()()
{
}

uint64_t turi::ml_data_internal::choose_column_mode(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a3, (const void **)a1))
  {
    unsigned int v6 = *(_DWORD *)std::map<std::string,turi::neural_net::shared_float_array>::at(a3, (const void **)a1);
    if (v6 == 6) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = v6;
    }
    switch((int)result)
    {
      case 0:
        char v9 = a2 < 2;
        goto LABEL_18;
      case 1:
        char v9 = vmaxv_u16((uint16x4_t)vceq_s16((int16x4_t)(*(void *)&vdup_n_s16(a2) & 0xFF00FF00FF00FFLL), (int16x4_t)0x7000200000001)) & 1;
        goto LABEL_18;
      case 2:
      case 7:
        BOOL v8 = a2 == 9 || a2 == 3;
        goto LABEL_15;
      case 3:
        BOOL v8 = a2 == 4;
        goto LABEL_15;
      case 4:
        BOOL v8 = a2 == 5;
LABEL_15:
        char v9 = v8;
LABEL_18:
        if (v9) {
          return result;
        }
        goto LABEL_43;
      case 5:
        return result;
      default:
LABEL_43:
        unsigned int v33 = result;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
        uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"In column ", 10);
        int v19 = *(char *)(a1 + 23);
        if (v19 >= 0) {
          uint64_t v20 = (const void *)a1;
        }
        else {
          uint64_t v20 = *(const void **)a1;
        }
        if (v19 >= 0) {
          uint64_t v21 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v21 = *(void *)(a1 + 8);
        }
        unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
        uint64_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
        atomic_ullong *volatile v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"column type ", 12);
        if (a2 > 9) {
          unsigned int v25 = "undefined";
        }
        else {
          unsigned int v25 = off_2646D7B58[a2];
        }
        size_t v26 = strlen(v25);
        long long v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
        uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" is not compatible with requested mode ", 39);
        uint64_t v29 = turi::column_mode_enum_to_name(v33);
        size_t v30 = strlen(v29);
        uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
        atomic_ullong *volatile v35 = v36;
        turi::ml_data_internal::choose_column_mode(std::string const&,turi::flex_type_enum,std::map<std::string,turi::ml_column_mode> const&)::$_1::operator()();
    }
  }
  uint64_t result = 0;
  switch(a2)
  {
    case 0u:
    case 1u:
      return result;
    case 2u:
      goto LABEL_42;
    case 3u:
      return 2;
    case 4u:
      return 3;
    case 5u:
      return 4;
    case 7u:
      uint64_t v10 = (int *)global_logger();
      if (v10[169] <= 5)
      {
        if (cppipc::must_cancel((cppipc *)v10)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        uint64_t v11 = (file_logger *)global_logger();
        started = file_logger::start_stream(v11, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/ml_data/ml_data_column_modes.cpp", "choose_column_mode", 214, 1);
        uint64_t v13 = pthread_getspecific(*((void *)started + 74));
        if (v13 && *((unsigned char *)v13 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13 + 2, (uint64_t)"Type of column ", 15);
        }
        if (*(char *)(a1 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
        }
        else {
          std::string v34 = *(std::string *)a1;
        }
        uint64_t v14 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v34);
        uint64_t v15 = pthread_getspecific(*(void *)(v14 + 592));
        if (v15 && *((unsigned char *)v15 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)" is undefined; ",
        }
            15);
        uint64_t v16 = pthread_getspecific(*(void *)(v14 + 592));
        if (v16 && *((unsigned char *)v16 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"treated as categorical.  This may not yield the desired behavior.", 65);
        }
        unint64_t v17 = pthread_getspecific(*(void *)(v14 + 592));
        if (v17)
        {
          if (*((unsigned char *)v17 + 280))
          {
            std::endl[abi:ne180100]<char,std::char_traits<char>>(v17 + 2);
            file_logger::stream_flush((file_logger *)v14);
            if (*(_DWORD *)(v14 + 600) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              void *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
      }
LABEL_42:
      uint64_t result = 1;
      break;
    case 9u:
      uint64_t result = 7;
      break;
    default:
      v36[0] = a1;
      turi::ml_data_internal::choose_column_mode(std::string const&,turi::flex_type_enum,std::map<std::string,turi::ml_column_mode> const&)::$_2::operator()();
  }
  return result;
}

void sub_22436195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t OUTLINED_FUNCTION_3_7(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  return **(unsigned int **)(v1 + 16);
}

void turi::ml_data_iterator::setup(turi::ml_data_iterator *this, const turi::ml_data *a2, const turi::ml_data_internal::row_metadata *a3, uint64_t a4, unint64_t a5)
{
  turi::ml_data::operator=((uint64_t)this, (uint64_t *)a2);
  *((_OWORD *)this + 12) = *(_OWORD *)a3;
  if ((turi::ml_data_iterator *)((char *)this + 192) == a3)
  {
    *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)a3 + 40);
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)this + 208, *((char **)a3 + 2), *((void *)a3 + 3), (uint64_t)(*((void *)a3 + 3) - *((void *)a3 + 2)) >> 3);
    *(_OWORD *)((char *)this + 232) = *(_OWORD *)((char *)a3 + 40);
    std::vector<std::shared_ptr<turi::ml_data_internal::column_metadata>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::ml_data_internal::column_metadata>*,std::shared_ptr<turi::ml_data_internal::column_metadata>*>((uint64_t)this + 248, *((uint64_t **)a3 + 7), *((uint64_t **)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 4);
  }
  uint64_t v9 = *((void *)this + 2);
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 43) = v9;
  *((void *)this + 44) = v10;
  uint64_t v11 = v10 - v9;
  uint64_t v12 = v11 * a4 / a5 + v9;
  *((void *)this + 34) = v12;
  *((void *)this + 35) = (v11 + v11 * a4) / a5 + v9;
  uint64_t v13 = *(void **)this;
  uint64_t v14 = *(void *)(*(void *)this + 72);
  *((unsigned char *)this + 337) = v14 != 0;
  *((unsigned char *)this + 336) = v14 != (uint64_t)(v13[1] - *v13) >> 4;
  *((void *)this + 36) = v12;
  turi::ml_data_iterator::setup_block_containing_current_row_index(this);
}

void turi::ml_data_iterator::setup_block_containing_current_row_index(turi::ml_data_iterator *this)
{
  if (*((void *)this + 34) == *((void *)this + 35))
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 39);
    *((void *)this + 38) = 0;
    *((void *)this + 39) = 0;
    if (v2)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  else
  {
    unint64_t v3 = *((void *)this + 36);
    uint64_t v4 = *((void *)this + 37);
    unint64_t v5 = *((void *)this + 16);
    uint64_t v6 = v5 * v4;
    BOOL v8 = v3 >= v5 * v4;
    unint64_t v7 = v5 + v5 * v4;
    BOOL v8 = !v8 || v3 >= v7;
    if (v8)
    {
      uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 39);
      unint64_t v10 = v3 / v5;
      *((void *)this + 37) = v3 / v5;
      *((void *)this + 38) = 0;
      *((void *)this + 39) = 0;
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        unint64_t v10 = *((void *)this + 37);
      }
      turi::ml_data_internal::ml_data_block_manager::get_block(*((turi::ml_data_internal::ml_data_block_manager **)this + 22), v10, (uint64_t *)&v16);
      long long v11 = v16;
      long long v16 = 0uLL;
      uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 39);
      *((_OWORD *)this + 19) = v11;
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        if (*((void *)&v16 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
        }
      }
      unint64_t v3 = *((void *)this + 36);
      uint64_t v6 = *((void *)this + 16) * *((void *)this + 37);
    }
    *((void *)this + 36) = v6;
    *((void *)this + 40) = 0;
    if (*((unsigned char *)this + 194))
    {
      *((void *)this + 40) = *((void *)this + 25) * (v3 - v6);
      *((void *)this + 36) = v3;
    }
    else if (v3 != v6)
    {
      uint64_t v13 = 0;
      uint64_t v14 = *(void *)(*((void *)this + 38) + 96);
      uint64_t v15 = v6;
      do
      {
        v13 += *(void *)(v14 + 8 * v13);
        *((void *)this + 40) = v13;
        *((void *)this + 36) = ++v15;
      }
      while (v3 != v15);
    }
    *((void *)this + 41) = v3 - v6;
  }
}

void turi::ml_data_row_reference::from_row(uint64_t a1, void *a2)
{
  v24[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = a2 + 1;
  std::vector<unsigned long>::vector(&__p, (uint64_t)(a2[1] - *a2) >> 5);
  v24[0] = 0;
  uint64_t v5 = *v4;
  uint64_t v6 = *a2;
  if (*v4 == *a2) {
LABEL_28:
  }
    operator new();
  unint64_t v7 = 0;
  while (1)
  {
    BOOL v8 = (unsigned char *)(v6 + 32 * v7);
    if (v8[12] != 2)
    {
      v22[0] = a2;
      v22[1] = v24;
      turi::ml_data_row_reference::from_row(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::pair<turi::flexible_type,turi::flexible_type>> const&,turi::ml_missing_value_action)::$_0::operator()(v22);
    }
    uint64_t v9 = *(void *)v8;
    unint64_t v10 = (const void **)(*(void *)v8 + 8);
    long long v11 = *(void **)a1;
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 24);
    if (!v12) {
      goto LABEL_21;
    }
    uint64_t v13 = *(unsigned __int8 *)(v9 + 31);
    size_t v14 = *(void *)(v9 + 16);
    if ((v13 & 0x80u) == 0) {
      uint64_t v15 = (unsigned __int8 *)*(unsigned __int8 *)(v9 + 31);
    }
    else {
      uint64_t v15 = *(unsigned __int8 **)(v9 + 16);
    }
    long long v16 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    int v17 = (char)v16;
    if ((char)v16 < 0) {
      long long v16 = v12[1];
    }
    if (v15 != v16) {
      goto LABEL_21;
    }
    if (v17 >= 0) {
      uint64_t v18 = *(unsigned __int8 **)(*(void *)a1 + 24);
    }
    else {
      uint64_t v18 = *v12;
    }
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*v10, v18, v14)) {
        goto LABEL_21;
      }
    }
    else if (v13)
    {
      int v19 = v10;
      while (*(unsigned __int8 *)v19 == *v18)
      {
        int v19 = (const void **)((char *)v19 + 1);
        ++v18;
        if (!--v13) {
          goto LABEL_26;
        }
      }
LABEL_21:
      uint64_t v20 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)(v11 + 10), v10);
      if (v11 + 11 == (void *)v20) {
        uint64_t v21 = -1;
      }
      else {
        uint64_t v21 = *(void *)(v20 + 56);
      }
      *((void *)__p + v7) = v21;
      uint64_t v6 = *a2;
      uint64_t v5 = a2[1];
      goto LABEL_24;
    }
LABEL_26:
    *((void *)__p + v7) = (uint64_t)(v11[1] - *v11) >> 4;
LABEL_24:
    v24[0] = ++v7;
    if (v7 >= (v5 - v6) >> 5) {
      goto LABEL_28;
    }
  }
}

void sub_2243625B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a11;
  std::vector<std::vector<turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<unsigned long>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

__n128 OUTLINED_FUNCTION_0_12(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

double CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Model_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Model.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::CoreMLModels::protobuf_VisionFeaturePrint_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::protobuf_AudioFeaturePrint_2eproto::InitDefaults(v6);
  CoreML::Specification::CoreMLModels::protobuf_TextClassifier_2eproto::InitDefaults(v7);
  CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(v8);
  CoreML::Specification::CoreMLModels::protobuf_Gazetteer_2eproto::InitDefaults(v9);
  CoreML::Specification::CoreMLModels::protobuf_WordEmbedding_2eproto::InitDefaults(v10);
  CoreML::Specification::protobuf_ArrayFeatureExtractor_2eproto::InitDefaults(v11);
  CoreML::Specification::protobuf_BayesianProbitRegressor_2eproto::InitDefaults(v12);
  CoreML::Specification::protobuf_CategoricalMapping_2eproto::InitDefaults(v13);
  CoreML::Specification::protobuf_CustomModel_2eproto::InitDefaults(v14);
  CoreML::Specification::protobuf_DictVectorizer_2eproto::InitDefaults(v15);
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v16);
  CoreML::Specification::protobuf_FeatureVectorizer_2eproto::InitDefaults(v17);
  CoreML::Specification::protobuf_GLMRegressor_2eproto::InitDefaults(v18);
  CoreML::Specification::protobuf_GLMClassifier_2eproto::InitDefaults(v19);
  CoreML::Specification::protobuf_NearestNeighbors_2eproto::InitDefaults(v20);
  CoreML::Specification::protobuf_Identity_2eproto::InitDefaults(v21);
  CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(v22);
  CoreML::Specification::V5::protobuf_MIL_2eproto::InitDefaults(v23);
  CoreML::Specification::protobuf_NeuralNetwork_2eproto::InitDefaults(v24);
  CoreML::Specification::protobuf_Normalizer_2eproto::InitDefaults(v25);
  CoreML::Specification::protobuf_OneHotEncoder_2eproto::InitDefaults(v26);
  CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(v27);
  CoreML::Specification::protobuf_NonMaximumSuppression_2eproto::InitDefaults(v28);
  CoreML::Specification::protobuf_SVM_2eproto::InitDefaults(v29);
  CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(v30);
  CoreML::Specification::protobuf_Parameters_2eproto::InitDefaults(v31);
  CoreML::Specification::protobuf_ItemSimilarityRecommender_2eproto::InitDefaults(v32);
  CoreML::Specification::CoreMLModels::protobuf_SoundAnalysisPreprocessing_2eproto::InitDefaults(v33);
  CoreML::Specification::protobuf_LinkedModel_2eproto::InitDefaults(v34);
  CoreML::Specification::_Pipeline_default_instance_ = (uint64_t)&unk_26D77A248;
  unk_26808DCB8 = 0u;
  unk_26808DCC8 = 0u;
  unk_26808DCD8 = 0u;
  unk_26808DCE4 = 0u;
  byte_26808DCF8 = 1;
  qword_26808DD08 = 0;
  qword_26808DD10 = 0;
  CoreML::Specification::_PipelineClassifier_default_instance_ = (uint64_t)&unk_26D77A2E0;
  dword_26808DD18 = 0;
  byte_26808DD20 = 1;
  qword_26808DD30 = 0;
  qword_26808DD38 = 0;
  CoreML::Specification::_PipelineRegressor_default_instance_ = (uint64_t)&unk_26D77A378;
  dword_26808DD40 = 0;
  byte_26808DD48 = 1;
  CoreML::Specification::_FeatureDescription_default_instance_ = (uint64_t)&unk_26D77A410;
  *(void *)algn_26808DD58 = 0;
  qword_26808DD60 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808DD68 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808DD70 = 0;
  dword_26808DD78 = 0;
  byte_26808DD80 = 1;
  qword_26808DD90 = 0;
  unk_26808DD98 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808DDA0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808DDA8 = 0;
  dword_26808DDB0 = 0;
  CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_ = (uint64_t)&unk_26D77A7C8;
  byte_26808DDB8 = 1;
  atomic_ullong *volatile v35 = CoreML::Specification::Metadata::Metadata((CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_);
  *((unsigned char *)v35 + 96) = 1;
  CoreML::Specification::_ModelDescription_default_instance_ = (uint64_t)&unk_26D77A540;
  double result = 0.0;
  *(_OWORD *)algn_26808DE30 = 0u;
  *(_OWORD *)&algn_26808DE30[16] = 0u;
  *(_OWORD *)&algn_26808DE30[32] = 0u;
  *(_OWORD *)&algn_26808DE30[48] = 0u;
  *(_OWORD *)&algn_26808DE30[64] = 0u;
  qword_26808DE80 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808DE88 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_26808DE98 = 0;
  byte_26808DEA0 = 1;
  CoreML::Specification::_SerializedModel_default_instance_ = (uint64_t)&unk_26D77A5D8;
  unk_26808DEB0 = 0;
  qword_26808DEB8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808DEC0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_26808DEC8 = 0;
  byte_26808DED0 = 1;
  qword_26808DF00 = 0;
  qword_26808DEE0 = 0;
  *(uint64_t *)((char *)&qword_26808DEE8 + 5) = 0;
  CoreML::Specification::_Model_default_instance_ = (uint64_t)&unk_26D77A670;
  byte_26808DF08 = 1;
  qword_26808DD10 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_26808DD38 = (uint64_t)&CoreML::Specification::_Pipeline_default_instance_;
  qword_26808DD70 = (uint64_t)&CoreML::Specification::_FeatureType_default_instance_;
  qword_26808DD90 = (uint64_t)&CoreML::Specification::_Metadata_UserDefinedEntry_default_instance_;
  qword_26808DE90 = (uint64_t)v35;
  qword_26808DEE8 = (uint64_t)&CoreML::Specification::_ModelDescription_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_Model_2eproto::InitDefaults(CoreML::Specification::protobuf_Model_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_Model_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Model_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_224362BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Pipeline *CoreML::Specification::Pipeline::Pipeline(CoreML::Specification::Pipeline *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(void *)this = &unk_26D77A248;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 7) = 0;
  if (this != (CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_224362C7C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Pipeline::~Pipeline(CoreML::Specification::Pipeline *this)
{
  *(void *)this = &unk_26D77A248;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Pipeline::~Pipeline(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::Pipeline::default_instance(CoreML::Specification::Pipeline *this)
{
  return &CoreML::Specification::_Pipeline_default_instance_;
}

void CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224362DB8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Pipeline>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>);
  }
  return result;
}

uint64_t CoreML::Specification::Pipeline::Clear(CoreML::Specification::Pipeline *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    char v3 = (CoreML::Specification::Model **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      CoreML::Specification::Model::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 40);
}

uint64_t CoreML::Specification::Pipeline::MergePartialFromCodedStream(CoreML::Specification::Pipeline *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 40);
  uint64_t v6 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v8 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
          unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0) {
            goto LABEL_21;
          }
          goto LABEL_8;
        }
        uint64_t v8 = *v7;
        if (*v7 < 1) {
          goto LABEL_7;
        }
        *a2 = v7 + 1;
        unint64_t v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0) {
          goto LABEL_21;
        }
LABEL_8:
        if (v9 >> 3 != 2) {
          break;
        }
        if (v9 != 18) {
          goto LABEL_21;
        }
        uint64_t v15 = (int *)*((void *)this + 7);
        if (!v15)
        {
          int v17 = *((_DWORD *)this + 13);
          goto LABEL_34;
        }
        uint64_t v16 = *((int *)this + 12);
        int v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *((_DWORD *)this + 13))
          {
LABEL_34:
            _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v17 + 1);
            uint64_t v15 = (int *)*((void *)this + 7);
            int v17 = *v15;
          }
          int *v15 = v17 + 1;
          atomic_ullong *volatile v24 = *(_tc_google::protobuf::Arena **)v5;
          if (!*(void *)v5) {
            operator new();
          }
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          _tc_google::protobuf::Arena::AddListNode(v24, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
          uint64_t v25 = *((void *)this + 7);
          uint64_t v26 = *((int *)this + 12);
          *((_DWORD *)this + 12) = v26 + 1;
          *(void *)(v25 + 8 * v26 + 8) = Aligned;
          goto LABEL_38;
        }
        *((_DWORD *)this + 12) = v16 + 1;
        Aligned = *(std::string **)&v15[2 * v16 + 2];
LABEL_38:
        uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, Aligned);
        if (!result) {
          return result;
        }
        uint64_t v27 = *((void *)this + 7);
        uint64_t v28 = *(unsigned __int8 **)(v27 + 8 * *((int *)this + 12));
        if ((char)v28[23] < 0)
        {
          uint64_t v28 = *(unsigned __int8 **)v28;
          uint64_t v29 = *(const char **)(*(void *)(v27 + 8 * *((int *)this + 12)) + 8);
        }
        else
        {
          uint64_t v29 = (const char *)v28[23];
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v28, v29, 0, (uint64_t)"CoreML.Specification.Pipeline.names"))return 0; {
      }
        }
      if (v9 >> 3 != 1 || v9 != 10) {
        break;
      }
      uint64_t v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>((uint64_t)v6);
      uint64_t v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
      }
      unint64_t v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v20 & 0x8000000000000000) == 0)
      {
        int v22 = v20;
        uint64_t result = CoreML::Specification::Model::MergePartialFromCodedStream(v12, (_tc_google::protobuf::io::CodedInputStream *)a2, v21);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22))
        {
          continue;
        }
      }
      return 0;
    }
LABEL_21:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::Pipeline::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  uint64_t v8 = *(unsigned int *)(v5 + 48);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = -v8;
    uint64_t v10 = 1;
    do
    {
      long long v11 = *(unsigned __int8 **)(*(void *)(v5 + 56) + 8 * v10);
      if ((char)v11[23] < 0)
      {
        long long v11 = *(unsigned __int8 **)v11;
        uint64_t v12 = *(const char **)(*(void *)(*(void *)(v5 + 56) + 8 * v10) + 8);
      }
      else
      {
        uint64_t v12 = (const char *)v11[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v11, v12, 1, (uint64_t)"CoreML.Specification.Pipeline.names");
      this = _tc_google::protobuf::internal::WireFormatLite::WriteString(2, *(void *)(*(void *)(v5 + 56) + 8 * v10++), a2);
    }
    while (v9 + v10 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::Pipeline::ByteSizeLong(CoreML::Specification::Pipeline *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::Model::ByteSizeLong(*(CoreML::Specification::Model **)(*((void *)this + 4)
                                                                                       + 8 * v3
                                                                                       + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t result = v4 + v6;
  if ((int)v6 >= 1)
  {
    uint64_t v8 = (uint64_t *)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v9 = *v8++;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v10;
      }
      result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      --v6;
    }
    while (v6);
  }
  *((_DWORD *)this + 16) = result;
  return result;
}

uint64_t CoreML::Specification::Pipeline::MergeFrom(uint64_t this, const CoreML::Specification::Pipeline *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (uint64_t)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)(this + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::Model **)(*((void *)a2 + 4) + 8);
    unint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 16), *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>(v3 + 16, (CoreML::Specification::Model **)v7, v6, v5, **(_DWORD **)(v3 + 32) - *(_DWORD *)(v3 + 24));
    signed int v8 = *(_DWORD *)(v3 + 24) + v5;
    *(_DWORD *)(v3 + 24) = v8;
    uint64_t v9 = *(signed int **)(v3 + 32);
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  unsigned int v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    uint64_t v11 = (const std::string **)(*((void *)a2 + 7) + 8);
    uint64_t v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 40), v10);
    this = (uint64_t)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)(v3 + 40), (std::string **)v12, v11, v10, **(_DWORD **)(v3 + 56) - *(_DWORD *)(v3 + 48));
    signed int v13 = *(_DWORD *)(v3 + 48) + v10;
    *(_DWORD *)(v3 + 48) = v13;
    size_t v14 = *(signed int **)(v3 + 56);
    if (*v14 < v13) {
      *size_t v14 = v13;
    }
  }
  return this;
}

uint64_t CoreML::Specification::Pipeline::IsInitialized(CoreML::Specification::Pipeline *this)
{
  return 1;
}

void *CoreML::Specification::Pipeline::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Pipeline");
}

CoreML::Specification::PipelineClassifier *CoreML::Specification::PipelineClassifier::PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  *(void *)this = &unk_26D77A2E0;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_224363420(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PipelineClassifier::~PipelineClassifier(CoreML::Specification::PipelineClassifier *this)
{
  *(void *)this = &unk_26D77A2E0;
  if (this != (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::PipelineClassifier::~PipelineClassifier(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::PipelineClassifier::default_instance(CoreML::Specification::PipelineClassifier *this)
{
  return &CoreML::Specification::_PipelineClassifier_default_instance_;
}

void CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22436356C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::PipelineClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>);
  }
  return result;
}

uint64_t CoreML::Specification::PipelineClassifier::Clear(CoreML::Specification::PipelineClassifier *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(CoreML::Specification::PipelineClassifier *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = (CoreML::Specification::Pipeline *)*((void *)this + 2);
      if (!v11) {
        operator new();
      }
      uint64_t v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v15 = v14;
        uint64_t result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_22436374C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::PipelineClassifier::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    uint64_t v5 = this[2];
    if (v5) {
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
    }
  }
  return this;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineClassifier::ByteSizeLong(CoreML::Specification::PipelineClassifier *this)
{
  if (this == (CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (CoreML::Specification::Pipeline *)*((void *)this + 2);
    if (result)
    {
      uint64_t v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      uint64_t result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

std::string *CoreML::Specification::PipelineClassifier::MergeFrom(std::string *this, const CoreML::Specification::PipelineClassifier *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineClassifier *)&CoreML::Specification::_PipelineClassifier_default_instance_
    && v5 != 0)
  {
    if (!v3->__r_.__value_.__r.__words[2]) {
      operator new();
    }
    if (v5) {
      unint64_t v7 = (const CoreML::Specification::Pipeline *)*((void *)a2 + 2);
    }
    else {
      unint64_t v7 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    }
    uint64_t v8 = v3->__r_.__value_.__r.__words[2];
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom(v8, v7);
  }
  return this;
}

void sub_2243638C0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineClassifier::IsInitialized(CoreML::Specification::PipelineClassifier *this)
{
  return 1;
}

void *CoreML::Specification::PipelineClassifier::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineClassifier");
}

CoreML::Specification::PipelineRegressor *CoreML::Specification::PipelineRegressor::PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  *(void *)this = &unk_26D77A378;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return this;
}

void sub_224363960(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::PipelineRegressor::~PipelineRegressor(CoreML::Specification::PipelineRegressor *this)
{
  *(void *)this = &unk_26D77A378;
  if (this != (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::PipelineRegressor::~PipelineRegressor(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::PipelineRegressor::default_instance(CoreML::Specification::PipelineRegressor *this)
{
  return &CoreML::Specification::_PipelineRegressor_default_instance_;
}

void CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224363AAC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::PipelineRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>);
  }
  return result;
}

uint64_t CoreML::Specification::PipelineRegressor::Clear(CoreML::Specification::PipelineRegressor *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  return result;
}

uint64_t CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(CoreML::Specification::PipelineRegressor *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_7;
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        break;
      }
LABEL_7:
      if (v7 != 10 || (v7 & 0xFFFFFFF8) != 8) {
        break;
      }
      uint64_t v11 = (CoreML::Specification::Pipeline *)*((void *)this + 2);
      if (!v11) {
        operator new();
      }
      uint64_t v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v12;
        *a2 = v12 + 1;
      }
      unint64_t v14 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
      if ((v14 & 0x8000000000000000) == 0)
      {
        int v15 = v14;
        uint64_t result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v11, (_tc_google::protobuf::io::CodedInputStream *)a2);
        if (!result) {
          return result;
        }
        if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v15))
        {
          continue;
        }
      }
      return 0;
    }
    if (!v7 || (v7 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_224363C8C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::PipelineRegressor::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (this != &CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    uint64_t v5 = this[2];
    if (v5) {
      return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
    }
  }
  return this;
}

CoreML::Specification::Pipeline *CoreML::Specification::PipelineRegressor::ByteSizeLong(CoreML::Specification::PipelineRegressor *this)
{
  if (this == (CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = (CoreML::Specification::Pipeline *)*((void *)this + 2);
    if (result)
    {
      uint64_t v3 = CoreML::Specification::Pipeline::ByteSizeLong(result);
      uint64_t result = (CoreML::Specification::Pipeline *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

std::string *CoreML::Specification::PipelineRegressor::MergeFrom(std::string *this, const CoreML::Specification::PipelineRegressor *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::PipelineRegressor *)&CoreML::Specification::_PipelineRegressor_default_instance_
    && v5 != 0)
  {
    if (!v3->__r_.__value_.__r.__words[2]) {
      operator new();
    }
    if (v5) {
      unint64_t v7 = (const CoreML::Specification::Pipeline *)*((void *)a2 + 2);
    }
    else {
      unint64_t v7 = (const CoreML::Specification::Pipeline *)&CoreML::Specification::_Pipeline_default_instance_;
    }
    uint64_t v8 = v3->__r_.__value_.__r.__words[2];
    return (std::string *)CoreML::Specification::Pipeline::MergeFrom(v8, v7);
  }
  return this;
}

void sub_224363E00(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40759568C3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::PipelineRegressor::IsInitialized(CoreML::Specification::PipelineRegressor *this)
{
  return 1;
}

void *CoreML::Specification::PipelineRegressor::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.PipelineRegressor");
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  *(void *)this = &unk_26D77A410;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_224363EAC(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::FeatureDescription *CoreML::Specification::FeatureDescription::FeatureDescription(CoreML::Specification::FeatureDescription *this, const CoreML::Specification::FeatureDescription *a2)
{
  *(void *)this = &unk_26D77A410;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v8 = *((void *)a2 + 3);
  if (*(char *)(v8 + 23) < 0) {
    uint64_t v9 = *(void *)(v8 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  }
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v9) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  if (a2 != (const CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_
    && *((void *)a2 + 4))
  {
    operator new();
  }
  *((void *)this + 4) = 0;
  return this;
}

void sub_224363FDC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C40B6FDD44FLL);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FeatureDescription::~FeatureDescription(CoreML::Specification::FeatureDescription *this)
{
  *(void *)this = &unk_26D77A410;
  CoreML::Specification::FeatureDescription::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::FeatureDescription::~FeatureDescription(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::FeatureDescription::SharedDtor(uint64_t *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = v1[3];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v4, 0x1012C40EC159624);
  }
  if (v1 != &CoreML::Specification::_FeatureDescription_default_instance_)
  {
    this = (uint64_t *)v1[4];
    if (this)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v6();
    }
  }
  return this;
}

void CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243641EC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::Clear(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 3);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t result = *((void *)this + 4);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 4) = 0;
  return result;
}

uint64_t CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(CoreML::Specification::FeatureDescription *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v8 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
          unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0) {
            goto LABEL_32;
          }
          goto LABEL_8;
        }
        uint64_t v8 = *v7;
        if (*v7 < 1) {
          goto LABEL_7;
        }
        *a2 = v7 + 1;
        unint64_t v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0) {
          goto LABEL_32;
        }
LABEL_8:
        unsigned int v11 = v9 >> 3;
        if (v9 >> 3 != 3) {
          break;
        }
        if (v9 != 26) {
          goto LABEL_32;
        }
        uint64_t v16 = (CoreML::Specification::FeatureType *)*((void *)this + 4);
        if (!v16) {
          operator new();
        }
        int v17 = *a2;
        if (*a2 >= a2[1] || *v17 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v17;
          *a2 = v17 + 1;
        }
        unint64_t v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((v20 & 0x8000000000000000) == 0)
        {
          int v22 = v20;
          uint64_t result = CoreML::Specification::FeatureType::MergePartialFromCodedStream(v16, (_tc_google::protobuf::io::CodedInputStream *)a2, v21);
          if (!result) {
            return result;
          }
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22))
          {
            continue;
          }
        }
        return 0;
      }
      if (v11 != 2) {
        break;
      }
      if (v9 != 18) {
        goto LABEL_32;
      }
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v5);
      if (!result) {
        return result;
      }
      unint64_t v14 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
        std::string::size_type size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      uint64_t v23 = "CoreML.Specification.FeatureDescription.shortDescription";
LABEL_47:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v14, size, 0, (uint64_t)v23))return 0; {
    }
      }
    if (v11 == 1 && v9 == 10)
    {
      if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v6);
      if (!result) {
        return result;
      }
      unint64_t v14 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
        std::string::size_type size = (const char *)(*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      uint64_t v23 = "CoreML.Specification.FeatureDescription.name";
      goto LABEL_47;
    }
LABEL_32:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_224364510(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::SerializeWithCachedSizes(CoreML::Specification::FeatureDescription *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v6 = (_tc_google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v6 + 23) < 0)
  {
    unint64_t v7 = (const char *)*((void *)v6 + 1);
    if (!v7) {
      goto LABEL_7;
    }
    uint64_t v6 = *(_tc_google::protobuf::internal **)v6;
    goto LABEL_6;
  }
  unint64_t v7 = (const char *)*((unsigned __int8 *)v6 + 23);
  if (*((unsigned char *)v6 + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.FeatureDescription.name");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((void *)this + 2), a2);
  }
LABEL_7:
  uint64_t result = *((void *)this + 3);
  if ((*(char *)(result + 23) & 0x80000000) == 0)
  {
    unint64_t v9 = (const char *)*(unsigned __int8 *)(result + 23);
    if (!*(unsigned char *)(result + 23)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  unint64_t v9 = *(const char **)(result + 8);
  if (v9)
  {
    uint64_t result = *(void *)result;
LABEL_12:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v9, 1, (uint64_t)"CoreML.Specification.FeatureDescription.shortDescription");
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((void *)this + 3), a2);
  }
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    uint64_t v10 = *((void *)this + 4);
    if (v10)
    {
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)3, v10, a2, a4);
    }
  }
  return result;
}

uint64_t CoreML::Specification::FeatureDescription::ByteSizeLong(CoreML::Specification::FeatureDescription *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  if (this != (CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_)
  {
    unint64_t v9 = (CoreML::Specification::FeatureType *)*((void *)this + 4);
    if (v9)
    {
      uint64_t v10 = CoreML::Specification::FeatureType::ByteSizeLong(v9);
      v5 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *((_DWORD *)this + 10) = v5;
  return v5;
}

std::string *CoreML::Specification::FeatureDescription::MergeFrom(std::string *this, const CoreML::Specification::FeatureDescription *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  uint64_t v6 = (uint64_t *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    goto LABEL_19;
  }
  this = v3 + 1;
  std::string::pointer data = (uint64_t *)v3[1].__r_.__value_.__l.__data_;
  if (data != (uint64_t *)v7)
  {
    if (data == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__l.__data_, (const std::string *)v7);
  }
LABEL_19:
  if (a2 != (const CoreML::Specification::FeatureDescription *)&CoreML::Specification::_FeatureDescription_default_instance_
    && *((void *)a2 + 4))
  {
    if (!v3[1].__r_.__value_.__l.__size_) {
      operator new();
    }
    unint64_t v9 = (const CoreML::Specification::FeatureType *)*((void *)a2 + 4);
    std::string::size_type size = (std::string *)v3[1].__r_.__value_.__l.__size_;
    return CoreML::Specification::FeatureType::MergeFrom(size, v9);
  }
  return this;
}

void sub_224364894(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::FeatureDescription::IsInitialized(CoreML::Specification::FeatureDescription *this)
{
  return 1;
}

void *CoreML::Specification::FeatureDescription::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FeatureDescription");
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77A4A8;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v2 = (CoreML::Specification::protobuf_Model_2eproto *)_tc_google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Metadata *)&CoreML::Specification::_Metadata_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(v2);
  }
  *((void *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 9) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 10) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 22) = 0;
  return this;
}

void sub_224364968(_Unwind_Exception *a1)
{
  _tc_google::protobuf::Map<std::string,std::string>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Metadata *CoreML::Specification::Metadata::Metadata(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  *(void *)this = &unk_26D77A4A8;
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((void *)this + 2) = 0;
  uint64_t v5 = (char *)this + 16;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  _tc_google::protobuf::Map<std::string,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 22) = 0;
  uint64_t v6 = *((void *)a2 + 1);
  if (v6) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v6 & 0xFFFFFFFFFFFFFFFELL);
  }
  _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)v5, (uint64_t)a2 + 16);
  *((void *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v7 = *((void *)a2 + 6);
  if (*(char *)(v7 + 23) < 0) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  }
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v9 = *((void *)a2 + 7);
  if (*(char *)(v9 + 23) < 0) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  }
  if ((uint64_t *)v9 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 8) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v11 = *((void *)a2 + 8);
  if (*(char *)(v11 + 23) < 0) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
  }
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v12) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 9) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v13 = *((void *)a2 + 9);
  if (*(char *)(v13 + 23) < 0) {
    uint64_t v14 = *(void *)(v13 + 8);
  }
  else {
    uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  }
  if ((uint64_t *)v13 != &_tc_google::protobuf::internal::fixed_address_empty_string && v14) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 10) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v15 = *((void *)a2 + 10);
  if (*(char *)(v15 + 23) < 0) {
    uint64_t v16 = *(void *)(v15 + 8);
  }
  else {
    uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  }
  if ((uint64_t *)v15 != &_tc_google::protobuf::internal::fixed_address_empty_string && v16) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  return this;
}

void sub_224364B28(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v9);
  uint64_t v4 = v9[0];
  if (v9[0])
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t v6 = *(const std::string **)(v4 + 24);
      uint64_t v7 = v6 + 1;
      uint64_t v8 = _tc_google::protobuf::Map<std::string,std::string>::operator[](v5, v6);
      std::string::operator=(v8, v7);
      uint64_t result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v9);
      uint64_t v4 = v9[0];
    }
    while (v9[0]);
  }
  return result;
}

void CoreML::Specification::Metadata::~Metadata(CoreML::Specification::Metadata *this)
{
  *(void *)this = &unk_26D77A4A8;
  uint64_t v2 = (void *)((char *)this + 24);
  CoreML::Specification::Metadata::SharedDtor(this);
  _tc_google::protobuf::Map<std::string,std::string>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Metadata::~Metadata(this);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::Metadata::SharedDtor(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[6];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = v1[7];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    this = (void *)MEMORY[0x22A614FA0](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = v1[8];
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    this = (void *)MEMORY[0x22A614FA0](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = v1[9];
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    this = (void *)MEMORY[0x22A614FA0](v8, 0x1012C40EC159624);
  }
  uint64_t v10 = v1[10];
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    JUMPOUT(0x22A614FA0);
  }
  return this;
}

void CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224364E00(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4012F24C1ELL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Metadata>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>);
  }
  return result;
}

void CoreML::Specification::Metadata::Clear(CoreML::Specification::Metadata *this)
{
  _tc_google::protobuf::Map<std::string,std::string>::clear((uint64_t)this + 24);
  uint64_t v2 = *((void *)this + 6);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  uint64_t v3 = *((void *)this + 7);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  uint64_t v4 = *((void *)this + 8);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  uint64_t v5 = *((void *)this + 9);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
  uint64_t v6 = *((void *)this + 10);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
}

uint64_t CoreML::Specification::Metadata::MergePartialFromCodedStream(CoreML::Specification::Metadata *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v4 = (std::string **)((char *)this + 80);
  unsigned int v33 = (char *)this + 24;
  std::string v34 = (char *)this + 16;
  uint64_t v5 = (std::string **)((char *)this + 72);
  uint64_t v6 = (std::string **)((char *)this + 64);
  uint64_t v7 = (std::string **)((char *)this + 56);
  uint64_t v8 = (std::string **)((char *)this + 48);
  while (1)
  {
    while (1)
    {
      uint64_t v9 = *(unsigned __int8 **)a2;
      unint64_t v10 = *((void *)a2 + 1);
      if (*(void *)a2 >= v10)
      {
        uint64_t v12 = 0;
LABEL_83:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v12);
        unint64_t v13 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v13 & 0x100000000) == 0) {
          goto LABEL_84;
        }
        goto LABEL_9;
      }
      uint64_t v11 = v9 + 1;
      uint64_t v12 = *v9;
      if ((char)*v9 >= 1) {
        break;
      }
      if ((unint64_t)v11 >= v10) {
        goto LABEL_83;
      }
      int v14 = *v11;
      if ((v12 & ~v14) < 0x80) {
        goto LABEL_83;
      }
      *(void *)a2 = v9 + 2;
      unint64_t v13 = (v12 + (v14 << 7) - 128) | 0x100000000;
LABEL_9:
      unsigned int v15 = v13 >> 3;
      switch(v13 >> 3)
      {
        case 1u:
          if (v13 != 10) {
            goto LABEL_84;
          }
          if (*v8 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v8)) {
            return 0;
          }
          uint64_t v16 = *v8;
          if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v8)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v26 = "CoreML.Specification.Metadata.shortDescription";
          goto LABEL_69;
        case 2u:
          if (v13 != 18) {
            goto LABEL_84;
          }
          if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v7)) {
            return 0;
          }
          uint64_t v16 = *v7;
          if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v7)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v26 = "CoreML.Specification.Metadata.versionString";
          goto LABEL_69;
        case 3u:
          if (v13 != 26) {
            goto LABEL_84;
          }
          if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v6)) {
            return 0;
          }
          uint64_t v16 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v26 = "CoreML.Specification.Metadata.author";
          goto LABEL_69;
        case 4u:
          if (v13 != 34) {
            goto LABEL_84;
          }
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v5)) {
            return 0;
          }
          uint64_t v16 = *v5;
          if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v5)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v26 = "CoreML.Specification.Metadata.license";
          goto LABEL_69;
        default:
          if (v15 == 100)
          {
            if (v13 != 34) {
              goto LABEL_84;
            }
            v35[0] = v34;
            v35[1] = v33;
            uint64_t v37 = 0;
            uint64_t v38 = 0;
            std::string __p = 0;
            uint64_t v40 = 0;
            uint64_t v18 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v18 < 0)
            {
              int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0) {
                goto LABEL_90;
              }
            }
            else
            {
              int VarintSizeAsIntFallback = *v18;
              *(void *)a2 = v18 + 1;
            }
            unint64_t v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
            int v21 = v20;
            if ((v20 & 0x8000000000000000) == 0
              && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::MergePartialFromCodedStream((uint64_t)v35, a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v21))
            {
              int v22 = v38 >= 0 ? (_tc_google::protobuf::internal *)&__p : (_tc_google::protobuf::internal *)__p;
              uint64_t v23 = v38 >= 0 ? (const char *)HIBYTE(v38) : (const char *)v37;
              if (_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v22, v23, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key"))
              {
                atomic_ullong *volatile v24 = (_tc_google::protobuf::internal *)v39;
                if (*(char *)(v39 + 23) < 0)
                {
                  atomic_ullong *volatile v24 = *(_tc_google::protobuf::internal **)v39;
                  uint64_t v25 = *(const char **)(v39 + 8);
                }
                else
                {
                  uint64_t v25 = (const char *)*(unsigned __int8 *)(v39 + 23);
                }
                BOOL v27 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 0, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
                BOOL v28 = v27;
                if (v27) {
                  int v29 = 0;
                }
                else {
                  int v29 = 6;
                }
LABEL_75:
                if (v40) {
                  (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
                }
                if (SHIBYTE(v38) < 0) {
                  operator delete(__p);
                }
                if (!v28 && v29) {
                  return 0;
                }
                continue;
              }
            }
LABEL_90:
            BOOL v28 = 0;
            int v29 = 6;
            goto LABEL_75;
          }
          if (v15 != 200 || v13 != 66) {
            goto LABEL_84;
          }
          if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v4)) {
            return 0;
          }
          uint64_t v16 = *v4;
          if (SHIBYTE((*v4)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v4)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v4)->__r_.__value_.__r.__words[2]);
          }
          uint64_t v26 = "CoreML.Specification.Metadata.externalMetadata";
LABEL_69:
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v16, size, 0, (uint64_t)v26))return 0; {
          break;
          }
      }
    }
    *(void *)a2 = v11;
    unint64_t v13 = v12 | 0x100000000;
    if ((v13 & 0x100000000) != 0) {
      goto LABEL_9;
    }
LABEL_84:
    if (!v13 || (v13 & 7) == 4) {
      return 1;
    }
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v13, a3))return 0; {
  }
    }
}

void sub_2243653E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Metadata::SerializeWithCachedSizes(CoreML::Specification::Metadata *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (_tc_google::protobuf::internal *)*((void *)this + 6);
  if (*((char *)v4 + 23) < 0)
  {
    uint64_t v5 = (const char *)*((void *)v4 + 1);
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t v4 = *(_tc_google::protobuf::internal **)v4;
    goto LABEL_6;
  }
  uint64_t v5 = (const char *)*((unsigned __int8 *)v4 + 23);
  if (*((unsigned char *)v4 + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v4, v5, 1, (uint64_t)"CoreML.Specification.Metadata.shortDescription");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((void *)this + 6), a2);
  }
LABEL_7:
  uint64_t v6 = (_tc_google::protobuf::internal *)*((void *)this + 7);
  if (*((char *)v6 + 23) < 0)
  {
    uint64_t v7 = (const char *)*((void *)v6 + 1);
    if (!v7) {
      goto LABEL_13;
    }
    uint64_t v6 = *(_tc_google::protobuf::internal **)v6;
    goto LABEL_12;
  }
  uint64_t v7 = (const char *)*((unsigned __int8 *)v6 + 23);
  if (*((unsigned char *)v6 + 23))
  {
LABEL_12:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v6, v7, 1, (uint64_t)"CoreML.Specification.Metadata.versionString");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, *((void *)this + 7), a2);
  }
LABEL_13:
  uint64_t v8 = (_tc_google::protobuf::internal *)*((void *)this + 8);
  if (*((char *)v8 + 23) < 0)
  {
    uint64_t v9 = (const char *)*((void *)v8 + 1);
    if (!v9) {
      goto LABEL_19;
    }
    uint64_t v8 = *(_tc_google::protobuf::internal **)v8;
    goto LABEL_18;
  }
  uint64_t v9 = (const char *)*((unsigned __int8 *)v8 + 23);
  if (*((unsigned char *)v8 + 23))
  {
LABEL_18:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v8, v9, 1, (uint64_t)"CoreML.Specification.Metadata.author");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3, *((void *)this + 8), a2);
  }
LABEL_19:
  unint64_t v10 = (_tc_google::protobuf::internal *)*((void *)this + 9);
  if (*((char *)v10 + 23) < 0)
  {
    uint64_t v11 = (const char *)*((void *)v10 + 1);
    if (!v11) {
      goto LABEL_25;
    }
    unint64_t v10 = *(_tc_google::protobuf::internal **)v10;
    goto LABEL_24;
  }
  uint64_t v11 = (const char *)*((unsigned __int8 *)v10 + 23);
  if (*((unsigned char *)v10 + 23))
  {
LABEL_24:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.Metadata.license");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4, *((void *)this + 9), a2);
  }
LABEL_25:
  unint64_t v12 = **((void **)this + 5);
  if (!v12) {
    goto LABEL_42;
  }
  if (!*((unsigned char *)a2 + 26))
  {
    if (v12 < 2 || !_tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_) {
      goto LABEL_33;
    }
LABEL_32:
    operator new[]();
  }
  if (v12 >= 2 && *((unsigned char *)a2 + 27)) {
    goto LABEL_32;
  }
LABEL_33:
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v18);
  uint64_t v13 = 0;
  while (v18[0])
  {
    unsigned int v15 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(void *)(v18[0] + 24), *(void *)(v18[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 2));
    if ((void *)v13 != v15)
    {
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      uint64_t v13 = (uint64_t)v15;
    }
    _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v13, a2, v14);
    CoreML::Specification::Metadata::SerializeWithCachedSizes(_tc_google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(*(unsigned __int8 **)(v18[0] + 24));
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v18);
  }
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
LABEL_42:
  uint64_t result = *((void *)this + 10);
  if (*(char *)(result + 23) < 0)
  {
    int v17 = *(const char **)(result + 8);
    if (!v17) {
      return result;
    }
    uint64_t result = *(void *)result;
    goto LABEL_47;
  }
  int v17 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_47:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v17, 1, (uint64_t)"CoreML.Specification.Metadata.externalMetadata");
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(200, *((void *)this + 10), a2);
  }
  return result;
}

void sub_2243657E4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

BOOL CoreML::Specification::Metadata::SerializeWithCachedSizes(_tc_google::protobuf::io::CodedOutputStream *)const::Utf8Check::Check(unsigned __int8 *a1)
{
  uint64_t v1 = a1;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned __int8 **)a1;
    uint64_t v2 = (const char *)*((void *)v1 + 1);
  }
  else
  {
    uint64_t v2 = (const char *)a1[23];
  }
  _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)a1, v2, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.key");
  if ((char)v1[47] < 0)
  {
    uint64_t v3 = (_tc_google::protobuf::internal *)*((void *)v1 + 3);
    uint64_t v4 = (const char *)*((void *)v1 + 4);
  }
  else
  {
    uint64_t v3 = (_tc_google::protobuf::internal *)(v1 + 24);
    uint64_t v4 = (const char *)v1[47];
  }
  return _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v3, v4, 1, (uint64_t)"CoreML.Specification.Metadata.UserDefinedEntry.value");
}

uint64_t CoreML::Specification::Metadata::ByteSizeLong(CoreML::Specification::Metadata *this)
{
  uint64_t v2 = **((void **)this + 5);
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)this + 24, v23);
  uint64_t v3 = 0;
  uint64_t v4 = 2 * v2;
  while (v23[0])
  {
    uint64_t v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(void *)(v23[0] + 24), *(void *)(v23[0] + 24) + 24, *((_tc_google::protobuf::Arena **)this + 2));
    if (v3 != (_DWORD *)v5)
    {
      if (v3) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v3 = v5;
    }
    uint64_t v6 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(v3);
    v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v23);
  }
  if (v3) {
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_15;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)(v7 + 8);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v8;
  }
  v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_15:
  uint64_t v10 = *((void *)this + 7);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      goto LABEL_20;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)(v10 + 8);
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v11;
  }
  v4 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_20:
  uint64_t v13 = *((void *)this + 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(void *)(v13 + 8)) {
      goto LABEL_25;
    }
  }
  else if (!*(unsigned char *)(v13 + 23))
  {
    goto LABEL_25;
  }
  uint64_t v15 = *(void *)(v13 + 8);
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = v14;
  }
  v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_25:
  uint64_t v16 = *((void *)this + 9);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
  if (*(char *)(v16 + 23) < 0)
  {
    if (!*(void *)(v16 + 8)) {
      goto LABEL_30;
    }
  }
  else if (!*(unsigned char *)(v16 + 23))
  {
    goto LABEL_30;
  }
  uint64_t v18 = *(void *)(v16 + 8);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v17;
  }
  v4 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_30:
  uint64_t v19 = *((void *)this + 10);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
  if (*(char *)(v19 + 23) < 0)
  {
    if (!*(void *)(v19 + 8)) {
      goto LABEL_35;
    }
  }
  else if (!*(unsigned char *)(v19 + 23))
  {
    goto LABEL_35;
  }
  uint64_t v21 = *(void *)(v19 + 8);
  if ((v20 & 0x80u) == 0) {
    uint64_t v21 = v20;
  }
  v4 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_35:
  *((_DWORD *)this + 22) = v4;
  return v4;
}

void sub_224365B74(_Unwind_Exception *exception_object)
{
  if (v1) {
    CoreML::Specification::CustomLayerParams::SerializeWithCachedSizes(v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *CoreML::Specification::Metadata::MergeFrom(CoreML::Specification::Metadata *this, const CoreML::Specification::Metadata *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (std::string *)_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
  uint64_t v6 = *((void *)a2 + 6);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_11;
  }
  uint64_t result = (std::string *)((char *)this + 48);
  uint64_t v7 = (uint64_t *)*((void *)this + 6);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    uint64_t result = std::string::operator=(*((std::string **)this + 6), (const std::string *)v6);
  }
LABEL_11:
  uint64_t v8 = *((void *)a2 + 7);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(void *)(v8 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v8 + 23))
  {
    goto LABEL_19;
  }
  uint64_t result = (std::string *)((char *)this + 56);
  uint64_t v9 = (uint64_t *)*((void *)this + 7);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    uint64_t result = std::string::operator=(*((std::string **)this + 7), (const std::string *)v8);
  }
LABEL_19:
  uint64_t v10 = *((void *)a2 + 8);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(void *)(v10 + 8)) {
      goto LABEL_27;
    }
  }
  else if (!*(unsigned char *)(v10 + 23))
  {
    goto LABEL_27;
  }
  uint64_t result = (std::string *)((char *)this + 64);
  uint64_t v11 = (uint64_t *)*((void *)this + 8);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    uint64_t result = std::string::operator=(*((std::string **)this + 8), (const std::string *)v10);
  }
LABEL_27:
  uint64_t v12 = *((void *)a2 + 9);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_35;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_35;
  }
  uint64_t result = (std::string *)((char *)this + 72);
  uint64_t v13 = (uint64_t *)*((void *)this + 9);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    uint64_t result = std::string::operator=(*((std::string **)this + 9), (const std::string *)v12);
  }
LABEL_35:
  uint64_t v14 = *((void *)a2 + 10);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(void *)(v14 + 8)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v14 + 23))
  {
    return result;
  }
  uint64_t result = (std::string *)*((void *)this + 10);
  if (result != (std::string *)v14)
  {
    if (result == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string)
    {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    return std::string::operator=(result, (const std::string *)v14);
  }
  return result;
}

uint64_t CoreML::Specification::Metadata::IsInitialized(CoreML::Specification::Metadata *this)
{
  return 1;
}

void *CoreML::Specification::Metadata::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Metadata");
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this)
{
  *(void *)this = &unk_26D77A540;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 11) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 12) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  return this;
}

void sub_224365E44(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v4);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::ModelDescription *CoreML::Specification::ModelDescription::ModelDescription(CoreML::Specification::ModelDescription *this, const CoreML::Specification::ModelDescription *a2)
{
  *(void *)this = &unk_26D77A540;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  uint64_t v5 = (std::string *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 4);
    uint64_t v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v5, (std::string **)v8, (const CoreML::Specification::FeatureDescription **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    uint64_t v10 = (signed int *)*((void *)this + 4);
    if (*v10 < v9) {
      signed int *v10 = v9;
    }
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  unsigned int v11 = *((_DWORD *)a2 + 12);
  if (v11)
  {
    uint64_t v12 = *((void *)a2 + 7);
    uint64_t v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 40), *((_DWORD *)a2 + 12));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)this + 40), (std::string **)v13, (const CoreML::Specification::FeatureDescription **)(v12 + 8), v11, **((_DWORD **)this + 7) - *((_DWORD *)this + 12));
    signed int v14 = *((_DWORD *)this + 12) + v11;
    *((_DWORD *)this + 12) = v14;
    uint64_t v15 = (signed int *)*((void *)this + 7);
    if (*v15 < v14) {
      signed int *v15 = v14;
    }
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  unsigned int v16 = *((_DWORD *)a2 + 18);
  if (v16)
  {
    uint64_t v17 = *((void *)a2 + 10);
    uint64_t v18 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::ModelDescription *)((char *)this + 64), *((_DWORD *)a2 + 18));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)this + 64), (std::string **)v18, (const CoreML::Specification::FeatureDescription **)(v17 + 8), v16, **((_DWORD **)this + 10) - *((_DWORD *)this + 18));
    signed int v19 = *((_DWORD *)this + 18) + v16;
    *((_DWORD *)this + 18) = v19;
    uint64_t v20 = (signed int *)*((void *)this + 10);
    if (*v20 < v19) {
      *uint64_t v20 = v19;
    }
  }
  *((_DWORD *)this + 28) = 0;
  uint64_t v21 = *((void *)a2 + 1);
  if (v21) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v21 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 11) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v22 = *((void *)a2 + 11);
  if (*(char *)(v22 + 23) < 0) {
    uint64_t v23 = *(void *)(v22 + 8);
  }
  else {
    uint64_t v23 = *(unsigned __int8 *)(v22 + 23);
  }
  if ((uint64_t *)v22 != &_tc_google::protobuf::internal::fixed_address_empty_string && v23) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  *((void *)this + 12) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  uint64_t v24 = *((void *)a2 + 12);
  if (*(char *)(v24 + 23) < 0) {
    uint64_t v25 = *(void *)(v24 + 8);
  }
  else {
    uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
  }
  if ((uint64_t *)v24 != &_tc_google::protobuf::internal::fixed_address_empty_string && v25) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_
    && *((void *)a2 + 13))
  {
    operator new();
  }
  *((void *)this + 13) = 0;
  return this;
}

void sub_2243660E0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v5, 0x10A1C4012F24C1ELL);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v4);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::ModelDescription::~ModelDescription(CoreML::Specification::ModelDescription *this)
{
  *(void *)this = &unk_26D77A540;
  CoreML::Specification::ModelDescription::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 8);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 5);
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::ModelDescription::~ModelDescription(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::ModelDescription::SharedDtor(uint64_t *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[11];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = v1[12];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    this = (uint64_t *)MEMORY[0x22A614FA0](v4, 0x1012C40EC159624);
  }
  if (v1 != &CoreML::Specification::_ModelDescription_default_instance_)
  {
    this = (uint64_t *)v1[13];
    if (this)
    {
      unsigned int v6 = *(uint64_t (**)(void))(*this + 8);
      return (uint64_t *)v6();
    }
  }
  return this;
}

void CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224366350(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40FD9EAC30);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::ModelDescription>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>);
  }
  return result;
}

uint64_t CoreML::Specification::ModelDescription::Clear(CoreML::Specification::ModelDescription *this)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = (CoreML::Specification::FeatureDescription **)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v4 = *v3++;
      CoreML::Specification::FeatureDescription::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  uint64_t v5 = *((unsigned int *)this + 12);
  if ((int)v5 >= 1)
  {
    unsigned int v6 = (CoreML::Specification::FeatureDescription **)(*((void *)this + 7) + 8);
    do
    {
      uint64_t v7 = *v6++;
      CoreML::Specification::FeatureDescription::Clear(v7);
      --v5;
    }
    while (v5);
    *((_DWORD *)this + 12) = 0;
  }
  uint64_t v8 = *((unsigned int *)this + 18);
  if ((int)v8 >= 1)
  {
    signed int v9 = (CoreML::Specification::FeatureDescription **)(*((void *)this + 10) + 8);
    do
    {
      uint64_t v10 = *v9++;
      CoreML::Specification::FeatureDescription::Clear(v10);
      --v8;
    }
    while (v8);
    *((_DWORD *)this + 18) = 0;
  }
  uint64_t v11 = *((void *)this + 11);
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v11 + 23) < 0)
    {
      **(unsigned char **)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v11 = 0;
      *(unsigned char *)(v11 + 23) = 0;
    }
  }
  uint64_t v12 = *((void *)this + 12);
  if ((uint64_t *)v12 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v12 + 23) < 0)
    {
      **(unsigned char **)uint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v12 = 0;
      *(unsigned char *)(v12 + 23) = 0;
    }
  }
  uint64_t result = *((void *)this + 13);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 13) = 0;
  return result;
}

uint64_t CoreML::Specification::ModelDescription::MergePartialFromCodedStream(CoreML::Specification::ModelDescription *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v5 = (char *)this + 64;
  unsigned int v6 = (std::string **)((char *)this + 96);
  uint64_t v7 = (std::string **)((char *)this + 88);
  uint64_t v8 = (char *)this + 40;
  signed int v9 = (char *)this + 16;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v10 = *(unsigned __int8 **)a2;
        unint64_t v11 = *((void *)a2 + 1);
        if (*(void *)a2 >= v11)
        {
          uint64_t v13 = 0;
        }
        else
        {
          uint64_t v12 = v10 + 1;
          uint64_t v13 = *v10;
          if ((char)*v10 >= 1)
          {
            *(void *)a2 = v12;
            unint64_t v14 = v13 | 0x100000000;
            if ((v14 & 0x100000000) == 0) {
              goto LABEL_9;
            }
            goto LABEL_17;
          }
          if ((unint64_t)v12 < v11)
          {
            int v15 = *v12;
            if ((v13 & ~v15) >= 0x80)
            {
              *(void *)a2 = v10 + 2;
              unint64_t v14 = (v13 + (v15 << 7) - 128) | 0x100000000;
              goto LABEL_17;
            }
          }
        }
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v13);
        unint64_t v14 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
        if ((v14 & 0x100000000) == 0) {
          goto LABEL_9;
        }
LABEL_17:
        unsigned int v18 = v14 >> 3;
        if (v14 >> 3 > 0xB) {
          break;
        }
        if (v18 == 1)
        {
          if (v14 == 10)
          {
            uint64_t v25 = (uint64_t)v9;
            goto LABEL_48;
          }
          goto LABEL_9;
        }
        if (v18 == 10)
        {
          if (v14 == 82)
          {
            uint64_t v25 = (uint64_t)v8;
            goto LABEL_48;
          }
          goto LABEL_9;
        }
        if (v18 != 11 || v14 != 90) {
          goto LABEL_9;
        }
        if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v7);
        if (!result) {
          return result;
        }
        uint64_t v20 = *v7;
        if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
          std::string::size_type size = (const char *)(*v7)->__r_.__value_.__l.__size_;
        }
        else
        {
          std::string::size_type size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
        }
        std::string v34 = "CoreML.Specification.ModelDescription.predictedFeatureName";
LABEL_64:
        if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v20, size, 0, (uint64_t)v34))return 0; {
      }
        }
      if (v18 == 12)
      {
        if (v14 == 98)
        {
          if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v6);
          if (!result) {
            return result;
          }
          uint64_t v20 = *v6;
          if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v20 = (std::string *)v20->__r_.__value_.__r.__words[0];
            std::string::size_type size = (const char *)(*v6)->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
          }
          std::string v34 = "CoreML.Specification.ModelDescription.predictedProbabilitiesName";
          goto LABEL_64;
        }
        goto LABEL_9;
      }
      if (v18 == 50) {
        break;
      }
      if (v18 != 100 || v14 != 34) {
        goto LABEL_9;
      }
      uint64_t v22 = (CoreML::Specification::Metadata *)*((void *)this + 13);
      if (!v22) {
        operator new();
      }
      uint64_t v23 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v23 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (VarintSizeAsIntFallback < 0) {
          return 0;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v23;
        *(void *)a2 = v23 + 1;
      }
      unint64_t v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
      if ((v32 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v31 = v32;
      uint64_t result = CoreML::Specification::Metadata::MergePartialFromCodedStream(v22, a2, v33);
      if (!result) {
        return result;
      }
LABEL_58:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v31)) {
        return 0;
      }
    }
    if (v14 == 146)
    {
      uint64_t v25 = (uint64_t)v5;
LABEL_48:
      uint64_t v26 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v25);
      BOOL v27 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v27 < 0)
      {
        int v28 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v28 < 0) {
          return 0;
        }
      }
      else
      {
        int v28 = *v27;
        *(void *)a2 = v27 + 1;
      }
      unint64_t v29 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v28);
      if ((v29 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v31 = v29;
      uint64_t result = CoreML::Specification::FeatureDescription::MergePartialFromCodedStream(v26, (char **)a2, v30);
      if (!result) {
        return result;
      }
      goto LABEL_58;
    }
LABEL_9:
    if (!v14 || (v14 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v14, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_224366808(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4012F24C1ELL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ModelDescription::SerializeWithCachedSizes(CoreML::Specification::ModelDescription *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  int v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*((void *)this + 4) + 8 * i + 8), a2, a4);
  }
  int v8 = *((_DWORD *)this + 12);
  if (v8)
  {
    for (int j = 0; j != v8; ++j)
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xA, *(void *)(*((void *)this + 7) + 8 * j + 8), a2, a4);
  }
  uint64_t v10 = (_tc_google::protobuf::internal *)*((void *)this + 11);
  if (*((char *)v10 + 23) < 0)
  {
    unint64_t v11 = (const char *)*((void *)v10 + 1);
    if (!v11) {
      goto LABEL_13;
    }
    uint64_t v10 = *(_tc_google::protobuf::internal **)v10;
    goto LABEL_12;
  }
  unint64_t v11 = (const char *)*((unsigned __int8 *)v10 + 23);
  if (*((unsigned char *)v10 + 23))
  {
LABEL_12:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(11, *((void *)this + 11), a2);
  }
LABEL_13:
  uint64_t result = *((void *)this + 12);
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v13 = *(const char **)(result + 8);
    if (!v13) {
      goto LABEL_19;
    }
    uint64_t result = *(void *)result;
    goto LABEL_18;
  }
  uint64_t v13 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_18:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v13, 1, (uint64_t)"CoreML.Specification.ModelDescription.predictedProbabilitiesName");
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(12, *((void *)this + 12), a2);
  }
LABEL_19:
  int v14 = *((_DWORD *)this + 18);
  if (v14)
  {
    for (int k = 0; k != v14; ++k)
      uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x32, *(void *)(*((void *)this + 10) + 8 * k + 8), a2, a4);
  }
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    uint64_t v16 = *((void *)this + 13);
    if (v16)
    {
      return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v16, a2, a4);
    }
  }
  return result;
}

uint64_t CoreML::Specification::ModelDescription::ByteSizeLong(CoreML::Specification::ModelDescription *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 12);
  uint64_t v7 = v4 + v6;
  if (v6)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 7) + 8 * v8 + 8));
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      ++v8;
    }
    while (v6 != v8);
  }
  uint64_t v10 = *((unsigned int *)this + 18);
  uint64_t v11 = v7 + 2 * v10;
  if (v10)
  {
    int v12 = 0;
    do
    {
      uint64_t v13 = CoreML::Specification::FeatureDescription::ByteSizeLong(*(CoreML::Specification::FeatureDescription **)(*((void *)this + 10) + 8 * v12 + 8));
      v11 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      ++v12;
    }
    while (v10 != v12);
  }
  uint64_t v14 = *((void *)this + 11);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(void *)(v14 + 8)) {
      goto LABEL_17;
    }
  }
  else if (!*(unsigned char *)(v14 + 23))
  {
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(v14 + 8);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v15;
  }
  v11 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_17:
  uint64_t v17 = *((void *)this + 12);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
  if (*(char *)(v17 + 23) < 0)
  {
    if (!*(void *)(v17 + 8)) {
      goto LABEL_22;
    }
  }
  else if (!*(unsigned char *)(v17 + 23))
  {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v17 + 8);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  v11 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_22:
  if (this != (CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_)
  {
    uint64_t v20 = (CoreML::Specification::Metadata *)*((void *)this + 13);
    if (v20)
    {
      uint64_t v21 = CoreML::Specification::Metadata::ByteSizeLong(v20);
      v11 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 2;
    }
  }
  *((_DWORD *)this + 28) = v11;
  return v11;
}

std::string *CoreML::Specification::ModelDescription::MergeFrom(std::string *this, const CoreML::Specification::ModelDescription *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  unsigned int v10 = *((_DWORD *)a2 + 12);
  if (v10)
  {
    uint64_t v11 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 7) + 8);
    int v12 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3[1].__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 12));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)v3 + 40), (std::string **)v12, v11, v10, *(_DWORD *)v3[2].__r_.__value_.__l.__size_ - LODWORD(v3[2].__r_.__value_.__l.__data_));
    signed int v13 = LODWORD(v3[2].__r_.__value_.__l.__data_) + v10;
    LODWORD(v3[2].__r_.__value_.__l.__data_) = v13;
    uint64_t v14 = (signed int *)v3[2].__r_.__value_.__l.__size_;
    if (*v14 < v13) {
      *uint64_t v14 = v13;
    }
  }
  unsigned int v15 = *((_DWORD *)a2 + 18);
  if (v15)
  {
    uint64_t v16 = (const CoreML::Specification::FeatureDescription **)(*((void *)a2 + 10) + 8);
    uint64_t v17 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3[2].__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 18));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>((std::string *)((char *)v3 + 64), (std::string **)v17, v16, v15, *(_DWORD *)v3[3].__r_.__value_.__l.__size_ - LODWORD(v3[3].__r_.__value_.__l.__data_));
    signed int v18 = LODWORD(v3[3].__r_.__value_.__l.__data_) + v15;
    LODWORD(v3[3].__r_.__value_.__l.__data_) = v18;
    uint64_t v19 = (signed int *)v3[3].__r_.__value_.__l.__size_;
    if (*v19 < v18) {
      *uint64_t v19 = v18;
    }
  }
  uint64_t v20 = *((void *)a2 + 11);
  if (*(char *)(v20 + 23) < 0)
  {
    if (!*(void *)(v20 + 8)) {
      goto LABEL_20;
    }
  }
  else if (!*(unsigned char *)(v20 + 23))
  {
    goto LABEL_20;
  }
  this = (std::string *)((char *)v3 + 88);
  uint64_t v21 = (uint64_t *)v3[3].__r_.__value_.__r.__words[2];
  if (v21 != (uint64_t *)v20)
  {
    if (v21 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[3].__r_.__value_.__r.__words[2], (const std::string *)v20);
  }
LABEL_20:
  uint64_t v22 = *((void *)a2 + 12);
  if (*(char *)(v22 + 23) < 0)
  {
    if (!*(void *)(v22 + 8)) {
      goto LABEL_28;
    }
  }
  else if (!*(unsigned char *)(v22 + 23))
  {
    goto LABEL_28;
  }
  this = v3 + 4;
  std::string::pointer data = (uint64_t *)v3[4].__r_.__value_.__l.__data_;
  if (data != (uint64_t *)v22)
  {
    if (data == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[4].__r_.__value_.__l.__data_, (const std::string *)v22);
  }
LABEL_28:
  if (a2 != (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_
    && *((void *)a2 + 13))
  {
    if (!v3[4].__r_.__value_.__l.__size_) {
      operator new();
    }
    uint64_t v24 = (const CoreML::Specification::Metadata *)*((void *)a2 + 13);
    uint64_t v25 = (CoreML::Specification::Metadata *)v3[4].__r_.__value_.__l.__size_;
    return CoreML::Specification::Metadata::MergeFrom(v25, v24);
  }
  return this;
}

void sub_224366E54(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4012F24C1ELL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::ModelDescription::IsInitialized(CoreML::Specification::ModelDescription *this)
{
  return 1;
}

void *CoreML::Specification::ModelDescription::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.ModelDescription");
}

CoreML::Specification::SerializedModel *CoreML::Specification::SerializedModel::SerializedModel(CoreML::Specification::SerializedModel *this)
{
  *(void *)this = &unk_26D77A5D8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::SerializedModel *)&CoreML::Specification::_SerializedModel_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_224366EFC(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::SerializedModel::~SerializedModel(CoreML::Specification::SerializedModel *this)
{
  *(void *)this = &unk_26D77A5D8;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;
  uint64_t vars8;

  *(void *)this = &unk_26D77A5D8;
  uint64_t v1 = (uint64_t *)((char *)this + 8);
  CoreML::Specification::CoreMLModels::WordEmbedding::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224367024(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::SerializedModel>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>);
  }
  return result;
}

uint64_t CoreML::Specification::SerializedModel::Clear(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *(void *)(this + 24);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  return this;
}

BOOL CoreML::Specification::SerializedModel::MergePartialFromCodedStream(CoreML::Specification::SerializedModel *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (std::string **)((char *)this + 24);
  unsigned int v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v7 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_8;
        }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_24;
        }
LABEL_8:
        if (v8 >> 3 != 2) {
          break;
        }
        if (v8 != 18) {
          goto LABEL_24;
        }
        if (*v4 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v4)) {
          return 0;
        }
      }
      if (v8 >> 3 != 1 || v8 != 10) {
        break;
      }
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v5);
      if (!result) {
        return result;
      }
      int v12 = *v5;
      if (SHIBYTE((*v5)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v12 = (std::string *)v12->__r_.__value_.__r.__words[0];
        std::string::size_type size = (const char *)(*v5)->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = (const char *)HIBYTE((*v5)->__r_.__value_.__r.__words[2]);
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v12, size, 0, (uint64_t)"CoreML.Specification.SerializedModel.identifier"))return 0; {
    }
      }
LABEL_24:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::SerializedModel::SerializeWithCachedSizes(CoreML::Specification::SerializedModel *this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t result = *((void *)this + 2);
  if (*(char *)(result + 23) < 0)
  {
    unsigned int v5 = *(const char **)(result + 8);
    if (!v5) {
      goto LABEL_7;
    }
    uint64_t result = *(void *)result;
    goto LABEL_6;
  }
  unsigned int v5 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_6:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v5, 1, (uint64_t)"CoreML.Specification.SerializedModel.identifier");
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, *((void *)this + 2), a2);
  }
LABEL_7:
  uint64_t v6 = *((void *)this + 3);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    return result;
  }
  return _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(2, v6, a2);
}

uint64_t CoreML::Specification::SerializedModel::ByteSizeLong(CoreML::Specification::SerializedModel *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(void *)(v1 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = v2;
  }
  uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v6;
  }
  v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::SerializedModel::IsInitialized(CoreML::Specification::SerializedModel *this)
{
  return 1;
}

void *CoreML::Specification::SerializedModel::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.SerializedModel");
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this)
{
  *(void *)this = &unk_26D77A670;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_) {
    CoreML::Specification::protobuf_Model_2eproto::InitDefaults(this);
  }
  *(void *)((char *)this + 21) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_22436741C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Model *CoreML::Specification::Model::Model(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  *(void *)this = &unk_26D77A670;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 10) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  if (a2 != (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    && *((void *)a2 + 2) != 0)
  {
    operator new();
  }
  *((void *)this + 2) = 0;
  int v6 = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = *((unsigned char *)a2 + 28);
  *((_DWORD *)this + 6) = v6;
  *((_DWORD *)this + 11) = 0;
  int v7 = *((_DWORD *)a2 + 11);
  if (v7 > 599)
  {
    if (v7 > 899)
    {
      switch(v7)
      {
        case 2000:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2000;
          operator new();
        case 2001:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2001;
          operator new();
        case 2002:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2002;
          operator new();
        case 2003:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2003;
          operator new();
        case 2004:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2004;
          operator new();
        case 2005:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2005;
          operator new();
        case 2006:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2006;
          operator new();
        default:
          if (v7 == 900)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 900;
            operator new();
          }
          if (v7 == 3000)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            operator new();
          }
          return result;
      }
    }
    else
    {
      switch(v7)
      {
        case 600:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 600;
          operator new();
        case 601:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 601;
          operator new();
        case 602:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 602;
          operator new();
        case 603:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 603;
          operator new();
        case 604:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 604;
          operator new();
        case 606:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 606;
          operator new();
        case 607:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 607;
          operator new();
        case 609:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 609;
          operator new();
        case 610:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 610;
          operator new();
        default:
          return this;
      }
    }
  }
  else if (v7 <= 399)
  {
    if (v7 <= 299)
    {
      switch(v7)
      {
        case 200:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 200;
          operator new();
        case 201:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 201;
          operator new();
        case 202:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 202;
          operator new();
      }
    }
    else
    {
      switch(v7)
      {
        case 300:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 300;
          operator new();
        case 301:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 301;
          operator new();
        case 302:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 302;
          operator new();
        case 303:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 303;
          operator new();
        case 304:
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 304;
          operator new();
        default:
          return this;
      }
    }
  }
  else if (v7 > 499)
  {
    if (v7 <= 501)
    {
      if (v7 != 500)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 501;
        operator new();
      }
      CoreML::Specification::Model::clear_Type((uint64_t)this);
      *((_DWORD *)this + 11) = 500;
      operator new();
    }
    switch(v7)
    {
      case 502:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 502;
        operator new();
      case 555:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 555;
        operator new();
      case 556:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 556;
        operator new();
    }
  }
  else
  {
    switch(v7)
    {
      case 400:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 400;
        operator new();
      case 401:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 401;
        operator new();
      case 402:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 402;
        operator new();
      case 403:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 403;
        operator new();
      case 404:
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 404;
        operator new();
      default:
        return this;
    }
  }
  return this;
}

void sub_22436832C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C40280AC348);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Model::~Model(CoreML::Specification::Model *this)
{
  *(void *)this = &unk_26D77A670;
  CoreML::Specification::Model::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Model::~Model(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::Model::SharedDtor(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_Model_default_instance_)
  {
    this = (uint64_t *)this[2];
    if (this) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
  }
  if (*(_DWORD *)(v1 + 44))
  {
    return (uint64_t *)CoreML::Specification::Model::clear_Type(v1);
  }
  return this;
}

uint64_t CoreML::Specification::Model::clear_Type(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 44);
  if (v2 > 599)
  {
    if (v2 > 899)
    {
      switch(v2)
      {
        case 2000:
        case 2001:
        case 2002:
        case 2003:
        case 2004:
        case 2005:
        case 2006:
          goto LABEL_10;
        default:
          if (v2 == 900 || v2 == 3000) {
            goto LABEL_10;
          }
          break;
      }
    }
    else
    {
      switch(v2)
      {
        case 600:
        case 601:
        case 602:
        case 603:
        case 604:
        case 606:
        case 607:
        case 609:
        case 610:
          goto LABEL_10;
        default:
          break;
      }
    }
  }
  else
  {
    if (v2 > 399)
    {
      if (v2 <= 499)
      {
        switch(v2)
        {
          case 400:
          case 401:
          case 402:
          case 403:
          case 404:
            goto LABEL_10;
          default:
            goto LABEL_12;
        }
        goto LABEL_12;
      }
      if (v2 > 502 && v2 != 555 && v2 != 556) {
        goto LABEL_12;
      }
LABEL_10:
      this = *(void *)(this + 32);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      goto LABEL_12;
    }
    if (v2 <= 299)
    {
      if (v2 != 200 && v2 != 201 && v2 != 202) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
    switch(v2)
    {
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
        goto LABEL_10;
      default:
        break;
    }
  }
LABEL_12:
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

void CoreML::Specification::Model::New(CoreML::Specification::Model *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224368998(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Model>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>);
  }
  return result;
}

uint64_t CoreML::Specification::Model::Clear(CoreML::Specification::Model *this)
{
  uint64_t v3 = (void *)((char *)this + 16);
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)((char *)v3 + 5) = 0;
  void *v3 = 0;
  return CoreML::Specification::Model::clear_Type((uint64_t)this);
}

uint64_t CoreML::Specification::Model::MergePartialFromCodedStream(CoreML::Specification::Model *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
LABEL_1:
    uint64_t v5 = *(unsigned __int8 **)a2;
    unint64_t v6 = *((void *)a2 + 1);
    if (*(void *)a2 >= v6)
    {
      uint64_t v8 = 0;
    }
    else
    {
      int v7 = v5 + 1;
      uint64_t v8 = *v5;
      if ((char)*v5 >= 1)
      {
        *(void *)a2 = v7;
        unint64_t v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_16;
      }
      if ((unint64_t)v7 < v6)
      {
        int v10 = *v7;
        if ((v8 & ~v10) >= 0x80)
        {
          *(void *)a2 = v5 + 2;
          unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
          goto LABEL_16;
        }
      }
    }
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
    unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x5DC2) << 32);
    if ((v9 & 0x100000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    unsigned int v13 = v9 >> 3;
    if (v9 >> 3 > 0x22A) {
      break;
    }
    if (v9 >> 3 > 0x18F)
    {
      if (v9 >> 3 <= 0x1F3)
      {
        switch(v13)
        {
          case 0x190u:
            if (v9 != 130) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 400)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 400;
              operator new();
            }
            uint64_t v17 = (CoreML::Specification::GLMClassifier *)*((void *)this + 4);
            unint64_t v79 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v79 < 0)
            {
              int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (VarintSizeAsIntFallback < 0) {
                return 0;
              }
            }
            else
            {
              int VarintSizeAsIntFallback = *v79;
              *(void *)a2 = v79 + 1;
            }
            unint64_t v156 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
            if ((v156 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v156;
            uint64_t result = CoreML::Specification::GLMClassifier::MergePartialFromCodedStream(v17, a2, v157);
            if (!result) {
              return result;
            }
            goto LABEL_454;
          case 0x191u:
            if (v9 != 138) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 401)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 401;
              operator new();
            }
            unint64_t v44 = (CoreML::Specification::SupportVectorClassifier *)*((void *)this + 4);
            unsigned int v97 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v97 < 0)
            {
              int v98 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v98 < 0) {
                return 0;
              }
            }
            else
            {
              int v98 = *v97;
              *(void *)a2 = v97 + 1;
            }
            unint64_t v174 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v98);
            if ((v174 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v174;
            uint64_t result = CoreML::Specification::SupportVectorClassifier::MergePartialFromCodedStream(v44, a2, v175);
            if (!result) {
              return result;
            }
            goto LABEL_454;
          case 0x192u:
            if (v9 != 146) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 402)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 402;
              operator new();
            }
            long long v45 = (CoreML::Specification::TreeEnsembleClassifier *)*((void *)this + 4);
            std::string v99 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v99 < 0)
            {
              int v100 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v100 < 0) {
                return 0;
              }
            }
            else
            {
              int v100 = *v99;
              *(void *)a2 = v99 + 1;
            }
            unint64_t v176 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v100);
            if ((v176 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v176;
            uint64_t result = CoreML::Specification::TreeEnsembleClassifier::MergePartialFromCodedStream(v45, a2, v177);
            if (!result) {
              return result;
            }
            goto LABEL_454;
          case 0x193u:
            if (v9 != 154) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 403)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 403;
              operator new();
            }
            char v46 = (CoreML::Specification::NeuralNetworkClassifier *)*((void *)this + 4);
            v101 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v101 < 0)
            {
              int v102 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v102 < 0) {
                return 0;
              }
            }
            else
            {
              int v102 = *v101;
              *(void *)a2 = v101 + 1;
            }
            unint64_t v178 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v102);
            if ((v178 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v178;
            uint64_t result = CoreML::Specification::NeuralNetworkClassifier::MergePartialFromCodedStream(v46, a2, v179);
            if (!result) {
              return result;
            }
            goto LABEL_454;
          case 0x194u:
            if (v9 != 162) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 404)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 404;
              operator new();
            }
            uint64_t v47 = (CoreML::Specification::KNearestNeighborsClassifier *)*((void *)this + 4);
            uint64_t v103 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v103 < 0)
            {
              int v104 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v104 < 0) {
                return 0;
              }
            }
            else
            {
              int v104 = *v103;
              *(void *)a2 = v103 + 1;
            }
            unint64_t v180 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v104);
            if ((v180 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v180;
            uint64_t result = CoreML::Specification::KNearestNeighborsClassifier::MergePartialFromCodedStream(v47, a2, v181);
            if (!result) {
              return result;
            }
            goto LABEL_454;
          default:
            goto LABEL_8;
        }
      }
      if (v13 == 500)
      {
        if (v9 == 162)
        {
          if (*((_DWORD *)this + 11) != 500)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 500;
            operator new();
          }
          __n128 v48 = (CoreML::Specification::NeuralNetwork *)*((void *)this + 4);
          unint64_t v105 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v105 < 0)
          {
            int v106 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v106 < 0) {
              return 0;
            }
          }
          else
          {
            int v106 = *v105;
            *(void *)a2 = v105 + 1;
          }
          unint64_t v182 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v106);
          if ((v182 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v118 = v182;
          uint64_t result = CoreML::Specification::NeuralNetwork::MergePartialFromCodedStream(v48, (char **)a2, v183);
          if (!result) {
            return result;
          }
          goto LABEL_454;
        }
      }
      else if (v13 == 501)
      {
        if (v9 == 170)
        {
          if (*((_DWORD *)this + 11) != 501)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 501;
            operator new();
          }
          __n128 v49 = (CoreML::Specification::ItemSimilarityRecommender *)*((void *)this + 4);
          char v107 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v107 < 0)
          {
            int v108 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v108 < 0) {
              return 0;
            }
          }
          else
          {
            int v108 = *v107;
            *(void *)a2 = v107 + 1;
          }
          unint64_t v184 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v108);
          if ((v184 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v118 = v184;
          uint64_t result = CoreML::Specification::ItemSimilarityRecommender::MergePartialFromCodedStream(v49, a2, v185);
          if (!result) {
            return result;
          }
          goto LABEL_454;
        }
      }
      else if (v13 == 502 && v9 == 178)
      {
        if (*((_DWORD *)this + 11) != 502)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 502;
          operator new();
        }
        uint64_t v21 = (CoreML::Specification::V5::Program *)*((void *)this + 4);
        uint64_t v81 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v81 < 0)
        {
          int v82 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v82 < 0) {
            return 0;
          }
        }
        else
        {
          int v82 = *v81;
          *(void *)a2 = v81 + 1;
        }
        unint64_t v158 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v82);
        if ((v158 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v158;
        uint64_t result = CoreML::Specification::V5::Program::MergePartialFromCodedStream(v21, (char **)a2, v159);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      }
      goto LABEL_8;
    }
    if (v9 >> 3 <= 0xC8)
    {
      if (v9 >> 3 > 9)
      {
        if (v13 != 10)
        {
          if (v13 == 200 && v9 == 66)
          {
            if (*((_DWORD *)this + 11) != 200)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 200;
              operator new();
            }
            uint64_t v22 = (CoreML::Specification::PipelineClassifier *)*((void *)this + 4);
            uint64_t v57 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v57 < 0)
            {
              int v58 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v58 < 0) {
                return 0;
              }
            }
            else
            {
              int v58 = *v57;
              *(void *)a2 = v57 + 1;
            }
            unint64_t v120 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v58);
            if ((v120 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v120;
            uint64_t result = CoreML::Specification::PipelineClassifier::MergePartialFromCodedStream(v22, (char **)a2, v121);
            if (!result) {
              return result;
            }
            goto LABEL_454;
          }
          goto LABEL_8;
        }
        if (v9 != 80) {
          goto LABEL_8;
        }
        int v28 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v28 < 0)
        {
          Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v115 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          Varint64Fallbacint k = *v28;
          *(void *)a2 = v28 + 1;
        }
        *((unsigned char *)this + 28) = Varint64Fallback != 0;
      }
      else
      {
        if (v13 != 1)
        {
          if (v13 == 2 && v9 == 18)
          {
            signed int v18 = (CoreML::Specification::ModelDescription *)*((void *)this + 2);
            if (!v18) {
              operator new();
            }
            uint64_t v19 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v19 < 0)
            {
              int v20 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v20 < 0) {
                return 0;
              }
            }
            else
            {
              int v20 = *v19;
              *(void *)a2 = v19 + 1;
            }
            unint64_t v116 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v20);
            if ((v116 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v116;
            uint64_t result = CoreML::Specification::ModelDescription::MergePartialFromCodedStream(v18, a2, v117);
            if (!result) {
              return result;
            }
            goto LABEL_454;
          }
          goto LABEL_8;
        }
        if (v9 != 8) {
          goto LABEL_8;
        }
        uint64_t v26 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          int v27 = 0;
        }
        else
        {
          int v27 = *v26;
          if ((*v26 & 0x80000000) == 0)
          {
            *(void *)a2 = v26 + 1;
            goto LABEL_458;
          }
        }
        Varint32Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v27);
        int v27 = Varint32Fallback;
        if (Varint32Fallback < 0) {
          return 0;
        }
LABEL_458:
        *((_DWORD *)this + 6) = v27;
      }
    }
    else
    {
      switch(v13)
      {
        case 0x12Cu:
          if (v9 != 98) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 300)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 300;
            operator new();
          }
          unsigned int v15 = (CoreML::Specification::GLMRegressor *)*((void *)this + 4);
          v122 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v122 < 0)
          {
            int v123 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v123 < 0) {
              return 0;
            }
          }
          else
          {
            int v123 = *v122;
            *(void *)a2 = v122 + 1;
          }
          unint64_t v192 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v123);
          if ((v192 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v118 = v192;
          uint64_t result = CoreML::Specification::GLMRegressor::MergePartialFromCodedStream(v15, (char **)a2, v193);
          if (!result) {
            return result;
          }
          break;
        case 0x12Du:
          if (v9 != 106) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 301)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 301;
            operator new();
          }
          __n128 v52 = (CoreML::Specification::SupportVectorRegressor *)*((void *)this + 4);
          atomic_ullong *volatile v126 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v126 < 0)
          {
            int v127 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v127 < 0) {
              return 0;
            }
          }
          else
          {
            int v127 = *v126;
            *(void *)a2 = v126 + 1;
          }
          unint64_t v195 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v127);
          if ((v195 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v118 = v195;
          uint64_t result = CoreML::Specification::SupportVectorRegressor::MergePartialFromCodedStream(v52, (char **)a2, v196);
          if (!result) {
            return result;
          }
          break;
        case 0x12Eu:
          if (v9 != 114) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 302)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 302;
            operator new();
          }
          uint64_t v53 = (CoreML::Specification::TreeEnsembleRegressor *)*((void *)this + 4);
          atomic_ullong *volatile v128 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v128 < 0)
          {
            int v129 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v129 < 0) {
              return 0;
            }
          }
          else
          {
            int v129 = *v128;
            *(void *)a2 = v128 + 1;
          }
          unint64_t v197 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v129);
          if ((v197 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v118 = v197;
          uint64_t result = CoreML::Specification::TreeEnsembleRegressor::MergePartialFromCodedStream(v53, (char **)a2, v198);
          if (!result) {
            return result;
          }
          break;
        case 0x12Fu:
          if (v9 != 122) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 303)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 303;
            operator new();
          }
          unint64_t v54 = (CoreML::Specification::NeuralNetworkRegressor *)*((void *)this + 4);
          unsigned int v130 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v130 < 0)
          {
            int v131 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v131 < 0) {
              return 0;
            }
          }
          else
          {
            int v131 = *v130;
            *(void *)a2 = v130 + 1;
          }
          unint64_t v199 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v131);
          if ((v199 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v118 = v199;
          uint64_t result = CoreML::Specification::NeuralNetworkRegressor::MergePartialFromCodedStream(v54, (char **)a2, v200);
          if (!result) {
            return result;
          }
          break;
        case 0x130u:
          if (v9 != 130) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 11) != 304)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 304;
            operator new();
          }
          __n128 v55 = (CoreML::Specification::BayesianProbitRegressor *)*((void *)this + 4);
          v132 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v132 < 0)
          {
            int v133 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v133 < 0) {
              return 0;
            }
          }
          else
          {
            int v133 = *v132;
            *(void *)a2 = v132 + 1;
          }
          unint64_t v201 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v133);
          if ((v201 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v118 = v201;
          uint64_t result = CoreML::Specification::BayesianProbitRegressor::MergePartialFromCodedStream(v55, a2, v202);
          if (!result) {
            return result;
          }
          break;
        default:
          if (v13 == 201)
          {
            if (v9 != 74) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 201)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 201;
              operator new();
            }
            uint64_t v56 = (CoreML::Specification::PipelineRegressor *)*((void *)this + 4);
            v134 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v134 < 0)
            {
              int v135 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v135 < 0) {
                return 0;
              }
            }
            else
            {
              int v135 = *v134;
              *(void *)a2 = v134 + 1;
            }
            unint64_t v203 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v135);
            if ((v203 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v203;
            uint64_t result = CoreML::Specification::PipelineRegressor::MergePartialFromCodedStream(v56, (char **)a2, v204);
            if (!result) {
              return result;
            }
          }
          else
          {
            if (v13 != 202 || v9 != 82) {
              goto LABEL_8;
            }
            if (*((_DWORD *)this + 11) != 202)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 202;
              operator new();
            }
            uint64_t v25 = (CoreML::Specification::Pipeline *)*((void *)this + 4);
            atomic_ullong *volatile v124 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v124 < 0)
            {
              int v125 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v125 < 0) {
                return 0;
              }
            }
            else
            {
              int v125 = *v124;
              *(void *)a2 = v124 + 1;
            }
            unint64_t v194 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v125);
            if ((v194 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v194;
            uint64_t result = CoreML::Specification::Pipeline::MergePartialFromCodedStream(v25, a2);
            if (!result) {
              return result;
            }
          }
          break;
      }
LABEL_454:
      if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v118)) {
        return 0;
      }
    }
  }
  if (v9 >> 3 > 0x383)
  {
    switch(v13)
    {
      case 0x7D0u:
        if (v9 != 130) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 2000)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2000;
          operator new();
        }
        uint64_t v16 = (CoreML::Specification::CoreMLModels::TextClassifier *)*((void *)this + 4);
        unint64_t v77 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v77 < 0)
        {
          int v78 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v78 < 0) {
            return 0;
          }
        }
        else
        {
          int v78 = *v77;
          *(void *)a2 = v77 + 1;
        }
        unint64_t v154 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v78);
        if ((v154 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v154;
        uint64_t result = CoreML::Specification::CoreMLModels::TextClassifier::MergePartialFromCodedStream(v16, a2, v155);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      case 0x7D1u:
        if (v9 != 138) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 2001)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2001;
          operator new();
        }
        uint64_t v38 = (CoreML::Specification::CoreMLModels::WordTagger *)*((void *)this + 4);
        uint64_t v85 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v85 < 0)
        {
          int v86 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v86 < 0) {
            return 0;
          }
        }
        else
        {
          int v86 = *v85;
          *(void *)a2 = v85 + 1;
        }
        unint64_t v162 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v86);
        if ((v162 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v162;
        uint64_t result = CoreML::Specification::CoreMLModels::WordTagger::MergePartialFromCodedStream(v38, a2, v163);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      case 0x7D2u:
        if (v9 != 146) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 2002)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2002;
          operator new();
        }
        uint64_t v39 = (CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((void *)this + 4);
        pthread_mutex_t v87 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v87 < 0)
        {
          int v88 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v88 < 0) {
            return 0;
          }
        }
        else
        {
          int v88 = *v87;
          *(void *)a2 = v87 + 1;
        }
        unint64_t v164 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v88);
        if ((v164 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v164;
        uint64_t result = CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergePartialFromCodedStream(v39, a2, v165);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      case 0x7D3u:
        if (v9 != 154) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 2003)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2003;
          operator new();
        }
        uint64_t v40 = (CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((void *)this + 4);
        unint64_t v89 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v89 < 0)
        {
          int v90 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v90 < 0) {
            return 0;
          }
        }
        else
        {
          int v90 = *v89;
          *(void *)a2 = v89 + 1;
        }
        unint64_t v166 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v90);
        if ((v166 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v166;
        uint64_t result = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergePartialFromCodedStream(v40, a2, v167);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      case 0x7D4u:
        if (v9 != 162) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 2004)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2004;
          operator new();
        }
        uint64_t v41 = (CoreML::Specification::CoreMLModels::Gazetteer *)*((void *)this + 4);
        std::string v91 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v91 < 0)
        {
          int v92 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v92 < 0) {
            return 0;
          }
        }
        else
        {
          int v92 = *v91;
          *(void *)a2 = v91 + 1;
        }
        unint64_t v168 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v92);
        if ((v168 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v168;
        uint64_t result = CoreML::Specification::CoreMLModels::Gazetteer::MergePartialFromCodedStream(v41, a2, v169);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      case 0x7D5u:
        if (v9 != 170) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 2005)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2005;
          operator new();
        }
        unsigned int v42 = (CoreML::Specification::CoreMLModels::WordEmbedding *)*((void *)this + 4);
        std::string v93 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v93 < 0)
        {
          int v94 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v94 < 0) {
            return 0;
          }
        }
        else
        {
          int v94 = *v93;
          *(void *)a2 = v93 + 1;
        }
        unint64_t v170 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v94);
        if ((v170 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v170;
        uint64_t result = CoreML::Specification::CoreMLModels::WordEmbedding::MergePartialFromCodedStream(v42, a2, v171);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      case 0x7D6u:
        if (v9 != 178) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 2006)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 2006;
          operator new();
        }
        uint64_t v43 = (CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((void *)this + 4);
        unint64_t v95 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v95 < 0)
        {
          int v96 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v96 < 0) {
            return 0;
          }
        }
        else
        {
          int v96 = *v95;
          *(void *)a2 = v95 + 1;
        }
        unint64_t v172 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v96);
        if ((v172 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v172;
        uint64_t result = CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergePartialFromCodedStream(v43, a2, v173);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      default:
        if (v13 == 900)
        {
          if (v9 == 34)
          {
            if (*((_DWORD *)this + 11) != 900)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 900;
              operator new();
            }
            uint64_t v50 = (CoreML::Specification::Identity *)*((void *)this + 4);
            __n128 v109 = *(char **)a2;
            if (*(void *)a2 >= *((void *)a2 + 1) || *v109 < 0)
            {
              int v110 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
              if (v110 < 0) {
                return 0;
              }
            }
            else
            {
              int v110 = *v109;
              *(void *)a2 = v109 + 1;
            }
            unint64_t v186 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v110);
            if ((v186 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v118 = v186;
            uint64_t result = CoreML::Specification::Identity::MergePartialFromCodedStream(v50, (char **)a2, v187);
            if (!result) {
              return result;
            }
            goto LABEL_454;
          }
        }
        else if (v13 == 3000 && v9 == 194)
        {
          if (*((_DWORD *)this + 11) != 3000)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 3000;
            operator new();
          }
          uint64_t v23 = (CoreML::Specification::SerializedModel *)*((void *)this + 4);
          unint64_t v83 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v83 < 0)
          {
            int v84 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (v84 < 0) {
              return 0;
            }
          }
          else
          {
            int v84 = *v83;
            *(void *)a2 = v83 + 1;
          }
          unint64_t v160 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v84);
          if ((v160 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v118 = v160;
          uint64_t result = CoreML::Specification::SerializedModel::MergePartialFromCodedStream(v23, (char **)a2, v161);
          if (!result) {
            return result;
          }
          goto LABEL_454;
        }
        break;
    }
    goto LABEL_8;
  }
  switch(v13)
  {
    case 0x258u:
      if (v9 != 194) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 600)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 600;
        operator new();
      }
      uint64_t v14 = (CoreML::Specification::OneHotEncoder *)*((void *)this + 4);
      __n128 v59 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v59 < 0)
      {
        int v60 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v60 < 0) {
          return 0;
        }
      }
      else
      {
        int v60 = *v59;
        *(void *)a2 = v59 + 1;
      }
      unint64_t v136 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v60);
      if ((v136 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v136;
      uint64_t result = CoreML::Specification::OneHotEncoder::MergePartialFromCodedStream(v14, (char **)a2, v137);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    case 0x259u:
      if (v9 != 202) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 601)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 601;
        operator new();
      }
      unsigned int v30 = (CoreML::Specification::Imputer *)*((void *)this + 4);
      uint64_t v61 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v61 < 0)
      {
        int v62 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v62 < 0) {
          return 0;
        }
      }
      else
      {
        int v62 = *v61;
        *(void *)a2 = v61 + 1;
      }
      unint64_t v138 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v62);
      if ((v138 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v138;
      uint64_t result = CoreML::Specification::Imputer::MergePartialFromCodedStream(v30, (char **)a2, v139);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    case 0x25Au:
      if (v9 != 210) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 602)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 602;
        operator new();
      }
      int v31 = (CoreML::Specification::FeatureVectorizer *)*((void *)this + 4);
      uint64_t v63 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v63 < 0)
      {
        int v64 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v64 < 0) {
          return 0;
        }
      }
      else
      {
        int v64 = *v63;
        *(void *)a2 = v63 + 1;
      }
      unint64_t v140 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v64);
      if ((v140 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v140;
      uint64_t result = CoreML::Specification::FeatureVectorizer::MergePartialFromCodedStream(v31, (char **)a2, v141);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    case 0x25Bu:
      if (v9 != 218) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 603)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 603;
        operator new();
      }
      unint64_t v32 = (CoreML::Specification::DictVectorizer *)*((void *)this + 4);
      unint64_t v65 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v65 < 0)
      {
        int v66 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v66 < 0) {
          return 0;
        }
      }
      else
      {
        int v66 = *v65;
        *(void *)a2 = v65 + 1;
      }
      unint64_t v142 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v66);
      if ((v142 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v142;
      uint64_t result = CoreML::Specification::DictVectorizer::MergePartialFromCodedStream(v32, (char **)a2, v143);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    case 0x25Cu:
      if (v9 != 226) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 604)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 604;
        operator new();
      }
      unsigned int v33 = (CoreML::Specification::Scaler *)*((void *)this + 4);
      uint64_t v67 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v67 < 0)
      {
        int v68 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v68 < 0) {
          return 0;
        }
      }
      else
      {
        int v68 = *v67;
        *(void *)a2 = v67 + 1;
      }
      unint64_t v144 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v68);
      if ((v144 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v144;
      uint64_t result = CoreML::Specification::Scaler::MergePartialFromCodedStream(v33, (char **)a2, v145);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    case 0x25Du:
    case 0x260u:
      goto LABEL_8;
    case 0x25Eu:
      if (v9 != 242) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 606)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 606;
        operator new();
      }
      std::string v34 = (CoreML::Specification::CategoricalMapping *)*((void *)this + 4);
      uint64_t v69 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v69 < 0)
      {
        int v70 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v70 < 0) {
          return 0;
        }
      }
      else
      {
        int v70 = *v69;
        *(void *)a2 = v69 + 1;
      }
      unint64_t v146 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v70);
      if ((v146 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v146;
      uint64_t result = CoreML::Specification::CategoricalMapping::MergePartialFromCodedStream(v34, a2, v147);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    case 0x25Fu:
      if (v9 != 250) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 607)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 607;
        operator new();
      }
      atomic_ullong *volatile v35 = (CoreML::Specification::Normalizer *)*((void *)this + 4);
      uint64_t v71 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v71 < 0)
      {
        int v72 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v72 < 0) {
          return 0;
        }
      }
      else
      {
        int v72 = *v71;
        *(void *)a2 = v71 + 1;
      }
      unint64_t v148 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v72);
      if ((v148 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v148;
      uint64_t result = CoreML::Specification::Normalizer::MergePartialFromCodedStream(v35, (char **)a2, v149);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    case 0x261u:
      if (v9 != 10) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 609)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 609;
        operator new();
      }
      uint64_t v36 = (CoreML::Specification::ArrayFeatureExtractor *)*((void *)this + 4);
      uint64_t v73 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v73 < 0)
      {
        int v74 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v74 < 0) {
          return 0;
        }
      }
      else
      {
        int v74 = *v73;
        *(void *)a2 = v73 + 1;
      }
      unint64_t v150 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v74);
      if ((v150 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v150;
      uint64_t result = CoreML::Specification::ArrayFeatureExtractor::MergePartialFromCodedStream(v36, (char **)a2, v151);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    case 0x262u:
      if (v9 != 18) {
        goto LABEL_8;
      }
      if (*((_DWORD *)this + 11) != 610)
      {
        CoreML::Specification::Model::clear_Type((uint64_t)this);
        *((_DWORD *)this + 11) = 610;
        operator new();
      }
      uint64_t v37 = (CoreML::Specification::NonMaximumSuppression *)*((void *)this + 4);
      unint64_t v75 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1) || *v75 < 0)
      {
        int v76 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
        if (v76 < 0) {
          return 0;
        }
      }
      else
      {
        int v76 = *v75;
        *(void *)a2 = v75 + 1;
      }
      unint64_t v152 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v76);
      if ((v152 & 0x8000000000000000) != 0) {
        return 0;
      }
      int v118 = v152;
      uint64_t result = CoreML::Specification::NonMaximumSuppression::MergePartialFromCodedStream(v37, a2, v153);
      if (!result) {
        return result;
      }
      goto LABEL_454;
    default:
      if (v13 == 555)
      {
        if (v9 != 90) {
          goto LABEL_8;
        }
        if (*((_DWORD *)this + 11) != 555)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 555;
          operator new();
        }
        __n128 v51 = (CoreML::Specification::CustomModel *)*((void *)this + 4);
        __n128 v113 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v113 < 0)
        {
          int v114 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v114 < 0) {
            return 0;
          }
        }
        else
        {
          int v114 = *v113;
          *(void *)a2 = v113 + 1;
        }
        unint64_t v190 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v114);
        if ((v190 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v190;
        uint64_t result = CoreML::Specification::CustomModel::MergePartialFromCodedStream(v51, a2, v191);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      }
      if (v13 == 556 && v9 == 98)
      {
        if (*((_DWORD *)this + 11) != 556)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 556;
          operator new();
        }
        uint64_t v24 = (CoreML::Specification::LinkedModel *)*((void *)this + 4);
        unint64_t v111 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v111 < 0)
        {
          int v112 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (v112 < 0) {
            return 0;
          }
        }
        else
        {
          int v112 = *v111;
          *(void *)a2 = v111 + 1;
        }
        unint64_t v188 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v112);
        if ((v188 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v118 = v188;
        uint64_t result = CoreML::Specification::LinkedModel::MergePartialFromCodedStream(v24, (char **)a2, v189);
        if (!result) {
          return result;
        }
        goto LABEL_454;
      }
LABEL_8:
      if (v9) {
        BOOL v11 = (v9 & 7) == 4;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
        goto LABEL_1;
        }
      }
      return 1;
  }
}

void sub_22436A5F0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Model::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  signed int v6 = *(_DWORD *)(this + 24);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(1, v6, a2, a4);
  }
  if ((uint64_t *)v5 != &CoreML::Specification::_Model_default_instance_)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    if (v7) {
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
    }
  }
  if (*(unsigned char *)(v5 + 28)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(10, 1u, a2, a4);
  }
  int v8 = *(_DWORD *)(v5 + 44);
  if (v8 == 200)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 201)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC9, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 202)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xCA, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 300)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x12C, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 301)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x12D, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 302)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x12E, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 303)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x12F, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 304)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x130, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 400)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x190, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 401)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x191, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 402)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x192, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 403)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x193, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 404)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x194, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 500)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F4, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 501)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F5, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 502)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x1F6, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 555)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x22B, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 556)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x22C, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 600)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x258, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 601)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x259, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 602)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25A, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 603)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25B, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 604)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25C, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 606)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25E, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 607)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x25F, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 609)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x261, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 610)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x262, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 900)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x384, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2000)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D0, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2001)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D1, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2002)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D2, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2003)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D3, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2004)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D4, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2005)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D5, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 2006)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x7D6, *(void *)(v5 + 32), a2, a4);
    int v8 = *(_DWORD *)(v5 + 44);
  }
  if (v8 == 3000)
  {
    uint64_t v9 = *(void *)(v5 + 32);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xBB8, v9, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::Model::ByteSizeLong(CoreML::Specification::Model *this)
{
  if (this == (CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_
    || (uint64_t v2 = (CoreML::Specification::ModelDescription *)*((void *)this + 2)) == 0)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = CoreML::Specification::ModelDescription::ByteSizeLong(v2);
    uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  int v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0) {
      uint64_t v6 = 10;
    }
    else {
      uint64_t v6 = (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    }
    v4 += v6 + 1;
  }
  if (*((unsigned char *)this + 28)) {
    uint64_t v7 = v4 + 2;
  }
  else {
    uint64_t v7 = v4;
  }
  int v8 = *((_DWORD *)this + 11);
  if (v8 > 599)
  {
    if (v8 > 899)
    {
      switch(v8)
      {
        case 2000:
          uint64_t v9 = CoreML::Specification::CoreMLModels::TextClassifier::ByteSizeLong(*((CoreML::Specification::CoreMLModels::TextClassifier **)this
                                                                                 + 4));
          goto LABEL_68;
        case 2001:
          uint64_t v9 = CoreML::Specification::CoreMLModels::WordTagger::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordTagger **)this
                                                                             + 4));
          goto LABEL_68;
        case 2002:
          uint64_t v9 = CoreML::Specification::CoreMLModels::VisionFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::VisionFeaturePrint **)this
                                                                                     + 4));
          goto LABEL_68;
        case 2003:
          uint64_t v9 = CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::ByteSizeLong(*((CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing **)this
                                                                                             + 4));
          goto LABEL_68;
        case 2004:
          uint64_t v9 = CoreML::Specification::CoreMLModels::Gazetteer::ByteSizeLong(*((CoreML::Specification::CoreMLModels::Gazetteer **)this
                                                                            + 4));
          goto LABEL_68;
        case 2005:
          uint64_t v9 = CoreML::Specification::CoreMLModels::WordEmbedding::ByteSizeLong(*((CoreML::Specification::CoreMLModels::WordEmbedding **)this
                                                                                + 4));
          goto LABEL_68;
        case 2006:
          uint64_t v9 = CoreML::Specification::CoreMLModels::AudioFeaturePrint::ByteSizeLong(*((CoreML::Specification::CoreMLModels::AudioFeaturePrint **)this
                                                                                    + 4));
          goto LABEL_68;
        default:
          if (v8 == 900)
          {
            uint64_t v9 = CoreML::Specification::Identity::ByteSizeLong(*((CoreML::Specification::Identity **)this + 4));
            goto LABEL_68;
          }
          if (v8 == 3000)
          {
            uint64_t v10 = CoreML::Specification::SerializedModel::ByteSizeLong(*((CoreML::Specification::SerializedModel **)this
                                                                       + 4));
            v7 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 3;
          }
          break;
      }
    }
    else
    {
      switch(v8)
      {
        case 600:
          uint64_t v9 = CoreML::Specification::OneHotEncoder::ByteSizeLong(*((CoreML::Specification::OneHotEncoder **)this + 4));
          goto LABEL_68;
        case 601:
          uint64_t v9 = CoreML::Specification::Imputer::ByteSizeLong(*((CoreML::Specification::Imputer **)this + 4));
          goto LABEL_68;
        case 602:
          uint64_t v9 = CoreML::Specification::FeatureVectorizer::ByteSizeLong(*((CoreML::Specification::FeatureVectorizer **)this
                                                                      + 4));
          goto LABEL_68;
        case 603:
          uint64_t v9 = CoreML::Specification::DictVectorizer::ByteSizeLong(*((CoreML::Specification::DictVectorizer **)this + 4));
          goto LABEL_68;
        case 604:
          uint64_t v9 = CoreML::Specification::Scaler::ByteSizeLong(*((CoreML::Specification::Scaler **)this + 4));
          goto LABEL_68;
        case 606:
          uint64_t v9 = CoreML::Specification::CategoricalMapping::ByteSizeLong(*((CoreML::Specification::CategoricalMapping **)this
                                                                       + 4));
          goto LABEL_68;
        case 607:
          uint64_t v9 = CoreML::Specification::Normalizer::ByteSizeLong(*((CoreML::Specification::Normalizer **)this + 4));
          goto LABEL_68;
        case 609:
          uint64_t v9 = CoreML::Specification::ArrayFeatureExtractor::ByteSizeLong(*((CoreML::Specification::ArrayFeatureExtractor **)this
                                                                          + 4));
          goto LABEL_68;
        case 610:
          uint64_t v9 = CoreML::Specification::NonMaximumSuppression::ByteSizeLong(*((CoreML::Specification::NonMaximumSuppression **)this
                                                                          + 4));
          goto LABEL_68;
        default:
          break;
      }
    }
  }
  else
  {
    if (v8 > 399)
    {
      if (v8 <= 499)
      {
        switch(v8)
        {
          case 400:
            uint64_t v9 = CoreML::Specification::GLMClassifier::ByteSizeLong(*((CoreML::Specification::GLMClassifier **)this + 4));
            goto LABEL_68;
          case 401:
            uint64_t v9 = CoreML::Specification::SupportVectorClassifier::ByteSizeLong(*((CoreML::Specification::SupportVectorClassifier **)this
                                                                              + 4));
            goto LABEL_68;
          case 402:
            uint64_t v9 = CoreML::Specification::TreeEnsembleClassifier::ByteSizeLong(*((CoreML::Specification::TreeEnsembleClassifier **)this
                                                                             + 4));
            goto LABEL_68;
          case 403:
            uint64_t v9 = CoreML::Specification::NeuralNetworkClassifier::ByteSizeLong(*((CoreML::Specification::NeuralNetworkClassifier **)this
                                                                              + 4));
            goto LABEL_68;
          case 404:
            uint64_t v9 = CoreML::Specification::KNearestNeighborsClassifier::ByteSizeLong(*((CoreML::Specification::KNearestNeighborsClassifier **)this
                                                                                  + 4));
            goto LABEL_68;
          default:
            goto LABEL_69;
        }
        goto LABEL_69;
      }
      if (v8 <= 501)
      {
        if (v8 == 500) {
          uint64_t v9 = CoreML::Specification::NeuralNetwork::ByteSizeLong(*((CoreML::Specification::NeuralNetwork **)this + 4));
        }
        else {
          uint64_t v9 = CoreML::Specification::ItemSimilarityRecommender::ByteSizeLong(*((CoreML::Specification::ItemSimilarityRecommender **)this
        }
                                                                              + 4));
      }
      else
      {
        switch(v8)
        {
          case 502:
            uint64_t v9 = CoreML::Specification::V5::Program::ByteSizeLong(*((_tc_google::protobuf::Arena ***)this + 4));
            break;
          case 555:
            uint64_t v9 = CoreML::Specification::CustomModel::ByteSizeLong(*((CoreML::Specification::CustomModel **)this + 4));
            break;
          case 556:
            uint64_t v9 = CoreML::Specification::LinkedModel::ByteSizeLong(*((CoreML::Specification::LinkedModelFile ***)this + 4));
            break;
          default:
            goto LABEL_69;
        }
      }
LABEL_68:
      v7 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
      goto LABEL_69;
    }
    if (v8 <= 299)
    {
      switch(v8)
      {
        case 200:
          uint64_t v9 = (uint64_t)CoreML::Specification::PipelineClassifier::ByteSizeLong(*((CoreML::Specification::PipelineClassifier **)this
                                                                                + 4));
          break;
        case 201:
          uint64_t v9 = (uint64_t)CoreML::Specification::PipelineRegressor::ByteSizeLong(*((CoreML::Specification::PipelineRegressor **)this
                                                                               + 4));
          break;
        case 202:
          uint64_t v9 = CoreML::Specification::Pipeline::ByteSizeLong(*((CoreML::Specification::Pipeline **)this + 4));
          break;
        default:
          goto LABEL_69;
      }
      goto LABEL_68;
    }
    switch(v8)
    {
      case 300:
        uint64_t v9 = CoreML::Specification::GLMRegressor::ByteSizeLong(*((CoreML::Specification::GLMRegressor **)this + 4));
        goto LABEL_68;
      case 301:
        uint64_t v9 = CoreML::Specification::SupportVectorRegressor::ByteSizeLong(*((CoreML::Specification::SupportVectorRegressor **)this
                                                                         + 4));
        goto LABEL_68;
      case 302:
        uint64_t v9 = (uint64_t)CoreML::Specification::TreeEnsembleRegressor::ByteSizeLong(*((CoreML::Specification::TreeEnsembleRegressor **)this
                                                                                 + 4));
        goto LABEL_68;
      case 303:
        uint64_t v9 = CoreML::Specification::NeuralNetworkRegressor::ByteSizeLong(*((CoreML::Specification::NeuralNetworkRegressor **)this
                                                                         + 4));
        goto LABEL_68;
      case 304:
        uint64_t v9 = CoreML::Specification::BayesianProbitRegressor::ByteSizeLong(*((CoreML::Specification::BayesianProbitRegressor **)this
                                                                          + 4));
        goto LABEL_68;
      default:
        break;
    }
  }
LABEL_69:
  *((_DWORD *)this + 10) = v7;
  return v7;
}

void CoreML::Specification::Model::MergeFrom(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::Model *)&CoreML::Specification::_Model_default_instance_ && v5 != 0)
  {
    uint64_t v7 = (std::string *)*((void *)this + 2);
    if (!v7) {
      operator new();
    }
    if (v5) {
      int v8 = (const CoreML::Specification::ModelDescription *)*((void *)a2 + 2);
    }
    else {
      int v8 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
    }
    CoreML::Specification::ModelDescription::MergeFrom(v7, v8);
  }
  int v9 = *((_DWORD *)a2 + 6);
  if (v9) {
    *((_DWORD *)this + 6) = v9;
  }
  if (*((unsigned char *)a2 + 28)) {
    *((unsigned char *)this + 28) = 1;
  }
  int v10 = *((_DWORD *)a2 + 11);
  if (v10 > 599)
  {
    if (v10 > 899)
    {
      switch(v10)
      {
        case 2000:
          if (*((_DWORD *)this + 11) != 2000)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2000;
            operator new();
          }
          uint64_t v21 = (const CoreML::Specification::CoreMLModels::TextClassifier *)*((void *)a2 + 4);
          uint64_t v57 = (std::string *)*((void *)this + 4);
          CoreML::Specification::CoreMLModels::TextClassifier::MergeFrom(v57, v21);
          break;
        case 2001:
          if (*((_DWORD *)this + 11) != 2001)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2001;
            operator new();
          }
          int v31 = (const CoreML::Specification::CoreMLModels::WordTagger *)*((void *)a2 + 4);
          uint64_t v67 = (std::string *)*((void *)this + 4);
          CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(v67, v31);
          break;
        case 2002:
          if (*((_DWORD *)this + 11) != 2002)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2002;
            operator new();
          }
          unint64_t v32 = (const CoreML::Specification::CoreMLModels::VisionFeaturePrint *)*((void *)a2 + 4);
          int v68 = (std::string *)*((void *)this + 4);
          CoreML::Specification::CoreMLModels::VisionFeaturePrint::MergeFrom(v68, v32);
          break;
        case 2003:
          if (*((_DWORD *)this + 11) != 2003)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2003;
            operator new();
          }
          unsigned int v33 = (const CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing *)*((void *)a2 + 4);
          uint64_t v69 = (std::string *)*((void *)this + 4);
          CoreML::Specification::CoreMLModels::SoundAnalysisPreprocessing::MergeFrom(v69, v33);
          break;
        case 2004:
          if (*((_DWORD *)this + 11) != 2004)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2004;
            operator new();
          }
          std::string v34 = (const CoreML::Specification::CoreMLModels::Gazetteer *)*((void *)a2 + 4);
          int v70 = (std::string *)*((void *)this + 4);
          CoreML::Specification::CoreMLModels::Gazetteer::MergeFrom(v70, v34);
          break;
        case 2005:
          if (*((_DWORD *)this + 11) != 2005)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2005;
            operator new();
          }
          atomic_ullong *volatile v35 = (const CoreML::Specification::CoreMLModels::WordEmbedding *)*((void *)a2 + 4);
          uint64_t v71 = (std::string *)*((void *)this + 4);
          CoreML::Specification::CoreMLModels::WordEmbedding::MergeFrom(v71, v35);
          break;
        case 2006:
          if (*((_DWORD *)this + 11) != 2006)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 2006;
            operator new();
          }
          char v46 = (const CoreML::Specification::CoreMLModels::AudioFeaturePrint *)*((void *)a2 + 4);
          int v82 = (std::string *)*((void *)this + 4);
          CoreML::Specification::CoreMLModels::AudioFeaturePrint::MergeFrom(v82, v46);
          break;
        default:
          if (v10 == 900)
          {
            if (*((_DWORD *)this + 11) != 900)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 900;
              operator new();
            }
            unint64_t v44 = (const CoreML::Specification::Identity *)*((void *)a2 + 4);
            unint64_t v80 = (std::string *)*((void *)this + 4);
            CoreML::Specification::Identity::MergeFrom(v80, v44);
          }
          else if (v10 == 3000)
          {
            if (*((_DWORD *)this + 11) != 3000)
            {
              CoreML::Specification::Model::clear_Type((uint64_t)this);
              *((_DWORD *)this + 11) = 3000;
              operator new();
            }
            uint64_t v25 = (const CoreML::Specification::CategoricalCrossEntropyLossLayer *)*((void *)a2 + 4);
            uint64_t v61 = (std::string *)*((void *)this + 4);
            CoreML::Specification::CategoricalCrossEntropyLossLayer::MergeFrom(v61, v25);
          }
          break;
      }
    }
    else
    {
      switch(v10)
      {
        case 600:
          if (*((_DWORD *)this + 11) != 600)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 600;
            operator new();
          }
          BOOL v11 = (const CoreML::Specification::OneHotEncoder *)*((void *)a2 + 4);
          uint64_t v47 = (std::string *)*((void *)this + 4);
          CoreML::Specification::OneHotEncoder::MergeFrom(v47, v11);
          break;
        case 601:
          if (*((_DWORD *)this + 11) != 601)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 601;
            operator new();
          }
          int v12 = (const CoreML::Specification::Imputer *)*((void *)a2 + 4);
          __n128 v48 = (std::string *)*((void *)this + 4);
          CoreML::Specification::Imputer::MergeFrom(v48, v12);
          break;
        case 602:
          if (*((_DWORD *)this + 11) != 602)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 602;
            operator new();
          }
          unsigned int v13 = (const CoreML::Specification::FeatureVectorizer *)*((void *)a2 + 4);
          __n128 v49 = (std::string *)*((void *)this + 4);
          CoreML::Specification::FeatureVectorizer::MergeFrom(v49, v13);
          break;
        case 603:
          if (*((_DWORD *)this + 11) != 603)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 603;
            operator new();
          }
          uint64_t v14 = (const CoreML::Specification::DictVectorizer *)*((void *)a2 + 4);
          uint64_t v50 = (std::string *)*((void *)this + 4);
          CoreML::Specification::DictVectorizer::MergeFrom(v50, v14);
          break;
        case 604:
          if (*((_DWORD *)this + 11) != 604)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 604;
            operator new();
          }
          unsigned int v15 = (const CoreML::Specification::Scaler *)*((void *)a2 + 4);
          __n128 v51 = (unint64_t *)*((void *)this + 4);
          CoreML::Specification::Scaler::MergeFrom(v51, v15);
          break;
        case 606:
          if (*((_DWORD *)this + 11) != 606)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 606;
            operator new();
          }
          uint64_t v16 = (const CoreML::Specification::CategoricalMapping *)*((void *)a2 + 4);
          __n128 v52 = (std::string *)*((void *)this + 4);
          CoreML::Specification::CategoricalMapping::MergeFrom(v52, v16);
          break;
        case 607:
          if (*((_DWORD *)this + 11) != 607)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 607;
            operator new();
          }
          uint64_t v17 = (const CoreML::Specification::FlattenLayerParams *)*((void *)a2 + 4);
          uint64_t v53 = (std::string *)*((void *)this + 4);
          CoreML::Specification::FlattenLayerParams::MergeFrom(v53, v17);
          break;
        case 609:
          if (*((_DWORD *)this + 11) != 609)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 609;
            operator new();
          }
          signed int v18 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((void *)a2 + 4);
          unint64_t v54 = (unint64_t *)*((void *)this + 4);
          CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v54, v18);
          break;
        case 610:
          if (*((_DWORD *)this + 11) != 610)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 610;
            operator new();
          }
          uint64_t v19 = (const CoreML::Specification::NonMaximumSuppression *)*((void *)a2 + 4);
          __n128 v55 = (std::string *)*((void *)this + 4);
          CoreML::Specification::NonMaximumSuppression::MergeFrom(v55, v19);
          break;
        default:
          return;
      }
    }
  }
  else if (v10 <= 399)
  {
    if (v10 <= 299)
    {
      switch(v10)
      {
        case 200:
          if (*((_DWORD *)this + 11) != 200)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 200;
            operator new();
          }
          unsigned int v42 = (const CoreML::Specification::PipelineClassifier *)*((void *)a2 + 4);
          int v78 = (std::string *)*((void *)this + 4);
          CoreML::Specification::PipelineClassifier::MergeFrom(v78, v42);
          break;
        case 201:
          if (*((_DWORD *)this + 11) != 201)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 201;
            operator new();
          }
          uint64_t v43 = (const CoreML::Specification::PipelineRegressor *)*((void *)a2 + 4);
          unint64_t v79 = (std::string *)*((void *)this + 4);
          CoreML::Specification::PipelineRegressor::MergeFrom(v79, v43);
          break;
        case 202:
          if (*((_DWORD *)this + 11) != 202)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 202;
            operator new();
          }
          uint64_t v24 = (const CoreML::Specification::Pipeline *)*((void *)a2 + 4);
          uint64_t v60 = *((void *)this + 4);
          CoreML::Specification::Pipeline::MergeFrom(v60, v24);
          break;
      }
    }
    else
    {
      switch(v10)
      {
        case 300:
          if (*((_DWORD *)this + 11) != 300)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 300;
            operator new();
          }
          uint64_t v22 = (const CoreML::Specification::GLMRegressor *)*((void *)a2 + 4);
          int v58 = (unint64_t *)*((void *)this + 4);
          CoreML::Specification::GLMRegressor::MergeFrom(v58, v22);
          break;
        case 301:
          if (*((_DWORD *)this + 11) != 301)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 301;
            operator new();
          }
          uint64_t v36 = (const CoreML::Specification::SupportVectorRegressor *)*((void *)a2 + 4);
          int v72 = (std::string *)*((void *)this + 4);
          CoreML::Specification::SupportVectorRegressor::MergeFrom(v72, v36);
          break;
        case 302:
          if (*((_DWORD *)this + 11) != 302)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 302;
            operator new();
          }
          uint64_t v37 = (const CoreML::Specification::TreeEnsembleRegressor *)*((void *)a2 + 4);
          uint64_t v73 = (std::string *)*((void *)this + 4);
          CoreML::Specification::TreeEnsembleRegressor::MergeFrom(v73, v37);
          break;
        case 303:
          if (*((_DWORD *)this + 11) != 303)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 303;
            operator new();
          }
          uint64_t v38 = (const CoreML::Specification::NeuralNetworkRegressor *)*((void *)a2 + 4);
          int v74 = (CoreML::Specification::NeuralNetworkRegressor *)*((void *)this + 4);
          CoreML::Specification::NeuralNetworkRegressor::MergeFrom(v74, v38);
          break;
        case 304:
          if (*((_DWORD *)this + 11) != 304)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 304;
            operator new();
          }
          uint64_t v39 = (const CoreML::Specification::BayesianProbitRegressor *)*((void *)a2 + 4);
          unint64_t v75 = (std::string *)*((void *)this + 4);
          CoreML::Specification::BayesianProbitRegressor::MergeFrom(v75, v39);
          break;
        default:
          return;
      }
    }
  }
  else if (v10 > 499)
  {
    if (v10 <= 501)
    {
      if (v10 == 500)
      {
        if (*((_DWORD *)this + 11) != 500)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 500;
          operator new();
        }
        long long v45 = (const CoreML::Specification::NeuralNetwork *)*((void *)a2 + 4);
        uint64_t v81 = (CoreML::Specification::NeuralNetwork *)*((void *)this + 4);
        CoreML::Specification::NeuralNetwork::MergeFrom(v81, v45);
      }
      else
      {
        if (*((_DWORD *)this + 11) != 501)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 501;
          operator new();
        }
        uint64_t v26 = (const CoreML::Specification::ItemSimilarityRecommender *)*((void *)a2 + 4);
        int v62 = (std::string *)*((void *)this + 4);
        CoreML::Specification::ItemSimilarityRecommender::MergeFrom(v62, v26);
      }
    }
    else
    {
      switch(v10)
      {
        case 502:
          if (*((_DWORD *)this + 11) != 502)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 502;
            operator new();
          }
          uint64_t v40 = (const CoreML::Specification::V5::Program *)*((void *)a2 + 4);
          int v76 = (CoreML::Specification::V5::Program *)*((void *)this + 4);
          CoreML::Specification::V5::Program::MergeFrom(v76, v40);
          break;
        case 555:
          if (*((_DWORD *)this + 11) != 555)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 555;
            operator new();
          }
          uint64_t v41 = (const CoreML::Specification::CustomModel *)*((void *)a2 + 4);
          unint64_t v77 = (CoreML::Specification::CustomModel *)*((void *)this + 4);
          CoreML::Specification::CustomModel::MergeFrom(v77, v41);
          break;
        case 556:
          if (*((_DWORD *)this + 11) != 556)
          {
            CoreML::Specification::Model::clear_Type((uint64_t)this);
            *((_DWORD *)this + 11) = 556;
            operator new();
          }
          uint64_t v23 = (const CoreML::Specification::LinkedModel *)*((void *)a2 + 4);
          __n128 v59 = (std::string *)*((void *)this + 4);
          CoreML::Specification::LinkedModel::MergeFrom(v59, v23);
          break;
      }
    }
  }
  else
  {
    switch(v10)
    {
      case 400:
        if (*((_DWORD *)this + 11) != 400)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 400;
          operator new();
        }
        int v20 = (const CoreML::Specification::GLMClassifier *)*((void *)a2 + 4);
        uint64_t v56 = (std::string *)*((void *)this + 4);
        CoreML::Specification::GLMClassifier::MergeFrom(v56, v20);
        break;
      case 401:
        if (*((_DWORD *)this + 11) != 401)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 401;
          operator new();
        }
        int v27 = (const CoreML::Specification::SupportVectorClassifier *)*((void *)a2 + 4);
        uint64_t v63 = (std::string *)*((void *)this + 4);
        CoreML::Specification::SupportVectorClassifier::MergeFrom(v63, v27);
        break;
      case 402:
        if (*((_DWORD *)this + 11) != 402)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 402;
          operator new();
        }
        int v28 = (const CoreML::Specification::TreeEnsembleClassifier *)*((void *)a2 + 4);
        int v64 = (std::string *)*((void *)this + 4);
        CoreML::Specification::TreeEnsembleClassifier::MergeFrom(v64, v28);
        break;
      case 403:
        if (*((_DWORD *)this + 11) != 403)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 403;
          operator new();
        }
        unint64_t v29 = (const CoreML::Specification::NeuralNetworkClassifier *)*((void *)a2 + 4);
        unint64_t v65 = (CoreML::Specification::NeuralNetworkClassifier *)*((void *)this + 4);
        CoreML::Specification::NeuralNetworkClassifier::MergeFrom(v65, v29);
        break;
      case 404:
        if (*((_DWORD *)this + 11) != 404)
        {
          CoreML::Specification::Model::clear_Type((uint64_t)this);
          *((_DWORD *)this + 11) = 404;
          operator new();
        }
        unsigned int v30 = (const CoreML::Specification::KNearestNeighborsClassifier *)*((void *)a2 + 4);
        int v66 = (std::string *)*((void *)this + 4);
        CoreML::Specification::KNearestNeighborsClassifier::MergeFrom(v66, v30);
        break;
      default:
        return;
    }
  }
}

void sub_22436C6C8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Model::CopyFrom(CoreML::Specification::Model *this, const CoreML::Specification::Model *a2)
{
  if (a2 != this)
  {
    CoreML::Specification::Model::Clear(this);
    CoreML::Specification::Model::MergeFrom(this, a2);
  }
}

uint64_t CoreML::Specification::Model::IsInitialized(CoreML::Specification::Model *this)
{
  return 1;
}

void *CoreML::Specification::Model::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Model");
}

void CoreML::Specification::Pipeline::New(CoreML::Specification::Pipeline *this)
{
}

void CoreML::Specification::PipelineClassifier::New(CoreML::Specification::PipelineClassifier *this)
{
}

void CoreML::Specification::PipelineRegressor::New(CoreML::Specification::PipelineRegressor *this)
{
}

void CoreML::Specification::FeatureDescription::New(CoreML::Specification::FeatureDescription *this)
{
}

void CoreML::Specification::Metadata::New(CoreML::Specification::Metadata *this)
{
}

void CoreML::Specification::ModelDescription::New(CoreML::Specification::ModelDescription *this)
{
}

void CoreML::Specification::SerializedModel::New(CoreML::Specification::SerializedModel *this)
{
}

void CoreML::Specification::Model::New(CoreML::Specification::Model *this)
{
}

void *_tc_google::protobuf::Map<std::string,std::string>::~Map(void *a1)
{
  _tc_google::protobuf::Map<std::string,std::string>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x22A614FA0](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,std::string>::clear(uint64_t a1)
{
  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    _tc_google::protobuf::Map<std::string,std::string>::erase(a1, &v5, (uint64_t)&v7);
    double result = *(double *)&v7;
    long long v3 = v7;
    uint64_t v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,std::string>::erase@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)a1)
  {
    uint64_t v6 = *(void *)(*a2 + 24);
    if (v6)
    {
      uint64_t v7 = std::pair<std::string,std::string>::~pair(v6);
      MEMORY[0x22A614FA0](v7, 0x1012C403467C318);
    }
  }
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(void **)(a1 + 16), (uint64_t)&v9);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = a2[2];
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::New()
{
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[4] = this;
  *((_DWORD *)result + 1CoreML::Specification::Model::New(this, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D77A7C8;
  result[1] = v5;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  uint64_t v2 = *(void *)(result + 24);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergePartialFromCodedStream(uint64_t a1, char **this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *this;
      if (*this >= this[1])
      {
        unint64_t TagFallback = 0;
      }
      else
      {
        unint64_t TagFallback = *v5;
        if ((*v5 & 0x80000000) == 0)
        {
          *this = v5 + 1;
          goto LABEL_6;
        }
      }
      unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)this, TagFallback);
LABEL_6:
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v7 = *(std::string **)(a1 + 16);
      if (v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, v7);
      if (!result) {
        return result;
      }
      int v8 = *(_DWORD *)(a1 + 40) | 1;
      *(_DWORD *)(a1 + 4CoreML::Specification::Model::New(this, 0) = v8;
      long long v9 = *this;
      if (*this < this[1] && *v9 == 18)
      {
        *this = v9 + 1;
LABEL_19:
        *(_DWORD *)(a1 + 4CoreML::Specification::Model::New(this, 0) = v8 | 2;
        uint64_t v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, v10);
        if (!result) {
          return result;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        if (*this == this[1] && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          BOOL result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback == 18)
    {
      int v8 = *(_DWORD *)(a1 + 40);
      goto LABEL_19;
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    uint64_t v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    int v5 = *(_DWORD *)(v4 + 8);
  }
  uint64_t v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteString(1, v4, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteString(2, v5, a2);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0) {
      int v8 = *(_DWORD *)(v7 + 8);
    }
    unsigned int v3 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    unsigned int v6 = 0;
    return v6 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    int v5 = *(_DWORD *)(v4 + 8);
  }
  unsigned int v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

char *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  int v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  unsigned int v6 = _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  uint64_t v7 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *unsigned int v6 = 18;
  return _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v7, v6 + 1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::value(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/map_entry_lite.h", 162);
    int v2 = _tc_google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: default_instance_ != NULL: ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (_tc_google::protobuf::internal::LogMessage *)v2);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return *(void *)(a1 + 24);
}

void sub_22436D28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26D77A8A0;
  if (*(void *)(a1 + 8) != a1 && !*(void *)(a1 + 32))
  {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 24));
  }
  return a1;
}

std::string *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFromInternal(std::string *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    char v4 = result;
    if (v2)
    {
      int v5 = (std::string **)&result->__r_.__value_.__r.__words[2];
      if ((uint64_t *)result->__r_.__value_.__r.__words[2] == &_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      unsigned int v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      BOOL result = std::string::operator=(*v5, v6);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v7 = (std::string **)&v4[1];
      if ((uint64_t *)v4[1].__r_.__value_.__l.__data_ == &_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      int v8 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      if (*v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      BOOL result = std::string::operator=(*v7, v8);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 2u;
    }
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Pipeline>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::Model>::TypeHandler>(uint64_t result, CoreML::Specification::Model **a2, CoreML::Specification::Model **a3, unsigned int a4, unsigned int a5)
{
  long long v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    BOOL v11 = a3;
    int v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      unsigned int v13 = v14;
      unsigned int v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    signed int v18 = *v9;
    uint64_t v19 = &a3[a5];
    int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::Model::Model(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::Model>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(v21, Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_22436D58C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C4065E65A88);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::Model>::Merge(CoreML::Specification::Model *a1, CoreML::Specification::Model *this)
{
  return CoreML::Specification::Model::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineClassifier>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::PipelineRegressor>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *_tc_google::protobuf::Map<std::string,std::string>::Init(uint64_t a1)
{
  int v2 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
  BOOL result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,std::string>::InnerMap>);
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_22436D6B8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,std::string>::operator[](uint64_t a1, const std::string *a2)
{
  char v4 = (std::string **)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,std::string>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    std::string *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v7 = 0;
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::insert(a1, (long long *)&v6, (uint64_t)v5);
  uint64_t v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 + 24;
}

void sub_22436D7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,std::string>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, const std::string *a2)
{
  char v4 = *a1;
  if (!v4) {
    operator new();
  }
  Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 48);
  std::string v6 = *a1;
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
  uint64_t v7 = *a1;
  Aligned[1].__r_.__value_.__l.__size_ = 0;
  Aligned[1].__r_.__value_.__r.__words[2] = 0;
  Aligned[1].__r_.__value_.__r.__words[0] = 0;
  _tc_google::protobuf::Arena::OwnDestructor<std::string>(v7, &Aligned[1]);
  std::string::operator=(Aligned, a2);
  return Aligned;
}

void sub_22436D8A0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,std::string>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((void)v17)
  {
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (_tc_google::protobuf::Map<std::string,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      long long v17 = v14;
      uint64_t v9 = v16;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
    }
    else
    {
      uint64_t v9 = v19;
    }
    uint64_t v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 40);
    }
    else {
      Aligned = (std::string *)operator new(0x28uLL);
    }
    uint64_t v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(void *)(v12 + 24) = *((void *)a2 + 3);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(void *)(a3 + 32) = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(void *)(v4 + 32) = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    uint64_t v15 = (const void **)v4;
    double result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    v6[3] = v12;
    goto LABEL_11;
  }
  *(void *)(a3 + 32) = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  uint64_t v15 = (const void **)a3;
  double result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,std::string>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (_tc_google::protobuf::Arena *)a1[5];
  uint64_t v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *_tc_google::protobuf::Map<std::string,std::string>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8 * a3);
  do
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (unsigned char *)v4);
    double result = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v6, v4, v8);
    uint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void ***)(a2 + 8 * a3);
  uint64_t v5 = *v4;
  do
  {
    uint64_t v6 = (unsigned char *)v5[4];
    uint64_t v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  v9[2] = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_22436DE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_22436DE8C(_Unwind_Exception *a1)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Metadata>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  uint64_t v4 = *(unsigned char **)this;
  if (*(void *)this >= *((void *)this + 1) || *v4 != 10)
  {
    uint64_t v8 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v8);
    }
    *uint64_t v8 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    goto LABEL_15;
  }
  *(void *)this = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, (std::string *)(a1 + 16))) {
    return 0;
  }
  if ((int)(*((_DWORD *)this + 2) - *(void *)this) < 1 {
    || **(unsigned char **)this != 18
  }
    || (uint64_t v5 = *(void *)(a1 + 8),
        uint64_t v6 = **(void **)(v5 + 16),
        *(void *)(a1 + 4CoreML::Specification::Model::New(this, 0) = _tc_google::protobuf::Map<std::string,std::string>::operator[](v5, (const std::string *)(a1 + 16)), v6 == **(void **)(*(void *)(a1 + 8) + 16)))
  {
LABEL_15:
    uint64_t v9 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    BOOL v10 = *(void **)(a1 + 48);
    if (v10 != v9)
    {
      if (v10) {
        (*(void (**)(void *))(*v10 + 8))(v10);
      }
      *(void *)(a1 + 48) = v9;
    }
    uint64_t v11 = (std::string *)v9[2];
    *((_DWORD *)v9 + 10) |= 1u;
    if (v11 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
    }
    std::string::operator=(v11, (const std::string *)(a1 + 16));
    uint64_t v12 = (*(uint64_t (**)(void, _tc_google::protobuf::io::CodedInputStream *))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), this);
    if (v12) {
      __n128 v13 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(a1);
    }
    if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v13)) {
      *(void *)(a1 + 48) = 0;
    }
    return v12;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, *(std::string **)(a1 + 40)))
  {
    _tc_google::protobuf::Map<std::string,std::string>::erase(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
    return 0;
  }
  if (*(void *)this == *((void *)this + 1)
    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v12 = 1;
    *((unsigned char *)this + 36) = 1;
    return v12;
  }
  return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
}

uint64_t _tc_google::protobuf::Map<std::string,std::string>::erase(uint64_t a1, unsigned __int8 *a2)
{
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(void *)(a1 + 16), a2, 0, &v6);
  if (!(void)v6) {
    return 0;
  }
  long long v4 = v6;
  uint64_t v5 = v7;
  _tc_google::protobuf::Map<std::string,std::string>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5 != v4)
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
    *(void *)(a1 + 48) = v4;
  }
  long long v6 = *(long long **)(a1 + 40);
  uint64_t v7 = v4[3];
  *((_DWORD *)v4 + 10) |= 2u;
  if ((uint64_t *)v7 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  long long v8 = *v6;
  *(void *)(v7 + 16) = *((void *)v6 + 2);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)v6 + 23) = 0;
  *(unsigned char *)long long v6 = 0;
  _tc_google::protobuf::Map<std::string,std::string>::erase(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  uint64_t v9 = *(void *)(a1 + 48);
  *(_DWORD *)(v9 + 40) |= 1u;
  uint64_t v10 = *(void *)(v9 + 16);
  if ((uint64_t *)v10 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  long long v11 = *(_OWORD *)(a1 + 16);
  *(void *)(v10 + 16) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v10 = v11;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
  if (v12) {
    __n128 v13 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v13)) {
    *(void *)(a1 + 48) = 0;
  }
  return v12;
}

void *_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[4] = v1;
  *((_DWORD *)result + 1CoreML::Specification::Model::New(this, 0) = 0;
  *uint64_t result = &unk_26D77A7C8;
  return result;
}

__n128 _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<std::string,std::string>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  unint64_t v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  uint64_t v3 = _tc_google::protobuf::Map<std::string,std::string>::operator[](*(void *)(a1 + 8), (const std::string *)(a1 + 16));
  *(void *)(a1 + 4CoreML::Specification::Model::New(this, 0) = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  uint64_t v5 = *(void *)(v4 + 24);
  if ((uint64_t *)v5 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3->__r_.__value_.__l.__data_);
  }
  __n128 result = *(__n128 *)v5;
  v3->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
  *(__n128 *)&v3->__r_.__value_.__l.__data_ = result;
  *(unsigned char *)(v5 + 23) = 0;
  *(unsigned char *)uint64_t v5 = 0;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (const void ***)result;
LABEL_2:
  long long v11 = a2 - 1;
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          __n128 result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v12);
          if (result)
          {
            uint64_t v23 = *v12;
            const CoreML::Specification::Imputer *v12 = *v11;
            std::string *v11 = v23;
          }
          break;
        case 3uLL:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          __n128 result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, &v12[v16 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12 + 1, v18 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12 + 2, &v12[v17 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      const CoreML::Specification::Imputer *v12 = *v18;
      _tc_google::protobuf::Arena *v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v12[v16 >> 1], v12, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v12 - 1, v12))
    {
      __n128 result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v12, a2, a3);
      uint64_t v12 = (const void ***)result;
      goto LABEL_19;
    }
LABEL_14:
    int v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v12, a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**>(v12, v20, a3);
    uint64_t v12 = v20 + 1;
    __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**>(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      __n128 result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**,false>(v10, v20, a3, -v14, a5 & 1);
      uint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,std::string> const*> &,_tc_google::protobuf::MapPair<std::string,std::string> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *long long v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      long long v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      unint64_t v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          unint64_t v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      const CoreML::Specification::CategoricalMapping *v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[4] = this;
  *BOOL result = &unk_26D77A970;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::Model::New(this, 0) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,std::string,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::ModelDescription>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(std::string *result, std::string **a2, const CoreML::Specification::FeatureDescription **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    long long v11 = a3;
    uint64_t v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    uint64_t v19 = &a3[a5];
    int v20 = (CoreML::Specification::FeatureDescription **)&a2[a5];
    do
    {
      char v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::FeatureDescription::FeatureDescription(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::FeatureDescription>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::FeatureDescription>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_22436EC54(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400A278675);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::SerializedModel>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Model>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void turi::optimization::lbfgs_compat(void *a1@<X0>, long long **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  gettimeofday(&v97, 0);
  gettimeofday(&v97, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "max_iterations");
  uint64_t v9 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, (const void **)__p);
  if (SBYTE7(v109) < 0) {
    operator delete(__p[0]);
  }
  if (a3 + 8 == v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v95, "max_iterations");
    uint64_t v10 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::optimization::default_solver_options, (const void **)v95);
  }
  else
  {
    uint64_t v10 = (unsigned char *)(v9 + 56);
  }
  uint64_t v80 = 0;
  switch(v10[12])
  {
    case 0:
      uint64_t v11 = *(void *)v10;
      goto LABEL_24;
    case 1:
      uint64_t v11 = (uint64_t)*(double *)v10;
      goto LABEL_24;
    case 2:
      uint64_t v13 = *(void *)v10;
      uint64_t v14 = (char **)(*(void *)v10 + 8);
      __idx.__r_.__value_.__r.__words[0] = 0;
      uint64_t v15 = (char *)v14;
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v15 = *v14;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v15);
      uint64_t v80 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
      if (SBYTE7(v109) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v16 = *(void *)(v13 + 16);
      }
      else {
        uint64_t v16 = *(unsigned __int8 *)(v13 + 31);
      }
      if (__idx.__r_.__value_.__r.__words[0] != v16)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        int v72 = std::string::append(&v89, " cannot be interpreted as an integer");
        long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
        *(void *)&long long v109 = *((void *)&v72->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __p = v73;
        v72->__r_.__value_.__l.__size_ = 0;
        v72->__r_.__value_.__r.__words[2] = 0;
        v72->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_31;
    case 3:
      uint64_t v12 = *(void *)v10;
      *(void *)&long long v109 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v12 + 8), *(void *)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_30;
    case 4:
      uint64_t v17 = *(void *)v10;
      *(void *)&long long v109 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      goto LABEL_30;
    case 5:
      uint64_t v18 = *(void *)v10;
      *(void *)&long long v109 = 0;
      __p[1] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      goto LABEL_30;
    case 6:
      uint64_t v11 = (uint64_t)(*(void *)v10 << 8) >> 8;
LABEL_24:
      uint64_t v80 = v11;
      goto LABEL_31;
    case 7:
      goto LABEL_31;
    case 8:
      uint64_t v19 = *(void *)v10;
      int v20 = *(atomic_uint **)(*(void *)v10 + 16);
      __p[0] = *(void **)(*(void *)v10 + 8);
      __p[1] = v20;
      if (v20) {
        atomic_fetch_add_explicit(v20 + 2, 1u, memory_order_relaxed);
      }
      long long v21 = *(_OWORD *)(v19 + 24);
      long long v22 = *(_OWORD *)(v19 + 56);
      long long v110 = *(_OWORD *)(v19 + 40);
      long long v111 = v22;
      long long v109 = v21;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_30;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v10 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v110 + 1))
      {
        *(void *)&long long v111 = *((void *)&v110 + 1);
        operator delete(*((void **)&v110 + 1));
      }
      if ((void)v109)
      {
        *((void *)&v109 + 1) = v109;
        operator delete((void *)v109);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_30:
      uint64_t v80 = 0;
LABEL_31:
      if (a3 + 8 == v9 && v96 < 0) {
        operator delete(v95[0]);
      }
      uint64_t v23 = (std::__shared_weak_count *)a1[1];
      uint64_t v87 = *a1;
      int v88 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::optimization::lbfgs_solver::lbfgs_solver((uint64_t)&v89, &v87);
      if (v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }
      turi::optimization::lbfgs_solver::setup((uint64_t)&v89, a2, a3, a4);
      std::string::basic_string[abi:ne180100]<0>(v85, "simple_mode");
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a3, (const void **)v85))
      {
        std::string::basic_string[abi:ne180100]<0>(&p_idx, "simple_mode");
        uint64_t v24 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(a3, (const void **)&p_idx);
        uint64_t v25 = 0;
        switch(v24[12])
        {
          case 0:
            uint64_t v25 = *(void *)v24;
            goto LABEL_64;
          case 1:
            uint64_t v25 = (uint64_t)*(double *)v24;
            goto LABEL_64;
          case 2:
            uint64_t v27 = *(void *)v24;
            int v28 = (char **)(*(void *)v24 + 8);
            v100.tv_sec = 0;
            unint64_t v29 = (char *)v28;
            if (*(char *)(v27 + 31) < 0) {
              unint64_t v29 = *v28;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v29);
            uint64_t v25 = std::stoll((const std::string *)__p, (size_t *)&v100, 10);
            if (SBYTE7(v109) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(v27 + 31) < 0) {
              uint64_t v30 = *(void *)(v27 + 16);
            }
            else {
              uint64_t v30 = *(unsigned __int8 *)(v27 + 31);
            }
            if (v100.tv_sec != v30)
            {
              int v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              unint64_t v75 = std::string::append(&__idx, " cannot be interpreted as an integer");
              long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
              *(void *)&long long v109 = *((void *)&v75->__r_.__value_.__l + 2);
              *(_OWORD *)std::string __p = v76;
              v75->__r_.__value_.__l.__size_ = 0;
              v75->__r_.__value_.__r.__words[2] = 0;
              v75->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v74, (const std::string *)__p);
              __cxa_throw(v74, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_64;
          case 3:
            uint64_t v26 = *(void *)v24;
            *(void *)&long long v109 = 0;
            __p[1] = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v26 + 8), *(void *)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_63;
          case 4:
            uint64_t v31 = *(void *)v24;
            *(void *)&long long v109 = 0;
            __p[1] = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 4);
            turi::flexible_type_fail(0);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
            goto LABEL_63;
          case 5:
            uint64_t v32 = *(void *)v24;
            *(void *)&long long v109 = 0;
            __p[1] = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(void *)(v32 + 16) - *(void *)(v32 + 8)) >> 5);
            turi::flexible_type_fail(0);
            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
            goto LABEL_63;
          case 6:
            uint64_t v25 = (uint64_t)(*(void *)v24 << 8) >> 8;
            goto LABEL_64;
          case 7:
            goto LABEL_64;
          case 8:
            uint64_t v33 = *(void *)v24;
            std::string v34 = *(atomic_uint **)(*(void *)v24 + 16);
            __p[0] = *(void **)(*(void *)v24 + 8);
            __p[1] = v34;
            if (v34) {
              atomic_fetch_add_explicit(v34 + 2, 1u, memory_order_relaxed);
            }
            long long v35 = *(_OWORD *)(v33 + 24);
            long long v36 = *(_OWORD *)(v33 + 56);
            long long v110 = *(_OWORD *)(v33 + 40);
            long long v111 = v36;
            long long v109 = v35;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            goto LABEL_63;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v24 + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v110 + 1))
            {
              *(void *)&long long v111 = *((void *)&v110 + 1);
              operator delete(*((void **)&v110 + 1));
            }
            if ((void)v109)
            {
              *((void *)&v109 + 1) = v109;
              operator delete((void *)v109);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
LABEL_63:
            uint64_t v25 = 0;
LABEL_64:
            BOOL v79 = v25 != 0;
            if (SHIBYTE(v84) < 0) {
              operator delete(p_idx);
            }
            goto LABEL_66;
          default:
            turi::flexible_type_fail(0);
            goto LABEL_147;
        }
      }
      BOOL v79 = 0;
LABEL_66:
      if (v86 < 0) {
        operator delete(v85[0]);
      }
      if (v79)
      {
        uint64_t v37 = (int *)global_logger();
        if (v37[169] > 4)
        {
LABEL_77:
          uint64_t v43 = *a1;
          std::string::basic_string[abi:ne180100]<0>(__p, "Iteration");
          std::string::basic_string[abi:ne180100]<0>((void *)&v109 + 1, "Elapsed Time");
          memset(&__idx, 0, sizeof(__idx));
          p_idx = &__idx;
          LOBYTE(v83) = 0;
          __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
          __idx.__r_.__value_.__l.__size_ = __idx.__r_.__value_.__r.__words[0];
          __idx.__r_.__value_.__r.__words[2] = __idx.__r_.__value_.__r.__words[0] + 48;
          __idx.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__idx.__r_.__value_.__r.__words[2], (long long *)__p, &v111, (std::string *)__idx.__r_.__value_.__l.__data_);
          (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v43 + 64))(v85, v43, &__idx);
          p_idx = &__idx;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_idx);
          for (uint64_t i = 0; i != -48; i -= 24)
          {
            if (*((char *)&v110 + i + 15) < 0) {
              operator delete(*(void **)((char *)&v109 + i + 8));
            }
          }
          goto LABEL_106;
        }
        if (!cppipc::must_cancel((cppipc *)v37))
        {
          uint64_t v38 = (file_logger *)global_logger();
          started = file_logger::start_stream(v38, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/lbfgs.cpp", "lbfgs_compat", 40, 1);
          uint64_t v40 = pthread_getspecific(*((void *)started + 74));
          if (v40 && *((unsigned char *)v40 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40 + 2, (uint64_t)"Calibrating solver; this may take some time.",
          }
              44);
          uint64_t v41 = pthread_getspecific(*((void *)started + 74));
          if (!v41) {
            goto LABEL_77;
          }
          if (!v41[280]) {
            goto LABEL_77;
          }
          std::ios_base::getloc((const std::ios_base *)&v41[*(void *)(*((void *)v41 + 2) - 24) + 16]);
          unsigned int v42 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) != 7) {
            goto LABEL_77;
          }
LABEL_144:
          __print_back_trace();
          unint64_t v77 = __cxa_allocate_exception(8uLL);
          *unint64_t v77 = "LOG_FATAL encountered";
          __cxa_throw(v77, MEMORY[0x263F8C1D8], 0);
        }
LABEL_143:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      long long v45 = (int *)global_logger();
      if (v45[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v45)) {
          goto LABEL_143;
        }
        char v46 = (file_logger *)global_logger();
        uint64_t v47 = file_logger::start_stream(v46, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/lbfgs.cpp", "lbfgs_compat", 33, 1);
        __n128 v48 = pthread_getspecific(*((void *)v47 + 74));
        if (v48 && *((unsigned char *)v48 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48 + 2, (uint64_t)"Starting L-BFGS ", 16);
        }
        __n128 v49 = pthread_getspecific(*((void *)v47 + 74));
        if (v49)
        {
          if (*((unsigned char *)v49 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(v49[2] - 24) + 16));
            uint64_t v50 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v47);
            if (*((_DWORD *)v47 + 150) == 7) {
              goto LABEL_144;
            }
          }
        }
      }
      __n128 v51 = (int *)global_logger();
      if (v51[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v51)) {
          goto LABEL_143;
        }
        __n128 v52 = (file_logger *)global_logger();
        uint64_t v53 = file_logger::start_stream(v52, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/lbfgs.cpp", "lbfgs_compat", 34, 1);
        unint64_t v54 = pthread_getspecific(*((void *)v53 + 74));
        if (v54 && *((unsigned char *)v54 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54 + 2, (uint64_t)"--------------------------------------------------------", 56);
        }
        __n128 v55 = pthread_getspecific(*((void *)v53 + 74));
        if (v55)
        {
          if (*((unsigned char *)v55 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(v55[2] - 24) + 16));
            uint64_t v56 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v53);
            if (*((_DWORD *)v53 + 150) == 7) {
              goto LABEL_144;
            }
          }
        }
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::string::basic_string[abi:ne180100]<0>(&__idx, "");
      std::string::operator=(&v113, &__idx);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)&v109 + 8);
      if (SHIBYTE(__idx.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__idx.__r_.__value_.__l.__data_);
      }
      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v57 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      *(void *)&long long v109 = v57;
      *((void *)&v109 + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v114);
      uint64_t v58 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "Iteration");
      std::string::basic_string[abi:ne180100]<0>((void *)&v109 + 1, "Passes");
      std::string::basic_string[abi:ne180100]<0>(&v111, "Step size");
      std::string::basic_string[abi:ne180100]<0>(v112, "Elapsed Time");
      memset(&__idx, 0, sizeof(__idx));
      p_idx = &__idx;
      LOBYTE(v83) = 0;
      __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
      __idx.__r_.__value_.__l.__size_ = __idx.__r_.__value_.__r.__words[0];
      __idx.__r_.__value_.__r.__words[2] = __idx.__r_.__value_.__r.__words[0] + 96;
      __idx.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__idx.__r_.__value_.__r.__words[2], (long long *)__p, (long long *)&v113.__r_.__value_.__r.__words[1], (std::string *)__idx.__r_.__value_.__l.__data_);
      (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v58 + 64))(v85, v58, &__idx);
      p_idx = &__idx;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_idx);
      for (uint64_t j = 0; j != -12; j -= 3)
      {
        if (SHIBYTE(v113.__r_.__value_.__r.__words[j]) < 0) {
          operator delete((void *)v112[j]);
        }
      }
LABEL_106:
      turi::table_printer::table_printer(__p, v85, 1);
      uint64_t v60 = a1;
      turi::table_printer::print_header((turi::table_printer *)__p);
      uint64_t v81 = __p;
      if (v80)
      {
        unint64_t v61 = 0;
        while (1)
        {
          int iteration = turi::optimization::lbfgs_solver::next_iteration((turi::optimization::lbfgs_solver *)&v89);
          if (v79)
          {
            std::to_string(&__idx, v61);
            gettimeofday(&v100, 0);
            std::to_string(&v102, (double)(v100.tv_usec - v97.tv_usec) / 1000000.0 + (double)(v100.tv_sec - v97.tv_sec));
            p_idx = 0;
            unint64_t v83 = 0;
            int v84 = 0;
            v100.tv_sec = (__darwin_time_t)&p_idx;
            LOBYTE(v100.tv_usec) = 0;
            p_idx = operator new(0x30uLL);
            unint64_t v83 = p_idx;
            int v84 = (char *)p_idx + 48;
            uint64_t v63 = 0;
            unint64_t v83 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v84, (long long *)&__idx, (long long *)&v103, (std::string *)p_idx);
            do
            {
              if (SHIBYTE(v102.__r_.__value_.__r.__words[v63 + 2]) < 0) {
                operator delete(*(void **)((char *)&__idx + v63 * 8 + 24));
              }
              v63 -= 3;
            }
            while (v63 != -6);
          }
          else
          {
            std::to_string(&__idx, v61);
            std::to_string(&v102, __val);
            std::to_string(&v103, v94);
            gettimeofday(&v100, 0);
            std::to_string((std::string *)&v104, (double)(v100.tv_usec - v97.tv_usec) / 1000000.0 + (double)(v100.tv_sec - v97.tv_sec));
            p_idx = 0;
            unint64_t v83 = 0;
            int v84 = 0;
            v100.tv_sec = (__darwin_time_t)&p_idx;
            LOBYTE(v100.tv_usec) = 0;
            p_idx = operator new(0x60uLL);
            unint64_t v83 = p_idx;
            int v84 = (char *)p_idx + 96;
            uint64_t v64 = 0;
            unint64_t v83 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v84, (long long *)&__idx, (long long *)((char *)&v105 + 8), (std::string *)p_idx);
            do
            {
              if (*((char *)&v105 + v64 + 7) < 0) {
                operator delete(*(void **)((char *)&v104 + v64));
              }
              v64 -= 24;
            }
            while (v64 != -96);
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)*v60 + 72))(&__idx);
          unint64_t v99 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3);
          int64_t v98 = ((char *)__p[1] - (char *)__p[0]) >> 5;
          if (v99 != v98)
          {
            v100.tv_sec = (__darwin_time_t)&v99;
            *(void *)&v100.tv_usec = &v98;
            turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()();
          }
          ++v61;
          unint64_t add = atomic_fetch_add(v112, 1uLL);
          BOOL v66 = turi::table_printer::register_tick((turi::table_printer *)__p, v61, add + 1);
          BOOL v67 = v66;
          if (v66)
          {
            pthread_mutex_lock((pthread_mutex_t *)&v113.__r_.__value_.__r.__words[1]);
            turi::table_printer::print_row<std::string>(__p, &__idx);
            pthread_mutex_unlock((pthread_mutex_t *)&v113.__r_.__value_.__r.__words[1]);
          }
          if (v121 && !(add % v121))
          {
            pthread_mutex_lock(v115);
            std::string::size_type size = __idx.__r_.__value_.__l.__size_;
            std::string::size_type v69 = __idx.__r_.__value_.__r.__words[0];
            if (!v116)
            {
              std::vector<turi::flexible_type>::resize(v118, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3));
              std::string::size_type size = __idx.__r_.__value_.__l.__size_;
              std::string::size_type v69 = __idx.__r_.__value_.__r.__words[0];
              unint64_t v70 = 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3);
              if (v70 <= v120 - v119)
              {
                if (v70 < v120 - v119) {
                  uint64_t v120 = v119
                }
                       - 0x5555555555555555
                       * ((uint64_t)(__idx.__r_.__value_.__l.__size_ - __idx.__r_.__value_.__r.__words[0]) >> 3);
              }
              else
              {
                std::vector<turi::table_internal::table_printer_element_base::style_type>::__append((uint64_t)&v119, v70 - (v120 - v119));
                std::string::size_type size = __idx.__r_.__value_.__l.__size_;
                std::string::size_type v69 = __idx.__r_.__value_.__r.__words[0];
              }
            }
            if (size != v69) {
              turi::flexible_type::operator=<std::string>(v118[0]);
            }
            turi::table_printer::track_progress_row((uint64_t)__p, v118);
            uint64_t v60 = a1;
            BOOL v117 = v67;
            pthread_mutex_unlock(v115);
          }
          if (iteration) {
            break;
          }
          v100.tv_sec = (__darwin_time_t)&__idx;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
          __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_idx;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
          if (v61 == v80) {
            goto LABEL_133;
          }
        }
        turi::table_printer::print_footer((turi::table_printer *)__p);
        turi::optimization::lbfgs_compat(std::shared_ptr<turi::optimization::first_order_opt_interface>,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&,std::shared_ptr<turi::optimization::smooth_regularizer_interface> const&)::$_0::operator()((turi::table_printer **)&v81, (uint64_t)&v89.__r_.__value_.__l.__size_, a5);
        v100.tv_sec = (__darwin_time_t)&__idx;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
        __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_idx;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
      }
      else
      {
LABEL_133:
        *(_OWORD *)&__idx.__r_.__value_.__l.__data_ = *(_OWORD *)&v89.__r_.__value_.__r.__words[1];
        Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&__idx.__r_.__value_.__r.__words[2], (uint64_t)&v90);
        Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v102.__r_.__value_.__l.__size_, (uint64_t)&v91);
        Eigen::DenseStorage<double,-1,-1,-1,0>::DenseStorage(&v103, (uint64_t)v92);
        long long v104 = *(_OWORD *)&v92[24];
        long long v105 = __val;
        double v106 = v94;
        int v107 = 3;
        turi::table_printer::print_footer((turi::table_printer *)__p);
        turi::optimization::lbfgs_compat(std::shared_ptr<turi::optimization::first_order_opt_interface>,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&,std::shared_ptr<turi::optimization::smooth_regularizer_interface> const&)::$_0::operator()((turi::table_printer **)&v81, (uint64_t)&__idx, a5);
        free(v103.__r_.__value_.__l.__data_);
        free((void *)v102.__r_.__value_.__l.__size_);
        free((void *)__idx.__r_.__value_.__r.__words[2]);
      }
      turi::table_printer::~table_printer((turi::table_printer *)__p);
      __p[0] = v85;
      std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      turi::optimization::lbfgs_solver::~lbfgs_solver((void **)&v89.__r_.__value_.__l.__data_);
      return;
    default:
      turi::flexible_type_fail(0);
LABEL_147:
      __break(1u);
      return;
  }
}

void sub_22436FFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, pthread_mutex_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, pthread_mutex_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36)
{
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x287]) < 0)
  {
    operator delete((void *)STACK[0x270]);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (a27 < 0) {
        operator delete(a22);
      }
      if (a33 < 0) {
        operator delete(a28);
      }
      turi::optimization::lbfgs_solver::~lbfgs_solver(&a36);
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t turi::optimization::lbfgs_solver::setup(uint64_t a1, long long **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = a1 + 40;
  uint64_t v9 = *(void **)(a1 + 40);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v10 = (void *)(a1 + 24);
  uint64_t v11 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4CoreML::Specification::Model::New(this, 0) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v12 = *(void **)(a1 + 56);
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  *(int64x2_t *)(v8 + 4CoreML::Specification::Model::New(this, 0) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  *(void *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 8CoreML::Specification::Model::New(this, 0) = 0;
  free(v12);
  free(v9);
  free(v11);
  uint64_t v14 = *a4;
  uint64_t v13 = a4[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 16CoreML::Specification::Model::New(this, 0) = v14;
  *(void *)(a1 + 168) = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::string::basic_string[abi:ne180100]<0>(v128, "lbfgs_memory_level");
  uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, (const void **)v128);
  if (a3 + 8 == v16) {
    uint64_t v17 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::optimization::default_solver_options, (const void **)v128);
  }
  else {
    uint64_t v17 = v16 + 56;
  }
  double v18 = *(double *)v17;
  unsigned int v19 = *(unsigned __int8 *)(v17 + 12);
  if (v19 <= 9 && ((1 << v19) & 0x33C) != 0) {
    atomic_fetch_add(*(atomic_ullong *volatile *)&v18, 1uLL);
  }
  uint64_t v20 = 0;
  switch(v19)
  {
    case 0u:
      uint64_t v20 = *(void *)&v18;
      goto LABEL_43;
    case 1u:
      uint64_t v20 = (uint64_t)v18;
      goto LABEL_43;
    case 2u:
      int v28 = (void **)(*(void *)&v18 + 8);
      size_t __idx = 0;
      unint64_t v29 = (char *)(*(void *)&v18 + 8);
      if (*(char *)(*(void *)&v18 + 31) < 0) {
        unint64_t v29 = (char *)*v28;
      }
      uint64_t v30 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v151, v29);
      uint64_t v31 = std::stoll(v30, &__idx, 10);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (*(char *)(*(void *)&v18 + 31) < 0) {
        uint64_t v32 = *(void *)(*(void *)&v18 + 16);
      }
      else {
        uint64_t v32 = *(unsigned __int8 *)(*(void *)&v18 + 31);
      }
      if (__idx != v32)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        int v123 = std::string::append(&v150, " cannot be interpreted as an integer");
        long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
        v151.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v124;
        v123->__r_.__value_.__l.__size_ = 0;
        v123->__r_.__value_.__r.__words[2] = 0;
        v123->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v151);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      *(void *)(a1 + 184) = v31;
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v18, 0xFFFFFFFFFFFFFFFFLL) != 1 || v18 == 0.0) {
        goto LABEL_65;
      }
      if (*(char *)(*(void *)&v18 + 31) < 0) {
        operator delete(*v28);
      }
      double v22 = v18;
      uint64_t v23 = 0x1012C404EF22A49;
      goto LABEL_64;
    case 3u:
      unint64_t v148 = 0;
      uint64_t v149 = 0;
      unsigned int v147 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v147, *(const void **)(*(void *)&v18 + 8), *(void *)(*(void *)&v18 + 16), (uint64_t)(*(void *)(*(void *)&v18 + 16) - *(void *)(*(void *)&v18 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v147)
      {
        unint64_t v148 = v147;
        operator delete(v147);
      }
      *(void *)(a1 + 184) = 0;
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v18, 0xFFFFFFFFFFFFFFFFLL) != 1 || v18 == 0.0) {
        goto LABEL_65;
      }
      long long v21 = *(void **)(*(void *)&v18 + 8);
      if (v21)
      {
        *(void *)(*(void *)&v18 + 16) = v21;
        operator delete(v21);
      }
      double v22 = v18;
      uint64_t v23 = 0x1080C409938AC02;
      goto LABEL_64;
    case 4u:
      uint64_t v139 = 0;
      uint64_t v140 = 0;
      uint64_t v33 = *(uint64_t **)(*(void *)&v18 + 8);
      std::string v34 = *(uint64_t **)(*(void *)&v18 + 16);
      uint64_t v138 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v138, v33, v34, ((char *)v34 - (char *)v33) >> 4);
      turi::flexible_type_fail(0);
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
      *(void *)(a1 + 184) = 0;
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v18, 0xFFFFFFFFFFFFFFFFLL) != 1 || v18 == 0.0) {
        goto LABEL_65;
      }
      unsigned int v141 = (void **)(*(void *)&v18 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v141);
      goto LABEL_50;
    case 5u:
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      long long v35 = *(uint64_t **)(*(void *)&v18 + 8);
      long long v36 = *(uint64_t **)(*(void *)&v18 + 16);
      uint64_t v135 = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v135, v35, v36, ((char *)v36 - (char *)v35) >> 5);
      turi::flexible_type_fail(0);
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
      *(void *)(a1 + 184) = 0;
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v18, 0xFFFFFFFFFFFFFFFFLL) != 1 || v18 == 0.0) {
        goto LABEL_65;
      }
      unsigned int v141 = (void **)(*(void *)&v18 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v141);
LABEL_50:
      double v22 = v18;
      uint64_t v23 = 0x1020C405E66F15BLL;
      goto LABEL_64;
    case 6u:
      uint64_t v20 = (uint64_t)(*(void *)&v18 << 8) >> 8;
      goto LABEL_43;
    case 7u:
LABEL_43:
      *(void *)(a1 + 184) = v20;
      goto LABEL_65;
    case 8u:
      int v37 = *(atomic_uint **)(*(void *)&v18 + 16);
      uint64_t v130 = *(void *)(*(void *)&v18 + 8);
      int v131 = v37;
      if (v37) {
        atomic_fetch_add_explicit(v37 + 2, 1u, memory_order_relaxed);
      }
      long long v38 = *(_OWORD *)(*(void *)&v18 + 24);
      long long v39 = *(_OWORD *)(*(void *)&v18 + 40);
      long long v134 = *(_OWORD *)(*(void *)&v18 + 56);
      long long v133 = v39;
      long long v132 = v38;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v131);
      *(void *)(a1 + 184) = 0;
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v18, 0xFFFFFFFFFFFFFFFFLL) != 1 || v18 == 0.0) {
        goto LABEL_65;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v18 + 16));
      double v22 = v18;
      unsigned int v27 = -235920773;
      break;
    case 9u:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v141, *(void *)&v18 + 8);
      turi::flexible_type_fail(0);
      if (__p)
      {
        unint64_t v146 = __p;
        operator delete(__p);
      }
      if (v143)
      {
        unint64_t v144 = v143;
        operator delete(v143);
      }
      if (v142) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v142);
      }
      *(void *)(a1 + 184) = 0;
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v18, 0xFFFFFFFFFFFFFFFFLL) != 1 || v18 == 0.0) {
        goto LABEL_65;
      }
      uint64_t v24 = *(void **)(*(void *)&v18 + 48);
      if (v24)
      {
        *(void *)(*(void *)&v18 + 56) = v24;
        operator delete(v24);
      }
      uint64_t v25 = *(void **)(*(void *)&v18 + 24);
      if (v25)
      {
        *(void *)(*(void *)&v18 + 32) = v25;
        operator delete(v25);
      }
      uint64_t v26 = *(std::__shared_weak_count **)(*(void *)&v18 + 16);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      double v22 = v18;
      unsigned int v27 = 2071181815;
      break;
    default:
LABEL_202:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  uint64_t v23 = v27 | 0x1030C4000000000;
LABEL_64:
  MEMORY[0x22A614FA0](*(void *)&v22, v23);
LABEL_65:
  if (v129 < 0) {
    operator delete(v128[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v128, "convergence_threshold");
  uint64_t v40 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, (const void **)v128);
  if (a3 + 8 == v40) {
    uint64_t v41 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)&turi::optimization::default_solver_options, (const void **)v128);
  }
  else {
    uint64_t v41 = v40 + 56;
  }
  uint64_t v42 = *(uint64_t *)v41;
  int v43 = *(_DWORD *)(v41 + 8);
  unsigned int v44 = *(unsigned __int8 *)(v41 + 12);
  if (v44 <= 9 && ((1 << v44) & 0x33C) != 0) {
    atomic_fetch_add((atomic_ullong *volatile)v42, 1uLL);
  }
  double v45 = 0.0;
  switch(v44)
  {
    case 0u:
      double v45 = (double)v42;
      goto LABEL_105;
    case 1u:
      double v45 = *(double *)&v42;
      goto LABEL_105;
    case 2u:
      uint64_t v53 = (void **)(v42 + 8);
      size_t __idx = 0;
      unint64_t v54 = (char *)(v42 + 8);
      if (*(char *)(v42 + 31) < 0) {
        unint64_t v54 = (char *)*v53;
      }
      __n128 v55 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v151, v54);
      double v56 = std::stod(v55, &__idx);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v42 + 31) < 0) {
        uint64_t v57 = *(void *)(v42 + 16);
      }
      else {
        uint64_t v57 = *(unsigned __int8 *)(v42 + 31);
      }
      if (__idx != v57)
      {
        int v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        atomic_ullong *volatile v126 = std::string::append(&v150, " cannot be interpreted as a float");
        long long v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
        v151.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v127;
        v126->__r_.__value_.__l.__size_ = 0;
        v126->__r_.__value_.__r.__words[2] = 0;
        v126->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v125, &v151);
        __cxa_throw(v125, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v65 = v56;
      *(double *)(a1 + 368) = v65;
      if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(double *)&v42 == 0.0) {
        goto LABEL_127;
      }
      if (*(char *)(v42 + 31) < 0) {
        operator delete(*v53);
      }
      uint64_t v47 = v42;
      uint64_t v48 = 0x1012C404EF22A49;
      goto LABEL_126;
    case 3u:
      unint64_t v148 = 0;
      uint64_t v149 = 0;
      unsigned int v147 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v147, *(const void **)(v42 + 8), *(void *)(v42 + 16), (uint64_t)(*(void *)(v42 + 16) - *(void *)(v42 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (v147)
      {
        unint64_t v148 = v147;
        operator delete(v147);
      }
      *(void *)(a1 + 368) = 0;
      if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(double *)&v42 == 0.0) {
        goto LABEL_127;
      }
      char v46 = *(void **)(v42 + 8);
      if (v46)
      {
        *(void *)(v42 + 16) = v46;
        operator delete(v46);
      }
      uint64_t v47 = v42;
      uint64_t v48 = 0x1080C409938AC02;
      goto LABEL_126;
    case 4u:
      uint64_t v139 = 0;
      uint64_t v140 = 0;
      uint64_t v58 = *(uint64_t **)(v42 + 8);
      __n128 v59 = *(uint64_t **)(v42 + 16);
      uint64_t v138 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v138, v58, v59, ((char *)v59 - (char *)v58) >> 4);
      turi::flexible_type_fail(0);
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
      *(void *)(a1 + 368) = 0;
      if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(double *)&v42 == 0.0) {
        goto LABEL_127;
      }
      unsigned int v141 = (void **)(v42 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v141);
      goto LABEL_112;
    case 5u:
      uint64_t v136 = 0;
      uint64_t v137 = 0;
      uint64_t v60 = *(uint64_t **)(v42 + 8);
      unint64_t v61 = *(uint64_t **)(v42 + 16);
      uint64_t v135 = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v135, v60, v61, ((char *)v61 - (char *)v60) >> 5);
      turi::flexible_type_fail(0);
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v151);
      *(void *)(a1 + 368) = 0;
      if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(double *)&v42 == 0.0) {
        goto LABEL_127;
      }
      unsigned int v141 = (void **)(v42 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v141);
LABEL_112:
      uint64_t v47 = v42;
      uint64_t v48 = 0x1020C405E66F15BLL;
      goto LABEL_126;
    case 6u:
      double v45 = (double)v43 / 1000000.0 + (double)(v42 << 8 >> 8);
      goto LABEL_105;
    case 7u:
LABEL_105:
      *(double *)(a1 + 368) = v45;
      goto LABEL_127;
    case 8u:
      int v62 = *(atomic_uint **)(v42 + 16);
      uint64_t v130 = *(void *)(v42 + 8);
      int v131 = v62;
      if (v62) {
        atomic_fetch_add_explicit(v62 + 2, 1u, memory_order_relaxed);
      }
      long long v63 = *(_OWORD *)(v42 + 24);
      long long v64 = *(_OWORD *)(v42 + 40);
      long long v134 = *(_OWORD *)(v42 + 56);
      long long v133 = v64;
      long long v132 = v63;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v131);
      *(void *)(a1 + 368) = 0;
      if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(double *)&v42 == 0.0) {
        goto LABEL_127;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v42 + 16));
      uint64_t v47 = v42;
      unsigned int v52 = -235920773;
      break;
    case 9u:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v141, v42 + 8);
      turi::flexible_type_fail(0);
      if (__p)
      {
        unint64_t v146 = __p;
        operator delete(__p);
      }
      if (v143)
      {
        unint64_t v144 = v143;
        operator delete(v143);
      }
      if (v142) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v142);
      }
      *(void *)(a1 + 368) = 0;
      if (atomic_fetch_add((atomic_ullong *volatile)v42, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(double *)&v42 == 0.0) {
        goto LABEL_127;
      }
      __n128 v49 = *(void **)(v42 + 48);
      if (v49)
      {
        *(void *)(v42 + 56) = v49;
        operator delete(v49);
      }
      uint64_t v50 = *(void **)(v42 + 24);
      if (v50)
      {
        *(void *)(v42 + 32) = v50;
        operator delete(v50);
      }
      __n128 v51 = *(std::__shared_weak_count **)(v42 + 16);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      uint64_t v47 = v42;
      unsigned int v52 = 2071181815;
      break;
    default:
      goto LABEL_202;
  }
  uint64_t v48 = v52 | 0x1030C4000000000;
LABEL_126:
  MEMORY[0x22A614FA0](v47, v48);
LABEL_127:
  if (v129 < 0) {
    operator delete(v128[0]);
  }
  *(void *)(a1 + 112) = 0x3FF0000000000000;
  uint64_t v66 = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144));
  *(void *)(a1 + 176) = v66;
  uint64_t v67 = *(void *)(a1 + 184);
  if (v66 && v67 && 0x7FFFFFFFFFFFFFFFLL / v67 < v66) {
    goto LABEL_201;
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)(a1 + 208), v67 * v66, v66, v67);
  uint64_t v69 = *(void *)(a1 + 216);
  uint64_t v68 = *(void *)(a1 + 224);
  uint64_t v70 = *(void *)(a1 + 208);
  uint64_t v71 = v68 * v69;
  if (v68 * v69 >= 0) {
    uint64_t v72 = v68 * v69;
  }
  else {
    uint64_t v72 = v71 + 1;
  }
  int64_t v73 = v72 & 0xFFFFFFFFFFFFFFFELL;
  if (v71 >= 2)
  {
    unint64_t v74 = 2;
    if (v73 > 2) {
      unint64_t v74 = v72 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*(void **)(a1 + 208), ((8 * v74 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v73 < v71) {
    bzero((void *)(v70 + 16 * (v72 >> 1)), 8 * v71 - 16 * (v72 >> 1));
  }
  uint64_t v75 = *(void *)(a1 + 176);
  uint64_t v76 = *(void *)(a1 + 184);
  if (v75)
  {
    if (v76 && 0x7FFFFFFFFFFFFFFFLL / v76 < v75)
    {
LABEL_201:
      uint64_t v120 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      unint64_t v121 = std::bad_alloc::bad_alloc(v120);
      __cxa_throw(v121, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
  }
  Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)(a1 + 232), v76 * v75, v75, v76);
  uint64_t v78 = *(void *)(a1 + 240);
  uint64_t v77 = *(void *)(a1 + 248);
  uint64_t v79 = *(void *)(a1 + 232);
  uint64_t v80 = v77 * v78;
  if (v77 * v78 >= 0) {
    uint64_t v81 = v77 * v78;
  }
  else {
    uint64_t v81 = v80 + 1;
  }
  int64_t v82 = v81 & 0xFFFFFFFFFFFFFFFELL;
  if (v80 >= 2)
  {
    unint64_t v83 = 2;
    if (v82 > 2) {
      unint64_t v83 = v81 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*(void **)(a1 + 232), ((8 * v83 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v82 < v80) {
    bzero((void *)(v79 + 16 * (v81 >> 1)), 8 * v80 - 16 * (v81 >> 1));
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 256), *(void *)(a1 + 176));
  uint64_t v84 = *(void *)(a1 + 256);
  uint64_t v85 = *(void *)(a1 + 264);
  if (v85 >= 0) {
    uint64_t v86 = *(void *)(a1 + 264);
  }
  else {
    uint64_t v86 = v85 + 1;
  }
  int64_t v87 = v86 & 0xFFFFFFFFFFFFFFFELL;
  if (v85 >= 2)
  {
    unint64_t v88 = 2;
    if (v87 > 2) {
      unint64_t v88 = v86 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*(void **)(a1 + 256), ((8 * v88 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v87 < v85) {
    bzero((void *)(v84 + 16 * (v86 >> 1)), 8 * v85 - 16 * (v86 >> 1));
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 272), *(void *)(a1 + 184));
  uint64_t v89 = *(void *)(a1 + 272);
  uint64_t v90 = *(void *)(a1 + 280);
  if (v90 >= 0) {
    uint64_t v91 = *(void *)(a1 + 280);
  }
  else {
    uint64_t v91 = v90 + 1;
  }
  int64_t v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
  if (v90 >= 2)
  {
    unint64_t v93 = 2;
    if (v92 > 2) {
      unint64_t v93 = v91 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*(void **)(a1 + 272), ((8 * v93 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v92 < v90) {
    bzero((void *)(v89 + 16 * (v91 >> 1)), 8 * v90 - 16 * (v91 >> 1));
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 288), *(void *)(a1 + 184));
  uint64_t v94 = *(void *)(a1 + 288);
  uint64_t v95 = *(void *)(a1 + 296);
  if (v95 >= 0) {
    uint64_t v96 = *(void *)(a1 + 296);
  }
  else {
    uint64_t v96 = v95 + 1;
  }
  int64_t v97 = v96 & 0xFFFFFFFFFFFFFFFELL;
  if (v95 >= 2)
  {
    unint64_t v98 = 2;
    if (v97 > 2) {
      unint64_t v98 = v96 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*(void **)(a1 + 288), ((8 * v98 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v97 < v95) {
    bzero((void *)(v94 + 16 * (v96 >> 1)), 8 * v95 - 16 * (v96 >> 1));
  }
  timeval v100 = *a2;
  uint64_t v99 = (uint64_t)a2[1];
  if (*(void *)(a1 + 32) != v99)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v10, v99, 1);
    uint64_t v99 = *(void *)(a1 + 32);
  }
  v101 = (_OWORD *)*v10;
  if (v99 >= 0) {
    uint64_t v102 = v99;
  }
  else {
    uint64_t v102 = v99 + 1;
  }
  int64_t v103 = v102 & 0xFFFFFFFFFFFFFFFELL;
  if (v99 >= 2)
  {
    int64_t v104 = 0;
    long long v105 = (_OWORD *)*v10;
    double v106 = v100;
    do
    {
      long long v107 = *v106++;
      *v105++ = v107;
      v104 += 2;
    }
    while (v104 < v103);
  }
  BOOL v108 = __OFSUB__(v99, v103);
  uint64_t v109 = v99 - v103;
  if (!((v109 < 0) ^ v108 | (v109 == 0)))
  {
    uint64_t v110 = v102 >> 1;
    long long v111 = (uint64_t *)&v100[v102 >> 1];
    int v112 = &v101[v110];
    do
    {
      uint64_t v113 = *v111++;
      *v112++ = v113;
      --v109;
    }
    while (v109);
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)v8, *(void *)(a1 + 176));
  uint64_t v114 = *(void *)(a1 + 40);
  uint64_t v115 = *(void *)(a1 + 48);
  if (v115 >= 0) {
    uint64_t v116 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v116 = v115 + 1;
  }
  int64_t v117 = v116 & 0xFFFFFFFFFFFFFFFELL;
  if (v115 >= 2)
  {
    unint64_t v118 = 2;
    if (v117 > 2) {
      unint64_t v118 = v116 & 0xFFFFFFFFFFFFFFFELL;
    }
    bzero(*(void **)(a1 + 40), ((8 * v118 - 8) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v117 < v115) {
    bzero((void *)(v114 + 16 * (v116 >> 1)), 8 * v115 - 16 * (v116 >> 1));
  }
  Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 320), *(void *)(a1 + 176));
  uint64_t result = (uint64_t)Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a1 + 352), *(void *)(a1 + 176));
  *(_DWORD *)(a1 + 12CoreML::Specification::Model::New(this, 0) = 9;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 88) = 0x7FF8000000000000;
  *(void *)(a1 + 20CoreML::Specification::Model::New(this, 0) = 0x3FF0000000000000;
  return result;
}

void sub_22437126C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  if (*(char *)(v33 - 105) < 0) {
    operator delete(*(void **)(v33 - 128));
  }
  if (*(char *)(v33 - 129) < 0)
  {
    operator delete(*(void **)(v33 - 152));
    if ((v30 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v30)
  {
LABEL_8:
    if (atomic_fetch_add((atomic_ullong *volatile)v31, 0xFFFFFFFFFFFFFFFFLL) == 1 && v31)
    {
      if (*(char *)(v31 + 31) < 0) {
        operator delete(*v32);
      }
      MEMORY[0x22A614FA0](v31, 0x1012C404EF22A49);
    }
    if (a14 < 0) {
      operator delete(__p);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

uint64_t turi::optimization::lbfgs_solver::next_iteration(turi::optimization::lbfgs_solver *this)
{
  gettimeofday((timeval *)this + 8, 0);
  unint64_t v2 = 0;
  int v3 = 0;
  unint64_t v337 = *((void *)this + 23);
  uint64_t v4 = (char *)this + 24;
  unint64_t v5 = *((void *)this + 1);
  uint64_t v6 = (void *)((char *)this + 352);
  uint64_t v7 = (float64x2_t **)((char *)this + 320);
  uint64_t v8 = *((void *)this + 44);
  uint64_t v9 = *((void *)this + 45);
  uint64_t v10 = *((void *)this + 41);
  *((void *)this + 44) = *((void *)this + 40);
  *((void *)this + 45) = v10;
  *((void *)this + 4CoreML::Specification::Model::New(this, 0) = v8;
  *((void *)this + 41) = v9;
  uint64_t v11 = (float64x2_t **)((char *)this + 304);
  int64x2_t v338 = vdupq_n_s64(1uLL);
  double v12 = 1.0;
  double v13 = *((double *)this + 24);
  unint64_t v336 = v5;
  while (1)
  {
    (*(void (**)(void, char *, char *, char *, void, uint64_t))(**((void **)this + 18) + 32))(*((void *)this + 18), v4, (char *)this + 40, (char *)this + 88, 0, -1);
    *((int64x2_t *)this + 6) = vaddq_s64(*((int64x2_t *)this + 6), v338);
    if ((*((void *)this + 11) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      goto LABEL_288;
    }
    if (!v5)
    {
      v357.tv_sec = (__darwin_time_t)this + 40;
      *(void *)&v351[8] = *((void *)this + 5);
      v352 = &v357;
      Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v351);
      double v12 = 1.0;
      double v15 = 1.0 / (v14 + 1.0 + fabs(*((double *)this + 11)));
      *((double *)this + 25) = v15;
      *((double *)this + 46) = *((double *)this + 46) * v15;
    }
    uint64_t v16 = *((void *)this + 20);
    if (v16)
    {
      uint64_t v17 = v6;
      double v18 = v11;
      (*(void (**)(uint64_t, char *, float64x2_t **))(*(void *)v16 + 24))(v16, v4, v7);
      unsigned int v19 = v4;
      double v20 = (*(double (**)(void, char *))(**((void **)this + 20) + 16))(*((void *)this + 20), v4);
      double v21 = *((double *)this + 25);
      uint64_t v23 = (float64x2_t *)*((void *)this + 5);
      uint64_t v22 = *((void *)this + 6);
      uint64_t v24 = (float64x2_t *)*((void *)this + 40);
      if (*((void *)this + 41) == v22)
      {
        uint64_t v25 = (float64x2_t *)*((void *)this + 40);
      }
      else
      {
        double v334 = *((double *)this + 25);
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v7, v22, 1);
        double v21 = v334;
        uint64_t v25 = (float64x2_t *)*((void *)this + 40);
        uint64_t v22 = *((void *)this + 41);
      }
      if (v22 >= 0) {
        uint64_t v43 = v22;
      }
      else {
        uint64_t v43 = v22 + 1;
      }
      int64_t v44 = v43 & 0xFFFFFFFFFFFFFFFELL;
      if (v22 >= 2)
      {
        int64_t v45 = 0;
        char v46 = v25;
        uint64_t v47 = v24;
        uint64_t v48 = v23;
        do
        {
          float64x2_t v49 = *v47++;
          float64x2_t v50 = v49;
          float64x2_t v51 = *v48++;
          *v46++ = vmulq_n_f64(vaddq_f64(v50, v51), v21);
          v45 += 2;
        }
        while (v45 < v44);
      }
      BOOL v36 = __OFSUB__(v22, v44);
      uint64_t v52 = v22 - v44;
      if (!((v52 < 0) ^ v36 | (v52 == 0)))
      {
        uint64_t v53 = v43 >> 1;
        f64 = v23[v43 >> 1].f64;
        __n128 v55 = v24[v53].f64;
        double v56 = v25[v53].f64;
        do
        {
          double v57 = *v55++;
          double v58 = v57;
          double v59 = *f64++;
          *v56++ = v21 * (v58 + v59);
          --v52;
        }
        while (v52);
      }
      double v42 = *((double *)this + 25) * (v20 + *((double *)this + 11));
      uint64_t v4 = v19;
      uint64_t v11 = v18;
      uint64_t v6 = v17;
      uint64_t v7 = (float64x2_t **)((char *)this + 320);
      unint64_t v5 = v336;
    }
    else
    {
      double v26 = *((double *)this + 25);
      int v28 = (float64x2_t *)*((void *)this + 5);
      uint64_t v27 = *((void *)this + 6);
      if (*((void *)this + 41) != v27)
      {
        double v333 = *((double *)this + 25);
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v7, v27, 1);
        double v26 = v333;
        uint64_t v27 = *((void *)this + 41);
      }
      unint64_t v29 = *v7;
      if (v27 >= 0) {
        uint64_t v30 = v27;
      }
      else {
        uint64_t v30 = v27 + 1;
      }
      int64_t v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
      if (v27 >= 2)
      {
        int64_t v32 = 0;
        uint64_t v33 = *v7;
        std::string v34 = v28;
        do
        {
          float64x2_t v35 = *v34++;
          *v33++ = vmulq_n_f64(v35, v26);
          v32 += 2;
        }
        while (v32 < v31);
      }
      BOOL v36 = __OFSUB__(v27, v31);
      uint64_t v37 = v27 - v31;
      if (!((v37 < 0) ^ v36 | (v37 == 0)))
      {
        uint64_t v38 = v30 >> 1;
        long long v39 = v28[v30 >> 1].f64;
        uint64_t v40 = v29[v38].f64;
        do
        {
          double v41 = *v39++;
          *v40++ = v26 * v41;
          --v37;
        }
        while (v37);
      }
      double v42 = *((double *)this + 25) * *((double *)this + 11);
    }
    *((double *)this + 24) = v42;
    if (v5 < 2) {
      break;
    }
    BOOL v60 = v2 >= 3 || v13 <= v42;
    if (v60 && v2 != 0) {
      goto LABEL_95;
    }
    v357.tv_sec = (__darwin_time_t)v11;
    if (!*((void *)this + 39))
    {
      double v64 = 0.0;
LABEL_44:
      double v66 = 0.0;
      goto LABEL_45;
    }
    *(void *)&v351[8] = *((void *)this + 38);
    v352 = &v357;
    double v62 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v351);
    uint64_t v63 = *((void *)this + 39);
    v357.tv_sec = (__darwin_time_t)v7;
    *(void *)&v357.__darwin_suseconds_t tv_usec = v11;
    double v64 = sqrt(v62);
    if (!v63) {
      goto LABEL_44;
    }
    float v65 = *v11;
    *(void *)&v351[8] = *v7;
    v352 = (timeval *)v65;
    v354 = &v357;
    double v66 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v351);
LABEL_45:
    double v67 = v66 / v64;
    if (v66 / v64 <= 0.0) {
      goto LABEL_95;
    }
    v357.tv_sec = (__darwin_time_t)v6;
    *(void *)&v357.__darwin_suseconds_t tv_usec = v11;
    double v68 = 0.0;
    double v69 = 0.0;
    if (*((void *)this + 39))
    {
      uint64_t v70 = (timeval *)*v11;
      *(void *)&v351[8] = *v6;
      v352 = v70;
      v354 = &v357;
      double v69 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v351);
    }
    double v71 = v69 / v64;
    double v72 = *((double *)this + 24);
    double v73 = v64 * v71;
    double v74 = v64 * v67 + v73 + (v72 - v13) * -2.0;
    double v75 = v73 * -2.0 - (v64 * v67 - (v72 - v13) * 3.0);
    double v76 = v72 >= v13 ? v13 : *((double *)this + 24);
    double v77 = 1.0;
    double v78 = v13 < v72 ? 0.0 : 1.0;
    uint64_t v79 = 32;
    do
    {
      double v80 = (v77 + v68) * 0.5;
      double v81 = v13 + v73 * v80 + v75 * v80 * v80 + v80 * (v74 * v80) * v80;
      if (v81 < v76) {
        double v78 = (v77 + v68) * 0.5;
      }
      if (v77 - v68 < 0.000001) {
        break;
      }
      if (v81 < v76) {
        double v76 = v13 + v73 * v80 + v75 * v80 * v80 + v80 * (v74 * v80) * v80;
      }
      if (v73 + (v75 + v75) * v80 + v74 * 3.0 * v80 * v80 > 0.0) {
        double v77 = (v77 + v68) * 0.5;
      }
      else {
        double v68 = (v77 + v68) * 0.5;
      }
      --v79;
    }
    while (v79);
    double v82 = v64 * v78;
    BOOL v83 = v64 * v78 < v64 * 0.1 || v2 == 2;
    BOOL v84 = v83;
    v3 |= v84;
    if (v82 >= v64 * 0.8 && v72 >= v13) {
      goto LABEL_95;
    }
    double v86 = v82 / v64;
    *((double *)this + 14) = v82 / v64 * *((double *)this + 14);
    double v87 = v12 - v82 / v64;
    uint64_t v88 = *((void *)this + 38);
    uint64_t v89 = *((void *)this + 3);
    uint64_t v90 = *((void *)this + 4);
    if (v90 >= 0) {
      uint64_t v91 = *((void *)this + 4);
    }
    else {
      uint64_t v91 = v90 + 1;
    }
    int64_t v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
    if (v90 >= 2)
    {
      int64_t v93 = 0;
      uint64_t v94 = (float64x2_t *)*((void *)this + 3);
      uint64_t v95 = (float64x2_t *)*((void *)this + 38);
      do
      {
        float64x2_t v96 = *v95++;
        *uint64_t v94 = vsubq_f64(*v94, vmulq_n_f64(v96, v87));
        ++v94;
        v93 += 2;
      }
      while (v93 < v92);
    }
    BOOL v60 = v90 <= v92;
    uint64_t v97 = v90 - v92;
    if (!v60)
    {
      uint64_t v98 = v91 >> 1;
      uint64_t v99 = (double *)(v88 + 16 * v98);
      timeval v100 = (double *)(v89 + 16 * v98);
      do
      {
        double v101 = *v99++;
        *timeval v100 = *v100 - v87 * v101;
        ++v100;
        --v97;
      }
      while (v97);
    }
    uint64_t v102 = *((void *)this + 38);
    uint64_t v103 = *((void *)this + 39);
    if (v103 >= 0) {
      uint64_t v104 = *((void *)this + 39);
    }
    else {
      uint64_t v104 = v103 + 1;
    }
    int64_t v105 = v104 & 0xFFFFFFFFFFFFFFFELL;
    if (v103 >= 2)
    {
      int64_t v106 = 0;
      long long v107 = (float64x2_t *)*((void *)this + 38);
      do
      {
        *long long v107 = vmulq_n_f64(*v107, v86);
        ++v107;
        v106 += 2;
      }
      while (v106 < v105);
    }
    BOOL v60 = v103 <= v105;
    uint64_t v108 = v103 - v105;
    if (!v60)
    {
      uint64_t v109 = (double *)(v102 + 16 * (v104 >> 1));
      do
      {
        *uint64_t v109 = v86 * *v109;
        ++v109;
        --v108;
      }
      while (v108);
    }
    ++v2;
  }
  int v3 = 0;
LABEL_95:
  double v110 = turi::optimization::compute_residual(v7);
  if ((*(void *)&v110 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_287:
    int v111 = 7;
    goto LABEL_289;
  }
  if (v110 >= *((double *)this + 46))
  {
    if (v5)
    {
      unint64_t v112 = (v5 - 1) % v337;
      uint64_t v113 = *((void *)this + 30);
      unint64_t v114 = *((void *)this + 29) + 8 * v113 * v112;
      uint64_t v115 = *((void *)this + 38);
      uint64_t v116 = (v114 >> 3) & 1;
      if (v116 >= v113) {
        uint64_t v116 = *((void *)this + 30);
      }
      if ((v114 & 7) != 0) {
        uint64_t v116 = *((void *)this + 30);
      }
      uint64_t v117 = v113 - v116;
      if (v113 >= v116) {
        uint64_t v118 = v113 - v116;
      }
      else {
        uint64_t v118 = v117 + 1;
      }
      unint64_t v119 = v118 & 0xFFFFFFFFFFFFFFFELL;
      if (v116 >= 1)
      {
        uint64_t v120 = 0;
        unint64_t v121 = (uint64_t *)*((void *)this + 38);
        uint64_t v122 = v116;
        do
        {
          uint64_t v123 = *v121++;
          *(void *)(v114 + 8 * v120++) = v123;
          --v122;
        }
        while (v122);
      }
      int64_t v124 = v119 + v116;
      if (v117 > 1)
      {
        int v125 = (long long *)(v115 + 8 * v116);
        uint64_t v126 = v116;
        do
        {
          long long v127 = *v125++;
          *(_OWORD *)(v114 + 8 * v126) = v127;
          v126 += 2;
        }
        while (v126 < v124);
      }
      if (v124 < v113)
      {
        unint64_t v128 = v117 - v119;
        char v129 = (uint64_t *)(v115 + 16 * (v118 >> 1) + 8 * v116);
        do
        {
          uint64_t v130 = *v129++;
          *(void *)(v114 + 8 * v124++) = v130;
          --v128;
        }
        while (v128);
      }
      uint64_t v131 = *((void *)this + 27);
      unint64_t v132 = *((void *)this + 26) + 8 * v131 * v112;
      uint64_t v133 = *((void *)this + 40);
      uint64_t v134 = *((void *)this + 44);
      uint64_t v135 = (v132 >> 3) & 1;
      if (v135 >= v131) {
        uint64_t v135 = *((void *)this + 27);
      }
      if ((v132 & 7) != 0) {
        uint64_t v135 = *((void *)this + 27);
      }
      uint64_t v136 = v131 - v135;
      if (v131 >= v135) {
        uint64_t v137 = v131 - v135;
      }
      else {
        uint64_t v137 = v136 + 1;
      }
      unint64_t v138 = v137 & 0xFFFFFFFFFFFFFFFELL;
      if (v135 >= 1)
      {
        uint64_t v139 = 0;
        uint64_t v140 = (double *)*((void *)this + 40);
        unsigned int v141 = (double *)*((void *)this + 44);
        uint64_t v142 = v135;
        do
        {
          double v143 = *v140++;
          double v144 = v143;
          double v145 = *v141++;
          *(double *)(v132 + 8 * v139++) = v144 - v145;
          --v142;
        }
        while (v142);
      }
      int64_t v146 = v138 + v135;
      if (v136 > 1)
      {
        unsigned int v147 = (float64x2_t *)(v134 + 8 * v135);
        uint64_t v148 = v135;
        uint64_t v149 = (float64x2_t *)(v133 + 8 * v135);
        do
        {
          float64x2_t v150 = *v149++;
          float64x2_t v151 = v150;
          float64x2_t v152 = *v147++;
          *(float64x2_t *)(v132 + 8 * v148) = vsubq_f64(v151, v152);
          v148 += 2;
        }
        while (v148 < v146);
      }
      if (v146 < v131)
      {
        unint64_t v153 = v136 - v138;
        uint64_t v154 = 16 * (v137 >> 1) + 8 * v135;
        unsigned int v155 = (double *)(v134 + v154);
        unint64_t v156 = (double *)(v133 + v154);
        do
        {
          double v157 = *v156++;
          double v158 = v157;
          double v159 = *v155++;
          *(double *)(v132 + 8 * v146++) = v158 - v159;
          --v153;
        }
        while (v153);
      }
      unint64_t v160 = (char *)*((void *)this + 27);
      uint64_t v161 = *((void *)this + 26) + 8 * (void)v160 * v112;
      *(void *)v351 = v11;
      *(void *)&v351[8] = v161;
      *(void *)&v351[16] = v160;
      v353 = (char *)this + 208;
      v354 = 0;
      unint64_t v355 = (v5 - 1) % v337;
      v356 = v160;
      if (v160)
      {
        *(void *)&v357.__darwin_suseconds_t tv_usec = *v11;
        uint64_t v358 = v161;
        v360 = v160;
        v361 = v351;
        double v162 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const>>,3,0>::run((uint64_t)&v357);
      }
      else
      {
        double v162 = 0.0;
      }
      unint64_t v335 = (v5 - 1) % v337;
      *(double *)(*((void *)this + 34) + 8 * v112) = 1.0 / v162;
      atomic_ullong *volatile v212 = (void *)((char *)this + 256);
      unsigned int v214 = (long long *)*((void *)this + 40);
      uint64_t v213 = *((void *)this + 41);
      if (*((void *)this + 33) != v213)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)this + 32, v213, 1);
        uint64_t v213 = *((void *)this + 33);
      }
      atomic_ullong *volatile v215 = (_OWORD *)*v212;
      if (v213 >= 0) {
        uint64_t v216 = v213;
      }
      else {
        uint64_t v216 = v213 + 1;
      }
      int64_t v217 = v216 & 0xFFFFFFFFFFFFFFFELL;
      if (v213 >= 2)
      {
        int64_t v218 = 0;
        uint64_t v219 = (_OWORD *)*v212;
        uint64_t v220 = v214;
        do
        {
          long long v221 = *v220++;
          *v219++ = v221;
          v218 += 2;
        }
        while (v218 < v217);
      }
      BOOL v36 = __OFSUB__(v213, v217);
      uint64_t v222 = v213 - v217;
      if (!((v222 < 0) ^ v36 | (v222 == 0)))
      {
        uint64_t v223 = v216 >> 1;
        v224 = (uint64_t *)&v214[v216 >> 1];
        atomic_ullong *volatile v225 = &v215[v223];
        do
        {
          uint64_t v226 = *v224++;
          *v225++ = v226;
          --v222;
        }
        while (v222);
      }
      if (v337 >= v5) {
        unint64_t v227 = v5;
      }
      else {
        unint64_t v227 = v337;
      }
      for (uint64_t i = 0; i != v227; ++i)
      {
        unint64_t v229 = (v335 + v337 - i) % v337;
        uint64_t v230 = *((void *)this + 33);
        double v231 = *(double *)(*((void *)this + 34) + 8 * v229);
        unint64_t v232 = *((void *)this + 30);
        uint64_t v233 = *((void *)this + 29) + 8 * v232 * v229;
        *(void *)v351 = v233;
        *(void *)&v351[8] = v232;
        v352 = (timeval *)((char *)this + 232);
        v353 = 0;
        v354 = (timeval *)v229;
        unint64_t v355 = v232;
        v356 = (char *)this + 256;
        atomic_ullong *volatile v234 = (unsigned char *)*((void *)this + 32);
        if (v230)
        {
          *(void *)&v357.__darwin_suseconds_t tv_usec = v233;
          uint64_t v358 = v232;
          v359 = v234;
          v361 = v351;
          double v235 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v357);
          atomic_ullong *volatile v234 = (unsigned char *)*((void *)this + 32);
          uint64_t v230 = *((void *)this + 33);
        }
        else
        {
          double v235 = 0.0;
        }
        double v236 = v231 * v235;
        *(double *)(*((void *)this + 36) + 8 * v229) = v236;
        uint64_t v237 = *((void *)this + 26) + 8 * *((void *)this + 27) * v229;
        if (v230 >= 0) {
          uint64_t v238 = v230;
        }
        else {
          uint64_t v238 = v230 + 1;
        }
        int64_t v239 = v238 & 0xFFFFFFFFFFFFFFFELL;
        if (v230 >= 2)
        {
          int64_t v240 = 0;
          atomic_ullong *volatile v241 = (float64x2_t *)v234;
          do
          {
            *atomic_ullong *volatile v241 = vsubq_f64(*v241, vmulq_n_f64(*(float64x2_t *)(v237 + 8 * v240), v236));
            ++v241;
            v240 += 2;
          }
          while (v240 < v239);
        }
        BOOL v60 = v230 <= v239;
        uint64_t v242 = v230 - v239;
        if (!v60)
        {
          atomic_ullong *volatile v243 = (double *)&v234[16 * (v238 >> 1)];
          do
          {
            *atomic_ullong *volatile v243 = *v243 - v236 * *(double *)(v237 + 8 * v239);
            ++v243;
            ++v239;
            --v242;
          }
          while (v242);
        }
      }
      unint64_t v244 = *((void *)this + 27);
      uint64_t v245 = *((void *)this + 26) + 8 * v244 * v335;
      *(void *)v351 = v245;
      *(void *)&v351[8] = v244;
      v352 = (timeval *)((char *)this + 208);
      v353 = 0;
      v354 = (timeval *)v335;
      unint64_t v355 = v244;
      if (v244)
      {
        *(void *)&v357.__darwin_suseconds_t tv_usec = v245;
        uint64_t v358 = v244;
        v359 = v351;
        double v246 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const>>,3,0>::run((uint64_t)&v357);
      }
      else
      {
        double v246 = 0.0;
      }
      uint64_t v247 = *((void *)this + 33);
      double v248 = 1.0 / (v246 * *(double *)(*((void *)this + 34) + 8 * v335));
      uint64_t v249 = *((void *)this + 32);
      if (v247 >= 0) {
        uint64_t v250 = *((void *)this + 33);
      }
      else {
        uint64_t v250 = v247 + 1;
      }
      int64_t v251 = v250 & 0xFFFFFFFFFFFFFFFELL;
      if (v247 >= 2)
      {
        int64_t v252 = 0;
        atomic_ullong *volatile v253 = (float64x2_t *)*((void *)this + 32);
        do
        {
          *atomic_ullong *volatile v253 = vmulq_n_f64(*v253, v248);
          ++v253;
          v252 += 2;
        }
        while (v252 < v251);
      }
      BOOL v60 = v247 <= v251;
      uint64_t v254 = v247 - v251;
      if (!v60)
      {
        atomic_ullong *volatile v255 = (double *)(v249 + 16 * (v250 >> 1));
        do
        {
          *atomic_ullong *volatile v255 = v248 * *v255;
          ++v255;
          --v254;
        }
        while (v254);
      }
      do
      {
        unint64_t v256 = (v335 + v337 - v227 + 1) % v337;
        uint64_t v257 = *((void *)this + 33);
        double v258 = *(double *)(*((void *)this + 34) + 8 * v256);
        unint64_t v259 = *((void *)this + 27);
        uint64_t v260 = *((void *)this + 26) + 8 * v259 * v256;
        *(void *)v351 = v260;
        *(void *)&v351[8] = v259;
        v352 = (timeval *)((char *)this + 208);
        v353 = 0;
        v354 = (timeval *)v256;
        unint64_t v355 = v259;
        v356 = (char *)this + 256;
        v261 = (unsigned char *)*((void *)this + 32);
        if (v257)
        {
          *(void *)&v357.__darwin_suseconds_t tv_usec = v260;
          uint64_t v358 = v259;
          v359 = v261;
          v361 = v351;
          double v262 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v357);
          v261 = (unsigned char *)*((void *)this + 32);
          uint64_t v257 = *((void *)this + 33);
        }
        else
        {
          double v262 = 0.0;
        }
        uint64_t v263 = *((void *)this + 29) + 8 * *((void *)this + 30) * v256;
        double v264 = *(double *)(*((void *)this + 36) + 8 * v256) - v258 * v262;
        if (v257 >= 0) {
          uint64_t v265 = v257;
        }
        else {
          uint64_t v265 = v257 + 1;
        }
        int64_t v266 = v265 & 0xFFFFFFFFFFFFFFFELL;
        if (v257 >= 2)
        {
          int64_t v267 = 0;
          atomic_ullong *volatile v268 = (float64x2_t *)v261;
          do
          {
            *atomic_ullong *volatile v268 = vaddq_f64(*v268, vmulq_n_f64(*(float64x2_t *)(v263 + 8 * v267), v264));
            ++v268;
            v267 += 2;
          }
          while (v267 < v266);
        }
        BOOL v60 = v257 <= v266;
        uint64_t v269 = v257 - v266;
        if (!v60)
        {
          atomic_ullong *volatile v270 = (double *)&v261[16 * (v265 >> 1)];
          do
          {
            *atomic_ullong *volatile v270 = v264 * *(double *)(v263 + 8 * v266) + *v270;
            ++v270;
            ++v266;
            --v269;
          }
          while (v269);
        }
        --v227;
      }
      while (v227);
      double v271 = *((double *)this + 24);
      BOOL v273 = v271 > v13 || v336 == 1;
      if (((v273 | v3) & 1) == 0)
      {
        v357.tv_sec = (__darwin_time_t)v7;
        *(void *)&v357.__darwin_suseconds_t tv_usec = v6;
        double v274 = 0.0;
        double v275 = 0.0;
        if (*((void *)this + 45))
        {
          atomic_ullong *volatile v276 = (timeval *)*v6;
          *(void *)&v351[8] = *v7;
          v352 = v276;
          v354 = &v357;
          double v275 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v351);
        }
        v357.tv_sec = (__darwin_time_t)v7;
        if (*((void *)this + 41))
        {
          *(void *)&v351[8] = *v7;
          v352 = &v357;
          double v274 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v351);
        }
        double v277 = v275 * v275;
        double v278 = v274 * 0.9;
        v357.tv_sec = (__darwin_time_t)v6;
        if (*((void *)this + 45))
        {
          *(void *)&v351[8] = *v6;
          v352 = &v357;
          double v279 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v351);
        }
        else
        {
          double v279 = 0.0;
        }
        uint64_t v7 = (float64x2_t **)((char *)this + 320);
        if (v277 <= v278 * v279)
        {
          double v298 = *((double *)this + 14);
          if (v298 < 1.0)
          {
            double v298 = fmin(v298 * 1.25, 1.0);
            *((double *)this + 14) = v298;
          }
          goto LABEL_260;
        }
        double v271 = *((double *)this + 24);
      }
      uint64_t v280 = *((void *)this + 18);
      double v281 = *((double *)this + 14);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v344, (uint64_t)v4);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v343, (uint64_t)v7);
      v341 = 0;
      uint64_t v342 = 0;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v341, *((void *)this + 33), 1);
      atomic_ullong *volatile v283 = (float64x2_t *)*((void *)this + 32);
      uint64_t v282 = *((void *)this + 33);
      if (v342 != v282)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v341, v282, 1);
        uint64_t v282 = v342;
      }
      v284 = (char *)v341;
      if (v282 >= 0) {
        uint64_t v285 = v282;
      }
      else {
        uint64_t v285 = v282 + 1;
      }
      int64_t v286 = v285 & 0xFFFFFFFFFFFFFFFELL;
      if (v282 >= 2)
      {
        int64_t v287 = 0;
        atomic_ullong *volatile v288 = (float64x2_t *)v341;
        v289 = v283;
        do
        {
          float64x2_t v290 = *v289++;
          *v288++ = vnegq_f64(v290);
          v287 += 2;
        }
        while (v287 < v286);
      }
      BOOL v36 = __OFSUB__(v282, v286);
      uint64_t v291 = v282 - v286;
      if (!((v291 < 0) ^ v36 | (v291 == 0)))
      {
        uint64_t v292 = v285 >> 1;
        int v293 = v283[v285 >> 1].f64;
        unsigned __int8 v294 = (double *)&v284[16 * v292];
        do
        {
          double v295 = *v293++;
          *v294++ = -v295;
          --v291;
        }
        while (v291);
      }
      double v296 = *((double *)this + 25);
      v297 = (std::__shared_weak_count *)*((void *)this + 21);
      uint64_t v339 = *((void *)this + 20);
      v340 = v297;
      if (v297) {
        atomic_fetch_add_explicit(&v297->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::optimization::more_thuente<Eigen::Matrix<double,-1,1,0,-1,1>>(v280, (float64x2_t **)v344, v343, &v341, &v339, 20, (uint64_t)v351, v281, v271, v296);
      if (v340) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v340);
      }
      free(v341);
      free(v343[0]);
      free(v344[0]);
      if (v351[8])
      {
        double v298 = *(double *)v351;
        *((void *)this + 14) = *(void *)v351;
        *((int64x2_t *)this + 6) = vaddw_s32(*((int64x2_t *)this + 6), *(int32x2_t *)&v351[12]);
LABEL_260:
        v302 = (float64x2_t *)*((void *)this + 32);
        uint64_t v301 = *((void *)this + 33);
        if (*((void *)this + 39) != v301)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v11, v301, 1);
          uint64_t v301 = *((void *)this + 39);
        }
        double v303 = -v298;
        v304 = *v11;
        if (v301 >= 0) {
          uint64_t v305 = v301;
        }
        else {
          uint64_t v305 = v301 + 1;
        }
        int64_t v306 = v305 & 0xFFFFFFFFFFFFFFFELL;
        if (v301 >= 2)
        {
          int64_t v307 = 0;
          v308 = *v11;
          v309 = v302;
          do
          {
            float64x2_t v310 = *v309++;
            *v308++ = vmulq_n_f64(v310, v303);
            v307 += 2;
          }
          while (v307 < v306);
        }
        BOOL v36 = __OFSUB__(v301, v306);
        uint64_t v311 = v301 - v306;
        if (!((v311 < 0) ^ v36 | (v311 == 0)))
        {
          uint64_t v312 = v305 >> 1;
          v313 = v302[v305 >> 1].f64;
          v314 = v304[v312].f64;
          do
          {
            double v315 = *v313++;
            *v314++ = v315 * v303;
            --v311;
          }
          while (v311);
        }
        uint64_t v316 = *((void *)this + 38);
        uint64_t v317 = *((void *)this + 3);
        uint64_t v318 = *((void *)this + 4);
        if (v318 >= 0) {
          uint64_t v319 = *((void *)this + 4);
        }
        else {
          uint64_t v319 = v318 + 1;
        }
        int64_t v320 = v319 & 0xFFFFFFFFFFFFFFFELL;
        if (v318 >= 2)
        {
          int64_t v321 = 0;
          v322 = (float64x2_t *)*((void *)this + 3);
          v323 = (float64x2_t *)*((void *)this + 38);
          do
          {
            float64x2_t v324 = *v323++;
            float64x2_t *v322 = vaddq_f64(v324, *v322);
            ++v322;
            v321 += 2;
          }
          while (v321 < v320);
        }
        BOOL v60 = v318 <= v320;
        uint64_t v325 = v318 - v320;
        if (!v60)
        {
          uint64_t v326 = v319 >> 1;
          v327 = (double *)(v316 + 16 * v326);
          v328 = (double *)(v317 + 16 * v326);
          do
          {
            double v329 = *v327++;
            double *v328 = v329 + *v328;
            ++v328;
            --v325;
          }
          while (v325);
        }
LABEL_280:
        v357.tv_sec = (__darwin_time_t)v11;
        if (!*((void *)this + 39)
          || (*(void *)&v351[8] = *v11,
              v352 = &v357,
              Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v351) <= 1.0e-20))
        {
LABEL_288:
          int v111 = 6;
          goto LABEL_289;
        }
        uint64_t v330 = *((void *)this + 39);
        if (v330 < 1)
        {
LABEL_286:
          *((_DWORD *)this + 3CoreML::Specification::Model::New(this, 0) = 9;
          gettimeofday((timeval *)v351, 0);
          uint64_t result = 0;
          *((double *)this + 2) = *((double *)this + 2)
                                + (double)(*(_DWORD *)&v351[8] - *((_DWORD *)this + 34)) / 1000000.0
                                + (double)(uint64_t)(*(void *)v351 - *((void *)this + 16));
          *((double *)this + 1CoreML::Specification::Model::New(this, 0) = v110;
          ++*((void *)this + 1);
          return result;
        }
        v331 = (void *)*((void *)this + 38);
        while ((*v331 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          ++v331;
          if (!--v330) {
            goto LABEL_286;
          }
        }
        goto LABEL_287;
      }
    }
    else
    {
      uint64_t v163 = *((void *)this + 18);
      double v164 = *((double *)this + 14);
      double v165 = *((double *)this + 24);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v350, (uint64_t)v4);
      Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v349, (uint64_t)v7);
      v347 = 0;
      uint64_t v348 = 0;
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v347, *((void *)this + 41), 1);
      unsigned int v167 = (float64x2_t *)*((void *)this + 40);
      uint64_t v166 = *((void *)this + 41);
      if (v348 != v166)
      {
        Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(&v347, v166, 1);
        uint64_t v166 = v348;
      }
      unint64_t v168 = (char *)v347;
      if (v166 >= 0) {
        uint64_t v169 = v166;
      }
      else {
        uint64_t v169 = v166 + 1;
      }
      int64_t v170 = v169 & 0xFFFFFFFFFFFFFFFELL;
      if (v166 >= 2)
      {
        int64_t v171 = 0;
        unint64_t v172 = (float64x2_t *)v347;
        unsigned int v173 = v167;
        do
        {
          float64x2_t v174 = *v173++;
          *v172++ = vnegq_f64(v174);
          v171 += 2;
        }
        while (v171 < v170);
      }
      BOOL v36 = __OFSUB__(v166, v170);
      uint64_t v175 = v166 - v170;
      if (!((v175 < 0) ^ v36 | (v175 == 0)))
      {
        uint64_t v176 = v169 >> 1;
        unsigned int v177 = v167[v169 >> 1].f64;
        unint64_t v178 = (double *)&v168[16 * v176];
        do
        {
          double v179 = *v177++;
          *v178++ = -v179;
          --v175;
        }
        while (v175);
      }
      double v180 = *((double *)this + 25);
      unsigned int v181 = (std::__shared_weak_count *)*((void *)this + 21);
      uint64_t v345 = *((void *)this + 20);
      v346 = v181;
      if (v181) {
        atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::optimization::more_thuente<Eigen::Matrix<double,-1,1,0,-1,1>>(v163, (float64x2_t **)v350, v349, &v347, &v345, 20, (uint64_t)v351, v164, v165, v180);
      if (v346) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v346);
      }
      free(v347);
      free(v349[0]);
      free(v350[0]);
      double v182 = *(double *)v351;
      *((void *)this + 14) = *(void *)v351;
      *((int64x2_t *)this + 6) = vaddw_s32(*((int64x2_t *)this + 6), *(int32x2_t *)&v351[12]);
      if (v351[8])
      {
        unint64_t v184 = (float64x2_t *)*((void *)this + 40);
        uint64_t v183 = *((void *)this + 41);
        if (*((void *)this + 39) != v183)
        {
          Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(v11, v183, 1);
          uint64_t v183 = *((void *)this + 39);
        }
        double v185 = -v182;
        unint64_t v186 = *v11;
        if (v183 >= 0) {
          uint64_t v187 = v183;
        }
        else {
          uint64_t v187 = v183 + 1;
        }
        int64_t v188 = v187 & 0xFFFFFFFFFFFFFFFELL;
        if (v183 >= 2)
        {
          int64_t v189 = 0;
          unint64_t v190 = *v11;
          unsigned int v191 = v184;
          do
          {
            float64x2_t v192 = *v191++;
            *v190++ = vmulq_n_f64(v192, v185);
            v189 += 2;
          }
          while (v189 < v188);
        }
        BOOL v36 = __OFSUB__(v183, v188);
        uint64_t v193 = v183 - v188;
        if (!((v193 < 0) ^ v36 | (v193 == 0)))
        {
          uint64_t v194 = v187 >> 1;
          unint64_t v195 = v184[v187 >> 1].f64;
          unsigned int v196 = v186[v194].f64;
          do
          {
            double v197 = *v195++;
            *v196++ = v197 * v185;
            --v193;
          }
          while (v193);
        }
        uint64_t v198 = *((void *)this + 38);
        uint64_t v199 = *((void *)this + 3);
        uint64_t v200 = *((void *)this + 4);
        if (v200 >= 0) {
          uint64_t v201 = *((void *)this + 4);
        }
        else {
          uint64_t v201 = v200 + 1;
        }
        int64_t v202 = v201 & 0xFFFFFFFFFFFFFFFELL;
        if (v200 >= 2)
        {
          int64_t v203 = 0;
          unsigned int v204 = (float64x2_t *)*((void *)this + 3);
          atomic_ullong *volatile v205 = (float64x2_t *)*((void *)this + 38);
          do
          {
            float64x2_t v206 = *v205++;
            *unsigned int v204 = vaddq_f64(v206, *v204);
            ++v204;
            v203 += 2;
          }
          while (v203 < v202);
        }
        BOOL v60 = v200 <= v202;
        uint64_t v207 = v200 - v202;
        if (!v60)
        {
          uint64_t v208 = v201 >> 1;
          uint64_t v209 = (double *)(v198 + 16 * v208);
          atomic_ullong *volatile v210 = (double *)(v199 + 16 * v208);
          do
          {
            double v211 = *v209++;
            *atomic_ullong *volatile v210 = v211 + *v210;
            ++v210;
            --v207;
          }
          while (v207);
        }
        goto LABEL_280;
      }
    }
    *((_DWORD *)this + 3CoreML::Specification::Model::New(this, 0) = 8;
    gettimeofday(&v357, 0);
    double v299 = (double)(v357.tv_sec - *((void *)this + 16));
    __darwin_suseconds_t tv_usec = v357.tv_usec;
    goto LABEL_290;
  }
  int v111 = 2;
LABEL_289:
  *((_DWORD *)this + 3CoreML::Specification::Model::New(this, 0) = v111;
  gettimeofday((timeval *)v351, 0);
  double v299 = (double)(uint64_t)(*(void *)v351 - *((void *)this + 16));
  __darwin_suseconds_t tv_usec = *(_DWORD *)&v351[8];
LABEL_290:
  *((double *)this + 2) = *((double *)this + 2) + (double)(tv_usec - *((_DWORD *)this + 34)) / 1000000.0 + v299;
  return 1;
}

void sub_2243728E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,void *a33,uint64_t a34,void *a35)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  free(a31);
  free(a33);
  free(a35);
  _Unwind_Resume(a1);
}

void turi::optimization::lbfgs_compat(std::shared_ptr<turi::optimization::first_order_opt_interface>,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&,std::shared_ptr<turi::optimization::smooth_regularizer_interface> const&)::$_0::operator()(turi::table_printer **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v60[37] = *MEMORY[0x263EF8340];
  *(_DWORD *)a3 = -1;
  *(void *)(a3 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = (void *)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  turi::sframe::sframe((turi::sframe *)(a3 + 104));
  *(_DWORD *)a3 = *(void *)a2;
  *(void *)(a3 + 8) = *(void *)(a2 + 8);
  uint64_t v8 = *(long long **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  if (*(void *)(a3 + 24) != v7)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a3 + 16), v7, 1);
    uint64_t v7 = *(void *)(a3 + 24);
  }
  uint64_t v9 = (_OWORD *)*v6;
  if (v7 >= 0) {
    uint64_t v10 = v7;
  }
  else {
    uint64_t v10 = v7 + 1;
  }
  int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (v7 >= 2)
  {
    int64_t v12 = 0;
    double v13 = (_OWORD *)*v6;
    double v14 = v8;
    do
    {
      long long v15 = *v14++;
      *v13++ = v15;
      v12 += 2;
    }
    while (v12 < v11);
  }
  BOOL v16 = __OFSUB__(v7, v11);
  uint64_t v17 = v7 - v11;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = v10 >> 1;
    unsigned int v19 = (uint64_t *)&v8[v10 >> 1];
    double v20 = &v9[v18];
    do
    {
      uint64_t v21 = *v19++;
      *v20++ = v21;
      --v17;
    }
    while (v17);
  }
  uint64_t v22 = (void *)(a3 + 32);
  uint64_t v24 = *(long long **)(a2 + 32);
  uint64_t v23 = *(void *)(a2 + 40);
  if (*(void *)(a3 + 40) != v23)
  {
    Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize((void *)(a3 + 32), v23, 1);
    uint64_t v23 = *(void *)(a3 + 40);
  }
  uint64_t v25 = (_OWORD *)*v22;
  if (v23 >= 0) {
    uint64_t v26 = v23;
  }
  else {
    uint64_t v26 = v23 + 1;
  }
  int64_t v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
  if (v23 >= 2)
  {
    int64_t v28 = 0;
    unint64_t v29 = (_OWORD *)*v22;
    uint64_t v30 = v24;
    do
    {
      long long v31 = *v30++;
      *v29++ = v31;
      v28 += 2;
    }
    while (v28 < v27);
  }
  BOOL v16 = __OFSUB__(v23, v27);
  uint64_t v32 = v23 - v27;
  if (!((v32 < 0) ^ v16 | (v32 == 0)))
  {
    uint64_t v33 = v26 >> 1;
    std::string v34 = (uint64_t *)&v24[v26 >> 1];
    float64x2_t v35 = &v25[v33];
    do
    {
      uint64_t v36 = *v34++;
      *v35++ = v36;
      --v32;
    }
    while (v32);
  }
  uint64_t v37 = (void *)(a3 + 48);
  long long v39 = *(long long **)(a2 + 48);
  uint64_t v38 = *(void *)(a2 + 56);
  uint64_t v40 = *(void *)(a2 + 64);
  if (*(void *)(a3 + 56) != v38 || *(void *)(a3 + 64) != v40)
  {
    if (v38) {
      BOOL v42 = v40 == 0;
    }
    else {
      BOOL v42 = 1;
    }
    if (!v42 && 0x7FFFFFFFFFFFFFFFLL / v40 < v38)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      double v59 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v59, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    Eigen::DenseStorage<double,-1,-1,-1,0>::resize((void *)(a3 + 48), v40 * v38, v38, v40);
    uint64_t v38 = *(void *)(a3 + 56);
    uint64_t v40 = *(void *)(a3 + 64);
  }
  uint64_t v43 = (_OWORD *)*v37;
  uint64_t v44 = v38 * v40;
  if (v38 * v40 >= 0) {
    uint64_t v45 = v38 * v40;
  }
  else {
    uint64_t v45 = v44 + 1;
  }
  int64_t v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
  if (v44 >= 2)
  {
    int64_t v47 = 0;
    uint64_t v48 = (_OWORD *)*v37;
    float64x2_t v49 = v39;
    do
    {
      long long v50 = *v49++;
      *v48++ = v50;
      v47 += 2;
    }
    while (v47 < v46);
  }
  BOOL v51 = v44 <= v46;
  uint64_t v52 = v44 - v46;
  if (!v51)
  {
    uint64_t v53 = v45 >> 1;
    unint64_t v54 = (uint64_t *)&v39[v45 >> 1];
    __n128 v55 = &v43[v53];
    do
    {
      uint64_t v56 = *v54++;
      *v55++ = v56;
      --v52;
    }
    while (v52);
  }
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a2 + 72);
  int32x2_t v57 = vmovn_s64(*(int64x2_t *)(a2 + 88));
  *(int32x2_t *)(a3 + 88) = v57;
  *(_DWORD *)(a3 + 96) = v57.i32[0];
  *(_DWORD *)(a3 + 10CoreML::Specification::Model::New(this, 0) = *(_DWORD *)(a2 + 112);
  turi::table_printer::get_tracked_table(*a1, (turi::sframe *)v60);
  turi::sframe::operator=(a3 + 104, (uint64_t)v60);
  turi::sframe::~sframe((turi::sframe *)v60);
}

void sub_224372C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  turi::sframe::~sframe((turi::sframe *)&a9);
  turi::optimization::_solver_return::~_solver_return(v9);
  _Unwind_Resume(a1);
}

void turi::optimization::solver_status::~solver_status(void **this)
{
}

void turi::optimization::more_thuente<Eigen::Matrix<double,-1,1,0,-1,1>>(uint64_t a1@<X0>, float64x2_t **a2@<X1>, void **a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  *(void *)a7 = 0x3FF0000000000000;
  *(unsigned char *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(_DWORD *)(a7 + 12) = 0;
  if (a8 <= 0.000000001)
  {
    unsigned int v19 = (int *)global_logger();
    if (v19[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v19)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      double v20 = (file_logger *)global_logger();
      started = file_logger::start_stream(v20, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 346, 1);
      uint64_t v22 = pthread_getspecific(*((void *)started + 74));
      if (v22 && *((unsigned char *)v22 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)" Error:", 7);
      }
      uint64_t v23 = pthread_getspecific(*((void *)started + 74));
      if (v23 && *((unsigned char *)v23 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)" \nInitial step step less than ", 30);
      }
      uint64_t v24 = file_logger::operator<<<double>((uint64_t)started);
      uint64_t v25 = pthread_getspecific(*(void *)(v24 + 592));
      if (v25 && *((unsigned char *)v25 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25 + 2, (uint64_t)".", 1);
      }
      uint64_t v26 = pthread_getspecific(*(void *)(v24 + 592));
      if (v26)
      {
        if (*((unsigned char *)v26 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(v26[2] - 24) + 16));
          int64_t v27 = std::locale::use_facet(&v178, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
          std::locale::~locale(&v178);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v24);
          if (*(_DWORD *)(v24 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    return;
  }
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v175, (uint64_t)a2);
  double v176 = *(double *)&a3;
  unsigned int v177 = a4;
  if (a4[1])
  {
    uint64_t v17 = *a4;
    double v179 = *a3;
    uint64_t v180 = v17;
    unsigned int v181 = &v176;
    double v18 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v178);
  }
  else
  {
    double v18 = 0.0;
  }
  if (a8 <= 0.0 || v18 >= 1.0e-10)
  {
    unint64_t v29 = (int *)global_logger();
    if (v29[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v29)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v30 = (file_logger *)global_logger();
      long long v31 = file_logger::start_stream(v30, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 359, 1);
      uint64_t v32 = pthread_getspecific(*((void *)v31 + 74));
      if (v32 && *((unsigned char *)v32 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32 + 2, (uint64_t)" Error: Search direction is not a descent direction.", 52);
      }
      uint64_t v33 = pthread_getspecific(*((void *)v31 + 74));
      if (v33 && *((unsigned char *)v33 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33 + 2, (uint64_t)" \nDetected numerical difficulties.", 34);
      }
      std::string v34 = pthread_getspecific(*((void *)v31 + 74));
      if (v34)
      {
        if (*((unsigned char *)v34 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(v34[2] - 24) + 16));
          float64x2_t v35 = std::locale::use_facet(&v178, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
          std::locale::~locale(&v178);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(v31);
          if (*((_DWORD *)v31 + 150) == 7)
          {
            __print_back_trace();
            uint64_t v149 = __cxa_allocate_exception(8uLL);
            *uint64_t v149 = "LOG_FATAL encountered";
            __cxa_throw(v149, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
  }
  double v174 = 0.000000001;
  double v172 = v18;
  double v173 = a9;
  double v171 = 0.000000001;
  double v169 = v18;
  double v170 = a9;
  double v167 = a9;
  double v168 = a8;
  double v166 = v18;
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(&v164, (uint64_t)a3);
  unint64_t v36 = (unint64_t)a3[1];
  *(void *)&v162[1] = 0;
  unint64_t v163 = 0;
  if (v36)
  {
    if (v36 >> 61 || (uint64_t v37 = malloc_type_malloc(8 * v36, 0x1E76AA36uLL)) == 0)
    {
      double v145 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int64_t v146 = std::bad_alloc::bad_alloc(v145);
      __cxa_throw(v146, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    *(void *)&v162[1] = v37;
  }
  unint64_t v153 = (_DWORD *)a7;
  uint64_t v38 = 0;
  int v39 = 0;
  int v40 = 0;
  unint64_t v163 = v36;
  v162[0] = 0;
  double v41 = v18 * 0.0001;
  int v42 = 1;
  double v151 = v18 * 0.7;
  double v152 = -(v18 * 0.7);
  double v150 = -50.0;
  double v43 = -25.0;
  int v44 = 1;
  while (1)
  {
    if (v40)
    {
      double v45 = v174;
      if (v171 >= v174) {
        double v46 = v174;
      }
      else {
        double v46 = v171;
      }
      if (v174 >= v171) {
        double v47 = v174;
      }
      else {
        double v47 = v171;
      }
      double v48 = v168;
    }
    else
    {
      double v45 = v174;
      double v48 = v168;
      double v47 = v168 + (v168 - v174) * 4.0;
      double v46 = v174;
    }
    if (v48 < 0.000000001) {
      double v48 = 0.000000001;
    }
    if (v48 > 25.0) {
      double v48 = 25.0;
    }
    double v157 = v48;
    double v168 = v48;
    double v49 = v47 - v46;
    if ((v44 & 1) == 0 || v40 && v49 <= 0.000000001)
    {
      long long v50 = (int *)global_logger();
      if (v50[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v50)) {
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        }
        BOOL v51 = (file_logger *)global_logger();
        uint64_t v52 = file_logger::start_stream(v51, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 431, 1);
        uint64_t v53 = pthread_getspecific(*((void *)v52 + 74));
        if (v53 && *((unsigned char *)v53 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53 + 2, (uint64_t)"Warning:", 8);
        }
        unint64_t v54 = pthread_getspecific(*((void *)v52 + 74));
        if (v54 && *((unsigned char *)v54 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54 + 2, (uint64_t)" Unusual termination criterion reached.", 39);
        }
        __n128 v55 = pthread_getspecific(*((void *)v52 + 74));
        if (v55 && *((unsigned char *)v55 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55 + 2, (uint64_t)"\nReturning the best step found so far.", 38);
        }
        uint64_t v56 = pthread_getspecific(*((void *)v52 + 74));
        if (v56 && *((unsigned char *)v56 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56 + 2, (uint64_t)" This typically happens when the number of features is much", 59);
        }
        int32x2_t v57 = pthread_getspecific(*((void *)v52 + 74));
        if (v57 && *((unsigned char *)v57 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57 + 2, (uint64_t)" larger than the number of training samples. Consider pruning", 61);
        }
        double v58 = pthread_getspecific(*((void *)v52 + 74));
        if (v58 && *((unsigned char *)v58 + 280)) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58 + 2, (uint64_t)" features manually or increasing the regularization value.", 58);
        }
        double v59 = pthread_getspecific(*((void *)v52 + 74));
        if (v59)
        {
          if (*((unsigned char *)v59 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(v59[2] - 24) + 16));
            BOOL v60 = std::locale::use_facet(&v178, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
            std::locale::~locale(&v178);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush(v52);
            if (*((_DWORD *)v52 + 150) == 7)
            {
              __print_back_trace();
              unsigned int v147 = __cxa_allocate_exception(8uLL);
              void *v147 = "LOG_FATAL encountered";
              __cxa_throw(v147, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
      }
      double v168 = v174;
      double v157 = v174;
      double v45 = v174;
    }
    if (v38 == a6)
    {
LABEL_151:
      char v117 = 1;
      uint64_t v118 = v153;
      goto LABEL_212;
    }
    unint64_t v61 = (float64x2_t *)v175;
    uint64_t v63 = (float64x2_t *)*a4;
    uint64_t v62 = a4[1];
    if (a2[1] != (float64x2_t *)v62)
    {
      Eigen::PlainObjectBase<Eigen::Matrix<double,-1,1,0,-1,1>>::resize(a2, v62, 1);
      uint64_t v62 = (uint64_t)a2[1];
    }
    double v64 = *a2;
    if (v62 >= 0) {
      uint64_t v65 = v62;
    }
    else {
      uint64_t v65 = v62 + 1;
    }
    int64_t v66 = v65 & 0xFFFFFFFFFFFFFFFELL;
    if (v62 >= 2)
    {
      int64_t v67 = 0;
      double v68 = *a2;
      double v69 = v61;
      uint64_t v70 = v63;
      do
      {
        float64x2_t v71 = *v69++;
        float64x2_t v72 = v71;
        float64x2_t v73 = *v70++;
        *v68++ = vaddq_f64(v72, vmulq_n_f64(v73, v157));
        v67 += 2;
      }
      while (v67 < v66);
    }
    BOOL v74 = __OFSUB__(v62, v66);
    uint64_t v75 = v62 - v66;
    if (!((v75 < 0) ^ v74 | (v75 == 0)))
    {
      uint64_t v76 = v65 >> 1;
      f64 = v63[v65 >> 1].f64;
      double v78 = v61[v76].f64;
      uint64_t v79 = v64[v76].f64;
      do
      {
        double v80 = *f64++;
        double v81 = v157 * v80;
        double v82 = *v78++;
        *v79++ = v82 + v81;
        --v75;
      }
      while (v75);
    }
    (*(void (**)(uint64_t, float64x2_t **, void **, double *, void, uint64_t))(*(void *)a1 + 32))(a1, a2, &v164, &v167, 0, -1);
    v153[4] = ++v39;
    v153[5] = v39;
    v153[3] = ++v38;
    if (*a5)
    {
      (*(void (**)(void, float64x2_t **, unsigned char *))(*(void *)*a5 + 24))(*a5, a2, &v162[1]);
      double v83 = (*(double (**)(void, float64x2_t **))(*(void *)*a5 + 16))(*a5, a2);
      double v167 = v83 + v167;
      uint64_t v84 = *(void *)&v162[1];
      uint64_t v85 = (char *)v164;
      int64_t v86 = v165;
      if (v165 >= 0) {
        uint64_t v87 = v165;
      }
      else {
        uint64_t v87 = v165 + 1;
      }
      int64_t v88 = v87 & 0xFFFFFFFFFFFFFFFELL;
      if (v165 >= 2)
      {
        int64_t v89 = 0;
        uint64_t v90 = (float64x2_t *)v164;
        uint64_t v91 = *(float64x2_t **)&v162[1];
        do
        {
          float64x2_t v92 = *v91++;
          *uint64_t v90 = vaddq_f64(v92, *v90);
          ++v90;
          v89 += 2;
        }
        while (v89 < v88);
      }
      BOOL v108 = v86 <= v88;
      int64_t v93 = v86 - v88;
      if (!v108)
      {
        uint64_t v94 = v87 >> 1;
        uint64_t v95 = (double *)(v84 + 16 * v94);
        float64x2_t v96 = (double *)&v85[16 * v94];
        do
        {
          double v97 = *v95++;
          *float64x2_t v96 = v97 + *v96;
          ++v96;
          --v93;
        }
        while (v93);
      }
    }
    if (a10 != 1.0)
    {
      double v167 = v167 * a10;
      uint64_t v98 = (char *)v164;
      int64_t v99 = v165;
      if (v165 >= 0) {
        uint64_t v100 = v165;
      }
      else {
        uint64_t v100 = v165 + 1;
      }
      int64_t v101 = v100 & 0xFFFFFFFFFFFFFFFELL;
      if (v165 >= 2)
      {
        int64_t v102 = 0;
        uint64_t v103 = (float64x2_t *)v164;
        do
        {
          float64x2_t *v103 = vmulq_n_f64(*v103, a10);
          ++v103;
          v102 += 2;
        }
        while (v102 < v101);
      }
      BOOL v108 = v99 <= v101;
      int64_t v104 = v99 - v101;
      if (!v108)
      {
        int64_t v105 = (double *)&v98[16 * (v100 >> 1)];
        do
        {
          double *v105 = *v105 * a10;
          ++v105;
          --v104;
        }
        while (v104);
      }
    }
    double v176 = COERCE_DOUBLE(&v164);
    unsigned int v177 = a4;
    if (a4[1])
    {
      uint64_t v106 = *a4;
      double v179 = v164;
      uint64_t v180 = v106;
      unsigned int v181 = &v176;
      double v107 = Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)&v178);
    }
    else
    {
      double v107 = 0.0;
    }
    double v166 = v107;
    double v45 = v168;
    if (v162[0]) {
      break;
    }
    if ((v44 & 1) == 0) {
      goto LABEL_152;
    }
LABEL_122:
    double v109 = a9 + v168 * v41;
    if (v168 >= 25.0 && v167 <= v109 && v107 <= v41)
    {
      uint64_t v130 = (int *)global_logger();
      uint64_t v118 = v153;
      if (v130[169] > 4) {
        goto LABEL_186;
      }
      if (cppipc::must_cancel((cppipc *)v130)) {
        goto LABEL_219;
      }
      uint64_t v131 = (file_logger *)global_logger();
      unint64_t v132 = file_logger::start_stream(v131, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 491, 1);
      uint64_t v133 = pthread_getspecific(*((void *)v132 + 74));
      if (v133 && *((unsigned char *)v133 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133 + 2, (uint64_t)"Warning: Reached max step size.", 31);
      }
      uint64_t v134 = pthread_getspecific(*((void *)v132 + 74));
      if (!v134
        || !v134[280]
        || (std::endl[abi:ne180100]<char,std::char_traits<char>>((void *)v134 + 2),
            file_logger::stream_flush(v132),
            *((_DWORD *)v132 + 150) != 7))
      {
LABEL_186:
        char v117 = 1;
        goto LABEL_211;
      }
      goto LABEL_221;
    }
    if (v168 <= 0.000000001 && (v167 > v109 || v107 >= v41))
    {
      unsigned int v141 = (int *)global_logger();
      uint64_t v118 = v153;
      if (v141[169] > 4) {
        goto LABEL_210;
      }
      if (cppipc::must_cancel((cppipc *)v141)) {
LABEL_219:
      }
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      uint64_t v142 = (file_logger *)global_logger();
      unint64_t v121 = file_logger::start_stream(v142, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 500, 1);
      double v143 = pthread_getspecific(*((void *)v121 + 74));
      if (v143 && *((unsigned char *)v143 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143 + 2, (uint64_t)"Error: Reached min step size.", 29);
      }
      double v144 = pthread_getspecific(*((void *)v121 + 74));
      if (v144 && *((unsigned char *)v144 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v144 + 2, (uint64_t)" Cannot proceed anymore.", 24);
      }
      char v129 = pthread_getspecific(*((void *)v121 + 74));
      if (!v129 || !v129[280]) {
        goto LABEL_210;
      }
LABEL_209:
      std::endl[abi:ne180100]<char,std::char_traits<char>>((void *)v129 + 2);
      file_logger::stream_flush(v121);
      if (*((_DWORD *)v121 + 150) != 7) {
        goto LABEL_210;
      }
LABEL_221:
      __print_back_trace();
      uint64_t v148 = __cxa_allocate_exception(8uLL);
      *uint64_t v148 = "LOG_FATAL encountered";
      __cxa_throw(v148, MEMORY[0x263F8C1D8], 0);
    }
    if (v162[0] && v49 <= 0.000000001)
    {
      uint64_t v135 = (int *)global_logger();
      uint64_t v118 = v153;
      if (v135[169] > 4) {
        goto LABEL_198;
      }
      if (cppipc::must_cancel((cppipc *)v135)) {
        goto LABEL_219;
      }
      uint64_t v136 = (file_logger *)global_logger();
      uint64_t v137 = file_logger::start_stream(v136, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 512, 1);
      unint64_t v138 = pthread_getspecific(*((void *)v137 + 74));
      if (v138 && *((unsigned char *)v138 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138 + 2, (uint64_t)"Error: \nInterval of uncertainty", 31);
      }
      uint64_t v139 = pthread_getspecific(*((void *)v137 + 74));
      if (v139 && *((unsigned char *)v139 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139 + 2, (uint64_t)"lower than step size limit.", 27);
      }
      uint64_t v140 = pthread_getspecific(*((void *)v137 + 74));
      if (!v140) {
        goto LABEL_198;
      }
      char v117 = v140[280];
      if (!v117) {
        goto LABEL_213;
      }
      std::endl[abi:ne180100]<char,std::char_traits<char>>((void *)v140 + 2);
      file_logger::stream_flush(v137);
      if (*((_DWORD *)v137 + 150) != 7)
      {
LABEL_198:
        char v117 = 0;
        goto LABEL_213;
      }
      goto LABEL_221;
    }
    double v113 = fabs(v107);
    if (v167 <= v109 && v113 <= v152) {
      goto LABEL_151;
    }
    v42 &= v42 ^ 1 | (v107 < v151) | (v167 > v109);
    if ((v42 & 1) != 0 && v167 <= v173 && v167 > v109)
    {
      *(double *)&v178.__locale_ = v167 - v168 * v41;
      double v176 = v173 - v174 * v41;
      double v160 = v107 - v41;
      double v161 = v170 - v171 * v41;
      double v158 = v169 - v41;
      double v159 = v172 - v41;
      int v44 = turi::optimization::cstep((turi::optimization *)&v174, &v176, &v159, &v171, &v161, &v158, &v168, (double *)&v178, v46, v47, &v160, (double *)v162, *(BOOL **)&v150);
      double v115 = v43;
      double v172 = v41 + v159;
      double v173 = v176 + v174 * v41;
      double v169 = v41 + v158;
      double v170 = v161 + v171 * v41;
    }
    else
    {
      int v44 = turi::optimization::cstep((turi::optimization *)&v174, &v173, &v172, &v171, &v170, &v169, &v168, &v167, v46, v47, &v166, (double *)v162, *(BOOL **)&v150);
      double v115 = v43;
    }
    int v40 = v162[0];
    if (v162[0])
    {
      double v43 = vabdd_f64(v171, v174);
      int v40 = 1;
      BOOL v116 = v43 < v150 * 0.66;
      double v150 = v115;
      if (!v116)
      {
        double v168 = v174 + (v171 - v174) * 0.5;
        double v150 = v115;
      }
    }
  }
  BOOL v108 = v168 > v46 && v168 < v47;
  if (v108 && ((v44 ^ 1) & 1) == 0) {
    goto LABEL_122;
  }
LABEL_152:
  unint64_t v119 = (int *)global_logger();
  uint64_t v118 = v153;
  if (v119[169] > 4) {
    goto LABEL_210;
  }
  if (cppipc::must_cancel((cppipc *)v119)) {
    goto LABEL_219;
  }
  uint64_t v120 = (file_logger *)global_logger();
  unint64_t v121 = file_logger::start_stream(v120, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/line_search-inl.hpp", "more_thuente", 476, 1);
  uint64_t v122 = pthread_getspecific(*((void *)v121 + 74));
  if (v122 && *((unsigned char *)v122 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122 + 2, (uint64_t)"Warning: Rounding errors", 24);
  }
  uint64_t v123 = pthread_getspecific(*((void *)v121 + 74));
  if (v123 && *((unsigned char *)v123 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123 + 2, (uint64_t)" prevent further progress. \nThere may not be a step which", 57);
  }
  int64_t v124 = pthread_getspecific(*((void *)v121 + 74));
  if (v124 && *((unsigned char *)v124 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124 + 2, (uint64_t)" satisfies the sufficient decrease and curvature conditions.", 60);
  }
  int v125 = pthread_getspecific(*((void *)v121 + 74));
  if (v125 && *((unsigned char *)v125 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125 + 2, (uint64_t)" \nTolerances may be too small or dataset may be poorly scaled.", 62);
  }
  uint64_t v126 = pthread_getspecific(*((void *)v121 + 74));
  if (v126 && *((unsigned char *)v126 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v126 + 2, (uint64_t)" This typically happens when the number of features is much", 59);
  }
  long long v127 = pthread_getspecific(*((void *)v121 + 74));
  if (v127 && *((unsigned char *)v127 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127 + 2, (uint64_t)" larger than the number of training samples. Consider pruning", 61);
  }
  unint64_t v128 = pthread_getspecific(*((void *)v121 + 74));
  if (v128 && *((unsigned char *)v128 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128 + 2, (uint64_t)" features manually or increasing the regularization value.", 58);
  }
  char v129 = pthread_getspecific(*((void *)v121 + 74));
  if (v129 && v129[280]) {
    goto LABEL_209;
  }
LABEL_210:
  char v117 = 0;
LABEL_211:
  double v45 = v168;
LABEL_212:
  *(double *)uint64_t v118 = v45;
LABEL_213:
  *((unsigned char *)v118 + 8) = v117;
  free(*(void **)&v162[1]);
  free(v164);
  free(v175);
}

void sub_224373CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  std::locale::~locale((std::locale *)(v39 - 200));
  free(a39);
  _Unwind_Resume(a1);
}

void turi::optimization::lbfgs_solver::~lbfgs_solver(void **this)
{
  turi::optimization::lbfgs_solver::~lbfgs_solver(this);
  JUMPOUT(0x22A614FA0);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *this = &unk_26D77AA30;
  free(this[44]);
  free(this[42]);
  free(this[40]);
  free(this[38]);
  free(this[36]);
  free(this[34]);
  free(this[32]);
  free(this[29]);
  free(this[26]);
  unint64_t v2 = (std::__shared_weak_count *)this[21];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)this[19];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  turi::optimization::iterative_optimization_solver::~iterative_optimization_solver(this);
}

void turi::optimization::iterative_optimization_solver::~iterative_optimization_solver(void **this)
{
  *this = &unk_26D77AA88;
  free(this[7]);
  free(this[5]);
  free(this[3]);
}

void turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"cols.size()", 11);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"format.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  int64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/table_printer/table_printer.hpp", "operator()", 387, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  double v13 = v16;
  turi::table_printer::print_progress_row_strs(unsigned long,std::vector<std::string> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224373F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::table_printer::print_row<std::string>(void *a1, void *a2)
{
  v11[2] = *MEMORY[0x263EF8340];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
  v11[0] = (uint64_t)(a1[1] - *a1) >> 5;
  if (v5 != v11[0])
  {
    uint64_t v6 = &v5;
    uint64_t v7 = v11;
    turi::table_printer::print_row<turi::flexible_type>(std::vector<turi::flexible_type> const&)const::{lambda(void)#1}::operator()();
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v6);
  LOBYTE(v5) = 124;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)&v5, 1);
  if (a2[1] != *a2) {
    turi::flexible_type::flexible_type<std::string>((uint64_t)v11);
  }
  turi::table_printer::_p((uint64_t)a1);
  uint64_t v6 = (unint64_t *)*MEMORY[0x263F8C2C8];
  *(unint64_t **)((char *)&v6 + *(v6 - 3)) = *(unint64_t **)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v7 = (void *)(MEMORY[0x263F8C318] + 16);
  if (v9 < 0) {
    operator delete(v8);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v10);
}

void sub_2243744A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void *turi::table_internal::table_printer_element<std::string,void>::print(uint64_t a1, void *a2, unint64_t a3)
{
  return turi::table_internal::_print_string(a2, a3, a1 + 8);
}

void *turi::table_internal::table_printer_element<std::string,void>::table_printer_element(void *a1, long long *a2)
{
  *a1 = &unk_26D77AAB8;
  int v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void turi::table_internal::table_printer_element<std::string,void>::get_value(uint64_t a1@<X8>)
{
  *(void *)(a1 + 5) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 12) = 2;
  operator new();
}

void sub_2243747F0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v3, 0x1012C404EF22A49);
  if (atomic_fetch_add(v2, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v5 = *v1;
    if (*v1)
    {
      if (*(char *)(v5 + 31) < 0) {
        operator delete(*(void **)(v5 + 8));
      }
      MEMORY[0x22A614FA0](v5, 0x1012C404EF22A49);
    }
    uint64_t *v1 = 0;
  }
  uint64_t *v1 = 0;
  *((_DWORD *)v1 + 2) = 0;
  *((unsigned char *)v1 + 12) = 0;
  _Unwind_Resume(a1);
}

void turi::optimization::_solver_return::~_solver_return(void **this)
{
}

void *Eigen::DenseStorage<double,-1,-1,-1,0>::DenseStorage(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = v5 * v4;
  if (v5 * v4)
  {
    if (v6 >> 61 || (uint64_t v7 = malloc_type_malloc(8 * v6, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      int64_t v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v7 = 0;
  }
  *a1 = v7;
  a1[1] = v4;
  a1[2] = v5;
  uint64_t v8 = *(void *)(a2 + 16) * *(void *)(a2 + 8);
  if (v8) {
    memcpy(v7, *(const void **)a2, 8 * v8);
  }
  return a1;
}

void *Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v4 >> 61 || (uint64_t v5 = malloc_type_malloc(8 * v4, 0x1E76AA36uLL)) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      char v9 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v9, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
    }
    unint64_t v4 = *(void *)(a2 + 8);
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a1 = v5;
  a1[1] = v4;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    memcpy(v5, *(const void **)a2, 8 * v6);
  }
  return a1;
}

uint64_t Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t result)
{
  uint64_t v1 = *(void *)(**(void **)(result + 24) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(**(void **)(result + 24) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(**(void **)(result + 24) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  unint64_t v4 = *(float64x2_t **)(result + 8);
  if ((unint64_t)(v1 + 1) >= 3)
  {
    int64_t v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
    float64x2_t v6 = vabsq_f64(*v4);
    if (v1 >= 4)
    {
      int64_t v7 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      float64x2_t v8 = vabsq_f64(v4[1]);
      if ((unint64_t)v1 >= 8)
      {
        char v9 = v4 + 3;
        uint64_t v10 = 4;
        do
        {
          float64x2_t v6 = vmaxq_f64(v6, vabsq_f64(v9[-1]));
          float64x2_t v11 = *v9;
          v9 += 2;
          float64x2_t v8 = vmaxq_f64(v8, vabsq_f64(v11));
          v10 += 4;
        }
        while (v10 < v7);
      }
      float64x2_t v6 = vmaxq_f64(v6, v8);
      if (v5 > v7) {
        float64x2_t v6 = vmaxq_f64(v6, vabsq_f64(*(float64x2_t *)((char *)v4 + 8 * v7)));
      }
    }
    *(void *)&double v12 = *(_OWORD *)&vpmaxq_f64(v6, v6);
    BOOL v13 = v1 <= v5;
    uint64_t v14 = v1 - v5;
    if (!v13)
    {
      f64 = v4[v3 >> 1].f64;
      do
      {
        double v16 = *f64++;
        double v17 = fabs(v16);
        if (v12 < v17) {
          double v12 = v17;
        }
        --v14;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t turi::optimization::cstep(turi::optimization *this, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double a9, double a10, double *a11, double *a12, BOOL *a13)
{
  double v13 = *a7;
  double v14 = *(double *)this;
  if (!*(unsigned char *)a12) {
    goto LABEL_9;
  }
  double v15 = *a4;
  double v16 = *a4 >= v14 ? *(double *)this : *a4;
  if (v13 <= v16) {
    return 0;
  }
  if (v14 >= v15) {
    double v15 = *(double *)this;
  }
  if (v13 >= v15) {
    return 0;
  }
LABEL_9:
  uint64_t v17 = 0;
  if (a10 >= a9)
  {
    double v18 = *a3;
    double v19 = v13 - v14;
    if (*a3 * (v13 - v14) < 0.000000001)
    {
      double v20 = *a11;
      double v21 = fabs(v18);
      double v22 = *a8;
      double v23 = *a2;
      if (*a8 <= *a2)
      {
        double v40 = v18 / v21 * v20;
        if (v40 <= 0.0)
        {
          int v39 = 0;
          int v38 = 1;
          *(unsigned char *)a12 = 1;
          double v47 = v20 + v18 + (v23 - v22) * 3.0 / v19;
          double v48 = fabs(v47);
          double v49 = fabs(v20);
          if (v21 < v49) {
            double v21 = v49;
          }
          if (v48 >= v21) {
            double v21 = v48;
          }
          double v50 = v21 * sqrt(v47 / v21 * (v47 / v21) + -v18 / v21 * (v20 / v21));
          double v51 = -v50;
          if (v13 <= v14) {
            double v51 = v50;
          }
          double v37 = v13 + (v47 + v51 - v20) / (v18 + v51 + v51 - v20) * (v14 - v13);
          double v52 = v13 + v20 / (v20 - v18) * (v14 - v13);
          if (vabdd_f64(v37, v13) <= vabdd_f64(v52, v13)) {
            double v37 = v52;
          }
        }
        else
        {
          double v41 = fabs(v20);
          if (v41 >= v21)
          {
            if (*(unsigned char *)a12)
            {
              int v39 = 0;
              double v53 = *a4 - v13;
              double v54 = (v22 - *a5) * 3.0 / v53;
              double v55 = *a6;
              double v56 = v20 + *a6 + v54;
              double v57 = fabs(v56);
              double v58 = fabs(*a6);
              if (v58 >= v41) {
                double v41 = v58;
              }
              if (v57 < v41) {
                double v57 = v41;
              }
              double v59 = v57 * sqrt(v56 / v57 * (v56 / v57) + -v55 / v57 * (v20 / v57));
              if (v13 <= *a4) {
                double v60 = v59;
              }
              else {
                double v60 = -v59;
              }
              double v37 = v13 + (v56 + v60 - v20) / (v55 + v60 + v60 - v20) * v53;
              int v38 = 1;
            }
            else
            {
              int v38 = 0;
              int v39 = 0;
              if (v13 <= v14) {
                double v37 = a9;
              }
              else {
                double v37 = a10;
              }
            }
          }
          else
          {
            double v42 = v20 + v18 + (v23 - v22) * 3.0 / v19;
            double v43 = fabs(v42);
            if (v21 < v41) {
              double v21 = v41;
            }
            if (v43 >= v21) {
              double v21 = v43;
            }
            double v44 = v21 * sqrt(fmax(v42 / v21 * (v42 / v21) + -v18 / v21 * (v20 / v21), 0.0));
            double v45 = -v44;
            if (v13 <= v14) {
              double v45 = v44;
            }
            if (fabs(v44) > 1.0e-10 || (double v46 = (v42 + v45 - v20) / (v45 + v18 - v20 + v45), v46 >= 0.0))
            {
              double v37 = a10;
              if (v13 <= v14) {
                double v37 = a9;
              }
            }
            else
            {
              double v37 = v13 + v46 * (v14 - v13);
            }
            double v61 = v13 + v20 / (v20 - v18) * (v14 - v13);
            double v62 = vabdd_f64(v13, v37);
            double v63 = vabdd_f64(v13, v61);
            if (*(unsigned char *)a12)
            {
              int v38 = 1;
              if (v62 >= v63) {
                double v37 = v61;
              }
              int v39 = 1;
            }
            else
            {
              int v38 = 0;
              int v39 = 1;
              if (v62 <= v63) {
                double v37 = v61;
              }
            }
          }
        }
        if (v40 < 0.0)
        {
          *a4 = v14;
          *a5 = *a2;
          *a6 = *a3;
          double v13 = *a7;
        }
        *(double *)this = v13;
      }
      else
      {
        double v24 = v23 - v22;
        double v25 = v20 + v18 + (v23 - v22) * 3.0 / v19;
        double v26 = fabs(v25);
        double v27 = fabs(v20);
        if (v21 < v27) {
          double v21 = v27;
        }
        if (v26 >= v21) {
          double v21 = v26;
        }
        double v28 = v21 * sqrt(v25 / v21 * (v25 / v21) + -v18 / v21 * (v20 / v21));
        double v29 = -v28;
        if (v13 >= v14) {
          double v29 = v28;
        }
        double v30 = v14 + (v25 + v29 - v18) / (v20 + v29 + v29 - v18) * v19;
        double v31 = v14 + v18 / (v18 + v24 / v19) * 0.5 * v19;
        double v32 = vabdd_f64(v30, v14);
        double v33 = vabdd_f64(v31, v14);
        double v34 = (v31 - v30) * 0.5;
        BOOL v35 = v32 < v33;
        double v36 = -0.0;
        if (!v35) {
          double v36 = v34;
        }
        double v37 = v30 + v36;
        int v38 = 1;
        *(unsigned char *)a12 = 1;
        *a4 = v13;
        a2 = a5;
        a3 = a6;
        int v39 = 1;
      }
      *a2 = *a8;
      *a3 = *a11;
      if (v37 < a10) {
        a10 = v37;
      }
      if (a10 > a9) {
        a9 = a10;
      }
      *a7 = a9;
      uint64_t v17 = 1;
      if (v39 && v38)
      {
        double v64 = *(double *)this + (*a4 - *(double *)this) * 0.66;
        BOOL v65 = a9 < v64;
        if (*a4 <= *(double *)this) {
          BOOL v65 = v64 < a9;
        }
        if (!v65) {
          a9 = *(double *)this + (*a4 - *(double *)this) * 0.66;
        }
        *a7 = a9;
        return 1;
      }
    }
  }
  return v17;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Matrix<double,-1,1,0,-1,1> const,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 48) + 16);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 16);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 16);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  unint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * **(double **)(a1 + 24);
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  int64_t v7 = *(float64x2_t **)(a1 + 24);
  float64x2_t v8 = vmulq_f64(*v4, *v7);
  if (v1 >= 4)
  {
    int64_t v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v10 = vmulq_f64(v4[1], v7[1]);
    if ((unint64_t)v1 >= 8)
    {
      float64x2_t v11 = v7 + 3;
      double v12 = v4 + 3;
      uint64_t v13 = 4;
      do
      {
        float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        float64x2_t v14 = *v12;
        v12 += 2;
        float64x2_t v15 = v14;
        float64x2_t v16 = *v11;
        v11 += 2;
        float64x2_t v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    float64x2_t v8 = vaddq_f64(v10, v8);
    if (v6 > v9) {
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9)));
    }
  }
  double result = vaddvq_f64(v8);
  BOOL v17 = v1 <= v6;
  uint64_t v18 = v1 - v6;
  if (!v17)
  {
    uint64_t v19 = v3 >> 1;
    f64 = v4[v19].f64;
    double v21 = v7[v19].f64;
    do
    {
      double v22 = *f64++;
      double v23 = v22;
      double v24 = *v21++;
      double result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseBinaryOp<Eigen::internal::scalar_conj_product_op<double,double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(a1 + 48) + 56) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 56) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 48) + 56) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  unint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * **(double **)(a1 + 32);
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  int64_t v7 = *(float64x2_t **)(a1 + 32);
  float64x2_t v8 = vmulq_f64(*v4, *v7);
  if (v1 >= 4)
  {
    int64_t v9 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v10 = vmulq_f64(v4[1], v7[1]);
    if ((unint64_t)v1 >= 8)
    {
      float64x2_t v11 = v7 + 3;
      double v12 = v4 + 3;
      uint64_t v13 = 4;
      do
      {
        float64x2_t v8 = vaddq_f64(v8, vmulq_f64(v12[-1], v11[-1]));
        float64x2_t v14 = *v12;
        v12 += 2;
        float64x2_t v15 = v14;
        float64x2_t v16 = *v11;
        v11 += 2;
        float64x2_t v10 = vaddq_f64(v10, vmulq_f64(v15, v16));
        v13 += 4;
      }
      while (v13 < v9);
    }
    float64x2_t v8 = vaddq_f64(v10, v8);
    if (v6 > v9) {
      float64x2_t v8 = vaddq_f64(v8, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v9), *(float64x2_t *)((char *)v7 + 8 * v9)));
    }
  }
  double result = vaddvq_f64(v8);
  BOOL v17 = v1 <= v6;
  uint64_t v18 = v1 - v6;
  if (!v17)
  {
    uint64_t v19 = v3 >> 1;
    f64 = v4[v19].f64;
    double v21 = v7[v19].f64;
    do
    {
      double v22 = *f64++;
      double v23 = v22;
      double v24 = *v21++;
      double result = result + v23 * v24;
      --v18;
    }
    while (v18);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Block<Eigen::Matrix<double,-1,-1,0,-1,-1>,-1,1,true> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  unint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * v4->f64[0];
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  float64x2_t v7 = vmulq_f64(*v4, *v4);
  if (v1 >= 4)
  {
    int64_t v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v9 = vmulq_f64(v4[1], v4[1]);
    if ((unint64_t)v1 >= 8)
    {
      float64x2_t v10 = v4 + 3;
      uint64_t v11 = 4;
      do
      {
        float64x2_t v7 = vaddq_f64(v7, vmulq_f64(v10[-1], v10[-1]));
        float64x2_t v12 = *v10;
        v10 += 2;
        float64x2_t v9 = vaddq_f64(v9, vmulq_f64(v12, v12));
        v11 += 4;
      }
      while (v11 < v8);
    }
    float64x2_t v7 = vaddq_f64(v9, v7);
    if (v6 > v8) {
      float64x2_t v7 = vaddq_f64(v7, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v8), *(float64x2_t *)((char *)v4 + 8 * v8)));
    }
  }
  double result = vaddvq_f64(v7);
  BOOL v13 = v1 <= v6;
  uint64_t v14 = v1 - v6;
  if (!v13)
  {
    f64 = v4[v3 >> 1].f64;
    do
    {
      double v16 = *f64++;
      double result = result + v16 * v16;
      --v14;
    }
    while (v14);
  }
  return result;
}

double Eigen::internal::redux_impl<Eigen::internal::scalar_sum_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs2_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run(uint64_t a1)
{
  uint64_t v1 = *(void *)(**(void **)(a1 + 24) + 8);
  if (v1 >= 0) {
    uint64_t v2 = *(void *)(**(void **)(a1 + 24) + 8);
  }
  else {
    uint64_t v2 = v1 + 3;
  }
  if (v1 >= 0) {
    uint64_t v3 = *(void *)(**(void **)(a1 + 24) + 8);
  }
  else {
    uint64_t v3 = v1 + 1;
  }
  unint64_t v4 = *(float64x2_t **)(a1 + 8);
  if ((unint64_t)(v1 + 1) < 3) {
    return v4->f64[0] * v4->f64[0];
  }
  int64_t v6 = v3 & 0xFFFFFFFFFFFFFFFELL;
  float64x2_t v7 = vmulq_f64(*v4, *v4);
  if (v1 >= 4)
  {
    int64_t v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    float64x2_t v9 = vmulq_f64(v4[1], v4[1]);
    if ((unint64_t)v1 >= 8)
    {
      float64x2_t v10 = v4 + 3;
      uint64_t v11 = 4;
      do
      {
        float64x2_t v7 = vaddq_f64(v7, vmulq_f64(v10[-1], v10[-1]));
        float64x2_t v12 = *v10;
        v10 += 2;
        float64x2_t v9 = vaddq_f64(v9, vmulq_f64(v12, v12));
        v11 += 4;
      }
      while (v11 < v8);
    }
    float64x2_t v7 = vaddq_f64(v9, v7);
    if (v6 > v8) {
      float64x2_t v7 = vaddq_f64(v7, vmulq_f64(*(float64x2_t *)((char *)v4 + 8 * v8), *(float64x2_t *)((char *)v4 + 8 * v8)));
    }
  }
  double result = vaddvq_f64(v7);
  BOOL v13 = v1 <= v6;
  uint64_t v14 = v1 - v6;
  if (!v13)
  {
    f64 = v4[v3 >> 1].f64;
    do
    {
      double v16 = *f64++;
      double result = result + v16 * v16;
      --v14;
    }
    while (v14);
  }
  return result;
}

void OUTLINED_FUNCTION_2_6()
{
  JUMPOUT(0x22A614FA0);
}

void CoreML::validate<(MLModelType)606>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16)) {
    unint64_t v4 = *(const CoreML::Specification::ModelDescription **)(a1 + 16);
  }
  else {
    unint64_t v4 = (const CoreML::Specification::ModelDescription *)&CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Specification::ModelDescription::ModelDescription((CoreML::Specification::ModelDescription *)v32, v4);
  CoreML::Result::Result((CoreML::Result *)&v29);
  CoreML::validateModelDescription((CoreML *)v32, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)v27);
  uint64_t v29 = *(void *)v27;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v27[8];
  uint64_t v31 = v28;
  BOOL v5 = CoreML::Result::good((CoreML::Result *)&v29);
  if (!v5) {
    goto LABEL_44;
  }
  if (*(_DWORD *)(a1 + 44) == 606)
  {
    int64_t v6 = *(uint64_t **)(a1 + 32);
    int v7 = *((_DWORD *)v6 + 9);
  }
  else
  {
    int64_t v8 = CoreML::Specification::CategoricalMapping::default_instance((CoreML::Specification::CategoricalMapping *)v5);
    int v7 = *((_DWORD *)v8 + 9);
    if (*(_DWORD *)(a1 + 44) == 606) {
      int64_t v6 = *(uint64_t **)(a1 + 32);
    }
    else {
      int64_t v6 = CoreML::Specification::CategoricalMapping::default_instance((CoreML::Specification::CategoricalMapping *)v8);
    }
  }
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "Mapping not set.");
    CoreML::Result::Result((_DWORD *)a2, 13);
    goto LABEL_20;
  }
  int v9 = *((_DWORD *)v6 + 10);
  if (v7 == 1)
  {
    if (v9 == 101)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ValueOnUnknown set to string value while mapping produces int64.");
      CoreML::Result::Result((_DWORD *)a2, 13);
      goto LABEL_20;
    }
    unsigned int v12 = 1;
    unsigned int v11 = 3;
  }
  else if (v7 == 2)
  {
    if (v9 == 102)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "ValueOnUnknown set to Int64 value while mapping produces string.");
      CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_20:
      if ((v27[23] & 0x80000000) == 0) {
        goto LABEL_45;
      }
      float64x2_t v10 = *(void **)v27;
      goto LABEL_22;
    }
    unsigned int v12 = 3;
    unsigned int v11 = 1;
  }
  else
  {
    unsigned int v11 = 0;
    unsigned int v12 = 0;
  }
  BOOL v13 = operator new(8uLL);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  *BOOL v13 = v11 | 0x700000000;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)(v13 + 1);
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)(v13 + 1);
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)v33, 1, (int **)&v26, (uint64_t)v27);
  uint64_t v29 = *(void *)v27;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v27[8];
  uint64_t v31 = v28;
  HIBYTE(v28) = 0;
  v27[8] = 0;
  if (v26.__r_.__value_.__r.__words[0])
  {
    v26.__r_.__value_.__l.__size_ = v26.__r_.__value_.__r.__words[0];
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v29)) {
    goto LABEL_44;
  }
  uint64_t v14 = operator new(8uLL);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  *uint64_t v14 = v12 | 0x700000000;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)(v14 + 1);
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)(v14 + 1);
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)&v34, 1, (int **)&v26, (uint64_t)v27);
  uint64_t v29 = *(void *)v27;
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)&v27[8];
  uint64_t v31 = v28;
  HIBYTE(v28) = 0;
  v27[8] = 0;
  if (v26.__r_.__value_.__r.__words[0])
  {
    v26.__r_.__value_.__l.__size_ = v26.__r_.__value_.__r.__words[0];
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (!CoreML::Result::good((CoreML::Result *)&v29)) {
    goto LABEL_44;
  }
  float64x2_t v15 = *(uint64_t **)(*(void *)(v33[2] + 8) + 32);
  double v16 = &CoreML::Specification::_FeatureType_default_instance_;
  if (!v15) {
    float64x2_t v15 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  if (*((_DWORD *)v15 + 9) != 7) {
    goto LABEL_44;
  }
  if (*(_DWORD *)(v15[3] + 36) == v11)
  {
    if (*(void *)(*(void *)(v35 + 8) + 32)) {
      double v16 = *(uint64_t **)(*(void *)(v35 + 8) + 32);
    }
    if (*((_DWORD *)v16 + 9) != 7)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "Output of a sequence categorical mapping must be a sequence");
      CoreML::Result::Result((_DWORD *)a2, 8);
      goto LABEL_20;
    }
    if (*(_DWORD *)(v16[3] + 36) == v12)
    {
LABEL_44:
      *(void *)a2 = v29;
      *(_OWORD *)(a2 + 8) = __p;
      *(void *)(a2 + 24) = v31;
      long long __p = 0uLL;
      uint64_t v31 = 0;
      goto LABEL_45;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Output sequence type does not match input type ");
    double v21 = std::string::append(&v25, off_2646D7BF8[v12]);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    double v23 = std::string::append(&v26, "of categorical mapping.");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(void *)&v27[16] = *((void *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)double v27 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 8);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Input sequence type does not match input type ");
    BOOL v17 = std::string::append(&v25, off_2646D7BF8[v11]);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(&v26, "of categorical mapping.");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(void *)&v27[16] = *((void *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)double v27 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result((_DWORD *)a2, 8);
  }
  if ((v27[23] & 0x80000000) != 0) {
    operator delete(*(void **)v27);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    float64x2_t v10 = (void *)v25.__r_.__value_.__r.__words[0];
LABEL_22:
    operator delete(v10);
  }
LABEL_45:
  if (SHIBYTE(v31) < 0) {
    operator delete((void *)__p);
  }
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)v32);
}

void sub_224375970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  CoreML::Specification::ModelDescription::~ModelDescription((CoreML::Specification::ModelDescription *)&a38);
  _Unwind_Resume(a1);
}

uint64_t turi::optimization::first_order_opt_interface::compute_gradient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, &v4, 0, -1);
}

double turi::optimization::first_order_opt_interface::compute_function_value(uint64_t a1, uint64_t a2)
{
  double v7 = 0.0;
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v6, a2);
  (*(void (**)(uint64_t, uint64_t, void **, double *, void, uint64_t))(*(void *)a1 + 32))(a1, a2, v6, &v7, 0, -1);
  double v4 = v7;
  free(v6[0]);
  return v4;
}

void sub_224375B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
}

void turi::optimization::first_order_opt_interface::get_status_header(long long **a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    do
    {
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((void *)v2 + 1));
      }
      else
      {
        long long v6 = *v2;
        __p.__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      uint64_t v21 = 8;
      unint64_t v7 = a2[1];
      unint64_t v8 = a2[2];
      if (v7 >= v8)
      {
        uint64_t v10 = (uint64_t)(v7 - *a2) >> 5;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 59) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v8 - *a2;
        if (v12 >> 4 > v11) {
          unint64_t v11 = v12 >> 4;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        v22[4] = v5;
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v5, v13);
        float64x2_t v15 = &v14[32 * v10];
        v22[0] = v14;
        v22[1] = v15;
        v22[3] = &v14[32 * v16];
        long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v15 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)float64x2_t v15 = v17;
        memset(&__p, 0, sizeof(__p));
        *((void *)v15 + 3) = v21;
        v22[2] = v15 + 32;
        std::vector<std::pair<std::string,unsigned long>>::__swap_out_circular_buffer(a2, v22);
        uint64_t v18 = a2[1];
        std::__split_buffer<std::pair<std::string,unsigned long>>::~__split_buffer((uint64_t)v22);
        int v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a2[1] = v18;
        if (v19 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v7 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v7 = v9;
        memset(&__p, 0, sizeof(__p));
        *(void *)(v7 + 24) = v21;
        a2[1] = v7 + 32;
      }
      uint64_t v2 = (long long *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_224375CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
}

std::string *turi::optimization::first_order_opt_interface::get_status@<X0>(long long **a1@<X2>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
}

void turi::optimization::second_order_opt_interface::compute_hessian(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Eigen::DenseStorage<double,-1,-1,1,0>::DenseStorage(v7, a2);
  uint64_t v6 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *))(*(void *)a1 + 80))(a1, a2, a3, v7, &v6);
  free(v7[0]);
}

void sub_224375DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
}

double CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/DataStructures.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_FeatureTypes_2eproto::InitDefaults(v5);
  qword_26808E038 = 0;
  unk_26808E040 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808E048 = 0;
  unk_26808E050 = 0;
  dword_26808E058 = 0;
  CoreML::Specification::_StringToInt64Map_MapEntry_default_instance_ = (uint64_t)&unk_26D77B2A8;
  byte_26808E060 = 1;
  *((unsigned char *)CoreML::Specification::StringToInt64Map::StringToInt64Map((CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_)
  + 56) = 1;
  qword_26808E0B0 = 0;
  unk_26808E0B8 = 0;
  qword_26808E0C0 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808E0C8 = 0;
  dword_26808E0D0 = 0;
  CoreML::Specification::_Int64ToStringMap_MapEntry_default_instance_ = (uint64_t)&unk_26D77B428;
  byte_26808E0D8 = 1;
  *((unsigned char *)CoreML::Specification::Int64ToStringMap::Int64ToStringMap((CoreML::Specification::Int64ToStringMap *)&CoreML::Specification::_Int64ToStringMap_default_instance_)
  + 56) = 1;
  qword_26808E128 = 0;
  unk_26808E130 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808E138 = 0;
  unk_26808E140 = 0;
  dword_26808E148 = 0;
  CoreML::Specification::_StringToDoubleMap_MapEntry_default_instance_ = (uint64_t)&unk_26D77B5A8;
  byte_26808E150 = 1;
  *((unsigned char *)CoreML::Specification::StringToDoubleMap::StringToDoubleMap((CoreML::Specification::StringToDoubleMap *)&CoreML::Specification::_StringToDoubleMap_default_instance_)
  + 56) = 1;
  *(_OWORD *)&qword_26808E1A0 = 0u;
  *(_OWORD *)&algn_26808E1A8[8] = 0u;
  dword_26808E1C0 = 0;
  CoreML::Specification::_Int64ToDoubleMap_MapEntry_default_instance_ = (uint64_t)&unk_26D77B728;
  byte_26808E1C8 = 1;
  *((unsigned char *)CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap((CoreML::Specification::Int64ToDoubleMap *)&CoreML::Specification::_Int64ToDoubleMap_default_instance_)
  + 56) = 1;
  CoreML::Specification::_StringVector_default_instance_ = (uint64_t)&unk_26D77AD78;
  double result = 0.0;
  unk_26808E218 = 0u;
  unk_26808E228 = 0u;
  dword_26808E238 = 0;
  byte_26808E240 = 1;
  CoreML::Specification::_Int64Vector_default_instance_ = (uint64_t)&unk_26D77AE10;
  unk_26808E250 = 0;
  qword_26808E258 = 0;
  unk_26808E260 = 0;
  dword_26808E26C = 0;
  byte_26808E270 = 1;
  CoreML::Specification::_FloatVector_default_instance_ = (uint64_t)&unk_26D77AEA8;
  unk_26808E280 = 0;
  qword_26808E288 = 0;
  unk_26808E290 = 0;
  dword_26808E29C = 0;
  byte_26808E2A0 = 1;
  CoreML::Specification::_DoubleVector_default_instance_ = (uint64_t)&unk_26D77AF40;
  unk_26808E2B0 = 0;
  qword_26808E2B8 = 0;
  unk_26808E2C0 = 0;
  dword_26808E2CC = 0;
  byte_26808E2D0 = 1;
  dword_26808E2F8 = 0;
  CoreML::Specification::_Int64Range_default_instance_ = (uint64_t)&unk_26D77AFD8;
  unk_26808E2E0 = 0;
  qword_26808E2E8 = 0;
  unk_26808E2F0 = 0;
  byte_26808E300 = 1;
  CoreML::Specification::_Int64Set_default_instance_ = (uint64_t)&unk_26D77B070;
  unk_26808E310 = 0;
  qword_26808E318 = 0;
  unk_26808E320 = 0;
  dword_26808E32C = 0;
  byte_26808E330 = 1;
  CoreML::Specification::_DoubleRange_default_instance_ = (uint64_t)&unk_26D77B108;
  unk_26808E340 = 0;
  dword_26808E358 = 0;
  qword_26808E348 = 0;
  unk_26808E350 = 0;
  byte_26808E360 = 1;
  qword_26808E038 = (uint64_t)&CoreML::Specification::_StringToInt64Map_MapEntry_default_instance_;
  qword_26808E0B0 = (uint64_t)&CoreML::Specification::_Int64ToStringMap_MapEntry_default_instance_;
  qword_26808E128 = (uint64_t)&CoreML::Specification::_StringToDoubleMap_MapEntry_default_instance_;
  qword_26808E1A0 = (uint64_t)&CoreML::Specification::_Int64ToDoubleMap_MapEntry_default_instance_;
  return result;
}

void CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(CoreML::Specification::protobuf_DataStructures_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_DataStructures_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_22437612C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::StringToInt64Map *CoreML::Specification::StringToInt64Map::StringToInt64Map(CoreML::Specification::StringToInt64Map *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77AB18;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v2 = (CoreML::Specification::protobuf_DataStructures_2eproto *)_tc_google::protobuf::Map<std::string,long long>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::StringToInt64Map *)&CoreML::Specification::_StringToInt64Map_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v2);
  }
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_2243761C4(_Unwind_Exception *a1)
{
  _tc_google::protobuf::Map<std::string,long long>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v8);
  uint64_t v4 = v8[0];
  if (v8[0])
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t v6 = *(const std::string **)(v4 + 24);
      std::string::size_type v7 = v6[1].__r_.__value_.__r.__words[0];
      _tc_google::protobuf::Map<std::string,long long>::operator[](v5, v6)->__r_.__value_.__r.__words[0] = v7;
      uint64_t result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v8);
      uint64_t v4 = v8[0];
    }
    while (v8[0]);
  }
  return result;
}

void CoreML::Specification::StringToInt64Map::~StringToInt64Map(CoreML::Specification::StringToInt64Map *this)
{
  *(void *)this = &unk_26D77AB18;
  _tc_google::protobuf::Map<std::string,long long>::~Map((void *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D77AB18;
  _tc_google::protobuf::Map<std::string,long long>::~Map((void *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::StringToInt64Map::default_instance(CoreML::Specification::StringToInt64Map *this)
{
  return &CoreML::Specification::_StringToInt64Map_default_instance_;
}

void CoreML::Specification::StringToInt64Map::New(CoreML::Specification::StringToInt64Map *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22437637C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringToInt64Map>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToInt64Map>);
  }
  return result;
}

double CoreML::Specification::StringToInt64Map::Clear(CoreML::Specification::StringToInt64Map *this)
{
  return _tc_google::protobuf::Map<std::string,long long>::clear((uint64_t)this + 24);
}

uint64_t CoreML::Specification::StringToInt64Map::MergePartialFromCodedStream(CoreML::Specification::StringToInt64Map *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 16;
  uint64_t v5 = (char *)this + 24;
  while (1)
  {
    uint64_t v6 = *a2;
    if (*a2 >= a2[1])
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = *v6;
      if (*v6 >= 1)
      {
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_8;
      }
    }
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0) {
      goto LABEL_12;
    }
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v22[0] = v4;
      v22[1] = v5;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      std::string __p = 0;
      uint64_t v26 = 0;
      unint64_t v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
LABEL_24:
        unint64_t v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        int v16 = v15;
        if ((v15 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::MergePartialFromCodedStream((uint64_t)v22, (_tc_google::protobuf::io::CodedInputStream *)a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          if (v25 >= 0) {
            p_p = (_tc_google::protobuf::internal *)&__p;
          }
          else {
            p_p = (_tc_google::protobuf::internal *)__p;
          }
          if (v25 >= 0) {
            unint64_t v18 = HIBYTE(v25);
          }
          else {
            unint64_t v18 = v24;
          }
          BOOL v19 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v18, 0, (uint64_t)"CoreML.Specification.StringToInt64Map.MapEntry.key");
          BOOL v20 = v19;
          if (v19) {
            int v12 = 0;
          }
          else {
            int v12 = 6;
          }
LABEL_36:
          if (v26) {
            (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
          }
          if (SHIBYTE(v25) < 0) {
            operator delete(__p);
          }
          if (!v20) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      BOOL v20 = 0;
      int v12 = 6;
      goto LABEL_36;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3))return 0; {
LABEL_17:
    }
    int v12 = 0;
LABEL_18:
    if (v12) {
      return 0;
    }
  }
}

void sub_2243765BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringToInt64Map::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2 = **(void **)(this + 40);
  if (v2)
  {
    uint64_t v4 = this;
    if (*((unsigned char *)a2 + 26))
    {
      if (v2 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_24;
      }
    }
    else if (v2 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_24:
      operator new[]();
    }
    this = _tc_google::protobuf::Map<std::string,std::string>::begin(this + 24, v12);
    uint64_t v6 = 0;
    while (v12[0])
    {
      unint64_t v8 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(*(void *)(v12[0] + 24), *(void *)(v12[0] + 24) + 24, *(_tc_google::protobuf::Arena **)(v4 + 16));
      if ((void *)v6 != v8)
      {
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v6 = (uint64_t)v8;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, v7);
      long long v9 = *(unsigned __int8 **)(v12[0] + 24);
      if ((char)v9[23] < 0)
      {
        long long v9 = *(unsigned __int8 **)v9;
        uint64_t v10 = *(const char **)(*(void *)(v12[0] + 24) + 8);
      }
      else
      {
        uint64_t v10 = (const char *)v9[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v9, v10, 1, (uint64_t)"CoreML.Specification.StringToInt64Map.MapEntry.key");
      this = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v12);
    }
    if (v6) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  return this;
}

void sub_2243768A0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringToInt64Map::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v7);
  char v3 = 0;
  while (v7[0])
  {
    uint64_t v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(*(void *)(v7[0] + 24), *(void *)(v7[0] + 24) + 24, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      char v3 = v4;
    }
    unint64_t v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v7);
  }
  if (v3) {
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  *((_DWORD *)this + 12) = v2;
  return v2;
}

void sub_2243769F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    CoreML::Specification::V5::Program::SerializeWithCachedSizes();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::StringToInt64Map::MergeFrom(CoreML::Specification::StringToInt64Map *this, const CoreML::Specification::StringToInt64Map *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t CoreML::Specification::StringToInt64Map::IsInitialized(CoreML::Specification::StringToInt64Map *this)
{
  return 1;
}

void *CoreML::Specification::StringToInt64Map::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringToInt64Map");
}

CoreML::Specification::Int64ToStringMap *CoreML::Specification::Int64ToStringMap::Int64ToStringMap(CoreML::Specification::Int64ToStringMap *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77ABB0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v2 = (CoreML::Specification::protobuf_DataStructures_2eproto *)_tc_google::protobuf::Map<long long,std::string>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Int64ToStringMap *)&CoreML::Specification::_Int64ToStringMap_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v2);
  }
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_224376B00(_Unwind_Exception *a1)
{
  _tc_google::protobuf::Map<long long,std::string>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v9);
  uint64_t v4 = v9[0];
  if (v9[0])
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t v6 = *(uint64_t **)(v4 + 8);
      uint64_t v7 = (const std::string *)(v6 + 1);
      unint64_t v8 = (std::string *)_tc_google::protobuf::Map<long long,std::string>::operator[](v5, v6);
      std::string::operator=(v8, v7);
      uint64_t result = (uint64_t)_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v9);
      uint64_t v4 = v9[0];
    }
    while (v9[0]);
  }
  return result;
}

void CoreML::Specification::Int64ToStringMap::~Int64ToStringMap(CoreML::Specification::Int64ToStringMap *this)
{
  *(void *)this = &unk_26D77ABB0;
  _tc_google::protobuf::Map<long long,std::string>::~Map((void *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D77ABB0;
  _tc_google::protobuf::Map<long long,std::string>::~Map((void *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::Int64ToStringMap::default_instance(CoreML::Specification::Int64ToStringMap *this)
{
  return &CoreML::Specification::_Int64ToStringMap_default_instance_;
}

void CoreML::Specification::Int64ToStringMap::New(CoreML::Specification::Int64ToStringMap *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224376CBC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64ToStringMap>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToStringMap>);
  }
  return result;
}

double CoreML::Specification::Int64ToStringMap::Clear(CoreML::Specification::Int64ToStringMap *this)
{
  return _tc_google::protobuf::Map<long long,std::string>::clear((uint64_t)this + 24);
}

uint64_t CoreML::Specification::Int64ToStringMap::MergePartialFromCodedStream(CoreML::Specification::Int64ToStringMap *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 16;
  uint64_t v5 = (char *)this + 24;
  while (1)
  {
    uint64_t v6 = *a2;
    if (*a2 >= a2[1])
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = *v6;
      if (*v6 >= 1)
      {
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_8;
      }
    }
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0) {
      goto LABEL_12;
    }
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v22[0] = v4;
      v22[1] = v5;
      uint64_t v24 = 0;
      unint64_t v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
LABEL_24:
        unint64_t v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        int v16 = v15;
        if ((v15 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::MergePartialFromCodedStream((uint64_t)v22, (_tc_google::protobuf::io::CodedInputStream *)a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          long long v17 = (_tc_google::protobuf::internal *)v23;
          if (*(char *)(v23 + 23) < 0)
          {
            long long v17 = *(_tc_google::protobuf::internal **)v23;
            unint64_t v18 = *(const char **)(v23 + 8);
          }
          else
          {
            unint64_t v18 = (const char *)*(unsigned __int8 *)(v23 + 23);
          }
          BOOL v19 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v17, v18, 0, (uint64_t)"CoreML.Specification.Int64ToStringMap.MapEntry.value");
          BOOL v20 = v19;
          if (v19) {
            int v12 = 0;
          }
          else {
            int v12 = 6;
          }
LABEL_33:
          if (v24) {
            (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          if (!v20) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      BOOL v20 = 0;
      int v12 = 6;
      goto LABEL_33;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3))return 0; {
LABEL_17:
    }
    int v12 = 0;
LABEL_18:
    if (v12) {
      return 0;
    }
  }
}

void sub_224376ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    CoreML::Specification::V5::Program::SerializeWithCachedSizes();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToStringMap::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2 = **(void **)(this + 40);
  if (v2)
  {
    uint64_t v4 = this;
    if (*((unsigned char *)a2 + 26))
    {
      if (v2 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_24;
      }
    }
    else if (v2 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_24:
      operator new[]();
    }
    this = _tc_google::protobuf::Map<std::string,std::string>::begin(this + 24, v13);
    uint64_t v6 = 0;
    while (v13[0])
    {
      unint64_t v8 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(void *)(v13[0] + 8), *(void *)(v13[0] + 8) + 8, *(_tc_google::protobuf::Arena **)(v4 + 16));
      if ((void *)v6 != v8)
      {
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v6 = (uint64_t)v8;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, v7);
      uint64_t v9 = *(void *)(v13[0] + 8);
      if (*(char *)(v9 + 31) < 0)
      {
        uint64_t v10 = *(_tc_google::protobuf::internal **)(v9 + 8);
        unint64_t v11 = *(const char **)(v9 + 16);
      }
      else
      {
        uint64_t v10 = (_tc_google::protobuf::internal *)(v9 + 8);
        unint64_t v11 = (const char *)*(unsigned __int8 *)(v9 + 31);
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v10, v11, 1, (uint64_t)"CoreML.Specification.Int64ToStringMap.MapEntry.value");
      this = (uint64_t)_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v13);
    }
    if (v6) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  return this;
}

void sub_2243771D4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x1060C80832E3BDALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64ToStringMap::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v7);
  char v3 = 0;
  while (v7[0])
  {
    uint64_t v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(*(void *)(v7[0] + 8), *(void *)(v7[0] + 8) + 8, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      char v3 = v4;
    }
    unint64_t v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v7);
  }
  if (v3) {
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  *((_DWORD *)this + 12) = v2;
  return v2;
}

void sub_22437732C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CoreML::Specification::V5::Program::SerializeWithCachedSizes();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToStringMap::MergeFrom(CoreML::Specification::Int64ToStringMap *this, const CoreML::Specification::Int64ToStringMap *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t CoreML::Specification::Int64ToStringMap::IsInitialized(CoreML::Specification::Int64ToStringMap *this)
{
  return 1;
}

void *CoreML::Specification::Int64ToStringMap::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64ToStringMap");
}

CoreML::Specification::StringToDoubleMap *CoreML::Specification::StringToDoubleMap::StringToDoubleMap(CoreML::Specification::StringToDoubleMap *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77AC48;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v2 = (CoreML::Specification::protobuf_DataStructures_2eproto *)_tc_google::protobuf::Map<std::string,double>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::StringToDoubleMap *)&CoreML::Specification::_StringToDoubleMap_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v2);
  }
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_224377434(_Unwind_Exception *a1)
{
  _tc_google::protobuf::Map<std::string,long long>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v8);
  uint64_t v4 = v8[0];
  if (v8[0])
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t v6 = *(const std::string **)(v4 + 24);
      std::string::size_type v7 = v6[1].__r_.__value_.__r.__words[0];
      _tc_google::protobuf::Map<std::string,double>::operator[](v5, v6)->__r_.__value_.__r.__words[0] = v7;
      uint64_t result = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v8);
      uint64_t v4 = v8[0];
    }
    while (v8[0]);
  }
  return result;
}

void CoreML::Specification::StringToDoubleMap::~StringToDoubleMap(CoreML::Specification::StringToDoubleMap *this)
{
  *(void *)this = &unk_26D77AC48;
  _tc_google::protobuf::Map<std::string,long long>::~Map((void *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D77AC48;
  _tc_google::protobuf::Map<std::string,long long>::~Map((void *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::StringToDoubleMap::default_instance(CoreML::Specification::StringToDoubleMap *this)
{
  return &CoreML::Specification::_StringToDoubleMap_default_instance_;
}

void CoreML::Specification::StringToDoubleMap::New(CoreML::Specification::StringToDoubleMap *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243775F4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringToDoubleMap>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToDoubleMap>);
  }
  return result;
}

double CoreML::Specification::StringToDoubleMap::Clear(CoreML::Specification::StringToDoubleMap *this)
{
  return _tc_google::protobuf::Map<std::string,long long>::clear((uint64_t)this + 24);
}

uint64_t CoreML::Specification::StringToDoubleMap::MergePartialFromCodedStream(CoreML::Specification::StringToDoubleMap *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 16;
  uint64_t v5 = (char *)this + 24;
  while (1)
  {
    uint64_t v6 = *a2;
    if (*a2 >= a2[1])
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = *v6;
      if (*v6 >= 1)
      {
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_8;
      }
    }
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0) {
      goto LABEL_12;
    }
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v22[0] = v4;
      v22[1] = v5;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      std::string __p = 0;
      uint64_t v26 = 0;
      unint64_t v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
LABEL_24:
        unint64_t v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        int v16 = v15;
        if ((v15 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::MergePartialFromCodedStream((uint64_t)v22, a2)&& _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16))
        {
          if (v25 >= 0) {
            p_p = (_tc_google::protobuf::internal *)&__p;
          }
          else {
            p_p = (_tc_google::protobuf::internal *)__p;
          }
          if (v25 >= 0) {
            unint64_t v18 = HIBYTE(v25);
          }
          else {
            unint64_t v18 = v24;
          }
          BOOL v19 = _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(p_p, (const char *)v18, 0, (uint64_t)"CoreML.Specification.StringToDoubleMap.MapEntry.key");
          BOOL v20 = v19;
          if (v19) {
            int v12 = 0;
          }
          else {
            int v12 = 6;
          }
LABEL_36:
          if (v26) {
            (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
          }
          if (SHIBYTE(v25) < 0) {
            operator delete(__p);
          }
          if (!v20) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      BOOL v20 = 0;
      int v12 = 6;
      goto LABEL_36;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3))return 0; {
LABEL_17:
    }
    int v12 = 0;
LABEL_18:
    if (v12) {
      return 0;
    }
  }
}

void sub_224377834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::MessageLite,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,std::string,CoreML::Specification::V5::Function,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)11,0>,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringToDoubleMap::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2 = **(void **)(this + 40);
  if (v2)
  {
    uint64_t v4 = this;
    if (*((unsigned char *)a2 + 26))
    {
      if (v2 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_24;
      }
    }
    else if (v2 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_24:
      operator new[]();
    }
    this = _tc_google::protobuf::Map<std::string,std::string>::begin(this + 24, v12);
    uint64_t v6 = 0;
    while (v12[0])
    {
      unint64_t v8 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(void *)(v12[0] + 24), *(void *)(v12[0] + 24) + 24, *(_tc_google::protobuf::Arena **)(v4 + 16));
      if ((void *)v6 != v8)
      {
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v6 = (uint64_t)v8;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, v7);
      uint64_t v9 = *(unsigned __int8 **)(v12[0] + 24);
      if ((char)v9[23] < 0)
      {
        uint64_t v9 = *(unsigned __int8 **)v9;
        uint64_t v10 = *(const char **)(*(void *)(v12[0] + 24) + 8);
      }
      else
      {
        uint64_t v10 = (const char *)v9[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v9, v10, 1, (uint64_t)"CoreML.Specification.StringToDoubleMap.MapEntry.key");
      this = (uint64_t)_tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v12);
    }
    if (v6) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  return this;
}

void sub_224377B18(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::StringToDoubleMap::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v7);
  char v3 = 0;
  while (v7[0])
  {
    uint64_t v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(void *)(v7[0] + 24), *(void *)(v7[0] + 24) + 24, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      char v3 = v4;
    }
    uint64_t v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(v7);
  }
  if (v3) {
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  *((_DWORD *)this + 12) = v2;
  return v2;
}

void sub_224377C70(_Unwind_Exception *exception_object)
{
  if (v1) {
    CoreML::Specification::V5::Program::SerializeWithCachedSizes();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::StringToDoubleMap::MergeFrom(CoreML::Specification::StringToDoubleMap *this, const CoreML::Specification::StringToDoubleMap *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t CoreML::Specification::StringToDoubleMap::IsInitialized(CoreML::Specification::StringToDoubleMap *this)
{
  return 1;
}

void *CoreML::Specification::StringToDoubleMap::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringToDoubleMap");
}

CoreML::Specification::Int64ToDoubleMap *CoreML::Specification::Int64ToDoubleMap::Int64ToDoubleMap(CoreML::Specification::Int64ToDoubleMap *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77ACE0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t v2 = (CoreML::Specification::protobuf_DataStructures_2eproto *)_tc_google::protobuf::Map<long long,double>::Init((uint64_t)this + 24);
  *((_DWORD *)this + 8) = 0;
  if (this != (CoreML::Specification::Int64ToDoubleMap *)&CoreML::Specification::_Int64ToDoubleMap_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v2);
  }
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_224377D78(_Unwind_Exception *a1)
{
  _tc_google::protobuf::Map<long long,double>::~Map(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFrom(uint64_t a1, uint64_t a2)
{
  uint64_t result = _tc_google::protobuf::Map<std::string,std::string>::begin(a2 + 8, v8);
  uint64_t v4 = v8[0];
  if (v8[0])
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t v6 = *(uint64_t **)(v4 + 8);
      uint64_t v7 = v6[1];
      *_tc_google::protobuf::Map<long long,double>::operator[](v5, v6) = v7;
      uint64_t result = (uint64_t)_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v8);
      uint64_t v4 = v8[0];
    }
    while (v8[0]);
  }
  return result;
}

void CoreML::Specification::Int64ToDoubleMap::~Int64ToDoubleMap(CoreML::Specification::Int64ToDoubleMap *this)
{
  *(void *)this = &unk_26D77ACE0;
  _tc_google::protobuf::Map<long long,double>::~Map((void *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D77ACE0;
  _tc_google::protobuf::Map<long long,double>::~Map((void *)this + 3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::Int64ToDoubleMap::default_instance(CoreML::Specification::Int64ToDoubleMap *this)
{
  return &CoreML::Specification::_Int64ToDoubleMap_default_instance_;
}

void CoreML::Specification::Int64ToDoubleMap::New(CoreML::Specification::Int64ToDoubleMap *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224377F38(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64ToDoubleMap>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToDoubleMap>);
  }
  return result;
}

double CoreML::Specification::Int64ToDoubleMap::Clear(CoreML::Specification::Int64ToDoubleMap *this)
{
  return _tc_google::protobuf::Map<long long,double>::clear((uint64_t)this + 24);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::MergePartialFromCodedStream(CoreML::Specification::Int64ToDoubleMap *this, char **a2, unsigned int a3)
{
  uint64_t v4 = (char *)this + 16;
  uint64_t v5 = (char *)this + 24;
  while (1)
  {
    uint64_t v6 = *a2;
    if (*a2 >= a2[1])
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = *v6;
      if (*v6 >= 1)
      {
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_8;
      }
    }
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
    unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
    if ((v8 & 0x100000000) == 0) {
      goto LABEL_12;
    }
LABEL_8:
    if (v8 == 10 && (v8 & 0xFFFFFFF8) == 8)
    {
      v20[0] = v4;
      v20[1] = v5;
      uint64_t v21 = 0;
      unint64_t v13 = *a2;
      if (*a2 >= a2[1] || *v13 < 0)
      {
        int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) == 0) {
          goto LABEL_24;
        }
      }
      else
      {
        int VarintSizeAsIntFallback = *v13;
        *a2 = v13 + 1;
LABEL_24:
        unint64_t v15 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        int v16 = v15;
        if ((v15 & 0x8000000000000000) == 0
          && _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::MergePartialFromCodedStream((uint64_t)v20, (_tc_google::protobuf::io::CodedInputStream *)a2))
        {
          BOOL v17 = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v16);
          BOOL v18 = v17;
          if (v17) {
            int v12 = 0;
          }
          else {
            int v12 = 6;
          }
LABEL_30:
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          if (!v18) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
      BOOL v18 = 0;
      int v12 = 6;
      goto LABEL_30;
    }
LABEL_12:
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if (!_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3))return 0; {
LABEL_17:
    }
    int v12 = 0;
LABEL_18:
    if (v12) {
      return 0;
    }
  }
}

void sub_22437811C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    CoreML::Specification::V5::Program::SerializeWithCachedSizes();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  unint64_t v2 = **(void **)(this + 40);
  if (v2)
  {
    uint64_t v4 = this;
    if (*((unsigned char *)a2 + 26))
    {
      if (v2 >= 2 && *((unsigned char *)a2 + 27) != 0) {
        goto LABEL_21;
      }
    }
    else if (v2 >= 2 && _tc_google::protobuf::io::CodedOutputStream::default_serialization_deterministic_ != 0)
    {
LABEL_21:
      operator new[]();
    }
    this = _tc_google::protobuf::Map<std::string,std::string>::begin(this + 24, v10);
    uint64_t v6 = 0;
    while (v10[0])
    {
      unint64_t v8 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(void *)(v10[0] + 8), *(void *)(v10[0] + 8) + 8, *(_tc_google::protobuf::Arena **)(v4 + 16));
      if ((void *)v6 != v8)
      {
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v6 = (uint64_t)v8;
      }
      _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, v7);
      this = (uint64_t)_tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v10);
    }
    if (v6) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  return this;
}

void sub_2243783B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x1060C80832E3BDALL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::ByteSizeLong(_tc_google::protobuf::Arena **this)
{
  uint64_t v2 = *(unsigned int *)this[5];
  _tc_google::protobuf::Map<std::string,std::string>::begin((uint64_t)(this + 3), v7);
  char v3 = 0;
  while (v7[0])
  {
    uint64_t v4 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(*(void *)(v7[0] + 8), *(void *)(v7[0] + 8) + 8, this[2]);
    if (v3 != (_DWORD *)v4)
    {
      if (v3) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      char v3 = v4;
    }
    unint64_t v5 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(v3);
    v2 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(v7);
  }
  if (v3) {
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  *((_DWORD *)this + 12) = v2;
  return v2;
}

void sub_22437850C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CoreML::Specification::V5::Program::SerializeWithCachedSizes();
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::MergeFrom(CoreML::Specification::Int64ToDoubleMap *this, const CoreML::Specification::Int64ToDoubleMap *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  return _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFrom((uint64_t)this + 16, (uint64_t)a2 + 16);
}

uint64_t CoreML::Specification::Int64ToDoubleMap::IsInitialized(CoreML::Specification::Int64ToDoubleMap *this)
{
  return 1;
}

void *CoreML::Specification::Int64ToDoubleMap::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64ToDoubleMap");
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::StringVector(CoreML::Specification::StringVector *this)
{
  *(void *)this = &unk_26D77AD78;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::StringVector *)&CoreML::Specification::_StringVector_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::Model::New(this, 0) = 0;
  return this;
}

void sub_224378604(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::StringVector *CoreML::Specification::StringVector::StringVector(CoreML::Specification::StringVector *this, const CoreML::Specification::StringVector *a2)
{
  *(void *)this = &unk_26D77AD78;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  unint64_t v5 = (std::string *)((char *)this + 16);
  *(_OWORD *)((char *)this + 24) = 0u;
  unsigned int v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    uint64_t v7 = *((void *)a2 + 4);
    unint64_t v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((CoreML::Specification::StringVector *)((char *)this + 16), *((_DWORD *)a2 + 6));
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v5, (std::string **)v8, (const std::string **)(v7 + 8), v6, **((_DWORD **)this + 4) - *((_DWORD *)this + 6));
    signed int v9 = *((_DWORD *)this + 6) + v6;
    *((_DWORD *)this + 6) = v9;
    uint64_t v10 = (signed int *)*((void *)this + 4);
    if (*v10 < v9) {
      signed int *v10 = v9;
    }
  }
  *((_DWORD *)this + 1CoreML::Specification::Model::New(this, 0) = 0;
  uint64_t v11 = *((void *)a2 + 1);
  if (v11) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v11 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

void sub_224378704(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::StringVector::~StringVector(CoreML::Specification::StringVector *this)
{
  *(void *)this = &unk_26D77AD78;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::StringVector::~StringVector(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::StringVector::default_instance(CoreML::Specification::StringVector *this)
{
  return &CoreML::Specification::_StringVector_default_instance_;
}

void CoreML::Specification::StringVector::New(CoreML::Specification::StringVector *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224378830(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::StringVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringVector>);
  }
  return result;
}

uint64_t CoreML::Specification::StringVector::Clear(CoreML::Specification::StringVector *this)
{
  return _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
}

BOOL CoreML::Specification::StringVector::MergePartialFromCodedStream(CoreML::Specification::StringVector *this, char **a2, unsigned int a3)
{
  unint64_t v5 = (_tc_google::protobuf::Arena **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      unsigned int v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if (v8 != 10 || (v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      int v12 = (int *)*((void *)this + 4);
      if (!v12)
      {
        int v14 = *((_DWORD *)this + 7);
        goto LABEL_23;
      }
      uint64_t v13 = *((int *)this + 6);
      int v14 = *v12;
      if ((int)v13 >= *v12)
      {
        if (v14 != *((_DWORD *)this + 7))
        {
LABEL_24:
          int *v12 = v14 + 1;
          int v16 = *v5;
          if (!*v5) {
            operator new();
          }
          Aligned->__r_.__value_.__l.__size_ = 0;
          Aligned->__r_.__value_.__r.__words[2] = 0;
          Aligned->__r_.__value_.__r.__words[0] = 0;
          _tc_google::protobuf::Arena::AddListNode(v16, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<std::string>);
          uint64_t v17 = *((void *)this + 4);
          uint64_t v18 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v18 + 1;
          *(void *)(v17 + 8 * v18 + 8) = Aligned;
          goto LABEL_27;
        }
LABEL_23:
        _tc_google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v5, v14 + 1);
        int v12 = (int *)*((void *)this + 4);
        int v14 = *v12;
        goto LABEL_24;
      }
      *((_DWORD *)this + 6) = v13 + 1;
      Aligned = *(std::string **)&v12[2 * v13 + 2];
LABEL_27:
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, Aligned);
      if (!result) {
        return result;
      }
      uint64_t v20 = *((void *)this + 4);
      uint64_t v21 = *(unsigned __int8 **)(v20 + 8 * *((int *)this + 6));
      if ((char)v21[23] < 0)
      {
        uint64_t v21 = *(unsigned __int8 **)v21;
        long long v22 = *(const char **)(*(void *)(v20 + 8 * *((int *)this + 6)) + 8);
      }
      else
      {
        long long v22 = (const char *)v21[23];
      }
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v21, v22, 0, (uint64_t)"CoreML.Specification.StringVector.vector"))return 0; {
    }
      }
    if (!v8 || (v8 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::StringVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 24);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = this;
    uint64_t v5 = -v2;
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = *(unsigned __int8 **)(*(void *)(v4 + 32) + 8 * v6);
      if ((char)v7[23] < 0)
      {
        uint64_t v7 = *(unsigned __int8 **)v7;
        unint64_t v8 = *(const char **)(*(void *)(*(void *)(v4 + 32) + 8 * v6) + 8);
      }
      else
      {
        unint64_t v8 = (const char *)v7[23];
      }
      _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v7, v8, 1, (uint64_t)"CoreML.Specification.StringVector.vector");
      this = _tc_google::protobuf::internal::WireFormatLite::WriteString(1, *(void *)(*(void *)(v4 + 32) + 8 * v6++), a2);
    }
    while (v5 + v6 != 1);
  }
  return this;
}

uint64_t CoreML::Specification::StringVector::ByteSizeLong(CoreML::Specification::StringVector *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  if ((int)v1 < 1)
  {
    uint64_t v3 = *((unsigned int *)this + 6);
  }
  else
  {
    uint64_t v2 = (uint64_t *)(*((void *)this + 4) + 8);
    uint64_t v3 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v4 = *v2++;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      v3 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      --v1;
    }
    while (v1);
  }
  *((_DWORD *)this + 1CoreML::Specification::Model::New(this, 0) = v3;
  return v3;
}

std::string *CoreML::Specification::StringVector::CopyFrom(std::string *this, std::string *a2)
{
  if (a2 != this)
  {
    uint64_t v4 = this;
    _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)&this->__r_.__value_.__r.__words[2]);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v4, (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)a2);
  }
  return this;
}

uint64_t CoreML::Specification::StringVector::IsInitialized(CoreML::Specification::StringVector *this)
{
  return 1;
}

void *CoreML::Specification::StringVector::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.StringVector");
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::Int64Vector(CoreML::Specification::Int64Vector *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77AE10;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::Int64Vector *)&CoreML::Specification::_Int64Vector_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_224378C58(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

CoreML::Specification::Int64Vector *CoreML::Specification::Int64Vector::Int64Vector(CoreML::Specification::Int64Vector *this, const CoreML::Specification::Int64Vector *a2)
{
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *(void *)this = &unk_26D77AE10;
  *((void *)this + 2) = 0;
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  *((void *)this + 3) = 0;
  int v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v6);
    memcpy((void *)(*((void *)this + 3) + 8), (const void *)(*((void *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  }
  *((_DWORD *)this + 9) = 0;
  uint64_t v7 = *((void *)a2 + 1);
  if (v7) {
    _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v7 & 0xFFFFFFFFFFFFFFFELL);
  }
  return this;
}

void sub_224378D28(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64Vector::~Int64Vector(CoreML::Specification::Int64Vector *this)
{
  *(void *)this = &unk_26D77AE10;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Int64Vector::~Int64Vector(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::Int64Vector::default_instance(CoreML::Specification::Int64Vector *this)
{
  return &CoreML::Specification::_Int64Vector_default_instance_;
}

void CoreML::Specification::Int64Vector::New(CoreML::Specification::Int64Vector *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224378E68(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Vector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Vector>);
  }
  return result;
}

uint64_t CoreML::Specification::Int64Vector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Vector::MergePartialFromCodedStream(CoreML::Specification::Int64Vector *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      int v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v8 != 10) {
          break;
        }
        uint64_t v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        int v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            int v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0) {
                return 0;
              }
              unint64_t v15 = Varint64Fallback;
            }
            else
            {
              unint64_t v15 = *v14;
              *a2 = v14 + 1;
            }
            signed int v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              signed int v18 = *v5;
            }
            uint64_t v19 = *((void *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(void *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if (v8) {
      BOOL v12 = (v8 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Int64Vector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      unsigned char *v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          uint64_t v14 = *((void *)a2 + 1);
          if (v13 < 0x80)
          {
            unint64_t v16 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              unint64_t v16 = v13 >> 7;
              unint64_t v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          unsigned char *v15 = v16;
          int v18 = v15 - v14 + 1;
          *((void *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::Int64Vector::ByteSizeLong(CoreML::Specification::Int64Vector *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

unint64_t *CoreML::Specification::Int64Vector::CopyFrom(unint64_t *this, const CoreML::Specification::GLMRegressor_DoubleArray *a2)
{
  if (a2 != (const CoreML::Specification::GLMRegressor_DoubleArray *)this)
  {
    *((_DWORD *)this + 4) = 0;
    return CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(this, a2);
  }
  return this;
}

uint64_t CoreML::Specification::Int64Vector::IsInitialized(CoreML::Specification::Int64Vector *this)
{
  return 1;
}

void *CoreML::Specification::Int64Vector::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Vector");
}

CoreML::Specification::FloatVector *CoreML::Specification::FloatVector::FloatVector(CoreML::Specification::FloatVector *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77AEA8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::FloatVector *)&CoreML::Specification::_FloatVector_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_22437931C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::FloatVector::~FloatVector(CoreML::Specification::FloatVector *this)
{
  *(void *)this = &unk_26D77AEA8;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::FloatVector::~FloatVector(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::FloatVector::New(CoreML::Specification::FloatVector *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224379434(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::FloatVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FloatVector>);
  }
  return result;
}

uint64_t CoreML::Specification::FloatVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::FloatVector::MergePartialFromCodedStream(CoreML::Specification::FloatVector *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          uint64_t v7 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 13) {
          break;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<float,(_tc_google::protobuf::internal::WireFormatLite::FieldType)2>(1, 0xAu, (unsigned int **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unsigned int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 3) != 0) {
        return 0;
      }
      signed int v13 = *v5;
      unsigned int v14 = VarintSizeAsIntFallback >> 2;
      int v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15) {
        int v17 = v15;
      }
      else {
        int v17 = v16;
      }
      if (v15 == -1) {
        int v17 = v16;
      }
      if (v17 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 4)
      {
        if (v14 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = VarintSizeAsIntFallback >> 2;
        }
        do
        {
          unsigned int v28 = 0;
          uint64_t v19 = (unsigned int *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 4)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback((unsigned int **)a2, &v28);
            if (!result) {
              return result;
            }
            unsigned int v20 = v28;
          }
          else
          {
            unsigned int v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          signed int v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<float>::Reserve(v5, v21 + 1);
            signed int v21 = *v5;
          }
          uint64_t v22 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(_DWORD *)(v22 + 4 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    signed int v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      uint64_t v25 = *((void *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<float>::Reserve(v5, v13 + v14);
      uint64_t v25 = *((void *)this + 3);
      uint64_t v26 = 4 * v24 - 4 * *((int *)this + 4);
      if (v26 >= 1) {
        bzero((void *)(v25 + 8 + 4 * *((int *)this + 4)), 4 * (((unint64_t)v26 >> 2) - ((unint64_t)v26 > 3)) + 4);
      }
    }
    *uint64_t v5 = v24;
    uint64_t v27 = v25 + 8;
    if (!v25) {
      uint64_t v27 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 4 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    *uint64_t v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::FloatVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13) {
      unsigned int v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    }
    else {
      unsigned int v14 = 0;
    }
    int v15 = (const float *)*(unsigned int *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteFloatArray(v14, v15, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::FloatVector::ByteSizeLong(CoreML::Specification::FloatVector *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 4 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::FloatVector::IsInitialized(CoreML::Specification::FloatVector *this)
{
  return 1;
}

void *CoreML::Specification::FloatVector::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.FloatVector");
}

CoreML::Specification::DoubleVector *CoreML::Specification::DoubleVector::DoubleVector(CoreML::Specification::DoubleVector *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77AF40;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::DoubleVector *)&CoreML::Specification::_DoubleVector_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_22437990C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DoubleVector::~DoubleVector(CoreML::Specification::DoubleVector *this)
{
  *(void *)this = &unk_26D77AF40;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::DoubleVector::~DoubleVector(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::DoubleVector::default_instance(CoreML::Specification::DoubleVector *this)
{
  return &CoreML::Specification::_DoubleVector_default_instance_;
}

void CoreML::Specification::DoubleVector::New(CoreML::Specification::DoubleVector *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224379A44(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleVector>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleVector>);
  }
  return result;
}

uint64_t CoreML::Specification::DoubleVector::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

BOOL CoreML::Specification::DoubleVector::MergePartialFromCodedStream(CoreML::Specification::DoubleVector *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v6 = *a2;
          if (*a2 < a2[1]) {
            break;
          }
          uint64_t v7 = 0;
LABEL_7:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
          unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v8 & 0x100000000) != 0) {
            goto LABEL_8;
          }
LABEL_14:
          if (v8) {
            BOOL v12 = (v8 & 7) == 4;
          }
          else {
            BOOL v12 = 1;
          }
          if (v12) {
            return 1;
          }
          if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) == 0)return 0; {
        }
          }
        uint64_t v7 = *v6;
        if (*v6 < 1) {
          goto LABEL_7;
        }
        *a2 = v6 + 1;
        unint64_t v8 = v7 | 0x100000000;
        if ((v8 & 0x100000000) == 0) {
          goto LABEL_14;
        }
LABEL_8:
        if ((v8 & 0xFFFFFFF8) != 8) {
          goto LABEL_14;
        }
        if (v8 != 9) {
          break;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0xAu, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v8 != 10) {
        goto LABEL_14;
      }
      unsigned int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unsigned int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int VarintSizeAsIntFallback = *v10;
        *a2 = v10 + 1;
      }
      if ((VarintSizeAsIntFallback & 7) != 0) {
        return 0;
      }
      signed int v13 = *v5;
      unsigned int v14 = VarintSizeAsIntFallback >> 3;
      int v15 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v16 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v16 >= v15) {
        int v17 = v15;
      }
      else {
        int v17 = v16;
      }
      if (v15 == -1) {
        int v17 = v16;
      }
      if (v17 >= (uint64_t)VarintSizeAsIntFallback) {
        break;
      }
      if (VarintSizeAsIntFallback >= 8)
      {
        if (v14 <= 1) {
          int v18 = 1;
        }
        else {
          int v18 = VarintSizeAsIntFallback >> 3;
        }
        do
        {
          unint64_t v28 = 0;
          uint64_t v19 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v28);
            if (!result) {
              return result;
            }
            unint64_t v20 = v28;
          }
          else
          {
            unint64_t v20 = *v19;
            *a2 = (char *)(v19 + 1);
          }
          signed int v21 = *((_DWORD *)this + 4);
          if (v21 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v21 + 1);
            signed int v21 = *v5;
          }
          uint64_t v22 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v21 + 1;
          *(void *)(v22 + 8 * v21 + 8) = v20;
          --v18;
        }
        while (v18);
      }
    }
    signed int v24 = v13 + v14;
    if ((int)*v5 >= (int)(v13 + v14))
    {
      uint64_t v25 = *((void *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v13 + v14);
      uint64_t v25 = *((void *)this + 3);
      uint64_t v26 = 8 * v24 - 8 * *((int *)this + 4);
      if (v26 >= 1) {
        bzero((void *)(v25 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v26 >> 3) - ((unint64_t)v26 > 7)) + 8);
      }
    }
    *uint64_t v5 = v24;
    uint64_t v27 = v25 + 8;
    if (!v25) {
      uint64_t v27 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v27 + 8 * v13), VarintSizeAsIntFallback));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    *uint64_t v5 = v13;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::DoubleVector::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v5 = this;
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unsigned int v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13) {
      unsigned int v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    }
    else {
      unsigned int v14 = 0;
    }
    int v15 = (const double *)*(unsigned int *)(v5 + 16);
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, v15, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::DoubleVector::ByteSizeLong(CoreML::Specification::DoubleVector *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v4;
  return v4;
}

uint64_t CoreML::Specification::DoubleVector::IsInitialized(CoreML::Specification::DoubleVector *this)
{
  return 1;
}

void *CoreML::Specification::DoubleVector::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleVector");
}

CoreML::Specification::Int64Range *CoreML::Specification::Int64Range::Int64Range(CoreML::Specification::Int64Range *this)
{
  *(void *)this = &unk_26D77AFD8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Int64Range *)&CoreML::Specification::_Int64Range_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_224379F14(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64Range::~Int64Range(CoreML::Specification::Int64Range *this)
{
  *(void *)this = &unk_26D77AFD8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D77AFD8;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::Int64Range::default_instance(CoreML::Specification::Int64Range *this)
{
  return &CoreML::Specification::_Int64Range_default_instance_;
}

void CoreML::Specification::Int64Range::New(CoreML::Specification::Int64Range *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22437A048(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Range>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Range>);
  }
  return result;
}

uint64_t CoreML::Specification::Int64Range::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Range::MergePartialFromCodedStream(CoreML::Specification::Int64Range *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 16) {
          goto LABEL_20;
        }
        int v12 = *a2;
        if (*a2 >= a2[1] || *v12 < 0)
        {
          Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if ((v16 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          Varint64Fallbacint k = *v12;
          *a2 = v12 + 1;
        }
        *((void *)this + 3) = Varint64Fallback;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      unsigned int v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        unint64_t v11 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v15 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        unint64_t v11 = *v10;
        *a2 = v10 + 1;
      }
      *((void *)this + 2) = v11;
    }
LABEL_20:
    if (v7) {
      BOOL v14 = (v7 & 7) == 4;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Int64Range::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 24);
  if (v7)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  return this;
}

unint64_t CoreML::Specification::Int64Range::ByteSizeLong(CoreML::Specification::Int64Range *this)
{
  uint64_t v1 = *((void *)this + 2);
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = 0;
  }
  unint64_t v5 = v4 + ((9 * (__clz(v2 | 1) ^ 0x3F) + 73) >> 6);
  if (v2) {
    unint64_t v4 = v5 + 1;
  }
  *((_DWORD *)this + 8) = v4;
  return v4;
}

uint64_t CoreML::Specification::Int64Range::IsInitialized(CoreML::Specification::Int64Range *this)
{
  return 1;
}

void *CoreML::Specification::Int64Range::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Range");
}

CoreML::Specification::Int64Set *CoreML::Specification::Int64Set::Int64Set(CoreML::Specification::Int64Set *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26D77B070;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::Int64Set *)&CoreML::Specification::_Int64Set_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 9) = 0;
  return this;
}

void sub_22437A308(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)(v2 + 24);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Int64Set::~Int64Set(CoreML::Specification::Int64Set *this)
{
  *(void *)this = &unk_26D77B070;
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Int64Set::~Int64Set(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::Int64Set::default_instance(CoreML::Specification::Int64Set *this)
{
  return &CoreML::Specification::_Int64Set_default_instance_;
}

void CoreML::Specification::Int64Set::New(CoreML::Specification::Int64Set *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22437A440(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Int64Set>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Set>);
  }
  return result;
}

uint64_t CoreML::Specification::Int64Set::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreML::Specification::Int64Set::MergePartialFromCodedStream(CoreML::Specification::Int64Set *this, char **a2, unsigned int a3)
{
  unint64_t v5 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      unint64_t v6 = *a2;
      if (*a2 >= a2[1])
      {
        uint64_t v7 = 0;
LABEL_7:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v7);
        unint64_t v8 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v8 & 0x100000000) == 0) {
          break;
        }
        goto LABEL_8;
      }
      uint64_t v7 = *v6;
      if (*v6 < 1) {
        goto LABEL_7;
      }
      *a2 = v6 + 1;
      unint64_t v8 = v7 | 0x100000000;
      if ((v8 & 0x100000000) == 0) {
        break;
      }
LABEL_8:
      if ((v8 & 0xFFFFFFF8) != 8) {
        break;
      }
      if (v8 == 8)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3>(1, 0xAu, (_tc_google::protobuf::io::CodedInputStream *)a2, (uint64_t)v5) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v8 != 10) {
          break;
        }
        unsigned int v10 = *a2;
        if (*a2 >= a2[1] || *v10 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v10;
          *a2 = v10 + 1;
        }
        int v13 = _tc_google::protobuf::io::CodedInputStream::PushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
        if ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) >= 1)
        {
          do
          {
            BOOL v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v17 & 1) == 0) {
                return 0;
              }
              unint64_t v15 = Varint64Fallback;
            }
            else
            {
              unint64_t v15 = *v14;
              *a2 = v14 + 1;
            }
            signed int v18 = *((_DWORD *)this + 4);
            if (v18 == *((_DWORD *)this + 5))
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v18 + 1);
              signed int v18 = *v5;
            }
            uint64_t v19 = *((void *)this + 3);
            *((_DWORD *)this + 4) = v18 + 1;
            *(void *)(v19 + 8 * v18 + 8) = v15;
          }
          while ((int)_tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2) > 0);
        }
        _tc_google::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      }
    }
    if (v8) {
      BOOL v12 = (v8 & 7) == 4;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v8, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::Int64Set::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v3 = this;
    if (*((int *)a2 + 4) < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v4 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v4 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v4;
    }
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    if (v4 < 5)
    {
      this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v5);
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 1);
      if (v5 < 0x80)
      {
        unsigned int v8 = *(_DWORD *)(v3 + 32);
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v7++ = v5 | 0x80;
          unsigned int v8 = v5 >> 7;
          unsigned int v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      unsigned char *v7 = v8;
      int v10 = v7 - v6 + 1;
      *((void *)a2 + 1) += v10;
      *((_DWORD *)a2 + 4) -= v10;
    }
    uint64_t v11 = *(unsigned int *)(v3 + 16);
    if ((int)v11 >= 1)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        unint64_t v13 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
        if (*((int *)a2 + 4) < 10)
        {
          this = _tc_google::protobuf::io::CodedOutputStream::WriteVarint64SlowPath(a2, v13);
        }
        else
        {
          uint64_t v14 = *((void *)a2 + 1);
          if (v13 < 0x80)
          {
            unint64_t v16 = *(void *)(*(void *)(v3 + 24) + 8 * i + 8);
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
          }
          else
          {
            unint64_t v15 = (unsigned char *)*((void *)a2 + 1);
            do
            {
              *v15++ = v13 | 0x80;
              unint64_t v16 = v13 >> 7;
              unint64_t v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          unsigned char *v15 = v16;
          int v18 = v15 - v14 + 1;
          *((void *)a2 + 1) += v18;
          *((_DWORD *)a2 + 4) -= v18;
        }
      }
    }
  }
  return this;
}

uint64_t CoreML::Specification::Int64Set::ByteSizeLong(CoreML::Specification::Int64Set *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if ((int)v1 < 1)
  {
    uint64_t v2 = 0;
LABEL_8:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v2 = 0;
  uint64_t v3 = (uint64_t *)(*((void *)this + 3) + 8);
  do
  {
    uint64_t v4 = *v3++;
    v2 += (9 * (__clz(v4 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  if (!v2) {
    goto LABEL_8;
  }
  if ((v2 & 0x80000000) != 0) {
    uint64_t v5 = 11;
  }
  else {
    uint64_t v5 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  uint64_t v6 = v5 + v2;
  *((_DWORD *)this + 8) = v2;
  *((_DWORD *)this + 9) = v6;
  return v6;
}

uint64_t CoreML::Specification::Int64Set::IsInitialized(CoreML::Specification::Int64Set *this)
{
  return 1;
}

void *CoreML::Specification::Int64Set::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Int64Set");
}

CoreML::Specification::DoubleRange *CoreML::Specification::DoubleRange::DoubleRange(CoreML::Specification::DoubleRange *this)
{
  *(void *)this = &unk_26D77B108;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::DoubleRange *)&CoreML::Specification::_DoubleRange_default_instance_) {
    CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_22437A8D8(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::DoubleRange::~DoubleRange(CoreML::Specification::DoubleRange *this)
{
  *(void *)this = &unk_26D77B108;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D77B108;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::DoubleRange::default_instance(CoreML::Specification::DoubleRange *this)
{
  return &CoreML::Specification::_DoubleRange_default_instance_;
}

void CoreML::Specification::DoubleRange::New(CoreML::Specification::DoubleRange *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_22437AA0C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::DoubleRange>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleRange>);
  }
  return result;
}

uint64_t CoreML::Specification::DoubleRange::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

uint64_t CoreML::Specification::DoubleRange::MergePartialFromCodedStream(CoreML::Specification::DoubleRange *this, char **a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 < a2[1]) {
          break;
        }
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0) {
          goto LABEL_7;
        }
LABEL_20:
        if (v7) {
          BOOL v14 = (v7 & 7) == 4;
        }
        else {
          BOOL v14 = 1;
        }
        uint64_t v15 = v14;
        if (v14
          || (_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)
        {
          return v15;
        }
      }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_20;
      }
LABEL_7:
      if (v7 >> 3 == 2) {
        break;
      }
      if (v7 >> 3 != 1 || v7 != 9) {
        goto LABEL_20;
      }
      unint64_t v17 = 0;
      int v10 = (unint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17)) {
          return 0;
        }
        unint64_t v11 = v17;
      }
      else
      {
        unint64_t v11 = *v10;
        *a2 = (char *)(v10 + 1);
      }
      *((void *)this + 2) = v11;
    }
    if (v7 != 17) {
      goto LABEL_20;
    }
    unint64_t v17 = 0;
    BOOL v12 = (unint64_t *)*a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      unint64_t v13 = *v12;
      *a2 = (char *)(v12 + 1);
      goto LABEL_19;
    }
    if (!_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v17)) {
      return 0;
    }
    unint64_t v13 = v17;
LABEL_19:
    *((void *)this + 3) = v13;
  }
}

uint64_t CoreML::Specification::DoubleRange::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  double v5 = *(double *)(this + 16);
  if (v5 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, v5, a3);
  }
  double v6 = *(double *)(v4 + 24);
  if (v6 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, a3);
  }
  return this;
}

uint64_t CoreML::Specification::DoubleRange::ByteSizeLong(CoreML::Specification::DoubleRange *this)
{
  uint64_t v1 = 9;
  if (*((double *)this + 2) == 0.0) {
    uint64_t v1 = 0;
  }
  if (*((double *)this + 3) != 0.0) {
    v1 += 9;
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

uint64_t CoreML::Specification::DoubleRange::IsInitialized(CoreML::Specification::DoubleRange *this)
{
  return 1;
}

void *CoreML::Specification::DoubleRange::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.DoubleRange");
}

void CoreML::Specification::StringToInt64Map::New(CoreML::Specification::StringToInt64Map *this)
{
}

void CoreML::Specification::Int64ToStringMap::New(CoreML::Specification::Int64ToStringMap *this)
{
}

void CoreML::Specification::StringToDoubleMap::New(CoreML::Specification::StringToDoubleMap *this)
{
}

void CoreML::Specification::Int64ToDoubleMap::New(CoreML::Specification::Int64ToDoubleMap *this)
{
}

void CoreML::Specification::StringVector::New(CoreML::Specification::StringVector *this)
{
}

void CoreML::Specification::Int64Vector::New(CoreML::Specification::Int64Vector *this)
{
}

void CoreML::Specification::FloatVector::New(CoreML::Specification::FloatVector *this)
{
}

void CoreML::Specification::DoubleVector::New(CoreML::Specification::DoubleVector *this)
{
}

void CoreML::Specification::Int64Range::New(CoreML::Specification::Int64Range *this)
{
}

void CoreML::Specification::Int64Set::New(CoreML::Specification::Int64Set *this)
{
}

void CoreML::Specification::DoubleRange::New(CoreML::Specification::DoubleRange *this)
{
}

void *_tc_google::protobuf::Map<std::string,long long>::~Map(void *a1)
{
  _tc_google::protobuf::Map<std::string,long long>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::~InnerMap(v2);
      MEMORY[0x22A614FA0](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<std::string,long long>::clear(uint64_t a1)
{
  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    _tc_google::protobuf::Map<std::string,long long>::erase(a1, &v5, (uint64_t)&v7);
    double result = *(double *)&v7;
    long long v3 = v7;
    uint64_t v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<std::string,long long>::erase@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)a1)
  {
    uint64_t v6 = *(void *)(*a2 + 24);
    if (v6)
    {
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      MEMORY[0x22A614FA0](v6, 0x1012C4092066FB6);
    }
  }
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = a2[2];
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::erase(*(void **)(a1 + 16), (uint64_t)&v8);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = a2[2];
  return result;
}

void *_tc_google::protobuf::Map<long long,std::string>::~Map(void *a1)
{
  _tc_google::protobuf::Map<long long,std::string>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = _tc_google::protobuf::Map<long long,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x22A614FA0](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<long long,std::string>::clear(uint64_t a1)
{
  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    _tc_google::protobuf::Map<long long,std::string>::erase(a1, &v5, (uint64_t)&v7);
    double result = *(double *)&v7;
    long long v3 = v7;
    uint64_t v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<long long,std::string>::erase@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)a1)
  {
    uint64_t v6 = *(void *)(*a2 + 8);
    if (v6)
    {
      if (*(char *)(v6 + 31) < 0) {
        operator delete(*(void **)(v6 + 8));
      }
      MEMORY[0x22A614FA0](v6, 0x1012C404EF22A49);
    }
  }
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = a2[2];
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::erase(*(void **)(a1 + 16), (uint64_t)&v8);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = a2[2];
  return result;
}

void _tc_google::protobuf::Map<long long,std::string>::InnerMap::erase(void *a1, uint64_t a2)
{
  BOOL v4 = _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::revalidate_if_necessary(a2, &v12);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = a1[4];
  uint64_t v8 = *(void *)(v7 + 8 * v5);
  if (v4)
  {
    uint64_t v9 = _tc_google::protobuf::Map<long long,std::string>::InnerMap::EraseFromLinkedList((uint64_t)a1, (uint64_t)v6, *(void *)(v7 + 8 * v5));
  }
  else
  {
    std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__erase_unique<long long *>(v8, (uint64_t **)(v12 + 32));
    if (*(void *)(v8 + 24)) {
      goto LABEL_6;
    }
    _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, (void **)v8);
    uint64_t v9 = 0;
    *(void *)(a1[4] + ((8 * v5) | 8)) = 0;
    v5 &= ~1uLL;
  }
  *(void *)(a1[4] + 8 * v5) = v9;
LABEL_6:
  if (!a1[5]) {
    operator delete(v6);
  }
  --*a1;
  if (v5 == a1[3])
  {
    unint64_t v10 = a1[1];
    if (v5 < v10)
    {
      uint64_t v11 = a1[4];
      do
      {
        if (*(void *)(v11 + 8 * v5)) {
          break;
        }
        a1[3] = ++v5;
      }
      while (v10 != v5);
    }
  }
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = *(void *)(a3 + 16);
  if (v3 == a2) {
    return v4;
  }
  *(void *)(v3 + 16) = _tc_google::protobuf::Map<long long,std::string>::InnerMap::EraseFromLinkedList();
  return v3;
}

uint64_t std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__erase_unique<long long *>(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::find<long long *>(a1, a2);
  if ((uint64_t *)(a1 + 8) == v3) {
    return 0;
  }
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::erase(a1, v3);
  return 1;
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::~InnerMap(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::clear((void *)a1);
    if (!*(void *)(a1 + 40)) {
      operator delete(*(void **)(a1 + 32));
    }
  }
  return a1;
}

void _tc_google::protobuf::Map<long long,std::string>::InnerMap::clear(void *a1)
{
  unint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      if (v5)
      {
        if (v5 == *(void *)(v4 + 8 * (v3 ^ 1)))
        {
          uint64_t v7 = v3 + 1;
          *(void *)(v4 + 8 * (v3 + 1)) = 0;
          *(void *)(a1[4] + 8 * v3) = 0;
          uint64_t v8 = *(uint64_t **)v5;
          do
          {
            uint64_t v9 = (void *)v8[4];
            unint64_t v10 = (uint64_t *)v8[1];
            uint64_t v11 = v8;
            if (v10)
            {
              do
              {
                uint64_t v12 = v10;
                unint64_t v10 = (uint64_t *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                uint64_t v12 = (uint64_t *)v11[2];
                BOOL v13 = *v12 == (void)v11;
                uint64_t v11 = v12;
              }
              while (!v13);
            }
            std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::erase(v5, v8);
            if (!a1[5]) {
              operator delete(v9);
            }
            uint64_t v8 = v12;
          }
          while (v12 != (uint64_t *)(v5 + 8));
          _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, (void **)v5);
          goto LABEL_20;
        }
        *(void *)(v4 + 8 * v3) = 0;
        do
        {
          uint64_t v6 = *(void *)(v5 + 16);
          if (!a1[5]) {
            operator delete((void *)v5);
          }
          uint64_t v5 = v6;
        }
        while (v6);
      }
      uint64_t v7 = v3;
LABEL_20:
      uint64_t v3 = v7 + 1;
      unint64_t v2 = a1[1];
    }
    while (v7 + 1 < v2);
  }
  *a1 = 0;
  a1[3] = v2;
}

void *_tc_google::protobuf::Map<long long,double>::~Map(void *a1)
{
  _tc_google::protobuf::Map<long long,double>::clear((uint64_t)a1);
  if (!*a1)
  {
    uint64_t v2 = a1[2];
    if (v2)
    {
      uint64_t v3 = _tc_google::protobuf::Map<long long,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x22A614FA0](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

double _tc_google::protobuf::Map<long long,double>::clear(uint64_t a1)
{
  _tc_google::protobuf::Map<std::string,std::string>::begin(a1, &v3);
  while ((void)v3)
  {
    long long v5 = v3;
    uint64_t v6 = v4;
    _tc_google::protobuf::Map<long long,double>::erase(a1, &v5, (uint64_t)&v7);
    double result = *(double *)&v7;
    long long v3 = v7;
    uint64_t v4 = v8;
  }
  return result;
}

__n128 _tc_google::protobuf::Map<long long,double>::erase@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)a1)
  {
    uint64_t v6 = *(void *)(*a2 + 8);
    if (v6) {
      MEMORY[0x22A614FA0](v6, 0x1000C40451B5BE8);
    }
  }
  long long v8 = *(_OWORD *)a2;
  uint64_t v9 = a2[2];
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::iterator_base<_tc_google::protobuf::Map<long long,std::string>::KeyValuePair const>::operator++(a2);
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::erase(*(void **)(a1 + 16), (uint64_t)&v8);
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(void *)(a3 + 16) = a2[2];
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::New()
{
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = this;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D77B2A8;
  result[1] = v5;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Clear(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      uint64_t v5 = *(char **)this;
      if (*(void *)this >= *((void *)this + 1))
      {
        unint64_t TagFallback = 0;
      }
      else
      {
        unint64_t TagFallback = *v5;
        if ((*v5 & 0x80000000) == 0)
        {
          *(void *)this = v5 + 1;
          goto LABEL_6;
        }
      }
      unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
      if (TagFallback != 10) {
        break;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      long long v7 = *(std::string **)(a1 + 16);
      if (v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, v7);
      if (!result) {
        return result;
      }
      int v9 = *(_DWORD *)(a1 + 40) | 1;
      *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v9;
      uint64_t v11 = *(char **)this;
      unint64_t v10 = *((void *)this + 1);
      if (*(void *)this < v10 && *v11 == 16)
      {
        uint64_t v12 = v11 + 1;
        *(void *)this = v12;
LABEL_19:
        int v13 = v9 | 2;
        *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v13;
        if ((unint64_t)v12 >= v10 || *v12 < 0)
        {
          Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
          if ((v16 & 1) == 0) {
            return 0;
          }
          int v13 = *(_DWORD *)(a1 + 40);
          uint64_t v15 = *(unsigned __int8 **)this;
          unint64_t v10 = *((void *)this + 1);
        }
        else
        {
          Varint64Fallbacint k = *v12;
          uint64_t v15 = (unsigned __int8 *)(v12 + 1);
          *(void *)this = v15;
        }
        *(void *)(a1 + 24) = Varint64Fallback;
        *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v13 | 2;
        if (v15 == (unsigned __int8 *)v10
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          BOOL result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback == 16)
    {
      int v9 = *(_DWORD *)(a1 + 40);
      uint64_t v12 = *(char **)this;
      unint64_t v10 = *((void *)this + 1);
      goto LABEL_19;
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField(this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

unint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v5 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0) {
      int v6 = *(_DWORD *)(v5 + 8);
    }
    uint64_t v3 = (int)(v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    unint64_t v4 = 0;
    return v4 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  unint64_t v4 = ((9 * (__clz(*(void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1) | 1) ^ 0x3F) + 73) >> 6)
     + 1;
  return v4 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteString(1, v4, a2);
  unint64_t v5 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v5, a2, v6);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v5 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0) {
      int v6 = *(_DWORD *)(v5 + 8);
    }
    unsigned int v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    int v4 = 0;
    return v4 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  int v4 = ((9 * (__clz(*(void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1) | 1) ^ 0x3F) + 73) >> 6)
     + 1;
  return v4 + v3;
}

unsigned char *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  int v6 = _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  unint64_t v7 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *int v6 = 16;
  long long v8 = v6 + 1;
  if (v7 < 0x80)
  {
    LOBYTE(v9) = v7;
  }
  else
  {
    do
    {
      *v8++ = v7 | 0x80;
      unint64_t v9 = v7 >> 7;
      unint64_t v10 = v7 >> 14;
      v7 >>= 7;
    }
    while (v10);
  }
  *long long v8 = v9;
  return v8 + 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::value(uint64_t a1)
{
  if (!*(void *)(a1 + 8))
  {
    _tc_google::protobuf::internal::LogMessage::LogMessage((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/google/protobuf/map_entry_lite.h", 162);
    int v2 = _tc_google::protobuf::internal::LogMessage::operator<<(v5, "CHECK failed: default_instance_ != NULL: ");
    _tc_google::protobuf::internal::LogFinisher::operator=((uint64_t)&v4, (_tc_google::protobuf::internal::LogMessage *)v2);
    _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)&v5[0].__r_.__value_.__l.__data_);
  }
  return a1 + 24;
}

void sub_22437BA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _tc_google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26D77B380;
  if (*(void *)(a1 + 8) != a1 && !*(void *)(a1 + 32)) {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
  }
  return a1;
}

std::string *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MergeFromInternal(std::string *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    char v4 = result;
    if (v2)
    {
      uint64_t v5 = (std::string **)&result->__r_.__value_.__r.__words[2];
      if ((uint64_t *)result->__r_.__value_.__r.__words[2] == &_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      int v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      BOOL result = std::string::operator=(*v5, v6);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      BOOL result = (std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      v4[1].__r_.__value_.__r.__words[0] = result->__r_.__value_.__r.__words[0];
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 2u;
    }
  }
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::New()
{
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[1] = 0;
  result[2] = 0;
  result[4] = this;
  result[3] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *BOOL result = &unk_26D77B428;
  result[1] = v5;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  *(void *)(result + 16) = 0;
  uint64_t v1 = *(void *)(result + 24);
  if ((uint64_t *)v1 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *(char **)this;
        if (*(void *)this >= *((void *)this + 1))
        {
          unint64_t TagFallback = 0;
        }
        else
        {
          unint64_t TagFallback = *v5;
          if ((*v5 & 0x80000000) == 0)
          {
            *(void *)this = v5 + 1;
            goto LABEL_6;
          }
        }
        unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
        if (TagFallback != 8) {
          break;
        }
        int v7 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v7;
        unint64_t v9 = *(char **)this;
        unint64_t v8 = *((void *)this + 1);
        if (*(void *)this >= v8 || *v9 < 0)
        {
          Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
          if ((v13 & 1) == 0) {
            return 0;
          }
          int v7 = *(_DWORD *)(a1 + 40);
          uint64_t v11 = *(char **)this;
          unint64_t v8 = *((void *)this + 1);
        }
        else
        {
          Varint64Fallbacint k = *v9;
          uint64_t v11 = v9 + 1;
          *(void *)this = v11;
        }
        *(void *)(a1 + 16) = Varint64Fallback;
        int v12 = v7 | 1;
        *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v12;
        if ((unint64_t)v11 < v8 && *v11 == 18)
        {
          *(void *)this = v11 + 1;
          goto LABEL_21;
        }
      }
      if (TagFallback != 18) {
        break;
      }
      int v12 = *(_DWORD *)(a1 + 40);
LABEL_21:
      *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v12 | 2;
      BOOL v14 = *(std::string **)(a1 + 24);
      if (v14 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, v14);
      if (!result) {
        return result;
      }
      *(_DWORD *)(a1 + 40) |= 2u;
      if (*(void *)this == *((void *)this + 1)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        BOOL result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField(this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

unint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    unint64_t v3 = ((9 * (__clz(*(void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v6 = 0;
    return v6 + v3;
  }
  unint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    int v5 = *(_DWORD *)(v4 + 8);
  }
  uint64_t v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, *v4, a2, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteString(2, v6, a2);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    int v3 = ((9 * (__clz(*(void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    unsigned int v6 = 0;
    return v6 + v3;
  }
  int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  int v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    int v5 = *(_DWORD *)(v4 + 8);
  }
  unsigned int v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

char *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unint64_t v5 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 8;
  unsigned int v6 = a3 + 1;
  if (v5 < 0x80)
  {
    LOBYTE(v7) = v5;
  }
  else
  {
    do
    {
      *v6++ = v5 | 0x80;
      unint64_t v7 = v5 >> 7;
      unint64_t v8 = v5 >> 14;
      v5 >>= 7;
    }
    while (v8);
  }
  *unsigned int v6 = v7;
  unint64_t v9 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  v6[1] = 18;
  return _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v9, v6 + 2);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26D77B500;
  if (*(void *)(a1 + 8) != a1 && !*(void *)(a1 + 32)) {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 24));
  }
  return a1;
}

std::string *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFromInternal(std::string *result, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      BOOL result = (std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      v4->__r_.__value_.__r.__words[2] = result->__r_.__value_.__r.__words[0];
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      unint64_t v5 = (std::string **)&v4[1];
      if ((uint64_t *)v4[1].__r_.__value_.__l.__data_ == &_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      unsigned int v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      BOOL result = std::string::operator=(*v5, v6);
      LODWORD(v4[1].__r_.__value_.__r.__words[2]) |= 2u;
    }
  }
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::New()
{
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = this;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *BOOL result = &unk_26D77B5A8;
  result[1] = v5;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergePartialFromCodedStream(uint64_t a1, char **this, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *this;
        if (*this >= this[1])
        {
          unint64_t TagFallback = 0;
        }
        else
        {
          unint64_t TagFallback = *v5;
          if ((*v5 & 0x80000000) == 0)
          {
            *this = v5 + 1;
            goto LABEL_6;
          }
        }
        unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)this, TagFallback);
LABEL_6:
        if (TagFallback != 10) {
          break;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        unint64_t v7 = *(std::string **)(a1 + 16);
        if (v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
        }
        BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, v7);
        if (!result) {
          return result;
        }
        int v8 = *(_DWORD *)(a1 + 40) | 1;
        *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v8;
        unint64_t v10 = *this;
        unint64_t v9 = this[1];
        if (*this < v9 && *v10 == 17)
        {
          uint64_t v11 = (unint64_t *)(v10 + 1);
          *this = (char *)v11;
          goto LABEL_19;
        }
      }
      if (TagFallback == 17) {
        break;
      }
      if (!TagFallback || (TagFallback & 7) == 4) {
        return 1;
      }
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
    int v8 = *(_DWORD *)(a1 + 40);
    uint64_t v11 = (unint64_t *)*this;
    unint64_t v9 = this[1];
LABEL_19:
    int v12 = v8 | 2;
    *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v12;
    unint64_t v17 = 0;
    if ((int)v9 - (int)v11 < 8)
    {
      BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v17);
      if (!result) {
        return result;
      }
      unint64_t v15 = v17;
      int v12 = *(_DWORD *)(a1 + 40);
      char v13 = *this;
      unint64_t v9 = this[1];
    }
    else
    {
      unint64_t v14 = *v11;
      char v13 = (char *)(v11 + 1);
      unint64_t v15 = v14;
      *this = v13;
    }
    *(void *)(a1 + 24) = v15;
    *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v12 | 2;
  }
  while (v13 != v9 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10));
  *((_DWORD *)this + 8) = 0;
  BOOL result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v5 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0) {
      int v6 = *(_DWORD *)(v5 + 8);
    }
    uint64_t v3 = (int)(v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v4 = 0;
    return v4 + v3;
  }
  uint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  (*(void (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  uint64_t v4 = 9;
  return v4 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteString(1, v4, a2);
  double v6 = *(double *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v6, v5);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    uint64_t v5 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1);
    int v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0) {
      int v6 = *(_DWORD *)(v5 + 8);
    }
    unsigned int v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    int v4 = 0;
    return v4 + v3;
  }
  unsigned int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  (*(void (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  int v4 = 9;
  return v4 + v3;
}

char *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v5 = (const void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 10;
  int v6 = _tc_google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(v5, a3 + 1);
  uint64_t v7 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *int v6 = 17;
  *(void *)(v6 + 1) = v7;
  return v6 + 9;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(uint64_t a1)
{
  *(void *)a1 = &unk_26D77B680;
  if (*(void *)(a1 + 8) != a1 && !*(void *)(a1 + 32)) {
    _tc_google::protobuf::internal::MapTypeHandler<(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,std::string>::DeleteNoArena((uint64_t **)(a1 + 16));
  }
  return a1;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    if (v2)
    {
      uint64_t v5 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      int v6 = (const std::string *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
      }
      std::string::operator=(*v5, v6);
      *(_DWORD *)(a1 + 40) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      int v8 = (double *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      double result = *v8;
      *(double *)(a1 + 24) = *v8;
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
  return result;
}

void *_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(void *result)
{
  *double result = &unk_26D77B800;
  return result;
}

void _tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryLite(void *a1)
{
  *a1 = &unk_26D77B800;
  JUMPOUT(0x22A614FA0);
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::New()
{
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::New(uint64_t a1, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  result[3] = 0;
  result[4] = this;
  result[1] = 0;
  result[2] = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  *double result = &unk_26D77B728;
  result[1] = v5;
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Clear(uint64_t result)
{
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) &= 0xFFFFFFFC;
  return result;
}

BOOL _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      uint64_t v5 = *(char **)this;
      if (*(void *)this >= *((void *)this + 1))
      {
        unint64_t TagFallback = 0;
      }
      else
      {
        unint64_t TagFallback = *v5;
        if ((*v5 & 0x80000000) == 0)
        {
          *(void *)this = v5 + 1;
          goto LABEL_6;
        }
      }
      unint64_t TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(this, TagFallback);
LABEL_6:
      if (TagFallback == 8) {
        break;
      }
      if (TagFallback == 17)
      {
        int v12 = *(_DWORD *)(a1 + 40);
        char v13 = *(unint64_t **)this;
        unint64_t v8 = *((void *)this + 1);
        goto LABEL_21;
      }
      if (!TagFallback || (TagFallback & 7) == 4) {
        return 1;
      }
      if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(this, (_tc_google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
    }
      }
    int v7 = *(_DWORD *)(a1 + 40) | 1;
    *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v7;
    unint64_t v9 = *(char **)this;
    unint64_t v8 = *((void *)this + 1);
    if (*(void *)this >= v8 || *v9 < 0)
    {
      Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      if ((v14 & 1) == 0) {
        return 0;
      }
      int v7 = *(_DWORD *)(a1 + 40);
      uint64_t v11 = *(char **)this;
      unint64_t v8 = *((void *)this + 1);
    }
    else
    {
      Varint64Fallbacint k = *v9;
      uint64_t v11 = v9 + 1;
      *(void *)this = v11;
    }
    *(void *)(a1 + 16) = Varint64Fallback;
    int v12 = v7 | 1;
    *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v7 | 1;
    if ((unint64_t)v11 < v8 && *v11 == 17)
    {
      char v13 = (unint64_t *)(v11 + 1);
      *(void *)this = v11 + 1;
LABEL_21:
      int v15 = v12 | 2;
      *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v12 | 2;
      unint64_t v20 = 0;
      if ((int)v8 - (int)v13 < 8)
      {
        BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v20);
        if (!result) {
          return result;
        }
        unint64_t v18 = v20;
        int v15 = *(_DWORD *)(a1 + 40);
        char v16 = *(char **)this;
        unint64_t v8 = *((void *)this + 1);
      }
      else
      {
        unint64_t v17 = *v13;
        char v16 = (char *)(v13 + 1);
        unint64_t v18 = v17;
        *(void *)this = v16;
      }
      *(void *)(a1 + 24) = v18;
      *(_DWORD *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v15 | 2;
      if (v16 == (char *)v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10))) {
        break;
      }
    }
  }
  *((_DWORD *)this + 8) = 0;
  BOOL result = 1;
  *((unsigned char *)this + 36) = 1;
  return result;
}

unint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::ByteSizeLong(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    unint64_t v3 = ((9 * (__clz(*(void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v4 = 0;
    return v4 + v3;
  }
  unint64_t v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  (*(void (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  uint64_t v4 = 9;
  return v4 + v3;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::SerializeWithCachedSizes(uint64_t a1, _tc_google::protobuf::io::CodedOutputStream *a2)
{
  uint64_t v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, *v4, a2, v5);
  double v7 = *(double *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, v6);
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::GetCachedSize(_DWORD *a1)
{
  int v2 = a1[10];
  if (v2)
  {
    int v3 = ((9 * (__clz(*(void *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 136))(a1) | 1) ^ 0x3F) + 73) >> 6)
       + 1;
    if ((a1[10] & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    int v4 = 0;
    return (v4 + v3);
  }
  int v3 = 0;
  if ((v2 & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  (*(void (**)(_DWORD *))(*(void *)a1 + 144))(a1);
  int v4 = 9;
  return (v4 + v3);
}

unsigned char *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unint64_t v5 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
  *a3 = 8;
  int v6 = a3 + 1;
  if (v5 < 0x80)
  {
    LOBYTE(v7) = v5;
  }
  else
  {
    do
    {
      *v6++ = v5 | 0x80;
      unint64_t v7 = v5 >> 7;
      unint64_t v8 = v5 >> 14;
      v5 >>= 7;
    }
    while (v8);
  }
  *int v6 = v7;
  uint64_t v9 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  v6[1] = 17;
  *(void *)(v6 + 2) = v9;
  return v6 + 10;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[10];
  if (v2)
  {
    if (v2)
    {
      *(void *)(a1 + 16) = *(void *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 136))(a2);
      *(_DWORD *)(a1 + 40) |= 1u;
      int v2 = a2[10];
    }
    if ((v2 & 2) != 0)
    {
      int v6 = (double *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 144))(a2);
      double result = *v6;
      *(double *)(a1 + 24) = *v6;
      *(_DWORD *)(a1 + 40) |= 2u;
    }
  }
  return result;
}

void *_tc_google::protobuf::Map<std::string,long long>::Init(uint64_t a1)
{
  int v2 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
  double result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,long long>::InnerMap>);
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_22437D1BC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,long long>::operator[](uint64_t a1, const std::string *a2)
{
  int v4 = (std::string **)_tc_google::protobuf::Map<std::string,long long>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,long long>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    unint64_t *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,long long>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v7 = 0;
  _tc_google::protobuf::Map<std::string,long long>::InnerMap::insert(a1, (long long *)&v6, (uint64_t)v5);
  uint64_t v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 + 24;
}

void sub_22437D2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *_tc_google::protobuf::Map<std::string,long long>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, const std::string *a2)
{
  int v4 = *a1;
  if (!v4) {
    operator new();
  }
  Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  std::string v6 = *a1;
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
  Aligned[1].__r_.__value_.__r.__words[0] = 0;
  std::string::operator=(Aligned, a2);
  return Aligned;
}

void sub_22437D390(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1012C4092066FB6);
  _Unwind_Resume(a1);
}

double _tc_google::protobuf::Map<std::string,long long>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((void)v17)
  {
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (_tc_google::protobuf::Map<std::string,long long>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      long long v17 = v14;
      uint64_t v9 = v16;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
    }
    else
    {
      uint64_t v9 = v19;
    }
    unint64_t v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 40);
    }
    else {
      Aligned = (std::string *)operator new(0x28uLL);
    }
    uint64_t v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(void *)(v12 + 24) = *((void *)a2 + 3);
    _tc_google::protobuf::Map<std::string,long long>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,long long>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,long long>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,long long>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(void *)(a3 + 32) = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,long long>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(void *)(v4 + 32) = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    uint64_t v15 = (const void **)v4;
    double result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    v6[3] = v12;
    goto LABEL_11;
  }
  *(void *)(a3 + 32) = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  uint64_t v15 = (const void **)a3;
  double result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,long long>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (_tc_google::protobuf::Arena *)a1[5];
  uint64_t v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        _tc_google::protobuf::Map<std::string,long long>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        _tc_google::protobuf::Map<std::string,long long>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *_tc_google::protobuf::Map<std::string,long long>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8 * a3);
  do
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (unsigned char *)v4);
    double result = _tc_google::protobuf::Map<std::string,long long>::InnerMap::InsertUnique(a1, v6, v4, v8);
    uint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,long long>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void ***)(a2 + 8 * a3);
  uint64_t v5 = *v4;
  do
  {
    uint64_t v6 = (unsigned char *)v5[4];
    uint64_t v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,long long>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,long long>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  v9[2] = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,long long>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,long long>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_22437D91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,long long>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,long long>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_22437D97C(_Unwind_Exception *a1)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToInt64Map>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  uint64_t v4 = *(unsigned char **)this;
  if (*(void *)this >= *((void *)this + 1) || *v4 != 10)
  {
    unint64_t v12 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v12);
    }
    char *v12 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    goto LABEL_13;
  }
  *(void *)this = v4 + 1;
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, (std::string *)(a1 + 16))) {
    return 0;
  }
  if ((int)(*((_DWORD *)this + 2) - *(void *)this) < 1 {
    || **(unsigned char **)this != 16
  }
    || (uint64_t v5 = *(void *)(a1 + 8),
        uint64_t v6 = **(void **)(v5 + 16),
        *(void *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = _tc_google::protobuf::Map<std::string,long long>::operator[](v5, (const std::string *)(a1 + 16)), v6 == **(void **)(*(void *)(a1 + 8) + 16)))
  {
LABEL_13:
    uint64_t v13 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    uint64_t v14 = *(void **)(a1 + 48);
    if (v14 != v13)
    {
      if (v14) {
        (*(void (**)(void *))(*v14 + 8))(v14);
      }
      *(void *)(a1 + 48) = v13;
    }
    uint64_t v15 = (std::string *)v13[2];
    *((_DWORD *)v13 + 10) |= 1u;
    if (v15 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
    }
    std::string::operator=(v15, (const std::string *)(a1 + 16));
    uint64_t v16 = (*(uint64_t (**)(void, _tc_google::protobuf::io::CodedInputStream *))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), this);
    if (v16) {
      _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry(a1);
    }
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48))) {
      *(void *)(a1 + 48) = 0;
    }
    return v16;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
  uint64_t v7 = *(unint64_t **)(a1 + 40);
  uint64_t v9 = *(unsigned __int8 **)this;
  uint64_t v8 = (char *)*((void *)this + 1);
  if (*(void *)this >= (unint64_t)v8 || (char)*v9 < 0)
  {
    Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if (v17)
    {
      uint64_t v11 = *(char **)this;
      uint64_t v8 = (char *)*((void *)this + 1);
      goto LABEL_28;
    }
    _tc_google::protobuf::Map<std::string,long long>::erase(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
    return 0;
  }
  Varint64Fallbacint k = *v9;
  uint64_t v11 = (char *)(v9 + 1);
  *(void *)this = v11;
LABEL_28:
  unint64_t *v7 = Varint64Fallback;
  if (v11 == v8 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v16 = 1;
    *((unsigned char *)this + 36) = 1;
    return v16;
  }
  return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
}

uint64_t _tc_google::protobuf::Map<std::string,long long>::erase(uint64_t a1, unsigned __int8 *a2)
{
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(*(void *)(a1 + 16), a2, 0, &v6);
  if (!(void)v6) {
    return 0;
  }
  long long v4 = v6;
  uint64_t v5 = v7;
  _tc_google::protobuf::Map<std::string,long long>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5 != v4)
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
    *(void *)(a1 + 48) = v4;
  }
  long long v6 = *(void **)(a1 + 40);
  *((_DWORD *)v4 + 10) |= 2u;
  v4[3] = *v6;
  _tc_google::protobuf::Map<std::string,long long>::erase(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  uint64_t v7 = *(void *)(a1 + 48);
  *(_DWORD *)(v7 + 40) |= 1u;
  uint64_t v8 = *(void *)(v7 + 16);
  if ((uint64_t *)v8 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)v8);
  }
  long long v9 = *(_OWORD *)(a1 + 16);
  *(void *)(v8 + 16) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v8 = v9;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
  if (v10) {
    _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48))) {
    *(void *)(a1 + 48) = 0;
  }
  return v10;
}

void *_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = v1;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  *uint64_t result = &unk_26D77B2A8;
  return result;
}

std::string *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::Map<std::string,long long>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  unint64_t v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  uint64_t result = _tc_google::protobuf::Map<std::string,long long>::operator[](*(void *)(a1 + 8), (const std::string *)(a1 + 16));
  *(void *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = result;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  result->__r_.__value_.__r.__words[0] = *(void *)(v4 + 24);
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (const void ***)result;
LABEL_2:
  uint64_t v11 = a2 - 1;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v12);
          if (result)
          {
            uint64_t v23 = *v12;
            char *v12 = *v11;
            char *v11 = v23;
          }
          break;
        case 3uLL:
          uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, &v12[v16 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12 + 1, v18 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12 + 2, &v12[v17 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      char *v12 = *v18;
      const char *v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v12[v16 >> 1], v12, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v12 - 1, v12))
    {
      uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v12, a2, a3);
      unint64_t v12 = (const void ***)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v12, a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**>(v12, v20, a3);
    unint64_t v12 = v20 + 1;
    uint64_t result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**>(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      uint64_t result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**,false>(v10, v20, a3, -v14, a5 & 1);
      unint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,long long> const*> &,_tc_google::protobuf::MapPair<std::string,long long> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        long long v9 = *a1;
        *a1 = *v8;
        *uint64_t v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      unint64_t v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          unint64_t v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      char *v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = this;
  *BOOL result = &unk_26D77B8D0;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>,_tc_google::protobuf::MessageLite,std::string,long long,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

void *_tc_google::protobuf::Map<long long,std::string>::Init(uint64_t a1)
{
  unint64_t v2 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
  BOOL result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<long long,std::string>::InnerMap>);
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_22437E634(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

void *_tc_google::protobuf::Map<long long,std::string>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  v9[0] = *a2;
  v9[1] = 0;
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::insert(v4, v9, (uint64_t)v8);
  uint64_t v5 = v8[0];
  ValueTypeInternal = *(void **)(v8[0] + 8);
  if (!ValueTypeInternal)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<long long,std::string>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *(void *)(v5 + 8) = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

void *_tc_google::protobuf::Map<long long,std::string>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, void *a2)
{
  uint64_t v4 = *a1;
  if (!v4) {
    operator new();
  }
  Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  void *Aligned = 0;
  uint64_t v6 = *a1;
  Aligned[2] = 0;
  Aligned[3] = 0;
  Aligned[1] = 0;
  _tc_google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned + 1);
  void *Aligned = *a2;
  return Aligned;
}

double _tc_google::protobuf::Map<long long,std::string>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(a1, a2, 0, &v15);
  if ((void)v15)
  {
    uint64_t v7 = *((void *)&v15 + 1);
    uint64_t v8 = v16;
    *(void *)a3 = v15;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (_tc_google::protobuf::Map<long long,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(a1, a2, 0, &v12);
      long long v15 = v12;
      uint64_t v9 = v14;
      uint64_t v16 = v13;
      uint64_t v17 = v14;
    }
    else
    {
      uint64_t v9 = v17;
    }
    uint64_t v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = _tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 24);
    }
    else {
      Aligned = (uint64_t *)operator new(0x18uLL);
    }
    *(_OWORD *)Aligned = *(_OWORD *)a2;
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(a1, v9, Aligned, (uint64_t **)&v12);
    ++*a1;
    double result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(void *)(a3 + 16) = v13;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<long long,std::string>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    a3[2] = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 16);
    }
    while (v11);
    if (v10 < 8)
    {
      a3[2] = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = v6;
      a4[2] = (uint64_t *)v5;
      return result;
    }
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::TreeConvert((uint64_t)result, a2);
    v4[2] = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    long long v15 = v4;
    double result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = (uint64_t *)result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    v6[3] = v12;
    goto LABEL_11;
  }
  a3[2] = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  long long v15 = a3;
  double result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v13, &v15, (uint64_t *)&v15);
  *a4 = (uint64_t *)result[4];
  a4[1] = v6;
  a4[2] = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  return result;
}

void _tc_google::protobuf::Map<long long,std::string>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (_tc_google::protobuf::Arena *)a1[5];
  uint64_t v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        _tc_google::protobuf::Map<long long,std::string>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        _tc_google::protobuf::Map<long long,std::string>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *_tc_google::protobuf::Map<long long,std::string>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(uint64_t **)(a2 + 8 * a3);
  do
  {
    unint64_t v5 = (uint64_t *)v4[2];
    double result = _tc_google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(a1, (a1[1] - 1) & (a1[2] + *v4), v4, &v7);
    unint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<long long,std::string>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void ***)(a2 + 8 * a3);
  unint64_t v5 = *v4;
  do
  {
    _tc_google::protobuf::Map<long long,std::string>::InnerMap::InsertUnique(a1, (a1[1] - 1) & (a1[2] + *(void *)v5[4]), (uint64_t *)v5[4], &v9);
    uint64_t v6 = (void *)v5[1];
    if (v6)
    {
      do
      {
        unint64_t v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        unint64_t v7 = (void *)v5[2];
        BOOL v8 = *v7 == (void)v5;
        unint64_t v5 = v7;
      }
      while (!v8);
    }
    unint64_t v5 = v7;
  }
  while (v7 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  uint64_t v9[2] = 0;
  BOOL v8 = v9;
  v9[0] = 0;
  std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_22437EC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(uint64_t **)(*(void *)(a1 + 32) + 8 * a2);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    BOOL v8 = v3;
    std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(a3, &v8, (uint64_t *)&v8);
    ++v5;
    uint64_t v6 = (uint64_t *)v3[2];
    v3[2] = 0;
    unint64_t v3 = v6;
  }
  while (v6);
  return v5;
}

uint64_t *std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::insert[abi:ne180100]<std::__tree_const_iterator<long long *,std::__tree_node<long long *,void *> *,long>>(a1, *(uint64_t ***)a2, (uint64_t **)(a2 + 8));
  return a1;
}

void sub_22437ED58(_Unwind_Exception *a1)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::insert[abi:ne180100]<std::__tree_const_iterator<long long *,std::__tree_node<long long *,void *> *,long>>(uint64_t *result, uint64_t **a2, uint64_t **a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_hint_unique_key_args<long long *,long long * const&>(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      unint64_t v7 = v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = (uint64_t **)v7;
          unint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (uint64_t **)v4[2];
          BOOL v9 = *v8 == (uint64_t *)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_hint_unique_key_args<long long *,long long * const&>(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t v6 = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__find_equal<long long *>((void *)a1, a2, &v11, &v10, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    unint64_t v7 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((_tc_google::protobuf::Arena **)(a1 + 16), 1, 0);
    void v7[4] = *a4;
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__find_equal<long long *>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (uint64_t v6 = **a5, v7 = *(void *)a2[4], v6 < v7))
  {
    BOOL v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    uint64_t v15 = **a5;
    if (*(void *)v10[4] < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          uint64_t v18 = **(void **)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    unint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      unint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *(void *)a4[4])
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          char v21 = (uint64_t *)v20;
          uint64_t v22 = **(void **)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      char v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = **a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        uint64_t v9 = *(void *)v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    uint64_t v10 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((_tc_google::protobuf::Arena **)(a1 + 16), 1, 0);
    v10[4] = *a3;
    std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToStringMap>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  uint64_t v5 = *(unsigned char **)this;
  unint64_t v4 = *((void *)this + 1);
  if (*(void *)this >= v4 || *v5 != 8)
  {
    *(void *)(a1 + 16) = 0;
    goto LABEL_17;
  }
  *(void *)this = v5 + 1;
  if ((unint64_t)(v5 + 1) >= v4 || (char)v5[1] < 0)
  {
    Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
    if ((v8 & 1) == 0) {
      return 0;
    }
    uint64_t v7 = *(unsigned char **)this;
    unint64_t v4 = *((void *)this + 1);
  }
  else
  {
    Varint64Fallbacint k = v5[1];
    uint64_t v7 = v5 + 2;
    *(void *)this = v7;
  }
  *(void *)(a1 + 16) = Varint64Fallback;
  if ((int)v4 - (int)v7 < 1
    || *v7 != 18
    || (uint64_t v9 = *(void *)(a1 + 8),
        uint64_t v10 = **(void **)(v9 + 16),
        *(void *)(a1 + 24) = _tc_google::protobuf::Map<long long,std::string>::operator[](v9, (uint64_t *)(a1 + 16)),
        v10 == **(void **)(*(void *)(a1 + 8) + 16)))
  {
LABEL_17:
    unint64_t v12 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
    uint64_t v13 = *(void **)(a1 + 32);
    if (v13 != v12)
    {
      if (v13) {
        (*(void (**)(void *))(*v13 + 8))(v13);
      }
      *(void *)(a1 + 32) = v12;
    }
    uint64_t v14 = *(void *)(a1 + 16);
    *((_DWORD *)v12 + 10) |= 1u;
    void v12[2] = v14;
    uint64_t v15 = (*(uint64_t (**)(void *, _tc_google::protobuf::io::CodedInputStream *))(*v12 + 88))(v12, this);
    if (v15) {
      __n128 v16 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry(a1);
    }
    if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), v16)) {
      *(void *)(a1 + 32) = 0;
    }
    return v15;
  }
  _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
  if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)this, *(std::string **)(a1 + 24)))
  {
    _tc_google::protobuf::Map<long long,std::string>::erase(*(void *)(a1 + 8), (uint64_t *)(a1 + 16));
    return 0;
  }
  if (*(void *)this == *((void *)this + 1)
    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
  {
    *((_DWORD *)this + 8) = 0;
    uint64_t v15 = 1;
    *((unsigned char *)this + 36) = 1;
    return v15;
  }
  return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
}

uint64_t _tc_google::protobuf::Map<long long,std::string>::erase(uint64_t a1, uint64_t *a2)
{
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(*(void **)(a1 + 16), a2, 0, &v6);
  if (!(void)v6) {
    return 0;
  }
  long long v4 = v6;
  uint64_t v5 = v7;
  _tc_google::protobuf::Map<long long,std::string>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != v4)
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
    *(void *)(a1 + 32) = v4;
  }
  long long v6 = *(long long **)(a1 + 24);
  uint64_t v7 = v4[3];
  *((_DWORD *)v4 + 10) |= 2u;
  if ((uint64_t *)v7 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v7 + 23) < 0) {
    operator delete(*(void **)v7);
  }
  long long v8 = *v6;
  *(void *)(v7 + 16) = *((void *)v6 + 2);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)v6 + 23) = 0;
  *(unsigned char *)long long v6 = 0;
  _tc_google::protobuf::Map<long long,std::string>::erase(*(void *)(a1 + 8), (uint64_t *)(a1 + 16));
  uint64_t v9 = *(void *)(a1 + 32);
  *(_DWORD *)(v9 + 40) |= 1u;
  *(void *)(v9 + 16) = *(void *)(a1 + 16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 88))(v9, a2);
  if (v10) {
    __n128 v11 = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), v11)) {
    *(void *)(a1 + 32) = 0;
  }
  return v10;
}

void *_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = 0;
  result[4] = v1;
  result[3] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  *uint64_t result = &unk_26D77B428;
  return result;
}

__n128 _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::Map<long long,std::string>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  *(void *)(a1 + 16) = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 136))(*(void *)(a1 + 32));
  unint64_t v2 = (void **)_tc_google::protobuf::Map<long long,std::string>::operator[](*(void *)(a1 + 8), (uint64_t *)(a1 + 16));
  *(void *)(a1 + 24) = v2;
  uint64_t v3 = *(void *)(a1 + 32);
  *(_DWORD *)(v3 + 40) |= 2u;
  uint64_t v4 = *(void *)(v3 + 24);
  if ((uint64_t *)v4 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*((char *)v2 + 23) < 0) {
    operator delete(*v2);
  }
  __n128 result = *(__n128 *)v4;
  void v2[2] = *(void **)(v4 + 16);
  *(__n128 *)unint64_t v2 = result;
  *(unsigned char *)(v4 + 23) = 0;
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,false>(__n128 *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
void *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(void *result, void *a2)
{
  if (result != a2)
  {
    unint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        char v5 = v2;
        uint64_t v6 = v4[2];
        if (v6 < *v4)
        {
          uint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            uint64_t v9 = *(void *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 >= v9)
            {
              uint64_t v10 = (void *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          void *v10 = v6;
          v10[1] = v7;
        }
        unint64_t v2 = v5 + 2;
        v3 += 16;
        uint64_t v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(long long *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (*a2 < *(void *)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(void *)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

void *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>(void *a1, _OWORD *a2)
{
  uint64_t v2 = *a1;
  if (*a1 >= *((void *)a2 - 2))
  {
    long long v5 = a1 + 2;
    do
    {
      uint64_t v3 = v5;
      if (v5 >= (void *)a2) {
        break;
      }
      v5 += 2;
    }
    while (v2 >= *v3);
  }
  else
  {
    uint64_t v3 = a1;
    do
    {
      uint64_t v4 = v3[2];
      v3 += 2;
    }
    while (v2 >= v4);
  }
  if (v3 < (void *)a2)
  {
    do
      uint64_t v6 = *((void *)a2-- - 2);
    while (v2 < v6);
  }
  uint64_t v7 = a1[1];
  while (v3 < (void *)a2)
  {
    long long v11 = *(_OWORD *)v3;
    *(_OWORD *)uint64_t v3 = *a2;
    *a2 = v11;
    do
    {
      uint64_t v8 = v3[2];
      v3 += 2;
    }
    while (v2 >= v8);
    do
      uint64_t v9 = *((void *)a2-- - 2);
    while (v2 < v9);
  }
  if (v3 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v3 - 1);
  }
  *(v3 - 2) = v2;
  *(v3 - 1) = v7;
  return v3;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*> *,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  do
  {
    uint64_t v5 = a1[v2 + 2];
    v2 += 2;
  }
  while (v5 < v3);
  uint64_t v6 = &a1[v2];
  if (v2 == 2)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      uint64_t v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
    {
      uint64_t v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= v3);
  }
  uint64_t v9 = &a1[v2];
  if (v6 < a2)
  {
    uint64_t v10 = a2;
    do
    {
      long long v11 = *(_OWORD *)v9;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)uint64_t v10 = v11;
      do
      {
        uint64_t v12 = v9[2];
        v9 += 2;
      }
      while (v12 < v3);
      do
      {
        uint64_t v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= v3);
    }
    while (v9 < v10);
  }
  if (v9 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v9 - 1);
  }
  *(v9 - 2) = v3;
  *(v9 - 1) = v4;
  return v9 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *uint64_t v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)a1, (uint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      uint64_t v8 = (void *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      uint64_t v9 = (void *)(a1 + 48);
      if ((void *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      uint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        uint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          unint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (void *)a1;
LABEL_12:
      void *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(long long *a1, uint64_t *a2, uint64_t *a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(long long *a1, uint64_t *a2, uint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(a1, a2, a3, a4).n128_u64[0];
  if ((int64_t)a5->n128_u64[0] < (int64_t)a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if ((int64_t)a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(void *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(char *a1, char *a2, char *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[16 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*(void *)v14 < *(void *)a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v30 = *(_OWORD *)a1;
        uint64_t v18 = a1;
        do
        {
          char v19 = &v18[16 * v17 + 16];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && *(void *)v19 < *((void *)v19 + 2))
          {
            v19 += 16;
            uint64_t v20 = v21;
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
          uint64_t v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 16;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v30;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)uint64_t v6 = v30;
          uint64_t v22 = v19 - a1 + 16;
          if (v22 >= 17)
          {
            unint64_t v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            signed int v24 = &a1[16 * v23];
            uint64_t v25 = *(void *)v19;
            if (*(void *)v24 < *(void *)v19)
            {
              uint64_t v26 = *((void *)v19 + 1);
              do
              {
                uint64_t v27 = v19;
                char v19 = v24;
                *(_OWORD *)uint64_t v27 = *(_OWORD *)v24;
                if (!v23) {
                  break;
                }
                unint64_t v23 = (v23 - 1) >> 1;
                signed int v24 = &a1[16 * v23];
              }
              while (*(void *)v24 < v25);
              *(void *)char v19 = v25;
              *((void *)v19 + 1) = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (void *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        uint64_t v10 = *v8;
      }
      else
      {
        uint64_t v10 = *v8;
        uint64_t v11 = v8[2];
        if (*v8 <= v11) {
          uint64_t v10 = v8[2];
        }
        if (*v8 < v11)
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v12 = *a4;
      if (v10 >= *a4)
      {
        uint64_t v13 = a4[1];
        do
        {
          uint64_t v14 = a4;
          a4 = v8;
          *uint64_t v14 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v15 = (2 * v7) | 1;
          uint64_t v8 = (void *)(result + 16 * v15);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            uint64_t v16 = *v8;
            uint64_t v7 = v15;
          }
          else
          {
            uint64_t v16 = *v8;
            uint64_t v17 = v8[2];
            if (*v8 <= v17) {
              uint64_t v16 = v8[2];
            }
            if (*v8 >= v17) {
              uint64_t v7 = v15;
            }
            else {
              v8 += 2;
            }
          }
        }
        while (v16 >= v12);
        *a4 = v12;
        a4[1] = v13;
      }
    }
  }
  return result;
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[1] = 0;
  result[2] = 0;
  result[4] = this;
  result[3] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *__n128 result = &unk_26D77BA10;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>,_tc_google::protobuf::MessageLite,long long,std::string,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

void *_tc_google::protobuf::Map<std::string,double>::Init(uint64_t a1)
{
  uint64_t v2 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
  __n128 result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<std::string,double>::InnerMap>);
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_2243804F4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::Map<std::string,double>::operator[](uint64_t a1, const std::string *a2)
{
  uint64_t v4 = (std::string **)_tc_google::protobuf::Map<std::string,double>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<std::string,long long>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    void *v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t _tc_google::protobuf::Map<std::string,double>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v7 = 0;
  _tc_google::protobuf::Map<std::string,double>::InnerMap::insert(a1, (long long *)&v6, (uint64_t)v5);
  uint64_t v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 + 24;
}

void sub_2243805F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double _tc_google::protobuf::Map<std::string,double>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((void)v17)
  {
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (_tc_google::protobuf::Map<std::string,double>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      _tc_google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      long long v17 = v14;
      uint64_t v9 = v16;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
    }
    else
    {
      uint64_t v9 = v19;
    }
    uint64_t v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = (std::string *)_tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 40);
    }
    else {
      Aligned = (std::string *)operator new(0x28uLL);
    }
    uint64_t v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(void *)(v12 + 24) = *((void *)a2 + 3);
    _tc_google::protobuf::Map<std::string,double>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<std::string,double>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<std::string,double>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<std::string,double>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(void *)(a3 + 32) = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    _tc_google::protobuf::Map<std::string,double>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(void *)(v4 + 32) = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    uint64_t v15 = (const void **)v4;
    double result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    v6[3] = v12;
    goto LABEL_11;
  }
  *(void *)(a3 + 32) = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  uint64_t v15 = (const void **)a3;
  double result = std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void _tc_google::protobuf::Map<std::string,double>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (_tc_google::protobuf::Arena *)a1[5];
  uint64_t v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        _tc_google::protobuf::Map<std::string,double>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        _tc_google::protobuf::Map<std::string,double>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *_tc_google::protobuf::Map<std::string,double>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8 * a3);
  do
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, (unsigned char *)v4);
    double result = _tc_google::protobuf::Map<std::string,double>::InnerMap::InsertUnique(a1, v6, v4, v8);
    uint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<std::string,double>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void ***)(a2 + 8 * a3);
  uint64_t v5 = *v4;
  do
  {
    uint64_t v6 = (unsigned char *)v5[4];
    uint64_t v7 = _tc_google::protobuf::Map<std::string,std::string>::InnerMap::BucketNumber((uint64_t)a1, v6);
    _tc_google::protobuf::Map<std::string,double>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<std::string,double>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  uint64_t v9[2] = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  std::set<std::string *,_tc_google::protobuf::Map<std::string,double>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,double>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_224380B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *std::set<std::string *,_tc_google::protobuf::Map<std::string,double>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,double>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_224380BD4(_Unwind_Exception *a1)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringToDoubleMap>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::MergePartialFromCodedStream(uint64_t a1, char **this)
{
  uint64_t v4 = *this;
  if (*this < this[1] && *v4 == 10)
  {
    *this = v4 + 1;
    if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes(this, (std::string *)(a1 + 16))) {
      return 0;
    }
    if ((int)(*((_DWORD *)this + 2) - *this) >= 1 && **this == 17)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      uint64_t v6 = **(void **)(v5 + 16);
      *(void *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = _tc_google::protobuf::Map<std::string,double>::operator[](v5, (const std::string *)(a1 + 16));
      if (v6 != **(void **)(*(void *)(a1 + 8) + 16))
      {
        _tc_google::protobuf::io::CodedInputStream::Skip((_tc_google::protobuf::io::CodedInputStream *)this, 1u);
        uint64_t v7 = *(unint64_t **)(a1 + 40);
        unint64_t v20 = 0;
        uint64_t v8 = *this;
        uint64_t v9 = this[1];
        if ((int)(v9 - *this) >= 8)
        {
          unint64_t v11 = *(void *)v8;
          BOOL v10 = v8 + 8;
          unint64_t v12 = v11;
          *this = v10;
LABEL_9:
          unint64_t *v7 = v12;
          if (v10 != v9 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
            return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
          }
          *((_DWORD *)this + 8) = 0;
          uint64_t v13 = 1;
          *((unsigned char *)this + 36) = 1;
          return v13;
        }
        if (_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v20))
        {
          unint64_t v12 = v20;
          BOOL v10 = *this;
          uint64_t v9 = this[1];
          goto LABEL_9;
        }
        _tc_google::protobuf::Map<std::string,long long>::erase(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
        return 0;
      }
    }
  }
  else
  {
    uint64_t v14 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v14);
    }
    *uint64_t v14 = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v15 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  uint64_t v16 = *(void **)(a1 + 48);
  if (v16 != v15)
  {
    if (v16) {
      (*(void (**)(void *))(*v16 + 8))(v16);
    }
    *(void *)(a1 + 48) = v15;
  }
  long long v17 = (std::string *)v15[2];
  *((_DWORD *)v15 + 10) |= 1u;
  if (v17 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  std::string::operator=(v17, (const std::string *)(a1 + 16));
  uint64_t v13 = (*(uint64_t (**)(void, char **))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), this);
  if (v13) {
    v18.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v18)) {
    *(void *)(a1 + 48) = 0;
  }
  return v13;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5 != v4)
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
    *(void *)(a1 + 48) = v4;
  }
  uint64_t v6 = *(void **)(a1 + 40);
  *((_DWORD *)v4 + 10) |= 2u;
  v4[3] = *v6;
  _tc_google::protobuf::Map<std::string,long long>::erase(*(void *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
  uint64_t v7 = *(void *)(a1 + 48);
  *(_DWORD *)(v7 + 40) |= 1u;
  uint64_t v8 = *(void *)(v7 + 16);
  if ((uint64_t *)v8 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstance();
  }
  if (*(char *)(v8 + 23) < 0) {
    operator delete(*(void **)v8);
  }
  long long v9 = *(_OWORD *)(a1 + 16);
  *(void *)(v8 + 16) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v8 = v9;
  *(unsigned char *)(a1 + 39) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a2);
  if (v10) {
    v11.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v11)) {
    *(void *)(a1 + 48) = 0;
  }
  return v10;
}

void *_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = v1;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  *uint64_t result = &unk_26D77B5A8;
  return result;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<std::string,double>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  unint64_t v2 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 136))(*(void *)(a1 + 48));
  std::string::operator=((std::string *)(a1 + 16), v2);
  uint64_t v3 = _tc_google::protobuf::Map<std::string,double>::operator[](*(void *)(a1 + 8), (const std::string *)(a1 + 16));
  *(void *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_DWORD *)(v4 + 40) |= 2u;
  double result = *(double *)(v4 + 24);
  *(double *)&v3->__r_.__value_.__l.__data_ = result;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**,false>(uint64_t result, const void ***a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (const void ***)result;
LABEL_2:
  __n128 v11 = a2 - 1;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          double result = _tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, v12);
          if (result)
          {
            unint64_t v23 = *v12;
            char *v12 = *v11;
            __n128 *v11 = v23;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    __n128 v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, &v12[v16 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12 + 1, v18 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12 + 2, &v12[v17 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      char *v12 = *v18;
      char *v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(&v12[v16 >> 1], v12, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v12 - 1, v12))
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v12, a2, a3);
      unint64_t v12 = (const void ***)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &>(v12, a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**>(v12, v20, a3);
    unint64_t v12 = v20 + 1;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**>(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**,false>(v10, v20, a3, -v14, a5 & 1);
      unint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(v12, a2, a3);
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,double> const*> &,_tc_google::protobuf::MapPair<std::string,double> const**>(const void ***a1, const void ***a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = a2 - 1;
      if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, a2 - 1, a1))
      {
        long long v9 = *a1;
        *a1 = *v8;
        *uint64_t v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*> &,_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const**>(a1, a1 + 1, a1 + 2, a3);
      __n128 v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, v11, v10))
    {
      unint64_t v17 = *v11;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (const void ***)((char *)a1 + v14);
        *(const void ***)((char *)a1 + v14 + 24) = *(const void ***)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (!_tc_google::protobuf::internal::CompareByDerefFirst<_tc_google::protobuf::MapPair<std::string,CoreML::Specification::V5::Function> const*>::operator()(a3, &v17, v15 + 1))
        {
          unint64_t v16 = (const void ***)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      void *v16 = v17;
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[1] = 0;
  result[2] = &_tc_google::protobuf::internal::fixed_address_empty_string;
  result[3] = 0;
  result[4] = this;
  *BOOL result = &unk_26D77BAF8;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::~MapEntryWrapper(uint64_t a1)
{
  _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,std::string,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)9,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::~MapEntryImpl(a1);
  JUMPOUT(0x22A614FA0);
}

void *_tc_google::protobuf::Map<long long,double>::Init(uint64_t a1)
{
  unint64_t v2 = *(_tc_google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::InnerMap::InnerMap(Aligned, 0, v2);
  BOOL result = _tc_google::protobuf::Arena::AddListNode(v2, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<_tc_google::protobuf::Map<long long,double>::InnerMap>);
  *(void *)(a1 + 16) = Aligned;
  return result;
}

void sub_224381818(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

void *_tc_google::protobuf::Map<long long,double>::operator[](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  v9[0] = *a2;
  v9[1] = 0;
  _tc_google::protobuf::Map<long long,double>::InnerMap::insert(v4, v9, (uint64_t)v8);
  uint64_t v5 = v8[0];
  ValueTypeInternal = *(void **)(v8[0] + 8);
  if (!ValueTypeInternal)
  {
    ValueTypeInternal = _tc_google::protobuf::Map<long long,double>::CreateValueTypeInternal((_tc_google::protobuf::Arena **)a1, a2);
    *(void *)(v5 + 8) = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

void *_tc_google::protobuf::Map<long long,double>::CreateValueTypeInternal(_tc_google::protobuf::Arena **a1, void *a2)
{
  uint64_t v3 = *a1;
  if (!v3) {
    operator new();
  }
  BOOL result = _tc_google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x263F8C250], 16);
  *BOOL result = 0;
  result[1] = 0;
  *BOOL result = *a2;
  return result;
}

double _tc_google::protobuf::Map<long long,double>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(a1, a2, 0, &v15);
  if ((void)v15)
  {
    uint64_t v7 = *((void *)&v15 + 1);
    uint64_t v8 = v16;
    *(void *)a3 = v15;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (_tc_google::protobuf::Map<long long,double>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(a1, a2, 0, &v12);
      long long v15 = v12;
      uint64_t v9 = v14;
      uint64_t v16 = v13;
      uint64_t v17 = v14;
    }
    else
    {
      uint64_t v9 = v17;
    }
    uint64_t v10 = (_tc_google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = _tc_google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 24);
    }
    else {
      Aligned = (uint64_t *)operator new(0x18uLL);
    }
    *(_OWORD *)Aligned = *(_OWORD *)a2;
    _tc_google::protobuf::Map<long long,double>::InnerMap::InsertUnique(a1, v9, Aligned, (uint64_t **)&v12);
    ++*a1;
    double result = *(double *)&v12;
    *(_OWORD *)a3 = v12;
    *(void *)(a3 + 16) = v13;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t _tc_google::protobuf::Map<long long,double>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      _tc_google::protobuf::Map<long long,double>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *_tc_google::protobuf::Map<long long,double>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    a3[2] = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 16);
    }
    while (v11);
    if (v10 < 8)
    {
      a3[2] = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = v6;
      a4[2] = (uint64_t *)v5;
      return result;
    }
    _tc_google::protobuf::Map<long long,double>::InnerMap::TreeConvert((uint64_t)result, a2);
    v4[2] = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    long long v15 = v4;
    double result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = (uint64_t *)result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    v6[3] = v12;
    goto LABEL_11;
  }
  a3[2] = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  long long v15 = a3;
  double result = std::__tree<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::__emplace_unique_key_args<long long *,long long *>(v13, &v15, (uint64_t *)&v15);
  *a4 = (uint64_t *)result[4];
  a4[1] = v6;
  a4[2] = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  return result;
}

void _tc_google::protobuf::Map<long long,double>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (_tc_google::protobuf::Arena *)a1[5];
  uint64_t v6 = _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        _tc_google::protobuf::Map<long long,double>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        _tc_google::protobuf::Map<long long,double>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *_tc_google::protobuf::Map<long long,double>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(uint64_t **)(a2 + 8 * a3);
  do
  {
    unint64_t v5 = (uint64_t *)v4[2];
    double result = _tc_google::protobuf::Map<long long,double>::InnerMap::InsertUnique(a1, (a1[1] - 1) & (a1[2] + *v4), v4, &v7);
    unint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void _tc_google::protobuf::Map<long long,double>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = *(void ***)(a2 + 8 * a3);
  unint64_t v5 = *v4;
  do
  {
    _tc_google::protobuf::Map<long long,double>::InnerMap::InsertUnique(a1, (a1[1] - 1) & (a1[2] + *(void *)v5[4]), (uint64_t *)v5[4], &v9);
    uint64_t v6 = (void *)v5[1];
    if (v6)
    {
      do
      {
        unint64_t v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        unint64_t v7 = (void *)v5[2];
        BOOL v8 = *v7 == (void)v5;
        unint64_t v5 = v7;
      }
      while (!v8);
    }
    unint64_t v5 = v7;
  }
  while (v7 != v4 + 1);
  _tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t _tc_google::protobuf::Map<long long,double>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(_tc_google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = _tc_google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  uint64_t v9[2] = 0;
  BOOL v8 = v9;
  v9[0] = 0;
  std::set<long long *,_tc_google::protobuf::Map<long long,double>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,double>::MapAllocator<long long *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = _tc_google::protobuf::Map<long long,std::string>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_224381E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *std::set<long long *,_tc_google::protobuf::Map<long long,double>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,double>::MapAllocator<long long *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<long long *,_tc_google::protobuf::Map<long long,std::string>::InnerMap::KeyCompare,_tc_google::protobuf::Map<long long,std::string>::MapAllocator<long long *>>::insert[abi:ne180100]<std::__tree_const_iterator<long long *,std::__tree_node<long long *,void *> *,long>>(a1, *(uint64_t ***)a2, (uint64_t **)(a2 + 8));
  return a1;
}

void sub_224381E98(_Unwind_Exception *a1)
{
  std::__tree<std::string *,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::InnerMap::KeyCompare,_tc_google::protobuf::Map<std::string,CoreML::Specification::V5::Value>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64ToDoubleMap>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::MergePartialFromCodedStream(uint64_t a1, _tc_google::protobuf::io::CodedInputStream *this)
{
  unint64_t v5 = *(unsigned char **)this;
  unint64_t v4 = *((void *)this + 1);
  if (*(void *)this < v4 && *v5 == 8)
  {
    *(void *)this = v5 + 1;
    if ((unint64_t)(v5 + 1) >= v4 || (char)v5[1] < 0)
    {
      Varint64Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this);
      if ((v8 & 1) == 0) {
        return 0;
      }
      unint64_t v7 = *(unsigned char **)this;
      unint64_t v4 = *((void *)this + 1);
    }
    else
    {
      Varint64Fallbacint k = v5[1];
      unint64_t v7 = v5 + 2;
      *(void *)this = v7;
    }
    *(void *)(a1 + 16) = Varint64Fallback;
    if ((int)v4 - (int)v7 >= 1 && *v7 == 17)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = **(void **)(v10 + 16);
      *(void *)(a1 + 24) = _tc_google::protobuf::Map<long long,double>::operator[](v10, (uint64_t *)(a1 + 16));
      if (v11 != **(void **)(*(void *)(a1 + 8) + 16))
      {
        _tc_google::protobuf::io::CodedInputStream::Skip(this, 1u);
        unint64_t v12 = *(unint64_t **)(a1 + 24);
        unint64_t v24 = 0;
        uint64_t v13 = *(unint64_t **)this;
        uint64_t v14 = (void *)*((void *)this + 1);
        if ((int)(v14 - *(void *)this) >= 8)
        {
          unint64_t v16 = *v13;
          long long v15 = v13 + 1;
          unint64_t v17 = v16;
          *(void *)this = v15;
LABEL_15:
          unint64_t *v12 = v17;
          if (v15 != v14 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
            return _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::ReadBeyondKeyValuePair(a1, (uint64_t)this);
          }
          *((_DWORD *)this + 8) = 0;
          uint64_t v9 = 1;
          *((unsigned char *)this + 36) = 1;
          return v9;
        }
        unint64_t v23 = v12;
        if (_tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)this, &v24))
        {
          unint64_t v17 = v24;
          long long v15 = *(void **)this;
          uint64_t v14 = (void *)*((void *)this + 1);
          unint64_t v12 = v23;
          goto LABEL_15;
        }
        _tc_google::protobuf::Map<long long,double>::erase(*(void *)(a1 + 8), (uint64_t *)(a1 + 16));
        return 0;
      }
    }
  }
  else
  {
    *(void *)(a1 + 16) = 0;
  }
  __n128 v18 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  uint64_t v19 = *(void **)(a1 + 32);
  if (v19 != v18)
  {
    if (v19) {
      (*(void (**)(void *))(*v19 + 8))(v19);
    }
    *(void *)(a1 + 32) = v18;
  }
  uint64_t v20 = *(void *)(a1 + 16);
  *((_DWORD *)v18 + 10) |= 1u;
  v18[2] = v20;
  uint64_t v9 = (*(uint64_t (**)(void *, _tc_google::protobuf::io::CodedInputStream *))(*v18 + 88))(v18, this);
  if (v9) {
    v21.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), v21)) {
    *(void *)(a1 + 32) = 0;
  }
  return v9;
}

uint64_t _tc_google::protobuf::Map<long long,double>::erase(uint64_t a1, uint64_t *a2)
{
  _tc_google::protobuf::Map<long long,std::string>::InnerMap::FindHelper(*(void **)(a1 + 16), a2, 0, &v6);
  if (!(void)v6) {
    return 0;
  }
  long long v4 = v6;
  uint64_t v5 = v7;
  _tc_google::protobuf::Map<long long,double>::erase(a1, &v4, (uint64_t)&v6);
  return 1;
}

uint64_t _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::ReadBeyondKeyValuePair(uint64_t a1, uint64_t a2)
{
  long long v4 = _tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(*(_tc_google::protobuf::Arena ***)a1);
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != v4)
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 8))(v5);
    }
    *(void *)(a1 + 32) = v4;
  }
  long long v6 = *(void **)(a1 + 24);
  *((_DWORD *)v4 + 10) |= 2u;
  v4[3] = *v6;
  _tc_google::protobuf::Map<long long,double>::erase(*(void *)(a1 + 8), (uint64_t *)(a1 + 16));
  uint64_t v7 = *(void *)(a1 + 32);
  *(_DWORD *)(v7 + 40) |= 1u;
  *(void *)(v7 + 16) = *(void *)(a1 + 16);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 88))(v7, a2);
  if (v8) {
    v9.n128_f64[0] = _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry(a1);
  }
  if ((*(uint64_t (**)(void, __n128))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32), v9)) {
    *(void *)(a1 + 32) = 0;
  }
  return v8;
}

void *_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::NewEntry(_tc_google::protobuf::Arena **a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    operator new();
  }
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  result[3] = 0;
  result[4] = v1;
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26D77B728;
  return result;
}

double _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Parser<_tc_google::protobuf::internal::MapFieldLite<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::Map<long long,double>>::UseKeyAndValueFromEntry(uint64_t a1)
{
  *(void *)(a1 + 16) = *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 136))(*(void *)(a1 + 32));
  unint64_t v2 = (double *)_tc_google::protobuf::Map<long long,double>::operator[](*(void *)(a1 + 8), (uint64_t *)(a1 + 16));
  *(void *)(a1 + 24) = v2;
  uint64_t v3 = *(void *)(a1 + 32);
  *(_DWORD *)(v3 + 40) |= 2u;
  double result = *(double *)(v3 + 24);
  *unint64_t v2 = result;
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*,false>(__n128 *a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,double> const*>*>(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      char v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *char v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)a1, (uint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      uint64_t v8 = (void *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,_tc_google::protobuf::internal::CompareByFirstField<_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>> &,_tc_google::protobuf::internal::SortItem<long long,_tc_google::protobuf::MapPair<long long,std::string> const*>*>((long long *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      __n128 v9 = (void *)(a1 + 48);
      if ((void *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      uint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        uint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          unint64_t v16 = (void *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (void *)a1;
LABEL_12:
      void *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void *_tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::Wrap(uint64_t a1, uint64_t a2, _tc_google::protobuf::Arena *this)
{
  if (!this) {
    operator new();
  }
  result[3] = 0;
  result[4] = this;
  result[1] = 0;
  result[2] = 0;
  *BOOL result = &unk_26D77BBE0;
  result[6] = a1;
  result[7] = a2;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 3;
  return result;
}

void _tc_google::protobuf::internal::MapEntryImpl<_tc_google::protobuf::internal::MapEntryLite<long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>,_tc_google::protobuf::MessageLite,long long,double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)3,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1,0>::MapEntryWrapper::~MapEntryWrapper(void *a1)
{
  *a1 = &unk_26D77B800;
  JUMPOUT(0x22A614FA0);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::StringVector>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Vector>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::FloatVector>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleVector>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Range>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Int64Set>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::DoubleRange>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

double turi::optimization::compute_residual(void *a1)
{
  if (!a1[1]) {
    return 0.0;
  }
  unint64_t v2 = a1;
  uint64_t v4 = *a1;
  char v5 = &v2;
  Eigen::internal::redux_impl<Eigen::internal::scalar_max_op<double,double>,Eigen::internal::redux_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_abs_op<double>,Eigen::Matrix<double,-1,1,0,-1,1> const>>,3,0>::run((uint64_t)v3);
  return result;
}

int *turi::optimization::translate_solver_status@<X0>(int *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  if (v3 < 0xA) {
    return (int *)MEMORY[0x22A614700](a2, off_2646D7C18[v3]);
  }
  return result;
}

void sub_224382C14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *turi::optimization::get_recourse_actions@<X0>(std::string *result@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  switch(LODWORD(result->__r_.__value_.__l.__data_))
  {
    case 0:
    case 2:
    case 5:
      return (std::string *)MEMORY[0x22A614700](a2, "");
    case 1:
    case 4:
      MEMORY[0x22A614700](a2, "Internal error.");
      goto LABEL_5;
    case 3:
    case 9:
LABEL_5:
      std::string::append(a2, "This model may not be optimal. To improve it, consider ");
      goto LABEL_6;
    case 6:
    case 7:
    case 8:
      std::string::append(a2, "This model may not be ideal. To improve it, consider doing one of the following:\n");
      std::string::append(a2, "(a) Increasing the regularization.\n");
      std::string::append(a2, "(b) Standardizing the input data.\n");
      std::string::append(a2, "(c) Removing highly correlated features.\n");
LABEL_6:
      double result = std::string::append(a2, v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_224382D14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::optimization::log_solver_summary_stats(turi::optimization *this, const turi::optimization::_solver_return *a2)
{
  char v2 = (char)a2;
  uint64_t v84 = *MEMORY[0x263EF8340];
  double v81 = 0;
  int v82 = 0;
  char v83 = 0;
  if (*((double *)this + 9) == 1.0e20) {
    turi::flexible_type::operator=((uint64_t)&v81, "Not computed.");
  }
  turi::flexible_type::operator=<double>((uint64_t)&v81, (void *)this + 9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v70);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Solution time     = ", 20);
  uint64_t v4 = (void *)std::ostream::operator<<();
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" sec", 4);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  char v6 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale((std::locale *)&v76);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Loss              = ", 20);
  long long v7 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint64_t v8 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)&v76);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Iterations        = ", 20);
  __n128 v9 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  uint64_t v10 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)&v76);
  std::ostream::put();
  std::ostream::flush();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Solution Accuracy = ", 20);
  uint64_t v12 = (std::string::size_type *)MEMORY[0x263F8C2B8];
  switch(v83)
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v76);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_12;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v76);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_12:
      v76.__r_.__value_.__r.__words[0] = *v12;
      std::string::size_type v14 = v12[9];
      *(std::string::size_type *)((char *)v76.__r_.__value_.__r.__words
                                + *(void *)(v76.__r_.__value_.__r.__words[0] - 24)) = v12[8];
      v76.__r_.__value_.__r.__words[2] = v14;
      uint64_t v77 = MEMORY[0x263F8C318] + 16;
      if (v79 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v80);
      goto LABEL_19;
    case 2:
      if (*((char *)v81 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v75, (const std::string::value_type *)v81[1], v81[2]);
      }
      else
      {
        long long v13 = *(_OWORD *)(v81 + 1);
        v75.__r_.__value_.__r.__words[2] = v81[3];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v13;
      }
      goto LABEL_19;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v76, v81 + 1);
      goto LABEL_19;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v76, v81 + 1);
      goto LABEL_19;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v76, v81 + 1);
      goto LABEL_19;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v81, &v75);
      goto LABEL_19;
    case 7:
      memset(&v75, 0, sizeof(v75));
      goto LABEL_19;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_19;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v76, v81 + 1);
LABEL_19:
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &v75;
      }
      else {
        uint64_t v15 = (std::string *)v75.__r_.__value_.__r.__words[0];
      }
      if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v75.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v15, size);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
      unint64_t v17 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
      std::locale::~locale((std::locale *)&v76);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Number of Passes  = ", 20);
      __n128 v18 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
      char v19 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale((std::locale *)&v76);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Function evals    = ", 20);
      BOOL v20 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      __n128 v21 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale((std::locale *)&v76);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Gradient evals    = ", 20);
      int64_t v22 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
      unint64_t v23 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale((std::locale *)&v76);
      std::ostream::put();
      std::ostream::flush();
      unint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Solver Status     = ", 20);
      int64_t v25 = (int *)((char *)this + 100);
      turi::optimization::translate_solver_status(v25, &v76);
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v26 = &v76;
      }
      else {
        uint64_t v26 = (std::string *)v76.__r_.__value_.__r.__words[0];
      }
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = v76.__r_.__value_.__l.__size_;
      }
      uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);
      std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
      long long v29 = std::locale::use_facet((const std::locale *)&v75, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale((std::locale *)&v75);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      long long v30 = (int *)global_logger();
      if (v30[169] > 2) {
        goto LABEL_42;
      }
      if (cppipc::must_cancel((cppipc *)v30)) {
        goto LABEL_94;
      }
      uint64_t v31 = (file_logger *)global_logger();
      started = file_logger::start_stream(v31, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/utils.cpp", "log_solver_summary_stats", 426, 1);
      std::stringbuf::str();
      uint64_t v33 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v68);
      uint64_t v34 = pthread_getspecific(*(void *)(v33 + 592));
      if (v34)
      {
        if (*((unsigned char *)v34 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(void *)(v34[2] - 24) + 16));
          uint64_t v35 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
          std::locale::~locale((std::locale *)&v76);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v33);
          if (*(_DWORD *)(v33 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (v69 < 0) {
        operator delete(v68);
      }
LABEL_42:
      std::string::basic_string[abi:ne180100]<0>(&v76, "");
      std::string::operator=(&v73, &v76);
      std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)v72);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      double v36 = (int *)global_logger();
      if (v36[169] > 4) {
        goto LABEL_50;
      }
      if (cppipc::must_cancel((cppipc *)v36)) {
        goto LABEL_94;
      }
      double v37 = (file_logger *)global_logger();
      int v38 = file_logger::start_stream(v37, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/utils.cpp", "log_solver_summary_stats", 430, 1);
      turi::optimization::translate_solver_status(v25, v66);
      uint64_t v39 = file_logger::operator<<<std::string>((uint64_t)v38, (uint64_t)v66);
      double v40 = pthread_getspecific(*(void *)(v39 + 592));
      if (v40)
      {
        if (*((unsigned char *)v40 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(void *)(v40[2] - 24) + 16));
          double v41 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
          std::locale::~locale((std::locale *)&v76);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v39);
          if (*(_DWORD *)(v39 + 600) == 7)
          {
            __print_back_trace();
            double v63 = __cxa_allocate_exception(8uLL);
            *double v63 = "LOG_FATAL encountered";
            __cxa_throw(v63, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (v67 < 0)
      {
        operator delete(v66[0]);
        if (v2) {
          goto LABEL_59;
        }
      }
      else
      {
LABEL_50:
        if (v2) {
          goto LABEL_59;
        }
      }
      double v42 = (int *)global_logger();
      if (v42[169] <= 4)
      {
        if (cppipc::must_cancel((cppipc *)v42)) {
LABEL_94:
        }
          log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
        double v43 = (file_logger *)global_logger();
        double v44 = file_logger::start_stream(v43, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/ml/optimization/utils.cpp", "log_solver_summary_stats", 432, 1);
        turi::optimization::get_recourse_actions((std::string *)v25, &v65);
        uint64_t v45 = file_logger::operator<<<std::string>((uint64_t)v44, (uint64_t)&v65);
        double v46 = pthread_getspecific(*(void *)(v45 + 592));
        if (v46)
        {
          if (*((unsigned char *)v46 + 280))
          {
            std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(v46[2] - 24) + 16));
            double v47 = std::locale::use_facet((const std::locale *)&v76, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
            std::locale::~locale((std::locale *)&v76);
            std::ostream::put();
            std::ostream::flush();
            file_logger::stream_flush((file_logger *)v45);
            if (*(_DWORD *)(v45 + 600) == 7)
            {
              __print_back_trace();
              double v64 = __cxa_allocate_exception(8uLL);
              *double v64 = "LOG_FATAL encountered";
              __cxa_throw(v64, MEMORY[0x263F8C1D8], 0);
            }
          }
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
      }
LABEL_59:
      v70[0] = *v12;
      std::string::size_type v48 = v12[9];
      *(void *)((char *)v70 + *(void *)(v70[0] - 24)) = v12[8];
      std::string::size_type v71 = v48;
      v72[0] = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      uint64_t result = MEMORY[0x22A614E30](&v74);
      switch(v83)
      {
        case 2:
          if (atomic_fetch_add(v81, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v50 = v81;
            if (v81)
            {
              if (*((char *)v81 + 31) < 0) {
                operator delete((void *)v81[1]);
              }
              double v51 = v50;
              uint64_t v52 = 0x1012C404EF22A49;
              goto LABEL_92;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v81, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v59 = v81;
            if (v81)
            {
              double v60 = (void *)v81[1];
              if (v60)
              {
                v81[2] = (atomic_ullong)v60;
                operator delete(v60);
              }
              double v51 = v59;
              uint64_t v52 = 0x1080C409938AC02;
              goto LABEL_92;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v81, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v53 = v81;
            if (v81)
            {
              v76.__r_.__value_.__r.__words[0] = (std::string::size_type)(v81 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
              goto LABEL_87;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v81, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v53 = v81;
            if (v81)
            {
              v76.__r_.__value_.__r.__words[0] = (std::string::size_type)(v81 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
LABEL_87:
              double v51 = v53;
              uint64_t v52 = 0x1020C405E66F15BLL;
              goto LABEL_92;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v81, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v61 = v81;
            if (v81)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v81 + 2);
              double v51 = v61;
              unsigned int v58 = -235920773;
              goto LABEL_91;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v81, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v54 = v81;
            if (v81)
            {
              double v55 = (void *)v81[6];
              if (v55)
              {
                v81[7] = (atomic_ullong)v55;
                operator delete(v55);
              }
              double v56 = (void *)v54[3];
              if (v56)
              {
                v54[4] = (atomic_ullong)v56;
                operator delete(v56);
              }
              double v57 = (std::__shared_weak_count *)v54[2];
              if (v57) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              }
              double v51 = v54;
              unsigned int v58 = 2071181815;
LABEL_91:
              uint64_t v52 = v58 | 0x1030C4000000000;
LABEL_92:
              uint64_t result = MEMORY[0x22A614FA0](v51, v52);
            }
          }
          break;
        default:
          return result;
      }
      return result;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
}

void sub_224383CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::locale a56,uint64_t a57,uint64_t a58,uint64_t a59,std::locale a60)
{
  std::locale::~locale(&a60);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  switch(*(unsigned char *)(v60 - 108))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v62 = *(void *)(v60 - 120);
      if (!v62) {
        goto LABEL_29;
      }
      if (*(char *)(v62 + 31) < 0) {
        operator delete(*(void **)(v62 + 8));
      }
      double v63 = (void *)v62;
      uint64_t v64 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      double v68 = *(void **)(v60 - 120);
      if (!v68) {
        goto LABEL_29;
      }
      char v69 = (void *)v68[1];
      if (v69)
      {
        v68[2] = v69;
        operator delete(v69);
      }
      double v63 = v68;
      uint64_t v64 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      std::string v65 = *(void **)(v60 - 120);
      if (!v65) {
        goto LABEL_29;
      }
      a21 = (uint64_t)(v65 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      std::string v65 = *(void **)(v60 - 120);
      if (!v65) {
        goto LABEL_29;
      }
      a21 = (uint64_t)(v65 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
LABEL_23:
      double v63 = v65;
      uint64_t v64 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v70 = *(void *)(v60 - 120);
      if (!v70) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v70 + 16));
      double v63 = (void *)v70;
      unsigned int v67 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      int64_t v66 = *(void **)(v60 - 120);
      if (!v66) {
        goto LABEL_29;
      }
      double v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v66);
      unsigned int v67 = 2071181815;
LABEL_27:
      uint64_t v64 = v67 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v63, v64);
LABEL_29:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

double turi::optimization::vector_add<Eigen::Matrix<double,-1,1,0,-1,1>,Eigen::SparseVector<double,0,int>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = a2[3];
  if (v2 >= 1)
  {
    uint64_t v3 = (double *)a2[1];
    uint64_t v4 = (int *)a2[2];
    uint64_t v5 = *a1;
    do
    {
      double v6 = *v3++;
      double v7 = v6;
      uint64_t v8 = *v4++;
      double result = v7 + *(double *)(v5 + 8 * v8);
      *(double *)(v5 + 8 * v8) = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  double v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  double v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    double v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2243840E4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *Eigen::SparseVector<double,0,int>::insert(void *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = a1[3];
  Eigen::internal::CompressedStorage<double,int>::resize((uint64_t)(a1 + 1), v5 + 1, 1.0);
  uint64_t v6 = a1[2];
  if (v5 >= 1)
  {
    uint64_t v7 = 8 * v5 - 8;
    uint64_t v8 = (_DWORD *)(v6 + 4 * v5);
    while (1)
    {
      uint64_t v9 = (int)*(v8 - 1);
      if (v9 <= a2) {
        break;
      }
      --v5;
      *v8-- = v9;
      *(void *)(*v4 + v7 + 8) = *(void *)(*v4 + v7);
      v7 -= 8;
      if ((unint64_t)(v5 + 1) <= 1)
      {
        uint64_t v5 = 0;
        break;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = a2;
  double result = (void *)(*v4 + 8 * v5);
  *double result = 0;
  return result;
}

uint64_t Eigen::internal::CompressedStorage<double,int>::resize(uint64_t result, uint64_t a2, double a3)
{
  if (*(void *)(result + 24) < a2)
  {
    double v3 = (double)a2 * a3;
    if ((uint64_t)v3 + a2 >= 0x7FFFFFFF) {
      uint64_t v4 = 0x7FFFFFFFLL;
    }
    else {
      uint64_t v4 = (uint64_t)v3 + a2;
    }
    if (v4 >= a2) {
      operator new[]();
    }
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    uint64_t v6 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v6, MEMORY[0x263F8C218], MEMORY[0x263F8C170]);
  }
  *(void *)(result + 16) = a2;
  return result;
}

void sub_22438430C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<turi::flexible_type>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_224384390(_Unwind_Exception *a1)
{
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)double result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  double v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  int64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_224384690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  double result = (char *)operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)double result = 0;
  *((void *)result + 1) = a2;
  *((void *)result + 2) = 0;
  unint64_t v9 = (atomic_ullong *volatile *)(result + 16);
  unint64_t v10 = (char *)*a3;
  *((_DWORD *)result + 6) = 0;
  result[28] = 0;
  if (v10 != result + 16)
  {
    uint8x8_t v11 = *(atomic_ullong **)v10;
    *(void *)(result + 21) = *(void *)(v10 + 5);
    atomic_ullong *volatile *v9 = v11;
    unsigned int v12 = v10[12];
    result[28] = v12;
    BOOL v13 = v12 > 9;
    int v14 = (1 << v12) & 0x33C;
    if (!v13 && v14 != 0) {
      atomic_fetch_add(*v9, 1uLL);
    }
  }
  *((void *)result + 4) = 0;
  *((_DWORD *)result + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  result[44] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x22A614AF0]();
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void sub_22438482C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_224384850(_Unwind_Exception *a1)
{
}

double turi::variant_converter<double,void>::get(uint64_t a1, int *a2)
{
  void v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  uint64_t v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((atomic_ullong **)v2 != v22)
  {
    unint64_t v4 = *(atomic_ullong **)v2;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(v2 + 5);
    v22[0] = v4;
    BYTE4(v22[1]) = *(unsigned char *)(v2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  v20[0] = 0.0;
  turi::flexible_type_internals::ft_converter<1>::get(v20, (turi::flexible_type_internals *)v22, v3);
  double v6 = v20[0];
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          unint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        float v16 = v22[0];
        if (v22[0])
        {
          float v17 = (void *)v22[0][1];
          if (v17)
          {
            v22[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          unint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_33:
          unint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v18 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          unint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint8x8_t v11 = v22[0];
        if (v22[0])
        {
          unsigned int v12 = (void *)v22[0][6];
          if (v12)
          {
            v22[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          BOOL v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          int v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          unint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_224384AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 56);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      size_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = *(void **)(v18 - 56);
      if (!v26) {
        goto LABEL_27;
      }
      std::string::size_type v27 = (void *)v26[1];
      if (v27)
      {
        _OWORD v26[2] = v27;
        operator delete(v27);
      }
      size_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 56);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 56);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      size_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 56);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      size_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v24 = *(void **)(v18 - 56);
      if (!v24) {
        goto LABEL_27;
      }
      size_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

double *turi::flexible_type_internals::ft_converter<1>::get(double *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12))
  {
    if (*((unsigned char *)this + 12) != 1) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"numeric value", a3);
    }
    double v3 = *(double *)this;
  }
  else
  {
    double v3 = (double)*(uint64_t *)this;
  }
  *uint64_t result = v3;
  return result;
}

void sub_224384E34()
{
}

void turi::flexible_type_internals::ft_converter<1>::get(double &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 138, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_internals::ft_converter<1>::get(double &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224384F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>,std::reverse_iterator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      BOOL v13 = (std::string *)(a7 + v11 - 72);
      boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)*(unsigned int *)(a3 + v11 - 80), *(_DWORD *)(a3 + v11 - 80) ^ (*(int *)(a3 + v11 - 80) >> 31), &v13, a3 + v11 - 72);
      *(_DWORD *)(a7 + v11 - 8CoreML::Specification::DoubleRange::New(this, 0) = *(_DWORD *)(a3 + v11 - 80) ^ (*(int *)(a3 + v11 - 80) >> 31);
      v11 -= 80;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_224385164(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 80)
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)(i - 80));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<turi::flexible_type>>()
{
}

void sub_22438530C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1020C405E66F15BLL);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v10, 0xFFFFFFFFFFFFFFFFLL);
  if (v10)
  {
    if (add == 1)
    {
      a10 = (void **)(v10 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      MEMORY[0x22A614FA0](v10, 0x1020C405E66F15BLL);
    }
  }
  _Unwind_Resume(a1);
}

double std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,std::ostream_iterator<char,char,std::char_traits<char>>,0>@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int16 v6 = *((_WORD *)a1 + 4);
  char v7 = *((unsigned char *)a1 + 10);
  int v8 = *((_DWORD *)a1 + 3);
  uint64_t v9 = *a2;
  __int16 v10 = *((_WORD *)a2 + 4);
  char v11 = *((unsigned char *)a2 + 10);
  int v12 = *((_DWORD *)a2 + 3);
  uint64_t v22 = *a1;
  __int16 v23 = v6;
  char v24 = v7;
  int v25 = v8;
  char v26 = 0;
  uint64_t v17 = v9;
  __int16 v18 = v10;
  char v19 = v11;
  int v20 = v12;
  char v21 = 0;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,std::ostream_iterator<char,char,std::char_traits<char>>>((uint64_t)&v22, &v17, a3, a4, (uint64_t)&v27);
  __int16 v13 = v28;
  char v14 = v29;
  int v15 = v30;
  *(void *)a5 = v27;
  *(_WORD *)(a5 + 8) = v13;
  *(unsigned char *)(a5 + 1CoreML::Specification::DoubleRange::New(this, 0) = v14;
  *(_DWORD *)(a5 + 12) = v15;
  *(unsigned char *)(a5 + 16) = 0;
  double result = *(double *)&v31;
  *(_OWORD *)(a5 + 32) = v31;
  return result;
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>,unsigned char>,std::ostream_iterator<char,char,std::char_traits<char>>>@<D0>(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  *(void *)&long long v13 = a3;
  *((void *)&v13 + 1) = a4;
  while (1)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1 != *a2)
    {
      int v9 = *(unsigned __int8 *)(a1 + 8);
      goto LABEL_5;
    }
    *(unsigned char *)(a1 + 16) = 1;
    int v9 = *(unsigned __int8 *)(a1 + 8);
    if (!*(_DWORD *)(a1 + 12)) {
      break;
    }
LABEL_5:
    if (!v9) {
      boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>::fill(a1);
    }
    char v12 = boost::archive::iterators::detail::from_6_bit<unsigned char>::operator()(unsigned char)const::lookup_table[*(unsigned __int8 *)(a1 + 9)];
    std::ostream_iterator<char,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v13, &v12);
    *(unsigned char *)(a1 + 8) = 0;
  }
  __int16 v10 = *(_WORD *)(a1 + 9);
  *(void *)a5 = v8;
  *(unsigned char *)(a5 + 8) = v9;
  *(_WORD *)(a5 + 9) = v10;
  *(_DWORD *)(a5 + 12) = 0;
  *(unsigned char *)(a5 + 16) = 0;
  double result = *(double *)&v13;
  *(_OWORD *)(a5 + 32) = v13;
  return result;
}

uint64_t std::ostream_iterator<char,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1, char *a2)
{
  uint64_t v3 = *(void **)a1;
  char v7 = *a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v7, 1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    size_t v5 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)a1, v4, v5);
  }
  return a1;
}

uint64_t boost::archive::iterators::transform_width<unsigned char const*,6,8,unsigned char>::fill(uint64_t result)
{
  LOBYTE(v1) = 0;
  *(unsigned char *)(result + 9) = 0;
  unsigned int v2 = *(_DWORD *)(result + 12);
  unsigned int v3 = *(unsigned __int8 *)(result + 10);
  unsigned int v4 = 6;
  do
  {
    if (!v2)
    {
      if (*(unsigned char *)(result + 16))
      {
        unsigned int v3 = 0;
        unsigned int v2 = v4;
      }
      else
      {
        size_t v5 = (unsigned __int8 *)(*(void *)result)++;
        unsigned int v3 = *v5;
        unsigned int v2 = 8;
      }
      *(unsigned char *)(result + 1CoreML::Specification::DoubleRange::New(this, 0) = v3;
    }
    if (v2 >= v4) {
      unsigned int v6 = v4;
    }
    else {
      unsigned int v6 = v2;
    }
    int v1 = (v1 << v6) | (v3 >> (v2 - v6)) & ~(-1 << v6);
    *(unsigned char *)(result + 9) = v1;
    *(_DWORD *)(result + 12) = v2 - v6;
    BOOL v7 = v4 > v2;
    v2 -= v6;
    v4 -= v6;
  }
  while (v7);
  *(unsigned char *)(result + 8) = 1;
  return result;
}

void turi::ml_model_base::list_fields(turi::ml_model_base *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unsigned int v2 = (char *)*((void *)this + 37);
  unsigned int v3 = (char *)this + 304;
  if (v2 != (char *)this + 304)
  {
    unint64_t v5 = 0;
    do
    {
      unsigned int v6 = (long long *)(v2 + 32);
      if (v5 >= a2[2])
      {
        unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      BOOL v7 = (char *)*((void *)v2 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v2 + 2);
          BOOL v9 = *(void *)v8 == (void)v2;
          unsigned int v2 = v8;
        }
        while (!v9);
      }
      unsigned int v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_2243856B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_model_base::get_option_value(uint64_t a1, const void **a2)
{
  return turi::option_manager::value(a1 + 224, a2);
}

uint64_t *turi::ml_model_base::get_default_options@<X0>(turi::ml_model_base *this@<X0>, uint64_t a2@<X8>)
{
  return turi::option_manager::get_default_options((uint64_t *)this + 28, a2);
}

void turi::ml_model_base::set_options(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 224;
  if (!*(void *)(turi::option_manager::current_option_values((turi::option_manager *)(a1 + 224)) + 16)) {
    turi::ml_model_base::set_options(std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
  }
  BOOL v7 = (long long *)*a2;
  unint64_t v5 = (long long *)(a2 + 1);
  unsigned int v6 = v7;
  if (v7 != v5)
  {
    do
    {
      turi::option_manager::set_option(v4, (uint64_t)(v6 + 2), (uint64_t)v6 + 56);
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>(&__p, v6 + 2, (uint64_t)v6 + 56);
      std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t)v11, (const void **)&__p.__r_.__value_.__l.__data_, 1);
      turi::ml_model_base::add_or_update_state(a1, v11);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v11, (char *)v11[1]);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = (long long *)*((void *)v6 + 1);
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = *(long long **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (long long *)*((void *)v6 + 2);
          BOOL v10 = *(void *)v9 == (void)v6;
          unsigned int v6 = v9;
        }
        while (!v10);
      }
      unsigned int v6 = v9;
    }
    while (v9 != v5);
  }
}

void sub_224385818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  unint64_t v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void turi::ml_model_base::add_or_update_state(uint64_t a1, void *a2)
{
  unsigned int v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = (uint64_t **)(a1 + 296);
    do
    {
      BOOL v9 = (long long *)(v3 + 4);
      unint64_t v5 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v9);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v5 + 14, v3 + 7);
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v2);
  }
}

uint64_t turi::ml_model_base::get_state(turi::ml_model_base *this)
{
  return (uint64_t)this + 296;
}

uint64_t *turi::ml_model_base::get_value_from_state(uint64_t a1, const void **a2)
{
  uint64_t v3 = (uint64_t **)(a1 + 296);
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1 + 296, a2))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
    unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Field '", 7);
    int v6 = *((char *)a2 + 23);
    if (v6 >= 0) {
      uint64_t v7 = (uint64_t)a2;
    }
    else {
      uint64_t v7 = (uint64_t)*a2;
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      uint64_t v8 = (uint64_t)a2[1];
    }
    BOOL v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    BOOL v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' does not exist. Use list_fields() for a ", 42);
    char v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"list of fields that can be queried.", 35);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
    turi::ml_model_base::get_value_from_state(std::string)::$_0::operator()();
  }
  v12[0] = (long long *)a2;
  return std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v3, a2, (uint64_t)&std::piecewise_construct, v12)+ 7;
}

void sub_2243859DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::ml_model_base::is_trained(turi::ml_model_base *this)
{
  return 1;
}

std::string *std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__l.__size_ = 0;
  p_std::string::size_type size = (atomic_ullong *volatile *)&this[1].__r_.__value_.__l.__size_;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
  this[1].__r_.__value_.__s.__data_[20] = 0;
  if (&this[1].__r_.__value_.__r.__words[1] != (std::string::size_type *)a3)
  {
    uint64_t v7 = *(atomic_ullong **)a3;
    *(std::string::size_type *)((char *)&this[1].__r_.__value_.__r.__words[1] + 5) = *(void *)(a3 + 5);
    *p_std::string::size_type size = v7;
    unsigned int v8 = *(unsigned __int8 *)(a3 + 12);
    this[1].__r_.__value_.__s.__data_[20] = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*p_size, 1uLL);
    }
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  return this;
}

void *std::vector<turi::option_handling::option_info>::__init_with_size[abi:ne180100]<turi::option_handling::option_info*,turi::option_handling::option_info*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<turi::option_handling::option_info>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::option_handling::option_info>,turi::option_handling::option_info*,turi::option_handling::option_info*,turi::option_handling::option_info*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224385B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::option_handling::option_info>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::option_handling::option_info>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::option_handling::option_info>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::option_handling::option_info>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 7);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::option_handling::option_info>,turi::option_handling::option_info*,turi::option_handling::option_info*,turi::option_handling::option_info*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      turi::option_handling::option_info::option_info((std::string *)(a4 + v7), (std::string *)(a2 + v7));
      v7 += 128;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_224385C10(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 128;
    do
    {
      turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(v4 + v2));
      v2 -= 128;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *turi::option_handling::option_info::option_info(std::string *this, std::string *a2)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(a2[1].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&a2[1].__r_.__value_.__l.__data_;
    this[1].__r_.__value_.__r.__words[2] = a2[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  int v6 = (atomic_ullong *volatile *)&this[2];
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 0;
  this[2].__r_.__value_.__s.__data_[12] = 0;
  if (a2 == this)
  {
    int v13 = a2[2].__r_.__value_.__r.__words[2];
    this[3].__r_.__value_.__r.__words[0] = 0;
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v13;
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = 0;
    this[3].__r_.__value_.__s.__data_[12] = 0;
    this[3].__r_.__value_.__r.__words[2] = 0;
    LODWORD(this[4].__r_.__value_.__l.__data_) = 0;
    this[4].__r_.__value_.__s.__data_[4] = 0;
  }
  else
  {
    std::string::pointer data = (atomic_ullong *)a2[2].__r_.__value_.__l.__data_;
    *(std::string::size_type *)((char *)this[2].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2[2].__r_.__value_.__r.__words + 5);
    *int v6 = data;
    unsigned int v8 = a2[2].__r_.__value_.__s.__data_[12];
    this[2].__r_.__value_.__s.__data_[12] = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*v6, 1uLL);
    }
    int v9 = a2[2].__r_.__value_.__r.__words[2];
    this[3].__r_.__value_.__r.__words[0] = 0;
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = v9;
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = 0;
    this[3].__r_.__value_.__s.__data_[12] = 0;
    std::string::size_type v10 = a2[3].__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)this[3].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2[3].__r_.__value_.__r.__words + 5);
    this[3].__r_.__value_.__r.__words[0] = v10;
    unsigned int v11 = a2[3].__r_.__value_.__s.__data_[12];
    this[3].__r_.__value_.__s.__data_[12] = v11;
    if (v11 <= 9 && ((1 << v11) & 0x33C) != 0) {
      atomic_fetch_add((atomic_ullong *volatile)this[3].__r_.__value_.__l.__data_, 1uLL);
    }
    this[3].__r_.__value_.__r.__words[2] = 0;
    LODWORD(this[4].__r_.__value_.__l.__data_) = 0;
    this[4].__r_.__value_.__s.__data_[4] = 0;
    std::string::size_type v12 = a2[3].__r_.__value_.__r.__words[2];
    *(std::string::size_type *)((char *)&this[3].__r_.__value_.__r.__words[2] + 5) = *(std::string::size_type *)((char *)&a2[3].__r_.__value_.__r.__words[2] + 5);
    this[3].__r_.__value_.__r.__words[2] = v12;
    LODWORD(v12) = a2[4].__r_.__value_.__s.__data_[4];
    this[4].__r_.__value_.__s.__data_[4] = v12;
    switch((int)v12)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add((atomic_ullong *volatile)this[3].__r_.__value_.__r.__words[2], 1uLL);
        break;
      default:
        break;
    }
  }
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&this[4].__r_.__value_.__l.__size_, (uint64_t *)a2[4].__r_.__value_.__l.__size_, (uint64_t *)a2[4].__r_.__value_.__r.__words[2], (uint64_t)(a2[4].__r_.__value_.__r.__words[2] - a2[4].__r_.__value_.__l.__size_) >> 4);
  return this;
}

void sub_224385E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::flexible_type>(unsigned int *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  long long v5 = (uint64_t **)&v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), &v5, (uint64_t)(a1 + 2)) & 1) == 0)
  {
    *(void *)&v6[5] = *(void *)(a2 + 5);
    *(void *)int v6 = *(void *)a2;
    v6[12] = *(unsigned char *)(a2 + 12);
    *(unsigned char *)(a2 + 12) = 0;
    LODWORD(v5) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_224386398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t ***a3, uint64_t a4)
{
  if ((a2 - 1) < 8) {
    return 0;
  }
  if (a2) {
    boost::detail::variant::forced_return<void>(a1);
  }
  long long v5 = *a3;
  return boost::detail::variant::direct_mover<turi::flexible_type>::operator()(v5, a4);
}

uint64_t boost::detail::variant::direct_mover<turi::flexible_type>::operator()(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 != (uint64_t *)a2)
  {
    switch(*(unsigned char *)(a2 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          unsigned int v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          __int16 v18 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v18);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          __int16 v18 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v18);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a2;
          if (!*(void *)a2) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a2, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a2;
          if (*(void *)a2)
          {
            int v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            int v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a2 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *v2;
    *(void *)(a2 + 5) = *(uint64_t *)((char *)v2 + 5);
    *(void *)a2 = v16;
    *(unsigned char *)(a2 + 12) = *((unsigned char *)v2 + 12);
    *((unsigned char *)v2 + 12) = 0;
  }
  return 1;
}

void turi::model_base::~model_base(turi::model_base *this)
{
  *(void *)this = &unk_26D77BCA0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 200, *((void **)this + 26));
  uint64_t v2 = (void **)((char *)this + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  uint64_t v2 = (void **)((char *)this + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy((uint64_t)this + 104, *((void **)this + 14));
  std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  cppipc::ipc_object_base::~ipc_object_base(this);
}

uint64_t turi::model_base::list_functions(turi::model_base *this)
{
  if (!*((unsigned char *)this + 24)) {
    (*(void (**)(turi::model_base *))(*(void *)this + 56))(this);
  }
  return (uint64_t)this + 32;
}

uint64_t turi::model_base::list_get_properties(turi::model_base *this)
{
  if (!*((unsigned char *)this + 24)) {
    (*(void (**)(turi::model_base *))(*(void *)this + 56))(this);
  }
  if (*((void *)this + 22) == *((void *)this + 23))
  {
    std::vector<std::string>::reserve((std::vector<std::string> *)((char *)this + 176), *((void *)this + 21));
    uint64_t v2 = (turi::model_base *)*((void *)this + 19);
    if (v2 != (turi::model_base *)((char *)this + 160))
    {
      unint64_t v3 = *((void *)this + 23);
      do
      {
        atomic_ullong *volatile v4 = (long long *)((char *)v2 + 32);
        atomic_ullong *volatile v5 = (uint64_t *)((char *)this + 176);
        if (v3 >= *((void *)this + 24))
        {
          unint64_t v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v4);
          v3 += 24;
        }
        *((void *)this + 23) = v3;
        uint64_t v6 = (turi::model_base *)*((void *)v2 + 1);
        if (v6)
        {
          do
          {
            atomic_ullong *volatile v7 = v6;
            uint64_t v6 = *(turi::model_base **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            atomic_ullong *volatile v7 = (turi::model_base *)*((void *)v2 + 2);
            BOOL v8 = *(void *)v7 == (void)v2;
            uint64_t v2 = v7;
          }
          while (!v8);
        }
        uint64_t v2 = v7;
      }
      while (v7 != (turi::model_base *)((char *)this + 160));
    }
  }
  return (uint64_t)this + 176;
}

uint64_t turi::model_base::list_set_properties(turi::model_base *this)
{
  if (!*((unsigned char *)this + 24)) {
    (*(void (**)(turi::model_base *))(*(void *)this + 56))(this);
  }
  if (*((void *)this + 16) == *((void *)this + 17))
  {
    std::vector<std::string>::reserve((std::vector<std::string> *)((char *)this + 128), *((void *)this + 15));
    uint64_t v2 = (turi::model_base *)*((void *)this + 13);
    if (v2 != (turi::model_base *)((char *)this + 112))
    {
      unint64_t v3 = *((void *)this + 17);
      do
      {
        atomic_ullong *volatile v4 = (long long *)((char *)v2 + 32);
        atomic_ullong *volatile v5 = (uint64_t *)((char *)this + 128);
        if (v3 >= *((void *)this + 18))
        {
          unint64_t v3 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v4);
          v3 += 24;
        }
        *((void *)this + 17) = v3;
        uint64_t v6 = (turi::model_base *)*((void *)v2 + 1);
        if (v6)
        {
          do
          {
            atomic_ullong *volatile v7 = v6;
            uint64_t v6 = *(turi::model_base **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            atomic_ullong *volatile v7 = (turi::model_base *)*((void *)v2 + 2);
            BOOL v8 = *(void *)v7 == (void)v2;
            uint64_t v2 = v7;
          }
          while (!v8);
        }
        uint64_t v2 = v7;
      }
      while (v7 != (turi::model_base *)((char *)this + 112));
    }
  }
  return (uint64_t)this + 128;
}

uint64_t turi::model_base::_make_method_name(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)std::map<std::string,turi::neural_net::shared_float_array>::at(a1 + 32, (const void **)a2);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    atomic_ullong *volatile v5 = (const void *)a2;
  }
  else {
    atomic_ullong *volatile v5 = *(const void **)a2;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  atomic_ullong *volatile v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
  atomic_ullong *volatile v10 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = v10[1];
  if (v8 != v9)
  {
    uint64_t v11 = (v9 - v8) / 24 - 1;
    do
    {
      int v12 = *(char *)(v8 + 23);
      if (v12 >= 0) {
        uint64_t v13 = v8;
      }
      else {
        uint64_t v13 = *(void *)v8;
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        uint64_t v14 = *(void *)(v8 + 8);
      }
      int v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v13, v14);
      if (v11) {
        uint64_t v16 = ", ";
      }
      else {
        uint64_t v16 = "";
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, 2 * (v11 != 0));
      v8 += 24;
      --v11;
    }
    while (v8 != v9);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v18[1] = MEMORY[0x263F8C318] + 16;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v20);
}

void sub_224386BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::model_base::call_function(unsigned char *a1, const void **a2, uint64_t a3)
{
  atomic_ullong *volatile v5 = a1;
  if (!a1[24]) {
    (*(void (**)(unsigned char *))(*(void *)a1 + 56))(a1);
  }
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)(v5 + 4), a2);
  if (v5 + 5 == (void *)v6) {
    turi::model_base::_raise_not_found_error<std::vector<std::string>>((uint64_t)v5, (uint64_t)a2, v5 + 4);
  }
  uint64_t v7 = v6;
  uint64_t v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)(v5 + 7), a2);
  int v82 = 0;
  char v83 = 0;
  unint64_t v84 = 0;
  atomic_ullong *volatile v10 = *(long long **)(v7 + 56);
  uint64_t v9 = *(long long **)(v7 + 64);
  if (v10 == v9)
  {
    uint64_t v12 = 0;
    goto LABEL_38;
  }
  uint64_t v11 = v8;
  uint64_t v65 = v7;
  uint64_t v66 = (uint64_t)a2;
  uint64_t v67 = (uint64_t)v5;
  uint64_t v12 = 0;
  uint64_t v13 = v5 + 8;
  uint64_t v14 = v8 + 56;
  uint64_t v15 = v8 + 64;
  do
  {
    if (a3 + 8 != std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a3, (const void **)v10))goto LABEL_7; {
    if (v13 != (void *)v11)
    }
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(v14, (const void **)v10);
      if (v15 != v16)
      {
        std::string __p = v10;
        uint64_t v17 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a3, (const void **)v10, (uint64_t)&std::piecewise_construct, (long long **)&__p);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v17 + 14, (uint64_t *)(v16 + 56));
LABEL_7:
        ++v12;
        goto LABEL_18;
      }
    }
    __int16 v18 = v83;
    if ((unint64_t)v83 >= v84)
    {
      uint64_t v20 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v82, v10);
    }
    else
    {
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v83, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v19 = *v10;
        v83->__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      }
      uint64_t v20 = v18 + 1;
    }
    char v83 = v20;
LABEL_18:
    atomic_ullong *volatile v10 = (long long *)((char *)v10 + 24);
  }
  while (v10 != v9);
  a2 = (const void **)v66;
  atomic_ullong *volatile v5 = (void *)v67;
  uint64_t v7 = v65;
  if (v82 != v83)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
    char v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Error: missing arguments for method ", 36);
    turi::model_base::_make_method_name(v67, v66);
    if (v78 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v78 >= 0) {
      uint64_t v23 = HIBYTE(v78);
    }
    else {
      uint64_t v23 = (uint64_t)v77;
    }
    char v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)p_p, v23);
    int v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" in model ", 10);
    char v26 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v67 + 16))(v67);
    size_t v27 = strlen(v26);
    __int16 v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)": ", 2);
    if (SHIBYTE(v78) < 0) {
      operator delete(__p);
    }
    char v29 = v82;
    for (uint64_t i = v83; v29 != i; ++v29)
    {
      int v31 = SHIBYTE(v29->__r_.__value_.__r.__words[2]);
      if (v31 >= 0) {
        uint64_t v32 = (uint64_t)v29;
      }
      else {
        uint64_t v32 = v29->__r_.__value_.__r.__words[0];
      }
      if (v31 >= 0) {
        uint64_t size = HIBYTE(v29->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t size = v29->__r_.__value_.__l.__size_;
      }
      uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v32, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" ", 1);
    }
    std::string __p = v79;
    turi::model_base::call_function(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)::$_0::operator()();
  }
LABEL_38:
  if (v12 != *(void *)(a3 + 16))
  {
    uint64_t v35 = a2;
    std::string __p = 0;
    uint64_t v77 = 0;
    int64_t v78 = 0;
    std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)v74, *(const void ***)(v7 + 56), *(const void ***)(v7 + 64));
    double v36 = *(uint64_t **)a3;
    if (*(void *)a3 != a3 + 8)
    {
      do
      {
        if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)v74, (const void **)v36 + 4))
        {
          double v37 = v77;
          if ((unint64_t)v77 >= v78)
          {
            uint64_t v39 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (long long *)v36 + 2);
          }
          else
          {
            if (*((char *)v36 + 55) < 0)
            {
              std::string::__init_copy_ctor_external(v77, (const std::string::value_type *)v36[4], v36[5]);
            }
            else
            {
              long long v38 = *((_OWORD *)v36 + 2);
              v77->__r_.__value_.__r.__words[2] = v36[6];
              *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
            }
            uint64_t v39 = v37 + 1;
          }
          uint64_t v77 = v39;
        }
        double v40 = (uint64_t *)v36[1];
        if (v40)
        {
          do
          {
            double v41 = v40;
            double v40 = (uint64_t *)*v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            double v41 = (uint64_t *)v36[2];
            BOOL v42 = *v41 == (void)v36;
            double v36 = v41;
          }
          while (!v42);
        }
        double v36 = v41;
      }
      while (v41 != (uint64_t *)(a3 + 8));
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
    double v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Error: extra parameters given for method ", 41);
    turi::model_base::_make_method_name((uint64_t)v5, (uint64_t)a2);
    if ((v73 & 0x80u) == 0) {
      double v44 = &v71;
    }
    else {
      double v44 = v71;
    }
    if ((v73 & 0x80u) == 0) {
      uint64_t v45 = v73;
    }
    else {
      uint64_t v45 = v72;
    }
    double v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
    double v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" in model ", 10);
    std::string::size_type v48 = (const char *)(*(uint64_t (**)(void *))(*v5 + 16))(v5);
    size_t v49 = strlen(v48);
    double v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
    if ((char)v73 < 0) {
      operator delete(v71);
    }
    double v51 = (std::string *)__p;
    uint64_t v52 = v77;
    if (__p != v77)
    {
      do
      {
        int v53 = SHIBYTE(v51->__r_.__value_.__r.__words[2]);
        if (v53 >= 0) {
          uint64_t v54 = (uint64_t)v51;
        }
        else {
          uint64_t v54 = v51->__r_.__value_.__r.__words[0];
        }
        if (v53 >= 0) {
          uint64_t v55 = HIBYTE(v51->__r_.__value_.__r.__words[2]);
        }
        else {
          uint64_t v55 = v51->__r_.__value_.__l.__size_;
        }
        double v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, v54, v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" ", 1);
        ++v51;
      }
      while (v51 != v52);
    }
    double v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"WARNING: ", 9);
    std::stringbuf::str();
    if ((v73 & 0x80u) == 0) {
      unsigned int v58 = &v71;
    }
    else {
      unsigned int v58 = v71;
    }
    if ((v73 & 0x80u) == 0) {
      uint64_t v59 = v73;
    }
    else {
      uint64_t v59 = v72;
    }
    uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v58, v59);
    std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
    double v61 = std::locale::use_facet(&v85, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
    std::locale::~locale(&v85);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v73 < 0) {
      operator delete(v71);
    }
    v79[0] = *(void ***)MEMORY[0x263F8C2C8];
    *(void ***)((char *)v79 + (unint64_t)*(v79[0] - 3)) = *(void ***)(MEMORY[0x263F8C2C8] + 24);
    v79[1] = (void **)(MEMORY[0x263F8C318] + 16);
    if (v80 < 0) {
      operator delete(v79[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22A614E30](&v81);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)v74, v75);
    v79[0] = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v79);
    a2 = v35;
  }
  uint64_t v62 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v5 + 10), a2);
  double v63 = (void *)(a3 + 8);
  uint64_t v64 = *(void *)(a3 + 8);
  double v68 = *(uint64_t **)a3;
  char v69 = (char *)v64;
  if (*(void *)(a3 + 16))
  {
    *(void *)(v64 + 16) = &v69;
    *(void *)a3 = v63;
    *double v63 = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    double v68 = (uint64_t *)&v69;
  }
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(v62, (uint64_t)v5);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v68, v69);
  v79[0] = (void **)&v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v79);
}

void sub_2243872F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  std::ostringstream::~ostringstream((uint64_t)&a31);
  a31 = v31 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

uint64_t std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *turi::model_base::register_function(uint64_t a1, std::string *__str, uint64_t a3, uint64_t a4)
{
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    uint64_t v9 = __str;
  }
  atomic_ullong *volatile v10 = (char *)&v9[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    int v11 = v10[size--];
    if (v11 == 58)
    {
      if (size != -1)
      {
        std::string::basic_string(&v15, __str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
        if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str->__r_.__value_.__l.__data_);
        }
        *std::string __str = v15;
      }
      break;
    }
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  uint64_t v12 = (std::vector<std::string> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)&__str->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v15)+ 7);
  if (v12 != (std::vector<std::string> *)a3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v12, *(std::string **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  }
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
  uint64_t v13 = std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 80), (const void **)&__str->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v15);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator=[abi:ne180100](v13 + 7, a4);
}

uint64_t **turi::model_base::register_defaults(uint64_t a1, long long *a2, uint64_t a3)
{
  atomic_ullong *volatile v5 = a2;
  double result = (uint64_t **)(std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 56), (const void **)a2, (uint64_t)&std::piecewise_construct, &v5)+ 7);
  if (result != (uint64_t **)a3) {
    return std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>(result, *(long long **)a3, (long long *)(a3 + 8));
  }
  return result;
}

void turi::model_base::register_docstring(uint64_t a1, const std::string *a2)
{
  memset(&__str, 0, sizeof(__str));
  memset(&v10, 0, sizeof(v10));
  std::string::operator=(&__str, a2);
  std::string::operator=(&v10, a2 + 1);
  p_str = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    int v7 = v6[size--];
    if (v7 == 58)
    {
      if (size != -1)
      {
        std::string::basic_string(&v9, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = v9;
      }
      break;
    }
  }
  v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 200), (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v9);
  std::string::operator=((std::string *)(v8 + 7), &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_2243876E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void turi::model_base::save_to_url(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::shared_ptr<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>>::shared_ptr[abi:ne180100]<turi::neural_net::Iterator<std::unique_ptr<turi::style_transfer::Checkpoint>>,void>(&lpsrc, (void *)(a1 + 8));
  if (!lpsrc)
  {
    int v11 = 0;
    goto LABEL_6;
  }
  if (!v11)
  {
LABEL_6:
    char v12 = 0;
    goto LABEL_7;
  }
  char v12 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  turi::get_unity_global_singleton(v5, v6, v7, v8, v9, v10, (uint64_t *)&lpsrc);
  uint64_t v13 = lpsrc;
  uint64_t v14 = v11;
  std::string v15 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*(void *)v13 + 112))(v13, &v14, a3, a2);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_224387844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void turi::model_base::perform_registration(turi::model_base *this)
{
  v14[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "save");
  std::string::basic_string[abi:ne180100]<0>(&v11, "url");
  std::string::basic_string[abi:ne180100]<0>(v12, "side_data");
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  LOBYTE(v6) = 0;
  uint64_t v7 = operator new(0x30uLL);
  uint64_t v8 = v7;
  uint64_t v9 = (char *)v7 + 48;
  uint64_t v8 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v11, v13, (std::string *)v7);
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>("url", (std::string::size_type)turi::model_base::save_to_url, 0, "side_data", (uint64_t)v14);
  turi::model_base::register_function((uint64_t)this, &__p, (uint64_t)&v7, (uint64_t)v14);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v14);
  uint64_t v5 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v2 = 0;
  while (1)
  {
    if (SHIBYTE(v12[v2 + 2]) < 0) {
      operator delete((void *)v12[v2]);
    }
    v2 -= 3;
    if (v2 == -6)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v7, "save");
      v4[0] = 0;
      v4[1] = 0;
      unint64_t v3 = v4;
      std::pair<std::string const,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::pair[abi:ne180100]<char const(&)[8],std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,0>(&v11, "side_data");
    }
  }
}

void sub_224387A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, char *a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>@<X0>(char *__s@<X2>, std::string::size_type a2@<X0>, unint64_t a3@<X1>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v18, __s);
  std::string::basic_string[abi:ne180100]<0>(v19, a4);
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::string v15 = &v12;
  char v16 = 0;
  char v12 = (std::string *)operator new(0x30uLL);
  uint64_t v13 = v12;
  uint64_t v14 = v12 + 2;
  uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, &v18, v20, v12);
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(a2, a3, (uint64_t)&v12, (uint64_t)v20);
  std::string v15 = &v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v19[i + 2]) < 0) {
      operator delete((void *)v19[i]);
    }
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)v20);
  *(void *)(a5 + 24) = 0;
  uint64_t v10 = operator new(0x28uLL);
  void *v10 = &unk_26D77BD88;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v10 + 1), (uint64_t)v17);
  *(void *)(a5 + 24) = v10;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v17);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](v20);
}

void sub_224387CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](&a14);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(v23 - 88));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,0>(uint64_t a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_2243880A0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 1CoreML::Specification::DoubleRange::New(this, 0) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224388238(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_2243884E0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(std::string::size_type a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[4] = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v20 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v23;
  char v24 = v25;
  v25[0] = 0;
  v25[1] = 0;
  v26[3] = 0;
  v27[3] = 0;
  uint64_t v8 = *(const std::string **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__x, "");
  v9.__i_ = v8;
  std::vector<std::string>::insert((std::vector<std::string> *)a3, v9, &__x);
  if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__x.__r_.__value_.__l.__data_);
  }
  __x.__r_.__value_.__r.__words[0] = a1;
  *(_OWORD *)&__x.__r_.__value_.__r.__words[1] = a2;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&__x.__r_.__value_.__r.__words[2], *(long long **)a3, *(long long **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  std::string::size_type v10 = __x.__r_.__value_.__r.__words[2];
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __x.__r_.__value_.__r.__words[2] = 0;
  *(void *)(a4 + 24) = 0;
  uint64_t v13 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v13 = &unk_26D77BD08;
  *(_OWORD *)(v13 + 8) = *(_OWORD *)&__x.__r_.__value_.__l.__data_;
  *((void *)v13 + 3) = v10;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v12;
  memset(v14, 0, 24);
  *(void *)(a4 + 24) = v13;
  long long v18 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  long long v18 = &__x.__r_.__value_.__r.__words[2];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v27);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v26);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v24, v25[0]);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v22, v23[0]);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
}

void sub_224388728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D77BD08;
  unint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D77BD08;
  unint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0xA1C40C7E57C1ALL);
}

char *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26D77BD08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v2 + 1, *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  return v2;
}

void sub_2243888B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D77BD08;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4CoreML::Specification::DoubleRange::New(this, 0) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 24), *(long long **)(a1 + 24), *(long long **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void **a1)
{
  long long v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base *,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = a3[1];
  uint64_t v7 = (char **)*a3;
  uint64_t v8 = (char *)v6;
  if (a3[2])
  {
    *(void *)(v6 + 16) = &v8;
    *a3 = v5;
    *uint64_t v5 = 0;
    a3[2] = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (uint64_t)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_224388A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_function_wrapper_impl::generate_member_function_wrapper<2ul,turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),std::vector<std::string>)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v28[2] = *(void ***)MEMORY[0x263EF8340];
  char v22 = 1;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v25 = 0;
  char v26 = v27;
  v21[0] = 0;
  v21[1] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v21;
  uint64_t v17 = a2;
  __p[0] = 0;
  memset(&v15, 0, sizeof(v15));
  uint64_t v16 = a3;
  if (&v15 == (std::vector<std::string> *)(a1 + 16))
  {
    end = 0;
    std::vector<std::string>::pointer begin = 0;
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v15, *(std::string **)(a1 + 16), *(long long **)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3));
    std::vector<std::string>::pointer begin = (long long *)v15.__begin_;
    end = (long long *)v15.__end_;
  }
  uint64_t v14 = &v17;
  uint64_t v11 = &v17;
  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, begin, end, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  uint64_t v13 = v16;
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::ml_model_base *,std::string>>::operator()<1>((uint64_t *)&v11);
  turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::model_base *,std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::operator()<2>((uint64_t *)&v11);
  v28[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
  uint64_t v8 = *(void (**)(void *, void **, char ***))a1;
  uint64_t v9 = *(void *)(a1 + 8);
  std::string::size_type v10 = (void *)(v17 + (v9 >> 1));
  if (v9) {
    uint64_t v8 = *(void (**)(void *, void **, char ***))(*v10 + v8);
  }
  v8(v10, __p, &v20);
  memset(v28, 0, 13);
  turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v28, &turi::FLEX_UNDEFINED);
  *(void ***)(a4 + 13) = *(void ***)((char *)v28 + 5);
  *(void ***)(a4 + 8) = v28[0];
  *(unsigned char *)(a4 + 2CoreML::Specification::DoubleRange::New(this, 0) = BYTE4(v28[1]);
  *(_DWORD *)a4 = 0;
  v28[0] = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v28);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v20, v21[0]);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v26, v27[0]);
  if (SHIBYTE(v25) < 0) {
    operator delete(v23);
  }
}

void sub_224388C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  *(void *)(v28 - 88) = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 88));
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a20);
  turi::toolkit_function_response_type::~toolkit_function_response_type((turi::toolkit_function_response_type *)&a27);
  _Unwind_Resume(a1);
}

void turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::model_base *,std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::operator()<2>(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v1) >> 3) >= 3)
  {
    uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1[4], (const void **)(v1 + 48));
    if (a1[4] + 8 == v3)
    {
      uint64_t v8 = a1;
      turi::toolkit_function_wrapper_impl::fill_named_in_args<boost::fusion::vector<turi::style_transfer::style_transfer *,turi::gl_sarray,turi::gl_sarray,std::map<std::string,turi::flexible_type>>>::operator()<2>(mpl_::integral_c<int,2>)const::{lambda(void)#1}::operator()();
    }
    turi::toolkit_function_wrapper_impl::read_arg<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t *)(v3 + 56), (uint64_t)&v8);
    uint64_t v4 = *a1 + 40;
    uint64_t v5 = (uint64_t *)(*a1 + 32);
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v5, *(char **)v4);
    uint64_t v6 = v9;
    *(void *)(v4 - 8) = v8;
    *(void *)uint64_t v4 = v6;
    uint64_t v7 = v10;
    *(void *)(v4 + 8) = v10;
    if (v7)
    {
      *(void *)(v6 + 16) = v4;
      uint64_t v8 = &v9;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v6 = 0;
    }
    else
    {
      *uint64_t v5 = v4;
    }
    std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v8, (char *)v6);
  }
}

uint64_t std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D77BD88;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__func(void *a1)
{
  *a1 = &unk_26D77BD88;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  JUMPOUT(0x22A614FA0);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x28uLL);
  *long long v2 = &unk_26D77BD88;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_224388F2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D77BD88;
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::~__value_func[abi:ne180100](a1 + 1);
  operator delete(a1);
}

void std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1},std::allocator<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::target_type()
{
}

void std::__invoke_void_return_wrapper<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>,false>::__call[abi:ne180100]<std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)> turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1} &,turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (void *)(a3 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t v7 = *(char ***)a3;
  uint64_t v8 = (char *)v6;
  if (*(void *)(a3 + 16))
  {
    *(void *)(v6 + 16) = &v8;
    *(void *)a3 = v5;
    *uint64_t v5 = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t v7 = &v8;
  }
  turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(a1, v4, (const void ***)&v7, a4);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v7, v8);
}

void sub_2243890F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void turi::toolkit_class_wrapper_impl::generate_member_function_wrapper_indirect<turi::model_base,void,std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&,char const*,char const*>(void (turi::model_base::*)(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&),char const*,char const*)::{lambda(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  v10[9] = *MEMORY[0x263EF8340];
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100](v7, a3);
  std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(turi::model_base*,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>)>::operator()(a1, a2);
  uint64_t v8 = (std::string *)(a4 + 8);
  boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::copy_into,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((uint64_t *)v9, v9 ^ (v9 >> 31), &v8, (uint64_t)v10);
  *(_DWORD *)a4 = v9 ^ (v9 >> 31);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v9);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v7, (char *)v7[1]);
}

void sub_2243891DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, char *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va1);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

void turi::neural_net::Image::CreateFromPath()
{
}

void std::make_unique<turi::neural_net::CoreImageImage,std::string const&>()
{
}

void sub_224389298(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x81C40803F642BLL);
  _Unwind_Resume(a1);
}

void turi::option_handling::option_info::interpret_value(turi::option_handling::option_info *this@<X0>, const turi::flexible_type *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v514 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)a2 + 12) == 2) {
    uint64_t v6 = "'";
  }
  else {
    uint64_t v6 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v472, v6);
  *a3 = 0;
  *((_DWORD *)a3 + 2) = 0;
  *((unsigned char *)a3 + 12) = 0;
  switch(*((_DWORD *)this + 16))
  {
    case 0:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          double v7 = (double)*(uint64_t *)a2;
          *((_DWORD *)a3 + 2) = 0;
          *((unsigned char *)a3 + 12) = 1;
          *(double *)a3 = v7;
          break;
        case 1:
          if (a2 != (const turi::flexible_type *)a3)
          {
            *(uint64_t *)((char *)a3 + 5) = *(void *)((char *)a2 + 5);
            *a3 = *(void *)a2;
            *((unsigned char *)a3 + 12) = 1;
          }
          break;
        case 2:
          uint64_t v92 = *(void *)a2;
          std::string __p = 0;
          std::string::size_type v95 = *(void *)(v92 + 8);
          std::string::size_type v93 = v92 + 8;
          std::string::size_type v94 = v95;
          uint64_t v96 = *(unsigned __int8 *)(v93 + 23);
          if ((v96 & 0x80u) == 0) {
            std::string::size_type v94 = v93;
          }
          uint64_t v97 = *(void *)(v93 + 8);
          if ((v96 & 0x80u) == 0) {
            uint64_t v97 = v96;
          }
          v480.__r_.__value_.__r.__words[0] = v94;
          v480.__r_.__value_.__l.__size_ = v94 + v97;
          if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::float_types_converter_internal<double>((unsigned __int8 **)&v480, (double *)&__p) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v483);
            *(void *)&long long v483 = &unk_26D7572F8;
            *(void *)&long long v484 = MEMORY[0x263F8C240];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v483);
          }
          uint64_t v98 = __p;
          switch(*((unsigned char *)a3 + 12))
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v99 = *a3;
                if (!*a3) {
                  goto LABEL_276;
                }
                if (*(char *)(v99 + 31) < 0) {
                  operator delete(*(void **)(v99 + 8));
                }
                uint64_t v100 = (void *)v99;
                uint64_t v101 = 0x1012C404EF22A49;
                goto LABEL_275;
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v139 = (void *)*a3;
                if (!*a3) {
                  goto LABEL_276;
                }
                uint64_t v140 = (void *)v139[1];
                if (v140)
                {
                  v139[2] = v140;
                  operator delete(v140);
                }
                uint64_t v100 = v139;
                uint64_t v101 = 0x1080C409938AC02;
                goto LABEL_275;
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v135 = (void *)*a3;
                if (!*a3) {
                  goto LABEL_276;
                }
                *(void *)&long long v483 = v135 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
                goto LABEL_266;
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v135 = (void *)*a3;
                if (!*a3) {
                  goto LABEL_276;
                }
                *(void *)&long long v483 = v135 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
LABEL_266:
                uint64_t v100 = v135;
                uint64_t v101 = 0x1020C405E66F15BLL;
                goto LABEL_275;
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v143 = *a3;
                if (!*a3) {
                  goto LABEL_276;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)(v143 + 16));
                uint64_t v100 = (void *)v143;
                unsigned int v137 = -235920773;
                goto LABEL_274;
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                if (*a3)
                {
                  uint64_t v100 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)*a3);
                  unsigned int v137 = 2071181815;
LABEL_274:
                  uint64_t v101 = v137 | 0x1030C4000000000;
LABEL_275:
                  MEMORY[0x22A614FA0](v100, v101);
                }
LABEL_276:
                *a3 = 0;
              }
              break;
            default:
              break;
          }
          *((_DWORD *)a3 + 2) = 0;
          *((unsigned char *)a3 + 12) = 1;
          *a3 = (uint64_t)v98;
          break;
        case 7:
          if ((uint64_t *)((char *)this + 48) != a3)
          {
            *(uint64_t *)((char *)a3 + 5) = *(void *)((char *)this + 53);
            *a3 = *((void *)this + 6);
            int v112 = *((unsigned __int8 *)this + 60);
            *((unsigned char *)a3 + 12) = v112;
            switch(v112)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
                atomic_fetch_add((atomic_ullong *volatile)*a3, 1uLL);
                break;
              default:
                goto LABEL_278;
            }
          }
          break;
        default:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v511);
          v456 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)"Expected numeric value for option '", 35);
          int v457 = *((char *)this + 23);
          if (v457 >= 0) {
            v458 = this;
          }
          else {
            v458 = *(turi::option_handling::option_info **)this;
          }
          if (v457 >= 0) {
            uint64_t v459 = *((unsigned __int8 *)this + 23);
          }
          else {
            uint64_t v459 = *((void *)this + 1);
          }
          v460 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v456, (uint64_t)v458, v459);
          v461 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v460, (uint64_t)"'. Cannot cast ", 15);
          if ((v474 & 0x80u) == 0) {
            v462 = &v472;
          }
          else {
            v462 = v472;
          }
          if ((v474 & 0x80u) == 0) {
            uint64_t v463 = v474;
          }
          else {
            uint64_t v463 = v473;
          }
          v464 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v461, (uint64_t)v462, v463);
          switch(*((unsigned char *)a2 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_1078;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_1078:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
              goto LABEL_1089;
            case 2:
              uint64_t v465 = *(void *)a2;
              if (*(char *)(*(void *)a2 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v465 + 8), *(void *)(v465 + 16));
              }
              else
              {
                long long v466 = *(_OWORD *)(v465 + 8);
                __str.__r_.__value_.__r.__words[2] = *(void *)(v465 + 24);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v466;
              }
              goto LABEL_1089;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
              goto LABEL_1089;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)a2 + 8));
              goto LABEL_1089;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
              goto LABEL_1089;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(a2, &__str);
              goto LABEL_1089;
            case 7:
              memset(&__str, 0, sizeof(__str));
              goto LABEL_1089;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_1089;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
LABEL_1089:
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_str = &__str;
              }
              else {
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = __str.__r_.__value_.__l.__size_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v464, (uint64_t)p_str, size);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if ((v474 & 0x80u) == 0) {
                v469 = &v472;
              }
              else {
                v469 = v472;
              }
              if ((v474 & 0x80u) == 0) {
                uint64_t v470 = v474;
              }
              else {
                uint64_t v470 = v473;
              }
              v471 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v464, (uint64_t)v469, v470);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v471, (uint64_t)" to a numeric value.", 20);
              *(void *)&long long v483 = v511;
              turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_0::operator()();
            default:
              goto LABEL_871;
          }
          goto LABEL_871;
      }
LABEL_278:
      double v144 = 0.0;
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
          double v144 = (double)*a3;
          break;
        case 1:
          double v144 = *(double *)a3;
          break;
        case 2:
          uint64_t v146 = *a3;
          unsigned int v147 = (char **)(*a3 + 8);
          __str.__r_.__value_.__r.__words[0] = 0;
          uint64_t v148 = (char *)v147;
          if (*(char *)(v146 + 31) < 0) {
            uint64_t v148 = *v147;
          }
          std::string::basic_string[abi:ne180100]<0>(&v483, v148);
          double v149 = std::stod((const std::string *)&v483, (size_t *)&__str);
          if (SBYTE7(v484) < 0) {
            operator delete((void *)v483);
          }
          if (*(char *)(v146 + 31) < 0) {
            uint64_t v150 = *(void *)(v146 + 16);
          }
          else {
            uint64_t v150 = *(unsigned __int8 *)(v146 + 31);
          }
          if (__str.__r_.__value_.__r.__words[0] != v150)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            v401 = std::string::append((std::string *)v511, " cannot be interpreted as a float");
            long long v402 = *(_OWORD *)&v401->__r_.__value_.__l.__data_;
            *(void *)&long long v484 = *((void *)&v401->__r_.__value_.__l + 2);
            long long v483 = v402;
            v401->__r_.__value_.__l.__size_ = 0;
            v401->__r_.__value_.__r.__words[2] = 0;
            v401->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)&v483);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          float v157 = v149;
          double v144 = v157;
          break;
        case 3:
          uint64_t v145 = *a3;
          *(void *)&long long v484 = 0;
          long long v483 = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v483, *(const void **)(v145 + 8), *(void *)(v145 + 16), (uint64_t)(*(void *)(v145 + 16) - *(void *)(v145 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((void)v483)
          {
            *((void *)&v483 + 1) = v483;
            operator delete((void *)v483);
          }
          break;
        case 4:
          uint64_t v151 = *a3;
          *(void *)&long long v484 = 0;
          long long v483 = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v483, *(uint64_t **)(v151 + 8), *(uint64_t **)(v151 + 16), (uint64_t)(*(void *)(v151 + 16) - *(void *)(v151 + 8)) >> 4);
          turi::flexible_type_fail(0);
          *(void *)v511 = &v483;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v511);
          break;
        case 5:
          uint64_t v152 = *a3;
          *(void *)&long long v484 = 0;
          long long v483 = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v483, *(uint64_t **)(v152 + 8), *(uint64_t **)(v152 + 16), (uint64_t)(*(void *)(v152 + 16) - *(void *)(v152 + 8)) >> 5);
          turi::flexible_type_fail(0);
          *(void *)v511 = &v483;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v511);
          break;
        case 6:
          double v144 = (double)*((int *)a3 + 2) / 1000000.0 + (double)(*a3 << 8 >> 8);
          break;
        case 7:
          break;
        case 8:
          uint64_t v153 = *a3;
          uint64_t v154 = *(void *)(*a3 + 16);
          *(void *)&long long v483 = *(void *)(*a3 + 8);
          *((void *)&v483 + 1) = v154;
          if (v154) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v154 + 8), 1u, memory_order_relaxed);
          }
          long long v155 = *(_OWORD *)(v153 + 24);
          long long v156 = *(_OWORD *)(v153 + 56);
          long long v485 = *(_OWORD *)(v153 + 40);
          long long v486 = v156;
          long long v484 = v155;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&v483 + 1);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&v483, *a3 + 8);
          turi::flexible_type_fail(0);
          turi::flexible_type_impl::ndarray<double>::~ndarray(&v483);
          break;
        default:
          goto LABEL_871;
      }
      std::string __p = *(void **)&v144;
      *(void *)v511 = 0;
      *(_DWORD *)&v511[8] = 0;
      v511[12] = 0;
      turi::flexible_type::operator=<double>((uint64_t)v511, &__p);
      double v159 = (char *)this + 72;
      switch(v511[12])
      {
        case 0:
          switch(*((unsigned char *)this + 84))
          {
            case 0:
              if (*(void *)v159 < *(uint64_t *)v511) {
                goto LABEL_728;
              }
              goto LABEL_335;
            case 1:
              v158.n128_u64[0] = *(void *)v159;
              double v347 = (double)*(uint64_t *)v511;
              goto LABEL_725;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_334;
            case 6:
              if (*(uint64_t *)v511 > (uint64_t)(*(void *)v159 << 8) >> 8) {
                goto LABEL_728;
              }
              goto LABEL_335;
            default:
              goto LABEL_871;
          }
        case 1:
          switch(*((unsigned char *)this + 84))
          {
            case 0:
              v158.n128_u64[0] = *(void *)v511;
              if (*(double *)v511 > (double)*(uint64_t *)v159) {
                goto LABEL_728;
              }
              goto LABEL_335;
            case 1:
              v158.n128_u64[0] = *(void *)v159;
              double v347 = *(double *)v511;
LABEL_725:
              if (v158.n128_f64[0] < v347) {
                goto LABEL_728;
              }
              goto LABEL_335;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_334;
            case 6:
              v158.n128_f64[0] = (double)*((int *)this + 20) / 1000000.0
                               + (double)((uint64_t)(*((void *)this + 9) << 8) >> 8);
              if (v158.n128_f64[0] < *(double *)v511) {
                goto LABEL_728;
              }
              goto LABEL_335;
            default:
              goto LABEL_871;
          }
        case 2:
          unsigned int v161 = *((unsigned __int8 *)this + 84);
          if (v161 - 3 < 7 || v161 < 2) {
            goto LABEL_334;
          }
          if (v161 != 2) {
            goto LABEL_871;
          }
          if ((std::string::compare[abi:ne180100]((const void **)(*(void *)v159 + 8), (unsigned char *)(*(void *)v511 + 8)) & 0x80000000) != 0)goto LABEL_728; {
          goto LABEL_335;
          }
        case 3:
          unsigned int v162 = *((unsigned __int8 *)this + 84);
          if (v162 > 9) {
            goto LABEL_871;
          }
          if (v162 != 3) {
            goto LABEL_334;
          }
          unint64_t v163 = *(unint64_t **)(*(void *)v159 + 8);
          double v164 = *(double **)(*(void *)v511 + 8);
          unint64_t v165 = (uint64_t)(*(void *)(*(void *)v511 + 16) - (void)v164) >> 3;
          unint64_t v166 = (uint64_t)(*(void *)(*(void *)v159 + 16) - (void)v163) >> 3;
          if (*(unint64_t **)(*(void *)v159 + 16) == v163) {
            goto LABEL_322;
          }
          if (v166 <= 1) {
            uint64_t v167 = 1;
          }
          else {
            uint64_t v167 = (uint64_t)(*(void *)(*(void *)v159 + 16) - (void)v163) >> 3;
          }
          uint64_t v168 = (uint64_t)(*(void *)(*(void *)v511 + 16) - (void)v164) >> 3;
          break;
        case 4:
          unsigned int v160 = *((unsigned __int8 *)this + 84);
          if (v160 > 9) {
            goto LABEL_871;
          }
          if (v160 != 4)
          {
LABEL_334:
            turi::flexible_type_fail(0);
            goto LABEL_335;
          }
          if (!turi::flexible_type_impl::lt_operator::operator()(v158, (uint64_t)&v483, (uint64_t *)(*(void *)v159 + 8), (void *)(*(void *)v511 + 8)))goto LABEL_335; {
          goto LABEL_728;
          }
        case 5:
        case 8:
        case 9:
          if (*((unsigned __int8 *)this + 84) >= 0xAu) {
            goto LABEL_871;
          }
          goto LABEL_334;
        case 6:
          switch(*((unsigned char *)this + 84))
          {
            case 0:
              if (*(void *)v159 < (uint64_t)(*(void *)v511 << 8) >> 8) {
                goto LABEL_728;
              }
              goto LABEL_335;
            case 1:
              v158.n128_f64[0] = (double)*(int *)&v511[8] / 1000000.0 + (double)((uint64_t)(*(void *)v511 << 8) >> 8);
              if (v158.n128_f64[0] > *(double *)v159) {
                goto LABEL_728;
              }
              goto LABEL_335;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_334;
            case 6:
              uint64_t v348 = (uint64_t)(*(void *)v159 << 8) >> 8;
              if (v348 < (uint64_t)(*(void *)v511 << 8) >> 8
                || v348 == (uint64_t)(*(void *)v511 << 8) >> 8 && *((_DWORD *)this + 20) < *(int *)&v511[8])
              {
                goto LABEL_728;
              }
              goto LABEL_335;
            default:
              goto LABEL_871;
          }
        case 7:
          if (*((unsigned __int8 *)this + 84) <= 9u) {
            goto LABEL_334;
          }
          goto LABEL_871;
        default:
          goto LABEL_871;
      }
      while (v168)
      {
        v158.n128_u64[0] = *v163;
        if (*(double *)v163 > *v164) {
          break;
        }
        if (*(double *)v163 < *v164) {
          goto LABEL_728;
        }
        --v168;
        ++v163;
        ++v164;
        if (!--v167)
        {
LABEL_322:
          if (v166 < v165)
          {
LABEL_728:
            BOOL v169 = 1;
            goto LABEL_405;
          }
          break;
        }
      }
LABEL_335:
      switch(v511[12])
      {
        case 0:
          BOOL v169 = 0;
          switch(*((unsigned char *)this + 84))
          {
            case 0:
              BOOL v170 = *(void *)v159 == *(void *)v511;
              goto LABEL_387;
            case 1:
              v158.n128_u64[0] = *(void *)v159;
              uint64_t v211 = *(void *)v511;
              goto LABEL_754;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_405;
            case 6:
              BOOL v170 = *(void *)v511 == (uint64_t)(*((void *)this + 9) << 8) >> 8 && *((_DWORD *)this + 20) == 0;
              goto LABEL_387;
            default:
              goto LABEL_871;
          }
        case 1:
          BOOL v169 = 0;
          switch(*((unsigned char *)this + 84))
          {
            case 0:
              v158.n128_u64[0] = *(void *)v511;
              uint64_t v211 = *(void *)v159;
LABEL_754:
              BOOL v170 = v158.n128_f64[0] == (double)v211;
              goto LABEL_387;
            case 1:
              v158.n128_u64[0] = *(void *)v159;
              BOOL v169 = *(double *)v159 == *(double *)v511;
              goto LABEL_405;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_405;
            case 6:
              double v351 = *(double *)v511;
              double v352 = (double)*((int *)this + 20) / 1000000.0 + (double)((uint64_t)(*((void *)this + 9) << 8) >> 8);
              goto LABEL_757;
            default:
              goto LABEL_871;
          }
        case 2:
          unsigned int v197 = *((unsigned __int8 *)this + 84);
          if (v197 - 3 < 7 || v197 < 2) {
            goto LABEL_404;
          }
          if (v197 != 2) {
            goto LABEL_871;
          }
          uint64_t v199 = *(void *)v159;
          if (*(char *)(*(void *)v159 + 31) < 0) {
            size_t v200 = *(void *)(v199 + 16);
          }
          else {
            size_t v200 = *(unsigned __int8 *)(*(void *)v159 + 31);
          }
          if (*(char *)(*(void *)v511 + 31) < 0) {
            uint64_t v355 = *(void *)(*(void *)v511 + 16);
          }
          else {
            uint64_t v355 = *(unsigned __int8 *)(*(void *)v511 + 31);
          }
          if (v200 != v355) {
            goto LABEL_404;
          }
          v356 = (void *)(v199 + 8);
          if ((*(unsigned char *)(*(void *)v159 + 31) & 0x80) != 0) {
            v356 = (void *)*v356;
          }
          timeval v357 = (void *)(*(void *)v511 + 8);
          if ((*(unsigned char *)(*(void *)v511 + 31) & 0x80) != 0) {
            timeval v357 = (void *)*v357;
          }
          if ((*(unsigned char *)(*(void *)v159 + 31) & 0x80) != 0)
          {
            BOOL v170 = memcmp(v356, v357, v200) == 0;
LABEL_387:
            BOOL v169 = v170;
          }
          else
          {
            if (!v200) {
              goto LABEL_728;
            }
            size_t v358 = v200 - 1;
            do
            {
              int v360 = *(unsigned __int8 *)v356;
              v356 = (void *)((char *)v356 + 1);
              int v359 = v360;
              int v362 = *(unsigned __int8 *)v357;
              timeval v357 = (void *)((char *)v357 + 1);
              int v361 = v362;
              BOOL v55 = v358-- != 0;
              char v363 = v55;
              BOOL v169 = v359 == v361;
            }
            while (v359 == v361 && (v363 & 1) != 0);
          }
          goto LABEL_405;
        case 3:
          unsigned int v201 = *((unsigned __int8 *)this + 84);
          if (v201 > 9) {
            goto LABEL_871;
          }
          if (v201 != 3) {
            goto LABEL_404;
          }
          int64_t v202 = *(unint64_t **)(*(void *)v159 + 8);
          int64_t v203 = *(void **)(*(void *)v159 + 16);
          unint64_t v204 = v203 - v202;
          atomic_ullong *volatile v205 = *(double **)(*(void *)v511 + 8);
          if (v204 != (uint64_t)(*(void *)(*(void *)v511 + 16) - (void)v205) >> 3) {
            goto LABEL_404;
          }
          if (v203 == v202) {
            goto LABEL_728;
          }
          if (v204 <= 1) {
            uint64_t v206 = 1;
          }
          else {
            uint64_t v206 = v203 - v202;
          }
          v158.n128_u64[0] = *v202;
          if (*(double *)v202 != *v205) {
            goto LABEL_404;
          }
          uint64_t v207 = 1;
          do
          {
            unint64_t v208 = v207;
            if (v206 == v207) {
              break;
            }
            v158.n128_u64[0] = v202[v207];
            double v209 = v205[v207++];
          }
          while (v158.n128_f64[0] == v209);
          BOOL v169 = v208 >= v204;
          goto LABEL_405;
        case 4:
          unsigned int v171 = *((unsigned __int8 *)this + 84);
          if (v171 > 9) {
            goto LABEL_871;
          }
          if (v171 != 4) {
            goto LABEL_404;
          }
          int v172 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v483, (uint64_t *)(*(void *)v159 + 8), (void *)(*(void *)v511 + 8));
          goto LABEL_745;
        case 5:
          unsigned int v212 = *((unsigned __int8 *)this + 84);
          if (v212 > 9) {
            goto LABEL_871;
          }
          if (v212 != 5) {
            goto LABEL_404;
          }
          int v172 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v483, (uint64_t **)(*(void *)v159 + 8), (uint64_t **)(*(void *)v511 + 8));
          goto LABEL_745;
        case 6:
          BOOL v169 = 0;
          switch(*((unsigned char *)this + 84))
          {
            case 0:
              BOOL v170 = *(void *)v159 == (uint64_t)(*(void *)v511 << 8) >> 8 && *(_DWORD *)&v511[8] == 0;
              goto LABEL_387;
            case 1:
              double v352 = *(double *)v159;
              double v351 = (double)*(int *)&v511[8] / 1000000.0 + (double)((uint64_t)(*(void *)v511 << 8) >> 8);
LABEL_757:
              v158.n128_f64[0] = vabdd_f64(v352, v351);
              BOOL v169 = v158.n128_f64[0] < 0.0000005;
              goto LABEL_405;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_405;
            case 6:
              BOOL v170 = ((*(void *)v511 ^ *((void *)this + 9)) & 0xFFFFFFFFFFFFFFLL) == 0
                  && *((_DWORD *)this + 20) == *(_DWORD *)&v511[8];
              goto LABEL_387;
            default:
              goto LABEL_871;
          }
        case 7:
          unsigned int v210 = *((unsigned __int8 *)this + 84);
          if (v210 > 9) {
            goto LABEL_871;
          }
          BOOL v170 = v210 == 7;
          goto LABEL_387;
        case 8:
          unsigned int v213 = *((unsigned __int8 *)this + 84);
          if (v213 < 8 || v213 == 9) {
            goto LABEL_404;
          }
          if (v213 != 8) {
            goto LABEL_871;
          }
          int v172 = turi::image_type::operator==(*(void *)v159 + 8, *(void *)v511 + 8);
LABEL_745:
          BOOL v169 = v172;
          goto LABEL_405;
        case 9:
          unsigned int v173 = *((unsigned __int8 *)this + 84);
          if (v173 < 9) {
            goto LABEL_404;
          }
          if (v173 != 9) {
            goto LABEL_871;
          }
          uint64_t v174 = *(void *)v511;
          uint64_t v175 = *(void **)v159;
          if (*(void *)v511 == *(void *)v159) {
            goto LABEL_728;
          }
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v175 + 1), *(void *)v511 + 8))
          {
LABEL_404:
            BOOL v169 = 0;
            goto LABEL_405;
          }
          unsigned int v177 = (char *)v175[3];
          double v176 = (char *)v175[4];
          uint64_t v178 = v176 - v177;
          if (v176 == v177) {
            goto LABEL_728;
          }
          if (!v175[1]) {
            goto LABEL_728;
          }
          uint64_t v179 = 1;
          do
          {
            uint64_t v180 = *(void *)v177;
            v177 += 8;
            v179 *= v180;
          }
          while (v177 != v176);
          if (!v179) {
            goto LABEL_728;
          }
          v480.__r_.__value_.__r.__words[0] = 0;
          std::vector<unsigned long>::vector(&v483, v178 >> 3, &v480);
          break;
        default:
          goto LABEL_871;
      }
      while (1)
      {
        unsigned int v181 = (void *)v483;
        if (*((void *)&v483 + 1) == (void)v483)
        {
          uint64_t v190 = 0;
          v158.n128_u64[0] = *(void *)(*(void *)v175[1] + 8 * v175[9]);
        }
        else
        {
          uint64_t v182 = 0;
          unint64_t v183 = (uint64_t)(*((void *)&v483 + 1) - v483) >> 3;
          unint64_t v184 = (uint64_t *)v175[6];
          if (v183 <= 1) {
            unint64_t v183 = 1;
          }
          double v185 = (uint64_t *)v483;
          unint64_t v186 = v183;
          do
          {
            uint64_t v188 = *v185++;
            uint64_t v187 = v188;
            uint64_t v189 = *v184++;
            v182 += v189 * v187;
            --v186;
          }
          while (v186);
          uint64_t v190 = 0;
          v158.n128_u64[0] = *(void *)(*(void *)v175[1] + 8 * (v175[9] + v182));
          unsigned int v191 = *(uint64_t **)(v174 + 48);
          float64x2_t v192 = (uint64_t *)v483;
          do
          {
            uint64_t v194 = *v192++;
            uint64_t v193 = v194;
            uint64_t v195 = *v191++;
            v190 += v195 * v193;
            --v183;
          }
          while (v183);
        }
        double v196 = *(double *)(**(void **)(v174 + 8) + 8 * (*(void *)(v174 + 72) + v190));
        BOOL v169 = v158.n128_f64[0] == v196;
        if (v158.n128_f64[0] != v196) {
          break;
        }
        if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v175 + 1), (uint64_t *)&v483))
        {
          unsigned int v181 = (void *)v483;
          break;
        }
      }
      if (v181)
      {
        *((void *)&v483 + 1) = v181;
        operator delete(v181);
      }
LABEL_405:
      switch(v511[12])
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v215 = *(void **)v511;
            if (*(void *)v511)
            {
              if (*(char *)(*(void *)v511 + 31) < 0) {
                operator delete(*(void **)(*(void *)v511 + 8));
              }
              uint64_t v216 = v215;
              uint64_t v217 = 0x1012C404EF22A49;
              goto LABEL_430;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v220 = *(void **)v511;
            if (*(void *)v511)
            {
              long long v221 = *(void **)(*(void *)v511 + 8);
              if (v221)
              {
                *(void *)(*(void *)v511 + 16) = v221;
                operator delete(v221);
              }
              uint64_t v216 = v220;
              uint64_t v217 = 0x1080C409938AC02;
              goto LABEL_430;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v218 = *(void **)v511;
            if (*(void *)v511)
            {
              *(void *)&long long v483 = *(void *)v511 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
              goto LABEL_425;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v218 = *(void **)v511;
            if (*(void *)v511)
            {
              *(void *)&long long v483 = *(void *)v511 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
LABEL_425:
              uint64_t v216 = v218;
              uint64_t v217 = 0x1020C405E66F15BLL;
              goto LABEL_430;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v222 = *(void **)v511;
            if (*(void *)v511)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v511 + 16));
              uint64_t v216 = v222;
              unsigned int v219 = -235920773;
              goto LABEL_429;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)v511)
          {
            uint64_t v216 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v511);
            unsigned int v219 = 2071181815;
LABEL_429:
            uint64_t v217 = v219 | 0x1030C4000000000;
LABEL_430:
            MEMORY[0x22A614FA0](v216, v217, v158);
          }
          break;
        default:
          break;
      }
      if (v169)
      {
        double v223 = 0.0;
        switch(*((unsigned char *)a3 + 12))
        {
          case 0:
            double v223 = (double)*a3;
            break;
          case 1:
            double v223 = *(double *)a3;
            break;
          case 2:
            uint64_t v225 = *a3;
            uint64_t v226 = (char **)(*a3 + 8);
            __str.__r_.__value_.__r.__words[0] = 0;
            unint64_t v227 = (char *)v226;
            if (*(char *)(v225 + 31) < 0) {
              unint64_t v227 = *v226;
            }
            std::string::basic_string[abi:ne180100]<0>(&v483, v227);
            double v228 = std::stod((const std::string *)&v483, (size_t *)&__str);
            if (SBYTE7(v484) < 0) {
              operator delete((void *)v483);
            }
            if (*(char *)(v225 + 31) < 0) {
              uint64_t v229 = *(void *)(v225 + 16);
            }
            else {
              uint64_t v229 = *(unsigned __int8 *)(v225 + 31);
            }
            if (__str.__r_.__value_.__r.__words[0] != v229)
            {
              v403 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v404 = std::string::append((std::string *)v511, " cannot be interpreted as a float");
              long long v405 = *(_OWORD *)&v404->__r_.__value_.__l.__data_;
              *(void *)&long long v484 = *((void *)&v404->__r_.__value_.__l + 2);
              long long v483 = v405;
              v404->__r_.__value_.__l.__size_ = 0;
              v404->__r_.__value_.__r.__words[2] = 0;
              v404->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v403, (const std::string *)&v483);
              __cxa_throw(v403, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            float v236 = v228;
            double v223 = v236;
            break;
          case 3:
            uint64_t v224 = *a3;
            *(void *)&long long v484 = 0;
            long long v483 = 0uLL;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v483, *(const void **)(v224 + 8), *(void *)(v224 + 16), (uint64_t)(*(void *)(v224 + 16) - *(void *)(v224 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if ((void)v483)
            {
              *((void *)&v483 + 1) = v483;
              operator delete((void *)v483);
            }
            break;
          case 4:
            uint64_t v230 = *a3;
            *(void *)&long long v484 = 0;
            long long v483 = 0uLL;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v483, *(uint64_t **)(v230 + 8), *(uint64_t **)(v230 + 16), (uint64_t)(*(void *)(v230 + 16) - *(void *)(v230 + 8)) >> 4);
            turi::flexible_type_fail(0);
            *(void *)v511 = &v483;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v511);
            break;
          case 5:
            uint64_t v231 = *a3;
            *(void *)&long long v484 = 0;
            long long v483 = 0uLL;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v483, *(uint64_t **)(v231 + 8), *(uint64_t **)(v231 + 16), (uint64_t)(*(void *)(v231 + 16) - *(void *)(v231 + 8)) >> 5);
            turi::flexible_type_fail(0);
            *(void *)v511 = &v483;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v511);
            break;
          case 6:
            double v223 = (double)*((int *)a3 + 2) / 1000000.0 + (double)(*a3 << 8 >> 8);
            break;
          case 7:
            break;
          case 8:
            uint64_t v232 = *a3;
            uint64_t v233 = *(void *)(*a3 + 16);
            *(void *)&long long v483 = *(void *)(*a3 + 8);
            *((void *)&v483 + 1) = v233;
            if (v233) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v233 + 8), 1u, memory_order_relaxed);
            }
            long long v234 = *(_OWORD *)(v232 + 24);
            long long v235 = *(_OWORD *)(v232 + 56);
            long long v485 = *(_OWORD *)(v232 + 40);
            long long v486 = v235;
            long long v484 = v234;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&v483 + 1);
            break;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&v483, *a3 + 8);
            turi::flexible_type_fail(0);
            turi::flexible_type_impl::ndarray<double>::~ndarray(&v483);
            break;
          default:
            goto LABEL_871;
        }
        *(double *)v476 = v223;
        *(void *)v511 = 0;
        *(_DWORD *)&v511[8] = 0;
        v511[12] = 0;
        turi::flexible_type::operator=<double>((uint64_t)v511, v476);
        switch(v511[12])
        {
          case 0:
            switch(*((unsigned char *)this + 100))
            {
              case 0:
                if (*((void *)this + 11) > *(uint64_t *)v511) {
                  goto LABEL_742;
                }
                goto LABEL_489;
              case 1:
                v237.n128_u64[0] = *((void *)this + 11);
                double v349 = (double)*(uint64_t *)v511;
                goto LABEL_739;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_488;
              case 6:
                if (*(uint64_t *)v511 < (uint64_t)(*((void *)this + 11) << 8) >> 8) {
                  goto LABEL_742;
                }
                goto LABEL_489;
              default:
                goto LABEL_871;
            }
          case 1:
            switch(*((unsigned char *)this + 100))
            {
              case 0:
                v237.n128_u64[0] = *(void *)v511;
                if (*(double *)v511 < (double)*((uint64_t *)this + 11)) {
                  goto LABEL_742;
                }
                goto LABEL_489;
              case 1:
                v237.n128_u64[0] = *((void *)this + 11);
                double v349 = *(double *)v511;
LABEL_739:
                if (v237.n128_f64[0] > v349) {
                  goto LABEL_742;
                }
                goto LABEL_489;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_488;
              case 6:
                v237.n128_f64[0] = (double)*((int *)this + 24) / 1000000.0
                                 + (double)((uint64_t)(*((void *)this + 11) << 8) >> 8);
                if (v237.n128_f64[0] > *(double *)v511) {
                  goto LABEL_742;
                }
                goto LABEL_489;
              default:
                goto LABEL_871;
            }
          case 2:
            unsigned int v240 = *((unsigned __int8 *)this + 100);
            if (v240 - 3 < 7 || v240 < 2) {
              goto LABEL_488;
            }
            if (v240 != 2) {
              goto LABEL_871;
            }
            BOOL v239 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)v511 + 8), (void *)(*((void *)this + 11) + 8));
            goto LABEL_463;
          case 3:
            unsigned int v241 = *((unsigned __int8 *)this + 100);
            if (v241 > 9) {
              goto LABEL_871;
            }
            if (v241 != 3) {
              goto LABEL_488;
            }
            uint64_t v242 = *(unint64_t **)(*((void *)this + 11) + 8);
            atomic_ullong *volatile v243 = *(double **)(*(void *)v511 + 8);
            unint64_t v244 = (uint64_t)(*(void *)(*(void *)v511 + 16) - (void)v243) >> 3;
            unint64_t v245 = (uint64_t)(*(void *)(*((void *)this + 11) + 16) - (void)v242) >> 3;
            if (*(unint64_t **)(*((void *)this + 11) + 16) == v242) {
              goto LABEL_476;
            }
            if (v245 <= 1) {
              uint64_t v246 = 1;
            }
            else {
              uint64_t v246 = (uint64_t)(*(void *)(*((void *)this + 11) + 16) - (void)v242) >> 3;
            }
            uint64_t v247 = (uint64_t)(*(void *)(*(void *)v511 + 16) - (void)v243) >> 3;
            break;
          case 4:
            unsigned int v238 = *((unsigned __int8 *)this + 100);
            if (v238 > 9) {
              goto LABEL_871;
            }
            if (v238 != 4)
            {
LABEL_488:
              turi::flexible_type_fail(0);
              goto LABEL_489;
            }
            BOOL v239 = turi::flexible_type_impl::gt_operator::operator()(v237, (uint64_t)&v483, (uint64_t *)(*((void *)this + 11) + 8), (void *)(*(void *)v511 + 8));
LABEL_463:
            if (v239) {
              goto LABEL_742;
            }
            goto LABEL_489;
          case 5:
          case 8:
          case 9:
            if (*((unsigned __int8 *)this + 100) >= 0xAu) {
              goto LABEL_871;
            }
            goto LABEL_488;
          case 6:
            switch(*((unsigned char *)this + 100))
            {
              case 0:
                if (*((void *)this + 11) > (uint64_t)(*(void *)v511 << 8) >> 8) {
                  goto LABEL_742;
                }
                goto LABEL_489;
              case 1:
                v237.n128_f64[0] = (double)*(int *)&v511[8] / 1000000.0 + (double)((uint64_t)(*(void *)v511 << 8) >> 8);
                if (v237.n128_f64[0] < *((double *)this + 11)) {
                  goto LABEL_742;
                }
                goto LABEL_489;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_488;
              case 6:
                uint64_t v350 = (uint64_t)(*((void *)this + 11) << 8) >> 8;
                if (v350 > (uint64_t)(*(void *)v511 << 8) >> 8
                  || v350 == (uint64_t)(*(void *)v511 << 8) >> 8 && *((_DWORD *)this + 24) > *(int *)&v511[8])
                {
                  goto LABEL_742;
                }
                goto LABEL_489;
              default:
                goto LABEL_871;
            }
          case 7:
            if (*((unsigned __int8 *)this + 100) <= 9u) {
              goto LABEL_488;
            }
            goto LABEL_871;
          default:
            goto LABEL_871;
        }
        do
        {
          if (!v247) {
            goto LABEL_742;
          }
          v237.n128_u64[0] = *v242;
          if (*(double *)v242 > *v243) {
            goto LABEL_742;
          }
          if (*(double *)v242 < *v243) {
            goto LABEL_489;
          }
          --v247;
          ++v242;
          ++v243;
          --v246;
        }
        while (v246);
LABEL_476:
        if (v245 > v244)
        {
LABEL_742:
          BOOL v248 = 1;
          goto LABEL_549;
        }
LABEL_489:
        switch(v511[12])
        {
          case 0:
            BOOL v248 = 0;
            switch(*((unsigned char *)this + 100))
            {
              case 0:
                BOOL v249 = *((void *)this + 11) == *(void *)v511;
                goto LABEL_541;
              case 1:
                v237.n128_u64[0] = *((void *)this + 11);
                uint64_t v290 = *(void *)v511;
                goto LABEL_768;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_549;
              case 6:
                BOOL v249 = *(void *)v511 == (uint64_t)(*((void *)this + 11) << 8) >> 8 && *((_DWORD *)this + 24) == 0;
                goto LABEL_541;
              default:
                goto LABEL_871;
            }
          case 1:
            BOOL v248 = 0;
            switch(*((unsigned char *)this + 100))
            {
              case 0:
                v237.n128_u64[0] = *(void *)v511;
                uint64_t v290 = *((void *)this + 11);
LABEL_768:
                BOOL v249 = v237.n128_f64[0] == (double)v290;
                goto LABEL_541;
              case 1:
                v237.n128_u64[0] = *((void *)this + 11);
                BOOL v248 = v237.n128_f64[0] == *(double *)v511;
                goto LABEL_549;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_549;
              case 6:
                double v353 = *(double *)v511;
                double v354 = (double)*((int *)this + 24) / 1000000.0 + (double)((uint64_t)(*((void *)this + 11) << 8) >> 8);
                goto LABEL_771;
              default:
                goto LABEL_871;
            }
          case 2:
            unsigned int v276 = *((unsigned __int8 *)this + 100);
            if (v276 - 3 < 7 || v276 < 2) {
              goto LABEL_548;
            }
            if (v276 != 2) {
              goto LABEL_871;
            }
            uint64_t v278 = *((void *)this + 11);
            if (*(char *)(v278 + 31) < 0) {
              size_t v279 = *(void *)(v278 + 16);
            }
            else {
              size_t v279 = *(unsigned __int8 *)(v278 + 31);
            }
            if (*(char *)(*(void *)v511 + 31) < 0) {
              uint64_t v364 = *(void *)(*(void *)v511 + 16);
            }
            else {
              uint64_t v364 = *(unsigned __int8 *)(*(void *)v511 + 31);
            }
            if (v279 != v364) {
              goto LABEL_548;
            }
            v365 = (void *)(v278 + 8);
            if ((*(unsigned char *)(v278 + 31) & 0x80) != 0) {
              v365 = (void *)*v365;
            }
            v366 = (void *)(*(void *)v511 + 8);
            if ((*(unsigned char *)(*(void *)v511 + 31) & 0x80) != 0) {
              v366 = (void *)*v366;
            }
            if ((*(unsigned char *)(v278 + 31) & 0x80) != 0)
            {
              BOOL v249 = memcmp(v365, v366, v279) == 0;
LABEL_541:
              BOOL v248 = v249;
            }
            else
            {
              if (!v279) {
                goto LABEL_742;
              }
              size_t v367 = v279 - 1;
              do
              {
                int v369 = *(unsigned __int8 *)v365;
                v365 = (void *)((char *)v365 + 1);
                int v368 = v369;
                int v371 = *(unsigned __int8 *)v366;
                v366 = (void *)((char *)v366 + 1);
                int v370 = v371;
                BOOL v55 = v367-- != 0;
                char v372 = v55;
                BOOL v248 = v368 == v370;
              }
              while (v368 == v370 && (v372 & 1) != 0);
            }
            goto LABEL_549;
          case 3:
            unsigned int v280 = *((unsigned __int8 *)this + 100);
            if (v280 > 9) {
              goto LABEL_871;
            }
            if (v280 != 3) {
              goto LABEL_548;
            }
            double v281 = *(unint64_t **)(*((void *)this + 11) + 8);
            uint64_t v282 = *(void **)(*((void *)this + 11) + 16);
            unint64_t v283 = v282 - v281;
            v284 = *(double **)(*(void *)v511 + 8);
            if (v283 != (uint64_t)(*(void *)(*(void *)v511 + 16) - (void)v284) >> 3) {
              goto LABEL_548;
            }
            if (v282 == v281) {
              goto LABEL_742;
            }
            if (v283 <= 1) {
              uint64_t v285 = 1;
            }
            else {
              uint64_t v285 = v282 - v281;
            }
            v237.n128_u64[0] = *v281;
            if (*(double *)v281 != *v284) {
              goto LABEL_548;
            }
            uint64_t v286 = 1;
            do
            {
              unint64_t v287 = v286;
              if (v285 == v286) {
                break;
              }
              v237.n128_u64[0] = v281[v286];
              double v288 = v284[v286++];
            }
            while (v237.n128_f64[0] == v288);
            BOOL v248 = v287 >= v283;
            goto LABEL_549;
          case 4:
            unsigned int v250 = *((unsigned __int8 *)this + 100);
            if (v250 > 9) {
              goto LABEL_871;
            }
            if (v250 != 4) {
              goto LABEL_548;
            }
            char v251 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v483, (uint64_t *)(*((void *)this + 11) + 8), (void *)(*(void *)v511 + 8));
            goto LABEL_763;
          case 5:
            unsigned int v291 = *((unsigned __int8 *)this + 100);
            if (v291 > 9) {
              goto LABEL_871;
            }
            if (v291 != 5) {
              goto LABEL_548;
            }
            char v251 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v483, (uint64_t **)(*((void *)this + 11) + 8), (uint64_t **)(*(void *)v511 + 8));
            goto LABEL_763;
          case 6:
            BOOL v248 = 0;
            switch(*((unsigned char *)this + 100))
            {
              case 0:
                BOOL v249 = *((void *)this + 11) == (uint64_t)(*(void *)v511 << 8) >> 8 && *(_DWORD *)&v511[8] == 0;
                goto LABEL_541;
              case 1:
                double v354 = *((double *)this + 11);
                double v353 = (double)*(int *)&v511[8] / 1000000.0 + (double)((uint64_t)(*(void *)v511 << 8) >> 8);
LABEL_771:
                v237.n128_f64[0] = vabdd_f64(v354, v353);
                BOOL v248 = v237.n128_f64[0] < 0.0000005;
                goto LABEL_549;
              case 2:
              case 3:
              case 4:
              case 5:
              case 7:
              case 8:
              case 9:
                goto LABEL_549;
              case 6:
                BOOL v249 = ((*(void *)v511 ^ *((void *)this + 11)) & 0xFFFFFFFFFFFFFFLL) == 0
                    && *((_DWORD *)this + 24) == *(_DWORD *)&v511[8];
                goto LABEL_541;
              default:
                goto LABEL_871;
            }
          case 7:
            unsigned int v289 = *((unsigned __int8 *)this + 100);
            if (v289 >= 0xA) {
              goto LABEL_871;
            }
            BOOL v249 = v289 == 7;
            goto LABEL_541;
          case 8:
            BOOL v248 = 0;
            unsigned int v306 = *((unsigned __int8 *)this + 100);
            if (v306 < 8 || v306 == 9) {
              goto LABEL_549;
            }
            if (v306 != 8) {
              goto LABEL_871;
            }
            char v251 = turi::image_type::operator==(*((void *)this + 11) + 8, *(void *)v511 + 8);
LABEL_763:
            BOOL v248 = v251;
            goto LABEL_549;
          case 9:
            unsigned int v252 = *((unsigned __int8 *)this + 100);
            if (v252 < 9) {
              goto LABEL_548;
            }
            if (v252 != 9) {
              goto LABEL_871;
            }
            uint64_t v253 = *(void *)v511;
            uint64_t v254 = (void *)*((void *)this + 11);
            if (*(void **)v511 == v254) {
              goto LABEL_742;
            }
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v254 + 1), *(void *)v511 + 8))
            {
LABEL_548:
              BOOL v248 = 0;
              goto LABEL_549;
            }
            unint64_t v256 = (char *)v254[3];
            atomic_ullong *volatile v255 = (char *)v254[4];
            uint64_t v257 = v255 - v256;
            if (v255 == v256) {
              goto LABEL_742;
            }
            if (!v254[1]) {
              goto LABEL_742;
            }
            uint64_t v258 = 1;
            do
            {
              uint64_t v259 = *(void *)v256;
              v256 += 8;
              v258 *= v259;
            }
            while (v256 != v255);
            if (!v258) {
              goto LABEL_742;
            }
            v480.__r_.__value_.__r.__words[0] = 0;
            std::vector<unsigned long>::vector(&v483, v257 >> 3, &v480);
            break;
          default:
            goto LABEL_871;
        }
        while (1)
        {
          uint64_t v260 = (void *)v483;
          if (*((void *)&v483 + 1) == (void)v483)
          {
            uint64_t v269 = 0;
            v237.n128_u64[0] = *(void *)(*(void *)v254[1] + 8 * v254[9]);
          }
          else
          {
            uint64_t v261 = 0;
            unint64_t v262 = (uint64_t)(*((void *)&v483 + 1) - v483) >> 3;
            uint64_t v263 = (uint64_t *)v254[6];
            if (v262 <= 1) {
              unint64_t v262 = 1;
            }
            double v264 = (uint64_t *)v483;
            unint64_t v265 = v262;
            do
            {
              uint64_t v267 = *v264++;
              uint64_t v266 = v267;
              uint64_t v268 = *v263++;
              v261 += v268 * v266;
              --v265;
            }
            while (v265);
            uint64_t v269 = 0;
            v237.n128_u64[0] = *(void *)(*(void *)v254[1] + 8 * (v254[9] + v261));
            atomic_ullong *volatile v270 = *(uint64_t **)(v253 + 48);
            double v271 = (uint64_t *)v483;
            do
            {
              uint64_t v273 = *v271++;
              uint64_t v272 = v273;
              uint64_t v274 = *v270++;
              v269 += v274 * v272;
              --v262;
            }
            while (v262);
          }
          double v275 = *(double *)(**(void **)(v253 + 8) + 8 * (*(void *)(v253 + 72) + v269));
          BOOL v248 = v237.n128_f64[0] == v275;
          if (v237.n128_f64[0] != v275) {
            break;
          }
          if (!turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v254 + 1), (uint64_t *)&v483))
          {
            uint64_t v260 = (void *)v483;
            break;
          }
        }
        if (v260)
        {
          *((void *)&v483 + 1) = v260;
          operator delete(v260);
        }
LABEL_549:
        switch(v511[12])
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v292 = *(void **)v511;
              if (*(void *)v511)
              {
                if (*(char *)(*(void *)v511 + 31) < 0) {
                  operator delete(*(void **)(*(void *)v511 + 8));
                }
                int v293 = v292;
                uint64_t v294 = 0x1012C404EF22A49;
                goto LABEL_574;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              v297 = *(void **)v511;
              if (*(void *)v511)
              {
                double v298 = *(void **)(*(void *)v511 + 8);
                if (v298)
                {
                  *(void *)(*(void *)v511 + 16) = v298;
                  operator delete(v298);
                }
                int v293 = v297;
                uint64_t v294 = 0x1080C409938AC02;
                goto LABEL_574;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v295 = *(void **)v511;
              if (*(void *)v511)
              {
                *(void *)&long long v483 = *(void *)v511 + 8;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
                goto LABEL_569;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v295 = *(void **)v511;
              if (*(void *)v511)
              {
                *(void *)&long long v483 = *(void *)v511 + 8;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
LABEL_569:
                int v293 = v295;
                uint64_t v294 = 0x1020C405E66F15BLL;
                goto LABEL_574;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              double v299 = *(void **)v511;
              if (*(void *)v511)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v511 + 16));
                int v293 = v299;
                unsigned int v296 = -235920773;
                goto LABEL_573;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v511, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)v511)
            {
              int v293 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v511);
              unsigned int v296 = 2071181815;
LABEL_573:
              uint64_t v294 = v296 | 0x1030C4000000000;
LABEL_574:
              MEMORY[0x22A614FA0](v293, v294, v237);
            }
            break;
          default:
            break;
        }
        if (v248) {
          goto LABEL_709;
        }
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v511);
      v300 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)"Option '", 8);
      int v301 = *((char *)this + 23);
      if (v301 >= 0) {
        v302 = this;
      }
      else {
        v302 = *(turi::option_handling::option_info **)this;
      }
      if (v301 >= 0) {
        uint64_t v303 = *((unsigned __int8 *)this + 23);
      }
      else {
        uint64_t v303 = *((void *)this + 1);
      }
      v304 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v300, (uint64_t)v302, v303);
      uint64_t v305 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v304, (uint64_t)"' must be in the range [", 24);
      switch(*((unsigned char *)this + 84))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_932;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_932:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
          goto LABEL_943;
        case 2:
          uint64_t v419 = *(void *)v159;
          if (*(char *)(*(void *)v159 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v419 + 8), *(void *)(v419 + 16));
          }
          else
          {
            long long v420 = *(_OWORD *)(v419 + 8);
            __str.__r_.__value_.__r.__words[2] = *(void *)(v419 + 24);
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v420;
          }
          goto LABEL_943;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v159 + 8));
          goto LABEL_943;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)v159 + 8));
          goto LABEL_943;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v159 + 8));
          goto LABEL_943;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::option_handling::option_info *)((char *)this + 72), &__str);
          goto LABEL_943;
        case 7:
          memset(&__str, 0, sizeof(__str));
          goto LABEL_943;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_943;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v159 + 8));
LABEL_943:
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v421 = &__str;
          }
          else {
            v421 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v422 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v422 = __str.__r_.__value_.__l.__size_;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v305, (uint64_t)v421, v422);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          v423 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v305, (uint64_t)", ", 2);
          v424 = (turi::option_handling::option_info *)((char *)this + 88);
          switch(*((unsigned char *)this + 100))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_975;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_975:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
              goto LABEL_997;
            case 2:
              uint64_t v429 = *(void *)v424;
              if (*(char *)(*(void *)v424 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v429 + 8), *(void *)(v429 + 16));
              }
              else
              {
                long long v431 = *(_OWORD *)(v429 + 8);
                __str.__r_.__value_.__r.__words[2] = *(void *)(v429 + 24);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v431;
              }
              goto LABEL_997;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v424 + 8));
              goto LABEL_997;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)v424 + 8));
              goto LABEL_997;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v424 + 8));
              goto LABEL_997;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(v424, &__str);
              goto LABEL_997;
            case 7:
              memset(&__str, 0, sizeof(__str));
              goto LABEL_997;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_997;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v424 + 8));
LABEL_997:
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v432 = &__str;
              }
              else {
                v432 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v433 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v433 = __str.__r_.__value_.__l.__size_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v423, (uint64_t)v432, v433);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v423, (uint64_t)"].", 2);
              *(void *)&long long v483 = v511;
              turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_1::operator()();
            default:
              goto LABEL_871;
          }
        default:
          goto LABEL_871;
      }
      goto LABEL_871;
    case 1:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (a2 == (const turi::flexible_type *)a3) {
            goto LABEL_187;
          }
          *(uint64_t *)((char *)a3 + 5) = *(void *)((char *)a2 + 5);
          *a3 = *(void *)a2;
          *((unsigned char *)a3 + 12) = 0;
LABEL_189:
          uint64_t v108 = *a3;
LABEL_599:
          v308 = (char *)this + 72;
          switch(*((unsigned char *)this + 84))
          {
            case 0:
              if (*(void *)v308 < v108) {
                goto LABEL_611;
              }
LABEL_602:
              if (*(void *)v308 == v108) {
                goto LABEL_611;
              }
              goto LABEL_644;
            case 1:
              if (*(double *)v308 < (double)v108) {
                goto LABEL_611;
              }
LABEL_610:
              if (*(double *)v308 == (double)v108)
              {
LABEL_611:
                uint64_t v309 = 0;
                switch(*((unsigned char *)a3 + 12))
                {
                  case 0:
                    uint64_t v309 = *a3;
                    goto LABEL_632;
                  case 1:
                    uint64_t v309 = (uint64_t)*(double *)a3;
                    goto LABEL_632;
                  case 2:
                    uint64_t v311 = *a3;
                    uint64_t v312 = (char **)(*a3 + 8);
                    __str.__r_.__value_.__r.__words[0] = 0;
                    v313 = (char *)v312;
                    if (*(char *)(v311 + 31) < 0) {
                      v313 = *v312;
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v483, v313);
                    uint64_t v309 = std::stoll((const std::string *)&v483, (size_t *)&__str, 10);
                    if (SBYTE7(v484) < 0) {
                      operator delete((void *)v483);
                    }
                    if (*(char *)(v311 + 31) < 0) {
                      uint64_t v314 = *(void *)(v311 + 16);
                    }
                    else {
                      uint64_t v314 = *(unsigned __int8 *)(v311 + 31);
                    }
                    if (__str.__r_.__value_.__r.__words[0] != v314)
                    {
                      v327 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::operator+<char>();
                      v328 = std::string::append((std::string *)v511, " cannot be interpreted as an integer");
                      long long v329 = *(_OWORD *)&v328->__r_.__value_.__l.__data_;
                      *(void *)&long long v484 = *((void *)&v328->__r_.__value_.__l + 2);
                      long long v483 = v329;
                      v328->__r_.__value_.__l.__size_ = 0;
                      v328->__r_.__value_.__r.__words[2] = 0;
                      v328->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(v327, (const std::string *)&v483);
                      __cxa_throw(v327, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                    }
                    goto LABEL_632;
                  case 3:
                    uint64_t v310 = *a3;
                    *(void *)&long long v484 = 0;
                    long long v483 = 0uLL;
                    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v483, *(const void **)(v310 + 8), *(void *)(v310 + 16), (uint64_t)(*(void *)(v310 + 16) - *(void *)(v310 + 8)) >> 3);
                    turi::flexible_type_fail(0);
                    if ((void)v483)
                    {
                      *((void *)&v483 + 1) = v483;
                      operator delete((void *)v483);
                    }
                    goto LABEL_631;
                  case 4:
                    uint64_t v315 = *a3;
                    *(void *)&long long v484 = 0;
                    long long v483 = 0uLL;
                    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v483, *(uint64_t **)(v315 + 8), *(uint64_t **)(v315 + 16), (uint64_t)(*(void *)(v315 + 16) - *(void *)(v315 + 8)) >> 4);
                    turi::flexible_type_fail(0);
                    *(void *)v511 = &v483;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v511);
                    goto LABEL_631;
                  case 5:
                    uint64_t v316 = *a3;
                    *(void *)&long long v484 = 0;
                    long long v483 = 0uLL;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v483, *(uint64_t **)(v316 + 8), *(uint64_t **)(v316 + 16), (uint64_t)(*(void *)(v316 + 16) - *(void *)(v316 + 8)) >> 5);
                    turi::flexible_type_fail(0);
                    *(void *)v511 = &v483;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v511);
                    goto LABEL_631;
                  case 6:
                    uint64_t v309 = *a3 << 8 >> 8;
                    goto LABEL_632;
                  case 7:
                    goto LABEL_632;
                  case 8:
                    uint64_t v317 = *a3;
                    uint64_t v318 = *(void *)(*a3 + 16);
                    *(void *)&long long v483 = *(void *)(*a3 + 8);
                    *((void *)&v483 + 1) = v318;
                    if (v318) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v318 + 8), 1u, memory_order_relaxed);
                    }
                    long long v319 = *(_OWORD *)(v317 + 24);
                    long long v320 = *(_OWORD *)(v317 + 56);
                    long long v485 = *(_OWORD *)(v317 + 40);
                    long long v486 = v320;
                    long long v484 = v319;
                    turi::flexible_type_fail(0);
                    boost::detail::shared_count::~shared_count((atomic_uint **)&v483 + 1);
                    goto LABEL_631;
                  case 9:
                    turi::flexible_type_impl::ndarray<double>::ndarray(&v483, *a3 + 8);
                    turi::flexible_type_fail(0);
                    turi::flexible_type_impl::ndarray<double>::~ndarray(&v483);
LABEL_631:
                    uint64_t v309 = 0;
LABEL_632:
                    switch(*((unsigned char *)this + 100))
                    {
                      case 0:
                        if (*((void *)this + 11) > v309) {
                          goto LABEL_709;
                        }
LABEL_635:
                        if (*((void *)this + 11) != v309) {
                          goto LABEL_644;
                        }
                        goto LABEL_709;
                      case 1:
                        if (*((double *)this + 11) > (double)v309) {
                          goto LABEL_709;
                        }
LABEL_643:
                        if (*((double *)this + 11) != (double)v309) {
                          goto LABEL_644;
                        }
                        goto LABEL_709;
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 7:
                      case 8:
                      case 9:
                        turi::flexible_type_fail(0);
                        goto LABEL_634;
                      case 6:
                        if (v309 < (uint64_t)(*((void *)this + 11) << 8) >> 8) {
                          goto LABEL_709;
                        }
LABEL_634:
                        switch(*((unsigned char *)this + 100))
                        {
                          case 0:
                            goto LABEL_635;
                          case 1:
                            goto LABEL_643;
                          case 2:
                          case 3:
                          case 4:
                          case 5:
                          case 7:
                          case 8:
                          case 9:
                            goto LABEL_644;
                          case 6:
                            if (v309 != (uint64_t)(*((void *)this + 11) << 8) >> 8 || *((_DWORD *)this + 24)) {
                              goto LABEL_644;
                            }
                            goto LABEL_709;
                          default:
                            goto LABEL_871;
                        }
                      default:
                        goto LABEL_871;
                    }
                  default:
                    goto LABEL_871;
                }
              }
              else
              {
LABEL_644:
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v511);
                int64_t v321 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)"Option '", 8);
                int v322 = *((char *)this + 23);
                if (v322 >= 0) {
                  v323 = this;
                }
                else {
                  v323 = *(turi::option_handling::option_info **)this;
                }
                if (v322 >= 0) {
                  uint64_t v324 = *((unsigned __int8 *)this + 23);
                }
                else {
                  uint64_t v324 = *((void *)this + 1);
                }
                uint64_t v325 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v321, (uint64_t)v323, v324);
                uint64_t v326 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v325, (uint64_t)"' must be in the range [", 24);
                switch(*((unsigned char *)this + 84))
                {
                  case 0:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
                    std::ostream::operator<<();
                    std::stringbuf::str();
                    goto LABEL_910;
                  case 1:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
                    std::ostream::operator<<();
                    std::stringbuf::str();
LABEL_910:
                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
                    goto LABEL_921;
                  case 2:
                    uint64_t v413 = *(void *)v308;
                    if (*(char *)(*(void *)v308 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v413 + 8), *(void *)(v413 + 16));
                    }
                    else
                    {
                      long long v414 = *(_OWORD *)(v413 + 8);
                      __str.__r_.__value_.__r.__words[2] = *(void *)(v413 + 24);
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v414;
                    }
                    goto LABEL_921;
                  case 3:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v308 + 8));
                    goto LABEL_921;
                  case 4:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)v308 + 8));
                    goto LABEL_921;
                  case 5:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v308 + 8));
                    goto LABEL_921;
                  case 6:
                    turi::flexible_type_impl::get_string_visitor::operator()((turi::option_handling::option_info *)((char *)this + 72), &__str);
                    goto LABEL_921;
                  case 7:
                    memset(&__str, 0, sizeof(__str));
                    goto LABEL_921;
                  case 8:
                    turi::flexible_type_impl::get_string_visitor::operator()();
                    goto LABEL_921;
                  case 9:
                    turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v308 + 8));
LABEL_921:
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v415 = &__str;
                    }
                    else {
                      v415 = (std::string *)__str.__r_.__value_.__r.__words[0];
                    }
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type v416 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type v416 = __str.__r_.__value_.__l.__size_;
                    }
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v326, (uint64_t)v415, v416);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__str.__r_.__value_.__l.__data_);
                    }
                    v417 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v326, (uint64_t)", ", 2);
                    v418 = (turi::option_handling::option_info *)((char *)this + 88);
                    switch(*((unsigned char *)this + 100))
                    {
                      case 0:
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
                        std::ostream::operator<<();
                        std::stringbuf::str();
                        goto LABEL_954;
                      case 1:
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
                        std::ostream::operator<<();
                        std::stringbuf::str();
LABEL_954:
                        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
                        goto LABEL_965;
                      case 2:
                        uint64_t v425 = *(void *)v418;
                        if (*(char *)(*(void *)v418 + 31) < 0)
                        {
                          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v425 + 8), *(void *)(v425 + 16));
                        }
                        else
                        {
                          long long v426 = *(_OWORD *)(v425 + 8);
                          __str.__r_.__value_.__r.__words[2] = *(void *)(v425 + 24);
                          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v426;
                        }
                        goto LABEL_965;
                      case 3:
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v418 + 8));
                        goto LABEL_965;
                      case 4:
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)v418 + 8));
                        goto LABEL_965;
                      case 5:
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v418 + 8));
                        goto LABEL_965;
                      case 6:
                        turi::flexible_type_impl::get_string_visitor::operator()(v418, &__str);
                        goto LABEL_965;
                      case 7:
                        memset(&__str, 0, sizeof(__str));
                        goto LABEL_965;
                      case 8:
                        turi::flexible_type_impl::get_string_visitor::operator()();
                        goto LABEL_965;
                      case 9:
                        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v418 + 8));
LABEL_965:
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          v427 = &__str;
                        }
                        else {
                          v427 = (std::string *)__str.__r_.__value_.__r.__words[0];
                        }
                        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          std::string::size_type v428 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                        }
                        else {
                          std::string::size_type v428 = __str.__r_.__value_.__l.__size_;
                        }
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v417, (uint64_t)v427, v428);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v417, (uint64_t)"].", 2);
                        *(void *)&long long v483 = v511;
                        turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_3::operator()();
                      default:
                        goto LABEL_871;
                    }
                  default:
                    goto LABEL_871;
                }
              }
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              turi::flexible_type_fail(0);
              goto LABEL_601;
            case 6:
              if (v108 > (uint64_t)(*(void *)v308 << 8) >> 8) {
                goto LABEL_611;
              }
LABEL_601:
              switch(*((unsigned char *)this + 84))
              {
                case 0:
                  goto LABEL_602;
                case 1:
                  goto LABEL_610;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_644;
                case 6:
                  if (v108 != (uint64_t)(*((void *)this + 9) << 8) >> 8 || *((_DWORD *)this + 20)) {
                    goto LABEL_644;
                  }
                  goto LABEL_611;
                default:
                  goto LABEL_871;
              }
            default:
              goto LABEL_871;
          }
        case 1:
          double v114 = *(double *)a2;
          *((_DWORD *)a3 + 2) = 0;
          *((unsigned char *)a3 + 12) = 0;
          *a3 = (uint64_t)v114;
          if (v114 == (double)(uint64_t)v114) {
            goto LABEL_187;
          }
          goto LABEL_1022;
        case 2:
          uint64_t v102 = *(void *)a2;
          std::string __p = 0;
          std::string::size_type v105 = *(void *)(v102 + 8);
          std::string::size_type v103 = v102 + 8;
          std::string::size_type v104 = v105;
          uint64_t v106 = *(unsigned __int8 *)(v103 + 23);
          if ((v106 & 0x80u) == 0) {
            std::string::size_type v104 = v103;
          }
          uint64_t v107 = *(void *)(v103 + 8);
          if ((v106 & 0x80u) == 0) {
            uint64_t v107 = v106;
          }
          v480.__r_.__value_.__r.__words[0] = v104;
          v480.__r_.__value_.__l.__size_ = v104 + v107;
          if ((boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_signed<long long>((unsigned __int8 **)&v480, (uint64_t *)&__p) & 1) == 0)
          {
            std::bad_cast::bad_cast((std::bad_cast *)&v483);
            *(void *)&long long v483 = &unk_26D7572F8;
            *(void *)&long long v484 = MEMORY[0x263F8C290];
            boost::throw_exception<boost::bad_lexical_cast>((uint64_t)&v483);
          }
          uint64_t v108 = (uint64_t)__p;
          switch(*((unsigned char *)a3 + 12))
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v109 = *a3;
                if (!*a3) {
                  goto LABEL_597;
                }
                if (*(char *)(v109 + 31) < 0) {
                  operator delete(*(void **)(v109 + 8));
                }
                double v110 = (void *)v109;
                uint64_t v111 = 0x1012C404EF22A49;
                goto LABEL_596;
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                unsigned int v141 = (void *)*a3;
                if (!*a3) {
                  goto LABEL_597;
                }
                uint64_t v142 = (void *)v141[1];
                if (v142)
                {
                  v141[2] = v142;
                  operator delete(v142);
                }
                double v110 = v141;
                uint64_t v111 = 0x1080C409938AC02;
                goto LABEL_596;
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v136 = (void *)*a3;
                if (!*a3) {
                  goto LABEL_597;
                }
                *(void *)&long long v483 = v136 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
                goto LABEL_270;
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v136 = (void *)*a3;
                if (!*a3) {
                  goto LABEL_597;
                }
                *(void *)&long long v483 = v136 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
LABEL_270:
                double v110 = v136;
                uint64_t v111 = 0x1020C405E66F15BLL;
                goto LABEL_596;
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                uint64_t v307 = *a3;
                if (!*a3) {
                  goto LABEL_597;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)(v307 + 16));
                double v110 = (void *)v307;
                unsigned int v138 = -235920773;
                goto LABEL_595;
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                if (*a3)
                {
                  double v110 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)*a3);
                  unsigned int v138 = 2071181815;
LABEL_595:
                  uint64_t v111 = v138 | 0x1030C4000000000;
LABEL_596:
                  MEMORY[0x22A614FA0](v110, v111);
                }
LABEL_597:
                *a3 = 0;
              }
              break;
            default:
              break;
          }
          *((_DWORD *)a3 + 2) = 0;
          *((unsigned char *)a3 + 12) = 0;
          *a3 = v108;
          goto LABEL_599;
        case 7:
          if ((uint64_t *)((char *)this + 48) == a3) {
            goto LABEL_187;
          }
          *(uint64_t *)((char *)a3 + 5) = *(void *)((char *)this + 53);
          *a3 = *((void *)this + 6);
          unsigned int v113 = *((unsigned __int8 *)this + 60);
          *((unsigned char *)a3 + 12) = v113;
          if (v113 <= 9 && ((1 << v113) & 0x33C) != 0)
          {
            atomic_fetch_add((atomic_ullong *volatile)*a3, 1uLL);
LABEL_187:
            unsigned int v113 = *((unsigned __int8 *)a3 + 12);
          }
          uint64_t v108 = 0;
          switch(v113)
          {
            case 0u:
              goto LABEL_189;
            case 1u:
              uint64_t v108 = (uint64_t)*(double *)a3;
              goto LABEL_599;
            case 2u:
              uint64_t v116 = *a3;
              char v117 = (char **)(*a3 + 8);
              size_t __idx = 0;
              uint64_t v118 = (char *)v117;
              if (*(char *)(v116 + 31) < 0) {
                uint64_t v118 = *v117;
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, v118);
              uint64_t v108 = std::stoll(&__str, &__idx, 10);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if (*(char *)(v116 + 31) < 0) {
                uint64_t v119 = *(void *)(v116 + 16);
              }
              else {
                uint64_t v119 = *(unsigned __int8 *)(v116 + 31);
              }
              if (__idx != v119)
              {
                v344 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                uint64_t v345 = std::string::append(&v480, " cannot be interpreted as an integer");
                long long v346 = *(_OWORD *)&v345->__r_.__value_.__l.__data_;
                __str.__r_.__value_.__r.__words[2] = v345->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v346;
                v345->__r_.__value_.__l.__size_ = 0;
                v345->__r_.__value_.__r.__words[2] = 0;
                v345->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(v344, &__str);
                __cxa_throw(v344, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              goto LABEL_599;
            case 3u:
              uint64_t v115 = *a3;
              v478 = 0;
              uint64_t v479 = 0;
              std::string __p = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v115 + 8), *(void *)(v115 + 16), (uint64_t)(*(void *)(v115 + 16) - *(void *)(v115 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (__p)
              {
                v478 = __p;
                operator delete(__p);
              }
              goto LABEL_210;
            case 4u:
              uint64_t v120 = *a3;
              memset(v476, 0, sizeof(v476));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v476, *(uint64_t **)(v120 + 8), *(uint64_t **)(v120 + 16), (uint64_t)(*(void *)(v120 + 16) - *(void *)(v120 + 8)) >> 4);
              turi::flexible_type_fail(0);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v476;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_210;
            case 5u:
              uint64_t v121 = *a3;
              memset(v475, 0, sizeof(v475));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v475, *(uint64_t **)(v121 + 8), *(uint64_t **)(v121 + 16), (uint64_t)(*(void *)(v121 + 16) - *(void *)(v121 + 8)) >> 5);
              turi::flexible_type_fail(0);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v475;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
              goto LABEL_210;
            case 6u:
              uint64_t v108 = *a3 << 8 >> 8;
              goto LABEL_599;
            case 7u:
              goto LABEL_599;
            case 8u:
              uint64_t v122 = *a3;
              uint64_t v123 = *(void *)(*a3 + 16);
              *(void *)v511 = *(void *)(*a3 + 8);
              *(void *)&v511[8] = v123;
              if (v123) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v123 + 8), 1u, memory_order_relaxed);
              }
              long long v124 = *(_OWORD *)(v122 + 24);
              long long v125 = *(_OWORD *)(v122 + 56);
              long long v512 = *(_OWORD *)(v122 + 40);
              long long v513 = v125;
              *(_OWORD *)&v511[16] = v124;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count((atomic_uint **)&v511[8]);
              goto LABEL_210;
            case 9u:
              turi::flexible_type_impl::ndarray<double>::ndarray(&v483, *a3 + 8);
              turi::flexible_type_fail(0);
              turi::flexible_type_impl::ndarray<double>::~ndarray(&v483);
LABEL_210:
              uint64_t v108 = 0;
              goto LABEL_599;
            default:
              goto LABEL_871;
          }
        default:
LABEL_1022:
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v511);
          v440 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)"Expected integer value for option '", 35);
          int v441 = *((char *)this + 23);
          if (v441 >= 0) {
            v442 = this;
          }
          else {
            v442 = *(turi::option_handling::option_info **)this;
          }
          if (v441 >= 0) {
            uint64_t v443 = *((unsigned __int8 *)this + 23);
          }
          else {
            uint64_t v443 = *((void *)this + 1);
          }
          v444 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v440, (uint64_t)v442, v443);
          v445 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v444, (uint64_t)"'. Cannot cast ", 15);
          if ((v474 & 0x80u) == 0) {
            v446 = &v472;
          }
          else {
            v446 = v472;
          }
          if ((v474 & 0x80u) == 0) {
            uint64_t v447 = v474;
          }
          else {
            uint64_t v447 = v473;
          }
          v448 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v445, (uint64_t)v446, v447);
          switch(*((unsigned char *)a2 + 12))
          {
            case 0:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
              std::ostream::operator<<();
              std::stringbuf::str();
              goto LABEL_1037;
            case 1:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
              std::ostream::operator<<();
              std::stringbuf::str();
LABEL_1037:
              std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
              goto LABEL_1048;
            case 2:
              uint64_t v449 = *(void *)a2;
              if (*(char *)(*(void *)a2 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v449 + 8), *(void *)(v449 + 16));
              }
              else
              {
                long long v450 = *(_OWORD *)(v449 + 8);
                __str.__r_.__value_.__r.__words[2] = *(void *)(v449 + 24);
                *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v450;
              }
              goto LABEL_1048;
            case 3:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
              goto LABEL_1048;
            case 4:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)a2 + 8));
              goto LABEL_1048;
            case 5:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
              goto LABEL_1048;
            case 6:
              turi::flexible_type_impl::get_string_visitor::operator()(a2, &__str);
              goto LABEL_1048;
            case 7:
              memset(&__str, 0, sizeof(__str));
              goto LABEL_1048;
            case 8:
              turi::flexible_type_impl::get_string_visitor::operator()();
              goto LABEL_1048;
            case 9:
              turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
LABEL_1048:
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v451 = &__str;
              }
              else {
                v451 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v452 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v452 = __str.__r_.__value_.__l.__size_;
              }
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v448, (uint64_t)v451, v452);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              if ((v474 & 0x80u) == 0) {
                v453 = &v472;
              }
              else {
                v453 = v472;
              }
              if ((v474 & 0x80u) == 0) {
                uint64_t v454 = v474;
              }
              else {
                uint64_t v454 = v473;
              }
              v455 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v448, (uint64_t)v453, v454);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v455, (uint64_t)" to an integer value.", 21);
              *(void *)&long long v483 = v511;
              turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_2::operator()();
            default:
              goto LABEL_871;
          }
      }
      goto LABEL_871;
    case 2:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == 1)
          {
            *((_DWORD *)a3 + 2) = 0;
            *((unsigned char *)a3 + 12) = 0;
            goto LABEL_193;
          }
          if (!*(void *)a2) {
            goto LABEL_154;
          }
          goto LABEL_851;
        case 1:
          if (*(double *)a2 == 0.0)
          {
LABEL_154:
            *(uint64_t *)((char *)a3 + 5) = 0;
            *a3 = 0;
            goto LABEL_709;
          }
          if (*(double *)a2 != 1.0)
          {
LABEL_851:
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v511);
            v387 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)"Expected BOOLean value for option '", 35);
            int v388 = *((char *)this + 23);
            if (v388 >= 0) {
              v389 = this;
            }
            else {
              v389 = *(turi::option_handling::option_info **)this;
            }
            if (v388 >= 0) {
              uint64_t v390 = *((unsigned __int8 *)this + 23);
            }
            else {
              uint64_t v390 = *((void *)this + 1);
            }
            v391 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v387, (uint64_t)v389, v390);
            if ((v474 & 0x80u) == 0) {
              v392 = &v472;
            }
            else {
              v392 = v472;
            }
            if ((v474 & 0x80u) == 0) {
              uint64_t v393 = v474;
            }
            else {
              uint64_t v393 = v473;
            }
            v394 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v391, (uint64_t)v392, v393);
            v395 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v394, (uint64_t)"'. Cannot interpret ", 20);
            if ((v474 & 0x80u) == 0) {
              v396 = &v472;
            }
            else {
              v396 = v472;
            }
            if ((v474 & 0x80u) == 0) {
              uint64_t v397 = v474;
            }
            else {
              uint64_t v397 = v473;
            }
            v398 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v395, (uint64_t)v396, v397);
            switch(*((unsigned char *)a2 + 12))
            {
              case 0:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_986;
              case 1:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_986:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
                goto LABEL_1007;
              case 2:
                uint64_t v430 = *(void *)a2;
                if (*(char *)(*(void *)a2 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v430 + 8), *(void *)(v430 + 16));
                }
                else
                {
                  long long v434 = *(_OWORD *)(v430 + 8);
                  __str.__r_.__value_.__r.__words[2] = *(void *)(v430 + 24);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v434;
                }
                goto LABEL_1007;
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
                goto LABEL_1007;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)a2 + 8));
                goto LABEL_1007;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
                goto LABEL_1007;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()(a2, &__str);
                goto LABEL_1007;
              case 7:
                memset(&__str, 0, sizeof(__str));
                goto LABEL_1007;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_1007;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)a2 + 8));
LABEL_1007:
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v435 = &__str;
                }
                else {
                  v435 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v436 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v436 = __str.__r_.__value_.__l.__size_;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v398, (uint64_t)v435, v436);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if ((v474 & 0x80u) == 0) {
                  v437 = &v472;
                }
                else {
                  v437 = v472;
                }
                if ((v474 & 0x80u) == 0) {
                  uint64_t v438 = v474;
                }
                else {
                  uint64_t v438 = v473;
                }
                v439 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v398, (uint64_t)v437, v438);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v439, (uint64_t)" as True or False.", 18);
                *(void *)&long long v483 = v511;
                turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_4::operator()();
              default:
                goto LABEL_871;
            }
            goto LABEL_871;
          }
          *((_DWORD *)a3 + 2) = 0;
          *((unsigned char *)a3 + 12) = 0;
LABEL_193:
          *a3 = 1;
          break;
        case 2:
          {
            std::string::basic_string[abi:ne180100]<0>(&v483, "1");
            BYTE8(v484) = 1;
            std::string::basic_string[abi:ne180100]<0>(&v485, "True");
            BYTE8(v486) = 1;
            std::string::basic_string[abi:ne180100]<0>(v487, "T");
            char v488 = 1;
            std::string::basic_string[abi:ne180100]<0>(v489, "true");
            char v490 = 1;
            std::string::basic_string[abi:ne180100]<0>(v491, "Y");
            char v492 = 1;
            std::string::basic_string[abi:ne180100]<0>(v493, "y");
            char v494 = 1;
            std::string::basic_string[abi:ne180100]<0>(v495, "yes");
            char v496 = 1;
            std::string::basic_string[abi:ne180100]<0>(v497, "0");
            char v498 = 0;
            std::string::basic_string[abi:ne180100]<0>(v499, "False");
            char v500 = 0;
            std::string::basic_string[abi:ne180100]<0>(v501, "F");
            char v502 = 0;
            std::string::basic_string[abi:ne180100]<0>(v503, "false");
            char v504 = 0;
            std::string::basic_string[abi:ne180100]<0>(v505, "N");
            char v506 = 0;
            std::string::basic_string[abi:ne180100]<0>(v507, "n");
            char v508 = 0;
            std::string::basic_string[abi:ne180100]<0>(v509, "no");
            char v510 = 0;
            std::map<std::string,BOOL>::map[abi:ne180100]((uint64_t)&turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::okay_values, (const void **)&v483, 14);
            uint64_t v399 = 56;
            do
            {
              if (*((char *)&__idx + v399 * 8 + 7) < 0) {
                operator delete((void *)__str.__r_.__value_.__r.__words[v399 + 2]);
              }
              v399 -= 4;
            }
            while (v399 * 8);
            __cxa_atexit((void (*)(void *))std::map<std::string,BOOL>::~map[abi:ne180100], &turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::okay_values, &dword_223D44000);
          }
          uint64_t v88 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)&turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::okay_values, (const void **)(*(void *)a2 + 8));
          if ((_UNKNOWN *)v88 != &unk_268087798)
          {
            switch(*((unsigned char *)a3 + 12))
            {
              case 2:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v89 = *a3;
                  if (!*a3) {
                    goto LABEL_677;
                  }
                  if (*(char *)(v89 + 31) < 0) {
                    operator delete(*(void **)(v89 + 8));
                  }
                  uint64_t v90 = (void *)v89;
                  uint64_t v91 = 0x1012C404EF22A49;
                  goto LABEL_676;
                }
                break;
              case 3:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v332 = (void *)*a3;
                  if (!*a3) {
                    goto LABEL_677;
                  }
                  double v333 = (void *)v332[1];
                  if (v333)
                  {
                    v332[2] = v333;
                    operator delete(v333);
                  }
                  uint64_t v90 = v332;
                  uint64_t v91 = 0x1080C409938AC02;
                  goto LABEL_676;
                }
                break;
              case 4:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v330 = (void *)*a3;
                  if (!*a3) {
                    goto LABEL_677;
                  }
                  *(void *)&long long v483 = v330 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
                  goto LABEL_671;
                }
                break;
              case 5:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v330 = (void *)*a3;
                  if (!*a3) {
                    goto LABEL_677;
                  }
                  *(void *)&long long v483 = v330 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
LABEL_671:
                  uint64_t v90 = v330;
                  uint64_t v91 = 0x1020C405E66F15BLL;
                  goto LABEL_676;
                }
                break;
              case 8:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v334 = *a3;
                  if (!*a3) {
                    goto LABEL_677;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v334 + 16));
                  uint64_t v90 = (void *)v334;
                  unsigned int v331 = -235920773;
                  goto LABEL_675;
                }
                break;
              case 9:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  if (*a3)
                  {
                    uint64_t v90 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)*a3);
                    unsigned int v331 = 2071181815;
LABEL_675:
                    uint64_t v91 = v331 | 0x1030C4000000000;
LABEL_676:
                    MEMORY[0x22A614FA0](v90, v91);
                  }
LABEL_677:
                  *a3 = 0;
                }
                break;
              default:
                break;
            }
            *a3 = 0;
            *((_DWORD *)a3 + 2) = 0;
            *((unsigned char *)a3 + 12) = 0;
            *a3 = *(unsigned __int8 *)(v88 + 56);
          }
          goto LABEL_679;
        case 7:
LABEL_679:
          if ((uint64_t *)((char *)this + 48) != a3)
          {
            switch(*((unsigned char *)a3 + 12))
            {
              case 2:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v335 = *a3;
                  if (!*a3) {
                    goto LABEL_706;
                  }
                  if (*(char *)(v335 + 31) < 0) {
                    operator delete(*(void **)(v335 + 8));
                  }
                  unint64_t v336 = (void *)v335;
                  uint64_t v337 = 0x1012C404EF22A49;
                  goto LABEL_705;
                }
                break;
              case 3:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v340 = (void *)*a3;
                  if (!*a3) {
                    goto LABEL_706;
                  }
                  v341 = (void *)v340[1];
                  if (v341)
                  {
                    v340[2] = v341;
                    operator delete(v341);
                  }
                  unint64_t v336 = v340;
                  uint64_t v337 = 0x1080C409938AC02;
                  goto LABEL_705;
                }
                break;
              case 4:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  int64x2_t v338 = (void *)*a3;
                  if (!*a3) {
                    goto LABEL_706;
                  }
                  *(void *)&long long v483 = v338 + 1;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
                  goto LABEL_700;
                }
                break;
              case 5:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  int64x2_t v338 = (void *)*a3;
                  if (!*a3) {
                    goto LABEL_706;
                  }
                  *(void *)&long long v483 = v338 + 1;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
LABEL_700:
                  unint64_t v336 = v338;
                  uint64_t v337 = 0x1020C405E66F15BLL;
                  goto LABEL_705;
                }
                break;
              case 8:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  uint64_t v342 = *a3;
                  if (!*a3) {
                    goto LABEL_706;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)(v342 + 16));
                  unint64_t v336 = (void *)v342;
                  unsigned int v339 = -235920773;
                  goto LABEL_704;
                }
                break;
              case 9:
                if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  if (*a3)
                  {
                    unint64_t v336 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)*a3);
                    unsigned int v339 = 2071181815;
LABEL_704:
                    uint64_t v337 = v339 | 0x1030C4000000000;
LABEL_705:
                    MEMORY[0x22A614FA0](v336, v337);
                  }
LABEL_706:
                  *a3 = 0;
                }
                break;
              default:
                break;
            }
            *(uint64_t *)((char *)a3 + 5) = *(void *)((char *)this + 53);
            *a3 = *((void *)this + 6);
            int v343 = *((unsigned __int8 *)this + 60);
            *((unsigned char *)a3 + 12) = v343;
            switch(v343)
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
                goto LABEL_708;
              default:
                goto LABEL_709;
            }
          }
          goto LABEL_709;
        default:
          goto LABEL_851;
      }
      goto LABEL_709;
    case 3:
      uint64_t v9 = *((void *)this + 13);
      uint64_t v10 = *((void *)this + 14);
      if (v9 == v10) {
        goto LABEL_125;
      }
      break;
    case 4:
      if (a2 != (const turi::flexible_type *)a3)
      {
        *(uint64_t *)((char *)a3 + 5) = *(void *)((char *)a2 + 5);
        *a3 = *(void *)a2;
        int v8 = *((unsigned __int8 *)a2 + 12);
        *((unsigned char *)a3 + 12) = v8;
        switch(v8)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_708;
          default:
            goto LABEL_709;
        }
      }
      goto LABEL_709;
    case 5:
      if (a2 != (const turi::flexible_type *)a3)
      {
        *(uint64_t *)((char *)a3 + 5) = *(void *)((char *)a2 + 5);
        *a3 = *(void *)a2;
        int v87 = *((unsigned __int8 *)a2 + 12);
        *((unsigned char *)a3 + 12) = v87;
        switch(v87)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
LABEL_708:
            atomic_fetch_add((atomic_ullong *volatile)*a3, 1uLL);
            break;
          default:
            goto LABEL_709;
        }
      }
      goto LABEL_709;
    default:
      turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_6::operator()();
  }
  while (2)
  {
    switch(*(unsigned char *)(v9 + 12))
    {
      case 0:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            if (*(void *)a2 == *(void *)v9) {
              goto LABEL_212;
            }
            goto LABEL_124;
          case 1:
            double v64 = *(double *)a2;
            uint64_t v65 = *(void *)v9;
            goto LABEL_97;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_124;
          case 6:
            if (*(void *)v9 == (uint64_t)(*(void *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2)) {
              goto LABEL_212;
            }
            goto LABEL_124;
          default:
            goto LABEL_871;
        }
      case 1:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            double v64 = *(double *)v9;
            uint64_t v65 = *(void *)a2;
LABEL_97:
            double v70 = (double)v65;
            goto LABEL_99;
          case 1:
            double v64 = *(double *)a2;
            double v70 = *(double *)v9;
LABEL_99:
            if (v64 == v70) {
              goto LABEL_212;
            }
            goto LABEL_124;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_124;
          case 6:
            double v69 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8), *(double *)v9);
            goto LABEL_102;
          default:
            goto LABEL_871;
        }
      case 2:
        unsigned int v54 = *((unsigned __int8 *)a2 + 12);
        BOOL v55 = v54 - 3 >= 7 && v54 >= 2;
        if (!v55) {
          goto LABEL_124;
        }
        if (v54 != 2) {
          goto LABEL_871;
        }
        uint64_t v56 = *(void *)a2;
        if (*(char *)(*(void *)a2 + 31) < 0) {
          size_t v57 = *(void *)(v56 + 16);
        }
        else {
          size_t v57 = *(unsigned __int8 *)(*(void *)a2 + 31);
        }
        double v71 = *(double *)v9;
        if (*(char *)(*(void *)v9 + 31) < 0) {
          uint64_t v72 = *(void *)(*(void *)&v71 + 16);
        }
        else {
          uint64_t v72 = *(unsigned __int8 *)(*(void *)v9 + 31);
        }
        if (v57 != v72) {
          goto LABEL_124;
        }
        unsigned __int8 v73 = (unsigned __int8 *)(v56 + 8);
        if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
          unsigned __int8 v73 = *(unsigned __int8 **)v73;
        }
        uint64_t v74 = (unsigned __int8 *)(*(void *)&v71 + 8);
        if ((*(unsigned char *)(*(void *)v9 + 31) & 0x80) != 0) {
          uint64_t v74 = *(unsigned __int8 **)v74;
        }
        if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0)
        {
          if (!memcmp(v73, v74, v57))
          {
LABEL_212:
            if (a2 != (const turi::flexible_type *)a3)
            {
              switch(*((unsigned char *)a3 + 12))
              {
                case 2:
                  if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    uint64_t v126 = *a3;
                    if (!*a3) {
                      goto LABEL_239;
                    }
                    if (*(char *)(v126 + 31) < 0) {
                      operator delete(*(void **)(v126 + 8));
                    }
                    long long v127 = (void *)v126;
                    uint64_t v128 = 0x1012C404EF22A49;
                    goto LABEL_238;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    uint64_t v131 = (void *)*a3;
                    if (!*a3) {
                      goto LABEL_239;
                    }
                    unint64_t v132 = (void *)v131[1];
                    if (v132)
                    {
                      v131[2] = v132;
                      operator delete(v132);
                    }
                    long long v127 = v131;
                    uint64_t v128 = 0x1080C409938AC02;
                    goto LABEL_238;
                  }
                  break;
                case 4:
                  if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    char v129 = (void *)*a3;
                    if (!*a3) {
                      goto LABEL_239;
                    }
                    *(void *)&long long v483 = v129 + 1;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
                    goto LABEL_233;
                  }
                  break;
                case 5:
                  if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    char v129 = (void *)*a3;
                    if (!*a3) {
                      goto LABEL_239;
                    }
                    *(void *)&long long v483 = v129 + 1;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v483);
LABEL_233:
                    long long v127 = v129;
                    uint64_t v128 = 0x1020C405E66F15BLL;
                    goto LABEL_238;
                  }
                  break;
                case 8:
                  if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    uint64_t v133 = *a3;
                    if (!*a3) {
                      goto LABEL_239;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)(v133 + 16));
                    long long v127 = (void *)v133;
                    unsigned int v130 = -235920773;
                    goto LABEL_237;
                  }
                  break;
                case 9:
                  if (atomic_fetch_add((atomic_ullong *volatile)*a3, 0xFFFFFFFFFFFFFFFFLL) == 1)
                  {
                    if (*a3)
                    {
                      long long v127 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)*a3);
                      unsigned int v130 = 2071181815;
LABEL_237:
                      uint64_t v128 = v130 | 0x1030C4000000000;
LABEL_238:
                      MEMORY[0x22A614FA0](v127, v128);
                    }
LABEL_239:
                    *a3 = 0;
                  }
                  break;
                default:
                  break;
              }
              *(uint64_t *)((char *)a3 + 5) = *(void *)((char *)a2 + 5);
              *a3 = *(void *)a2;
              int v134 = *((unsigned __int8 *)a2 + 12);
              *((unsigned char *)a3 + 12) = v134;
              switch(v134)
              {
                case 2:
                case 3:
                case 4:
                case 5:
                case 8:
                case 9:
                  goto LABEL_708;
                default:
                  break;
              }
            }
LABEL_709:
            if ((char)v474 < 0) {
              operator delete(v472);
            }
            return;
          }
        }
        else
        {
          if (!v57) {
            goto LABEL_212;
          }
          while (*v73 == *v74)
          {
            ++v73;
            ++v74;
            if (!--v57) {
              goto LABEL_212;
            }
          }
        }
LABEL_124:
        v9 += 16;
        if (v9 != v10) {
          continue;
        }
LABEL_125:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v511);
        std::string v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)"Option '", 8);
        int v76 = *((char *)this + 23);
        if (v76 >= 0) {
          uint64_t v77 = this;
        }
        else {
          uint64_t v77 = *(turi::option_handling::option_info **)this;
        }
        if (v76 >= 0) {
          uint64_t v78 = *((unsigned __int8 *)this + 23);
        }
        else {
          uint64_t v78 = *((void *)this + 1);
        }
        char v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v77, v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"' must be one of (", 18);
        if (*((void *)this + 14) - *((void *)this + 13) != 16)
        {
          uint64_t v373 = 0;
          unint64_t v374 = 0;
          while (2)
          {
            if ((v474 & 0x80u) == 0) {
              v375 = &v472;
            }
            else {
              v375 = v472;
            }
            if ((v474 & 0x80u) == 0) {
              uint64_t v376 = v474;
            }
            else {
              uint64_t v376 = v473;
            }
            v377 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)v375, v376);
            v378 = (turi::flexible_type_impl *)(*((void *)this + 13) + v373);
            v379 = v377;
            switch(*((unsigned char *)v378 + 12))
            {
              case 0:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_827;
              case 1:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_827:
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
                goto LABEL_832;
              case 2:
                uint64_t v380 = *(void *)v378;
                if (*(char *)(*(void *)v378 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v380 + 8), *(void *)(v380 + 16));
                }
                else
                {
                  long long v381 = *(_OWORD *)(v380 + 8);
                  __str.__r_.__value_.__r.__words[2] = *(void *)(v380 + 24);
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v381;
                }
                goto LABEL_832;
              case 3:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v378 + 8));
                goto LABEL_832;
              case 4:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)v378 + 8));
                goto LABEL_832;
              case 5:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v378 + 8));
                goto LABEL_832;
              case 6:
                turi::flexible_type_impl::get_string_visitor::operator()(v378, &__str);
                goto LABEL_832;
              case 7:
                memset(&__str, 0, sizeof(__str));
                goto LABEL_832;
              case 8:
                turi::flexible_type_impl::get_string_visitor::operator()();
                goto LABEL_832;
              case 9:
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v378 + 8));
LABEL_832:
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v382 = &__str;
                }
                else {
                  v382 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v383 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v383 = __str.__r_.__value_.__l.__size_;
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v379, (uint64_t)v382, v383);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                if ((v474 & 0x80u) == 0) {
                  v384 = &v472;
                }
                else {
                  v384 = v472;
                }
                if ((v474 & 0x80u) == 0) {
                  uint64_t v385 = v474;
                }
                else {
                  uint64_t v385 = v473;
                }
                v386 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v379, (uint64_t)v384, v385);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v386, (uint64_t)", ", 2);
                ++v374;
                v373 += 16;
                if (v374 >= ((uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 4) - 1) {
                  break;
                }
                continue;
              default:
                goto LABEL_871;
            }
            break;
          }
        }
        char v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v511, (uint64_t)"or ", 3);
        if ((v474 & 0x80u) == 0) {
          uint64_t v81 = &v472;
        }
        else {
          uint64_t v81 = v472;
        }
        if ((v474 & 0x80u) == 0) {
          uint64_t v82 = v474;
        }
        else {
          uint64_t v82 = v473;
        }
        char v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)v81, v82);
        uint64_t v84 = *((void *)this + 14);
        std::locale v85 = v83;
        int64_t v86 = (turi::flexible_type_impl *)(v84 - 16);
        switch(*(unsigned char *)(v84 - 4))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_883;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v483);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_883:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v483);
            goto LABEL_894;
          case 2:
            uint64_t v406 = *(void *)v86;
            if (*(char *)(*(void *)v86 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v406 + 8), *(void *)(v406 + 16));
            }
            else
            {
              long long v407 = *(_OWORD *)(v406 + 8);
              __str.__r_.__value_.__r.__words[2] = *(void *)(v406 + 24);
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v407;
            }
            goto LABEL_894;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v86 + 8));
            goto LABEL_894;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (uint64_t *)(*(void *)v86 + 8));
            goto LABEL_894;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v86 + 8));
            goto LABEL_894;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v86, &__str);
            goto LABEL_894;
          case 7:
            memset(&__str, 0, sizeof(__str));
            goto LABEL_894;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            goto LABEL_894;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v483, (void *)(*(void *)v86 + 8));
LABEL_894:
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v408 = &__str;
            }
            else {
              v408 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v409 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v409 = __str.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v408, v409);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if ((v474 & 0x80u) == 0) {
              v410 = &v472;
            }
            else {
              v410 = v472;
            }
            if ((v474 & 0x80u) == 0) {
              uint64_t v411 = v474;
            }
            else {
              uint64_t v411 = v473;
            }
            v412 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)v410, v411);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v412, (uint64_t)").", 2);
            *(void *)&long long v483 = v511;
            turi::option_handling::option_info::interpret_value(turi::flexible_type const&)const::$_5::operator()();
          default:
            break;
        }
LABEL_871:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
      case 3:
        unsigned int v58 = *((unsigned __int8 *)a2 + 12);
        if (v58 > 9) {
          goto LABEL_871;
        }
        if (v58 != 3) {
          goto LABEL_124;
        }
        uint64_t v59 = *(double **)(*(void *)a2 + 8);
        uint64_t v60 = *(double **)(*(void *)a2 + 16);
        unint64_t v61 = v60 - v59;
        uint64_t v62 = *(double **)(*(void *)v9 + 8);
        if (v61 != (uint64_t)(*(void *)(*(void *)v9 + 16) - (void)v62) >> 3) {
          goto LABEL_124;
        }
        if (v60 == v59) {
          goto LABEL_212;
        }
        if (v61 <= 1) {
          unint64_t v61 = 1;
        }
        while (*v59 == *v62)
        {
          ++v62;
          ++v59;
          if (!--v61) {
            goto LABEL_212;
          }
        }
        goto LABEL_124;
      case 4:
        unsigned int v11 = *((unsigned __int8 *)a2 + 12);
        if (v11 > 9) {
          goto LABEL_871;
        }
        if (v11 != 4) {
          goto LABEL_124;
        }
        char v12 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__str, (uint64_t *)(*(void *)a2 + 8), (void *)(*(void *)v9 + 8));
        goto LABEL_87;
      case 5:
        unsigned int v66 = *((unsigned __int8 *)a2 + 12);
        if (v66 > 9) {
          goto LABEL_871;
        }
        if (v66 != 5) {
          goto LABEL_124;
        }
        char v12 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__str, (uint64_t **)(*(void *)a2 + 8), (uint64_t **)(*(void *)v9 + 8));
        goto LABEL_87;
      case 6:
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            if (*(void *)a2 == (uint64_t)(*(void *)v9 << 8) >> 8 && !*(_DWORD *)(v9 + 8)) {
              goto LABEL_212;
            }
            goto LABEL_124;
          case 1:
            double v69 = vabdd_f64(*(double *)a2, (double)*(int *)(v9 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v9 << 8) >> 8));
LABEL_102:
            if (v69 < 0.0000005) {
              goto LABEL_212;
            }
            goto LABEL_124;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            goto LABEL_124;
          case 6:
            if (((*(void *)v9 ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)a2 + 2) == *(_DWORD *)(v9 + 8))
            {
              goto LABEL_212;
            }
            goto LABEL_124;
          default:
            goto LABEL_871;
        }
      case 7:
        unsigned int v63 = *((unsigned __int8 *)a2 + 12);
        if (v63 < 7 || v63 - 8 < 2) {
          goto LABEL_124;
        }
        if (v63 == 7) {
          goto LABEL_212;
        }
        goto LABEL_871;
      case 8:
        unsigned int v67 = *((unsigned __int8 *)a2 + 12);
        if (v67 < 8 || v67 == 9) {
          goto LABEL_124;
        }
        if (v67 != 8) {
          goto LABEL_871;
        }
        char v12 = turi::image_type::operator==(*(void *)a2 + 8, *(void *)v9 + 8);
LABEL_87:
        if (v12) {
          goto LABEL_212;
        }
        goto LABEL_124;
      case 9:
        unsigned int v13 = *((unsigned __int8 *)a2 + 12);
        if (v13 < 9) {
          goto LABEL_124;
        }
        if (v13 != 9) {
          goto LABEL_871;
        }
        double v14 = *(double *)v9;
        std::vector<std::string> v15 = *(void **)a2;
        if (*(void *)v9 == *(void *)a2) {
          goto LABEL_212;
        }
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v15 + 1), *(void *)&v14 + 8)) {
          goto LABEL_124;
        }
        uint64_t v17 = (char *)v15[3];
        uint64_t v16 = (char *)v15[4];
        uint64_t v18 = v16 - v17;
        if (v16 == v17) {
          goto LABEL_212;
        }
        if (!v15[1]) {
          goto LABEL_212;
        }
        uint64_t v19 = 1;
        do
        {
          uint64_t v20 = *(void *)v17;
          v17 += 8;
          v19 *= v20;
        }
        while (v17 != v16);
        if (!v19) {
          goto LABEL_212;
        }
        *(void *)v511 = 0;
        std::vector<unsigned long>::vector(&v483, v18 >> 3, v511);
        long long v21 = v483;
        uint64_t v22 = **(void **)(*(void *)&v14 + 8);
        uint64_t v23 = *((void *)&v483 + 1) - v483;
        unint64_t v24 = (uint64_t)(*((void *)&v483 + 1) - v483) >> 3;
        unint64_t v25 = v24 - 1;
        if (v24 <= 1) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = (uint64_t)(*((void *)&v483 + 1) - v483) >> 3;
        }
        while (2)
        {
          if (*((void *)&v21 + 1) == (void)v21)
          {
            uint64_t v34 = 0;
            double v35 = *(double *)(*(void *)v15[1] + 8 * v15[9]);
          }
          else
          {
            uint64_t v27 = 0;
            uint64_t v28 = (uint64_t *)v15[6];
            char v29 = (uint64_t *)v21;
            uint64_t v30 = v26;
            do
            {
              uint64_t v32 = *v29++;
              uint64_t v31 = v32;
              uint64_t v33 = *v28++;
              v27 += v33 * v31;
              --v30;
            }
            while (v30);
            uint64_t v34 = 0;
            double v35 = *(double *)(*(void *)v15[1] + 8 * (v15[9] + v27));
            double v36 = *(uint64_t **)(*(void *)&v14 + 48);
            double v37 = (uint64_t *)v21;
            uint64_t v38 = v26;
            do
            {
              uint64_t v40 = *v37++;
              uint64_t v39 = v40;
              uint64_t v41 = *v36++;
              v34 += v41 * v39;
              --v38;
            }
            while (v38);
          }
          double v42 = *(double *)(v22 + 8 * (*(void *)(*(void *)&v14 + 72) + v34));
          BOOL v43 = v35 == v42;
          if (v35 != v42) {
            goto LABEL_119;
          }
          uint64_t v44 = v24;
          unint64_t v45 = v24 - 1;
          if (v23 < 1) {
            goto LABEL_44;
          }
          uint64_t v46 = v15[3];
          unint64_t v47 = *(void *)(v21 + 8 * v25) + 1;
          *(void *)(v21 + 8 * v25) = v47;
          if (v47 < *(void *)(v46 + 8 * v25))
          {
            uint64_t v44 = 1;
            unint64_t v45 = v24 - 1;
LABEL_44:
            if ((v45 & 0x8000000000000000) != 0) {
              goto LABEL_119;
            }
LABEL_45:
            if (!v44) {
              goto LABEL_119;
            }
            continue;
          }
          break;
        }
        uint64_t v48 = v46 - 16;
        unint64_t v49 = v24;
        double v50 = (unint64_t *)(v21 + (v23 & 0xFFFFFFFFFFFFFFF8) - 16);
        do
        {
          unint64_t v51 = v49 - 1;
          v50[1] = 0;
          if ((uint64_t)(v49 - 1) <= 0)
          {
            BOOL v43 = 1;
            goto LABEL_119;
          }
          unint64_t v52 = *v50 + 1;
          *v50-- = v52;
          unint64_t v53 = *(void *)(v48 + 8 * v49--);
        }
        while (v52 >= v53);
        uint64_t v44 = 1;
        if (((v51 - 1) & 0x8000000000000000) == 0) {
          goto LABEL_45;
        }
LABEL_119:
        if ((void)v21)
        {
          *((void *)&v483 + 1) = v21;
          operator delete((void *)v21);
        }
        if (v43) {
          goto LABEL_212;
        }
        goto LABEL_124;
      default:
        goto LABEL_871;
    }
  }
}

void sub_22438DD70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x22438E09CLL);
}

void sub_22438DDA0()
{
  switch(LOBYTE(STACK[0x27C]))
  {
    case 2:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&STACK[0x270]);
      break;
    case 3:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&STACK[0x270]);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&STACK[0x270]);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&STACK[0x270]);
      break;
    case 8:
      turi::gl_sarray::clip((atomic_ullong *volatile *)&STACK[0x270]);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)&STACK[0x270]);
      break;
    default:
      break;
  }
  STACK[0x270] = 0;
  LODWORD(STACK[0x278]) = 0;
  LOBYTE(STACK[0x27C]) = 0;
  JUMPOUT(0x22438E0ACLL);
}

void sub_22438E08C()
{
}

void sub_22438E098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x270]);
  switch(*((unsigned char *)v33 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v35 = *v33;
      if (!*v33) {
        goto LABEL_27;
      }
      if (*((char *)v35 + 31) < 0) {
        operator delete((void *)v35[1]);
      }
      double v36 = v35;
      uint64_t v37 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v40 = *v33;
      if (!*v33) {
        goto LABEL_27;
      }
      uint64_t v41 = (void *)v40[1];
      if (v41)
      {
        v40[2] = (atomic_ullong)v41;
        operator delete(v41);
      }
      double v36 = v40;
      uint64_t v37 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v38 = *v33;
      if (!*v33) {
        goto LABEL_27;
      }
      a33 = (uint64_t)(v38 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v38 = *v33;
      if (!*v33) {
        goto LABEL_27;
      }
      a33 = (uint64_t)(v38 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
LABEL_21:
      double v36 = v38;
      uint64_t v37 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v42 = *v33;
      if (!*v33) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v42 + 2);
      double v36 = v42;
      unsigned int v39 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v33, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v33) {
        goto LABEL_27;
      }
      double v36 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v33);
      unsigned int v39 = 2071181815;
LABEL_25:
      uint64_t v37 = v39 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v36, v37);
LABEL_27:
      *uint64_t v33 = 0;
LABEL_28:
      *uint64_t v33 = 0;
      *((_DWORD *)v33 + 2) = 0;
      *((unsigned char *)v33 + 12) = 0;
      if (a15 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

uint64_t std::map<std::string,BOOL>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t turi::option_handling::option_info::save(turi::option_handling::option_info *this, turi::oarchive *a2)
{
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this);
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)a2, (const void **)this + 3);
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 6);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 4 > v4)
    {
      size_t v7 = 2 * v4 + 8;
      *((void *)a2 + 5) = v7;
      int v8 = (char **)*((void *)a2 + 2);
      if (v8)
      {
        uint64_t v5 = *v8;
        size_t v9 = v8[1] - *v8;
        BOOL v10 = v7 >= v9;
        std::vector<char>::size_type v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
          uint64_t v5 = (char *)**((void **)a2 + 2);
        }
        else if (!v10)
        {
          v8[1] = &v5[v7];
        }
      }
      else
      {
        uint64_t v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      uint64_t v5 = (char *)*((void *)a2 + 3);
    }
    *(_DWORD *)&v5[*((void *)a2 + 4)] = *((_DWORD *)this + 16);
    *((void *)a2 + 4) += 4;
  }
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 9);
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 11);
  return turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 13);
}

void turi::option_handling::option_info::load(std::string *this, turi::iarchive *a2)
{
  turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, this);
  turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, this + 1);
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (unint64_t *)&this[2]);
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    LODWORD(this[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v4 + *((void *)a2 + 3));
    *((void *)a2 + 3) += 4;
  }
  else
  {
    std::istream::read();
  }
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (unint64_t *)&this[3]);
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, &this[3].__r_.__value_.__r.__words[2]);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)&this[4].__r_.__value_.__l.__size_);
}

uint64_t boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::float_types_converter_internal<double>(unsigned __int8 **a1, double *a2)
{
  if (boost::detail::parse_inf_nan<char,double>(*a1, a1[1], a2)) {
    return 1;
  }
  uint64_t result = boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_using_base_class<double>((uint64_t *)a1, (uint64_t)a2);
  if (result)
  {
    unsigned int v5 = *(a1[1] - 1) - 43;
    if (v5 <= 0x3A)
    {
      if ((0x400000004000005uLL >> v5)) {
        return 0;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t boost::detail::parse_inf_nan<char,double>(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  if (a1 == a2) {
    return 0;
  }
  int v3 = *a1;
  BOOL v4 = v3 == 45 || v3 == 43;
  uint64_t v5 = (uint64_t)(v4 ? a1 + 1 : a1);
  uint64_t v6 = &a2[-v5];
  if ((uint64_t)&a2[-v5] < 3) {
    return 0;
  }
  unint64_t v8 = 0;
  BOOL v9 = 0;
  do
  {
    int v10 = *(unsigned __int8 *)(v5 + v8);
    if (v10 != aNan[v8] && v10 != aNan_0[v8]) {
      break;
    }
    BOOL v9 = v8++ > 1;
  }
  while (v8 != 3);
  if (!v9)
  {
    if (v6 == (unsigned __int8 *)3)
    {
      unint64_t v18 = 0;
      BOOL v16 = 0;
      do
      {
        int v19 = *(unsigned __int8 *)(v5 + v18);
        if (v19 != aInfinity_2[v18] && v19 != aInfinity_1[v18]) {
          break;
        }
        BOOL v16 = v18++ > 1;
      }
      while (v18 != 3);
    }
    else
    {
      if (v6 != (unsigned __int8 *)8) {
        return 0;
      }
      unint64_t v15 = 0;
      BOOL v16 = 0;
      do
      {
        int v17 = *(unsigned __int8 *)(v5 + v15);
        if (v17 != aInfinity_2[v15] && v17 != aInfinity_1[v15]) {
          break;
        }
        BOOL v16 = v15++ > 6;
      }
      while (v15 != 8);
    }
    if (v16)
    {
      BOOL v12 = v3 == 45;
      double v13 = INFINITY;
      double v14 = -INFINITY;
      goto LABEL_33;
    }
    return 0;
  }
  std::vector<char>::size_type v11 = (unsigned __int8 *)(v5 + 3);
  if (v11 != a2 && (a2 - v11 < 2 || *v11 != 40 || *(a2 - 1) != 41)) {
    return 0;
  }
  BOOL v12 = v3 == 45;
  double v13 = NAN;
  double v14 = NAN;
LABEL_33:
  if (v12) {
    double v13 = v14;
  }
  *a3 = v13;
  return 1;
}

BOOL boost::detail::lexical_ostream_limited_src<char,std::char_traits<char>>::shr_using_base_class<double>(uint64_t *a1, uint64_t a2)
{
  std::streambuf::basic_streambuf();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  __sb[0] = &unk_26D77BE18;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[0] = MEMORY[0x263F8C2F0] + 24;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x263F8C2F0] + 64);
  std::ios_base::init(&v12, __sb);
  uint64_t v13 = 0;
  int v14 = -1;
  uint64_t v6 = (std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  uint64_t v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(void *)(v11[0] - 24)) &= ~0x1000u;
  *(void *)((char *)&v11[2] + *(void *)(v7 - 24)) = 17;
  unint64_t v8 = (void *)MEMORY[0x22A6148F0](v11, a2);
  BOOL v9 = (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_22438F088(_Unwind_Exception *a1)
{
}

uint64_t std::map<std::string,BOOL>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_22438F13C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void turi::option_manager::create_real_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, int a5, double a6, double a7)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  BOOL v55 = 0;
  int v56 = 0;
  char v57 = 0;
  unsigned int v58 = 0;
  int v59 = 0;
  char v60 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  memset(v53, 0, sizeof(v53));
  int v54 = 0;
  std::string::operator=((std::string *)v53, a2);
  std::string::operator=((std::string *)&v53[24], a3);
  uint64_t v13 = *(atomic_ullong **)a4;
  int v14 = *(_DWORD *)(a4 + 8);
  unsigned int v15 = *(unsigned __int8 *)(a4 + 12);
  if (v15 <= 9 && ((1 << v15) & 0x33C) != 0) {
    atomic_fetch_add(v13, 1uLL);
  }
  switch(v53[60])
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v53[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v16 = *(void **)&v53[48];
        if (*(void *)&v53[48])
        {
          if (*(char *)(*(void *)&v53[48] + 31) < 0) {
            operator delete(*(void **)(*(void *)&v53[48] + 8));
          }
          int v17 = v16;
          uint64_t v18 = 0x1012C404EF22A49;
          goto LABEL_35;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v53[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v19 = *(void **)&v53[48];
        if (*(void *)&v53[48])
        {
          uint64_t v20 = *(void **)(*(void *)&v53[48] + 8);
          if (v20)
          {
            *(void *)(*(void *)&v53[48] + 16) = v20;
            operator delete(v20);
          }
          int v17 = v19;
          uint64_t v18 = 0x1080C409938AC02;
          goto LABEL_35;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v53[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v21 = *(void **)&v53[48];
        if (*(void *)&v53[48])
        {
          unint64_t v52 = (void **)(*(void *)&v53[48] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v52);
          goto LABEL_21;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v53[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v21 = *(void **)&v53[48];
        if (*(void *)&v53[48])
        {
          unint64_t v52 = (void **)(*(void *)&v53[48] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v52);
LABEL_21:
          int v17 = v21;
          uint64_t v18 = 0x1020C405E66F15BLL;
          goto LABEL_35;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v53[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v22 = *(void **)&v53[48];
        if (*(void *)&v53[48])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v53[48] + 16));
          int v17 = v22;
          unsigned int v23 = -235920773;
          goto LABEL_34;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v53[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v24 = *(void **)&v53[48];
        if (*(void *)&v53[48])
        {
          unint64_t v25 = *(void **)(*(void *)&v53[48] + 48);
          if (v25)
          {
            *(void *)(*(void *)&v53[48] + 56) = v25;
            operator delete(v25);
          }
          uint64_t v26 = (void *)v24[3];
          if (v26)
          {
            void v24[4] = v26;
            operator delete(v26);
          }
          uint64_t v27 = (std::__shared_weak_count *)v24[2];
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          int v17 = v24;
          unsigned int v23 = 2071181815;
LABEL_34:
          uint64_t v18 = v23 | 0x1030C4000000000;
LABEL_35:
          MEMORY[0x22A614FA0](v17, v18);
        }
      }
      break;
    default:
      break;
  }
  *(void *)&v53[48] = v13;
  *(_DWORD *)&v53[56] = v14;
  v53[60] = v15;
  switch(v57)
  {
    case 2:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v28 = v55;
        if (v55)
        {
          if (*((char *)v55 + 31) < 0) {
            operator delete((void *)v55[1]);
          }
          char v29 = v28;
          uint64_t v30 = 0x1012C404EF22A49;
          goto LABEL_67;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v31 = v55;
        if (v55)
        {
          uint64_t v32 = (void *)v55[1];
          if (v32)
          {
            v55[2] = (atomic_ullong)v32;
            operator delete(v32);
          }
          char v29 = v31;
          uint64_t v30 = 0x1080C409938AC02;
          goto LABEL_67;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v33 = v55;
        if (v55)
        {
          unint64_t v52 = (void **)(v55 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v52);
          goto LABEL_53;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v33 = v55;
        if (v55)
        {
          unint64_t v52 = (void **)(v55 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v52);
LABEL_53:
          char v29 = v33;
          uint64_t v30 = 0x1020C405E66F15BLL;
          goto LABEL_67;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v34 = v55;
        if (v55)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v55 + 2);
          char v29 = v34;
          unsigned int v35 = -235920773;
          goto LABEL_66;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v36 = v55;
        if (v55)
        {
          uint64_t v37 = (void *)v55[6];
          if (v37)
          {
            v55[7] = (atomic_ullong)v37;
            operator delete(v37);
          }
          atomic_ullong *volatile v38 = (void *)v36[3];
          if (v38)
          {
            v36[4] = (atomic_ullong)v38;
            operator delete(v38);
          }
          unsigned int v39 = (std::__shared_weak_count *)v36[2];
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          char v29 = v36;
          unsigned int v35 = 2071181815;
LABEL_66:
          uint64_t v30 = v35 | 0x1030C4000000000;
LABEL_67:
          MEMORY[0x22A614FA0](v29, v30);
        }
      }
      break;
    default:
      break;
  }
  int v56 = 0;
  char v57 = 1;
  BOOL v55 = *(atomic_ullong **)&a6;
  switch(v60)
  {
    case 2:
      if (atomic_fetch_add(v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v40 = v58;
        if (v58)
        {
          if (*((char *)v58 + 31) < 0) {
            operator delete((void *)v58[1]);
          }
          uint64_t v41 = v40;
          uint64_t v42 = 0x1012C404EF22A49;
          goto LABEL_99;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v43 = v58;
        if (v58)
        {
          uint64_t v44 = (void *)v58[1];
          if (v44)
          {
            v58[2] = (atomic_ullong)v44;
            operator delete(v44);
          }
          uint64_t v41 = v43;
          uint64_t v42 = 0x1080C409938AC02;
          goto LABEL_99;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v45 = v58;
        if (v58)
        {
          unint64_t v52 = (void **)(v58 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v52);
          goto LABEL_85;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v45 = v58;
        if (v58)
        {
          unint64_t v52 = (void **)(v58 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v52);
LABEL_85:
          uint64_t v41 = v45;
          uint64_t v42 = 0x1020C405E66F15BLL;
          goto LABEL_99;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v46 = v58;
        if (v58)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v58 + 2);
          uint64_t v41 = v46;
          unsigned int v47 = -235920773;
          goto LABEL_98;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v48 = v58;
        if (v58)
        {
          unint64_t v49 = (void *)v58[6];
          if (v49)
          {
            v58[7] = (atomic_ullong)v49;
            operator delete(v49);
          }
          double v50 = (void *)v48[3];
          if (v50)
          {
            v48[4] = (atomic_ullong)v50;
            operator delete(v50);
          }
          unint64_t v51 = (std::__shared_weak_count *)v48[2];
          if (v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v51);
          }
          uint64_t v41 = v48;
          unsigned int v47 = 2071181815;
LABEL_98:
          uint64_t v42 = v47 | 0x1030C4000000000;
LABEL_99:
          MEMORY[0x22A614FA0](v41, v42);
        }
      }
      break;
    default:
      break;
  }
  int v59 = 0;
  char v60 = 1;
  unsigned int v58 = *(atomic_ullong **)&a7;
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v53, a5);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v53);
}

void sub_22438F7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_option(turi::option_manager *this, const turi::option_handling::option_info *a2, int a3)
{
  uint64_t v6 = (void *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)this, (const void **)a2);
  if ((void *)((char *)this + 8) == v6)
  {
    std::vector<turi::option_handling::option_info>::push_back[abi:ne180100]((uint64_t *)this + 3, (std::string *)a2);
    uint64_t v13 = ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 7) - 1;
    atomic_ullong *volatile v38 = (long long *)a2;
    std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)a2, (uint64_t)&std::piecewise_construct, &v38)[7] = v13;
    atomic_ullong *volatile v38 = (long long *)a2;
    int v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v38);
    unint64_t v8 = (void **)(v14 + 7);
    if ((uint64_t *)((char *)a2 + 48) != v14 + 7)
    {
      unsigned int v15 = v14;
      switch(*((unsigned char *)v14 + 68))
      {
        case 2:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v16 = *v8;
            if (!*v8) {
              goto LABEL_50;
            }
            if (*((char *)v16 + 31) < 0) {
              operator delete((void *)v16[1]);
            }
            int v17 = v16;
            uint64_t v18 = 0x1012C404EF22A49;
            goto LABEL_49;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v25 = *v8;
            if (!*v8) {
              goto LABEL_50;
            }
            uint64_t v26 = (void *)v25[1];
            if (v26)
            {
              v25[2] = (atomic_ullong)v26;
              operator delete(v26);
            }
            int v17 = v25;
            uint64_t v18 = 0x1080C409938AC02;
            goto LABEL_49;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = *v8;
            if (!*v8) {
              goto LABEL_50;
            }
            atomic_ullong *volatile v38 = (long long *)(v27 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
            goto LABEL_41;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = *v8;
            if (!*v8) {
              goto LABEL_50;
            }
            atomic_ullong *volatile v38 = (long long *)(v27 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
LABEL_41:
            int v17 = v27;
            uint64_t v18 = 0x1020C405E66F15BLL;
            goto LABEL_49;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v28 = *v8;
            if (!*v8) {
              goto LABEL_50;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v28 + 2);
            int v17 = v28;
            unsigned int v29 = -235920773;
            goto LABEL_48;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*v8)
            {
              int v17 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v8);
              unsigned int v29 = 2071181815;
LABEL_48:
              uint64_t v18 = v29 | 0x1030C4000000000;
LABEL_49:
              MEMORY[0x22A614FA0](v17, v18);
            }
LABEL_50:
            *unint64_t v8 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v30 = (void *)*((void *)a2 + 6);
      *(void **)((char *)v8 + 5) = *(void **)((char *)a2 + 53);
      *unint64_t v8 = v30;
      LODWORD(v3CoreML::Specification::DoubleRange::New(this, 0) = *((unsigned __int8 *)a2 + 60);
      *((unsigned char *)v15 + 68) = (_BYTE)v30;
      switch((int)v30)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
LABEL_74:
          atomic_fetch_add(*v8, 1uLL);
          break;
        default:
          return;
      }
    }
  }
  else if (a3)
  {
    turi::option_handling::option_info::operator=(*((void *)this + 3) + (v6[7] << 7), (uint64_t)a2);
    atomic_ullong *volatile v38 = (long long *)a2;
    uint64_t v7 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v38);
    unint64_t v8 = (void **)(v7 + 7);
    if ((uint64_t *)((char *)a2 + 48) != v7 + 7)
    {
      BOOL v9 = v7;
      switch(*((unsigned char *)v7 + 68))
      {
        case 2:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v10 = *v8;
            if (!*v8) {
              goto LABEL_72;
            }
            if (*((char *)v10 + 31) < 0) {
              operator delete((void *)v10[1]);
            }
            std::vector<char>::size_type v11 = v10;
            uint64_t v12 = 0x1012C404EF22A49;
            goto LABEL_71;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v31 = *v8;
            if (!*v8) {
              goto LABEL_72;
            }
            uint64_t v32 = (void *)v31[1];
            if (v32)
            {
              v31[2] = (atomic_ullong)v32;
              operator delete(v32);
            }
            std::vector<char>::size_type v11 = v31;
            uint64_t v12 = 0x1080C409938AC02;
            goto LABEL_71;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v33 = *v8;
            if (!*v8) {
              goto LABEL_72;
            }
            atomic_ullong *volatile v38 = (long long *)(v33 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
            goto LABEL_63;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v33 = *v8;
            if (!*v8) {
              goto LABEL_72;
            }
            atomic_ullong *volatile v38 = (long long *)(v33 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
LABEL_63:
            std::vector<char>::size_type v11 = v33;
            uint64_t v12 = 0x1020C405E66F15BLL;
            goto LABEL_71;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v34 = *v8;
            if (!*v8) {
              goto LABEL_72;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v34 + 2);
            std::vector<char>::size_type v11 = v34;
            unsigned int v35 = -235920773;
            goto LABEL_70;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*v8)
            {
              std::vector<char>::size_type v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v8);
              unsigned int v35 = 2071181815;
LABEL_70:
              uint64_t v12 = v35 | 0x1030C4000000000;
LABEL_71:
              MEMORY[0x22A614FA0](v11, v12);
            }
LABEL_72:
            *unint64_t v8 = 0;
          }
          break;
        default:
          break;
      }
      double v36 = (void *)*((void *)a2 + 6);
      *(void **)((char *)v8 + 5) = *(void **)((char *)a2 + 53);
      *unint64_t v8 = v36;
      LODWORD(v36) = *((unsigned __int8 *)a2 + 60);
      *((unsigned char *)v9 + 68) = (_BYTE)v36;
      switch((int)v36)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_74;
        default:
          return;
      }
    }
  }
  else
  {
    int v19 = (int *)global_logger();
    if (v19[169] <= 1)
    {
      if (cppipc::must_cancel((cppipc *)v19)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v20 = (file_logger *)global_logger();
      started = file_logger::start_stream(v20, 1, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/extensions/option_manager.cpp", "create_option", 129, 1);
      uint64_t v22 = pthread_getspecific(*((void *)started + 74));
      if (v22 && *((unsigned char *)v22 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)"Option ", 7);
      }
      if (*((char *)a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      uint64_t v23 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      unint64_t v24 = pthread_getspecific(*(void *)(v23 + 592));
      if (v24 && *((unsigned char *)v24 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24 + 2, (uint64_t)" defined a second time.", 23);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_22438FDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::option_manager::create_integer_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, atomic_ullong *a5, atomic_ullong *a6, int a7)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  unint64_t v52 = 0;
  int v53 = 0;
  char v54 = 0;
  BOOL v55 = 0;
  int v56 = 0;
  char v57 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  memset(v50, 0, sizeof(v50));
  int v51 = 1;
  std::string::operator=((std::string *)v50, a2);
  std::string::operator=((std::string *)&v50[24], a3);
  if (&v50[48] != (unsigned char *)a4)
  {
    switch(v50[60])
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v13 = *(void **)&v50[48];
          if (*(void *)&v50[48])
          {
            if (*(char *)(*(void *)&v50[48] + 31) < 0) {
              operator delete(*(void **)(*(void *)&v50[48] + 8));
            }
            int v14 = v13;
            uint64_t v15 = 0x1012C404EF22A49;
            goto LABEL_33;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v16 = *(void **)&v50[48];
          if (*(void *)&v50[48])
          {
            int v17 = *(void **)(*(void *)&v50[48] + 8);
            if (v17)
            {
              *(void *)(*(void *)&v50[48] + 16) = v17;
              operator delete(v17);
            }
            int v14 = v16;
            uint64_t v15 = 0x1080C409938AC02;
            goto LABEL_33;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v18 = *(void **)&v50[48];
          if (*(void *)&v50[48])
          {
            unint64_t v49 = (void **)(*(void *)&v50[48] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v49);
            goto LABEL_19;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v18 = *(void **)&v50[48];
          if (*(void *)&v50[48])
          {
            unint64_t v49 = (void **)(*(void *)&v50[48] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v49);
LABEL_19:
            int v14 = v18;
            uint64_t v15 = 0x1020C405E66F15BLL;
            goto LABEL_33;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v19 = *(void **)&v50[48];
          if (*(void *)&v50[48])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v50[48] + 16));
            int v14 = v19;
            unsigned int v20 = -235920773;
            goto LABEL_32;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v21 = *(void **)&v50[48];
          if (*(void *)&v50[48])
          {
            uint64_t v22 = *(void **)(*(void *)&v50[48] + 48);
            if (v22)
            {
              *(void *)(*(void *)&v50[48] + 56) = v22;
              operator delete(v22);
            }
            uint64_t v23 = (void *)v21[3];
            if (v23)
            {
              v21[4] = v23;
              operator delete(v23);
            }
            unint64_t v24 = (std::__shared_weak_count *)v21[2];
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            int v14 = v21;
            unsigned int v20 = 2071181815;
LABEL_32:
            uint64_t v15 = v20 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v14, v15);
          }
        }
        break;
      default:
        break;
    }
    *(void *)&v50[53] = *(void *)(a4 + 5);
    *(void *)&v50[48] = *(void *)a4;
    v50[60] = *(unsigned char *)(a4 + 12);
    if (v50[60] <= 9u && ((1 << v50[60]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)&v50[48], 1uLL);
    }
  }
  switch(v54)
  {
    case 2:
      if (atomic_fetch_add(v52, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v25 = v52;
        if (v52)
        {
          if (*((char *)v52 + 31) < 0) {
            operator delete((void *)v52[1]);
          }
          uint64_t v26 = v25;
          uint64_t v27 = 0x1012C404EF22A49;
          goto LABEL_68;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v52, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v28 = v52;
        if (v52)
        {
          unsigned int v29 = (void *)v52[1];
          if (v29)
          {
            v52[2] = (atomic_ullong)v29;
            operator delete(v29);
          }
          uint64_t v26 = v28;
          uint64_t v27 = 0x1080C409938AC02;
          goto LABEL_68;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v52, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v30 = v52;
        if (v52)
        {
          unint64_t v49 = (void **)(v52 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v49);
          goto LABEL_54;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v52, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v30 = v52;
        if (v52)
        {
          unint64_t v49 = (void **)(v52 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v49);
LABEL_54:
          uint64_t v26 = v30;
          uint64_t v27 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v52, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v31 = v52;
        if (v52)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v52 + 2);
          uint64_t v26 = v31;
          unsigned int v32 = -235920773;
          goto LABEL_67;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v52, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v33 = v52;
        if (v52)
        {
          atomic_ullong *volatile v34 = (void *)v52[6];
          if (v34)
          {
            v52[7] = (atomic_ullong)v34;
            operator delete(v34);
          }
          unsigned int v35 = (void *)v33[3];
          if (v35)
          {
            v33[4] = (atomic_ullong)v35;
            operator delete(v35);
          }
          double v36 = (std::__shared_weak_count *)v33[2];
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
          uint64_t v26 = v33;
          unsigned int v32 = 2071181815;
LABEL_67:
          uint64_t v27 = v32 | 0x1030C4000000000;
LABEL_68:
          MEMORY[0x22A614FA0](v26, v27);
        }
      }
      break;
    default:
      break;
  }
  int v53 = 0;
  char v54 = 0;
  unint64_t v52 = a5;
  switch(v57)
  {
    case 2:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v37 = v55;
        if (v55)
        {
          if (*((char *)v55 + 31) < 0) {
            operator delete((void *)v55[1]);
          }
          atomic_ullong *volatile v38 = v37;
          uint64_t v39 = 0x1012C404EF22A49;
          goto LABEL_100;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v40 = v55;
        if (v55)
        {
          uint64_t v41 = (void *)v55[1];
          if (v41)
          {
            v55[2] = (atomic_ullong)v41;
            operator delete(v41);
          }
          atomic_ullong *volatile v38 = v40;
          uint64_t v39 = 0x1080C409938AC02;
          goto LABEL_100;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v42 = v55;
        if (v55)
        {
          unint64_t v49 = (void **)(v55 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v49);
          goto LABEL_86;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v42 = v55;
        if (v55)
        {
          unint64_t v49 = (void **)(v55 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v49);
LABEL_86:
          atomic_ullong *volatile v38 = v42;
          uint64_t v39 = 0x1020C405E66F15BLL;
          goto LABEL_100;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v43 = v55;
        if (v55)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v55 + 2);
          atomic_ullong *volatile v38 = v43;
          unsigned int v44 = -235920773;
          goto LABEL_99;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v55, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v45 = v55;
        if (v55)
        {
          uint64_t v46 = (void *)v55[6];
          if (v46)
          {
            v55[7] = (atomic_ullong)v46;
            operator delete(v46);
          }
          unsigned int v47 = (void *)v45[3];
          if (v47)
          {
            v45[4] = (atomic_ullong)v47;
            operator delete(v47);
          }
          uint64_t v48 = (std::__shared_weak_count *)v45[2];
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
          atomic_ullong *volatile v38 = v45;
          unsigned int v44 = 2071181815;
LABEL_99:
          uint64_t v39 = v44 | 0x1030C4000000000;
LABEL_100:
          MEMORY[0x22A614FA0](v38, v39);
        }
      }
      break;
    default:
      break;
  }
  int v56 = 0;
  char v57 = 0;
  BOOL v55 = a6;
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v50, a7);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v50);
}

void sub_224390524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_categorical_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, uint64_t **a5, int a6)
{
  v32[4] = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  int v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  char v31 = 0;
  memset(v32, 0, 24);
  memset(v24, 0, sizeof(v24));
  int v25 = 3;
  std::string::operator=((std::string *)v24, a2);
  std::string::operator=((std::string *)&v24[24], a3);
  if (&v24[48] != (unsigned char *)a4)
  {
    switch(v24[60])
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v24[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::vector<char>::size_type v11 = *(void **)&v24[48];
          if (*(void *)&v24[48])
          {
            if (*(char *)(*(void *)&v24[48] + 31) < 0) {
              operator delete(*(void **)(*(void *)&v24[48] + 8));
            }
            uint64_t v12 = v11;
            uint64_t v13 = 0x1012C404EF22A49;
            goto LABEL_33;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v24[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v14 = *(void **)&v24[48];
          if (*(void *)&v24[48])
          {
            uint64_t v15 = *(void **)(*(void *)&v24[48] + 8);
            if (v15)
            {
              *(void *)(*(void *)&v24[48] + 16) = v15;
              operator delete(v15);
            }
            uint64_t v12 = v14;
            uint64_t v13 = 0x1080C409938AC02;
            goto LABEL_33;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v24[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v16 = *(void **)&v24[48];
          if (*(void *)&v24[48])
          {
            uint64_t v23 = (void **)(*(void *)&v24[48] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
            goto LABEL_19;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v24[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v16 = *(void **)&v24[48];
          if (*(void *)&v24[48])
          {
            uint64_t v23 = (void **)(*(void *)&v24[48] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v23);
LABEL_19:
            uint64_t v12 = v16;
            uint64_t v13 = 0x1020C405E66F15BLL;
            goto LABEL_33;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v24[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v17 = *(void **)&v24[48];
          if (*(void *)&v24[48])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v24[48] + 16));
            uint64_t v12 = v17;
            unsigned int v18 = -235920773;
            goto LABEL_32;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v24[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v19 = *(void **)&v24[48];
          if (*(void *)&v24[48])
          {
            unsigned int v20 = *(void **)(*(void *)&v24[48] + 48);
            if (v20)
            {
              *(void *)(*(void *)&v24[48] + 56) = v20;
              operator delete(v20);
            }
            long long v21 = (void *)v19[3];
            if (v21)
            {
              v19[4] = v21;
              operator delete(v21);
            }
            uint64_t v22 = (std::__shared_weak_count *)v19[2];
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            uint64_t v12 = v19;
            unsigned int v18 = 2071181815;
LABEL_32:
            uint64_t v13 = v18 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v12, v13);
          }
        }
        break;
      default:
        break;
    }
    *(void *)&v24[53] = *(void *)(a4 + 5);
    *(void *)&v24[48] = *(void *)a4;
    v24[60] = *(unsigned char *)(a4 + 12);
    if (v24[60] <= 9u && ((1 << v24[60]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)&v24[48], 1uLL);
    }
  }
  if (v32 != a5) {
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v32, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  }
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v24, a6);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v24);
}

void sub_2243908AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_string_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  int v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  char v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  memset(v22, 0, sizeof(v22));
  int v23 = 4;
  std::string::operator=((std::string *)v22, a2);
  std::string::operator=((std::string *)&v22[24], a3);
  if (&v22[48] != (unsigned char *)a4)
  {
    switch(v22[60])
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          BOOL v9 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            if (*(char *)(*(void *)&v22[48] + 31) < 0) {
              operator delete(*(void **)(*(void *)&v22[48] + 8));
            }
            atomic_ullong *volatile v10 = v9;
            uint64_t v11 = 0x1012C404EF22A49;
            goto LABEL_33;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v12 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            uint64_t v13 = *(void **)(*(void *)&v22[48] + 8);
            if (v13)
            {
              *(void *)(*(void *)&v22[48] + 16) = v13;
              operator delete(v13);
            }
            atomic_ullong *volatile v10 = v12;
            uint64_t v11 = 0x1080C409938AC02;
            goto LABEL_33;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v14 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            long long v21 = (void **)(*(void *)&v22[48] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v21);
            goto LABEL_19;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v14 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            long long v21 = (void **)(*(void *)&v22[48] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v21);
LABEL_19:
            atomic_ullong *volatile v10 = v14;
            uint64_t v11 = 0x1020C405E66F15BLL;
            goto LABEL_33;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v15 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v22[48] + 16));
            atomic_ullong *volatile v10 = v15;
            unsigned int v16 = -235920773;
            goto LABEL_32;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v17 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            unsigned int v18 = *(void **)(*(void *)&v22[48] + 48);
            if (v18)
            {
              *(void *)(*(void *)&v22[48] + 56) = v18;
              operator delete(v18);
            }
            int v19 = (void *)v17[3];
            if (v19)
            {
              void v17[4] = v19;
              operator delete(v19);
            }
            unsigned int v20 = (std::__shared_weak_count *)v17[2];
            if (v20) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            }
            atomic_ullong *volatile v10 = v17;
            unsigned int v16 = 2071181815;
LABEL_32:
            uint64_t v11 = v16 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v10, v11);
          }
        }
        break;
      default:
        break;
    }
    *(void *)&v22[53] = *(void *)(a4 + 5);
    *(void *)&v22[48] = *(void *)a4;
    v22[60] = *(unsigned char *)(a4 + 12);
    if (v22[60] <= 9u && ((1 << v22[60]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 1uLL);
    }
  }
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v22, a5);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v22);
}

void sub_224390BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_BOOLean_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, unsigned int a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  int v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  char v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  memset(v22, 0, sizeof(v22));
  int v23 = 2;
  std::string::operator=((std::string *)v22, a2);
  std::string::operator=((std::string *)&v22[24], a3);
  switch(v22[60])
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v9 = *(void **)&v22[48];
        if (*(void *)&v22[48])
        {
          if (*(char *)(*(void *)&v22[48] + 31) < 0) {
            operator delete(*(void **)(*(void *)&v22[48] + 8));
          }
          atomic_ullong *volatile v10 = v9;
          uint64_t v11 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = *(void **)&v22[48];
        if (*(void *)&v22[48])
        {
          uint64_t v13 = *(void **)(*(void *)&v22[48] + 8);
          if (v13)
          {
            *(void *)(*(void *)&v22[48] + 16) = v13;
            operator delete(v13);
          }
          atomic_ullong *volatile v10 = v12;
          uint64_t v11 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v14 = *(void **)&v22[48];
        if (*(void *)&v22[48])
        {
          long long v21 = (void **)(*(void *)&v22[48] + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v21);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v14 = *(void **)&v22[48];
        if (*(void *)&v22[48])
        {
          long long v21 = (void **)(*(void *)&v22[48] + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v21);
LABEL_18:
          atomic_ullong *volatile v10 = v14;
          uint64_t v11 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = *(void **)&v22[48];
        if (*(void *)&v22[48])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v22[48] + 16));
          atomic_ullong *volatile v10 = v15;
          unsigned int v16 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v17 = *(void **)&v22[48];
        if (*(void *)&v22[48])
        {
          unsigned int v18 = *(void **)(*(void *)&v22[48] + 48);
          if (v18)
          {
            *(void *)(*(void *)&v22[48] + 56) = v18;
            operator delete(v18);
          }
          int v19 = (void *)v17[3];
          if (v19)
          {
            void v17[4] = v19;
            operator delete(v19);
          }
          unsigned int v20 = (std::__shared_weak_count *)v17[2];
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          atomic_ullong *volatile v10 = v17;
          unsigned int v16 = 2071181815;
LABEL_31:
          uint64_t v11 = v16 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v10, v11);
        }
      }
      break;
    default:
      break;
  }
  *(_DWORD *)&v22[56] = 0;
  v22[60] = 0;
  *(void *)&v22[48] = a4;
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v22, a5);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v22);
}

void sub_224390EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

void turi::option_manager::create_flexible_type_option(turi::option_manager *a1, const std::string *a2, const std::string *a3, uint64_t a4, int a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  int v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  int v28 = 0;
  char v29 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  memset(v22, 0, sizeof(v22));
  int v23 = 5;
  std::string::operator=((std::string *)v22, a2);
  std::string::operator=((std::string *)&v22[24], a3);
  if (&v22[48] != (unsigned char *)a4)
  {
    switch(v22[60])
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          BOOL v9 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            if (*(char *)(*(void *)&v22[48] + 31) < 0) {
              operator delete(*(void **)(*(void *)&v22[48] + 8));
            }
            atomic_ullong *volatile v10 = v9;
            uint64_t v11 = 0x1012C404EF22A49;
            goto LABEL_33;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v12 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            uint64_t v13 = *(void **)(*(void *)&v22[48] + 8);
            if (v13)
            {
              *(void *)(*(void *)&v22[48] + 16) = v13;
              operator delete(v13);
            }
            atomic_ullong *volatile v10 = v12;
            uint64_t v11 = 0x1080C409938AC02;
            goto LABEL_33;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v14 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            long long v21 = (void **)(*(void *)&v22[48] + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v21);
            goto LABEL_19;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v14 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            long long v21 = (void **)(*(void *)&v22[48] + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v21);
LABEL_19:
            atomic_ullong *volatile v10 = v14;
            uint64_t v11 = 0x1020C405E66F15BLL;
            goto LABEL_33;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v15 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v22[48] + 16));
            atomic_ullong *volatile v10 = v15;
            unsigned int v16 = -235920773;
            goto LABEL_32;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v17 = *(void **)&v22[48];
          if (*(void *)&v22[48])
          {
            unsigned int v18 = *(void **)(*(void *)&v22[48] + 48);
            if (v18)
            {
              *(void *)(*(void *)&v22[48] + 56) = v18;
              operator delete(v18);
            }
            int v19 = (void *)v17[3];
            if (v19)
            {
              void v17[4] = v19;
              operator delete(v19);
            }
            unsigned int v20 = (std::__shared_weak_count *)v17[2];
            if (v20) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            }
            atomic_ullong *volatile v10 = v17;
            unsigned int v16 = 2071181815;
LABEL_32:
            uint64_t v11 = v16 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v10, v11);
          }
        }
        break;
      default:
        break;
    }
    *(void *)&v22[53] = *(void *)(a4 + 5);
    *(void *)&v22[48] = *(void *)a4;
    v22[60] = *(unsigned char *)(a4 + 12);
    if (v22[60] <= 9u && ((1 << v22[60]) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)&v22[48], 1uLL);
    }
  }
  turi::option_manager::create_option(a1, (const turi::option_handling::option_info *)v22, a5);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)v22);
}

void sub_2243911C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::option_handling::option_info::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  if (a2 == a1)
  {
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  }
  else
  {
    uint64_t v4 = (atomic_ullong *volatile *)(a1 + 48);
    switch(*(unsigned char *)(a1 + 60))
    {
      case 2:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v5 = *v4;
          if (!*v4) {
            goto LABEL_35;
          }
          if (*((char *)v5 + 31) < 0) {
            operator delete((void *)v5[1]);
          }
          atomic_ullong *volatile v6 = v5;
          uint64_t v7 = 0x1012C404EF22A49;
          goto LABEL_34;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v8 = *v4;
          if (!*v4) {
            goto LABEL_35;
          }
          BOOL v9 = (void *)v8[1];
          if (v9)
          {
            v8[2] = (atomic_ullong)v9;
            operator delete(v9);
          }
          atomic_ullong *volatile v6 = v8;
          uint64_t v7 = 0x1080C409938AC02;
          goto LABEL_34;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *v4;
          if (!*v4) {
            goto LABEL_35;
          }
          double v50 = (void **)(v10 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
          goto LABEL_20;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *v4;
          if (!*v4) {
            goto LABEL_35;
          }
          double v50 = (void **)(v10 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_20:
          atomic_ullong *volatile v6 = v10;
          uint64_t v7 = 0x1020C405E66F15BLL;
          goto LABEL_34;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v4;
          if (!*v4) {
            goto LABEL_35;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v11 + 2);
          atomic_ullong *volatile v6 = v11;
          unsigned int v12 = -235920773;
          goto LABEL_33;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *v4;
          if (*v4)
          {
            int v14 = (void *)v13[6];
            if (v14)
            {
              v13[7] = (atomic_ullong)v14;
              operator delete(v14);
            }
            uint64_t v15 = (void *)v13[3];
            if (v15)
            {
              v13[4] = (atomic_ullong)v15;
              operator delete(v15);
            }
            unsigned int v16 = (std::__shared_weak_count *)v13[2];
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            atomic_ullong *volatile v6 = v13;
            unsigned int v12 = 2071181815;
LABEL_33:
            uint64_t v7 = v12 | 0x1030C4000000000;
LABEL_34:
            MEMORY[0x22A614FA0](v6, v7);
          }
LABEL_35:
          atomic_ullong *volatile *v4 = 0;
        }
        break;
      default:
        break;
    }
    int v17 = *(atomic_ullong **)(a2 + 48);
    *(void *)(a1 + 53) = *(void *)(a2 + 53);
    atomic_ullong *volatile *v4 = v17;
    unsigned int v18 = *(unsigned __int8 *)(a2 + 60);
    *(unsigned char *)(a1 + 6CoreML::Specification::DoubleRange::New(this, 0) = v18;
    if (v18 <= 9 && ((1 << v18) & 0x33C) != 0) {
      atomic_fetch_add(*v4, 1uLL);
    }
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    int v19 = (atomic_ullong *volatile *)(a1 + 72);
    switch(*(unsigned char *)(a1 + 84))
    {
      case 2:
        if (atomic_fetch_add(*v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v20 = *v19;
          if (!*v19) {
            goto LABEL_71;
          }
          if (*((char *)v20 + 31) < 0) {
            operator delete((void *)v20[1]);
          }
          atomic_ullong *volatile v21 = v20;
          uint64_t v22 = 0x1012C404EF22A49;
          goto LABEL_70;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v23 = *v19;
          if (!*v19) {
            goto LABEL_71;
          }
          uint64_t v24 = (void *)v23[1];
          if (v24)
          {
            v23[2] = (atomic_ullong)v24;
            operator delete(v24);
          }
          atomic_ullong *volatile v21 = v23;
          uint64_t v22 = 0x1080C409938AC02;
          goto LABEL_70;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v25 = *v19;
          if (!*v19) {
            goto LABEL_71;
          }
          double v50 = (void **)(v25 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
          goto LABEL_56;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v25 = *v19;
          if (!*v19) {
            goto LABEL_71;
          }
          double v50 = (void **)(v25 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_56:
          atomic_ullong *volatile v21 = v25;
          uint64_t v22 = 0x1020C405E66F15BLL;
          goto LABEL_70;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v26 = *v19;
          if (!*v19) {
            goto LABEL_71;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v26 + 2);
          atomic_ullong *volatile v21 = v26;
          unsigned int v27 = -235920773;
          goto LABEL_69;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v19, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v28 = *v19;
          if (*v19)
          {
            char v29 = (void *)v28[6];
            if (v29)
            {
              v28[7] = (atomic_ullong)v29;
              operator delete(v29);
            }
            uint64_t v30 = (void *)v28[3];
            if (v30)
            {
              v28[4] = (atomic_ullong)v30;
              operator delete(v30);
            }
            uint64_t v31 = (std::__shared_weak_count *)v28[2];
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
            atomic_ullong *volatile v21 = v28;
            unsigned int v27 = 2071181815;
LABEL_69:
            uint64_t v22 = v27 | 0x1030C4000000000;
LABEL_70:
            MEMORY[0x22A614FA0](v21, v22);
          }
LABEL_71:
          *int v19 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v32 = *(atomic_ullong **)(a2 + 72);
    *(void *)(a1 + 77) = *(void *)(a2 + 77);
    *int v19 = v32;
    unsigned int v33 = *(unsigned __int8 *)(a2 + 84);
    *(unsigned char *)(a1 + 84) = v33;
    if (v33 <= 9 && ((1 << v33) & 0x33C) != 0) {
      atomic_fetch_add(*v19, 1uLL);
    }
    atomic_ullong *volatile v34 = (atomic_ullong *volatile *)(a1 + 88);
    switch(*(unsigned char *)(a1 + 100))
    {
      case 2:
        if (atomic_fetch_add(*v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v35 = *v34;
          if (!*v34) {
            goto LABEL_107;
          }
          if (*((char *)v35 + 31) < 0) {
            operator delete((void *)v35[1]);
          }
          atomic_ullong *volatile v36 = v35;
          uint64_t v37 = 0x1012C404EF22A49;
          goto LABEL_106;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v38 = *v34;
          if (!*v34) {
            goto LABEL_107;
          }
          uint64_t v39 = (void *)v38[1];
          if (v39)
          {
            v38[2] = (atomic_ullong)v39;
            operator delete(v39);
          }
          atomic_ullong *volatile v36 = v38;
          uint64_t v37 = 0x1080C409938AC02;
          goto LABEL_106;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v40 = *v34;
          if (!*v34) {
            goto LABEL_107;
          }
          double v50 = (void **)(v40 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v50);
          goto LABEL_92;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v40 = *v34;
          if (!*v34) {
            goto LABEL_107;
          }
          double v50 = (void **)(v40 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v50);
LABEL_92:
          atomic_ullong *volatile v36 = v40;
          uint64_t v37 = 0x1020C405E66F15BLL;
          goto LABEL_106;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v41 = *v34;
          if (!*v34) {
            goto LABEL_107;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v41 + 2);
          atomic_ullong *volatile v36 = v41;
          unsigned int v42 = -235920773;
          goto LABEL_105;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v34, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v43 = *v34;
          if (*v34)
          {
            unsigned int v44 = (void *)v43[6];
            if (v44)
            {
              v43[7] = (atomic_ullong)v44;
              operator delete(v44);
            }
            unint64_t v45 = (void *)v43[3];
            if (v45)
            {
              v43[4] = (atomic_ullong)v45;
              operator delete(v45);
            }
            uint64_t v46 = (std::__shared_weak_count *)v43[2];
            if (v46) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v46);
            }
            atomic_ullong *volatile v36 = v43;
            unsigned int v42 = 2071181815;
LABEL_105:
            uint64_t v37 = v42 | 0x1030C4000000000;
LABEL_106:
            MEMORY[0x22A614FA0](v36, v37);
          }
LABEL_107:
          *atomic_ullong *volatile v34 = 0;
        }
        break;
      default:
        break;
    }
    unsigned int v47 = *(atomic_ullong **)(a2 + 88);
    *(void *)(a1 + 93) = *(void *)(a2 + 93);
    *atomic_ullong *volatile v34 = v47;
    unsigned int v48 = *(unsigned __int8 *)(a2 + 100);
    *(unsigned char *)(a1 + 10CoreML::Specification::DoubleRange::New(this, 0) = v48;
    if (v48 <= 9 && ((1 << v48) & 0x33C) != 0) {
      atomic_fetch_add(*v34, 1uLL);
    }
    std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 104, *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
  }
  return a1;
}

uint64_t std::vector<turi::option_handling::option_info>::push_back[abi:ne180100](uint64_t *a1, std::string *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 7;
    if ((unint64_t)(v10 + 1) >> 57) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 6;
    if (v11 >> 6 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::option_handling::option_info>>(v4, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = v14;
    unsigned int v16 = (std::string *)&v14[128 * v10];
    unsigned int v18 = &v14[128 * v13];
    turi::option_handling::option_info::option_info(v16, a2);
    int v17 = &v16[5].__r_.__value_.__s.__data_[8];
    std::vector<turi::option_handling::option_info>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<turi::option_handling::option_info>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = (uint64_t)turi::option_handling::option_info::option_info(*(std::string **)(v4 - 8), a2);
    uint64_t v9 = v7 + 128;
    a1[1] = v7 + 128;
  }
  a1[1] = v9;
  return result;
}

void sub_2243919EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void turi::option_manager::set_option(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v54[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (!v6) {
    goto LABEL_14;
  }
  atomic_ullong *volatile v8 = *(const std::string::value_type **)a2;
  if (v7 >= 0) {
    atomic_ullong *volatile v8 = (const std::string::value_type *)a2;
  }
  if (*v8 == 95)
  {
    uint64_t v9 = (int *)global_logger();
    if (v9[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v9)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v10 = (file_logger *)global_logger();
      started = file_logger::start_stream(v10, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/extensions/option_manager.cpp", "set_option", 146, 1);
      uint64_t v12 = pthread_getspecific(*((void *)started + 74));
      if (v12 && *((unsigned char *)v12 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"Ignore internal option ", 23);
      }
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      uint64_t v29 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
      uint64_t v30 = pthread_getspecific(*(void *)(v29 + 592));
      if (v30 && *((unsigned char *)v30 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)": ", 2);
      }
      memset(v54, 0, 13);
      if (v54 != (atomic_ullong **)a3)
      {
        *(atomic_ullong **)((char *)v54 + 5) = *(atomic_ullong **)(a3 + 5);
        v54[0] = *(atomic_ullong **)a3;
        BYTE4(v54[1]) = *(unsigned char *)(a3 + 12);
        if (BYTE4(v54[1]) <= 9u && ((1 << SBYTE4(v54[1])) & 0x33C) != 0) {
          atomic_fetch_add(v54[0], 1uLL);
        }
      }
      uint64_t v31 = file_logger::operator<<<turi::flexible_type>(v29, (turi::flexible_type_impl *)v54);
      uint64_t v32 = pthread_getspecific(*(void *)(v31 + 592));
      if (v32)
      {
        if (*((unsigned char *)v32 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(v32[2] - 24) + 16));
          unsigned int v33 = std::locale::use_facet((const std::locale *)v53, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
          std::locale::~locale((std::locale *)v53);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v31);
          if (*(_DWORD *)(v31 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      switch(BYTE4(v54[1]))
      {
        case 2:
          if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v34 = v54[0];
            if (v54[0])
            {
              if (*((char *)v54[0] + 31) < 0) {
                operator delete(*((void **)v54[0] + 1));
              }
              atomic_ullong *volatile v35 = v34;
              uint64_t v36 = 0x1012C404EF22A49;
              goto LABEL_87;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v39 = v54[0];
            if (v54[0])
            {
              atomic_ullong *volatile v40 = (void *)v54[0][1];
              if (v40)
              {
                v54[0][2] = (atomic_ullong)v40;
                operator delete(v40);
              }
              atomic_ullong *volatile v35 = v39;
              uint64_t v36 = 0x1080C409938AC02;
              goto LABEL_87;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v37 = v54[0];
            if (v54[0])
            {
              *(void *)int v53 = v54[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
              goto LABEL_82;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v37 = v54[0];
            if (v54[0])
            {
              *(void *)int v53 = v54[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
LABEL_82:
              atomic_ullong *volatile v35 = v37;
              uint64_t v36 = 0x1020C405E66F15BLL;
              goto LABEL_87;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v41 = v54[0];
            if (v54[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v54[0] + 2);
              atomic_ullong *volatile v35 = v41;
              unsigned int v38 = -235920773;
              goto LABEL_86;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v54[0], 0xFFFFFFFFFFFFFFFFLL) == 1 && v54[0])
          {
            atomic_ullong *volatile v35 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v54[0]);
            unsigned int v38 = 2071181815;
LABEL_86:
            uint64_t v36 = v38 | 0x1030C4000000000;
LABEL_87:
            MEMORY[0x22A614FA0](v35, v36);
          }
          break;
        default:
          break;
      }
      memset(v54, 0, 13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
LABEL_14:
    uint64_t v13 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)a2);
    if (a1 + 8 == v13)
    {
      *(void *)int v53 = a2;
      turi::option_manager::set_option(std::string const&,turi::flexible_type const&)::$_0::operator()();
    }
    turi::option_handling::option_info::interpret_value((turi::option_handling::option_info *)(*(void *)(a1 + 24) + (*(void *)(v13 + 56) << 7)), (const turi::flexible_type *)a3, (uint64_t *)v53);
    unint64_t v52 = (long long *)a2;
    int v14 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 48), (const void **)a2, (uint64_t)&std::piecewise_construct, &v52);
    uint64_t v15 = v14;
    unsigned int v16 = v14 + 7;
    if (v53 == (unsigned char *)(v14 + 7))
    {
      switch(v53[12])
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v42 = *(void **)v53;
            if (*(void *)v53)
            {
              if (*(char *)(*(void *)v53 + 31) < 0) {
                operator delete(*(void **)(*(void *)v53 + 8));
              }
              atomic_ullong *volatile v43 = v42;
              uint64_t v44 = 0x1012C404EF22A49;
              goto LABEL_115;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v47 = *(void **)v53;
            if (*(void *)v53)
            {
              unsigned int v48 = *(void **)(*(void *)v53 + 8);
              if (v48)
              {
                *(void *)(*(void *)v53 + 16) = v48;
                operator delete(v48);
              }
              atomic_ullong *volatile v43 = v47;
              uint64_t v44 = 0x1080C409938AC02;
              goto LABEL_115;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v45 = *(void **)v53;
            if (*(void *)v53)
            {
              unint64_t v52 = (long long *)(*(void *)v53 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
              goto LABEL_110;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v45 = *(void **)v53;
            if (*(void *)v53)
            {
              unint64_t v52 = (long long *)(*(void *)v53 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
LABEL_110:
              atomic_ullong *volatile v43 = v45;
              uint64_t v44 = 0x1020C405E66F15BLL;
              goto LABEL_115;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v49 = *(void **)v53;
            if (*(void *)v53)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v53 + 16));
              atomic_ullong *volatile v43 = v49;
              unsigned int v46 = -235920773;
              goto LABEL_114;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v53, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)v53)
          {
            atomic_ullong *volatile v43 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v53);
            unsigned int v46 = 2071181815;
LABEL_114:
            uint64_t v44 = v46 | 0x1030C4000000000;
LABEL_115:
            MEMORY[0x22A614FA0](v43, v44);
          }
          break;
        default:
          return;
      }
    }
    else
    {
      switch(*((unsigned char *)v14 + 68))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v17 = (atomic_ullong *volatile)*v16;
            if (!*v16) {
              goto LABEL_48;
            }
            if (*((char *)v17 + 31) < 0) {
              operator delete((void *)v17[1]);
            }
            atomic_ullong *volatile v18 = v17;
            uint64_t v19 = 0x1012C404EF22A49;
            goto LABEL_47;
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v26 = (atomic_ullong *volatile)*v16;
            if (!*v16) {
              goto LABEL_48;
            }
            unsigned int v27 = (void *)v26[1];
            if (v27)
            {
              _OWORD v26[2] = (atomic_ullong)v27;
              operator delete(v27);
            }
            atomic_ullong *volatile v18 = v26;
            uint64_t v19 = 0x1080C409938AC02;
            goto LABEL_47;
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v20 = (atomic_ullong *volatile)*v16;
            if (!*v16) {
              goto LABEL_48;
            }
            unint64_t v52 = (long long *)(v20 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
            goto LABEL_42;
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v20 = (atomic_ullong *volatile)*v16;
            if (!*v16) {
              goto LABEL_48;
            }
            unint64_t v52 = (long long *)(v20 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
LABEL_42:
            atomic_ullong *volatile v18 = v20;
            uint64_t v19 = 0x1020C405E66F15BLL;
            goto LABEL_47;
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v28 = (atomic_ullong *volatile)*v16;
            if (!*v16) {
              goto LABEL_48;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v28 + 2);
            atomic_ullong *volatile v18 = v28;
            unsigned int v25 = -235920773;
            goto LABEL_46;
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)*v16, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v21 = (atomic_ullong *volatile)*v16;
            if (*v16)
            {
              uint64_t v22 = (void *)v21[6];
              if (v22)
              {
                v21[7] = (atomic_ullong)v22;
                operator delete(v22);
              }
              atomic_ullong *volatile v23 = (void *)v21[3];
              if (v23)
              {
                v21[4] = (atomic_ullong)v23;
                operator delete(v23);
              }
              uint64_t v24 = (std::__shared_weak_count *)v21[2];
              if (v24) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v24);
              }
              atomic_ullong *volatile v18 = v21;
              unsigned int v25 = 2071181815;
LABEL_46:
              uint64_t v19 = v25 | 0x1030C4000000000;
LABEL_47:
              MEMORY[0x22A614FA0](v18, v19);
            }
LABEL_48:
            uint64_t *v16 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t *v16 = *(void *)v53;
      *(uint64_t *)((char *)v16 + 5) = *(void *)&v53[5];
      *((unsigned char *)v15 + 68) = v53[12];
    }
  }
}

void sub_224392244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::locale a17, int a18, char a19, uint64_t a20,int a21,char a22)
{
  std::locale::~locale(&a17);
  switch(a22)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v23 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      if (*(char *)(a20 + 31) < 0) {
        operator delete(*(void **)(a20 + 8));
      }
      uint64_t v24 = (void *)v23;
      uint64_t v25 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      uint64_t v29 = *(void **)(a20 + 8);
      if (v29)
      {
        *(void *)(a20 + 16) = v29;
        operator delete(v29);
      }
      uint64_t v24 = (void *)v28;
      uint64_t v25 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      a16 = a20 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v26 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      a16 = a20 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
LABEL_21:
      uint64_t v24 = (void *)v26;
      uint64_t v25 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a20, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v30 = a20;
      if (!a20) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a20 + 16));
      uint64_t v24 = (void *)v30;
      unsigned int v27 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a20, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a20) {
        goto LABEL_27;
      }
      uint64_t v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a20);
      unsigned int v27 = 2071181815;
LABEL_25:
      uint64_t v25 = v27 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v24, v25);
LABEL_27:
      a20 = 0;
      a21 = 0;
      a22 = 0;
      if (a14 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::option_manager::set_options(uint64_t a1, void *a2)
{
  long long v2 = a2 + 1;
  int v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      turi::option_manager::set_option(a1, (uint64_t)(v3 + 4), (uint64_t)(v3 + 7));
      unint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          int v3 = v6;
        }
        while (!v7);
      }
      int v3 = v6;
    }
    while (v6 != v2);
  }
}

uint64_t turi::option_manager::value(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 48, a2);
  if (a1 + 56 == v3) {
    turi::option_manager::value(std::string const&)const::$_0::operator()();
  }
  return v3 + 56;
}

uint64_t turi::option_manager::current_option_values(turi::option_manager *this)
{
  return (uint64_t)this + 48;
}

uint64_t *turi::option_manager::get_default_options@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = this[3];
  uint64_t v4 = this[4];
  if (v3 != v4)
  {
    uint64_t v5 = v3 + 48;
    do
    {
      uint64_t v23 = (long long *)(v5 - 48);
      this = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)(v5 - 48), (uint64_t)&std::piecewise_construct, &v23);
      uint64_t v6 = this;
      BOOL v7 = this + 7;
      if ((uint64_t *)v5 != this + 7)
      {
        switch(*((unsigned char *)this + 68))
        {
          case 2:
            if (atomic_fetch_add((atomic_ullong *volatile)*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v8 = (atomic_ullong *volatile)*v7;
              if (!*v7) {
                goto LABEL_36;
              }
              if (*((char *)v8 + 31) < 0) {
                operator delete((void *)v8[1]);
              }
              atomic_ullong *volatile v9 = v8;
              uint64_t v10 = 0x1012C404EF22A49;
              goto LABEL_35;
            }
            break;
          case 3:
            if (atomic_fetch_add((atomic_ullong *volatile)*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v11 = (atomic_ullong *volatile)*v7;
              if (!*v7) {
                goto LABEL_36;
              }
              uint64_t v12 = (void *)v11[1];
              if (v12)
              {
                void v11[2] = (atomic_ullong)v12;
                operator delete(v12);
              }
              atomic_ullong *volatile v9 = v11;
              uint64_t v10 = 0x1080C409938AC02;
              goto LABEL_35;
            }
            break;
          case 4:
            if (atomic_fetch_add((atomic_ullong *volatile)*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = (atomic_ullong *volatile)*v7;
              if (!*v7) {
                goto LABEL_36;
              }
              uint64_t v23 = (long long *)(v13 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
              goto LABEL_21;
            }
            break;
          case 5:
            if (atomic_fetch_add((atomic_ullong *volatile)*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v13 = (atomic_ullong *volatile)*v7;
              if (!*v7) {
                goto LABEL_36;
              }
              uint64_t v23 = (long long *)(v13 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
LABEL_21:
              atomic_ullong *volatile v9 = v13;
              uint64_t v10 = 0x1020C405E66F15BLL;
              goto LABEL_35;
            }
            break;
          case 8:
            if (atomic_fetch_add((atomic_ullong *volatile)*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v14 = (atomic_ullong *volatile)*v7;
              if (!*v7) {
                goto LABEL_36;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v14 + 2);
              atomic_ullong *volatile v9 = v14;
              unsigned int v15 = -235920773;
              goto LABEL_34;
            }
            break;
          case 9:
            if (atomic_fetch_add((atomic_ullong *volatile)*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v16 = (atomic_ullong *volatile)*v7;
              if (*v7)
              {
                atomic_ullong *volatile v17 = (void *)v16[6];
                if (v17)
                {
                  v16[7] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                atomic_ullong *volatile v18 = (void *)v16[3];
                if (v18)
                {
                  v16[4] = (atomic_ullong)v18;
                  operator delete(v18);
                }
                uint64_t v19 = (std::__shared_weak_count *)v16[2];
                if (v19) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                }
                atomic_ullong *volatile v9 = v16;
                unsigned int v15 = 2071181815;
LABEL_34:
                uint64_t v10 = v15 | 0x1030C4000000000;
LABEL_35:
                this = (uint64_t *)MEMORY[0x22A614FA0](v9, v10);
              }
LABEL_36:
              uint64_t *v7 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v20 = *(void *)v5;
        *(uint64_t *)((char *)v7 + 5) = *(void *)(v5 + 5);
        uint64_t *v7 = v20;
        unsigned int v21 = *(unsigned __int8 *)(v5 + 12);
        *((unsigned char *)v6 + 68) = v21;
        if (v21 <= 9 && ((1 << v21) & 0x33C) != 0) {
          atomic_fetch_add((atomic_ullong *volatile)*v7, 1uLL);
        }
      }
      uint64_t v22 = v5 + 80;
      v5 += 128;
    }
    while (v22 != v4);
  }
  return this;
}

void sub_2243928A8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

BOOL turi::option_manager::is_option(uint64_t a1, const void **a2)
{
  return std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1, a2) != 0;
}

void turi::option_manager::save(turi::option_manager *this, turi::oarchive *a2)
{
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>>((uint64_t)a2, *(const void ***)this, (const void **)this + 1, *((void *)this + 2));
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::option_handling::option_info,false>::exec((uint64_t)a2, (uint64_t *)this + 3);
  uint64_t v4 = (void *)*((void *)this + 6);
  uint64_t v5 = *((void *)this + 8);
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>>((uint64_t)a2, v4, (void *)this + 7, v5);
}

turi::iarchive *turi::option_manager::load(turi::option_manager *this, turi::iarchive *a2)
{
  uint64_t v4 = (void *)((char *)this + 8);
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)this, *((char **)this + 1));
  *(void *)this = v4;
  *((void *)this + 2) = 0;
  void *v4 = 0;
  turi::deserialize_iterator<turi::iarchive,std::pair<std::string,unsigned long>,std::insert_iterator<std::map<std::string,unsigned long>>>((uint64_t)a2, (uint64_t)this, (uint64_t)v4);
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::option_handling::option_info,false>::exec(a2, (uint64_t *)this + 3);
  uint64_t v6 = (void *)*((void *)this + 7);
  uint64_t v5 = (void *)((char *)this + 56);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  *uint64_t v5 = 0;
  v5[1] = 0;
  return turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flexible_type>,std::insert_iterator<std::map<std::string,turi::flexible_type>>>(a2, (uint64_t)(v5 - 1), (uint64_t)v5);
}

void std::vector<turi::option_handling::option_info>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (long long *)*a1)
  {
    do
    {
      v6 -= 128;
      v4 -= 8;
      std::allocator<turi::option_handling::option_info>::construct[abi:ne180100]<turi::option_handling::option_info,turi::option_handling::option_info>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::allocator<turi::option_handling::option_info>::construct[abi:ne180100]<turi::option_handling::option_info,turi::option_handling::option_info>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v4 = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 4CoreML::Specification::DoubleRange::New(this, 0) = *((void *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 6CoreML::Specification::DoubleRange::New(this, 0) = 0;
  uint64_t v5 = *((void *)a3 + 6);
  *(void *)(a2 + 53) = *(void *)((char *)a3 + 53);
  *(void *)(a2 + 48) = v5;
  *(unsigned char *)(a2 + 6CoreML::Specification::DoubleRange::New(this, 0) = *((unsigned char *)a3 + 60);
  *((unsigned char *)a3 + 6CoreML::Specification::DoubleRange::New(this, 0) = 0;
  *(_DWORD *)(a2 + 64) = *((_DWORD *)a3 + 16);
  *(void *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 8CoreML::Specification::DoubleRange::New(this, 0) = 0;
  *(unsigned char *)(a2 + 84) = 0;
  uint64_t v6 = *((void *)a3 + 9);
  *(void *)(a2 + 77) = *(void *)((char *)a3 + 77);
  *(void *)(a2 + 72) = v6;
  *(unsigned char *)(a2 + 84) = *((unsigned char *)a3 + 84);
  *((unsigned char *)a3 + 84) = 0;
  *(void *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 10CoreML::Specification::DoubleRange::New(this, 0) = 0;
  uint64_t v7 = *((void *)a3 + 11);
  *(void *)(a2 + 93) = *(void *)((char *)a3 + 93);
  *(void *)(a2 + 88) = v7;
  *(unsigned char *)(a2 + 10CoreML::Specification::DoubleRange::New(this, 0) = *((unsigned char *)a3 + 100);
  *((unsigned char *)a3 + 10CoreML::Specification::DoubleRange::New(this, 0) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 12CoreML::Specification::DoubleRange::New(this, 0) = 0;
  __n128 result = *(__n128 *)((char *)a3 + 104);
  *(__n128 *)(a2 + 104) = result;
  *(void *)(a2 + 12CoreML::Specification::DoubleRange::New(this, 0) = *((void *)a3 + 15);
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  return result;
}

uint64_t std::__split_buffer<turi::option_handling::option_info>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(i - 128));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned long>,std::__tree_node<std::__value_type<std::string,unsigned long>,void *> *,long>>>(uint64_t a1, const void **a2, const void **a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v9)
    {
      size_t v14 = 2 * v9 + 16;
      *(void *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v14;
      unsigned int v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        uint64_t result = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::pair<std::string const,unsigned long>,false,void>::exec(a1, a2 + 4);
      atomic_ullong *volatile v11 = (const void **)a2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          atomic_ullong *volatile v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (const void **)a2[2];
          BOOL v13 = *v12 == a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
  return result;
}

char *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<std::string const,unsigned long>,false,void>::exec(uint64_t a1, const void **a2)
{
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, a2);
  long long v4 = a2 + 3;
  if (*(void *)a1)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v7 = 2 * v6 + 16;
      *(void *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v7;
      uint64_t v8 = *(char ***)(a1 + 16);
      if (v8)
      {
        uint64_t result = *v8;
        size_t v9 = v8[1] - *v8;
        BOOL v10 = v7 >= v9;
        std::vector<char>::size_type v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v11);
          uint64_t result = **(char ***)(a1 + 16);
        }
        else if (!v10)
        {
          v8[1] = &result[v7];
        }
      }
      else
      {
        uint64_t result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v7, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(char **)(a1 + 24);
    }
    *(void *)&result[*(void *)(a1 + 32)] = *v4;
    *(void *)(a1 + 32) += 8;
  }
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::option_handling::option_info,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (a2[1] - *a2) >> 7;
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v10 = 2 * v6 + 16;
      *(void *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v10;
      std::vector<char>::size_type v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        uint64_t result = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = turi::option_handling::option_info::save((turi::option_handling::option_info *)(v7 + v8), (turi::oarchive *)a1);
      ++v9;
      uint64_t v7 = *a2;
      v8 += 128;
    }
    while (v9 < (a2[1] - *a2) >> 7);
  }
  return result;
}

void turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v8)
    {
      size_t v14 = 2 * v8 + 16;
      *(void *)(a1 + 4CoreML::Specification::DoubleRange::New(this, 0) = v14;
      unsigned int v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        unint64_t v9 = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          unint64_t v9 = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &v9[v14];
        }
      }
      else
      {
        unint64_t v9 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v9;
    }
    else
    {
      unint64_t v9 = *(char **)(a1 + 24);
    }
    *(void *)&v9[*(void *)(a1 + 32)] = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)a2 + 4);
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2 + 7);
      std::vector<char>::size_type v11 = (void *)a2[1];
      if (v11)
      {
        do
        {
          size_t v12 = v11;
          std::vector<char>::size_type v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          size_t v12 = (void *)a2[2];
          BOOL v13 = *v12 == (void)a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
}

void turi::deserialize_iterator<turi::iarchive,std::pair<std::string,unsigned long>,std::insert_iterator<std::map<std::string,unsigned long>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = a2;
  v13[1] = a3;
  unint64_t v12 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v6 = *(void *)(v4 + v5);
    unint64_t v12 = v6;
    *(void *)(a1 + 24) = v5 + 8;
    if (v6)
    {
      unint64_t v7 = 0;
      do
      {
        *(_OWORD *)uint64_t v10 = 0u;
        long long v11 = 0u;
        turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<std::string,unsigned long>,false,void>::exec(a1, (std::string *)v10);
        if (SBYTE7(v11) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v10[0], (std::string::size_type)v10[1]);
        }
        else
        {
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
          __p.__r_.__value_.__r.__words[2] = v11;
        }
        uint64_t v9 = *((void *)&v11 + 1);
        std::insert_iterator<std::map<std::string,unsigned long>>::operator=[abi:ne180100]((uint64_t)v13, (const void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v11) < 0) {
          operator delete(v10[0]);
        }
        ++v7;
      }
      while (v7 < v12);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_224393190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,unsigned long>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MPSRNNMatrixId> const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void *turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<std::string,unsigned long>,false,void>::exec(uint64_t a1, std::string *a2)
{
  uint64_t result = turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec(a1, a2);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    a2[1].__r_.__value_.__r.__words[0] = *(void *)(v5 + *(void *)(a1 + 24));
    *(void *)(a1 + 24) += 8;
  }
  else
  {
    return (void *)std::istream::read();
  }
  return result;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::option_handling::option_info,false>::exec(turi::iarchive *a1, uint64_t *a2)
{
  unint64_t v10 = 0;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v10 = *(void *)(v4 + v5);
    *((void *)a1 + 3) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *a2;
  for (uint64_t i = a2[1];
        i != v7;
  a2[1] = v7;
  std::vector<turi::option_handling::option_info>::resize(a2, v10);
  if (v10)
  {
    uint64_t v8 = 0;
    for (unint64_t j = 0; j < v10; ++j)
    {
      turi::option_handling::option_info::load((std::string *)(*a2 + v8), a1);
      v8 += 128;
    }
  }
}

void std::vector<turi::option_handling::option_info>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 7;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + (a2 << 7);
      while (v3 != v6)
        turi::option_handling::option_info::~option_info((turi::option_handling::option_info *)(v3 - 128));
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<turi::option_handling::option_info>::__append(a1, v5);
  }
}

void std::vector<turi::option_handling::option_info>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 7)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), a2 << 7);
      v7 += a2 << 7;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 7);
    if (v9 >> 57) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 7;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 6 > v9) {
      unint64_t v9 = v11 >> 6;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      BOOL v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::option_handling::option_info>>(v4, v12);
    }
    else {
      BOOL v13 = 0;
    }
    size_t v14 = v13;
    unsigned int v15 = &v13[128 * v10];
    BOOL v17 = &v13[128 * v12];
    bzero(v15, a2 << 7);
    size_t v16 = &v15[128 * a2];
    std::vector<turi::option_handling::option_info>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<turi::option_handling::option_info>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_2243934D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::option_handling::option_info>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

turi::iarchive *turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flexible_type>,std::insert_iterator<std::map<std::string,turi::flexible_type>>>(turi::iarchive *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v11 = *MEMORY[0x263EF8340];
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v4 = *((void *)result + 2);
  if (!v4) {
    return (turi::iarchive *)std::istream::read();
  }
  uint64_t v5 = *((void *)result + 3);
  unint64_t v7 = *(void *)(v4 + v5);
  *((void *)result + 3) = v5 + 8;
  if (v7)
  {
    for (unint64_t i = 0; i < v7; ++i)
    {
      memset(v10, 0, sizeof(v10));
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)v3, (std::string *)v10);
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(v3, (unint64_t *)&v10[24]);
      std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string,turi::flexible_type,0>(&v9, (std::string *)v10);
      std::insert_iterator<std::map<std::string,turi::flexible_type>>::operator=[abi:ne180100]((uint64_t)v8, (const void **)&v9.__r_.__value_.__l.__data_);
      std::pair<std::string const,turi::flexible_type>::~pair((uint64_t)&v9);
      uint64_t result = (turi::iarchive *)std::pair<std::string,turi::flexible_type>::~pair((uint64_t)v10);
    }
  }
  return result;
}

void sub_2243935F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t std::insert_iterator<std::map<std::string,turi::flexible_type>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (long long *)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string,turi::flexible_type,0>(std::string *this, std::string *a2)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = (atomic_ullong *volatile *)&this[1];
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  if (a2 != this)
  {
    std::string::pointer data = (atomic_ullong *)a2[1].__r_.__value_.__l.__data_;
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(std::string::size_type *)((char *)a2[1].__r_.__value_.__r.__words + 5);
    *uint64_t v5 = data;
    unsigned int v7 = a2[1].__r_.__value_.__s.__data_[12];
    this[1].__r_.__value_.__s.__data_[12] = v7;
    if (v7 <= 9 && ((1 << v7) & 0x33C) != 0) {
      atomic_fetch_add(*v5, 1uLL);
    }
  }
  return this;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flexible_type>>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  BOOL v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  unsigned int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t turi::flex_dict_view::flex_dict_view(uint64_t this, const turi::flexible_type *a2)
{
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(_OWORD *)(this + 4CoreML::Specification::DoubleRange::New(this, 0) = 0u;
  if (*((unsigned char *)a2 + 12) != 5) {
    turi::flex_dict_view::flex_dict_view(turi::flexible_type const&)::$_0::operator()();
  }
  *(void *)this = *(void *)a2 + 8;
  return this;
}

void sub_224393834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  a10 = (void **)(v10 + 32);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

unsigned __int8 *turi::flex_dict_view::operator[](unsigned __int8 ***a1, turi::flexible_type_impl *a2)
{
  uint64_t v3 = **a1;
  long long v4 = (*a1)[1];
  if (v3 == v4)
  {
LABEL_111:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v71);
    uint64_t v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Cannot find key ", 16);
    switch(*((unsigned char *)a2 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v74);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_125;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v74);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_125:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&v74);
        goto LABEL_131;
      case 2:
        uint64_t v67 = *(void *)a2;
        if (*(char *)(*(void *)a2 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(v67 + 8), *(void *)(v67 + 16));
        }
        else
        {
          long long v68 = *(_OWORD *)(v67 + 8);
          v73.__r_.__value_.__r.__words[2] = *(void *)(v67 + 24);
          *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v68;
        }
        goto LABEL_131;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v74, (void *)(*(void *)a2 + 8));
        goto LABEL_131;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v74, (uint64_t *)(*(void *)a2 + 8));
        goto LABEL_131;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v74, (void *)(*(void *)a2 + 8));
        goto LABEL_131;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(a2, &v73);
        goto LABEL_131;
      case 7:
        memset(&v73, 0, sizeof(v73));
        goto LABEL_131;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_131;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v74, (void *)(*(void *)a2 + 8));
LABEL_131:
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v69 = &v73;
        }
        else {
          double v69 = (std::string *)v73.__r_.__value_.__r.__words[0];
        }
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v73.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v69, size);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v73.__r_.__value_.__l.__data_);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" in flex_dict.", 14);
        uint64_t v74 = v71;
        turi::flex_dict_view::operator[](turi::flexible_type const&)const::$_0::operator()();
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
LABEL_140:
    turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (2)
  {
    switch(*((unsigned char *)a2 + 12))
    {
      case 0:
        switch(v3[12])
        {
          case 0u:
            if (*(void *)v3 == *(void *)a2) {
              return v3 + 16;
            }
            goto LABEL_110;
          case 1u:
            double v55 = *(double *)v3;
            uint64_t v56 = *(void *)a2;
            goto LABEL_88;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            if (*(void *)a2 == (uint64_t)(*(void *)v3 << 8) >> 8 && !*((_DWORD *)v3 + 2)) {
              return v3 + 16;
            }
            goto LABEL_110;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 1:
        switch(v3[12])
        {
          case 0u:
            double v55 = *(double *)a2;
            uint64_t v56 = *(void *)v3;
LABEL_88:
            double v60 = (double)v56;
            goto LABEL_90;
          case 1u:
            double v55 = *(double *)v3;
            double v60 = *(double *)a2;
LABEL_90:
            if (v55 == v60) {
              return v3 + 16;
            }
            goto LABEL_110;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            double v59 = vabdd_f64((double)*((int *)v3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v3 << 8) >> 8), *(double *)a2);
            goto LABEL_93;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 2:
        unsigned int v45 = v3[12];
        if (v45 - 3 < 7 || v45 < 2) {
          goto LABEL_110;
        }
        if (v45 != 2) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        double v47 = *(double *)v3;
        size_t v48 = *(char *)(*(void *)v3 + 31) < 0
            ? *(void *)(*(void *)&v47 + 16)
            : *(unsigned __int8 *)(*(void *)v3 + 31);
        uint64_t v61 = *(void *)a2;
        uint64_t v62 = *(char *)(*(void *)a2 + 31) < 0 ? *(void *)(v61 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
        if (v48 != v62) {
          goto LABEL_110;
        }
        uint64_t v63 = (unsigned __int8 *)(*(void *)&v47 + 8);
        if ((*(unsigned char *)(*(void *)v3 + 31) & 0x80) != 0) {
          uint64_t v63 = *(unsigned __int8 **)v63;
        }
        uint64_t v64 = (unsigned __int8 *)(v61 + 8);
        if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0)
        {
          uint64_t v64 = *(unsigned __int8 **)v64;
          if ((*(unsigned char *)(*(void *)v3 + 31) & 0x80) == 0)
          {
LABEL_104:
            if (!v48) {
              return v3 + 16;
            }
            while (*v63 == *v64)
            {
              ++v63;
              ++v64;
              if (!--v48) {
                return v3 + 16;
              }
            }
            goto LABEL_110;
          }
        }
        else if ((*(unsigned char *)(*(void *)v3 + 31) & 0x80) == 0)
        {
          goto LABEL_104;
        }
        if (memcmp(v63, v64, v48))
        {
LABEL_110:
          v3 += 32;
          if (v3 == v4) {
            goto LABEL_111;
          }
          continue;
        }
        return v3 + 16;
      case 3:
        unsigned int v49 = v3[12];
        if (v49 > 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v49 != 3) {
          goto LABEL_110;
        }
        double v50 = *(double **)(*(void *)v3 + 8);
        int v51 = *(double **)(*(void *)v3 + 16);
        unint64_t v52 = v51 - v50;
        int v53 = *(double **)(*(void *)a2 + 8);
        if (v52 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v53) >> 3) {
          goto LABEL_110;
        }
        if (v51 == v50) {
          return v3 + 16;
        }
        if (v52 <= 1) {
          unint64_t v52 = 1;
        }
        while (*v50 == *v53)
        {
          ++v53;
          ++v50;
          if (!--v52) {
            return v3 + 16;
          }
        }
        goto LABEL_110;
      case 4:
        unsigned int v5 = v3[12];
        if (v5 > 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v5 == 4
          && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v73, (uint64_t *)(*(void *)v3 + 8), (void *)(*(void *)a2 + 8)) & 1) != 0)
        {
          return v3 + 16;
        }
        goto LABEL_110;
      case 5:
        unsigned int v57 = v3[12];
        if (v57 > 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v57 == 5
          && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v73, (uint64_t **)(*(void *)v3 + 8), (uint64_t **)(*(void *)a2 + 8)))
        {
          return v3 + 16;
        }
        goto LABEL_110;
      case 6:
        switch(v3[12])
        {
          case 0u:
            if (*(void *)v3 == (uint64_t)(*(void *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2)) {
              return v3 + 16;
            }
            goto LABEL_110;
          case 1u:
            double v59 = vabdd_f64(*(double *)v3, (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8));
LABEL_93:
            if (v59 < 0.0000005) {
              return v3 + 16;
            }
            goto LABEL_110;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            if (((*(void *)a2 ^ *(void *)v3) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v3 + 2) == *((_DWORD *)a2 + 2))
            {
              return v3 + 16;
            }
            goto LABEL_110;
          default:
            goto LABEL_140;
        }
      case 7:
        unsigned int v54 = v3[12];
        if (v54 < 7 || v54 - 8 < 2) {
          goto LABEL_110;
        }
        if (v54 != 7) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return v3 + 16;
      case 8:
        unsigned int v58 = v3[12];
        if (v58 < 8) {
          goto LABEL_110;
        }
        if (v58 == 8)
        {
          if (turi::image_type::operator==(*(void *)v3 + 8, *(void *)a2 + 8)) {
            return v3 + 16;
          }
        }
        else if (v58 != 9)
        {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_110;
      case 9:
        unsigned int v6 = v3[12];
        if (v6 < 9) {
          goto LABEL_110;
        }
        if (v6 != 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        uint64_t v7 = *(void *)a2;
        uint64_t v8 = *(void **)v3;
        if (*(void *)a2 == *(void *)v3) {
          return v3 + 16;
        }
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v8 + 1), v7 + 8)) {
          goto LABEL_110;
        }
        uint64_t v10 = (char *)v8[3];
        std::string v9 = (char *)v8[4];
        uint64_t v11 = v9 - v10;
        if (v9 == v10) {
          return v3 + 16;
        }
        if (!v8[1]) {
          return v3 + 16;
        }
        uint64_t v12 = 1;
        do
        {
          uint64_t v13 = *(void *)v10;
          v10 += 8;
          v12 *= v13;
        }
        while (v10 != v9);
        if (!v12) {
          return v3 + 16;
        }
        v71[0] = 0;
        std::vector<unsigned long>::vector(&v74, v11 >> 3, v71);
        size_t v14 = v74;
        unsigned int v15 = v75;
        uint64_t v16 = **(void **)(v7 + 8);
        uint64_t v17 = (char *)v75 - (char *)v74;
        unint64_t v18 = v75 - v74;
        unint64_t v19 = v18 - 1;
        if (v18 <= 1) {
          uint64_t v20 = 1;
        }
        else {
          uint64_t v20 = v75 - v74;
        }
        do
        {
          if (v15 == v14)
          {
            uint64_t v28 = 0;
            double v29 = *(double *)(*(void *)v8[1] + 8 * v8[9]);
          }
          else
          {
            uint64_t v21 = 0;
            uint64_t v22 = (uint64_t *)v8[6];
            uint64_t v23 = v14;
            uint64_t v24 = v20;
            do
            {
              uint64_t v26 = *v23++;
              uint64_t v25 = v26;
              uint64_t v27 = *v22++;
              v21 += v27 * v25;
              --v24;
            }
            while (v24);
            uint64_t v28 = 0;
            double v29 = *(double *)(*(void *)v8[1] + 8 * (v8[9] + v21));
            uint64_t v30 = *(uint64_t **)(v7 + 48);
            uint64_t v31 = v14;
            uint64_t v32 = v20;
            do
            {
              uint64_t v34 = *v31++;
              uint64_t v33 = v34;
              uint64_t v35 = *v30++;
              v28 += v35 * v33;
              --v32;
            }
            while (v32);
          }
          double v36 = *(double *)(v16 + 8 * (*(void *)(v7 + 72) + v28));
          if (v29 != v36) {
            break;
          }
          uint64_t v37 = v18;
          unint64_t v38 = v18 - 1;
          if (v17 < 1) {
            goto LABEL_34;
          }
          uint64_t v39 = v8[3];
          unint64_t v40 = v14[v19] + 1;
          v14[v19] = v40;
          unint64_t v41 = (v17 & 0xFFFFFFFFFFFFFFF8) - 16;
          uint64_t v42 = v18 - 1;
          if (v40 < *(void *)(v39 + 8 * v19))
          {
            uint64_t v37 = 1;
            unint64_t v38 = v18 - 1;
LABEL_34:
            if ((v38 & 0x8000000000000000) != 0) {
              break;
            }
            continue;
          }
          do
          {
            *(uint64_t *)((char *)v14 + v41 + 8) = 0;
            if (v42 <= 0)
            {
              std::string v75 = v14;
              operator delete(v14);
              return v3 + 16;
            }
            --v42;
            unint64_t v43 = *(uint64_t *)((char *)v14 + v41) + 1;
            *(uint64_t *)((char *)v14 + v41) = v43;
            unint64_t v44 = *(void *)(v39 + v41);
            v41 -= 8;
          }
          while (v43 >= v44);
          uint64_t v37 = 1;
          if (v42 < 0) {
            break;
          }
        }
        while (v37);
        if (v14)
        {
          std::string v75 = v14;
          operator delete(v14);
        }
        if (v29 == v36) {
          return v3 + 16;
        }
        goto LABEL_110;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
  }
}

void sub_224394058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
}

uint64_t turi::flex_dict_view::has_key(unsigned __int8 ***this, const turi::flexible_type *a2)
{
  long long v2 = **this;
  uint64_t v3 = (*this)[1];
  if (v2 == v3) {
    return 0;
  }
  while (2)
  {
    switch(*((unsigned char *)a2 + 12))
    {
      case 0:
        switch(v2[12])
        {
          case 0u:
            if (*(void *)v2 == *(void *)a2) {
              return 1;
            }
            goto LABEL_110;
          case 1u:
            double v5 = *(double *)v2;
            uint64_t v6 = *(void *)a2;
            goto LABEL_79;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            if (*(void *)a2 == (uint64_t)(*(void *)v2 << 8) >> 8 && !*((_DWORD *)v2 + 2)) {
              return 1;
            }
            goto LABEL_110;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 1:
        switch(v2[12])
        {
          case 0u:
            double v5 = *(double *)a2;
            uint64_t v6 = *(void *)v2;
LABEL_79:
            double v59 = (double)v6;
            goto LABEL_84;
          case 1u:
            double v5 = *(double *)v2;
            double v59 = *(double *)a2;
LABEL_84:
            if (v5 == v59) {
              return 1;
            }
            goto LABEL_110;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            double v60 = vabdd_f64((double)*((int *)v2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)v2 << 8) >> 8), *(double *)a2);
            goto LABEL_88;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 2:
        unsigned int v7 = v2[12];
        if (v7 - 3 < 7 || v7 < 2) {
          goto LABEL_110;
        }
        if (v7 != 2) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        double v9 = *(double *)v2;
        size_t v10 = *(char *)(*(void *)v2 + 31) < 0
            ? *(void *)(*(void *)&v9 + 16)
            : *(unsigned __int8 *)(*(void *)v2 + 31);
        double v61 = *(double *)a2;
        uint64_t v62 = *(char *)(*(void *)a2 + 31) < 0
            ? *(void *)(*(void *)&v61 + 16)
            : *(unsigned __int8 *)(*(void *)a2 + 31);
        if (v10 != v62) {
          goto LABEL_110;
        }
        uint64_t v63 = (unsigned __int8 *)(*(void *)&v9 + 8);
        if ((*(unsigned char *)(*(void *)v2 + 31) & 0x80) != 0) {
          uint64_t v63 = *(unsigned __int8 **)v63;
        }
        uint64_t v64 = (unsigned __int8 *)(*(void *)&v61 + 8);
        if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
          uint64_t v64 = *(unsigned __int8 **)v64;
        }
        if ((*(unsigned char *)(*(void *)v2 + 31) & 0x80) != 0)
        {
          if (!memcmp(v63, v64, v10)) {
            return 1;
          }
        }
        else
        {
          if (!v10) {
            return 1;
          }
          while (*v63 == *v64)
          {
            ++v63;
            ++v64;
            if (!--v10) {
              return 1;
            }
          }
        }
        goto LABEL_110;
      case 3:
        unsigned int v11 = v2[12];
        if (v11 > 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v11 != 3) {
          goto LABEL_110;
        }
        uint64_t v12 = *(double **)(*(void *)v2 + 8);
        uint64_t v13 = *(double **)(*(void *)v2 + 16);
        unint64_t v14 = v13 - v12;
        unsigned int v15 = *(double **)(*(void *)a2 + 8);
        if (v14 != (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v15) >> 3) {
          goto LABEL_110;
        }
        if (v13 == v12) {
          return 1;
        }
        if (v14 <= 1) {
          unint64_t v14 = 1;
        }
        while (*v12 == *v15)
        {
          ++v15;
          ++v12;
          if (!--v14) {
            return 1;
          }
        }
        goto LABEL_110;
      case 4:
        unsigned int v16 = v2[12];
        if (v16 > 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v16 == 4
          && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v66, (uint64_t *)(*(void *)v2 + 8), (void *)(*(void *)a2 + 8)) & 1) != 0)
        {
          return 1;
        }
        goto LABEL_110;
      case 5:
        unsigned int v17 = v2[12];
        if (v17 > 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (v17 == 5
          && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v66, (uint64_t **)(*(void *)v2 + 8), (uint64_t **)(*(void *)a2 + 8)))
        {
          return 1;
        }
        goto LABEL_110;
      case 6:
        switch(v2[12])
        {
          case 0u:
            if (*(void *)v2 == (uint64_t)(*(void *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2)) {
              return 1;
            }
            goto LABEL_110;
          case 1u:
            double v60 = vabdd_f64(*(double *)v2, (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8));
LABEL_88:
            if (v60 < 0.0000005) {
              return 1;
            }
            goto LABEL_110;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_110;
          case 6u:
            if (((*(void *)a2 ^ *(void *)v2) & 0xFFFFFFFFFFFFFFLL) == 0
              && *((_DWORD *)v2 + 2) == *((_DWORD *)a2 + 2))
            {
              return 1;
            }
            goto LABEL_110;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 7:
        unsigned int v18 = v2[12];
        if (v18 < 7 || v18 - 8 < 2) {
          goto LABEL_110;
        }
        if (v18 != 7) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return 1;
      case 8:
        unsigned int v19 = v2[12];
        if (v19 < 8) {
          goto LABEL_110;
        }
        if (v19 != 8)
        {
          if (v19 != 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_110;
        }
        if (!turi::image_type::operator==(*(void *)v2 + 8, *(void *)a2 + 8))
        {
LABEL_110:
          v2 += 32;
          if (v2 == v3) {
            return 0;
          }
          continue;
        }
        return 1;
      case 9:
        unsigned int v20 = v2[12];
        if (v20 < 9) {
          goto LABEL_110;
        }
        if (v20 != 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        double v21 = *(double *)a2;
        uint64_t v22 = *(void **)v2;
        if (*(void *)a2 == *(void *)v2) {
          return 1;
        }
        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v22 + 1), *(void *)&v21 + 8)) {
          goto LABEL_110;
        }
        uint64_t v24 = (char *)v22[3];
        uint64_t v23 = (char *)v22[4];
        uint64_t v25 = v23 - v24;
        if (v23 == v24) {
          return 1;
        }
        if (!v22[1]) {
          return 1;
        }
        uint64_t v26 = 1;
        do
        {
          uint64_t v27 = *(void *)v24;
          v24 += 8;
          v26 *= v27;
        }
        while (v24 != v23);
        if (!v26) {
          return 1;
        }
        uint64_t v67 = 0;
        std::vector<unsigned long>::vector(&v68, v25 >> 3, &v67);
        uint64_t v28 = v68;
        double v29 = v69;
        uint64_t v30 = **(void **)(*(void *)&v21 + 8);
        uint64_t v31 = (char *)v69 - (char *)v68;
        unint64_t v32 = v69 - v68;
        unint64_t v33 = v32 - 1;
        if (v32 <= 1) {
          uint64_t v34 = 1;
        }
        else {
          uint64_t v34 = v69 - v68;
        }
        do
        {
          if (v29 == v28)
          {
            uint64_t v42 = 0;
            double v43 = *(double *)(*(void *)v22[1] + 8 * v22[9]);
          }
          else
          {
            uint64_t v35 = 0;
            double v36 = (uint64_t *)v22[6];
            uint64_t v37 = v28;
            uint64_t v38 = v34;
            do
            {
              uint64_t v40 = *v37++;
              uint64_t v39 = v40;
              uint64_t v41 = *v36++;
              v35 += v41 * v39;
              --v38;
            }
            while (v38);
            uint64_t v42 = 0;
            double v43 = *(double *)(*(void *)v22[1] + 8 * (v22[9] + v35));
            unint64_t v44 = *(uint64_t **)(*(void *)&v21 + 48);
            unsigned int v45 = v28;
            uint64_t v46 = v34;
            do
            {
              uint64_t v48 = *v45++;
              uint64_t v47 = v48;
              uint64_t v49 = *v44++;
              v42 += v49 * v47;
              --v46;
            }
            while (v46);
          }
          double v50 = *(double *)(v30 + 8 * (*(void *)(*(void *)&v21 + 72) + v42));
          if (v43 != v50) {
            break;
          }
          uint64_t v51 = v32;
          unint64_t v52 = v32 - 1;
          if (v31 < 1) {
            goto LABEL_68;
          }
          uint64_t v53 = v22[3];
          unint64_t v54 = v28[v33] + 1;
          v28[v33] = v54;
          unint64_t v55 = (v31 & 0xFFFFFFFFFFFFFFF8) - 16;
          uint64_t v56 = v32 - 1;
          if (v54 < *(void *)(v53 + 8 * v33))
          {
            uint64_t v51 = 1;
            unint64_t v52 = v32 - 1;
LABEL_68:
            if ((v52 & 0x8000000000000000) != 0) {
              break;
            }
            continue;
          }
          do
          {
            *(uint64_t *)((char *)v28 + v55 + 8) = 0;
            if (v56 <= 0)
            {
              double v69 = v28;
              operator delete(v28);
              return 1;
            }
            --v56;
            unint64_t v57 = *(uint64_t *)((char *)v28 + v55) + 1;
            *(uint64_t *)((char *)v28 + v55) = v57;
            unint64_t v58 = *(void *)(v53 + v55);
            v55 -= 8;
          }
          while (v57 >= v58);
          uint64_t v51 = 1;
          if (v56 < 0) {
            break;
          }
        }
        while (v51);
        if (v28)
        {
          double v69 = v28;
          operator delete(v28);
        }
        if (v43 == v50) {
          return 1;
        }
        goto LABEL_110;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
  }
}

uint64_t *turi::flex_dict_view::keys(uint64_t **this)
{
  uint64_t v1 = (uint64_t *)(this + 1);
  unint64_t v2 = ((*this)[1] - **this) >> 5;
  if (v2 != ((char *)this[2] - (char *)this[1]) >> 4)
  {
    std::vector<turi::flexible_type>::reserve((uint64_t *)this + 1, v2);
    uint64_t v4 = **this;
    uint64_t v5 = (*this)[1];
    if (v4 != v5)
    {
      unint64_t v6 = (unint64_t)this[2];
      do
      {
        if (v6 >= (unint64_t)this[3])
        {
          unint64_t v6 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(v1, (atomic_ullong *volatile *)v4);
        }
        else
        {
          *(void *)unint64_t v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          *(unsigned char *)(v6 + 12) = 0;
          if (v4 != v6)
          {
            atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)v4;
            *(void *)(v6 + 5) = *(void *)(v4 + 5);
            *(void *)unint64_t v6 = v7;
            LODWORD(v7) = *(unsigned __int8 *)(v4 + 12);
            *(unsigned char *)(v6 + 12) = (_BYTE)v7;
            BOOL v8 = v7 > 9;
            int v9 = (1 << (char)v7) & 0x33C;
            if (!v8 && v9 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v6, 1uLL);
            }
          }
          v6 += 16;
        }
        this[2] = (uint64_t *)v6;
        v4 += 32;
      }
      while (v4 != v5);
    }
  }
  return v1;
}

uint64_t *turi::flex_dict_view::values(uint64_t **this)
{
  uint64_t v1 = (uint64_t *)(this + 4);
  unint64_t v2 = ((*this)[1] - **this) >> 5;
  if (v2 != ((char *)this[5] - (char *)this[4]) >> 4)
  {
    std::vector<turi::flexible_type>::reserve((uint64_t *)this + 4, v2);
    uint64_t v4 = **this;
    uint64_t v5 = (*this)[1];
    if (v4 != v5)
    {
      unint64_t v6 = (unint64_t)this[5];
      uint64_t v7 = v4 + 16;
      do
      {
        if (v6 >= (unint64_t)this[6])
        {
          unint64_t v6 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>(v1, (atomic_ullong *volatile *)v7);
        }
        else
        {
          *(void *)unint64_t v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          *(unsigned char *)(v6 + 12) = 0;
          if (v7 != v6)
          {
            atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)v7;
            *(void *)(v6 + 5) = *(void *)(v7 + 5);
            *(void *)unint64_t v6 = v8;
            LODWORD(v8) = *(unsigned __int8 *)(v7 + 12);
            *(unsigned char *)(v6 + 12) = (_BYTE)v8;
            BOOL v9 = v8 > 9;
            int v10 = (1 << (char)v8) & 0x33C;
            if (!v9 && v10 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v6, 1uLL);
            }
          }
          v6 += 16;
        }
        this[5] = (uint64_t *)v6;
        uint64_t v12 = v7 + 16;
        v7 += 32;
      }
      while (v12 != v5);
    }
  }
  return v1;
}

void turi::image_util::load_image(uint64_t a1@<X8>)
{
  *(void *)(a1 + 5) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 12) = 8;
  operator new();
}

void sub_224394C20(_Unwind_Exception *exception_object)
{
  if (atomic_fetch_add(v2, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v4 = *v1;
    if (*v1)
    {
      boost::detail::shared_count::~shared_count((atomic_uint **)(v4 + 16));
      MEMORY[0x22A614FA0](v4, 0x1030C40F1F0227BLL);
    }
    uint64_t *v1 = 0;
  }
  uint64_t *v1 = 0;
  *((_DWORD *)v1 + 2) = 0;
  *((unsigned char *)v1 + 12) = 0;
  _Unwind_Resume(exception_object);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (long long *)__last.__i_, (long long *)this->__end_, (uint64_t)__first.__i_);
    unint64_t v6 = v5;
    std::vector<std::string>::pointer end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

uint64_t turi::image_util::encode_image@<X0>(uint64_t this@<X0>, const turi::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)this + 64);
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  if (v4 == 2)
  {
    if (this != a3)
    {
      *(void *)(a3 + 5) = *(void *)(this + 5);
      *(void *)a3 = *(void *)this;
      unsigned int v5 = *(unsigned __int8 *)(this + 12);
      *(unsigned char *)(a3 + 12) = v5;
      if (v5 <= 9 && ((1 << v5) & 0x33C) != 0)
      {
        atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
        unsigned int v5 = *(unsigned __int8 *)(a3 + 12);
      }
      switch(v5)
      {
        case 2u:
          if (**(void **)a3 != 1) {
            operator new();
          }
          return this;
        case 3u:
          if (**(void **)a3 != 1) {
            operator new();
          }
          return this;
        case 4u:
          if (**(void **)a3 != 1) {
            operator new();
          }
          return this;
        case 5u:
          if (**(void **)a3 != 1) {
            operator new();
          }
          return this;
        case 8u:
          if (**(void **)a3 != 1) {
            operator new();
          }
          return this;
        case 9u:
          if (**(void **)a3 != 1) {
            operator new();
          }
          return this;
        default:
          return turi::encode_image_inplace((turi *)(*(void *)a3 + 8), a2);
      }
    }
    return turi::encode_image_inplace((turi *)(*(void *)a3 + 8), a2);
  }
  else if (this != a3)
  {
    *(void *)(a3 + 5) = *(void *)(this + 5);
    *(void *)a3 = *(void *)this;
    unsigned int v6 = *(unsigned __int8 *)(this + 12);
    *(unsigned char *)(a3 + 12) = v6;
    if (v6 <= 9 && ((1 << v6) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a3, 1uLL);
    }
  }
  return this;
}

void sub_22439518C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*((unsigned char *)v10 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v13 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      if (*((char *)v13 + 31) < 0) {
        operator delete((void *)v13[1]);
      }
      unint64_t v14 = v13;
      uint64_t v15 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v16 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      unsigned int v17 = (void *)v16[1];
      if (v17)
      {
        v16[2] = (atomic_ullong)v17;
        operator delete(v17);
      }
      unint64_t v14 = v16;
      uint64_t v15 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v18 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      a10 = (void **)(v18 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v18 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      a10 = (void **)(v18 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      unint64_t v14 = v18;
      uint64_t v15 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v10;
      if (!*v10) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v19 + 2);
      unint64_t v14 = v19;
      unsigned int v20 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v10, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v10) {
        goto LABEL_27;
      }
      unint64_t v14 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v10);
      unsigned int v20 = 2071181815;
LABEL_25:
      uint64_t v15 = v20 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v14, v15);
LABEL_27:
      atomic_ullong *volatile *v10 = 0;
LABEL_28:
      atomic_ullong *volatile *v10 = 0;
      *((_DWORD *)v10 + 2) = 0;
      *((unsigned char *)v10 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void turi::image_util::resize_image(turi::image_util *this@<X0>, const turi::flexible_type *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  if (*((unsigned char *)this + 12) != 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "Cannot resize non-image type");
    *(void *)&long long v29 = &v24;
    turi::image_util::resize_image(turi::flexible_type const&,unsigned long,unsigned long,unsigned long,BOOL,int)::$_0::operator()((const std::string **)&v29);
  }
  char v9 = a5;
  uint64_t v13 = *(void *)this;
  unint64_t v14 = *(atomic_uint **)(*(void *)this + 16);
  uint64_t v24 = *(void *)(*(void *)this + 8);
  uint64_t v25 = v14;
  if (v14) {
    atomic_fetch_add_explicit(v14 + 2, 1u, memory_order_relaxed);
  }
  long long v15 = *(_OWORD *)(v13 + 56);
  long long v16 = *(_OWORD *)(v13 + 40);
  long long v26 = *(_OWORD *)(v13 + 24);
  *(_OWORD *)uint64_t v27 = v16;
  long long v28 = v15;
  atomic_ullong *volatile v18 = (const turi::flexible_type *)*((void *)&v26 + 1);
  uint64_t v17 = v26;
  unint64_t v19 = v16;
  if (v26 != __PAIR128__((unint64_t)a2, a3)
    || (void)v16 != a4
    || (((*((void *)&v15 + 1) == 2) ^ a5) & 1) != 0)
  {
    if (*((void *)&v15 + 1) != 2)
    {
      turi::image_util_detail::decode_image_impl(&v24, a2);
      atomic_ullong *volatile v18 = (const turi::flexible_type *)*((void *)&v26 + 1);
      uint64_t v17 = v26;
      unint64_t v19 = v27[0];
    }
    if (v18 == a2 && v17 == a3 && v19 == a4)
    {
      if ((v9 & 1) == 0) {
        turi::image_util_detail::encode_image_impl(&v24, a2);
      }
      *(void *)(a7 + 5) = 0;
      *(void *)a7 = 0;
      *(unsigned char *)(a7 + 12) = 8;
      operator new();
    }
    image_std::string::pointer data = turi::image_type::get_image_data((turi::image_type *)&v24);
    LODWORD(v22) = a6;
    turi::image_util_detail::resize_image_impl(image_data, *((const char **)&v26 + 1), v26, v27[0], (unint64_t)a2, a3, a4, (unint64_t)v23, v22, 0);
    *(void *)&long long v26 = a3;
    *((void *)&v26 + 1) = a2;
    *((void *)&v28 + 1) = 2;
    v27[0] = a4;
    v27[1] = a3 * (void)a2 * a4;
    boost::shared_ptr<char []>::shared_ptr<char>(&v29, *(uint64_t *)v23);
  }
  *(void *)a7 = 0;
  *(_DWORD *)(a7 + 8) = 0;
  *(unsigned char *)(a7 + 12) = 0;
  if (this != (turi::image_util *)a7)
  {
    *(void *)(a7 + 5) = *(void *)((char *)this + 5);
    *(void *)a7 = *(void *)this;
    int v20 = *((unsigned __int8 *)this + 12);
    *(unsigned char *)(a7 + 12) = v20;
    switch(v20)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)a7, 1uLL);
        break;
      default:
        break;
    }
  }
  boost::detail::shared_count::~shared_count(&v25);
}

void sub_224395738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  boost::detail::shared_count::~shared_count(v16);
  _Unwind_Resume(a1);
}

void turi::image_util::image_sarray_to_vector_sarray(uint64_t *a1, char a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unsigned int v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/image_util.cpp", "image_sarray_to_vector_sarray", 526, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    atomic_ullong *volatile v8 = pthread_getspecific(*((void *)started + 74));
    if (v8 && *((unsigned char *)v8 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
      char v9 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v12);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  uint64_t v10 = *a1;
  uint64_t v13 = &unk_26D77BEC8;
  char v14 = a2;
  long long v15 = &v13;
  turi::unity_sarray::transform_lambda(v10, (uint64_t)&v13, 3, 1, 0);
}

void sub_2243959D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, char a12)
{
}

void std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::~__func()
{
}

unsigned char *std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26D77BEC8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D77BEC8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::operator()(uint64_t a1@<X8>)
{
  *(void *)(a1 + 5) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 12) = 3;
  operator new();
}

void sub_224396638(uint64_t a1, ...)
{
  va_start(va, a1);
  __cxa_end_catch();
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  JUMPOUT(0x224396658);
}

uint64_t std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0,std::allocator<turi::image_util::image_sarray_to_vector_sarray(std::shared_ptr<turi::unity_sarray>,BOOL)::$_0>,turi::flexible_type ()(turi::flexible_type const&)>::target_type()
{
}

void CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Scaler_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Scaler.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  qword_26808E390 = 0;
  unk_26808E398 = 0;
  CoreML::Specification::_Scaler_default_instance_ = (uint64_t)&unk_26D77BF48;
  unk_26808E370 = 0;
  qword_26808E378 = 0;
  unk_26808E380 = 0;
  dword_26808E3A4 = 0;
  byte_26808E3A8 = 1;
}

void CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(CoreML::Specification::protobuf_Scaler_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_Scaler_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_224396A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Scaler *CoreML::Specification::Scaler::Scaler(CoreML::Specification::Scaler *this)
{
  *(void *)this = &unk_26D77BF48;
  *((void *)this + 1) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if (this != (CoreML::Specification::Scaler *)&CoreML::Specification::_Scaler_default_instance_) {
    CoreML::Specification::protobuf_Scaler_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_224396A98(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 48);
  if (v4)
  {
    if (!*v4) {
      operator delete(v4);
    }
  }
  CoreML::Specification::LinearQuantizationParams::LinearQuantizationParams(v1);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Scaler::~Scaler(CoreML::Specification::Scaler *this)
{
  *(void *)this = &unk_26D77BF48;
  unint64_t v2 = (void *)*((void *)this + 6);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  char v3 = (void *)*((void *)this + 3);
  if (v3 && !*v3) {
    operator delete(v3);
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Scaler::~Scaler(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::Scaler::default_instance(CoreML::Specification::Scaler *this)
{
  return &CoreML::Specification::_Scaler_default_instance_;
}

void CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_224396BEC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403FC4B5CDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Scaler>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>);
  }
  return result;
}

uint64_t CoreML::Specification::Scaler::Clear(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 4CoreML::Specification::DoubleRange::New(this, 0) = 0;
  return this;
}

BOOL CoreML::Specification::Scaler::MergePartialFromCodedStream(CoreML::Specification::Scaler *this, char **a2, unsigned int a3)
{
  unsigned int v5 = (unsigned int *)((char *)this + 40);
  unsigned int v6 = (unsigned int *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v7 = *a2;
            if (*a2 < a2[1]) {
              break;
            }
            uint64_t v8 = 0;
LABEL_7:
            unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
            unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) != 0) {
              goto LABEL_8;
            }
LABEL_20:
            if (v9) {
              BOOL v15 = (v9 & 7) == 4;
            }
            else {
              BOOL v15 = 1;
            }
            if (v15) {
              return 1;
            }
            if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
          }
            }
          uint64_t v8 = *v7;
          if (*v7 < 1) {
            goto LABEL_7;
          }
          *a2 = v7 + 1;
          unint64_t v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0) {
            goto LABEL_20;
          }
LABEL_8:
          if (v9 >> 3 != 2) {
            break;
          }
          if (v9 == 17)
          {
            unsigned int v16 = 18;
            uint64_t v17 = (unint64_t **)a2;
            uint64_t v18 = (uint64_t)v5;
            goto LABEL_28;
          }
          if (v9 != 18) {
            goto LABEL_20;
          }
          uint64_t v13 = *a2;
          if (*a2 >= a2[1] || *v13 < 0)
          {
            unsigned int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((VarintSizeAsIntFallback & 0x80000000) != 0) {
              return 0;
            }
          }
          else
          {
            unsigned int VarintSizeAsIntFallback = *v13;
            *a2 = v13 + 1;
          }
          if ((VarintSizeAsIntFallback & 7) != 0) {
            return 0;
          }
          signed int v33 = *v5;
          unsigned int v34 = VarintSizeAsIntFallback >> 3;
          int v35 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
          int v36 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
          if (v36 >= v35) {
            int v37 = v35;
          }
          else {
            int v37 = v36;
          }
          if (v35 == -1) {
            int v37 = v36;
          }
          if (v37 >= (uint64_t)VarintSizeAsIntFallback)
          {
            signed int v43 = v33 + v34;
            if ((int)*v5 >= (int)(v33 + v34))
            {
              uint64_t v44 = *((void *)this + 6);
            }
            else
            {
              _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v33 + v34);
              uint64_t v44 = *((void *)this + 6);
              uint64_t v45 = 8 * v43 - 8 * *((int *)this + 10);
              if (v45 >= 1) {
                bzero((void *)(v44 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v45 >> 3) - ((unint64_t)v45 > 7)) + 8);
              }
            }
            *unsigned int v5 = v43;
            uint64_t v47 = v44 + 8;
            if (!v44) {
              uint64_t v47 = 0;
            }
            if (!_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v47 + 8 * v33), VarintSizeAsIntFallback))
            {
              if ((int)*v5 >= 1)
              {
                BOOL result = 0;
                *unsigned int v5 = v33;
                return result;
              }
              return 0;
            }
          }
          else if (VarintSizeAsIntFallback >= 8)
          {
            if (v34 <= 1) {
              int v38 = 1;
            }
            else {
              int v38 = VarintSizeAsIntFallback >> 3;
            }
            do
            {
              unint64_t v48 = 0;
              uint64_t v39 = (unint64_t *)*a2;
              if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
              {
                BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v48);
                if (!result) {
                  return result;
                }
                unint64_t v40 = v48;
              }
              else
              {
                unint64_t v40 = *v39;
                *a2 = (char *)(v39 + 1);
              }
              signed int v41 = *((_DWORD *)this + 10);
              if (v41 == *((_DWORD *)this + 11))
              {
                _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v41 + 1);
                signed int v41 = *v5;
              }
              uint64_t v42 = *((void *)this + 6);
              *((_DWORD *)this + 1CoreML::Specification::DoubleRange::New(this, 0) = v41 + 1;
              *(void *)(v42 + 8 * v41 + 8) = v40;
              --v38;
            }
            while (v38);
          }
        }
        if (v9 >> 3 != 1) {
          goto LABEL_20;
        }
        if (v9 != 9) {
          break;
        }
        unsigned int v16 = 10;
        uint64_t v17 = (unint64_t **)a2;
        uint64_t v18 = (uint64_t)v6;
LABEL_28:
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, v16, v17, v18))return 0; {
      }
        }
      if (v9 != 10) {
        goto LABEL_20;
      }
      uint64_t v11 = *a2;
      if (*a2 >= a2[1] || *v11 < 0)
      {
        unsigned int v12 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v12 & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int v12 = *v11;
        *a2 = v11 + 1;
      }
      if ((v12 & 7) != 0) {
        return 0;
      }
      signed int v19 = *v6;
      unsigned int v20 = v12 >> 3;
      int v21 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v22 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v22 >= v21) {
        int v23 = v21;
      }
      else {
        int v23 = v22;
      }
      if (v21 == -1) {
        int v23 = v22;
      }
      if (v23 >= (uint64_t)v12) {
        break;
      }
      if (v12 >= 8)
      {
        if (v20 <= 1) {
          int v24 = 1;
        }
        else {
          int v24 = v12 >> 3;
        }
        do
        {
          unint64_t v48 = 0;
          uint64_t v25 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v48);
            if (!result) {
              return result;
            }
            unint64_t v26 = v48;
          }
          else
          {
            unint64_t v26 = *v25;
            *a2 = (char *)(v25 + 1);
          }
          signed int v27 = *((_DWORD *)this + 4);
          if (v27 == *((_DWORD *)this + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v27 + 1);
            signed int v27 = *v6;
          }
          uint64_t v28 = *((void *)this + 3);
          *((_DWORD *)this + 4) = v27 + 1;
          *(void *)(v28 + 8 * v27 + 8) = v26;
          --v24;
        }
        while (v24);
      }
    }
    signed int v30 = v19 + v20;
    if ((int)*v6 >= (int)(v19 + v20))
    {
      uint64_t v31 = *((void *)this + 3);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v6, v19 + v20);
      uint64_t v31 = *((void *)this + 3);
      uint64_t v32 = 8 * v30 - 8 * *((int *)this + 4);
      if (v32 >= 1) {
        bzero((void *)(v31 + 8 + 8 * *((int *)this + 4)), 8 * (((unint64_t)v32 >> 3) - ((unint64_t)v32 > 7)) + 8);
      }
    }
    *unsigned int v6 = v30;
    uint64_t v46 = v31 + 8;
    if (!v31) {
      uint64_t v46 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v46 + 8 * v19), v12));
  if ((int)*v6 >= 1)
  {
    BOOL result = 0;
    *unsigned int v6 = v19;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::Scaler::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(int *)(this + 16) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0xAu);
      int v6 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 10;
      int v6 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v6;
    }
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    if (v6 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v7);
    }
    else
    {
      uint64_t v8 = *((void *)a2 + 1);
      if (v7 < 0x80)
      {
        unsigned int v10 = *(_DWORD *)(v5 + 32);
        unint64_t v9 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        unint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v9++ = v7 | 0x80;
          unsigned int v10 = v7 >> 7;
          unsigned int v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
      }
      unsigned char *v9 = v10;
      int v12 = v9 - v8 + 1;
      *((void *)a2 + 1) += v12;
      *((_DWORD *)a2 + 4) -= v12;
    }
    uint64_t v13 = *(void *)(v5 + 24);
    if (v13) {
      char v14 = (_tc_google::protobuf::internal::WireFormatLite *)(v13 + 8);
    }
    else {
      char v14 = 0;
    }
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v14, (const double *)*(unsigned int *)(v5 + 16), a2, a4);
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x12u);
      int v15 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 18;
      int v15 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v15;
    }
    unsigned int v16 = *(_DWORD *)(v5 + 56);
    if (v15 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v16);
    }
    else
    {
      uint64_t v17 = *((void *)a2 + 1);
      if (v16 < 0x80)
      {
        unsigned int v19 = *(_DWORD *)(v5 + 56);
        uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        uint64_t v18 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v18++ = v16 | 0x80;
          unsigned int v19 = v16 >> 7;
          unsigned int v20 = v16 >> 14;
          v16 >>= 7;
        }
        while (v20);
      }
      unsigned char *v18 = v19;
      int v21 = v18 - v17 + 1;
      *((void *)a2 + 1) += v21;
      *((_DWORD *)a2 + 4) -= v21;
    }
    uint64_t v22 = *(void *)(v5 + 48);
    if (v22) {
      int v23 = (_tc_google::protobuf::internal::WireFormatLite *)(v22 + 8);
    }
    else {
      int v23 = 0;
    }
    int v24 = (const double *)*(unsigned int *)(v5 + 40);
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v23, v24, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::Scaler::ByteSizeLong(CoreML::Specification::Scaler *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v2 = 8 * v1;
  if (v1)
  {
    if ((v2 & 0x80000000) != 0) {
      uint64_t v3 = 11;
    }
    else {
      uint64_t v3 = ((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 8) = v2;
  uint64_t v4 = v3 + v2;
  uint64_t v5 = *((unsigned int *)this + 10);
  uint64_t v6 = 8 * v5;
  if (v5)
  {
    if ((v6 & 0x80000000) != 0) {
      uint64_t v7 = 11;
    }
    else {
      uint64_t v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v4 += v7;
  }
  uint64_t v8 = v4 + v6;
  *((_DWORD *)this + 14) = v6;
  *((_DWORD *)this + 15) = v8;
  return v8;
}

unint64_t *CoreML::Specification::Scaler::MergeFrom(unint64_t *this, const CoreML::Specification::Scaler *a2)
{
  uint64_t v3 = (unsigned int *)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve(v3 + 4, v3[4] + v5);
    this = (unint64_t *)memcpy((void *)(*((void *)v3 + 3) + 8 * (int)v3[4] + 8), (const void *)(*((void *)a2 + 3) + 8), 8 * *((int *)a2 + 4));
    v3[4] += *((_DWORD *)a2 + 4);
  }
  int v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    int v8 = v3[10];
    uint64_t v7 = v3 + 10;
    _tc_google::protobuf::RepeatedField<double>::Reserve(v7, v8 + v6);
    this = (unint64_t *)memcpy((void *)(*((void *)v7 + 1) + 8 * (int)*v7 + 8), (const void *)(*((void *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *v7 += *((_DWORD *)a2 + 10);
  }
  return this;
}

uint64_t CoreML::Specification::Scaler::IsInitialized(CoreML::Specification::Scaler *this)
{
  return 1;
}

void *CoreML::Specification::Scaler::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Scaler");
}

void CoreML::Specification::Scaler::New(CoreML::Specification::Scaler *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Scaler>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t turi::toolkit_class_registry::register_toolkit_class(uint64_t **a1, std::locale::__imp *a2, uint64_t a3, uint64_t **a4)
{
  int v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/toolkit_class_registry.cpp", "register_toolkit_class", 15, 1);
    unsigned int v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Function entry", 14);
    }
    int v12 = pthread_getspecific(*((void *)started + 74));
    if (v12)
    {
      if (*((unsigned char *)v12 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[2] - 24) + 16));
        uint64_t v13 = std::locale::use_facet(&v18, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v18);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1, (const void **)a2))
  {
    v18.__locale_ = a2;
    char v14 = std::__tree<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, (long long **)&v18);
    std::function<turi::model_base * ()(void)>::operator=(v14 + 7, a3);
    std::string::basic_string[abi:ne180100]<0>(&v18, "name");
    unsigned int v19 = &v18;
    int v15 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v18.__locale_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v19);
    turi::flexible_type::operator=<std::string>((uint64_t)v15 + 56);
  }
  return 0;
}

void sub_2243976B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void *std::function<turi::model_base * ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<turi::model_base * ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<turi::model_base * ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<turi::model_base * ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t turi::toolkit_class_registry::register_toolkit_class(uint64_t **a1, uint64_t *a2, const void **a3)
{
  v33[2] = *MEMORY[0x263EF8340];
  if (*((char *)a3 + 23) < 0) {
    int v6 = a3[1];
  }
  else {
    int v6 = (const void *)*((unsigned __int8 *)a3 + 23);
  }
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (v6)
  {
    if (v8 == v7) {
      return 1;
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      if (*((char *)a3 + 23) >= 0) {
        size_t v11 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v11 = (size_t)a3[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v30, v11 + 1);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v12 = &v30;
      }
      else {
        int v12 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      if (v11)
      {
        if (*((char *)a3 + 23) >= 0) {
          uint64_t v13 = a3;
        }
        else {
          uint64_t v13 = *a3;
        }
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 46;
      uint64_t v14 = *a2 + v9;
      int v15 = *(char *)(v14 + 23);
      if (v15 >= 0) {
        unsigned int v16 = (const std::string::value_type *)(*a2 + v9);
      }
      else {
        unsigned int v16 = *(const std::string::value_type **)v14;
      }
      if (v15 >= 0) {
        std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        std::string::size_type v17 = *(void *)(v14 + 8);
      }
      std::locale v18 = std::string::append(&v30, v16, v17);
      std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
      v33[0] = v18->__r_.__value_.__l.__size_;
      *(void *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
      char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = *a2 + v9;
      if (*(char *)(v21 + 23) < 0) {
        operator delete(*(void **)v21);
      }
      uint64_t v22 = v33[0];
      *(void *)uint64_t v21 = v19;
      *(void *)(v21 + 8) = v22;
      *(void *)(v21 + 15) = *(void *)((char *)v33 + 7);
      *(unsigned char *)(v21 + 23) = v20;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      ++v10;
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      v9 += 56;
    }
    while (v10 < 0x6DB6DB6DB6DB6DB7 * ((v8 - *a2) >> 3));
  }
  if (v8 == v7) {
    return 1;
  }
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  LODWORD(v25) = 1;
  do
  {
    unint64_t v26 = (std::locale::__imp *)(v7 + v23);
    uint64_t v27 = *(void *)(v7 + v23 + 48);
    uint64_t v32 = 0;
    if (v27)
    {
      v31[0] = &unk_26D77BFF8;
      v31[1] = v27;
      uint64_t v32 = v31;
    }
    std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)v29, (uint64_t)v26 + 24);
    uint64_t v25 = v25 & turi::toolkit_class_registry::register_toolkit_class(a1, v26, (uint64_t)v31, v29);
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v29, v29[1]);
    std::__function::__value_func<turi::model_base * ()(void)>::~__value_func[abi:ne180100](v31);
    ++v24;
    uint64_t v7 = *a2;
    v23 += 56;
  }
  while (v24 < 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  return v25;
}

void sub_2243979C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::toolkit_class_registry::get_toolkit_class(uint64_t **a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1, (const void **)a2))
  {
    uint64_t v8 = a2;
    uint64_t v6 = std::__tree<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v8)[10];
    if (v6)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
      std::shared_ptr<turi::model_base>::shared_ptr[abi:ne180100]<turi::model_base,void>(a3, v7);
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v8 = a2;
  turi::toolkit_class_registry::get_toolkit_class(std::string const&)::$_0::operator()();
}

uint64_t *turi::toolkit_class_registry::get_toolkit_class_description@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  int v5 = (uint64_t **)(a1 + 24);
  if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a1 + 24, (const void **)a2))
  {
    uint64_t v8 = a2;
    turi::toolkit_class_registry::get_toolkit_class_description(std::string const&)::$_0::operator()();
  }
  uint64_t v8 = a2;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
  return std::map<std::string,turi::flexible_type>::map[abi:ne180100](a3, (uint64_t)(v6 + 7));
}

void turi::toolkit_class_registry::available_toolkit_classes(turi::toolkit_class_registry **this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = this + 1;
  uint64_t v3 = *this;
  if (*this != (turi::toolkit_class_registry *)(this + 1))
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = (long long *)((char *)v3 + 32);
      if (v5 >= a2[2])
      {
        unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      uint64_t v7 = (turi::toolkit_class_registry *)*((void *)v3 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = (turi::toolkit_class_registry **)v7;
          uint64_t v7 = *(turi::toolkit_class_registry **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (turi::toolkit_class_registry **)*((void *)v3 + 2);
          BOOL v9 = *v8 == v3;
          uint64_t v3 = (turi::toolkit_class_registry *)v8;
        }
        while (!v9);
      }
      uint64_t v3 = (turi::toolkit_class_registry *)v8;
    }
    while (v8 != v2);
  }
}

void sub_224397BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x58uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 1CoreML::Specification::Scaler::New(this, 0) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224397D24(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::function<turi::model_base * ()(void)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<turi::model_base * ()(void)>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<turi::model_base * ()(void)>>,0>(uint64_t a1)
{
  std::__function::__value_func<turi::model_base * ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__function::__value_func<turi::model_base * ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<turi::model_base * ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2243980DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_224398214(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,turi::flexible_type>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,turi::flexible_type>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,turi::flexible_type>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26D77BFF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D77BFF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<turi::model_base * (*)(void),std::allocator<turi::model_base * (*)(void)>,turi::model_base * ()(void)>::target_type()
{
}

void *std::__function::__value_func<turi::model_base * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::shared_ptr<turi::model_base>::shared_ptr[abi:ne180100]<turi::model_base,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2243984A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<turi::unity_sarray>::shared_ptr[abi:ne180100]<turi::unity_sarray,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<turi::model_base *,std::shared_ptr<turi::model_base>::__shared_ptr_default_delete<turi::model_base,turi::model_base>,std::allocator<turi::model_base>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<turi::model_base *,std::shared_ptr<turi::model_base>::__shared_ptr_default_delete<turi::model_base,turi::model_base>,std::allocator<turi::model_base>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t turi::toolkit_function_registry::register_toolkit_function(uint64_t **a1, std::string::size_type *a2, const void **a3)
{
  v31[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/toolkit_function_registry.cpp", "register_toolkit_function", 30, 1);
    long long v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Function entry", 14);
    }
    unint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        uint64_t v11 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale((std::locale *)&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  std::string::size_type v12 = *a2;
  std::string::size_type v13 = a2[1];
  if (*a2 == v13) {
    return 1;
  }
  do
  {
    if (*((char *)a3 + 23) < 0)
    {
      if (!a3[1]) {
        goto LABEL_35;
      }
    }
    else if (!*((unsigned char *)a3 + 23))
    {
      goto LABEL_35;
    }
    if (*((char *)a3 + 23) >= 0) {
      size_t v14 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v14 = (size_t)a3[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v30, v14 + 1);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v15 = &v30;
    }
    else {
      int v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    if (v14)
    {
      if (*((char *)a3 + 23) >= 0) {
        unsigned int v16 = a3;
      }
      else {
        unsigned int v16 = *a3;
      }
      memmove(v15, v16, v14);
    }
    *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 46;
    int v17 = *(char *)(v12 + 23);
    if (v17 >= 0) {
      std::locale v18 = (const std::string::value_type *)v12;
    }
    else {
      std::locale v18 = *(const std::string::value_type **)v12;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v12 + 8);
    }
    char v20 = std::string::append(&v30, v18, v19);
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
    v31[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    *(void *)std::string::size_type v12 = v21;
    *(void *)(v12 + 8) = v31[0];
    *(void *)(v12 + 15) = *(void *)((char *)v31 + 7);
    *(unsigned char *)(v12 + 23) = v22;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
LABEL_35:
    if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)a1, (const void **)v12))
    {
      return 0;
    }
    v12 += 136;
  }
  while (v12 != v13);
  std::string::size_type v23 = *a2;
  std::string::size_type v24 = a2[1];
  if (*a2 != v24)
  {
    std::string::size_type v25 = v23 + 32;
    do
    {
      v30.__r_.__value_.__r.__words[0] = v23;
      unint64_t v26 = std::__tree<std::__value_type<std::string,turi::toolkit_function_specification>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::toolkit_function_specification>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::toolkit_function_specification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)v23, (uint64_t)&std::piecewise_construct, (long long **)&v30);
      std::string::operator=((std::string *)(v26 + 7), (const std::string *)v23);
      if (v26 + 7 != (uint64_t *)v23)
      {
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__tree_node<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,void *> *,long>>((uint64_t **)v26 + 10, *(long long **)(v23 + 24), (long long *)v25);
        std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>((uint64_t **)v26 + 13, *(void **)(v23 + 48), (void *)(v25 + 24));
      }
      uint64_t v27 = v23 + 72;
      std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=(v26 + 16, v27);
      v27 += 32;
      std::function<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator=(v26 + 20, v27);
      v25 += 136;
      std::string::size_type v23 = v27 + 32;
    }
    while (v23 != v24);
  }
  return 1;
}

void sub_2243988B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t turi::toolkit_function_registry::get_toolkit_function_info(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, a2);
  if (a1 + 8 == v3) {
    return 0;
  }
  else {
    return v3 + 56;
  }
}

void *turi::toolkit_function_registry::get_native_function@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v54[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v7 = a1 + 8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 == v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    int v35 = std::string::append(&v49, " not found");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    exception[2] = *((void *)&v35->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
  }
  if (!*(void *)(v6 + 184))
  {
    int v37 = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    int v38 = std::string::append(&v49, " cannot be run as a native lambda since it was not compiled and registered using the SDK registration scheme.");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v37[2] = *((void *)&v38->__r_.__value_.__l + 2);
    *(_OWORD *)int v37 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
  }
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  std::string::basic_string[abi:ne180100]<0>(&v49, "arguments");
  unint64_t v10 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(v6 + 104, (const void **)&v49.__r_.__value_.__l.__data_);
  uint64_t v11 = (v8 - v9) >> 3;
  uint64_t v12 = 1;
  switch(v10[12])
  {
    case 3:
      std::string::size_type v13 = (void *)(*(void *)v10 + 8);
      size_t v14 = (void *)(*(void *)v10 + 16);
      char v15 = 3;
      goto LABEL_12;
    case 4:
      std::string::size_type v13 = (void *)(*(void *)v10 + 8);
      size_t v14 = (void *)(*(void *)v10 + 16);
      char v15 = 4;
      goto LABEL_12;
    case 5:
      std::string::size_type v13 = (void *)(*(void *)v10 + 8);
      size_t v14 = (void *)(*(void *)v10 + 16);
      char v15 = 5;
LABEL_12:
      uint64_t v12 = (uint64_t)(*v14 - *v13) >> v15;
      break;
    case 9:
      uint64_t v32 = *(uint64_t **)(*(void *)v10 + 24);
      uint64_t v31 = *(uint64_t **)(*(void *)v10 + 32);
      if (v31 == v32 || !*(void *)(*(void *)v10 + 8))
      {
        uint64_t v12 = 0;
      }
      else
      {
        uint64_t v12 = 1;
        do
        {
          uint64_t v33 = *v32++;
          v12 *= v33;
        }
        while (v32 != v31);
      }
      break;
    default:
      break;
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * v11;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (v16 != v12)
  {
    unint64_t v40 = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
  }
  uint64_t v17 = v6 + 160;
  std::string::size_type v19 = *(void **)(a2 + 24);
  std::locale v18 = *(void **)(a2 + 32);
  if (v18 == v19) {
    return (void *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](a3, v17);
  }
  if (!*v19)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    do
    {
      unint64_t v26 = (int *)v19[v24 + 1];
      if (*v26 != *v26 >> 31) {
        break;
      }
      unint64_t v27 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v49, v26);
      std::string::size_type v19 = *(void **)(a2 + 24);
      std::locale v18 = *(void **)(a2 + 32);
      if (v25 != v27) {
        break;
      }
      if (++v25 >= 0xAAAAAAAAAAAAAAABLL * (v18 - v19)) {
        return (void *)std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](a3, v17);
      }
      uint64_t v28 = &v19[v24];
      v24 += 3;
    }
    while (!v28[3]);
  }
  if (v18 == v19)
  {
    int v22 = -1;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    int v22 = -1;
    do
    {
      if (!v19[v20])
      {
        int v23 = turi::variant_converter<int,void>::get((uint64_t)&v49, (int *)v19[v20 + 1]);
        if (v22 <= v23) {
          int v22 = v23;
        }
        std::string::size_type v19 = *(void **)(a2 + 24);
        std::locale v18 = *(void **)(a2 + 32);
      }
      ++v21;
      v20 += 3;
    }
    while (v21 < 0xAAAAAAAAAAAAAAABLL * (v18 - v19));
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v54, v17);
  LODWORD(v49.__r_.__value_.__l.__data_) = v22 + 1;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)&v49.__r_.__value_.__l.__size_, (uint64_t)v54);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v50 = *(std::string *)a2;
  }
  uint64_t v51 = 0;
  unint64_t v52 = 0;
  uint64_t v53 = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(&v51, *(void **)(a2 + 24), *(void **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  int data = (int)v49.__r_.__value_.__l.__data_;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v44, (uint64_t)&v49.__r_.__value_.__l.__size_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v45, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = v50;
  }
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>(&v46, v51, v52, 0xAAAAAAAAAAAAAAABLL * (v52 - v51));
  *(void *)(a3 + 24) = 0;
  std::string v30 = operator new(0x60uLL);
  *(void *)std::string v30 = &unk_26D77C120;
  *((_DWORD *)v30 + 2) = data;
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)v30 + 16, (uint64_t)v44);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v30 + 2, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  }
  else {
    *((std::string *)v30 + 2) = v45;
  }
  *((void *)v30 + 9) = 0;
  *((void *)v30 + 1CoreML::Specification::Scaler::New(this, 0) = 0;
  *((void *)v30 + 11) = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((void *)v30 + 9, v46, v47, 0xAAAAAAAAAAAAAAABLL * (v47 - v46));
  *(void *)(a3 + 24) = v30;
  uint64_t v42 = (void **)&v46;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v42);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v44);
  uint64_t v42 = (void **)&v51;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v42);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](&v49.__r_.__value_.__l.__size_);
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v54);
}

void sub_224398EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v45);
  operator delete(v44);
  turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0::~$_0((uint64_t)&a17);
  turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0::~$_0((uint64_t)&__p);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(v46 - 120));
  _Unwind_Resume(a1);
}

uint64_t turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 64);
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

void turi::toolkit_function_registry::available_toolkit_functions(turi::toolkit_function_registry **this@<X0>, uint64_t *a2@<X8>)
{
  void v17[4] = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = this + 1;
  uint64_t v4 = *this;
  if (*this != (turi::toolkit_function_registry *)(this + 1))
  {
    do
    {
      std::pair<std::string const,turi::toolkit_function_specification>::pair[abi:ne180100](&v11, (long long *)v4 + 2);
      unint64_t v5 = a2[1];
      if (v5 >= a2[2])
      {
        uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (long long *)&v11);
      }
      else
      {
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)a2[1], v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v6 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
          *(void *)(v5 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v5 = v6;
        }
        uint64_t v7 = v5 + 24;
        a2[1] = v5 + 24;
      }
      a2[1] = v7;
      std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v17);
      std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v16);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)v15, v15[1]);
      std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)v14, v14[1]);
      if (v13 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = (turi::toolkit_function_registry *)*((void *)v4 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = (turi::toolkit_function_registry **)v8;
          uint64_t v8 = *(turi::toolkit_function_registry **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (turi::toolkit_function_registry **)*((void *)v4 + 2);
          BOOL v10 = *v9 == v4;
          uint64_t v4 = (turi::toolkit_function_registry *)v9;
        }
        while (!v10);
      }
      uint64_t v4 = (turi::toolkit_function_registry *)v9;
    }
    while (v9 != v3);
  }
}

void sub_224399208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  std::pair<std::string const,turi::toolkit_function_specification>::~pair((uint64_t)&a10);
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,turi::toolkit_function_specification>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::function<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v4);
  return a1;
}

std::string *std::pair<std::string const,turi::toolkit_function_specification>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  turi::toolkit_function_specification::toolkit_function_specification(this + 1, (const turi::toolkit_function_specification *)((char *)a2 + 24));
  return this;
}

void sub_224399410(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *turi::toolkit_function_specification::toolkit_function_specification(std::string *this, const turi::toolkit_function_specification *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&this[1], (const void ***)a2 + 3);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)&this[2], (uint64_t)a2 + 48);
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::__value_func[abi:ne180100]((uint64_t)&this[3], (uint64_t)a2 + 72);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100]((uint64_t)&this[4].__r_.__value_.__l.__size_, (uint64_t)a2 + 104);
  return this;
}

void sub_2243994C8(_Unwind_Exception *a1)
{
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100](v4);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v3, *(void **)(v1 + 56));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v2, *(char **)(v1 + 32));
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::toolkit_function_specification>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::toolkit_function_specification>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::toolkit_function_specification>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,turi::toolkit_function_specification>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::toolkit_function_specification>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::toolkit_function_specification>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::toolkit_function_specification>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::toolkit_function_specification>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::toolkit_function_specification>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0xC0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::toolkit_function_specification>::pair[abi:ne180100]<std::string const&>((std::string *)(v6 + 32), *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_22439961C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::toolkit_function_specification>::pair[abi:ne180100]<std::string const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[2].__r_.__value_.__l.__size_;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[3].__r_.__value_.__l.__size_;
  this[6].__r_.__value_.__l.__size_ = 0;
  return this;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::toolkit_function_specification>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::toolkit_function_specification>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::toolkit_function_specification>,0>(uint64_t a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 128));
  std::__function::__value_func<turi::toolkit_function_response_type ()(turi::toolkit_function_invocation &)>::~__value_func[abi:ne180100]((void *)(a1 + 96));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a1 + 72, *(void **)(a1 + 80));
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1 + 48, *(char **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D77C120;
  long long v3 = (void **)(a1 + 72);
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D77C120;
  long long v3 = (void **)(a1 + 72);
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  return MEMORY[0x22A614FA0](a1, 0x10B3C4088211CA2);
}

void *std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  *uint64_t v2 = &unk_26D77C120;
  std::__compressed_pair_elem<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2243998E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D77C120;
  return std::__compressed_pair_elem<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::operator()(uint64_t a1, void *a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 4) < *(int *)(a1 + 8))
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(exception, "Wrong number of arguments");
  }
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::vector(v13, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3));
  uint64_t v4 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(v4 + v5);
      uint64_t v9 = (uint64_t *)v8[1];
      if (*v8 == 1)
      {
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v13[0] + v6), v9);
      }
      else
      {
        int v10 = turi::variant_converter<int,void>::get((uint64_t)&v14, (int *)v9);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v13[0] + v6), (uint64_t *)(*a2 + 80 * v10));
      }
      ++v7;
      uint64_t v4 = *(void *)(a1 + 72);
      v6 += 80;
      v5 += 24;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v4) >> 3));
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v13);
  char v15 = (void **)v13;
  std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_224399AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = (std::string *)(a1 + 40);
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::__value_func[abi:ne180100](a1 + 8, a2 + 8);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8CoreML::Specification::Scaler::New(this, 0) = 0;
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*,std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>*>((void *)(a1 + 64), *(void **)(a2 + 64), *(void **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  return a1;
}

void sub_224399C10(_Unwind_Exception *a1)
{
  std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__function::__alloc_func<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0,std::allocator<turi::toolkit_function_registry::get_native_function(turi::function_closure_info const&)::$_0>,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::destroy[abi:ne180100](uint64_t a1)
{
  long long v3 = (void **)(a1 + 64);
  std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return std::__function::__value_func<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> ()(std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(void *a1@<X8>)
{
  {
    operator new();
  }
  uint64_t v3 = *(void *)(turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(void)::singleton + 8);
  *a1 = *(void *)turi::neural_net::GrandCentralDispatchQueue::GetGlobalConcurrentQueue(void)::singleton;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_224399D4C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

void turi::neural_net::GrandCentralDispatchQueue::~GrandCentralDispatchQueue(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&unk_26D77C1A0;
  dispatch_release(this[1]);
}

{
  uint64_t vars8;

  *this = (dispatch_object_t)&unk_26D77C1A0;
  dispatch_release(this[1]);
  JUMPOUT(0x22A614FA0);
}

void *turi::neural_net::GrandCentralDispatchQueue::DispatchAsync(uint64_t a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchAsyncENSt3__18functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  dispatch_async(v2, block);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

uint64_t ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchAsyncENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

uint64_t __copy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_ea8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void *turi::neural_net::GrandCentralDispatchQueue::DispatchSync(uint64_t a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4turi10neural_net25GrandCentralDispatchQueue12DispatchSyncENSt3__18functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, a2);
  dispatch_sync(v2, block);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

uint64_t ___ZN4turi10neural_net25GrandCentralDispatchQueue12DispatchSyncENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
  return v2();
}

void turi::neural_net::GrandCentralDispatchQueue::DispatchApply(uint64_t a1, size_t a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  memset(v15.__m_.__opaque, 0, sizeof(v15.__m_.__opaque));
  v15.__m_.__sig = 850045863;
  uint64_t v7 = 0;
  uint64_t v8 = (const std::exception_ptr *)&v7;
  uint64_t v9 = 0x3002000000;
  int v10 = __Block_byref_object_copy__4;
  uint64_t v11 = __Block_byref_object_dispose__4;
  v12.__ptr_ = 0;
  uint64_t v4 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchApplyEmNSt3__18functionIFvmEEE_block_invoke;
  block[3] = &unk_26D77C230;
  std::__function::__value_func<void ()(unsigned long)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  void v14[4] = &v15;
  void block[4] = &v7;
  dispatch_apply(a2, v4, block);
  if (v8[5].__ptr_)
  {
    std::exception_ptr::exception_ptr(&v6, v8 + 5);
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  std::__function::__value_func<void ()(unsigned long)>::~__value_func[abi:ne180100](v14);
  _Block_object_dispose(&v7, 8);
  std::exception_ptr::~exception_ptr(&v12);
  std::mutex::~mutex(&v15);
}

void sub_22439A1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::mutex *a26)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  std::__function::__value_func<void ()(unsigned long)>::~__value_func[abi:ne180100](v27);
  _Block_object_dispose(&a10, 8);
  std::exception_ptr::~exception_ptr(v26);
  std::mutex::~mutex((std::mutex *)&a26);
  _Unwind_Resume(a1);
}

std::exception_ptr *__Block_byref_object_copy__4(std::exception_ptr *a1, const std::exception_ptr *a2)
{
  return std::exception_ptr::exception_ptr(a1 + 5, a2 + 5);
}

void __Block_byref_object_dispose__4(std::exception_ptr *a1)
{
}

uint64_t ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchApplyEmNSt3__18functionIFvmEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(unsigned long)>::operator()(a1 + 40, a2);
}

void sub_22439A260(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  __cxa_begin_catch(a1);
  std::current_exception();
  uint64_t v11 = *(std::mutex **)(v10 + 72);
  std::mutex::lock(v11);
  ___ZN4turi10neural_net25GrandCentralDispatchQueue13DispatchApplyEmNSt3__18functionIFvmEEE_block_invoke_cold_1(v10, &a10, v11);
  JUMPOUT(0x22439A250);
}

void sub_22439A28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvmEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(unsigned long)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvmEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(unsigned long)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void std::allocate_shared[abi:ne180100]<turi::neural_net::GrandCentralDispatchQueue,std::allocator<turi::neural_net::GrandCentralDispatchQueue>,dispatch_queue_global_s *,void>(NSObject **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x28uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_26D77C288;
  std::exception_ptr v5 = *a1;
  v4[3] = &unk_26D77C1A0;
  v4[4] = v5;
  dispatch_retain(v5);
  *a2 = v4 + 3;
  a2[1] = v4;
}

void std::__shared_ptr_emplace<turi::neural_net::GrandCentralDispatchQueue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77C288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::neural_net::GrandCentralDispatchQueue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77C288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::neural_net::GrandCentralDispatchQueue>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::unity_global::unity_global(void *a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D77C2D8;
  a1[3] = a2;
  a1[4] = a3;
  a1[6] = 0;
  a1[5] = a1 + 6;
  a1[7] = 0;
  uint64_t v4 = (int *)global_logger();
  if (v4[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v4)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::exception_ptr v5 = (file_logger *)global_logger();
    started = file_logger::start_stream(v5, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "unity_global", 41, 1);
    uint64_t v7 = pthread_getspecific(*((void *)started + 74));
    if (v7 && *((unsigned char *)v7 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v8 = pthread_getspecific(*((void *)started + 74));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  return a1;
}

void sub_22439A594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy(v11, *((void **)v10 + 6));
  cppipc::ipc_object_base::~ipc_object_base(v10);
  _Unwind_Resume(a1);
}

void turi::unity_global::~unity_global(turi::unity_global *this)
{
  *(void *)this = &unk_26D77C2D8;
  std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  cppipc::ipc_object_base::~ipc_object_base(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D77C2D8;
  std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy((uint64_t)this + 40, *((void **)this + 6));
  cppipc::ipc_object_base::~ipc_object_base(this);
  JUMPOUT(0x22A614FA0);
}

void *turi::unity_global::get_version@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "6.1");
}

uint64_t turi::unity_global::get_graph_dag(turi::unity_global *this)
{
  uint64_t v1 = (turi::unity_sgraph *)std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  uint64_t dag = turi::unity_sgraph::get_dag(v1);
  turi::lazy_eval_operation_dag<turi::sgraph>::print(dag, v6);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v8);
}

void sub_22439A80C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *turi::lazy_eval_operation_dag<turi::sgraph>::print(uint64_t a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"digraph G {\n", 12);
  for (unint64_t i = *(void **)(a1 + 24); i; unint64_t i = (void *)*i)
  {
    uint64_t v5 = i[3];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t\"", 2);
    std::exception_ptr v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\" ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[label=\"", 8);
    char v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)":", 1);
    uint64_t v8 = *(void *)(v5 + 32);
    if (v8)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v8 + 8))(__p);
      if ((v21 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if ((v21 & 0x80u) == 0) {
        uint64_t v10 = v21;
      }
      else {
        uint64_t v10 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v9, v10);
      if ((char)v21 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"NULL", 4);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(v5 + 8);
    if (v11 && v11->__shared_owners_ != -1)
    {
      std::locale v12 = std::__shared_weak_count::lock(v11);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\\nptr=", 6);
      std::ostream::operator<<();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\"", 1);
    uint64_t v13 = *(void *)(v5 + 8);
    if (v13 && *(void *)(v13 + 8) != -1) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)",style=bold", 11);
    }
    if (*(unsigned char *)(v5 + 88)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)",color=red", 10);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
    uint64_t v14 = *(void *)(v5 + 64);
    uint64_t v15 = *(void *)(v5 + 72);
    while (v14 != v15)
    {
      v14 += 8;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t\"", 2);
      uint64_t v16 = (void *)std::ostream::operator<<();
      uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\" -> ", 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
      std::locale v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\"\n", 2);
    }
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"}\n", 2);
}

void sub_22439AAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_global::load_graph()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_graph", 57, 1);
    uint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      uint64_t v5 = std::locale::use_facet(v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  operator new();
}

void sub_22439ACDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16)
{
}

void sub_22439AD18(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C400727145BLL);
  _Unwind_Resume(a1);
}

void sub_22439AD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void turi::unity_global::get_turicreate_object_type(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "get_turicreate_object_type", 68, 1);
    std::exception_ptr v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Getting turicreate object type stored at: ", 42);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v13 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v13, &v14);
    uint64_t v7 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v14);
    uint64_t v8 = pthread_getspecific(*(void *)(v7 + 592));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v11, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v11);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v7);
        if (*(_DWORD *)(v7 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v15 < 0) {
      operator delete((void *)v14.n128_u64[0]);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v12 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "contents");
  turi::dir_archive::get_directory_metadata((uint64_t)&v12);
}

void sub_22439AFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::locale::~locale(&a10);
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void turi::unity_global::list_toolkit_classes(turi::toolkit_class_registry ***this@<X0>, uint64_t *a2@<X8>)
{
}

void turi::unity_global::model_variant_deep_save(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  LODWORD(__p[0]) = v6;
  if (*(void *)a3)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v7 = *(void *)(a3 + 40);
    if (*(void *)(a3 + 32) + 4 > v7)
    {
      size_t v40 = 2 * v7 + 8;
      *(void *)(a3 + 4CoreML::Specification::Scaler::New(this, 0) = v40;
      signed int v41 = *(char ***)(a3 + 16);
      if (v41)
      {
        uint64_t v8 = *v41;
        size_t v42 = v41[1] - *v41;
        BOOL v43 = v40 >= v42;
        std::vector<char>::size_type v44 = v40 - v42;
        if (v44 != 0 && v43)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v44);
          uint64_t v8 = **(char ***)(a3 + 16);
        }
        else if (!v43)
        {
          v41[1] = &v8[v40];
        }
      }
      else
      {
        uint64_t v8 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v40, 0xF6EA6B1uLL);
      }
      *(void *)(a3 + 24) = v8;
    }
    else
    {
      uint64_t v8 = *(char **)(a3 + 24);
    }
    *(_DWORD *)&v8[*(void *)(a3 + 32)] = v6;
    *(void *)(a3 + 32) += 4;
  }
  uint64_t v9 = *(unsigned int *)a2;
  switch(v9 ^ ((int)v9 >> 31))
  {
    case 0u:
      __p[0] = &v57;
      uint64_t has_fallback_type = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v9, 0, (uint64_t)__p, (uint64_t)(a2 + 1));
      if (!has_fallback_type)
      {
        __p[0] = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a3, has_fallback_type);
      return;
    case 1u:
      __p[0] = &v57;
      int v22 = (void *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sgraph_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 1, (uint64_t)__p, (uint64_t)(a2 + 1));
      int v23 = v22;
      if (!v22)
      {
        __p[0] = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      uint64_t v13 = *v22;
      __n128 v14 = (std::__shared_weak_count *)v23[1];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_31;
    case 2u:
      __p[0] = &v57;
      uint64_t v15 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 2, (uint64_t)__p, (uint64_t)(a2 + 1));
      if (!v15)
      {
        __p[0] = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::serialize_impl<turi::oarchive,turi::dataframe_t,false,void>::exec(a3, v15);
      return;
    case 3u:
      __p[0] = &v57;
      uint64_t v16 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::model_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 3, (uint64_t)__p, (uint64_t)(a2 + 1));
      if (!v16)
      {
        __p[0] = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      uint64_t v17 = *(turi::model_base **)v16;
      __n128 v14 = *(std::__shared_weak_count **)(v16 + 8);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::locale v18 = (char *)(*(uint64_t (**)(turi::model_base *))(*(void *)v17 + 16))(v17);
      std::string::basic_string[abi:ne180100]<0>(__p, v18);
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a3, (const void **)__p);
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      turi::model_base::save(v17, (turi::oarchive *)a3);
      goto LABEL_32;
    case 4u:
      __p[0] = &v57;
      std::locale v11 = (void *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 4, (uint64_t)__p, (uint64_t)(a2 + 1));
      std::string v12 = v11;
      if (!v11)
      {
        __p[0] = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      uint64_t v13 = *v11;
      __n128 v14 = (std::__shared_weak_count *)v12[1];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_31;
    case 5u:
      __p[0] = &v57;
      uint64_t v24 = (void *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 5, (uint64_t)__p, (uint64_t)(a2 + 1));
      uint64_t v25 = v24;
      if (!v24)
      {
        __p[0] = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      uint64_t v13 = *v24;
      __n128 v14 = (std::__shared_weak_count *)v25[1];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_31:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, a3);
LABEL_32:
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      break;
    case 6u:
      unint64_t v26 = (const void ***)turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(a2);
      unint64_t v27 = v26[2];
      __p[0] = v27;
      if (*(void *)a3)
      {
        std::ostream::write();
      }
      else
      {
        unint64_t v28 = *(void *)(a3 + 40);
        if (*(void *)(a3 + 32) + 8 > v28)
        {
          size_t v45 = 2 * v28 + 16;
          *(void *)(a3 + 4CoreML::Specification::Scaler::New(this, 0) = v45;
          uint64_t v46 = *(char ***)(a3 + 16);
          if (v46)
          {
            long long v29 = *v46;
            size_t v47 = v46[1] - *v46;
            BOOL v48 = v45 >= v47;
            std::vector<char>::size_type v49 = v45 - v47;
            if (v49 != 0 && v48)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v49);
              long long v29 = **(char ***)(a3 + 16);
            }
            else if (!v48)
            {
              v46[1] = &v29[v45];
            }
          }
          else
          {
            long long v29 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v45, 0xF6EA6B1uLL);
          }
          *(void *)(a3 + 24) = v29;
        }
        else
        {
          long long v29 = *(char **)(a3 + 24);
        }
        *(void *)&v29[*(void *)(a3 + 32)] = v27;
        *(void *)(a3 + 32) += 8;
      }
      uint64_t v32 = *v26;
      std::string v30 = v26 + 1;
      uint64_t v31 = v32;
      if (v32 != (const void **)v30)
      {
        do
        {
          turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a3, v31 + 4);
          turi::unity_global::model_variant_deep_save(a1, v31 + 7, a3);
          uint64_t v33 = (const void **)v31[1];
          if (v33)
          {
            do
            {
              unsigned int v34 = (const void ***)v33;
              uint64_t v33 = (const void **)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              unsigned int v34 = (const void ***)v31[2];
              BOOL v35 = *v34 == v31;
              uint64_t v31 = (const void **)v34;
            }
            while (!v35);
          }
          uint64_t v31 = (const void **)v34;
        }
        while (v34 != v30);
      }
      break;
    case 7u:
      __p[0] = &v57;
      std::string::size_type v19 = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v9, 7u, (uint64_t)__p, a2 + 1);
      uint64_t v20 = v19;
      if (!v19)
      {
        __p[0] = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((v19[1] - *v19) >> 4);
      __p[0] = (void *)v21;
      if (*(void *)a3)
      {
        std::ostream::write();
      }
      else
      {
        unint64_t v36 = *(void *)(a3 + 40);
        if (*(void *)(a3 + 32) + 8 > v36)
        {
          size_t v50 = 2 * v36 + 16;
          *(void *)(a3 + 4CoreML::Specification::Scaler::New(this, 0) = v50;
          uint64_t v51 = *(char ***)(a3 + 16);
          if (v51)
          {
            int v37 = *v51;
            size_t v52 = v51[1] - *v51;
            BOOL v53 = v50 >= v52;
            std::vector<char>::size_type v54 = v50 - v52;
            if (v54 != 0 && v53)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a3 + 16), v54);
              int v37 = **(char ***)(a3 + 16);
            }
            else if (!v53)
            {
              v51[1] = &v37[v50];
            }
          }
          else
          {
            int v37 = (char *)malloc_type_realloc(*(void **)(a3 + 24), v50, 0xF6EA6B1uLL);
          }
          *(void *)(a3 + 24) = v37;
        }
        else
        {
          int v37 = *(char **)(a3 + 24);
        }
        *(void *)&v37[*(void *)(a3 + 32)] = v21;
        *(void *)(a3 + 32) += 8;
      }
      uint64_t v38 = *v20;
      uint64_t v39 = v20[1];
      while (v38 != v39)
      {
        turi::unity_global::model_variant_deep_save(a1, v38, a3);
        v38 += 80;
      }
      break;
    default:
      return;
  }
}

void sub_22439B6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_22439B8A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void sub_22439B8C8(_Unwind_Exception *a1)
{
}

void turi::unity_global::model_variant_deep_load(uint64_t a1, unsigned int *a2, turi::iarchive *a3)
{
  v41[4] = *(void **)MEMORY[0x263EF8340];
  int v35 = 0;
  uint64_t v6 = *((void *)a3 + 2);
  if (v6)
  {
    uint64_t v7 = *((void *)a3 + 3);
    int v8 = *(_DWORD *)(v6 + v7);
    int v35 = v8;
    *((void *)a3 + 3) = v7 + 4;
  }
  else
  {
    std::istream::read();
    int v8 = v35;
  }
  switch(v8)
  {
    case 0:
      __p.__r_.__value_.__r.__words[0] = 0;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
      __p.__r_.__value_.__s.__data_[12] = 0;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::flexible_type>(a2, (uint64_t)&__p);
      switch(__p.__r_.__value_.__s.__data_[12])
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v9 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(__p.__r_.__value_.__r.__words[0] + 31) < 0) {
                operator delete(*(void **)(__p.__r_.__value_.__r.__words[0] + 8));
              }
              uint64_t v10 = (void *)v9;
              uint64_t v11 = 0x1012C404EF22A49;
              goto LABEL_52;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v27 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              unint64_t v28 = *(void **)(__p.__r_.__value_.__r.__words[0] + 8);
              if (v28)
              {
                *(void *)(__p.__r_.__value_.__r.__words[0] + 16) = v28;
                operator delete(v28);
              }
              uint64_t v10 = (void *)v27;
              uint64_t v11 = 0x1080C409938AC02;
              goto LABEL_52;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v25 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              *(void *)&long long v32 = __p.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
              goto LABEL_47;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v25 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              *(void *)&long long v32 = __p.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
LABEL_47:
              uint64_t v10 = (void *)v25;
              uint64_t v11 = 0x1020C405E66F15BLL;
              goto LABEL_52;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v29 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(__p.__r_.__value_.__r.__words[0] + 16));
              uint64_t v10 = (void *)v29;
              unsigned int v26 = -235920773;
              goto LABEL_51;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)__p.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1
            && __p.__r_.__value_.__r.__words[0])
          {
            uint64_t v10 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(__p.__r_.__value_.__l.__data_);
            unsigned int v26 = 2071181815;
LABEL_51:
            uint64_t v11 = v26 | 0x1030C4000000000;
LABEL_52:
            MEMORY[0x22A614FA0](v10, v11);
          }
          break;
        default:
          break;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
      uint64_t has_fallback_type = (unint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a2, *a2 ^ ((int)*a2 >> 31), (uint64_t)&__p, (uint64_t)(a2 + 2));
      if (!has_fallback_type)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a3, has_fallback_type);
      break;
    case 1:
      operator new();
    case 2:
      long long v39 = 0u;
      memset(&__p, 0, sizeof(__p));
      uint64_t v38 = &v39;
      v41[0] = 0;
      v41[1] = 0;
      size_t v40 = v41;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::dataframe_t>(a2, (uint64_t)&__p);
      std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)&v40, v41[0]);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v38, (char *)v39);
      *(void *)&long long v32 = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
      uint64_t v12 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a2, *a2 ^ ((int)*a2 >> 31), (uint64_t)&__p, (uint64_t)(a2 + 2));
      if (!v12)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a3, (uint64_t *)v12);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v12 + 24, *(char **)(v12 + 32));
      *(void *)(v12 + 24) = v12 + 32;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 4CoreML::Specification::Scaler::New(this, 0) = 0;
      turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,std::insert_iterator<std::map<std::string,turi::flex_type_enum>>>((uint64_t)a3, v12 + 24, v12 + 32);
      __n128 v14 = *(void **)(v12 + 56);
      uint64_t v13 = (void *)(v12 + 56);
      std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)(v13 - 1), v14);
      *(v13 - 1) = v13;
      *uint64_t v13 = 0;
      v13[1] = 0;
      turi::deserialize_iterator<turi::iarchive,std::pair<std::string,std::vector<turi::flexible_type>>,std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>>(a3, (uint64_t)(v13 - 1), (uint64_t)v13);
      break;
    case 3:
      memset(&__p, 0, sizeof(__p));
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a3, &__p);
      turi::toolkit_class_registry::get_toolkit_class(*(uint64_t ***)(a1 + 32), (long long *)&__p, &v32);
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      unint64_t v34 = 0;
      uint64_t v18 = *((void *)a3 + 2);
      if (v18)
      {
        uint64_t v19 = *((void *)a3 + 3);
        unint64_t v20 = *(void *)(v18 + v19);
        unint64_t v34 = v20;
        *((void *)a3 + 3) = v19 + 8;
      }
      else
      {
        std::istream::read();
        unint64_t v20 = v34;
      }
      *((void *)&v32 + 1) = 0;
      uint64_t v33 = 0;
      *(void *)&long long v32 = (char *)&v32 + 8;
      if (v20)
      {
        unint64_t v23 = 0;
        do
        {
          memset(&v31, 0, sizeof(v31));
          __p.__r_.__value_.__l.__size_ = 0;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
          __p.__r_.__value_.__s.__data_[20] = 0;
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a3, &v31);
          turi::unity_global::model_variant_deep_load(a1, &__p, a3);
          unint64_t v36 = &v31;
          uint64_t v24 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v32, (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v36);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v24 + 14, (unsigned int *)&__p);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          ++v23;
        }
        while (v23 < v34);
      }
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
    case 7:
      unint64_t v36 = 0;
      uint64_t v15 = *((void *)a3 + 2);
      if (v15)
      {
        uint64_t v16 = *((void *)a3 + 3);
        uint64_t v17 = *(long long **)(v15 + v16);
        unint64_t v36 = (std::string *)v17;
        *((void *)a3 + 3) = v16 + 8;
      }
      else
      {
        std::istream::read();
        uint64_t v17 = (long long *)v36;
      }
      long long v32 = 0uLL;
      uint64_t v33 = 0;
      std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::resize((uint64_t *)&v32, (unint64_t)v17);
      if (v36)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < (unint64_t)v36; ++i)
        {
          __p.__r_.__value_.__l.__size_ = 0;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
          __p.__r_.__value_.__s.__data_[20] = 0;
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          turi::unity_global::model_variant_deep_load(a1, &__p, a3);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)(v32 + v21), (unsigned int *)&__p);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
          v21 += 80;
        }
      }
      boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
    default:
      return;
  }
}

void sub_22439C108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::exception a22,int a23,char a24,int a25,__int16 a26,char a27,char a28)
{
}

void std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 80 * a2;
    while (v3 != (unsigned int *)v7)
    {
      v3 -= 20;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(v3);
    }
    a1[1] = v7;
  }
}

void turi::unity_global::load_model_impl(uint64_t ***this@<X0>, turi::iarchive *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  v60[2] = *MEMORY[0x263EF8340];
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v8 = *((void *)a2 + 2);
  if (v8)
  {
    uint64_t v9 = *((void *)a2 + 3);
    *(void *)&long long v42 = *(void *)(v8 + v9);
    *((void *)a2 + 3) = v9 + 8;
  }
  else
  {
    std::istream::read();
  }
  if ((unint64_t)v42 ^ 0x584C45444F4D4C47 | BYTE8(v42))
  {
    if (!((unint64_t)v42 ^ 0x304C45444F4D4354 | BYTE8(v42)))
    {
      memset(&__str, 0, sizeof(__str));
      turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, &__str);
      v40.__r_.__value_.__l.__size_ = 0;
      LODWORD(v40.__r_.__value_.__r.__words[2]) = 0;
      v40.__r_.__value_.__s.__data_[20] = 0;
      LODWORD(v40.__r_.__value_.__l.__data_) = 0;
      turi::unity_global::model_variant_deep_load((uint64_t)this, (unsigned int *)&v40, a2);
      *(void *)(a4 + 8) = 0;
      uint64_t v10 = a4 + 8;
      *(void *)(a4 + 16) = 0;
      *(void *)a4 = a4 + 8;
      if (a3)
      {
        uint64_t v11 = (const void ***)turi::variant_get_ref<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>((uint64_t *)&v40);
        std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::map[abi:ne180100]((uint64_t *)&v58, v11);
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a4, *(char **)(a4 + 8));
        uint64_t v12 = v59;
        *(std::locale *)a4 = v58;
        *(void *)(a4 + 8) = v12;
        uint64_t v13 = *((void *)&v59 + 1);
        *(void *)(a4 + 16) = *((void *)&v59 + 1);
        if (v13)
        {
          *(void *)(v12 + 16) = v10;
          v58.__locale_ = (std::locale::__imp *)&v59;
          long long v59 = 0uLL;
          uint64_t v12 = 0;
        }
        else
        {
          *(void *)a4 = v10;
        }
        std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v58, (char *)v12);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v58, "model");
        __p[0] = &v58;
        uint64_t v18 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)&v58.__locale_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v18 + 14, (uint64_t *)&v40);
        if (SHIBYTE(v59) < 0) {
          operator delete(v58.__locale_);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "archive_version");
      v58.__locale_ = (std::locale::__imp *)__p;
      uint64_t v19 = (unsigned int *)std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v58)+ 14;
      v41[12] = 0;
      *(_DWORD *)&v41[8] = 0;
      *(void *)signed int v41 = 1;
      memset(v60, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v60, (uint64_t *)v41);
      *(void *)((char *)&v59 + 5) = *(void *)((char *)v60 + 5);
      *(void *)&long long v59 = v60[0];
      BYTE12(v59) = BYTE4(v60[1]);
      LODWORD(v58.__locale_) = 0;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(v19, (unsigned int *)&v58);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v58);
      switch(v41[12])
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_52;
          }
          unint64_t v20 = *(void **)v41;
          if (!*(void *)v41) {
            goto LABEL_52;
          }
          if (*(char *)(*(void *)v41 + 31) < 0) {
            operator delete(*(void **)(*(void *)v41 + 8));
          }
          uint64_t v21 = v20;
          uint64_t v22 = 0x1012C404EF22A49;
          goto LABEL_51;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_52;
          }
          std::string::size_type v29 = *(void **)v41;
          if (!*(void *)v41) {
            goto LABEL_52;
          }
          std::string v30 = *(void **)(*(void *)v41 + 8);
          if (v30)
          {
            *(void *)(*(void *)v41 + 16) = v30;
            operator delete(v30);
          }
          uint64_t v21 = v29;
          uint64_t v22 = 0x1080C409938AC02;
          goto LABEL_51;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_52;
          }
          unint64_t v23 = *(void **)v41;
          if (!*(void *)v41) {
            goto LABEL_52;
          }
          v58.__locale_ = (std::locale::__imp *)(*(void *)v41 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
          goto LABEL_46;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_52;
          }
          unint64_t v23 = *(void **)v41;
          if (!*(void *)v41) {
            goto LABEL_52;
          }
          v58.__locale_ = (std::locale::__imp *)(*(void *)v41 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
LABEL_46:
          uint64_t v21 = v23;
          uint64_t v22 = 0x1020C405E66F15BLL;
          goto LABEL_51;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_52;
          }
          std::string v31 = *(void **)v41;
          if (!*(void *)v41) {
            goto LABEL_52;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v41 + 16));
          uint64_t v21 = v31;
          unsigned int v28 = -235920773;
          goto LABEL_50;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_52;
          }
          uint64_t v24 = *(void **)v41;
          if (!*(void *)v41) {
            goto LABEL_52;
          }
          std::string::size_type v25 = *(void **)(*(void *)v41 + 48);
          if (v25)
          {
            *(void *)(*(void *)v41 + 56) = v25;
            operator delete(v25);
          }
          unsigned int v26 = (void *)v24[3];
          if (v26)
          {
            void v24[4] = v26;
            operator delete(v26);
          }
          std::string::size_type v27 = (std::__shared_weak_count *)v24[2];
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          uint64_t v21 = v24;
          unsigned int v28 = 2071181815;
LABEL_50:
          uint64_t v22 = v28 | 0x1030C4000000000;
LABEL_51:
          MEMORY[0x22A614FA0](v21, v22);
LABEL_52:
          if (v37 < 0) {
            operator delete(__p[0]);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "model_name");
          v58.__locale_ = (std::locale::__imp *)__p;
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v58);
          *(void *)&v41[5] = 0x200000000000000;
          *(void *)signed int v41 = 0;
          operator new();
        default:
          goto LABEL_52;
      }
    }
    turi::unity_global::load_model_impl(turi::iarchive &,BOOL)::$_2::operator()();
  }
  memset(&v40, 0, sizeof(v40));
  memset(&__str, 0, sizeof(__str));
  turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, &v40);
  __n128 v14 = (int *)global_logger();
  if (v14[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v14)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v15 = (file_logger *)global_logger();
    started = file_logger::start_stream(v15, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_model_impl", 229, 1);
    uint64_t v17 = pthread_getspecific(*((void *)started + 74));
    if (v17 && *((unsigned char *)v17 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17 + 2, (uint64_t)"Model name: ", 12);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v38, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
    }
    else {
      std::string v38 = v40;
    }
    uint64_t v32 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v38);
    uint64_t v33 = pthread_getspecific(*(void *)(v32 + 592));
    if (v33)
    {
      if (*((unsigned char *)v33 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(void *)(v33[2] - 24) + 16));
        unint64_t v34 = std::locale::use_facet(&v58, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
        std::locale::~locale(&v58);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v32);
        if (*(_DWORD *)(v32 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, &__str);
  turi::toolkit_class_registry::get_toolkit_class(this[4], (long long *)&v40, v41);
}

void sub_22439E038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,char a43,uint64_t a44,int a45,char a46,uint64_t a47,std::__shared_weak_count *a48)
{
  MEMORY[0x22A614FA0](v49, 0x1012C404EF22A49);
  switch(a43)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a41, 0xFFFFFFFFFFFFFFFFLL) == 1 && a41)
      {
        if (*(char *)(a41 + 31) < 0) {
          operator delete(*(void **)(a41 + 8));
        }
        MEMORY[0x22A614FA0](a41, 0x1012C404EF22A49);
      }
      goto LABEL_27;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a41, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a41) {
        goto LABEL_27;
      }
      long long v55 = *(void **)(a41 + 8);
      if (v55)
      {
        *(void *)(a41 + 16) = v55;
        operator delete(v55);
      }
      long long v53 = (void *)a41;
      uint64_t v56 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v52 = a41;
      if (!a41) {
        goto LABEL_27;
      }
      *(void *)(v50 - 184) = a41 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 184));
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a41, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v52 = a41;
      if (!a41) {
        goto LABEL_27;
      }
      *(void *)(v50 - 184) = a41 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 184));
LABEL_21:
      long long v53 = (void *)v52;
      uint64_t v56 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a41, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a41) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a41 + 16));
      long long v53 = (void *)a41;
      unsigned int v54 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a41, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a41) {
        goto LABEL_27;
      }
      long long v53 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a41);
      unsigned int v54 = 2071181815;
LABEL_25:
      uint64_t v56 = v54 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v53, v56);
LABEL_27:
      if (a15 < 0) {
        operator delete(__p);
      }
      switch(a46)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)a44, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a44) {
            goto LABEL_55;
          }
          if (*(char *)(a44 + 31) < 0) {
            operator delete(*(void **)(a44 + 8));
          }
          std::locale v58 = (void *)a44;
          uint64_t v59 = 0x1012C404EF22A49;
          goto LABEL_54;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)a44, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a44) {
            goto LABEL_55;
          }
          long long v57 = *(void **)(a44 + 8);
          if (v57)
          {
            *(void *)(a44 + 16) = v57;
            operator delete(v57);
          }
          std::locale v58 = (void *)a44;
          uint64_t v59 = 0x1080C409938AC02;
          goto LABEL_54;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)a44, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_55;
          }
          uint64_t v60 = a44;
          if (!a44) {
            goto LABEL_55;
          }
          *(void *)(v50 - 184) = a44 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 184));
          goto LABEL_44;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)a44, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_55;
          }
          uint64_t v60 = a44;
          if (!a44) {
            goto LABEL_55;
          }
          *(void *)(v50 - 184) = a44 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 184));
LABEL_44:
          std::locale v58 = (void *)v60;
          uint64_t v59 = 0x1020C405E66F15BLL;
          goto LABEL_54;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)a44, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a44) {
            goto LABEL_55;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(a44 + 16));
          std::locale v58 = (void *)a44;
          unsigned int v61 = -235920773;
          goto LABEL_48;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)a44, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a44) {
            goto LABEL_55;
          }
          std::locale v58 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a44);
          unsigned int v61 = 2071181815;
LABEL_48:
          uint64_t v59 = v61 | 0x1030C4000000000;
LABEL_54:
          MEMORY[0x22A614FA0](v58, v59);
LABEL_55:
          std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v48, *(char **)(v48 + 8));
          if (a48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](a48);
          }
          if (a27 < 0) {
            operator delete(a22);
          }
          if (a33 < 0) {
            operator delete(a28);
          }
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_55;
      }
    default:
      goto LABEL_27;
  }
}

void turi::unity_global::load_model(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    unint64_t v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_model", 274, 1);
    unint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"Load model from ", 16);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v12 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v12, &__p);
    uint64_t v7 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    uint64_t v8 = pthread_getspecific(*(void *)(v7 + 592));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        uint64_t v9 = std::locale::use_facet(&v15, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v15);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v7);
        if (*(_DWORD *)(v7 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v14 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  v15.__locale_ = (std::locale::__imp *)-1;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = v20;
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v25 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  turi::dir_archive::open_directory_for_read((uint64_t)&v15, (uint64_t)&v11);
}

void sub_22439F438(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x22439F510);
}

void sub_22439F4D0()
{
}

void sub_22439F4DC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22439F510);
}

void turi::unity_global::load_model_from_data(uint64_t ***a1@<X0>, std::locale::__imp *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_model_from_data", 297, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Load model from data", 20);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10 && *((unsigned char *)v10 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
      std::string v11 = std::locale::use_facet(&v13, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
      std::locale::~locale(&v13);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  v13.__locale_ = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  turi::unity_global::load_model_impl(a1, (turi::iarchive *)&v13, 0, a3);
}

void sub_22439F6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void turi::unity_global::save_model(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model", 319, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Save model to ", 14);
    }
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v27 = *(std::string *)a4;
    }
    turi::sanitize_url((__n128 *)&v27, &__p);
    uint64_t v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    std::string v11 = pthread_getspecific(*(void *)(v10 + 592));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        std::string v12 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v29 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
  }
  std::locale v13 = (int *)global_logger();
  if (v13[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v13)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v14 = (file_logger *)global_logger();
    long long v15 = file_logger::start_stream(v14, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model", 320, 1);
    uint64_t v16 = pthread_getspecific(*((void *)v15 + 74));
    if (v16 && *((unsigned char *)v16 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"Model name: ", 12);
    }
    uint64_t v17 = (const char *)(*(uint64_t (**)(void))(**(void **)a2 + 16))();
    uint64_t v18 = (char *)pthread_getspecific(*((void *)v15 + 74));
    if (v18)
    {
      if (v18[280])
      {
        uint64_t v19 = v18 + 16;
        size_t v20 = strlen(v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v17, v20);
        size_t v21 = strlen(v17);
        if (v21)
        {
          if (v17[v21 - 1] == 10) {
            file_logger::stream_flush(v15);
          }
        }
      }
    }
    long long v22 = pthread_getspecific(*((void *)v15 + 74));
    if (v22)
    {
      if (*((unsigned char *)v22 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(v22[2] - 24) + 16));
        long long v23 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v15);
        if (*((_DWORD *)v15 + 150) == 7)
        {
          __print_back_trace();
          uint64_t v25 = __cxa_allocate_exception(8uLL);
          *uint64_t v25 = "LOG_FATAL encountered";
          __cxa_throw(v25, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  v30.__locale_ = (std::locale::__imp *)-1;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = v35;
  v35[0] = 0;
  v35[1] = 0;
  uint64_t v40 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v26 = *(std::string *)a4;
  }
  turi::dir_archive::open_directory_for_write((uint64_t)&v30, (uint64_t)&v26, 0);
}

void sub_2243A0208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2243A0288(_Unwind_Exception *a1)
{
}

void sub_2243A0294(_Unwind_Exception *a1)
{
}

void sub_2243A02A0(_Unwind_Exception *a1)
{
}

void sub_2243A02AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void turi::unity_global::save_model_to_data(uint64_t a1, void *a2, std::string::size_type a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  unint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model_to_data", 354, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Save model to data", 18);
    }
    uint64_t v10 = pthread_getspecific(*((void *)started + 74));
    if (v10)
    {
      if (*((unsigned char *)v10 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(v10[2] - 24) + 16));
        std::string v11 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7) {
          goto LABEL_32;
        }
      }
    }
  }
  std::string v12 = (int *)global_logger();
  if (v12[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v12)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::locale v13 = (file_logger *)global_logger();
    long long v14 = file_logger::start_stream(v13, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model_to_data", 355, 1);
    long long v15 = pthread_getspecific(*((void *)v14 + 74));
    if (v15 && *((unsigned char *)v15 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15 + 2, (uint64_t)"Model name: ", 12);
    }
    uint64_t v16 = (const char *)(*(uint64_t (**)(void))(*(void *)*a2 + 16))();
    uint64_t v17 = (char *)pthread_getspecific(*((void *)v14 + 74));
    if (v17)
    {
      if (v17[280])
      {
        uint64_t v18 = v17 + 16;
        size_t v19 = strlen(v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v16, v19);
        size_t v20 = strlen(v16);
        if (v20)
        {
          if (v16[v20 - 1] == 10) {
            file_logger::stream_flush(v14);
          }
        }
      }
    }
    size_t v21 = pthread_getspecific(*((void *)v14 + 74));
    if (v21)
    {
      if (*((unsigned char *)v21 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v21[2] - 24) + 16));
        long long v22 = std::locale::use_facet(&v30, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(&v30);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(v14);
        if (*((_DWORD *)v14 + 150) == 7)
        {
LABEL_32:
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  v27.__r_.__value_.__r.__words[0] = a3;
  *(_OWORD *)&v27.__r_.__value_.__r.__words[1] = 0u;
  long long v28 = 0u;
  uint64_t v29 = 0;
  std::ostream::write();
  long long v23 = (char *)(*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  std::string::basic_string[abi:ne180100]<0>(&v30, v23);
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec((uint64_t)&v27, (const void **)&v30.__locale_);
  if (SHIBYTE(v32) < 0) {
    operator delete(v30.__locale_);
  }
  uint64_t v24 = a2[1];
  uint64_t v31 = *a2;
  uint64_t v32 = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v30.__locale_) = 3;
  turi::unity_global::model_variant_deep_save(a1, (uint64_t *)&v30, (uint64_t)&v27);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v30);
  if (v27.__r_.__value_.__r.__words[0])
  {
    if ((*(unsigned char *)(v27.__r_.__value_.__r.__words[0] + *(void *)(*(void *)v27.__r_.__value_.__l.__data_ - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "Fail to write.");
      std::string v26 = &v30;
      turi::unity_global::save_model_to_data(std::shared_ptr<turi::model_base>,std::ostream &)::$_0::operator()((uint64_t *)&v26);
    }
  }
}

void sub_2243A0830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2243A0880(_Unwind_Exception *a1)
{
}

void sub_2243A088C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void turi::unity_global::save_model2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model2", 383, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Save model to ", 14);
    }
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      std::string v24 = *(std::string *)a4;
    }
    turi::sanitize_url((__n128 *)&v24, &__p);
    uint64_t v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    std::string v11 = pthread_getspecific(*(void *)(v10 + 592));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        std::string v12 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v26 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  std::locale v13 = (int *)global_logger();
  if (v13[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v13)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    long long v14 = (file_logger *)global_logger();
    long long v15 = file_logger::start_stream(v14, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "save_model2", 384, 1);
    uint64_t v16 = pthread_getspecific(*((void *)v15 + 74));
    if (v16 && *((unsigned char *)v16 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16 + 2, (uint64_t)"Model name: ", 12);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v23 = *(std::string *)a2;
    }
    uint64_t v17 = file_logger::operator<<<std::string>((uint64_t)v15, (uint64_t)&v23);
    uint64_t v18 = pthread_getspecific(*(void *)(v17 + 592));
    if (v18)
    {
      if (*((unsigned char *)v18 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(v18[2] - 24) + 16));
        size_t v19 = std::locale::use_facet(&v27, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
        std::locale::~locale(&v27);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v17);
        if (*(_DWORD *)(v17 + 600) == 7)
        {
          __print_back_trace();
          size_t v21 = __cxa_allocate_exception(8uLL);
          void *v21 = "LOG_FATAL encountered";
          __cxa_throw(v21, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  v27.__locale_ = (std::locale::__imp *)-1;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = v32;
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v37 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v22 = *(std::string *)a4;
  }
  turi::dir_archive::open_directory_for_write((uint64_t)&v27, (uint64_t)&v22, 0);
}

void sub_2243A11C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2243A1240(_Unwind_Exception *a1)
{
}

void sub_2243A124C(_Unwind_Exception *a1)
{
}

void sub_2243A1258(_Unwind_Exception *a1)
{
}

void sub_2243A1264(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x2243A126CLL);
  }
  __clang_call_terminate(a1);
}

void turi::unity_global::list_toolkit_functions(turi::toolkit_function_registry ***this@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t *turi::unity_global::describe_toolkit_function@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t toolkit_function_info = turi::toolkit_function_registry::get_toolkit_function_info(v4, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!toolkit_function_info) {
    turi::unity_global::describe_toolkit_function(std::string)::$_0::operator()();
  }
  return std::map<std::string,turi::flexible_type>::map[abi:ne180100](a3, toolkit_function_info + 48);
}

uint64_t *turi::unity_global::describe_toolkit_class@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X8>)
{
  return turi::toolkit_class_registry::get_toolkit_class_description(*(void *)(a1 + 32), a2, a3);
}

void turi::unity_global::create_toolkit_class(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
}

void turi::unity_global::run_toolkit(uint64_t a1, uint64_t a2, void *a3)
{
  v28[5] = *(long long **)MEMORY[0x263EF8340];
  unint64_t v6 = (int *)global_logger();
  if (v6[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v6)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v7 = (file_logger *)global_logger();
    started = file_logger::start_stream(v7, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "run_toolkit", 441, 1);
    uint64_t v9 = pthread_getspecific(*((void *)started + 74));
    if (v9 && *((unsigned char *)v9 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Running toolkit: ", 17);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v24 = *(std::string *)a2;
    }
    uint64_t v10 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v24);
    std::string v11 = pthread_getspecific(*(void *)(v10 + 592));
    if (v11)
    {
      if (*((unsigned char *)v11 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(v11[2] - 24) + 16));
        std::string v12 = std::locale::use_facet(&v25, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
        std::locale::~locale(&v25);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v10);
        if (*(_DWORD *)(v10 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t toolkit_function_info = turi::toolkit_function_registry::get_toolkit_function_info(v13, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!toolkit_function_info)
  {
    size_t v21 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v21, "Toolkit not found");
  }
  turi::toolkit_function_invocation::toolkit_function_invocation((turi::toolkit_function_invocation *)&v25);
  v27[4] = *(void *)(a1 + 32);
  v28[0] = (long long *)&unk_26D77C4B8;
  v28[3] = (long long *)v28;
  std::__function::__value_func<void ()(std::string)>::swap[abi:ne180100](v28, v27);
  std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100](v28);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__move_assign((uint64_t)&v25, a3);
  long long v15 = *(void **)(toolkit_function_info + 24);
  if (v15 != (void *)(toolkit_function_info + 32))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v25, (const void **)v15 + 4))
      {
        v28[0] = (long long *)(v15 + 4);
        uint64_t v16 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v25, (const void **)v15 + 4, (uint64_t)&std::piecewise_construct, v28);
        boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v16 + 14, v15 + 7);
      }
      uint64_t v17 = (void *)v15[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v15[2];
          BOOL v19 = *v18 == (void)v15;
          long long v15 = v18;
        }
        while (!v19);
      }
      long long v15 = v18;
    }
    while (v18 != (void *)(toolkit_function_info + 32));
  }
  uint64_t v20 = *(void *)(toolkit_function_info + 96);
  if (!v20) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, std::locale *))(*(void *)v20 + 48))(v20, &v25);
  std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100](v27);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy((uint64_t)&v25, v26);
}

void sub_2243A1704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void turi::toolkit_function_invocation::~toolkit_function_invocation(turi::toolkit_function_invocation *this)
{
}

void turi::unity_global::eval_lambda()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "eval_lambda", 481, 1);
    uint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      BOOL v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::unity_global::eval_lambda(std::string const&,turi::flexible_type const&)::$_0::operator()();
}

void sub_2243A1A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_global::eval_dict_lambda()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "eval_dict_lambda", 497, 1);
    uint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      BOOL v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::unity_global::eval_dict_lambda(std::string const&,std::vector<std::string> const&,std::vector<turi::flexible_type> const&)::$_0::operator()();
}

void sub_2243A1B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_global::parallel_eval_lambda()
{
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "parallel_eval_lambda", 511, 1);
    uint64_t v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Function entry", 14);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
      BOOL v5 = std::locale::use_facet(&v7, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v7);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  turi::unity_global::parallel_eval_lambda(std::string const&,std::vector<turi::flexible_type> const&)::$_0::operator()();
}

void sub_2243A1CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_global::__read__(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v4 = *(std::string *)a2;
  }
  turi::general_ifstream::general_ifstream(v5, (uint64_t)&v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (!*(_DWORD *)((char *)&v5[1].__r_.__value_.__r.__words[1] + *(void *)(v5[0].__r_.__value_.__r.__words[0] - 24)))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v3);
    operator new[]();
  }
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(&v5[0].__r_.__value_.__r.__words[2], 8, &v5[0].__r_.__value_.__r.__words[2], 16, (turi::fileio_impl::general_fstream_source *)&v6, &v7);
  v3[0] = a2;
  turi::unity_global::__read__(std::string const&)::$_0::operator()(v3);
}

void sub_2243A2080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
}

uint64_t turi::unity_global::__write__(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v17[19] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v10 = *(std::string *)a2;
  }
  turi::general_ofstream::general_ofstream(&v11, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (!turi::general_ofstream::good((turi::general_ofstream *)&v11))
  {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(v12, 8, v12, 16, (turi::fileio_impl::general_fstream_sink *)v13, &v14);
    uint64_t v9 = a2;
    turi::unity_global::__write__(std::string const&,std::string const&)::$_0::operator()(&v9);
  }
  int v5 = *(char *)(a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(void *)a3;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, v6, v7);
  boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_sink>>>,boost::iostreams::detail::clear_flags_operation<int>>(v12, 8, v12, 16, (turi::fileio_impl::general_fstream_sink *)v13, &v14);
  std::string v11 = &unk_26D75C318;
  v17[0] = &unk_26D75C340;
  if (v16 < 0) {
    operator delete(__p);
  }
  std::ostream::~ostream();
  boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_sink,std::char_traits<char>,std::allocator<char>,boost::iostreams::output>::~stream_buffer((uint64_t)v12);
  return MEMORY[0x22A614E30](v17);
}

void sub_2243A2270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t turi::unity_global::__mkdir__(uint64_t a1, uint64_t a2)
{
  return turi::fileio::create_directory(a2);
}

BOOL turi::unity_global::__chmod__(uint64_t a1, uint64_t a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C0F8], (uint64_t)"The mode: ", 10);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  std::string v4 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  std::ostream::flush();
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  BOOL v5 = turi::fileio::change_file_mode((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_2243A23CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::memory_info::heap_bytes(turi::memory_info *this)
{
  uint64_t v1 = (int *)global_logger();
  if (v1[169] <= 5)
  {
    if (cppipc::must_cancel((cppipc *)v1)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v2 = (file_logger *)global_logger();
    started = file_logger::start_stream(v2, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/perf/memory_info.hpp", "heap_bytes", 57, 1);
    std::string v4 = pthread_getspecific(*((void *)started + 74));
    if (v4 && *((unsigned char *)v4 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4 + 2, (uint64_t)"memory_info::heap_bytes() requires tcmalloc", 43);
    }
    BOOL v5 = pthread_getspecific(*((void *)started + 74));
    if (v5)
    {
      if (*((unsigned char *)v5 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(v5[2] - 24) + 16));
        uint64_t v6 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
        std::locale::~locale(&v9);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  return 0;
}

void sub_2243A2568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t turi::memory_info::allocated_bytes(turi::memory_info *this)
{
  int v1 = turi::memory_info::allocated_bytes(void)::__printed__;
  if (!turi::memory_info::allocated_bytes(void)::__printed__) {
    turi::memory_info::allocated_bytes(void)::__printed__ = 1;
  }
  if (cppipc::must_cancel(this)) {
    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
  }
  uint64_t v2 = (file_logger *)global_logger();
  started = file_logger::start_stream(v2, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/system/platform/perf/memory_info.hpp", "allocated_bytes", 78, v1 == 0);
  std::string v4 = pthread_getspecific(*((void *)started + 74));
  if (v4 && *((unsigned char *)v4 + 280)) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4 + 2, (uint64_t)"memory_info::allocated_bytes() requires tcmalloc", 48);
  }
  BOOL v5 = pthread_getspecific(*((void *)started + 74));
  if (v5)
  {
    if (*((unsigned char *)v5 + 280))
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(v5[2] - 24) + 16));
      uint64_t v6 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
      std::locale::~locale(&v9);
      std::ostream::put();
      std::ostream::flush();
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        void *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
      }
    }
  }
  return 0;
}

void sub_2243A26FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void turi::unity_global::set_log_level(turi::unity_global *this, unint64_t a2)
{
  if (a2 <= 8) {
    *((_DWORD *)global_logger() + 169) = a2;
  }
}

void turi::unity_global::list_globals(turi::globals *a1@<X1>, uint64_t a2@<X8>)
{
  turi::globals::list_globals(a1, (uint64_t)v4);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,turi::flexible_type> *>>(a2, v4[0], v4[1]);
  BOOL v5 = v4;
  std::vector<std::pair<std::string,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_2243A2798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::pair<std::string,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::unity_global::set_global(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  void v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v21 = *(std::string *)a1;
  }
  memset(v22, 0, 13);
  if (v22 != (atomic_ullong **)a2)
  {
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(a2 + 5);
    v22[0] = *(atomic_ullong **)a2;
    BYTE4(v22[1]) = *(unsigned char *)(a2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  int v5 = turi::globals::set_global((uint64_t)&v21, (uint64_t)v22);
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v6 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          uint64_t v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_39;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::locale v9 = v22[0];
        if (v22[0])
        {
          std::string v10 = (void *)v22[0][1];
          if (v10)
          {
            v22[0][2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          uint64_t v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_39;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v11 = v22[0];
        if (v22[0])
        {
          v20.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
          goto LABEL_25;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v11 = v22[0];
        if (v22[0])
        {
          v20.__r_.__value_.__r.__words[0] = (std::string::size_type)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
LABEL_25:
          uint64_t v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_39;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string v12 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          uint64_t v7 = v12;
          unsigned int v13 = -235920773;
          goto LABEL_38;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v14 = v22[0];
        if (v22[0])
        {
          long long v15 = (void *)v22[0][6];
          if (v15)
          {
            v22[0][7] = (atomic_ullong)v15;
            operator delete(v15);
          }
          char v16 = (void *)v14[3];
          if (v16)
          {
            void v14[4] = (atomic_ullong)v16;
            operator delete(v16);
          }
          uint64_t v17 = (std::__shared_weak_count *)v14[2];
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          uint64_t v7 = v14;
          unsigned int v13 = 2071181815;
LABEL_38:
          uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_39:
          MEMORY[0x22A614FA0](v7, v8);
        }
      }
      break;
    default:
      break;
  }
  memset(v22, 0, 13);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  switch(v5)
  {
    case 0:
      std::string::basic_string[abi:ne180100]<0>(a3, "");
      break;
    case 1:
      std::string::basic_string[abi:ne180100]<0>(a3, "No such configuration variable");
      break;
    case 2:
      std::operator+<char>();
      uint64_t v18 = std::string::append(&v20, " is not modifiable at runtime.It can only be modified at start up by an environment variable");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      a3[2] = *((void *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      break;
    case 3:
      std::string::basic_string[abi:ne180100]<0>(a3, "Invalid value");
      break;
    default:
      std::string::basic_string[abi:ne180100]<0>(a3, "Unexpected failure");
      break;
  }
}

void sub_2243A2B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,int a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_global::create_sequential_sarray(turi::unity_sarray *a1@<X1>, void *a2@<X2>, char a3@<W3>, _OWORD *a4@<X8>)
{
}

void turi::unity_global::load_toolkit(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v36 = *(std::string *)a1;
  }
  turi::fileio::get_protocol(&v36, (std::string::size_type)&v37);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v39 < 0)
  {
    if (v38 != 5) {
      goto LABEL_23;
    }
    std::string v4 = (unsigned __int8 *)v37;
  }
  else
  {
    if (v39 != 5) {
      goto LABEL_23;
    }
    std::string v4 = (unsigned __int8 *)&v37;
  }
  int v5 = *(_DWORD *)v4;
  int v6 = v4[4];
  if (v5 == 1633906540 && v6 == 108)
  {
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v35 = *(std::string *)a1;
    }
    turi::fileio::remove_protocol(&v35, &v28);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = v28;
    *((unsigned char *)&v28.__r_.__value_.__s + 2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
    v28.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
LABEL_23:
  memset(v34, 0, sizeof(v34));
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long __sz = 0u;
  long long v29 = 0u;
  *(_OWORD *)&v28.__r_.__value_.__r.__words[1] = 0u;
  std::string::operator=((std::string *)((char *)&v29 + 8), (const std::string *)a1);
  uint64_t v8 = (int *)global_logger();
  if (v8[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v8)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::locale v9 = (file_logger *)global_logger();
    started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/unity_global.cpp", "load_toolkit", 649, 1);
    std::string v11 = pthread_getspecific(*((void *)started + 74));
    if (v11 && *((unsigned char *)v11 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Attempt loading of ", 19);
    }
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v25 = *(std::string *)a1;
    }
    turi::sanitize_url((__n128 *)&v25, &__p);
    uint64_t v12 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    unsigned int v13 = pthread_getspecific(*(void *)(v12 + 592));
    if (v13)
    {
      if (*((unsigned char *)v13 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(v13[2] - 24) + 16));
        int v14 = std::locale::use_facet((const std::locale *)v40, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)v40);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v12);
        if (*(_DWORD *)(v12 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v27 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v24 = *(std::string *)a1;
  }
  BOOL v15 = turi::fileio::try_to_open_file((uint64_t)&v24);
  BOOL v16 = v15;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if (v16)
    {
LABEL_43:
      if (v39 < 0)
      {
        if (!v38) {
          goto LABEL_56;
        }
      }
      else if (!v39)
      {
LABEL_56:
        if (*(char *)(a1 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
        }
        else {
          std::string v21 = *(std::string *)a1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v20, "get_toolkit_function_registration");
        turi::file_contains_substring((uint64_t)&v21);
      }
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      turi::get_temp_name((turi::fs_impl *)v22);
    }
  }
  else if (v15)
  {
    goto LABEL_43;
  }
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v23 = *(std::string *)a1;
  }
  turi::sanitize_url((__n128 *)&v23, (__n128 *)v40);
  uint64_t v17 = std::string::insert(v40, 0, "Unable to open file ");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&v17->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v40[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  v40[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  v40[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v32 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  if (SBYTE7(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(__sz) < 0) {
    operator delete(*((void **)&v29 + 1));
  }
  if (SBYTE7(v29) < 0) {
    operator delete((void *)v28.__r_.__value_.__l.__size_);
  }
  if (v39 < 0) {
    operator delete(v37);
  }
}

void sub_2243A4FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::locale a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,char a58)
{
  *(void *)(v58 - 224) = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 224));
  *(void *)(v58 - 224) = v58 - 152;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 224));
  *(void *)(v58 - 152) = &a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 152));
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  turi::unity_global::so_registration_list::~so_registration_list((void **)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  _Unwind_Resume(a1);
}

void turi::file_contains_substring(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v1, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v1 = *(std::string *)a1;
  }
  turi::general_ifstream::general_ifstream(v2, (uint64_t)&v1);
  if (SHIBYTE(v1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1.__r_.__value_.__l.__data_);
  }
  if ((v2[1].__r_.__value_.__s.__data_[*(void *)(v2[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) == 0)
  {
    if (turi::general_ifstream::file_size((turi::neural_net::shared_float_array **)v2) != -1) {
      operator new[]();
    }
    turi::file_contains_substring(std::string,std::string)::$_1::operator()();
  }
  turi::file_contains_substring(std::string,std::string)::$_0::operator()();
}

void sub_2243A58D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void turi::unity_global::so_registration_list::~so_registration_list(void **this)
{
  uint64_t v2 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

std::string *turi::unity_global::list_toolkit_functions_in_dynamic_module@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 40, (const void **)a2);
  if (a1 + 48 == v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v15 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v15, (__n128 *)&v16);
    std::string v11 = std::string::insert(&v16, 0, "Toolkit name ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    unsigned int v13 = std::string::append(&v17, " not found");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    exception[2] = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v7 = *(long long **)(v6 + 136);
  uint64_t v8 = *(long long **)(v6 + 144);
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, v7, v8, 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 3));
}

void sub_2243A5AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v27 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v26);
  goto LABEL_10;
}

std::string *turi::unity_global::list_toolkit_classes_in_dynamic_module@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 40, (const void **)a2);
  if (a1 + 48 == v6)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v15 = *(std::string *)a2;
    }
    turi::sanitize_url((__n128 *)&v15, (__n128 *)&v16);
    std::string v11 = std::string::insert(&v16, 0, "Toolkit name ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    unsigned int v13 = std::string::append(&v17, " not found");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    exception[2] = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)exception = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
  }
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v7 = *(long long **)(v6 + 160);
  uint64_t v8 = *(long long **)(v6 + 168);
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, v7, v8, 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v7) >> 3));
}

void sub_2243A5C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v27 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v26);
  goto LABEL_10;
}

void turi::unity_global::get_current_cache_file_location(turi::unity_global *this)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  turi::get_temp_name((turi::fs_impl *)__p);
}

void sub_2243A5E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 17) < 0) {
    operator delete(*(void **)(v26 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL boost::filesystem::path::has_parent_path(boost::filesystem::path *this)
{
  boost::filesystem::path::parent_path(this, &v3);
  if ((SHIBYTE(v3.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return SHIBYTE(v3.__r_.__value_.__r.__words[2]) != 0;
  }
  BOOL v1 = v3.__r_.__value_.__l.__size_ != 0;
  operator delete(v3.__r_.__value_.__l.__data_);
  return v1;
}

uint64_t std::pair<std::string const,std::vector<turi::flexible_type>>::~pair(uint64_t a1)
{
  std::string v3 = (void **)(a1 + 24);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

turi::toolkit_function_invocation *turi::toolkit_function_invocation::toolkit_function_invocation(turi::toolkit_function_invocation *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 6) = 0;
  v3[0] = &unk_26D77C428;
  v3[3] = v3;
  std::__function::__value_func<void ()(std::string)>::swap[abi:ne180100](v3, (void *)this + 3);
  std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100](v3);
  return this;
}

void *std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D77C428;
  return result;
}

void std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D77C428;
}

void std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1} &,std::string>(a1 + 8, a2);
}

uint64_t std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1},std::allocator<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}>,void ()(std::string)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1} &,std::string>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)__n128 __p = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}::operator()(a1, (uint64_t)__p);
  if (SHIBYTE(v3) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2243A6114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::toolkit_function_invocation::toolkit_function_invocation(void)::{lambda(std::string)#1}::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)global_logger();
  if (v3[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v3)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    std::string v4 = (file_logger *)global_logger();
    started = file_logger::start_stream(v4, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/lib/toolkit_function_invocation.hpp", "operator()", 22, 1);
    uint64_t v6 = pthread_getspecific(*((void *)started + 74));
    if (v6 && *((unsigned char *)v6 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"PROGRESS: ", 10);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint64_t v7 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    uint64_t v8 = pthread_getspecific(*(void *)(v7 + 592));
    if (v8)
    {
      if (*((unsigned char *)v8 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(v8[2] - 24) + 16));
        std::locale v9 = std::locale::use_facet(&v12, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(&v12);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v7);
        if (*(_DWORD *)(v7 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2243A62E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unint64_t boost::algorithm::boyer_moore_search<std::__wrap_iter<char *>,char *>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::boyer_moore(v8, a3, a4);
  unint64_t v6 = boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::operator()<char *>(v8, a1, a2);
  if (__p)
  {
    std::string v10 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_2243A6388(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x828];
  if (STACK[0x828])
  {
    STACK[0x830] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

unint64_t boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::operator()<char *>(void *a1, unint64_t a2, uint64_t a3)
{
  if (a2 == a3 || *a1 == a1[1]) {
    return a2;
  }
  if ((int64_t)(a3 - a2) < a1[2]) {
    return a3;
  }
  return boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::do_search<char *>(a1, a2, a3);
}

uint64_t *boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::boyer_moore(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a3 - a2;
  unint64_t v6 = a1 + 3;
  uint64_t v7 = a1 + 260;
  unint64_t v8 = a3 - a2 + 1;
  memset(a1 + 3, 255, 0x808uLL);
  std::vector<long>::vector(v7, v8);
  if (a3 != a2)
  {
    uint64_t v9 = 0;
    do
    {
      v6[*(unsigned __int8 *)(a2 + v9)] = v9;
      ++v9;
    }
    while (a2 + v9 != a3);
  }
  boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::build_suffix_table((uint64_t)a1, a2, a3);
  return a1;
}

void sub_2243A647C(_Unwind_Exception *exception_object)
{
  std::string v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 2088) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::build_suffix_table(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - a2;
  if (a3 != a2)
  {
    std::vector<char>::vector(&v21, a3 - a2);
    if (a3 != a2)
    {
      std::vector<char>::pointer begin = v21.__begin_;
      uint64_t v8 = a3;
      do
      {
        char v9 = *(unsigned char *)--v8;
        *begin++ = v9;
      }
      while (v8 != a2);
    }
    std::vector<long>::vector(v20, v3);
    boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::compute_bm_prefix<std::__wrap_iter<char *>,std::vector<long>>(a1, a2, a3, v20);
    std::vector<long>::vector(__p, v3);
    boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::compute_bm_prefix<std::__wrap_iter<char *>,std::vector<long>>(a1, (uint64_t)v21.__begin_, (uint64_t)v21.__end_, __p);
    unint64_t v10 = 0;
    std::string v11 = v20[0];
    uint64_t v12 = *(void *)(a1 + 2080);
    do
      *(void *)(v12 + 8 * v1CoreML::Specification::Scaler::New(this, 0) = v3 - v11[v3 - 1];
    while (v10++ < v3);
    uint64_t v14 = 0;
    std::string v15 = __p[0];
    do
    {
      uint64_t v16 = v15[v14];
      uint64_t v17 = v3 - v16;
      uint64_t v18 = v14 - v16 + 1;
      if (*(void *)(v12 + 8 * v17) > v18) {
        *(void *)(v12 + 8 * v17) = v18;
      }
      ++v14;
    }
    while (v3 != v14);
    __p[1] = v15;
    operator delete(v15);
    if (v20[0])
    {
      v20[1] = v20[0];
      operator delete(v20[0]);
    }
    if (v21.__begin_)
    {
      v21.__end_ = v21.__begin_;
      operator delete(v21.__begin_);
    }
  }
}

void sub_2243A65C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    std::string v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2243A6674(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::compute_bm_prefix<std::__wrap_iter<char *>,std::vector<long>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  std::string v4 = (void *)*a4;
  *(void *)*a4 = 0;
  if ((unint64_t)(a3 - a2) >= 2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
    do
    {
      for (i = *(unsigned __int8 *)(a2 + v6); v5; uint64_t v5 = v4[v5 - 1])
      {
        if (*(unsigned __int8 *)(a2 + v5) == i) {
          break;
        }
      }
      if (*(unsigned __int8 *)(a2 + v5) == i) {
        ++v5;
      }
      v4[v6++] = v5;
    }
    while (v6 != a3 - a2);
  }
}

unint64_t boost::algorithm::boyer_moore<std::__wrap_iter<char *>,boost::algorithm::detail::BM_traits<std::__wrap_iter<char *>>>::do_search<char *>(void *a1, unint64_t a2, uint64_t a3)
{
  for (uint64_t i = a1[2]; a2 <= a3 - i; a2 += v8)
  {
    uint64_t v4 = a1[2];
    while (1)
    {
      uint64_t v5 = *(unsigned __int8 *)(a2 - 1 + v4);
      if (*(unsigned __int8 *)(*a1 - 1 + v4) != v5) {
        break;
      }
      if (!--v4) {
        return a2;
      }
    }
    uint64_t v6 = a1[v5 + 3];
    uint64_t v7 = a1[260];
    if (v6 >= v4)
    {
      uint64_t v9 = *(void *)(v7 + 8 * v4);
    }
    else
    {
      uint64_t v8 = ~v6 + v4;
      uint64_t v9 = *(void *)(v7 + 8 * v4);
      if (v8 > v9) {
        continue;
      }
    }
    uint64_t v8 = v9;
  }
  return a3;
}

void std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::unity_global::so_registration_list>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::unity_global::so_registration_list>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sgraph_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if ((a2 - 2) >= 7)
  {
    switch(a2)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = a4;
        break;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void turi::full_type_name<std::shared_ptr<turi::unity_sgraph_base>>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v5 = 1;
  std::string::basic_string[abi:ne180100]<0>(a2, "SGraph");
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v5);
}

void sub_2243A69C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if ((a2 - 3) >= 6)
  {
    switch(a2)
    {
      case 0:
      case 1:
        return result;
      case 2:
        uint64_t result = a4;
        break;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

uint64_t turi::archive_detail::serialize_impl<turi::oarchive,turi::dataframe_t,false,void>::exec(uint64_t a1, uint64_t a2)
{
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::string,false>::exec(a1, (uint64_t *)a2);
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>>(a1, *(const void ***)(a2 + 24), (const void **)(a2 + 32), *(void *)(a2 + 40));
  uint64_t v4 = *(void **)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  return turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>>(a1, v4, (void *)(a2 + 56), v5);
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *> *,long>>>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v9)
    {
      size_t v14 = 2 * v9 + 16;
      *(void *)(a1 + 4CoreML::Specification::Scaler::New(this, 0) = v14;
      std::string v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        uint64_t result = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, (const void **)a2 + 4);
      uint64_t result = turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec(a1, a2 + 7);
      std::string v11 = (void *)a2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          std::string v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)a2[2];
          BOOL v13 = *v12 == (void)a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
  return result;
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,turi::flex_type_enum>,std::__tree_node<std::__value_type<std::string,turi::flex_type_enum>,void *> *,long>>>(uint64_t a1, const void **a2, const void **a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v9)
    {
      size_t v14 = 2 * v9 + 16;
      *(void *)(a1 + 4CoreML::Specification::Scaler::New(this, 0) = v14;
      std::string v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        uint64_t result = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = result + v14;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::pair<std::string const,turi::flex_type_enum>,false,void>::exec(a1, a2 + 4);
      std::string v11 = (const void **)a2[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          std::string v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (const void **)a2[2];
          BOOL v13 = *v12 == a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
  return result;
}

unsigned char *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<std::string const,turi::flex_type_enum>,false,void>::exec(uint64_t a1, const void **a2)
{
  turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a1, a2);
  uint64_t v4 = a2 + 3;
  if (*(void *)a1)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 1 > v6)
    {
      size_t v7 = 2 * v6 + 2;
      *(void *)(a1 + 4CoreML::Specification::Scaler::New(this, 0) = v7;
      uint64_t v8 = *(void **)(a1 + 16);
      if (v8)
      {
        uint64_t result = (unsigned char *)*v8;
        size_t v9 = v8[1] - *v8;
        BOOL v10 = v7 >= v9;
        std::vector<char>::size_type v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v11);
          uint64_t result = **(unsigned char ***)(a1 + 16);
        }
        else if (!v10)
        {
          v8[1] = &result[v7];
        }
      }
      else
      {
        uint64_t result = malloc_type_realloc(*(void **)(a1 + 24), v7, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(unsigned char **)(a1 + 24);
    }
    result[(*(void *)(a1 + 32))++] = *v4;
  }
  return result;
}

uint64_t turi::model_base::save(turi::model_base *this, turi::oarchive *a2)
{
  uint64_t v4 = (*(uint64_t (**)(turi::model_base *))(*(void *)this + 48))(this);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v5)
    {
      size_t v8 = 2 * v5 + 16;
      *((void *)a2 + 5) = v8;
      size_t v9 = (char **)*((void *)a2 + 2);
      if (v9)
      {
        unint64_t v6 = *v9;
        size_t v10 = v9[1] - *v9;
        BOOL v11 = v8 >= v10;
        std::vector<char>::size_type v12 = v8 - v10;
        if (v12 != 0 && v11)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v12);
          unint64_t v6 = (char *)**((void **)a2 + 2);
        }
        else if (!v11)
        {
          v9[1] = &v6[v8];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*((void **)a2 + 3), v8, 0xF6EA6B1uLL);
      }
      *((void *)a2 + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v6;
    }
    else
    {
      unint64_t v6 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v6[*((void *)a2 + 4)] = v4;
    *((void *)a2 + 4) += 8;
  }
  return (*(uint64_t (**)(turi::model_base *, turi::oarchive *))(*(void *)this + 32))(this, a2);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::dataframe_t>(unsigned int *a1, uint64_t a2)
{
  v6[9] = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  unint64_t v5 = (std::vector<std::string> **)&v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), &v5, (std::vector<std::string> *)(a1 + 2)) & 1) == 0)
  {
    LODWORD(v5) = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>::initializer_node::initialize(v6, a2);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v5);
  }
}

void sub_2243A707C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, std::vector<std::string> ***a3, std::vector<std::string> *a4)
{
  if ((a2 - 3) >= 6)
  {
    switch(a2)
    {
      case 0:
      case 1:
        return 0;
      case 2:
        unint64_t v5 = *a3;
        return boost::detail::variant::direct_mover<turi::dataframe_t>::operator()(v5, a4);
      default:
        boost::detail::variant::forced_return<void>(a1);
    }
  }
  return 0;
}

uint64_t boost::detail::variant::direct_mover<turi::dataframe_t>::operator()(std::vector<std::string> **a1, std::vector<std::string> *this)
{
  unint64_t v3 = *a1;
  std::vector<std::string>::__vdeallocate(this);
  *this = *v3;
  v3->__begin_ = 0;
  v3->__end_ = 0;
  v3->__end_cap_.__value_ = 0;
  std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__move_assign((uint64_t)&this[1], &v3[1].__begin_);
  std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__move_assign((uint64_t)&this[2], &v3[2].__begin_);
  return 1;
}

uint64_t boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>::initializer_node::initialize(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = *(void *)(a2 + 24);
  uint64_t v2 = (void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 32);
  a1[4] = v3;
  uint64_t v4 = a1 + 4;
  uint64_t v5 = *(void *)(a2 + 40);
  a1[5] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 24) = v2;
    *uint64_t v2 = 0;
    *(void *)(a2 + 4CoreML::Specification::Scaler::New(this, 0) = 0;
  }
  else
  {
    a1[3] = v4;
  }
  a1[6] = *(void *)(a2 + 48);
  unint64_t v6 = (void *)(a2 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  a1[7] = v7;
  size_t v8 = a1 + 7;
  uint64_t v9 = *(void *)(a2 + 64);
  a1[8] = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a2 + 48) = v6;
    *unint64_t v6 = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v8;
  }
  return 2;
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if ((a2 - 3) >= 6)
  {
    switch(a2)
    {
      case 0:
      case 1:
        return result;
      case 2:
        uint64_t result = a4;
        break;
      default:
        boost::detail::variant::forced_return<void>(0);
    }
  }
  return result;
}

void turi::deserialize_iterator<turi::iarchive,std::pair<std::string,std::vector<turi::flexible_type>>,std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>>(turi::iarchive *a1, uint64_t a2, uint64_t a3)
{
  v12[0] = a2;
  v12[1] = a3;
  unint64_t v11 = 0;
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v6 = *(void *)(v4 + v5);
    unint64_t v11 = v6;
    *((void *)a1 + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v5 + 8;
    if (v6)
    {
      unint64_t v7 = 0;
      do
      {
        memset(v10, 0, sizeof(v10));
        turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a1, v10);
        turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a1, (uint64_t *)&v10[1]);
        std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100]<std::string,std::vector<turi::flexible_type>,0>(&__p, (long long *)v10);
        std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>::operator=[abi:ne180100]((uint64_t)v12, (const void **)&__p.__r_.__value_.__l.__data_);
        BOOL v13 = (void **)&v9;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v13);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10[1];
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (SHIBYTE(v10[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10[0].__r_.__value_.__l.__data_);
        }
        ++v7;
      }
      while (v7 < v11);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_2243A7408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<turi::flexible_type>>>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (long long *)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

std::string *std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100]<std::string,std::vector<turi::flexible_type>,0>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(this[1].__r_.__value_.__r.__words, *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4);
  return this;
}

void sub_2243A7508(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<turi::flexible_type>>>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  BOOL v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  unint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::pair<std::string const,std::vector<turi::flexible_type>>>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  BOOL v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<turi::flexible_type>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2243A7610(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,std::insert_iterator<std::map<std::string,turi::flex_type_enum>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = a2;
  v13[1] = a3;
  unint64_t v12 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v6 = *(void *)(v4 + v5);
    unint64_t v12 = v6;
    *(void *)(a1 + 24) = v5 + 8;
    if (v6)
    {
      unint64_t v7 = 0;
      do
      {
        memset(&v10, 0, sizeof(v10));
        char v11 = 0;
        turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,false,void>::exec(a1, &v10);
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v10;
        }
        char v9 = v11;
        std::insert_iterator<std::map<std::string,turi::flex_type_enum>>::operator=[abi:ne180100]((uint64_t)v13, (const void **)&__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v10.__r_.__value_.__l.__data_);
        }
        ++v7;
      }
      while (v7 < v12);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_2243A778C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::insert_iterator<std::map<std::string,turi::flex_type_enum>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::flex_type_enum>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flex_type_enum>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flex_type_enum>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,turi::flex_type_enum> const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void *turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,false,void>::exec(uint64_t a1, std::string *a2)
{
  uint64_t result = turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec(a1, a2);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    a2[1].__r_.__value_.__s.__data_[0] = *(unsigned char *)(v5 + (*(void *)(a1 + 24))++);
  }
  else
  {
    return (void *)std::istream::read();
  }
  return result;
}

uint64_t turi::model_base::load(turi::model_base *this, turi::iarchive *a2)
{
  if (*((void *)a2 + 2)) {
    *((void *)a2 + 3) += 8;
  }
  else {
    std::istream::read();
  }
  return (*(uint64_t (**)(turi::model_base *, turi::iarchive *))(*(void *)this + 40))(this, a2);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<std::shared_ptr<turi::model_base>>(unsigned int *a1, uint64_t a2)
{
  void v6[10] = *(uint64_t ***)MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  v6[0] = (uint64_t **)&v5;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<std::shared_ptr<turi::model_base>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), v6, (void *)a1 + 1) & 1) == 0)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    v6[1] = *(uint64_t ***)a2;
    v6[2] = (uint64_t **)v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    LODWORD(v6[0]) = 3;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v6);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v6);
  }
}

void sub_2243A79E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<std::shared_ptr<turi::model_base>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, int a2, uint64_t ***a3, void *a4)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t result = 0;
      break;
    case 3:
      uint64_t v5 = *a3;
      uint64_t result = boost::detail::variant::direct_assigner<std::shared_ptr<turi::model_base>>::operator()(v5, a4);
      break;
    default:
      boost::detail::variant::forced_return<void>(a1);
  }
  return result;
}

uint64_t boost::detail::variant::direct_assigner<std::shared_ptr<turi::model_base>>::operator()(uint64_t **a1, void *a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = v3;
  a2[1] = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return 1;
}

uint64_t std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 80 * a2;
      uint64_t v14 = 80 * a2;
      uint64_t v15 = v7 + 16;
      do
      {
        *(void *)(v15 - 8) = 0;
        *(_DWORD *)uint64_t v15 = 0;
        *(unsigned char *)(v15 + 4) = 0;
        *(_DWORD *)(v15 - 16) = 0;
        v15 += 80;
        v14 -= 80;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = *(void *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>(result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    long long v19 = v12;
    std::string v20 = &v12[80 * v8];
    std::string v22 = &v12[80 * v11];
    size_t v16 = &v20[80 * a2];
    uint64_t v17 = 80 * a2;
    std::vector<char>::size_type v18 = v20 + 16;
    do
    {
      *((void *)v18 - 1) = 0;
      *(_DWORD *)std::vector<char>::size_type v18 = 0;
      void v18[4] = 0;
      *((_DWORD *)v18 - 4) = 0;
      v18 += 80;
      v17 -= 80;
    }
    while (v17);
    std::vector<char> v21 = v16;
    std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_2243A7C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::~__func()
{
}

void *std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D77C4B8;
  return result;
}

void std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D77C4B8;
}

void std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  int v3 = *(char *)(a2 + 23);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  logger(a1, (const char *)a2);
  if (v3 < 0)
  {
    operator delete(v2);
  }
}

void sub_2243A7DA0(_Unwind_Exception *exception_object)
{
  int v3 = v2;
  if (v3 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0,std::allocator<turi::unity_global::run_toolkit(std::string,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> &)::$_0>,void ()(std::string)>::target_type()
{
}

uint64_t logger(uint64_t a1, const char *a2, ...)
{
  va_start(va, a2);
  int v2 = global_logger();
  return file_logger::_log((uint64_t)v2, 5, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/logging/logger.hpp", "vlogger", 773, "Invoke.progress deprecated", va);
}

uint64_t std::map<std::string,turi::flexible_type>::map[abi:ne180100]<std::__wrap_iter<std::pair<std::string,turi::flexible_type> *>>(uint64_t a1, std::string *a2, std::string *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string,turi::flexible_type> &>((uint64_t **)a1, v4, (const void **)&v6->__r_.__value_.__l.__data_, v6);
      uint64_t v6 = (std::string *)((char *)v6 + 40);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2243A7EC4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string,turi::flexible_type> &>(uint64_t **a1, uint64_t *a2, const void **a3, std::string *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string,turi::flexible_type> &>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string,turi::flexible_type> &>@<X0>(uint64_t a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<std::string,turi::flexible_type,0>((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2243A7FC8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::vector<turi::toolkit_function_specification>::__init_with_size[abi:ne180100]<turi::toolkit_function_specification*,turi::toolkit_function_specification*>(std::string *result, turi::toolkit_function_specification *a2, turi::toolkit_function_specification *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::style_transfer::st_example>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*,turi::toolkit_function_specification*,turi::toolkit_function_specification*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2243A8048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::toolkit_function_specification>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*,turi::toolkit_function_specification*,turi::toolkit_function_specification*>(uint64_t a1, turi::toolkit_function_specification *a2, turi::toolkit_function_specification *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v10 = this;
  uint64_t v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      turi::toolkit_function_specification::toolkit_function_specification(v4, v6);
      uint64_t v6 = (const turi::toolkit_function_specification *)((char *)v6 + 136);
      uint64_t v4 = (std::string *)((char *)v11 + 136);
      uint64_t v11 = (std::string *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2243A80F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_function_specification>,turi::toolkit_function_specification*>::operator()[abi:ne180100](uint64_t *a1)
{
  int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 136;
      std::allocator<turi::toolkit_function_specification>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

std::string *std::vector<turi::toolkit_class_specification>::__init_with_size[abi:ne180100]<turi::toolkit_class_specification*,turi::toolkit_class_specification*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry,std::allocator<xgboost_old::tree::ColMaker<xgboost_old::tree::GradStats>::ThreadEntry>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*,turi::toolkit_class_specification*,turi::toolkit_class_specification*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2243A8200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::toolkit_class_specification>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*,turi::toolkit_class_specification*,turi::toolkit_class_specification*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<turi::toolkit_class_specification>::construct[abi:ne180100]<turi::toolkit_class_specification,turi::toolkit_class_specification const&>(v7, v4, v6);
      uint64_t v6 = (long long *)((char *)v6 + 56);
      uint64_t v4 = (std::string *)((char *)v12 + 56);
      unint64_t v12 = (std::string *)((char *)v12 + 56);
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2243A82B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::toolkit_class_specification>,turi::toolkit_class_specification*>::operator()[abi:ne180100](uint64_t *a1)
{
  int v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 56;
      std::allocator<turi::toolkit_class_specification>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,turi::unity_global::so_registration_list>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::unity_global::so_registration_list>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::unity_global::so_registration_list>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0xB8uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 32);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 12CoreML::Specification::Scaler::New(this, 0) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2243A84A0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::unity_global::so_registration_list>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::unity_global::so_registration_list>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

__n128 OUTLINED_FUNCTION_1_5(__n128 *a1)
{
  __n128 result = *a1;
  *(void *)(v1 - 8CoreML::Specification::Scaler::New(this, 0) = a1[1].n128_u64[0];
  *(__n128 *)(v1 - 96) = result;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

double OUTLINED_FUNCTION_15_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __n128 a13, uint64_t a14, uint64_t a15, __n128 a16)
{
  *(void *)&double result = turi::sanitize_url(&a13, &a16).n128_u64[0];
  return result;
}

double OUTLINED_FUNCTION_21_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __n128 a16)
{
  *(void *)&double result = turi::sanitize_url(&a9, &a16).n128_u64[0];
  return result;
}

uint64_t OUTLINED_FUNCTION_26_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return file_logger::operator<<<std::string>(v9, (uint64_t)&a9);
}

__n128 OUTLINED_FUNCTION_27_0@<Q0>(uint64_t a1@<X8>)
{
  return *(__n128 *)a1;
}

uint64_t std::shared_ptr<turi::unity_global>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::create_unity_global_singleton(turi::toolkit_function_registry *a1, turi::toolkit_class_registry *a2)
{
  uint64_t v6 = a1;
  uint64_t v5 = a2;
  std::allocate_shared[abi:ne180100]<turi::unity_global,std::allocator<turi::unity_global>,turi::toolkit_function_registry *&,turi::toolkit_class_registry *&,void>(&v6, &v5, &v4);
  long long v2 = v4;
  long long v4 = 0uLL;
  uint64_t v3 = (std::__shared_weak_count *)qword_26808E3B8;
  *(_OWORD *)&turi::unity_global_ptr = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

uint64_t turi::get_unity_global_singleton@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t *a7@<X8>)
{
  uint64_t v9 = turi::unity_global_ptr;
  if (!turi::unity_global_ptr)
  {
    uint64_t result = assert_msg(0, (uint64_t)"Unity Global has not been created", a1, a2, a3, a4, a5, a6, v12);
    uint64_t v9 = turi::unity_global_ptr;
  }
  uint64_t v11 = qword_26808E3B8;
  *a7 = v9;
  a7[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<turi::unity_global,std::allocator<turi::unity_global>,turi::toolkit_function_registry *&,turi::toolkit_class_registry *&,void>(turi::toolkit_function_registry **a1@<X1>, turi::toolkit_class_registry **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x58uLL);
  std::__shared_ptr_emplace<turi::unity_global>::__shared_ptr_emplace[abi:ne180100]<turi::toolkit_function_registry *&,turi::toolkit_class_registry *&,std::allocator<turi::unity_global>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_2243A872C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::unity_global>::__shared_ptr_emplace[abi:ne180100]<turi::toolkit_function_registry *&,turi::toolkit_class_registry *&,std::allocator<turi::unity_global>,0>(void *a1, turi::toolkit_function_registry **a2, turi::toolkit_class_registry **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D77C538;
  turi::unity_global::unity_global((turi::unity_global *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_2243A8790(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::unity_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77C538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::unity_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77C538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::unity_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void CoreML::validate<(MLModelType)200>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1 + 44) == 200) {
    long long v4 = *(uint64_t **)(a1 + 32);
  }
  else {
    long long v4 = CoreML::Specification::PipelineClassifier::default_instance((CoreML::Specification::PipelineClassifier *)a1);
  }
  if (v4[2]) {
    uint64_t v5 = (const CoreML::Specification::Model *)v4[2];
  }
  else {
    uint64_t v5 = (const CoreML::Specification::Model *)&CoreML::Specification::_Pipeline_default_instance_;
  }
  CoreML::validate((CoreML *)a1, v5, a2);
}

void CoreML::validate(CoreML *this@<X0>, const CoreML::Specification::Model *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((int *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = a2;
    memset(v115, 0, sizeof(v115));
    int v116 = 1065353216;
    unint64_t v8 = (uint64_t *)*((void *)this + 2);
    if (!v8) {
      unint64_t v8 = &CoreML::Specification::_ModelDescription_default_instance_;
    }
    uint64_t v9 = v8[4];
    if (v9) {
      uint64_t v10 = v9 + 8;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *((int *)v8 + 6);
    int v104 = v5;
    if (v11)
    {
      uint64_t v12 = 8 * v11;
      do
      {
        uint64_t v13 = *(void *)v10;
        __p[0] = *(void **)(*(void *)v10 + 16);
        *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v115, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (long long **)__p)+ 5) = v13;
        v10 += 8;
        v12 -= 8;
      }
      while (v12);
      uint64_t v15 = (void *)((char *)v6 + 32);
      uint64_t v14 = *((void *)v6 + 4);
      uint64_t v16 = *((int *)v6 + 6);
      if (v14) {
        uint64_t v17 = (CoreML::Model **)(v14 + 8);
      }
      else {
        uint64_t v17 = 0;
      }
      if (v16)
      {
        std::string::size_type v103 = v6;
        std::vector<char>::size_type v18 = &v17[v16];
        goto LABEL_21;
      }
LABEL_44:
      std::string v35 = (uint64_t *)*((void *)this + 2);
      if (!v35) {
        std::string v35 = &CoreML::Specification::_ModelDescription_default_instance_;
      }
      uint64_t v36 = v35[7];
      if (v36) {
        uint64_t v37 = (CoreML::Specification **)(v36 + 8);
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t v38 = *((int *)v35 + 12);
      char v39 = (CoreML::Result *)a3;
      if (v38)
      {
        uint64_t v40 = 8 * v38;
        while (1)
        {
          uint64_t v41 = *v37;
          long long v42 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v115, *((unsigned __int8 **)*v37 + 2));
          if (!v42)
          {
            std::operator+<char>();
            uint64_t v81 = std::string::append(&v114, "' not present in pipeline input or a contained model.");
            long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
            std::string::size_type v108 = v81->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v82;
            v81->__r_.__value_.__l.__size_ = 0;
            v81->__r_.__value_.__r.__words[2] = 0;
            v81->__r_.__value_.__r.__words[0] = 0;
            CoreML::Result::Result((_DWORD *)a3, 13);
            goto LABEL_133;
          }
          if (!CoreML::Specification::isEquivalent(v41, *((const CoreML::Specification::FeatureDescription **)v42 + 5), v43))break; {
          ++v37;
          }
          v40 -= 8;
          if (!v40) {
            goto LABEL_54;
          }
        }
        std::operator+<char>();
        char v83 = std::string::append(&v114, "' does not match type produced in pipeline input.");
        long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        std::string::size_type v108 = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result((_DWORD *)a3, 1);
LABEL_133:
        if (SHIBYTE(v108) < 0) {
          operator delete(__p[0]);
        }
        if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_138;
        }
        long long v46 = (void *)v114.__r_.__value_.__r.__words[0];
        goto LABEL_137;
      }
LABEL_54:
      if (*((unsigned char *)this + 28))
      {
        uint64_t v44 = (v104 - 1);
        if (v104 >= 2)
        {
          uint64_t v45 = 0;
          while (1)
          {
            CoreML::Specification::Model::Model((CoreML::Specification::Model *)__p, *(const CoreML::Specification::Model **)(*v15 + 8 * v45 + 8));
            if (v109) {
              break;
            }
            CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
            if (v44 == ++v45) {
              goto LABEL_59;
            }
          }
          std::to_string(&v112, v45);
          std::string::size_type v95 = std::string::insert(&v112, 0, "Only the last model in the pipeline can be updatable. Model at position '");
          long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v96;
          v95->__r_.__value_.__l.__size_ = 0;
          v95->__r_.__value_.__r.__words[2] = 0;
          v95->__r_.__value_.__r.__words[0] = 0;
          uint64_t v97 = std::string::append(&v113, "' is marked as updatable.");
          long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          v114.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result((_DWORD *)a3, 15);
LABEL_156:
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v112.__r_.__value_.__l.__data_);
          }
          CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
          goto LABEL_138;
        }
LABEL_59:
        if (!*(unsigned char *)(*(void *)(*v15 + 8 * (int)v44 + 8) + 28))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Last model in an updatable pipeline model should be marked as updatable.");
          CoreML::Result::Result((_DWORD *)a3, 15);
          if ((SHIBYTE(v108) & 0x80000000) == 0)
          {
LABEL_138:
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v115);
            return;
          }
          long long v46 = __p[0];
LABEL_137:
          operator delete(v46);
          goto LABEL_138;
        }
      }
      else if (v104 >= 1)
      {
        uint64_t v66 = 0;
        while (1)
        {
          CoreML::Specification::Model::Model((CoreML::Specification::Model *)__p, *(const CoreML::Specification::Model **)(*v15 + 8 * v66 + 8));
          if (v109) {
            break;
          }
          CoreML::Specification::Model::~Model((CoreML::Specification::Model *)__p);
          if (v104 == ++v66) {
            goto LABEL_101;
          }
        }
        std::to_string(&v112, v66);
        uint64_t v99 = std::string::insert(&v112, 0, "Found an updatable model at '");
        long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        uint64_t v101 = std::string::append(&v113, "' inside a non-updatable pipeline.");
        long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
        v114.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v102;
        v101->__r_.__value_.__l.__size_ = 0;
        v101->__r_.__value_.__r.__words[2] = 0;
        v101->__r_.__value_.__r.__words[0] = 0;
        CoreML::Result::Result((_DWORD *)a3, 15);
        goto LABEL_156;
      }
LABEL_101:
      int v67 = *((_DWORD *)v6 + 12);
      if (v67 < 1)
      {
LABEL_165:
        CoreML::Result::Result(v39);
        goto LABEL_138;
      }
      if (v67 == v104)
      {
        __p[1] = 0;
        std::string::size_type v108 = 0;
        __p[0] = &__p[1];
        if (v104 >= 1)
        {
          uint64_t v68 = 0;
          while (1)
          {
            double v69 = *(long long **)(*((void *)v6 + 7) + 8 * v68 + 8);
            if (*((char *)v69 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v114, *(const std::string::value_type **)v69, *((void *)v69 + 1));
            }
            else
            {
              long long v70 = *v69;
              v114.__r_.__value_.__r.__words[2] = *((void *)v69 + 2);
              *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v70;
            }
            double v71 = (void **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)__p, (const void **)&v114.__r_.__value_.__l.__data_);
            if (&__p[1] == v71)
            {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)__p, (const void **)&v114.__r_.__value_.__l.__data_, (uint64_t)&v114);
            }
            else
            {
              std::operator+<char>();
              uint64_t v72 = std::string::append(&v110, "' at index '");
              long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
              v111.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v73;
              v72->__r_.__value_.__l.__size_ = 0;
              v72->__r_.__value_.__r.__words[2] = 0;
              v72->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v106, v68);
              if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v74 = &v106;
              }
              else {
                uint64_t v74 = (std::string *)v106.__r_.__value_.__r.__words[0];
              }
              if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(v106.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = v106.__r_.__value_.__l.__size_;
              }
              int v76 = std::string::append(&v111, (const std::string::value_type *)v74, size);
              long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
              v112.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v77;
              v76->__r_.__value_.__l.__size_ = 0;
              v76->__r_.__value_.__r.__words[2] = 0;
              v76->__r_.__value_.__r.__words[0] = 0;
              uint64_t v78 = std::string::append(&v112, " has already been used for previous models");
              long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
              v113.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v79;
              v78->__r_.__value_.__l.__size_ = 0;
              v78->__r_.__value_.__r.__words[2] = 0;
              v78->__r_.__value_.__r.__words[0] = 0;
              CoreML::Result::Result((_DWORD *)a3, 13);
              if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v113.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v106.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v111.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v110.__r_.__value_.__l.__data_);
              }
            }
            if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v114.__r_.__value_.__l.__data_);
            }
            if (&__p[1] != v71) {
              break;
            }
            if (v104 == ++v68)
            {
              char v80 = (char *)__p[1];
              char v39 = (CoreML::Result *)a3;
              goto LABEL_164;
            }
          }
          std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)__p, (char *)__p[1]);
          goto LABEL_138;
        }
        char v80 = 0;
LABEL_164:
        std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)__p, v80);
        goto LABEL_165;
      }
      std::to_string(&v111, v67);
      std::locale v85 = std::string::insert(&v111, 0, "The number of pipeline model names '");
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      int v87 = std::string::append(&v112, "' doesn't match the number of models '");
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v110, v104);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v89 = &v110;
      }
      else {
        uint64_t v89 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v90 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v90 = v110.__r_.__value_.__l.__size_;
      }
      uint64_t v91 = std::string::append(&v113, (const std::string::value_type *)v89, v90);
      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v93 = std::string::append(&v114, "'");
      long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      std::string::size_type v108 = v93->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result((_DWORD *)a3, 13);
      if (SHIBYTE(v108) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v65 = (void *)v113.__r_.__value_.__r.__words[0];
LABEL_92:
        operator delete(v65);
      }
    }
    else
    {
      std::string::size_type v103 = a2;
      uint64_t v15 = (void *)((char *)a2 + 32);
      uint64_t v19 = *((void *)a2 + 4);
      if (v19) {
        uint64_t v17 = (CoreML::Model **)(v19 + 8);
      }
      else {
        uint64_t v17 = 0;
      }
      std::vector<char>::size_type v18 = &v17[v5];
      while (1)
      {
LABEL_21:
        std::string v20 = *v17;
        std::vector<char> v21 = (uint64_t *)*((void *)*v17 + 2);
        if (!v21) {
          std::vector<char> v21 = &CoreML::Specification::_ModelDescription_default_instance_;
        }
        uint64_t v22 = v21[4];
        uint64_t v23 = v22 ? v22 + 8 : 0;
        uint64_t v24 = *((int *)v21 + 6);
        if (v24) {
          break;
        }
LABEL_31:
        CoreML::Model::validate(v20, a2);
        if (!CoreML::Result::good((CoreML::Result *)a3)) {
          goto LABEL_138;
        }
        long long v29 = (uint64_t *)*((void *)v20 + 2);
        if (!v29) {
          long long v29 = &CoreML::Specification::_ModelDescription_default_instance_;
        }
        uint64_t v30 = v29[7];
        if (v30) {
          uint64_t v31 = v30 + 8;
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v32 = *((int *)v29 + 12);
        if (v32)
        {
          uint64_t v33 = 8 * v32;
          do
          {
            uint64_t v34 = *(void *)v31;
            __p[0] = *(void **)(*(void *)v31 + 16);
            *((void *)std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v115, (unsigned __int8 *)__p[0], (uint64_t)&std::piecewise_construct, (long long **)__p)+ 5) = v34;
            v31 += 8;
            v33 -= 8;
          }
          while (v33);
        }
        if (*(char *)(a3 + 31) < 0) {
          operator delete(*(void **)(a3 + 8));
        }
        if (++v17 == v18)
        {
          uint64_t v6 = v103;
          goto LABEL_44;
        }
      }
      uint64_t v25 = 8 * v24;
      while (1)
      {
        uint64_t v26 = *(CoreML::Specification **)v23;
        int v27 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>(v115, *(unsigned __int8 **)(*(void *)v23 + 16));
        if (!v27)
        {
          std::operator+<char>();
          long long v47 = std::string::append(&v112, "' of model '");
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v113.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          CoreML::Specification::ModelDescription::GetTypeName(&v111);
          if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v49 = &v111;
          }
          else {
            uint64_t v49 = (std::string *)v111.__r_.__value_.__r.__words[0];
          }
          if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v50 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v50 = v111.__r_.__value_.__l.__size_;
          }
          long long v51 = std::string::append(&v113, (const std::string::value_type *)v49, v50);
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v114.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          long long v53 = std::string::append(&v114, "' does not present in pipeline input or previous model.");
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          std::string::size_type v108 = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          CoreML::Result::Result((_DWORD *)a3, 13);
          if (SHIBYTE(v108) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v111.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v113.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          {
            long long v46 = (void *)v112.__r_.__value_.__r.__words[0];
            goto LABEL_137;
          }
          goto LABEL_138;
        }
        if (!CoreML::Specification::isEquivalent(v26, *((const CoreML::Specification::FeatureDescription **)v27 + 5), v28))break; {
        v23 += 8;
        }
        v25 -= 8;
        if (!v25) {
          goto LABEL_31;
        }
      }
      std::operator+<char>();
      long long v55 = std::string::append(&v111, "' of model '");
      long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      CoreML::Specification::ModelDescription::GetTypeName(&v110);
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v57 = &v110;
      }
      else {
        long long v57 = (std::string *)v110.__r_.__value_.__r.__words[0];
      }
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v58 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v58 = v110.__r_.__value_.__l.__size_;
      }
      uint64_t v59 = std::string::append(&v112, (const std::string::value_type *)v57, v58);
      long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      unsigned int v61 = std::string::append(&v113, "' does not match the type previously specified by the pipeline input or the output of a previous model.");
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      uint64_t v63 = std::string::append(&v114, " For the second case, make sure the input and previous model's output has the matching name and shapes.");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      std::string::size_type v108 = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      CoreML::Result::Result((_DWORD *)a3, 1);
      if (SHIBYTE(v108) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v114.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v65 = (void *)v110.__r_.__value_.__r.__words[0];
        goto LABEL_92;
      }
    }
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v112.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_138;
    }
    long long v46 = (void *)v111.__r_.__value_.__r.__words[0];
    goto LABEL_137;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Pipeline must contain one or more models.");
  CoreML::Result::Result((_DWORD *)a3, 13);
  if (SHIBYTE(v108) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2243A939C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (*(char *)(v53 - 153) < 0) {
    operator delete(*(void **)(v53 - 176));
  }
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)&a18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v53 - 144);
  _Unwind_Resume(a1);
}

void CoreML::validate<(MLModelType)201>(CoreML *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)this + 11) == 201) {
    long long v4 = (uint64_t *)*((void *)this + 4);
  }
  else {
    long long v4 = CoreML::Specification::PipelineRegressor::default_instance(this);
  }
  if (v4[2]) {
    uint64_t v5 = (const CoreML::Specification::Model *)v4[2];
  }
  else {
    uint64_t v5 = (const CoreML::Specification::Model *)&CoreML::Specification::_Pipeline_default_instance_;
  }
  CoreML::validate(this, v5, a2);
}

void CoreML::validate<(MLModelType)202>(CoreML *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)this + 11) == 202) {
    long long v4 = (uint64_t *)*((void *)this + 4);
  }
  else {
    long long v4 = CoreML::Specification::Pipeline::default_instance(this);
  }
  CoreML::validate(this, (const CoreML::Specification::Model *)v4, a2);
}

void *turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::get@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = (void *)turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(a1);
  uint64_t v4 = result[1];
  *a2 = *result;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2243A9858(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sarray_base>>(v10);
}

void sub_2243A987C(_Unwind_Exception *a1)
{
}

void turi::variant_converter<std::shared_ptr<turi::unity_sarray>,void>::set(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  *(_DWORD *)a2 = 5;
}

void *turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::get@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = (void *)turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(a1);
  uint64_t v4 = result[1];
  *a2 = *result;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2243A9974(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::unity_sframe_base>>(v10);
}

void sub_2243A9998(_Unwind_Exception *a1)
{
}

void turi::variant_converter<std::shared_ptr<turi::unity_sframe>,void>::set(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  *(_DWORD *)a2 = 4;
}

void turi::variant_converter<std::shared_ptr<turi::unity_sgraph>,void>::set(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  *(_DWORD *)a2 = 1;
}

void turi::variant_converter<turi::gl_sarray,void>::get(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)turi::variant_get_ref<std::shared_ptr<turi::unity_sarray_base>>(a1);
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  uint64_t v5 = *v3;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::gl_sarray::gl_sarray(a2, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_2243A9A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::variant_converter<turi::gl_sarray,void>::set(const turi::gl_sarray *a1@<X1>, uint64_t a2@<X8>)
{
  if (turi::USE_GL_DATATYPE)
  {
    std::allocate_shared[abi:ne180100]<turi::gl_sarray,std::allocator<turi::gl_sarray>,turi::gl_sarray&,void>(a1, lpsrc);
    uint64_t v3 = lpsrc[0];
    if (lpsrc[0]
    {
      uint64_t v4 = lpsrc[1];
      if (lpsrc[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    *(void *)(a2 + 8) = v3;
    *(void *)(a2 + 16) = v4;
    *(_DWORD *)a2 = 3;
    if (lpsrc[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc[1]);
    }
  }
  else
  {
    turi::gl_sarray::operator std::shared_ptr<turi::unity_sarray_base>((uint64_t)a1, lpsrc);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)lpsrc;
    *(_DWORD *)a2 = 5;
  }
}

void turi::variant_converter<turi::gl_sframe,void>::get(int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = (uint64_t *)turi::variant_get_ref<std::shared_ptr<turi::unity_sframe_base>>(a1);
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  uint64_t v5 = *v3;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::gl_sframe::gl_sframe(a2, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_2243A9BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double turi::variant_converter<turi::gl_sframe,void>::set@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  turi::gl_sframe::operator std::shared_ptr<turi::unity_sframe_base>(a1, &v4);
  double result = *(double *)&v4;
  *(_OWORD *)(a2 + 8) = v4;
  *(_DWORD *)a2 = 4;
  return result;
}

void *std::allocate_shared[abi:ne180100]<turi::gl_sarray,std::allocator<turi::gl_sarray>,turi::gl_sarray&,void>@<X0>(const turi::gl_sarray *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x40uLL);
  double result = std::__shared_ptr_emplace<turi::gl_sarray>::__shared_ptr_emplace[abi:ne180100]<turi::gl_sarray&,std::allocator<turi::gl_sarray>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2243A9C54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::gl_sarray>::__shared_ptr_emplace[abi:ne180100]<turi::gl_sarray&,std::allocator<turi::gl_sarray>,0>(void *a1, const turi::gl_sarray *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D77C588;
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)(a1 + 3), a2);
  return a1;
}

void sub_2243A9CB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::gl_sarray>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77C588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::gl_sarray>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77C588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::gl_sarray>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void turi::variant_deep_save(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  LODWORD(v52) = v4;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 4 > v5)
    {
      size_t v36 = 2 * v5 + 8;
      *(void *)(a2 + 4CoreML::Specification::Scaler::New(this, 0) = v36;
      uint64_t v37 = *(char ***)(a2 + 16);
      if (v37)
      {
        uint64_t v6 = *v37;
        size_t v38 = v37[1] - *v37;
        BOOL v39 = v36 >= v38;
        std::vector<char>::size_type v40 = v36 - v38;
        if (v40 != 0 && v39)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v40);
          uint64_t v6 = **(char ***)(a2 + 16);
        }
        else if (!v39)
        {
          v37[1] = &v6[v36];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v36, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v6;
    }
    else
    {
      uint64_t v6 = *(char **)(a2 + 24);
    }
    *(_DWORD *)&v6[*(void *)(a2 + 32)] = v4;
    *(void *)(a2 + 32) += 4;
  }
  uint64_t v7 = *(unsigned int *)a1;
  switch(v7 ^ ((int)v7 >> 31))
  {
    case 0u:
      long long v52 = &v51;
      uint64_t has_fallback_type = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)v7, 0, (uint64_t)&v52, (uint64_t)(a1 + 1));
      if (!has_fallback_type)
      {
        long long v52 = (char *)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a2, has_fallback_type);
      return;
    case 1u:
      long long v52 = &v51;
      uint64_t v16 = (void *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sgraph_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 1, (uint64_t)&v52, (uint64_t)(a1 + 1));
      uint64_t v17 = v16;
      if (!v16)
      {
        long long v52 = (char *)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      uint64_t v11 = *v16;
      uint64_t v12 = (std::__shared_weak_count *)v17[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_22;
    case 2u:
      long long v52 = &v51;
      uint64_t v15 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 2, (uint64_t)&v52, (uint64_t)(a1 + 1));
      if (!v15)
      {
        long long v52 = (char *)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::serialize_impl<turi::oarchive,turi::dataframe_t,false,void>::exec(a2, v15);
      return;
    case 3u:
      turi::variant_deep_save(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> const&,turi::oarchive &)::$_0::operator()();
    case 4u:
      long long v52 = &v51;
      uint64_t v13 = (void *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sframe_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 4, (uint64_t)&v52, (uint64_t)(a1 + 1));
      uint64_t v14 = v13;
      if (!v13)
      {
        long long v52 = (char *)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      uint64_t v11 = *v13;
      uint64_t v12 = (std::__shared_weak_count *)v14[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_22;
    case 5u:
      long long v52 = &v51;
      uint64_t v9 = (void *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::unity_sarray_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 5, (uint64_t)&v52, (uint64_t)(a1 + 1));
      uint64_t v10 = v9;
      if (!v9)
      {
        long long v52 = (char *)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      uint64_t v11 = *v9;
      uint64_t v12 = (std::__shared_weak_count *)v10[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_22:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, a2);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      break;
    case 6u:
      long long v52 = &v51;
      uint64_t v18 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 6u, (uint64_t)&v52, a1 + 1);
      uint64_t v19 = (const void ***)v18;
      if (!v18)
      {
        long long v52 = (char *)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      std::string v20 = *(char **)(v18 + 16);
      long long v52 = v20;
      if (*(void *)a2)
      {
        std::ostream::write();
      }
      else
      {
        unint64_t v24 = *(void *)(a2 + 40);
        if (*(void *)(a2 + 32) + 8 > v24)
        {
          size_t v41 = 2 * v24 + 16;
          *(void *)(a2 + 4CoreML::Specification::Scaler::New(this, 0) = v41;
          long long v42 = *(char ***)(a2 + 16);
          if (v42)
          {
            uint64_t v25 = *v42;
            size_t v43 = v42[1] - *v42;
            BOOL v44 = v41 >= v43;
            std::vector<char>::size_type v45 = v41 - v43;
            if (v45 != 0 && v44)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v45);
              uint64_t v25 = **(char ***)(a2 + 16);
            }
            else if (!v44)
            {
              v42[1] = &v25[v41];
            }
          }
          else
          {
            uint64_t v25 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v41, 0xF6EA6B1uLL);
          }
          *(void *)(a2 + 24) = v25;
        }
        else
        {
          uint64_t v25 = *(char **)(a2 + 24);
        }
        *(void *)&v25[*(void *)(a2 + 32)] = v20;
        *(void *)(a2 + 32) += 8;
      }
      std::string v28 = *v19;
      int v27 = v19 + 1;
      uint64_t v26 = v28;
      if (v28 != (const void **)v27)
      {
        do
        {
          turi::archive_detail::serialize_impl<turi::oarchive,std::string,false,void>::exec(a2, v26 + 4);
          turi::variant_deep_save(v26 + 7, a2);
          long long v29 = (const void **)v26[1];
          if (v29)
          {
            do
            {
              uint64_t v30 = (const void ***)v29;
              long long v29 = (const void **)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              uint64_t v30 = (const void ***)v26[2];
              BOOL v31 = *v30 == v26;
              uint64_t v26 = (const void **)v30;
            }
            while (!v31);
          }
          uint64_t v26 = (const void **)v30;
        }
        while (v30 != v27);
      }
      break;
    case 7u:
      long long v52 = &v51;
      std::vector<char> v21 = (uint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(v7, 7u, (uint64_t)&v52, a1 + 1);
      uint64_t v22 = v21;
      if (!v21)
      {
        long long v52 = (char *)&unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v21[1] - *v21) >> 4);
      long long v52 = (char *)v23;
      if (*(void *)a2)
      {
        std::ostream::write();
      }
      else
      {
        unint64_t v32 = *(void *)(a2 + 40);
        if (*(void *)(a2 + 32) + 8 > v32)
        {
          size_t v46 = 2 * v32 + 16;
          *(void *)(a2 + 4CoreML::Specification::Scaler::New(this, 0) = v46;
          long long v47 = *(char ***)(a2 + 16);
          if (v47)
          {
            uint64_t v33 = *v47;
            size_t v48 = v47[1] - *v47;
            BOOL v49 = v46 >= v48;
            std::vector<char>::size_type v50 = v46 - v48;
            if (v50 != 0 && v49)
            {
              std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v50);
              uint64_t v33 = **(char ***)(a2 + 16);
            }
            else if (!v49)
            {
              v47[1] = &v33[v46];
            }
          }
          else
          {
            uint64_t v33 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v46, 0xF6EA6B1uLL);
          }
          *(void *)(a2 + 24) = v33;
        }
        else
        {
          uint64_t v33 = *(char **)(a2 + 24);
        }
        *(void *)&v33[*(void *)(a2 + 32)] = v23;
        *(void *)(a2 + 32) += 8;
      }
      uint64_t v34 = *v22;
      uint64_t v35 = v22[1];
      while (v34 != v35)
      {
        turi::variant_deep_save(v34, a2);
        v34 += 80;
      }
      break;
    default:
      return;
  }
}

void sub_2243AA390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void turi::variant_deep_load(unsigned int *a1, turi::iarchive *a2)
{
  v41[4] = *(void **)MEMORY[0x263EF8340];
  int v34 = 0;
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 3);
    int v6 = *(_DWORD *)(v4 + v5);
    int v34 = v6;
    *((void *)a2 + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v5 + 4;
  }
  else
  {
    std::istream::read();
    int v6 = v34;
  }
  switch(v6)
  {
    case 0:
      *(void *)&long long v36 = 0;
      DWORD2(v36) = 0;
      BYTE12(v36) = 0;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::flexible_type>(a1, (uint64_t)&v36);
      switch(BYTE12(v36))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v7 = (void *)v36;
            if ((void)v36)
            {
              if (*(char *)(v36 + 31) < 0) {
                operator delete(*(void **)(v36 + 8));
              }
              unint64_t v8 = v7;
              uint64_t v9 = 0x1012C404EF22A49;
              goto LABEL_51;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v25 = (void *)v36;
            if ((void)v36)
            {
              uint64_t v26 = *(void **)(v36 + 8);
              if (v26)
              {
                *(void *)(v36 + 16) = v26;
                operator delete(v26);
              }
              unint64_t v8 = v25;
              uint64_t v9 = 0x1080C409938AC02;
              goto LABEL_51;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v23 = (void *)v36;
            if ((void)v36)
            {
              uint64_t v30 = (uint64_t *)(v36 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
              goto LABEL_46;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v23 = (void *)v36;
            if ((void)v36)
            {
              uint64_t v30 = (uint64_t *)(v36 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
LABEL_46:
              unint64_t v8 = v23;
              uint64_t v9 = 0x1020C405E66F15BLL;
              goto LABEL_51;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v36, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v27 = (void *)v36;
            if ((void)v36)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v36 + 16));
              unint64_t v8 = v27;
              unsigned int v24 = -235920773;
              goto LABEL_50;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v36, 0xFFFFFFFFFFFFFFFFLL) == 1 && (void)v36)
          {
            unint64_t v8 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v36);
            unsigned int v24 = 2071181815;
LABEL_50:
            uint64_t v9 = v24 | 0x1030C4000000000;
LABEL_51:
            MEMORY[0x22A614FA0](v8, v9);
          }
          break;
        default:
          break;
      }
      *(void *)&long long v36 = &v30;
      uint64_t has_fallback_type = (unint64_t *)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::flexible_type>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31), (uint64_t)&v36, (uint64_t)(a1 + 2));
      if (!has_fallback_type)
      {
        *(void *)&long long v36 = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, has_fallback_type);
      break;
    case 1:
      operator new();
    case 2:
      uint64_t v37 = 0;
      long long v39 = 0u;
      long long v36 = 0u;
      size_t v38 = &v39;
      v41[0] = 0;
      v41[1] = 0;
      std::vector<char>::size_type v40 = v41;
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<turi::dataframe_t>(a1, (uint64_t)&v36);
      std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)&v40, v41[0]);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v38, (char *)v39);
      uint64_t v30 = (uint64_t *)&v36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      *(void *)&long long v36 = &v30;
      uint64_t v10 = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<turi::dataframe_t>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ ((int)*a1 >> 31), (uint64_t)&v36, (uint64_t)(a1 + 2));
      if (!v10)
      {
        *(void *)&long long v36 = &unk_26D754360;
        boost::throw_exception<boost::bad_get>();
      }
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::string,false>::exec((uint64_t)a2, (uint64_t *)v10);
      std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy(v10 + 24, *(char **)(v10 + 32));
      *(void *)(v10 + 24) = v10 + 32;
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 4CoreML::Specification::Scaler::New(this, 0) = 0;
      turi::deserialize_iterator<turi::iarchive,std::pair<std::string,turi::flex_type_enum>,std::insert_iterator<std::map<std::string,turi::flex_type_enum>>>((uint64_t)a2, v10 + 24, v10 + 32);
      uint64_t v12 = *(void **)(v10 + 56);
      uint64_t v11 = (void *)(v10 + 56);
      std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::destroy((uint64_t)(v11 - 1), v12);
      *(v11 - 1) = v11;
      void *v11 = 0;
      v11[1] = 0;
      turi::deserialize_iterator<turi::iarchive,std::pair<std::string,std::vector<turi::flexible_type>>,std::insert_iterator<std::map<std::string,std::vector<turi::flexible_type>>>>(a2, (uint64_t)(v11 - 1), (uint64_t)v11);
      break;
    case 3:
      turi::variant_deep_load(boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>> &,turi::iarchive &)::$_0::operator()();
    case 4:
      operator new();
    case 5:
      operator new();
    case 6:
      unint64_t v33 = 0;
      uint64_t v13 = *((void *)a2 + 2);
      if (v13)
      {
        uint64_t v14 = *((void *)a2 + 3);
        unint64_t v15 = *(void *)(v13 + v14);
        unint64_t v33 = v15;
        *((void *)a2 + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v14 + 8;
      }
      else
      {
        std::istream::read();
        unint64_t v15 = v33;
      }
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v30 = &v31;
      if (v15)
      {
        unint64_t v19 = 0;
        do
        {
          memset(&__p, 0, sizeof(__p));
          *((void *)&v36 + 1) = 0;
          LODWORD(v37) = 0;
          BYTE4(v37) = 0;
          LODWORD(v36) = 0;
          turi::archive_detail::deserialize_impl<turi::iarchive,std::string,false,void>::exec((uint64_t)a2, &__p);
          turi::variant_deep_load(&v36, a2);
          p_p = &__p;
          std::string v20 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v30, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v20 + 14, (unsigned int *)&v36);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v36);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          ++v19;
        }
        while (v19 < v33);
      }
      boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
    case 7:
      p_p = 0;
      uint64_t v16 = *((void *)a2 + 2);
      if (v16)
      {
        uint64_t v17 = *((void *)a2 + 3);
        uint64_t v18 = *(long long **)(v16 + v17);
        p_p = (std::string *)v18;
        *((void *)a2 + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v17 + 8;
      }
      else
      {
        std::istream::read();
        uint64_t v18 = (long long *)p_p;
      }
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>::resize((uint64_t *)&v30, (unint64_t)v18);
      if (p_p)
      {
        uint64_t v21 = 0;
        for (unint64_t i = 0; i < (unint64_t)p_p; ++i)
        {
          *((void *)&v36 + 1) = 0;
          LODWORD(v37) = 0;
          BYTE4(v37) = 0;
          LODWORD(v36) = 0;
          turi::variant_deep_load(&v36, a2);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)&v30[v21], (unsigned int *)&v36);
          boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v36);
          v21 += 10;
        }
      }
      boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>::recursive_wrapper();
    default:
      return;
  }
}

void sub_2243AACBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::exception a22,int a23,char a24)
{
}

CoreML::Model *CoreML::LinearModel::LinearModel(CoreML::Model *a1, const std::string *a2, const std::string *a3)
{
  uint64_t v5 = CoreML::Model::Model(a1, a3);
  *(void *)uint64_t v5 = &unk_26D77C5D8;
  uint64_t v6 = *(void *)(*((void *)v5 + 1) + 16);
  if (!v6) {
    operator new();
  }
  uint64_t v7 = *(std::string **)(v6 + 88);
  if (v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v7, a2);
  return a1;
}

void sub_2243AAF94(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v2, 0x10A1C40FD9EAC30);
  CoreML::Model::~Model(v1);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LinearModel::setOffsets@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 44) != 300)
  {
    CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
    *(_DWORD *)(v4 + 44) = 300;
    operator new();
  }
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    int v8 = *(_DWORD *)(v5 + 40);
    do
    {
      uint64_t v9 = *v6;
      if (v8 == *(_DWORD *)(v5 + 44))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v5 + 40), v8 + 1);
        int v8 = *(_DWORD *)(v5 + 40);
      }
      uint64_t v10 = *(void *)(v5 + 48) + 8 * v8++;
      *(_DWORD *)(v5 + 4CoreML::Specification::Scaler::New(this, 0) = v8;
      *(void *)(v10 + 8) = v9;
      ++v6;
    }
    while (v6 != v7);
  }
  return CoreML::Result::Result(a3);
}

void sub_2243AB0BC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C404133E315);
  _Unwind_Resume(a1);
}

CoreML::Result *CoreML::LinearModel::setWeights@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, CoreML::Result *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v4 + 44) != 300)
  {
    CoreML::Specification::Model::clear_Type(*(void *)(a1 + 8));
    *(_DWORD *)(v4 + 44) = 300;
    operator new();
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v7 = *(void *)(v4 + 32) + 16;
    do
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v17, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      int v8 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v7);
      uint64_t v9 = v17;
      uint64_t v10 = v18;
      if (v17 != v18)
      {
        uint64_t v11 = v8;
        uint64_t v13 = (unsigned int *)((char *)v8 + 16);
        signed int v12 = *((_DWORD *)v8 + 4);
        do
        {
          uint64_t v14 = *v9;
          if (v12 == *((_DWORD *)v11 + 5))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v13, v12 + 1);
            signed int v12 = *v13;
          }
          uint64_t v15 = *((void *)v11 + 3) + 8 * v12++;
          *((_DWORD *)v11 + 4) = v12;
          *(void *)(v15 + 8) = v14;
          ++v9;
        }
        while (v9 != v10);
        uint64_t v9 = v17;
      }
      if (v9)
      {
        uint64_t v18 = v9;
        operator delete(v9);
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  return CoreML::Result::Result(a3);
}

void sub_2243AB230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x22A614FA0](v11, 0x10A1C404133E315);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>,std::reverse_iterator<std::vector<double>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::reverse_iterator<std::vector<double>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void CoreML::validate<(MLModelType)601>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v42[1] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 16)) {
    uint64_t v4 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v4 = &CoreML::Specification::_ModelDescription_default_instance_;
  }
  CoreML::Result::Result((CoreML::Result *)&v39);
  CoreML::validateModelDescription((CoreML *)v4, (const CoreML::Specification::ModelDescription *)*(unsigned int *)(a1 + 24), (CoreML::Result *)&__p);
  long long v39 = __p;
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  long long v40 = v37;
  uint64_t v41 = v38;
  if (!CoreML::Result::good((CoreML::Result *)&v39))
  {
    *(void *)a2 = v39;
    *(_OWORD *)(a2 + 8) = v40;
    *(void *)(a2 + 24) = v41;
    return;
  }
  uint64_t v5 = operator new(0x14uLL);
  int v34 = v5 + 5;
  uint64_t v35 = (char *)(v5 + 5);
  void v5[4] = 6;
  *(_OWORD *)uint64_t v5 = xmmword_2246F5A88;
  unint64_t v33 = v5;
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 2), 1, (int **)&v33, (uint64_t)&__p);
  long long v39 = __p;
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  long long v40 = v37;
  uint64_t v41 = v38;
  if (!CoreML::Result::good((CoreML::Result *)&v39)) {
    goto LABEL_41;
  }
  CoreML::validateDescriptionsContainFeatureWithTypes<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>>((uint64_t)(v4 + 5), 1, (int **)&v33, (uint64_t)&__p);
  long long v39 = __p;
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  long long v40 = v37;
  uint64_t v41 = v38;
  BOOL v6 = CoreML::Result::good((CoreML::Result *)&v39);
  if (!v6)
  {
LABEL_41:
    *(void *)a2 = v39;
    *(_OWORD *)(a2 + 8) = v40;
    *(void *)(a2 + 24) = v41;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    goto LABEL_42;
  }
  uint64_t v7 = *(void *)(v4[4] + 8);
  long long v8 = *(uint64_t **)(*(void *)(v4[7] + 8) + 32);
  if (!v8) {
    long long v8 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  int v9 = *((_DWORD *)v8 + 9);
  uint64_t v10 = *(uint64_t **)(v7 + 32);
  if (!v10) {
    uint64_t v10 = &CoreML::Specification::_FeatureType_default_instance_;
  }
  if (v9 == *((_DWORD *)v10 + 9))
  {
    if (v9 != 5) {
      goto LABEL_22;
    }
    uint64_t v11 = v10[3];
    if (*(_DWORD *)(v11 + 16) == 1)
    {
      uint64_t v12 = v8[3];
      if (*(_DWORD *)(v12 + 16) == 1
        && *(void *)(*(void *)(v11 + 24) + 8) == *(void *)(*(void *)(v12 + 24) + 8))
      {
LABEL_22:
        std::string __p = *(void **)(v4[4] + 8);
        *(void *)&long long v37 = &v39;
        *((void *)&v37 + 1) = a1;
        if (*(_DWORD *)(a1 + 44) == 601) {
          long long v13 = *(uint64_t **)(a1 + 32);
        }
        else {
          long long v13 = CoreML::Specification::Imputer::default_instance((CoreML::Specification::Imputer *)v6);
        }
        switch(*((_DWORD *)v13 + 9))
        {
          case 0:
            std::string::basic_string[abi:ne180100]<0>(&v30, "Imputer parameter must be set.");
            CoreML::Result::Result((_DWORD *)a2, 13);
            goto LABEL_35;
          case 1:
            v42[0] = 0x500000002;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 2);
            int v27 = 11;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            goto LABEL_40;
          case 2:
            LODWORD(v42[0]) = 1;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            int v27 = 12;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            goto LABEL_40;
          case 3:
            LODWORD(v42[0]) = 3;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            int v27 = 13;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            goto LABEL_40;
          case 4:
            LODWORD(v42[0]) = 5;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            int v27 = 11;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            char v15 = CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v28, v29[0]);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v30, v31);
            if ((v15 & 1) == 0) {
              goto LABEL_41;
            }
            uint64_t v17 = *(uint64_t **)(v7 + 32);
            if (!v17) {
              uint64_t v17 = &CoreML::Specification::_FeatureType_default_instance_;
            }
            uint64_t v18 = *((_DWORD *)v17 + 9) == 5
                ? (uint64_t *)v17[3]
                : CoreML::Specification::ArrayFeatureType::default_instance(v16);
            uint64_t v23 = *(void *)(v18[3] + 8);
            unsigned int v24 = *((_DWORD *)v13 + 9) == 4
                ? (uint64_t *)v13[2]
                : CoreML::Specification::DoubleVector::default_instance((CoreML::Specification::DoubleVector *)v18);
            if (v23 == *((_DWORD *)v24 + 4)) {
              goto LABEL_41;
            }
            goto LABEL_65;
          case 5:
            LODWORD(v42[0]) = 5;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            int v27 = 12;
            std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100]((uint64_t)&v28, &v27, 1);
            char v19 = CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v28, v29[0]);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v30, v31);
            if ((v19 & 1) == 0) {
              goto LABEL_41;
            }
            uint64_t v21 = *(uint64_t **)(v7 + 32);
            if (!v21) {
              uint64_t v21 = &CoreML::Specification::_FeatureType_default_instance_;
            }
            uint64_t v22 = *((_DWORD *)v21 + 9) == 5
                ? (uint64_t *)v21[3]
                : CoreML::Specification::ArrayFeatureType::default_instance(v20);
            uint64_t v25 = *(void *)(v22[3] + 8);
            uint64_t v26 = *((_DWORD *)v13 + 9) == 5
                ? (uint64_t *)v13[2]
                : CoreML::Specification::Int64Vector::default_instance((CoreML::Specification::Int64Vector *)v22);
            if (v25 == *((_DWORD *)v26 + 4)) {
              goto LABEL_41;
            }
LABEL_65:
            std::string::basic_string[abi:ne180100]<0>(&v30, "Shape of imputed array value does not match shape of input array.");
            CoreML::Result::Result((_DWORD *)a2, 13);
LABEL_35:
            if ((v32 & 0x80000000) == 0) {
              goto LABEL_42;
            }
            long long v14 = v30;
            break;
          case 6:
          case 7:
            LODWORD(v42[0]) = 6;
            std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100]((uint64_t)&v30, (int *)v42, 1);
            v29[0] = 0;
            v29[1] = 0;
            std::string v28 = v29;
            CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()((CoreML::Specification::Imputer *)&__p, (uint64_t)&v30, (uint64_t)&v28);
LABEL_40:
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v28, v29[0]);
            std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v30, v31);
            goto LABEL_41;
          default:
            goto LABEL_41;
        }
        goto LABEL_28;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "Shape of output array does not match shape of input array.");
      CoreML::Result::Result((_DWORD *)a2, 13);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Only 1 dimensional arrays input features are supported by the imputer.");
      CoreML::Result::Result((_DWORD *)a2, 13);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Type of input feature does not match the output type feature.");
    CoreML::Result::Result((_DWORD *)a2, 13);
  }
  if (SHIBYTE(v37) < 0)
  {
    long long v14 = __p;
LABEL_28:
    operator delete(v14);
  }
LABEL_42:
  if (v33)
  {
    int v34 = v33;
    operator delete(v33);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
}

void sub_2243ABA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (*(char *)(v29 - 65) < 0) {
    operator delete(*(void **)(v29 - 88));
  }
  _Unwind_Resume(exception_object);
}

uint64_t CoreML::validate<(MLModelType)601>(CoreML::Specification::Model const&)::$_0::operator()(CoreML::Specification::Imputer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = &CoreML::Specification::_FeatureType_default_instance_;
  if (*(void *)(*(void *)a1 + 32)) {
    uint64_t v4 = *(uint64_t **)(*(void *)a1 + 32);
  }
  uint64_t v5 = *(uint64_t **)(a2 + 8);
  if (!v5)
  {
LABEL_9:
    std::operator+<char>();
    int v9 = std::string::append(&v26, "\" is not compatible with given imputed value type.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v28 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    CoreML::Result::Result(&v29, 13);
    uint64_t v11 = *((void *)a1 + 1);
    *(void *)uint64_t v11 = v29;
    uint64_t v12 = v11 + 8;
    if (*(char *)(v11 + 31) < 0) {
      operator delete(*(void **)v12);
    }
    long long v13 = v30;
    *(void *)(v12 + 16) = v31;
    *(_OWORD *)uint64_t v12 = v13;
    HIBYTE(v31) = 0;
    LOBYTE(v3CoreML::Specification::Scaler::New(this, 0) = 0;
    if (SHIBYTE(v28) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v14 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
    return 0;
  }
  int v7 = *((_DWORD *)v4 + 9);
  while (1)
  {
    int v8 = *((_DWORD *)v5 + 7);
    if (v7 >= v8) {
      break;
    }
LABEL_8:
    uint64_t v5 = (uint64_t *)*v5;
    if (!v5) {
      goto LABEL_9;
    }
  }
  if (v8 < v7)
  {
    ++v5;
    goto LABEL_8;
  }
  uint64_t v16 = *((void *)a1 + 2);
  if (*(_DWORD *)(v16 + 44) == 601) {
    uint64_t v17 = *(uint64_t **)(v16 + 32);
  }
  else {
    uint64_t v17 = CoreML::Specification::Imputer::default_instance(a1);
  }
  if (*((_DWORD *)v17 + 10))
  {
    uint64_t v18 = *((void *)a1 + 2);
    if (*(_DWORD *)(v18 + 44) == 601) {
      char v19 = *(uint64_t **)(v18 + 32);
    }
    else {
      char v19 = CoreML::Specification::Imputer::default_instance((CoreML::Specification::Imputer *)v17);
    }
    std::string v20 = *(uint64_t **)(a3 + 8);
    if (v20)
    {
      int v21 = *((_DWORD *)v19 + 10);
      do
      {
        int v22 = *((_DWORD *)v20 + 7);
        if (v21 >= v22)
        {
          if (v22 >= v21) {
            return 1;
          }
          ++v20;
        }
        std::string v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Type of given replace value not compatible with input feature type.");
    CoreML::Result::Result(&v29, 13);
    uint64_t v23 = *((void *)a1 + 1);
    *(void *)uint64_t v23 = v29;
    uint64_t v24 = v23 + 8;
    if (*(char *)(v23 + 31) < 0) {
      operator delete(*(void **)v24);
    }
    long long v25 = v30;
    *(void *)(v24 + 16) = v31;
    *(_OWORD *)uint64_t v24 = v25;
    HIBYTE(v31) = 0;
    LOBYTE(v3CoreML::Specification::Scaler::New(this, 0) = 0;
    if (SHIBYTE(v28) < 0)
    {
      long long v14 = __p[0];
LABEL_15:
      operator delete(v14);
    }
    return 0;
  }
  return 1;
}

void sub_2243ABD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::set<CoreML::Specification::FeatureType::TypeCase>::set[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_2243ABDF8(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::set<CoreML::Specification::Imputer::ReplaceValueCase>::set[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      std::__tree<int>::__emplace_hint_unique_key_args<int,int const&>((uint64_t **)a1, v4, a2, a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_2243ABE78(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t Eigen::internal::CompressedStorage<double,int>::reserve(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16) + a2 > *(void *)(result + 24)) {
    operator new[]();
  }
  return result;
}

void sub_2243ABFD0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614F80](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_leaf<1ul,turi::flexible_type,false>::~__tuple_leaf(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            void v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          char v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          char v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          long long v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::__tuple_leaf<0ul,turi::flexible_type,false>::~__tuple_leaf(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            void v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          char v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          char v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          long long v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

void CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/WordTagger.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::CoreMLModels::_WordTagger_default_instance_ = (uint64_t)&unk_26D77C620;
  unk_26808E3D0 = 0;
  qword_26808E3D8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808E3E0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808E3E8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808E3F0 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  qword_26808E3F8 = (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string;
  unk_26808E400 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  dword_26808E408 = 0;
  qword_26808E418 = 0;
  byte_26808E420 = 1;
}

void CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2243AC528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::CoreMLModels::WordTagger *CoreML::Specification::CoreMLModels::WordTagger::WordTagger(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  *(void *)this = &unk_26D77C620;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::CoreMLModels::WordTagger *)&CoreML::Specification::CoreMLModels::_WordTagger_default_instance_) {
    CoreML::Specification::CoreMLModels::protobuf_WordTagger_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 5) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 6) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &_tc_google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 1CoreML::Specification::Scaler::New(this, 0) = 0;
  return this;
}

void sub_2243AC5B4(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::CoreMLModels::WordTagger::~WordTagger(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  *(void *)this = &unk_26D77C620;
  CoreML::Specification::CoreMLModels::WordTagger::SharedDtor(this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::CoreMLModels::WordTagger::~WordTagger(this);
  JUMPOUT(0x22A614FA0);
}

void *CoreML::Specification::CoreMLModels::WordTagger::SharedDtor(void *this)
{
  unint64_t v1 = this;
  uint64_t v2 = this[2];
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (void *)MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = v1[3];
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    this = (void *)MEMORY[0x22A614FA0](v4, 0x1012C40EC159624);
  }
  uint64_t v6 = v1[4];
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    this = (void *)MEMORY[0x22A614FA0](v6, 0x1012C40EC159624);
  }
  uint64_t v8 = v1[5];
  if ((uint64_t *)v8 != &_tc_google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    this = (void *)MEMORY[0x22A614FA0](v8, 0x1012C40EC159624);
  }
  uint64_t v10 = v1[6];
  if ((uint64_t *)v10 != &_tc_google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    this = (void *)MEMORY[0x22A614FA0](v10, 0x1012C40EC159624);
  }
  uint64_t v11 = v1[7];
  if ((uint64_t *)v11 != &_tc_google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    this = (void *)MEMORY[0x22A614FA0](v11, 0x1012C40EC159624);
  }
  int v12 = *((_DWORD *)v1 + 21);
  if (v12)
  {
    if (v12 == 200)
    {
      this = (void *)v1[9];
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
    *((_DWORD *)v1 + 21) = 0;
  }
  return this;
}

uint64_t *CoreML::Specification::CoreMLModels::WordTagger::default_instance(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  return &CoreML::Specification::CoreMLModels::_WordTagger_default_instance_;
}

void CoreML::Specification::CoreMLModels::WordTagger::New(CoreML::Specification::CoreMLModels::WordTagger *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243AC88C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403AEF19A0);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::CoreMLModels::WordTagger>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::WordTagger>);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::WordTagger::Clear(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(void *)(this + 16);
  if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
    }
  }
  uint64_t v3 = *(void *)(this + 24);
  if ((uint64_t *)v3 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
    }
  }
  uint64_t v4 = *(void *)(this + 32);
  if ((uint64_t *)v4 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
    }
  }
  uint64_t v5 = *(void *)(this + 40);
  if ((uint64_t *)v5 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v5 = 0;
      *(unsigned char *)(v5 + 2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
    }
  }
  uint64_t v6 = *(void *)(this + 48);
  if ((uint64_t *)v6 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
    }
  }
  uint64_t v7 = *(void *)(this + 56);
  if ((uint64_t *)v7 != &_tc_google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      **(unsigned char **)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
    }
  }
  *(_DWORD *)(this + 64) = 0;
  if (*(_DWORD *)(this + 84) == 200)
  {
    this = *(void *)(this + 72);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 84) = 0;
  return this;
}

BOOL CoreML::Specification::CoreMLModels::WordTagger::MergePartialFromCodedStream(CoreML::Specification::CoreMLModels::WordTagger *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  uint64_t v4 = this;
  uint64_t v5 = (std::string **)((char *)this + 56);
  uint64_t v6 = (std::string **)((char *)this + 48);
  uint64_t v7 = (std::string **)((char *)this + 40);
  uint64_t v8 = (std::string **)((char *)this + 32);
  unsigned int v9 = (std::string **)((char *)this + 24);
  uint64_t v10 = (std::string **)((char *)this + 16);
  uint64_t v11 = &_tc_google::protobuf::internal::fixed_address_empty_string;
  while (1)
  {
LABEL_2:
    int v12 = *(unsigned __int8 **)a2;
    unint64_t v13 = *((void *)a2 + 1);
    if (*(void *)a2 >= v13)
    {
      uint64_t v15 = 0;
    }
    else
    {
      long long v14 = v12 + 1;
      uint64_t v15 = *v12;
      if ((char)*v12 >= 1)
      {
        *(void *)a2 = v14;
        unint64_t v16 = v15 | 0x100000000;
        if ((v16 & 0x100000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_17;
      }
      if ((unint64_t)v14 < v13)
      {
        int v17 = *v14;
        if ((v15 & ~v17) >= 0x80)
        {
          *(void *)a2 = v12 + 2;
          unint64_t v16 = (v15 + (v17 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
    }
    unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v15);
    unint64_t v16 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
    if ((v16 & 0x100000000) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    unsigned int v20 = v16 >> 3;
    if (v16 >> 3 > 0x13) {
      break;
    }
    if (v20 == 1)
    {
      if (v16 != 8) {
        goto LABEL_9;
      }
      long long v25 = *(char **)a2;
      if (*(void *)a2 >= *((void *)a2 + 1))
      {
        int v26 = 0;
        goto LABEL_87;
      }
      int v26 = *v25;
      if (*v25 < 0)
      {
LABEL_87:
        Varint32Fallbacint k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v26);
        *((_DWORD *)v4 + 16) = Varint32Fallback;
        if (Varint32Fallback < 0) {
          return 0;
        }
      }
      else
      {
        *((_DWORD *)v4 + 16) = v26;
        *(void *)a2 = v25 + 1;
      }
    }
    else
    {
      if (v20 != 10 || v16 != 82) {
        goto LABEL_9;
      }
      if (*v10 == (std::string *)v11) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v10);
      if (!result) {
        return result;
      }
      int v22 = *v10;
      if (SHIBYTE((*v10)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        std::string::size_type size = (const char *)(*v10)->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = (const char *)HIBYTE((*v10)->__r_.__value_.__r.__words[2]);
      }
      long long v40 = "CoreML.Specification.CoreMLModels.WordTagger.language";
LABEL_84:
      if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v22, size, 0, (uint64_t)v40))return 0; {
    }
      }
  }
  switch(v20)
  {
    case 0x14u:
      if (v16 != 162) {
        goto LABEL_9;
      }
      if (*v9 == (std::string *)v11) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v9);
      if (!result) {
        return result;
      }
      int v22 = *v9;
      if (SHIBYTE((*v9)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        std::string::size_type size = (const char *)(*v9)->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = (const char *)HIBYTE((*v9)->__r_.__value_.__r.__words[2]);
      }
      long long v40 = "CoreML.Specification.CoreMLModels.WordTagger.tokensOutputFeatureName";
      goto LABEL_84;
    case 0x15u:
      if (v16 != 170) {
        goto LABEL_9;
      }
      if (*v8 == (std::string *)v11) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v8);
      if (!result) {
        return result;
      }
      int v22 = *v8;
      if (SHIBYTE((*v8)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        std::string::size_type size = (const char *)(*v8)->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = (const char *)HIBYTE((*v8)->__r_.__value_.__r.__words[2]);
      }
      long long v40 = "CoreML.Specification.CoreMLModels.WordTagger.tokenTagsOutputFeatureName";
      goto LABEL_84;
    case 0x16u:
      if (v16 != 178) {
        goto LABEL_9;
      }
      if (*v7 == (std::string *)v11) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v7);
      if (!result) {
        return result;
      }
      int v22 = *v7;
      if (SHIBYTE((*v7)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        std::string::size_type size = (const char *)(*v7)->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = (const char *)HIBYTE((*v7)->__r_.__value_.__r.__words[2]);
      }
      long long v40 = "CoreML.Specification.CoreMLModels.WordTagger.tokenLocationsOutputFeatureName";
      goto LABEL_84;
    case 0x17u:
      if (v16 != 186) {
        goto LABEL_9;
      }
      if (*v6 == (std::string *)v11) {
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      BOOL result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v6);
      if (!result) {
        return result;
      }
      int v22 = *v6;
      if (SHIBYTE((*v6)->__r_.__value_.__r.__words[2]) < 0)
      {
        int v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
        std::string::size_type size = (const char *)(*v6)->__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = (const char *)HIBYTE((*v6)->__r_.__value_.__r.__words[2]);
      }
      long long v40 = "CoreML.Specification.CoreMLModels.WordTagger.tokenLengthsOutputFeatureName";
      goto LABEL_84;
    default:
      if (v20 != 100)
      {
        if (v20 != 200 || v16 != 66) {
          goto LABEL_9;
        }
        if (*((_DWORD *)v4 + 21) != 200)
        {
          *((_DWORD *)v4 + 21) = 200;
          operator new();
        }
        uint64_t v24 = (CoreML::Specification::StringVector *)*((void *)v4 + 9);
        int v27 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1) || *v27 < 0)
        {
          int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
          if (VarintSizeAsIntFallback < 0) {
            return 0;
          }
        }
        else
        {
          int VarintSizeAsIntFallback = *v27;
          *(void *)a2 = v27 + 1;
        }
        uint64_t v29 = v11;
        long long v30 = v10;
        uint64_t v31 = v9;
        char v32 = v8;
        unint64_t v33 = v7;
        int v34 = v6;
        uint64_t v35 = v5;
        unint64_t v36 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
        if ((v36 & 0x8000000000000000) != 0) {
          return 0;
        }
        int v38 = v36;
        BOOL result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v24, (char **)a2, v37);
        if (!result) {
          return result;
        }
        BOOL v39 = _tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v38);
        uint64_t v5 = v35;
        uint64_t v6 = v34;
        uint64_t v7 = v33;
        uint64_t v8 = v32;
        unsigned int v9 = v31;
        uint64_t v10 = v30;
        uint64_t v11 = v29;
        uint64_t v4 = this;
        if (!v39) {
          return 0;
        }
        goto LABEL_2;
      }
      if (v16 == 34)
      {
        if (*v5 == (std::string *)v11) {
          _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadBytes((char **)a2, *v5)) {
          return 0;
        }
        goto LABEL_2;
      }
LABEL_9:
      if (v16) {
        BOOL v18 = (v16 & 7) == 4;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18)
      {
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v16, a3) & 1) == 0)return 0; {
        goto LABEL_2;
        }
      }
      return 1;
  }
}

void sub_2243ACEFC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::WordTagger::SerializeWithCachedSizes(CoreML::Specification::CoreMLModels::WordTagger *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v6 = *((_DWORD *)this + 16);
  if (v6) {
    _tc_google::protobuf::internal::WireFormatLite::WriteUInt32(1, v6, a2, a4);
  }
  uint64_t v7 = (_tc_google::protobuf::internal *)*((void *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    uint64_t v8 = (const char *)*((void *)v7 + 1);
    if (!v8) {
      goto LABEL_9;
    }
    uint64_t v7 = *(_tc_google::protobuf::internal **)v7;
    goto LABEL_8;
  }
  uint64_t v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((unsigned char *)v7 + 23))
  {
LABEL_8:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.language");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(10, *((void *)this + 2), a2);
  }
LABEL_9:
  unsigned int v9 = (_tc_google::protobuf::internal *)*((void *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    uint64_t v10 = (const char *)*((void *)v9 + 1);
    if (!v10) {
      goto LABEL_15;
    }
    unsigned int v9 = *(_tc_google::protobuf::internal **)v9;
    goto LABEL_14;
  }
  uint64_t v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((unsigned char *)v9 + 23))
  {
LABEL_14:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.tokensOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(20, *((void *)this + 3), a2);
  }
LABEL_15:
  uint64_t v11 = (_tc_google::protobuf::internal *)*((void *)this + 4);
  if (*((char *)v11 + 23) < 0)
  {
    int v12 = (const char *)*((void *)v11 + 1);
    if (!v12) {
      goto LABEL_21;
    }
    uint64_t v11 = *(_tc_google::protobuf::internal **)v11;
    goto LABEL_20;
  }
  int v12 = (const char *)*((unsigned __int8 *)v11 + 23);
  if (*((unsigned char *)v11 + 23))
  {
LABEL_20:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.tokenTagsOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(21, *((void *)this + 4), a2);
  }
LABEL_21:
  unint64_t v13 = (_tc_google::protobuf::internal *)*((void *)this + 5);
  if (*((char *)v13 + 23) < 0)
  {
    long long v14 = (const char *)*((void *)v13 + 1);
    if (!v14) {
      goto LABEL_27;
    }
    unint64_t v13 = *(_tc_google::protobuf::internal **)v13;
    goto LABEL_26;
  }
  long long v14 = (const char *)*((unsigned __int8 *)v13 + 23);
  if (*((unsigned char *)v13 + 23))
  {
LABEL_26:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String(v13, v14, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.tokenLocationsOutputFeatureName");
    _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(22, *((void *)this + 5), a2);
  }
LABEL_27:
  uint64_t result = *((void *)this + 6);
  if (*(char *)(result + 23) < 0)
  {
    unint64_t v16 = *(const char **)(result + 8);
    if (!v16) {
      goto LABEL_33;
    }
    uint64_t result = *(void *)result;
    goto LABEL_32;
  }
  unint64_t v16 = (const char *)*(unsigned __int8 *)(result + 23);
  if (*(unsigned char *)(result + 23))
  {
LABEL_32:
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)result, v16, 1, (uint64_t)"CoreML.Specification.CoreMLModels.WordTagger.tokenLengthsOutputFeatureName");
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(23, *((void *)this + 6), a2);
  }
LABEL_33:
  uint64_t v17 = *((void *)this + 7);
  if ((*(char *)(v17 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v17 + 23)) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (*(void *)(v17 + 8)) {
LABEL_35:
  }
    uint64_t result = _tc_google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(100, v17, a2);
LABEL_36:
  if (*((_DWORD *)this + 21) == 200)
  {
    uint64_t v18 = *((void *)this + 9);
    return _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0xC8, v18, a2, a4);
  }
  return result;
}

uint64_t CoreML::Specification::CoreMLModels::WordTagger::ByteSizeLong(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  uint64_t v2 = *((void *)this + 2);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(void *)(v2 + 8)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  if (!*(unsigned char *)(v2 + 23)) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v4 = *(void *)(v2 + 8);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(void *)(v6 + 8)) {
      goto LABEL_13;
    }
  }
  else if (!*(unsigned char *)(v6 + 23))
  {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v7;
  }
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_13:
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      goto LABEL_18;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  v5 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_18:
  uint64_t v12 = *((void *)this + 5);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(void *)(v12 + 8)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(v12 + 23))
  {
    goto LABEL_23;
  }
  uint64_t v14 = *(void *)(v12 + 8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = v13;
  }
  v5 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_23:
  uint64_t v15 = *((void *)this + 6);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      goto LABEL_28;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v15 + 8);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v16;
  }
  v5 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_28:
  uint64_t v18 = *((void *)this + 7);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 23);
  if (*(char *)(v18 + 23) < 0)
  {
    if (!*(void *)(v18 + 8)) {
      goto LABEL_33;
    }
  }
  else if (!*(unsigned char *)(v18 + 23))
  {
    goto LABEL_33;
  }
  uint64_t v20 = *(void *)(v18 + 8);
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = v19;
  }
  v5 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 2;
LABEL_33:
  int v21 = *((_DWORD *)this + 16);
  if (v21) {
    v5 += ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  if (*((_DWORD *)this + 21) == 200)
  {
    uint64_t v22 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 9));
    v5 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 2CoreML::Specification::Scaler::New(this, 0) = v5;
  return v5;
}

std::string *CoreML::Specification::CoreMLModels::WordTagger::MergeFrom(std::string *this, const CoreML::Specification::CoreMLModels::WordTagger *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(void *)(v5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(v5 + 23))
  {
    goto LABEL_11;
  }
  this = (std::string *)&v3->__r_.__value_.__r.__words[2];
  uint64_t v6 = (uint64_t *)v3->__r_.__value_.__r.__words[2];
  if (v6 != (uint64_t *)v5)
  {
    if (v6 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3->__r_.__value_.__r.__words[2], (const std::string *)v5);
  }
LABEL_11:
  uint64_t v7 = *((void *)a2 + 3);
  if (*(char *)(v7 + 23) < 0)
  {
    if (!*(void *)(v7 + 8)) {
      goto LABEL_19;
    }
  }
  else if (!*(unsigned char *)(v7 + 23))
  {
    goto LABEL_19;
  }
  this = v3 + 1;
  int data = (uint64_t *)v3[1].__r_.__value_.__l.__data_;
  if (data != (uint64_t *)v7)
  {
    if (data == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__l.__data_, (const std::string *)v7);
  }
LABEL_19:
  uint64_t v9 = *((void *)a2 + 4);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(void *)(v9 + 8)) {
      goto LABEL_27;
    }
  }
  else if (!*(unsigned char *)(v9 + 23))
  {
    goto LABEL_27;
  }
  this = (std::string *)((char *)v3 + 32);
  std::string::size_type size = (uint64_t *)v3[1].__r_.__value_.__l.__size_;
  if (size != (uint64_t *)v9)
  {
    if (size == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__l.__size_, (const std::string *)v9);
  }
LABEL_27:
  uint64_t v11 = *((void *)a2 + 5);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(void *)(v11 + 8)) {
      goto LABEL_35;
    }
  }
  else if (!*(unsigned char *)(v11 + 23))
  {
    goto LABEL_35;
  }
  this = (std::string *)((char *)v3 + 40);
  uint64_t v12 = (uint64_t *)v3[1].__r_.__value_.__r.__words[2];
  if (v12 != (uint64_t *)v11)
  {
    if (v12 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[1].__r_.__value_.__r.__words[2], (const std::string *)v11);
  }
LABEL_35:
  uint64_t v13 = *((void *)a2 + 6);
  if (*(char *)(v13 + 23) < 0)
  {
    if (!*(void *)(v13 + 8)) {
      goto LABEL_43;
    }
  }
  else if (!*(unsigned char *)(v13 + 23))
  {
    goto LABEL_43;
  }
  this = v3 + 2;
  uint64_t v14 = (uint64_t *)v3[2].__r_.__value_.__l.__data_;
  if (v14 != (uint64_t *)v13)
  {
    if (v14 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[2].__r_.__value_.__l.__data_, (const std::string *)v13);
  }
LABEL_43:
  uint64_t v15 = *((void *)a2 + 7);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(void *)(v15 + 8)) {
      goto LABEL_51;
    }
  }
  else if (!*(unsigned char *)(v15 + 23))
  {
    goto LABEL_51;
  }
  this = (std::string *)((char *)v3 + 56);
  uint64_t v16 = (uint64_t *)v3[2].__r_.__value_.__l.__size_;
  if (v16 != (uint64_t *)v15)
  {
    if (v16 == &_tc_google::protobuf::internal::fixed_address_empty_string) {
      _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
    }
    this = std::string::operator=((std::string *)v3[2].__r_.__value_.__l.__size_, (const std::string *)v15);
  }
LABEL_51:
  int v17 = *((_DWORD *)a2 + 16);
  if (v17) {
    LODWORD(v3[2].__r_.__value_.__r.__words[2]) = v17;
  }
  if (*((_DWORD *)a2 + 21) == 200)
  {
    if (HIDWORD(v3[3].__r_.__value_.__r.__words[1]) != 200)
    {
      HIDWORD(v3[3].__r_.__value_.__r.__words[1]) = 200;
      operator new();
    }
    uint64_t v18 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 9);
    uint64_t v19 = (std::string *)v3[3].__r_.__value_.__l.__data_;
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v19, v18);
  }
  return this;
}

void sub_2243AD670(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::CoreMLModels::WordTagger::IsInitialized(CoreML::Specification::CoreMLModels::WordTagger *this)
{
  return 1;
}

void *CoreML::Specification::CoreMLModels::WordTagger::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.CoreMLModels.WordTagger");
}

void CoreML::Specification::CoreMLModels::WordTagger::New(CoreML::Specification::CoreMLModels::WordTagger *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::CoreMLModels::WordTagger>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void turi::unity_server::unity_server(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  long long v7 = a2[3];
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__s.__data_[0] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0x800000;
  turi::blocking_queue<std::string>::blocking_queue((uint64_t)&this[5].__r_.__value_.__l.__size_);
  operator new();
}

void sub_2243AD7FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::unity_server::start(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8)) {
      goto LABEL_15;
    }
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4)
  {
    if ((*(unsigned char *)(a1 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      uint64_t v4 = *(void *)(a1 + 56);
    }
    else
    {
      std::string v20 = *(std::string *)a1;
    }
    turi::begin_log_rotation((turi *)&v20, v4, *(void *)(a1 + 64));
  }
  uint64_t v5 = global_logger();
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v19 = *(std::string *)a1;
  }
  file_logger::set_log_file((uint64_t)v5, (uint64_t)&v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
LABEL_15:
  if (*(char *)(a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
  }
  else {
    std::string v18 = *(std::string *)(a1 + 24);
  }
  turi::configure_global_environment((uint64_t)&v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t instance = turi::global_startup::get_instance(v6);
  turi::global_startup::perform_startup(instance);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 72));
  (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 80));
  turi::create_unity_global_singleton(*(turi::toolkit_function_registry **)(a1 + 72), *(turi::toolkit_class_registry **)(a1 + 80));
  turi::get_unity_global_singleton(v8, v9, v10, v11, v12, v13, &v16);
  uint64_t v14 = v16;
  uint64_t v15 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a2 + 32))(a2, a1 + 24, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  turi::thread::launch((turi *)(a1 + 96));
}

void sub_2243ADA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::blocking_queue<std::string>::blocking_queue(uint64_t a1)
{
  *(unsigned char *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = 0u;
  uint64_t v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 56), 0);
  assert_msg(v2 == 0, (uint64_t)"Mutex create error %d", v3, v4, v5, v6, v7, v8, v2);
  turi::conditional::conditional((pthread_cond_t *)(a1 + 120));
  turi::conditional::conditional((pthread_cond_t *)(a1 + 168));
  *(_WORD *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 218) = 0;
  return a1;
}

void sub_2243ADB70(_Unwind_Exception *a1)
{
  turi::conditional::~conditional(v3);
  turi::mutex::~mutex(v2);
  std::deque<std::string>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t turi::blocking_queue<std::string>::~blocking_queue(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  turi::blocking_queue<std::string>::broadcast(a1);
  turi::blocking_queue<std::string>::broadcast_blocking_empty(a1);
  turi::conditional::~conditional((pthread_cond_t *)(a1 + 168));
  turi::conditional::~conditional((pthread_cond_t *)(a1 + 120));
  turi::mutex::~mutex((pthread_mutex_t *)(a1 + 56));
  std::deque<std::string>::~deque[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t turi::blocking_queue<std::string>::broadcast(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  uint64_t v3 = pthread_cond_broadcast((pthread_cond_t *)(a1 + 120));
  assert_msg(v3 == 0, (uint64_t)"Condition variable broadcast error %d", v4, v5, v6, v7, v8, v9, v3);
  return pthread_mutex_unlock(v2);
}

uint64_t turi::blocking_queue<std::string>::broadcast_blocking_empty(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  uint64_t v3 = pthread_cond_broadcast((pthread_cond_t *)(a1 + 168));
  assert_msg(v3 == 0, (uint64_t)"Condition variable broadcast error %d", v4, v5, v6, v7, v8, v9, v3);
  return pthread_mutex_unlock(v2);
}

uint64_t boost::detail::function::functor_manager<turi::unity_server::start(turi::unity_server_initializer const&)::$_0>::manage(uint64_t result, _WORD *a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        a2[4] = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12unity_server5startERKNS_24unity_server_initializerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12unity_server5startERKNS_24unity_server_initializerEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    *(void *)a2 = *(void *)result;
  }
  return result;
}

void boost::detail::function::void_function_obj_invoker0<turi::unity_server::start(turi::unity_server_initializer const&)::$_0,void>::invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 128;
  do
  {
    while (1)
    {
      turi::blocking_queue<std::string>::dequeue(v2, &__p);
      int v3 = v6;
      if (v6)
      {
        uint64_t v4 = *(void (**)(std::string *))(v1 + 88);
        if (v4) {
          v4(&__p);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while (v3);
}

void sub_2243ADDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::blocking_queue<std::string>::dequeue(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  memset(&v21, 0, sizeof(v21));
  if (*(void *)(a1 + 48))
  {
LABEL_4:
    std::string::operator=(&v21, (const std::string *)(*(void *)(*(void *)(a1 + 16) + 8 * (*(void *)(a1 + 40) / 0xAAuLL))+ 24 * (*(void *)(a1 + 40) % 0xAAuLL)));
    std::deque<std::string>::pop_front((void *)(a1 + 8));
    if (!*(void *)(a1 + 48) && *(_WORD *)(a1 + 218))
    {
      uint64_t v12 = pthread_cond_signal((pthread_cond_t *)(a1 + 168));
      assert_msg(v12 == 0, (uint64_t)"Condition variable signal error %d", v13, v14, v15, v16, v17, v18, v12);
    }
    char v19 = 1;
  }
  else
  {
    while (*(unsigned char *)a1)
    {
      ++*(_WORD *)(a1 + 216);
      uint64_t v5 = pthread_cond_wait((pthread_cond_t *)(a1 + 120), v4);
      assert_msg(v5 == 0, (uint64_t)"Condition variable wait error %d", v6, v7, v8, v9, v10, v11, v5);
      --*(_WORD *)(a1 + 216);
      if (*(void *)(a1 + 48)) {
        goto LABEL_4;
      }
    }
    char v19 = 0;
  }
  pthread_mutex_unlock(v4);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
    int v20 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
    a2[1].__r_.__value_.__s.__data_[0] = v19;
    if (v20 < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = v21;
    a2[1].__r_.__value_.__s.__data_[0] = v19;
  }
}

void sub_2243ADF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::start_server()
{
  pthread_mutex_lock(&turi::_server_start_lock);
  *((_DWORD *)global_logger() + 169) = 4;
  *((_WORD *)global_logger() + 336) = 0;
  if (!turi::SERVER) {
    operator new();
  }
  uint64_t v0 = (int *)global_logger();
  if (v0[169] <= 6)
  {
    if (cppipc::must_cancel((cppipc *)v0)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v1 = (file_logger *)global_logger();
    started = file_logger::start_stream(v1, 6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/server/unity_server_control.cpp", "start_server", 43, 1);
    int v3 = pthread_getspecific(*((void *)started + 74));
    if (v3 && *((unsigned char *)v3 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"Unity server initialized twice.", 31);
    }
    uint64_t v4 = pthread_getspecific(*((void *)started + 74));
    if (v4)
    {
      if (*((unsigned char *)v4 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(v4[2] - 24) + 16));
        uint64_t v5 = std::locale::use_facet(&v8, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
        std::locale::~locale(&v8);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
  }
  return pthread_mutex_unlock(&turi::_server_start_lock);
}

void sub_2243AE20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x22A614FA0](v14, 0x10B2C403CCB4398);
  pthread_mutex_unlock(&turi::_server_start_lock);
  _Unwind_Resume(a1);
}

void turi::unity_server_initializer::init_extensions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&long long v83 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v78 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(&v74, "*.so");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v78;
  }
  int v3 = boost::filesystem::path::operator/=(&v79, &v74);
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v80, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "*.dylib");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v78;
  }
  uint64_t v5 = boost::filesystem::path::operator/=(&v79, &v73);
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v6;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "*.dll");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v78;
  }
  uint64_t v7 = boost::filesystem::path::operator/=(&v79, &__p);
  if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v82, v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v8;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  int v76 = 0;
  long long v77 = 0;
  std::string v75 = 0;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  v79.__r_.__value_.__s.__data_[8] = 0;
  std::string v75 = (std::string *)operator new(0x48uLL);
  int v76 = v75;
  long long v77 = v75 + 3;
  uint64_t v9 = 0;
  int v76 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::filesystem::path>,boost::filesystem::path const*,boost::filesystem::path const*,boost::filesystem::path*>((uint64_t)&v77, (long long *)&v80, &v83, v75);
  do
  {
    if (SHIBYTE(v82.__r_.__value_.__r.__words[v9 + 2]) < 0) {
      operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + v9 * 8));
    }
    v9 -= 3;
  }
  while (v9 != -9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v73, "*libunity*.so");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v78;
  }
  uint64_t v10 = boost::filesystem::path::operator/=(&v79, &v73);
  if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v80, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v11;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "*libunity*.dylib");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v78;
  }
  uint64_t v12 = boost::filesystem::path::operator/=(&v79, &__p);
  if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, v12->__r_.__value_.__l.__data_, v12->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v13;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v71, "*libunity*.dll");
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v79, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
  }
  else {
    std::string v79 = v78;
  }
  uint64_t v14 = boost::filesystem::path::operator/=(&v79, &v71);
  if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v82, v14->__r_.__value_.__l.__data_, v14->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v15;
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  memset(&v74, 0, sizeof(v74));
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  v79.__r_.__value_.__s.__data_[8] = 0;
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  v74.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
  v74.__r_.__value_.__r.__words[2] = v74.__r_.__value_.__r.__words[0] + 72;
  uint64_t v16 = 0;
  v74.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::filesystem::path>,boost::filesystem::path const*,boost::filesystem::path const*,boost::filesystem::path*>((uint64_t)&v74.__r_.__value_.__r.__words[2], (long long *)&v80, &v83, (std::string *)v74.__r_.__value_.__l.__data_);
  do
  {
    if (SHIBYTE(v82.__r_.__value_.__r.__words[v16 + 2]) < 0) {
      operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + v16 * 8));
    }
    v16 -= 3;
  }
  while (v16 != -9);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = 0uLL;
  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v79.__r_.__value_.__l.__size_;
  std::string::size_type size = v74.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v74.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)i, *(void *)(i + 8));
    }
    else
    {
      long long v19 = *(_OWORD *)i;
      v73.__r_.__value_.__r.__words[2] = *(void *)(i + 16);
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v19;
    }
    turi::fileio::get_glob_files((uint64_t)&v73, (uint64_t *)&__p);
    std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
    for (std::string::size_type j = __p.__r_.__value_.__r.__words[0]; j != v21; j += 32)
    {
      if (*(char *)(j + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)j, *(void *)(j + 8));
      }
      else
      {
        long long v22 = *(_OWORD *)j;
        v80.__r_.__value_.__r.__words[2] = *(void *)(j + 16);
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v22;
      }
      LODWORD(v81.__r_.__value_.__l.__data_) = *(_DWORD *)(j + 24);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v79, (const void **)&v80.__r_.__value_.__l.__data_, (uint64_t)&v80);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
    }
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v23 = v75;
  long long v62 = v76;
  while (v23 != v62)
  {
    if (SHIBYTE(v23->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v73, v23->__r_.__value_.__l.__data_, v23->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v24;
    }
    turi::fileio::get_glob_files((uint64_t)&v73, (uint64_t *)&__p);
    std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
    for (std::string::size_type k = __p.__r_.__value_.__r.__words[0]; k != v26; k += 32)
    {
      if (*(char *)(k + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)k, *(void *)(k + 8));
      }
      else
      {
        long long v27 = *(_OWORD *)k;
        v80.__r_.__value_.__r.__words[2] = *(void *)(k + 16);
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v27;
      }
      LODWORD(v81.__r_.__value_.__l.__data_) = *(_DWORD *)(k + 24);
      if (std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v79, (const void **)&v80.__r_.__value_.__l.__data_))
      {
        std::string::size_type v28 = (int *)global_logger();
        if (v28[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v28)) {
            goto LABEL_169;
          }
          uint64_t v29 = (file_logger *)global_logger();
          started = file_logger::start_stream(v29, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/server/unity_server_init.cpp", "init_extensions", 57, 1);
          uint64_t v31 = pthread_getspecific(*((void *)started + 74));
          if (v31 && *((unsigned char *)v31 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31 + 2, (uint64_t)"Excluding load of ", 18);
          }
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v70, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
          }
          else {
            std::string v70 = v80;
          }
          uint64_t v52 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&v70);
          uint64_t v53 = pthread_getspecific(*(void *)(v52 + 592));
          if (v53)
          {
            if (*((unsigned char *)v53 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(void *)(v53[2] - 24) + 16));
              long long v54 = std::locale::use_facet((const std::locale *)&v71, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
              std::locale::~locale((std::locale *)&v71);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v52);
              if (*(_DWORD *)(v52 + 600) == 7)
              {
                __print_back_trace();
                exception = __cxa_allocate_exception(8uLL);
                void *exception = "LOG_FATAL encountered";
                __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
              }
            }
          }
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          {
            long long v55 = &v70;
LABEL_159:
            operator delete(v55->__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        uint64_t v32 = 0;
        unint64_t v33 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v33 = &v80;
        }
        std::string::size_type v34 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v34 = v80.__r_.__value_.__l.__size_;
        }
        std::string::size_type v35 = v34 - 1;
        while (v35 + v32 != -1 && v32 != -10)
        {
          int v37 = v33->__r_.__value_.__s.__data_[v34 - 1 + v32];
          int v38 = aLibhdfsSo[v32-- + 9];
          if (v37 != v38) {
            goto LABEL_116;
          }
        }
        if (v32 != -10)
        {
LABEL_116:
          uint64_t v39 = 0;
          while (v35 + v39 != -1 && v39 != -13)
          {
            int v41 = v33->__r_.__value_.__s.__data_[v35 + v39];
            int v42 = aLibhdfsDylib[v39-- + 12];
            if (v41 != v42) {
              goto LABEL_124;
            }
          }
          if (v39 != -13)
          {
LABEL_124:
            uint64_t v43 = 0;
            uint64_t v44 = (uint64_t)v33 + v34 - 1;
            uint64_t v45 = -(uint64_t)v34;
            while (v45 != v43 && v43 != -8)
            {
              int v46 = *(unsigned __int8 *)(v44 + v43);
              int v47 = aHdfsDll[v43-- + 7];
              if (v46 != v47) {
                goto LABEL_130;
              }
            }
            if (v43 != -8)
            {
LABEL_130:
              if (LODWORD(v81.__r_.__value_.__l.__data_) == 1)
              {
                size_t v48 = (int *)global_logger();
                if (v48[169] <= 2)
                {
                  if (cppipc::must_cancel((cppipc *)v48)) {
LABEL_169:
                  }
                    log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
                  BOOL v49 = (file_logger *)global_logger();
                  std::vector<char>::size_type v50 = file_logger::start_stream(v49, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/model_server/server/unity_server_init.cpp", "init_extensions", 67, 1);
                  char v51 = pthread_getspecific(*((void *)v50 + 74));
                  if (v51 && *((unsigned char *)v51 + 280)) {
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51 + 2, (uint64_t)"Autoloading of ", 15);
                  }
                  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v69, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v69 = v80;
                  }
                  uint64_t v56 = file_logger::operator<<<std::string>((uint64_t)v50, (uint64_t)&v69);
                  long long v57 = pthread_getspecific(*(void *)(v56 + 592));
                  if (v57)
                  {
                    if (*((unsigned char *)v57 + 280))
                    {
                      std::ios_base::getloc((const std::ios_base *)((char *)v57 + *(void *)(v57[2] - 24) + 16));
                      std::string::size_type v58 = std::locale::use_facet((const std::locale *)&v71, MEMORY[0x263F8C108]);
                      ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
                      std::locale::~locale((std::locale *)&v71);
                      std::ostream::put();
                      std::ostream::flush();
                      file_logger::stream_flush((file_logger *)v56);
                      if (*(_DWORD *)(v56 + 600) == 7)
                      {
                        __print_back_trace();
                        unsigned int v61 = __cxa_allocate_exception(8uLL);
                        *unsigned int v61 = "LOG_FATAL encountered";
                        __cxa_throw(v61, MEMORY[0x263F8C1D8], 0);
                      }
                    }
                  }
                  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v69.__r_.__value_.__l.__data_);
                  }
                }
                uint64_t v59 = *a3;
                if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v66, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v66 = v80;
                }
                std::string::basic_string[abi:ne180100]<0>(v64, "..");
                (*(void (**)(void **__return_ptr, uint64_t, std::string *, void **))(*(void *)v59 + 232))(&v67, v59, &v66, v64);
                if (v68 < 0) {
                  operator delete(v67);
                }
                if (v65 < 0) {
                  operator delete(v64[0]);
                }
                if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
                {
                  long long v55 = &v66;
                  goto LABEL_159;
                }
              }
            }
          }
        }
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
    }
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    ++v23;
  }
  std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&v79, (char *)v79.__r_.__value_.__l.__size_);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
}

void sub_2243AEE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  for (; v51 != v52 - 176; v51 -= 24)
  {
    if (*(char *)(v51 - 1) < 0) {
      operator delete(*(void **)(v51 - 24));
    }
  }
  *(void *)(v52 - 176) = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v52 - 176));
  if (*(char *)(v52 - 217) < 0) {
    operator delete(*(void **)(v52 - 240));
  }
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::filesystem::path>,boost::filesystem::path const*,boost::filesystem::path const*,boost::filesystem::path*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  long long v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      long long v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::filesystem::path>,boost::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2243AF254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::filesystem::path>,boost::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a1, a2, (unsigned __int8 **)a3);
  if (v5 == a2) {
    return a2;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 24;
  if (v5 + 24 != a2)
  {
    uint64_t v8 = v5;
    while (1)
    {
      uint64_t v9 = v6;
      uint64_t v6 = v7;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = *(unsigned __int8 *)(v9 + 47);
      }
      else {
        uint64_t v11 = *(void *)(v9 + 32);
      }
      uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a3 + 8);
      }
      if (v11 != v12) {
        goto LABEL_20;
      }
      if (v13 >= 0) {
        uint64_t v14 = (unsigned __int8 *)a3;
      }
      else {
        uint64_t v14 = *(unsigned __int8 **)a3;
      }
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v6, v14, *(void *)(v9 + 32))) {
          goto LABEL_20;
        }
      }
      else if (*(unsigned char *)(v9 + 47))
      {
        uint64_t v15 = 0;
        while (*(unsigned __int8 *)(v6 + v15) == v14[v15])
        {
          if (v10 == ++v15) {
            goto LABEL_23;
          }
        }
LABEL_20:
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        long long v16 = *(_OWORD *)v6;
        *(void *)(v8 + 16) = *(void *)(v6 + 16);
        *(_OWORD *)uint64_t v8 = v16;
        v8 += 24;
        *(unsigned char *)(v9 + 47) = 0;
        *(unsigned char *)uint64_t v6 = 0;
      }
LABEL_23:
      uint64_t v7 = v6 + 24;
      if (v6 + 24 == a2) {
        return v8;
      }
    }
  }
  return v5;
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::assign<turi::gl_sframe>(unsigned int *a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  uint64_t v6 = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<turi::gl_sframe>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    turi::gl_sframe::operator std::shared_ptr<turi::unity_sframe_base>(a2, &v5);
    long long v7 = v5;
    LODWORD(v6) = 4;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)&v6);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&v6);
  }
}

void sub_2243AF47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_assigner<turi::gl_sframe>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9) {
    boost::detail::variant::forced_return<void>(a1);
  }
  return 0;
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::shuffle_order_engine<std::linear_congruential_engine<unsigned int,16807u,0u,2147483647u>,256ul>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
        unint64_t v12 = v6 - 1;
      }
      while (*(void *)(a1 + 40) <= v12);
      uint64_t v13 = result << v5;
      if (v5 >= 0x40) {
        uint64_t v13 = 0;
      }
      uint64_t result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v14 = *(void *)(a1 + 24);
  if (v2 < v14)
  {
    uint64_t v15 = *(unsigned int **)a1;
    unint64_t v16 = *(void *)(a1 + 48);
    unint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(a1 + 60);
    unsigned int v19 = *v15;
    while (1)
    {
      unsigned int v20 = v19 / 0xADC8;
      unsigned int v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      BOOL v9 = v21 >= v20;
      unsigned int v22 = v21 - v20;
      if (v9) {
        int v23 = 0;
      }
      else {
        int v23 = 0x7FFFFFFF;
      }
      unsigned int v19 = v23 + v22;
      unint64_t v24 = v19 - 1;
      if (v16 > v24)
      {
        uint64_t v25 = result << (v17 + 1);
        if (v17 >= 0x3F) {
          uint64_t v25 = 0;
        }
        uint64_t result = v25 + (v18 & v24);
        if (++v2 == v14) {
          break;
        }
      }
    }
    unsigned int *v15 = v19;
  }
  return result;
}

void turi::flexmap_to_varmap(void *a1@<X0>, uint64_t a2@<X8>)
{
  v11[9] = *(atomic_ullong **)MEMORY[0x263EF8340];
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  int v3 = a1 + 1;
  uint64_t v4 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    do
    {
      memset(v11, 0, 13);
      if (v11 != v4 + 7)
      {
        *(atomic_ullong **)((char *)v11 + 5) = *(atomic_ullong **)((char *)v4 + 61);
        v11[0] = *((atomic_ullong **)v4 + 7);
        BYTE4(v11[1]) = *((unsigned char *)v4 + 68);
        BOOL v5 = BYTE4(v11[1]) > 9u || ((1 << SBYTE4(v11[1])) & 0x33C) == 0;
        if (!v5) {
          atomic_fetch_add(v11[0], 1uLL);
        }
      }
      unsigned int v10 = 0;
      BOOL v9 = (long long *)(v4 + 4);
      unsigned int v6 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2, (const void **)v4 + 4, (uint64_t)&std::piecewise_construct, &v9);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v6 + 14, &v10);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content(&v10);
      unsigned int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          unsigned int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void *)v4[2];
          BOOL v5 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v5);
      }
      uint64_t v4 = v8;
    }
    while (v8 != v3);
  }
}

void sub_2243AF820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v4, *(char **)(v4 + 8));
  _Unwind_Resume(a1);
}

void std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::emplace_back<std::string const&,turi::flexible_type const&>(void *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = (uint64_t)(a1 + 2);
  unint64_t v3 = v4;
  unint64_t v5 = *(void *)(v2 - 8);
  if (v5 < v4) {
    std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>(*(void *)(v2 - 8));
  }
  uint64_t v6 = (uint64_t)(v5 - *a1) >> 5;
  if (!((unint64_t)(v6 + 1) >> 59))
  {
    uint64_t v7 = v3 - *a1;
    uint64_t v8 = v7 >> 4;
    if (v7 >> 4 <= (unint64_t)(v6 + 1)) {
      uint64_t v8 = v6 + 1;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t v15 = v2;
    if (v9) {
      unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(v2, v9);
    }
    else {
      unsigned int v10 = 0;
    }
    int v11 = v10;
    unint64_t v12 = &v10[32 * v6];
    uint64_t v13 = (uint64_t)v12;
    unint64_t v14 = &v10[32 * v9];
    std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<std::string const&,turi::flexible_type const&,0>((uint64_t)v12);
  }
  std::vector<float>::__throw_length_error[abi:ne180100]();
}

void sub_2243AF940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void turi::activity_classification::activity_classifier::init_model(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1, a2);
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2243B0460(_Unwind_Exception *a1)
{
  std::unique_ptr<turi::neural_net::model_spec>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_2243B06C8()
{
}

void sub_2243B06D0()
{
  MEMORY[0x22A614FA0](v0, 0x20C4093837F09);
  JUMPOUT(0x2243B06C0);
}

void *turi::neural_net::lstm_weight_initializers::operator=(void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 4, a2 + 32);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 8, a2 + 64);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 12, a2 + 96);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 16, a2 + 128);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 20, a2 + 160);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 24, a2 + 192);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 28, a2 + 224);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 32, a2 + 256);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 36, a2 + 288);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 40, a2 + 320);
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1 + 44, a2 + 352);
  return a1;
}

void turi::neural_net::lstm_weight_initializers::~lstm_weight_initializers(turi::neural_net::lstm_weight_initializers *this)
{
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 44);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 40);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 36);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 32);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 28);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 24);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 20);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 16);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 12);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 8);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100]((void *)this + 4);
  std::__function::__value_func<void ()(float *,float *)>::~__value_func[abi:ne180100](this);
}

void *std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(float *,float *)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2243B09E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2243B0A08(_Unwind_Exception *a1)
{
}

uint64_t turi::variant_converter<long long,void>::get(uint64_t a1, int *a2)
{
  void v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  uint64_t v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((atomic_ullong **)v2 != v22)
  {
    uint64_t v4 = *(atomic_ullong **)v2;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(v2 + 5);
    v22[0] = v4;
    BYTE4(v22[1]) = *(unsigned char *)(v2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  v20[0] = 0;
  turi::flexible_type_internals::ft_converter<1>::get(v20, (turi::flexible_type_internals *)v22, v3);
  uint64_t v6 = v20[0];
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          uint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v16 = v22[0];
        if (v22[0])
        {
          unint64_t v17 = (void *)v22[0][1];
          if (v17)
          {
            v22[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_33:
          uint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v18 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          uint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v11 = v22[0];
        if (v22[0])
        {
          unint64_t v12 = (void *)v22[0][6];
          if (v12)
          {
            v22[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          unint64_t v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_2243B0CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      unsigned int v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      std::string::size_type v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      long long v27 = (void *)v26[1];
      if (v27)
      {
        _OWORD v26[2] = v27;
        operator delete(v27);
      }
      unsigned int v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      unsigned int v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      unsigned int v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      unsigned int v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void *turi::flexible_type_internals::ft_converter<1>::get(void *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12) == 1)
  {
    double v3 = *(double *)this;
    *uint64_t result = (uint64_t)*(double *)this;
    if (v3 != (double)(uint64_t)v3) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"integer value", a3);
    }
  }
  else
  {
    if (*((unsigned char *)this + 12)) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"numeric integer value", a3);
    }
    *uint64_t result = *(void *)this;
  }
  return result;
}

void sub_2243B1014()
{
}

void turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 150, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2243B111C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  double v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 154, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::flexible_type_internals::ft_converter<1>::get(long long &,turi::flexible_type const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2243B131C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<double>(unsigned int *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<double>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    v5[1] = *a2;
    int v6 = 0;
    char v7 = 1;
    LODWORD(v5[0]) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_2243B14CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<double>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9) {
    boost::detail::variant::forced_return<void>(a1);
  }
  return 0;
}

void *std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[6],turi::gl_sarray_reference,0>(void *a1, char *a2, uint64_t a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  turi::gl_sarray::gl_sarray(v5 + 3, a3);
  return a1;
}

void sub_2243B1598(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[18],std::string&,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 2;
  operator new();
}

void sub_2243B19C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      unsigned int v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      unsigned int v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      unsigned int v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      unsigned int v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      unsigned int v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      atomic_ullong *volatile *v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[13],std::vector<std::pair<turi::flexible_type,turi::flexible_type>>,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 5;
  operator new();
}

void sub_2243B2058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      unsigned int v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      uint64_t v18 = (void *)v17[1];
      if (v18)
      {
        v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      unsigned int v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      unsigned int v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      unsigned int v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      unsigned int v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      atomic_ullong *volatile *v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(std::string *result, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,turi::flexible_type *,turi::flexible_type *,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2243B2338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,turi::flexible_type *,turi::flexible_type *,std::string*>(uint64_t a1, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    int v7 = a1;
    do
    {
      std::allocator<std::string>::construct[abi:ne180100]<std::string,turi::flexible_type &>(v7, v4, v6);
      int v6 = (turi::flexible_type_impl *)((char *)v6 + 16);
      uint64_t v4 = ++v12;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2243B23F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,turi::flexible_type &>(int a1, std::string *this, turi::flexible_type_impl *a3)
{
  switch(*((unsigned char *)a3 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_4;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_4:
      v9[0] = *MEMORY[0x263F8C2B8];
      uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v9[2] = v4;
      void v9[3] = MEMORY[0x263F8C318] + 16;
      if (v10 < 0) {
        operator delete((void *)v9[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v11);
      break;
    case 2:
      unint64_t v5 = *(void **)a3;
      if (*(char *)(*(void *)a3 + 31) < 0)
      {
        int v7 = (const std::string::value_type *)v5[1];
        std::string::size_type v8 = v5[2];
        std::string::__init_copy_ctor_external(this, v7, v8);
      }
      else
      {
        long long v6 = *(_OWORD *)(v5 + 1);
        this->__r_.__value_.__r.__words[2] = v5[3];
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v9, (void *)(*(void *)a3 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v9, (uint64_t *)(*(void *)a3 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v9, (void *)(*(void *)a3 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a3, this);
      break;
    case 7:
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
      this->__r_.__value_.__r.__words[2] = 0;
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v9, (void *)(*(void *)a3 + 8));
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_2243B26CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(float *,float *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

double CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/TreeEnsemble.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_TreeEnsembleParameters_TreeNode_EvaluationInfo_default_instance_ = (uint64_t)&unk_26D77C738;
  *(void *)algn_26808E438 = 0;
  qword_26808E440 = 0;
  unk_26808E448 = 0;
  dword_26808E450 = 0;
  byte_26808E458 = 1;
  CoreML::Specification::_TreeEnsembleParameters_TreeNode_default_instance_ = (uint64_t)&unk_26D77C7D0;
  double result = 0.0;
  unk_26808E468 = 0u;
  unk_26808E478 = 0u;
  unk_26808E488 = 0u;
  unk_26808E498 = 0u;
  unk_26808E4A8 = 0u;
  unk_26808E4B8 = 0u;
  dword_26808E4C8 = 0;
  byte_26808E4D0 = 1;
  CoreML::Specification::_TreeEnsembleParameters_default_instance_ = (uint64_t)&unk_26D77C868;
  unk_26808E4E0 = 0u;
  unk_26808E4F0 = 0u;
  unk_26808E500 = 0u;
  qword_26808E518 = 0;
  dword_26808E520 = 0;
  byte_26808E528 = 1;
  qword_26808E558 = 0;
  dword_26808E548 = 0;
  CoreML::Specification::_TreeEnsembleClassifier_default_instance_ = (uint64_t)&unk_26D77C900;
  *(void *)algn_26808E538 = 0;
  byte_26808E560 = 1;
  CoreML::Specification::_TreeEnsembleRegressor_default_instance_ = (uint64_t)&unk_26D77C998;
  unk_26808E580 = 0;
  byte_26808E598 = 1;
  qword_26808E540 = (uint64_t)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  qword_26808E588 = (uint64_t)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
  unk_26808E590 = 0;
  return result;
}

void CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(CoreML::Specification::protobuf_TreeEnsemble_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_TreeEnsemble_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2243B2978(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  *(void *)this = &unk_26D77C738;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *)&CoreML::Specification::_TreeEnsembleParameters_TreeNode_EvaluationInfo_default_instance_) {
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_2243B29F0(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::~TreeEnsembleParameters_TreeNode_EvaluationInfo(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  *(void *)this = &unk_26D77C738;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D77C738;
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::New(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243B2B04(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>);
  }
  return result;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::Clear(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

BOOL CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        unint64_t v5 = *a2;
        if (*a2 >= a2[1])
        {
          uint64_t v6 = 0;
LABEL_6:
          unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
          unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
          if ((v7 & 0x100000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_7;
        }
        uint64_t v6 = *v5;
        if (*v5 < 1) {
          goto LABEL_6;
        }
        *a2 = v5 + 1;
        unint64_t v7 = v6 | 0x100000000;
        if ((v7 & 0x100000000) == 0) {
          goto LABEL_20;
        }
LABEL_7:
        if (v7 >> 3 != 2) {
          break;
        }
        if (v7 != 17) {
          goto LABEL_20;
        }
        unint64_t v16 = 0;
        uint64_t v11 = (unint64_t *)*a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v16);
          if (!result) {
            return result;
          }
          unint64_t v12 = v16;
        }
        else
        {
          unint64_t v12 = *v11;
          *a2 = (char *)(v11 + 1);
        }
        *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v12;
      }
      if (v7 >> 3 != 1 || v7 != 8) {
        break;
      }
      char v10 = *a2;
      if (*a2 >= a2[1] || *v10 < 0)
      {
        *((void *)this + 2) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v14 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        *((void *)this + 2) = *v10;
        *a2 = v10 + 1;
      }
    }
LABEL_20:
    if (v7) {
      BOOL v13 = (v7 & 7) == 4;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      return 1;
    }
  }
  while ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) != 0);
  return 0;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 16);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  double v7 = *(double *)(v5 + 24);
  if (v7 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)2, a2, v7, a3);
  }
  return this;
}

unint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::ByteSizeLong(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  uint64_t v1 = *((void *)this + 2);
  unint64_t v2 = (9 * (__clz(v1 | 1) ^ 0x3F) + 73) >> 6;
  if (v1) {
    unint64_t v3 = v2 + 1;
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((double *)this + 3) != 0.0) {
    v3 += 9;
  }
  *((_DWORD *)this + 8) = v3;
  return v3;
}

std::string *CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::MergeFrom(std::string *this, const CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *a2)
{
  unint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  std::string::size_type v5 = *((void *)a2 + 2);
  if (v5) {
    v3->__r_.__value_.__r.__words[2] = v5;
  }
  double v6 = *((double *)a2 + 3);
  if (v6 != 0.0) {
    *(double *)&v3[1].__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::IsInitialized(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
  return 1;
}

void *CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleParameters.TreeNode.EvaluationInfo");
}

CoreML::Specification::TreeEnsembleParameters_TreeNode *CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  *(void *)this = &unk_26D77C7D0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (this != (CoreML::Specification::TreeEnsembleParameters_TreeNode *)&CoreML::Specification::_TreeEnsembleParameters_TreeNode_default_instance_) {
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 4CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = 0u;
  return this;
}

void sub_2243B2E3C(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleParameters_TreeNode::~TreeEnsembleParameters_TreeNode(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  *(void *)this = &unk_26D77C7D0;
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::TreeEnsembleParameters_TreeNode::~TreeEnsembleParameters_TreeNode(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::TreeEnsembleParameters_TreeNode::New(CoreML::Specification::TreeEnsembleParameters_TreeNode *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243B2F40(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40FA1F30E5);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters_TreeNode>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>);
  }
  return result;
}

double CoreML::Specification::TreeEnsembleParameters_TreeNode::Clear(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  if ((int)v1 >= 1)
  {
    unint64_t v2 = (uint64_t *)(*((void *)this + 4) + 8);
    do
    {
      uint64_t v3 = *v2++;
      *(void *)(v3 + 16) = 0;
      *(void *)(v3 + 24) = 0;
      --v1;
    }
    while (v1);
    *((_DWORD *)this + 6) = 0;
  }
  double result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 4CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = 0u;
  return result;
}

BOOL CoreML::Specification::TreeEnsembleParameters_TreeNode::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleParameters_TreeNode *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  std::string::size_type v5 = (CoreML::Specification::TreeEnsembleParameters_TreeNode *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      double v6 = *(unsigned __int8 **)a2;
      unint64_t v7 = *((void *)a2 + 1);
      if (*(void *)a2 >= v7)
      {
        uint64_t v9 = 0;
        goto LABEL_16;
      }
      std::string::size_type v8 = v6 + 1;
      uint64_t v9 = *v6;
      if ((char)*v6 >= 1) {
        break;
      }
      if ((unint64_t)v8 < v7)
      {
        int v11 = *v8;
        if ((v9 & ~v11) >= 0x80)
        {
          *(void *)a2 = v6 + 2;
          unint64_t v10 = (v9 + (v11 << 7) - 128) | 0x100000000;
          goto LABEL_17;
        }
      }
LABEL_16:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v9);
      unint64_t v10 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v10 & 0x100000000) == 0) {
        goto LABEL_9;
      }
LABEL_17:
      switch(v10 >> 3)
      {
        case 1u:
          if (v10 != 8) {
            goto LABEL_9;
          }
          char v14 = *(char **)a2;
          if (*(void *)a2 < *((void *)a2 + 1) && (*v14 & 0x80000000) == 0)
          {
            *((void *)this + 5) = *v14;
            goto LABEL_51;
          }
          *((void *)this + 5) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v26 & 1) == 0) {
            return 0;
          }
          continue;
        case 2u:
          if (v10 != 16) {
            goto LABEL_9;
          }
          char v14 = *(char **)a2;
          if (*(void *)a2 < *((void *)a2 + 1) && (*v14 & 0x80000000) == 0)
          {
            *((void *)this + 6) = *v14;
            goto LABEL_51;
          }
          *((void *)this + 6) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v27 & 1) == 0) {
            return 0;
          }
          continue;
        case 3u:
          if (v10 != 24) {
            goto LABEL_9;
          }
          atomic_ullong *volatile v17 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1))
          {
            int v18 = 0;
          }
          else
          {
            int v18 = *v17;
            if ((*v17 & 0x80000000) == 0)
            {
              *(void *)a2 = v17 + 1;
              goto LABEL_79;
            }
          }
          Varint32Fallbacstd::string::size_type k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v18);
          int v18 = Varint32Fallback;
          if (Varint32Fallback < 0) {
            return 0;
          }
LABEL_79:
          *((_DWORD *)this + 14) = v18;
          break;
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
          goto LABEL_9;
        case 0xAu:
          if (v10 != 80) {
            goto LABEL_9;
          }
          char v14 = *(char **)a2;
          if (*(void *)a2 < *((void *)a2 + 1) && (*v14 & 0x80000000) == 0)
          {
            *((void *)this + 8) = *v14;
            goto LABEL_51;
          }
          *((void *)this + 8) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v28 & 1) == 0) {
            return 0;
          }
          continue;
        case 0xBu:
          if (v10 != 89) {
            goto LABEL_9;
          }
          unint64_t v37 = 0;
          atomic_ullong *volatile v19 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v37);
            if (!result) {
              return result;
            }
            unint64_t v20 = v37;
          }
          else
          {
            unint64_t v20 = *v19;
            *(void *)a2 = v19 + 1;
          }
          *((void *)this + 9) = v20;
          continue;
        case 0xCu:
          if (v10 != 96) {
            goto LABEL_9;
          }
          char v14 = *(char **)a2;
          if (*(void *)a2 < *((void *)a2 + 1) && (*v14 & 0x80000000) == 0)
          {
            *((void *)this + 1CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = *v14;
            goto LABEL_51;
          }
          *((void *)this + 1CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
          if ((v29 & 1) == 0) {
            return 0;
          }
          continue;
        case 0xDu:
          if (v10 != 104) {
            goto LABEL_9;
          }
          char v14 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v14 < 0)
          {
            *((void *)this + 11) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v30 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            *((void *)this + 11) = *v14;
LABEL_51:
            *(void *)a2 = v14 + 1;
          }
          continue;
        case 0xEu:
          if (v10 != 112) {
            goto LABEL_9;
          }
          unsigned int v21 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v21 < 0)
          {
            Varint64Fallbacstd::string::size_type k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2);
            if ((v31 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            Varint64Fallbacstd::string::size_type k = *v21;
            *(void *)a2 = v21 + 1;
          }
          *((unsigned char *)this + 6CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = Varint64Fallback != 0;
          continue;
        case 0x14u:
          if (v10 != 162) {
            goto LABEL_9;
          }
          int v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>(v5);
          unint64_t v24 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v24 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v24;
            *(void *)a2 = v24 + 1;
          }
          unint64_t v32 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v32 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v34 = v32;
          BOOL result = CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::MergePartialFromCodedStream(v23, (char **)a2, v33);
          if (!result) {
            return result;
          }
          if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v34)) {
            return 0;
          }
          continue;
        default:
          if (v10 >> 3 != 30 || v10 != 241) {
            goto LABEL_9;
          }
          unint64_t v37 = 0;
          unsigned int v15 = *(unint64_t **)a2;
          if ((int)(*((_DWORD *)a2 + 2) - *(void *)a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v37);
            if (!result) {
              return result;
            }
            unint64_t v16 = v37;
          }
          else
          {
            unint64_t v16 = *v15;
            *(void *)a2 = v15 + 1;
          }
          *((void *)this + 12) = v16;
          continue;
      }
    }
    *(void *)a2 = v8;
    unint64_t v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0) {
      goto LABEL_17;
    }
LABEL_9:
    if (!v10 || (v10 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v10, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unint64_t v6 = *(void *)(this + 40);
  if (v6) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(1, v6, a2, a4);
  }
  unint64_t v7 = *(void *)(v5 + 48);
  if (v7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v7, a2, a4);
  }
  signed int v8 = *(_DWORD *)(v5 + 56);
  if (v8) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt32(3, v8, a2, a4);
  }
  unint64_t v9 = *(void *)(v5 + 64);
  if (v9) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(10, v9, a2, a4);
  }
  double v10 = *(double *)(v5 + 72);
  if (v10 != 0.0) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0xB, a2, v10, a3);
  }
  unint64_t v11 = *(void *)(v5 + 80);
  if (v11) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(12, v11, a2, a4);
  }
  unint64_t v12 = *(void *)(v5 + 88);
  if (v12) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(13, v12, a2, a4);
  }
  if (*(unsigned char *)(v5 + 60)) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteBool(14, 1u, a2, a4);
  }
  int v13 = *(_DWORD *)(v5 + 24);
  if (v13)
  {
    for (int i = 0; i != v13; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x14, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  double v15 = *(double *)(v5 + 96);
  if (v15 != 0.0)
  {
    return _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0x1E, a2, v15, a3);
  }
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode::ByteSizeLong(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  uint64_t v2 = 2 * v1;
  if (v1)
  {
    int v3 = 0;
    uint64_t v4 = *((void *)this + 4);
    do
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3 + 8);
      uint64_t v6 = *(void *)(v5 + 16);
      unint64_t v7 = (9 * (__clz(v6 | 1) ^ 0x3F) + 73) >> 6;
      if (v6) {
        unint64_t v8 = v7 + 1;
      }
      else {
        unint64_t v8 = 0;
      }
      if (*(double *)(v5 + 24) != 0.0) {
        v8 += 9;
      }
      *(_DWORD *)(v5 + 32) = v8;
      v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v1 != v3);
  }
  uint64_t v9 = *((void *)this + 5);
  unint64_t v10 = v2 + ((9 * (__clz(v9 | 1) ^ 0x3F) + 73) >> 6);
  if (v9) {
    uint64_t v2 = v10 + 1;
  }
  uint64_t v11 = *((void *)this + 6);
  unint64_t v12 = v2 + ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6);
  if (v11) {
    uint64_t v2 = v12 + 1;
  }
  int v13 = *((_DWORD *)this + 14);
  uint64_t v14 = 11;
  uint64_t v15 = ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v13 >= 0) {
    uint64_t v14 = v15;
  }
  uint64_t v16 = v14 + v2;
  if (v13) {
    uint64_t v2 = v16;
  }
  if (*((unsigned char *)this + 60)) {
    v2 += 2;
  }
  uint64_t v17 = *((void *)this + 8);
  unint64_t v18 = v2 + ((9 * (__clz(v17 | 1) ^ 0x3F) + 73) >> 6);
  if (v17) {
    uint64_t v2 = v18 + 1;
  }
  if (*((double *)this + 9) != 0.0) {
    v2 += 9;
  }
  uint64_t v19 = *((void *)this + 10);
  uint64_t v20 = *((void *)this + 11);
  unint64_t v21 = v2 + ((9 * (__clz(v19 | 1) ^ 0x3F) + 73) >> 6);
  if (v19) {
    uint64_t v2 = v21 + 1;
  }
  unint64_t v22 = v2 + ((9 * (__clz(v20 | 1) ^ 0x3F) + 73) >> 6);
  if (v20) {
    uint64_t v2 = v22 + 1;
  }
  if (*((double *)this + 12) != 0.0) {
    v2 += 10;
  }
  *((_DWORD *)this + 26) = v2;
  return v2;
}

std::string *CoreML::Specification::TreeEnsembleParameters_TreeNode::MergeFrom(std::string *this, const CoreML::Specification::TreeEnsembleParameters_TreeNode *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **)(*((void *)a2 + 4) + 8);
    unint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)&v3->__r_.__value_.__r.__words[2], *((_DWORD *)a2 + 6));
    this = _tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>((std::string *)&v3->__r_.__value_.__r.__words[2], (std::string **)v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__l.__size_ - LODWORD(v3[1].__r_.__value_.__l.__data_));
    signed int v8 = LODWORD(v3[1].__r_.__value_.__l.__data_) + v5;
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v8;
    std::string::size_type size = (signed int *)v3[1].__r_.__value_.__l.__size_;
    if (*size < v8) {
      *std::string::size_type size = v8;
    }
  }
  std::string::size_type v10 = *((void *)a2 + 5);
  if (v10) {
    v3[1].__r_.__value_.__r.__words[2] = v10;
  }
  std::string::size_type v11 = *((void *)a2 + 6);
  if (v11) {
    v3[2].__r_.__value_.__r.__words[0] = v11;
  }
  int v12 = *((_DWORD *)a2 + 14);
  if (v12) {
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v12;
  }
  if (*((unsigned char *)a2 + 60)) {
    v3[2].__r_.__value_.__s.__data_[12] = 1;
  }
  std::string::size_type v13 = *((void *)a2 + 8);
  if (v13) {
    v3[2].__r_.__value_.__r.__words[2] = v13;
  }
  double v14 = *((double *)a2 + 9);
  if (v14 != 0.0) {
    *(double *)&v3[3].__r_.__value_.__l.__data_ = v14;
  }
  std::string::size_type v15 = *((void *)a2 + 10);
  if (v15) {
    v3[3].__r_.__value_.__l.__size_ = v15;
  }
  std::string::size_type v16 = *((void *)a2 + 11);
  if (v16) {
    v3[3].__r_.__value_.__r.__words[2] = v16;
  }
  double v17 = *((double *)a2 + 12);
  if (v17 != 0.0) {
    *(double *)&v3[4].__r_.__value_.__l.__data_ = v17;
  }
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode::IsInitialized(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  return 1;
}

void *CoreML::Specification::TreeEnsembleParameters_TreeNode::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleParameters.TreeNode");
}

CoreML::Specification::TreeEnsembleParameters *CoreML::Specification::TreeEnsembleParameters::TreeEnsembleParameters(CoreML::Specification::TreeEnsembleParameters *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26D77C868;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = 0u;
  if (this != (CoreML::Specification::TreeEnsembleParameters *)&CoreML::Specification::_TreeEnsembleParameters_default_instance_) {
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  }
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  return this;
}

void sub_2243B38D0(_Unwind_Exception *a1)
{
  unsigned int v5 = *(void **)(v2 + 48);
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>(v3);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleParameters::~TreeEnsembleParameters(CoreML::Specification::TreeEnsembleParameters *this)
{
  *(void *)this = &unk_26D77C868;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2 && !*v2) {
    operator delete(v2);
  }
  _tc_google::protobuf::internal::RepeatedPtrFieldBase::Destroy<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::GLMRegressor_DoubleArray>::TypeHandler>((void *)this + 2);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::TreeEnsembleParameters::~TreeEnsembleParameters(this);
  JUMPOUT(0x22A614FA0);
}

void CoreML::Specification::TreeEnsembleParameters::New(CoreML::Specification::TreeEnsembleParameters *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243B3A00(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40CFA7A0FDLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleParameters>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters>);
  }
  return result;
}

uint64_t CoreML::Specification::TreeEnsembleParameters::Clear(CoreML::Specification::TreeEnsembleParameters *this)
{
  uint64_t result = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>((uint64_t)this + 16);
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = 0;
  *((void *)this + 8) = 0;
  return result;
}

BOOL CoreML::Specification::TreeEnsembleParameters::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleParameters *this, char **a2, unsigned int a3)
{
  unsigned int v5 = (unsigned int *)((char *)this + 40);
  uint64_t v6 = (CoreML::Specification::TreeEnsembleParameters *)((char *)this + 16);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v7 = *a2;
            if (*a2 < a2[1]) {
              break;
            }
            uint64_t v8 = 0;
LABEL_7:
            unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
            unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) != 0) {
              goto LABEL_8;
            }
LABEL_27:
            if (v9) {
              BOOL v19 = (v9 & 7) == 4;
            }
            else {
              BOOL v19 = 1;
            }
            if (v19) {
              return 1;
            }
            if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
          }
            }
          uint64_t v8 = *v7;
          if (*v7 < 1) {
            goto LABEL_7;
          }
          *a2 = v7 + 1;
          unint64_t v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0) {
            goto LABEL_27;
          }
LABEL_8:
          unsigned int v11 = v9 >> 3;
          if (v9 >> 3 == 3) {
            break;
          }
          if (v11 == 2)
          {
            if (v9 != 16) {
              goto LABEL_27;
            }
            unint64_t v18 = *a2;
            if (*a2 >= a2[1] || *v18 < 0)
            {
              *((void *)this + 8) = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if ((v24 & 1) == 0) {
                return 0;
              }
            }
            else
            {
              *((void *)this + 8) = *v18;
              *a2 = v18 + 1;
            }
          }
          else
          {
            if (v11 != 1 || v9 != 10) {
              goto LABEL_27;
            }
            std::string::size_type v13 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>(v6);
            double v14 = *a2;
            if (*a2 >= a2[1] || *v14 < 0)
            {
              int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
              if (VarintSizeAsIntFallback < 0) {
                return 0;
              }
            }
            else
            {
              int VarintSizeAsIntFallback = *v14;
              *a2 = v14 + 1;
            }
            unint64_t v20 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
            if ((v20 & 0x8000000000000000) != 0) {
              return 0;
            }
            int v22 = v20;
            BOOL result = CoreML::Specification::TreeEnsembleParameters_TreeNode::MergePartialFromCodedStream(v13, (_tc_google::protobuf::io::CodedInputStream *)a2, v21);
            if (!result) {
              return result;
            }
            if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v22))return 0; {
          }
            }
        }
        if (v9 != 25) {
          break;
        }
        if (!_tc_google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<double,(_tc_google::protobuf::internal::WireFormatLite::FieldType)1>(1, 0x1Au, (unint64_t **)a2, (uint64_t)v5))return 0; {
      }
        }
      if (v9 != 26) {
        goto LABEL_27;
      }
      std::string::size_type v16 = *a2;
      if (*a2 >= a2[1] || *v16 < 0)
      {
        unsigned int v17 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
        if ((v17 & 0x80000000) != 0) {
          return 0;
        }
      }
      else
      {
        unsigned int v17 = *v16;
        *a2 = v16 + 1;
      }
      if ((v17 & 7) != 0) {
        return 0;
      }
      signed int v25 = *v5;
      unsigned int v26 = v17 >> 3;
      int v27 = _tc_google::protobuf::io::CodedInputStream::BytesUntilTotalBytesLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      int v28 = _tc_google::protobuf::io::CodedInputStream::BytesUntilLimit((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (v28 >= v27) {
        int v29 = v27;
      }
      else {
        int v29 = v28;
      }
      if (v27 == -1) {
        int v29 = v28;
      }
      if (v29 >= (uint64_t)v17) {
        break;
      }
      if (v17 >= 8)
      {
        if (v26 <= 1) {
          int v30 = 1;
        }
        else {
          int v30 = v17 >> 3;
        }
        do
        {
          unint64_t v39 = 0;
          char v31 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            BOOL result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v39);
            if (!result) {
              return result;
            }
            unint64_t v32 = v39;
          }
          else
          {
            unint64_t v32 = *v31;
            *a2 = (char *)(v31 + 1);
          }
          signed int v33 = *((_DWORD *)this + 10);
          if (v33 == *((_DWORD *)this + 11))
          {
            _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v33 + 1);
            signed int v33 = *v5;
          }
          uint64_t v34 = *((void *)this + 6);
          *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = v33 + 1;
          *(void *)(v34 + 8 * v33 + 8) = v32;
          --v30;
        }
        while (v30);
      }
    }
    signed int v35 = v25 + v26;
    if ((int)*v5 >= (int)(v25 + v26))
    {
      uint64_t v36 = *((void *)this + 6);
    }
    else
    {
      _tc_google::protobuf::RepeatedField<double>::Reserve(v5, v25 + v26);
      uint64_t v36 = *((void *)this + 6);
      uint64_t v37 = 8 * v35 - 8 * *((int *)this + 10);
      if (v37 >= 1) {
        bzero((void *)(v36 + 8 + 8 * *((int *)this + 10)), 8 * (((unint64_t)v37 >> 3) - ((unint64_t)v37 > 7)) + 8);
      }
    }
    *unsigned int v5 = v35;
    uint64_t v38 = v36 + 8;
    if (!v36) {
      uint64_t v38 = 0;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::ReadRaw((_tc_google::protobuf::io::CodedInputStream *)a2, (char *)(v38 + 8 * v25), v17));
  if ((int)*v5 >= 1)
  {
    BOOL result = 0;
    *unsigned int v5 = v25;
    return result;
  }
  return 0;
}

uint64_t CoreML::Specification::TreeEnsembleParameters::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, *(void *)(*(void *)(v5 + 32) + 8 * i + 8), a2, a4);
  }
  unint64_t v8 = *(void *)(v5 + 64);
  if (v8) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, v8, a2, a4);
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    if (*((int *)a2 + 4) < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, 0x1Au);
      int v9 = *((_DWORD *)a2 + 4);
    }
    else
    {
      *(unsigned char *)(*((void *)a2 + 1))++ = 26;
      int v9 = *((_DWORD *)a2 + 4) - 1;
      *((_DWORD *)a2 + 4) = v9;
    }
    unsigned int v10 = *(_DWORD *)(v5 + 56);
    if (v9 < 5)
    {
      _tc_google::protobuf::io::CodedOutputStream::WriteVarint32SlowPath(a2, v10);
    }
    else
    {
      uint64_t v11 = *((void *)a2 + 1);
      if (v10 < 0x80)
      {
        unsigned int v13 = *(_DWORD *)(v5 + 56);
        int v12 = (unsigned char *)*((void *)a2 + 1);
      }
      else
      {
        int v12 = (unsigned char *)*((void *)a2 + 1);
        do
        {
          *v12++ = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
      }
      unsigned char *v12 = v13;
      int v15 = v12 - v11 + 1;
      *((void *)a2 + 1) += v15;
      *((_DWORD *)a2 + 4) -= v15;
    }
    uint64_t v16 = *(void *)(v5 + 48);
    if (v16) {
      unsigned int v17 = (_tc_google::protobuf::internal::WireFormatLite *)(v16 + 8);
    }
    else {
      unsigned int v17 = 0;
    }
    unint64_t v18 = (const double *)*(unsigned int *)(v5 + 40);
    return _tc_google::protobuf::internal::WireFormatLite::WriteDoubleArray(v17, v18, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters::ByteSizeLong(CoreML::Specification::TreeEnsembleParameters *this)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 6);
    do
    {
      uint64_t v5 = CoreML::Specification::TreeEnsembleParameters_TreeNode::ByteSizeLong(*(CoreML::Specification::TreeEnsembleParameters_TreeNode **)(*((void *)this + 4) + 8 * v3 + 8));
      v4 += v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *((unsigned int *)this + 10);
  uint64_t v7 = 8 * v6;
  if (v6)
  {
    uint64_t v8 = 11;
    uint64_t v9 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((int)v7 >= 0) {
      uint64_t v8 = v9;
    }
    v4 += v8;
  }
  *((_DWORD *)this + 14) = v7;
  uint64_t v10 = v4 + v7;
  uint64_t v11 = *((void *)this + 8);
  unint64_t v12 = v10 + ((9 * (__clz(v11 | 1) ^ 0x3F) + 73) >> 6);
  if (v11) {
    uint64_t result = v12 + 1;
  }
  else {
    uint64_t result = v10;
  }
  *((_DWORD *)this + 18) = result;
  return result;
}

unint64_t *CoreML::Specification::TreeEnsembleParameters::MergeFrom(unint64_t *this, const CoreML::Specification::TreeEnsembleParameters *a2)
{
  int v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = (unint64_t *)_tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  unsigned int v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    uint64_t v6 = (CoreML::Specification::TreeEnsembleParameters_TreeNode **)(*((void *)a2 + 4) + 8);
    uint64_t v7 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((_tc_google::protobuf::internal::RepeatedPtrFieldBase *)(v3 + 2), *((_DWORD *)a2 + 6));
    this = (unint64_t *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>((std::string *)(v3 + 2), (std::string **)v7, v6, v5, *(_DWORD *)v3[4] - *((_DWORD *)v3 + 6));
    signed int v8 = *((_DWORD *)v3 + 6) + v5;
    *((_DWORD *)v3 + 6) = v8;
    uint64_t v9 = (signed int *)v3[4];
    if (*v9 < v8) {
      signed int *v9 = v8;
    }
  }
  int v10 = *((_DWORD *)a2 + 10);
  if (v10)
  {
    _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)v3 + 10, *((_DWORD *)v3 + 10) + v10);
    this = (unint64_t *)memcpy((void *)(v3[6] + 8 * *((int *)v3 + 10) + 8), (const void *)(*((void *)a2 + 6) + 8), 8 * *((int *)a2 + 10));
    *((_DWORD *)v3 + 10) += *((_DWORD *)a2 + 10);
  }
  unint64_t v11 = *((void *)a2 + 8);
  if (v11) {
    unsigned char v3[8] = v11;
  }
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleParameters::IsInitialized(CoreML::Specification::TreeEnsembleParameters *this)
{
  return 1;
}

void *CoreML::Specification::TreeEnsembleParameters::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleParameters");
}

CoreML::Specification::TreeEnsembleClassifier *CoreML::Specification::TreeEnsembleClassifier::TreeEnsembleClassifier(CoreML::Specification::TreeEnsembleClassifier *this)
{
  *(void *)this = &unk_26D77C900;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_) {
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  return this;
}

void sub_2243B41C8(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleClassifier::~TreeEnsembleClassifier(CoreML::Specification::TreeEnsembleClassifier *this)
{
  *(void *)this = &unk_26D77C900;
  CoreML::Specification::TreeEnsembleClassifier::SharedDtor((uint64_t *)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::TreeEnsembleClassifier::~TreeEnsembleClassifier(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::TreeEnsembleClassifier::SharedDtor(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  if (this != &CoreML::Specification::_TreeEnsembleClassifier_default_instance_)
  {
    this = (uint64_t *)this[2];
    if (this) {
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
  }
  if (*(_DWORD *)(v1 + 44))
  {
    return (uint64_t *)CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v1);
  }
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 44);
  if (v2 == 101 || v2 == 100)
  {
    this = *(void *)(this + 32);
    if (this) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
    }
  }
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t *CoreML::Specification::TreeEnsembleClassifier::default_instance(CoreML::Specification::TreeEnsembleClassifier *this)
{
  return &CoreML::Specification::_TreeEnsembleClassifier_default_instance_;
}

void CoreML::Specification::TreeEnsembleClassifier::New(CoreML::Specification::TreeEnsembleClassifier *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243B43C8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C403B3CA634);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleClassifier>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleClassifier>);
  }
  return result;
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::Clear(CoreML::Specification::TreeEnsembleClassifier *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels((uint64_t)this);
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleClassifier *this, _tc_google::protobuf::io::CodedInputStream *a2, unsigned int a3)
{
  while (1)
  {
    while (1)
    {
      unsigned int v5 = *(unsigned __int8 **)a2;
      unint64_t v6 = *((void *)a2 + 1);
      if (*(void *)a2 >= v6)
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v7 = v5 + 1;
        uint64_t v8 = *v5;
        if ((char)*v5 >= 1)
        {
          *(void *)a2 = v7;
          unint64_t v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0) {
            goto LABEL_55;
          }
          goto LABEL_8;
        }
        if ((unint64_t)v7 < v6)
        {
          int v10 = *v7;
          if ((v8 & ~v10) >= 0x80)
          {
            *(void *)a2 = v5 + 2;
            unint64_t v9 = (v8 + (v10 << 7) - 128) | 0x100000000;
            goto LABEL_8;
          }
        }
      }
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback(a2, v8);
      unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x3FFF) << 32);
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_55;
      }
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 > 0x63) {
        break;
      }
      if (v11 == 1)
      {
        if (v9 == 10)
        {
          uint64_t v16 = (CoreML::Specification::TreeEnsembleParameters *)*((void *)this + 2);
          if (!v16) {
            operator new();
          }
          unsigned int v17 = *(char **)a2;
          if (*(void *)a2 >= *((void *)a2 + 1) || *v17 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v17;
            *(void *)a2 = v17 + 1;
          }
          unint64_t v24 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, VarintSizeAsIntFallback);
          if ((v24 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v26 = v24;
          uint64_t result = CoreML::Specification::TreeEnsembleParameters::MergePartialFromCodedStream(v16, (char **)a2, v25);
          if (!result) {
            return result;
          }
          goto LABEL_51;
        }
LABEL_55:
        if (v9) {
          BOOL v33 = (v9 & 7) == 4;
        }
        else {
          BOOL v33 = 1;
        }
        if (v33) {
          return 1;
        }
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField(a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
      }
        }
      else
      {
        if (v11 != 2 || v9 != 16) {
          goto LABEL_55;
        }
        unsigned int v13 = *(char **)a2;
        if (*(void *)a2 >= *((void *)a2 + 1))
        {
          int v14 = 0;
        }
        else
        {
          int v14 = *v13;
          if ((*v13 & 0x80000000) == 0)
          {
            *(void *)a2 = v13 + 1;
            goto LABEL_63;
          }
        }
        Varint32Fallbacstd::string::size_type k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v14);
        int v14 = Varint32Fallback;
        if (Varint32Fallback < 0) {
          return 0;
        }
LABEL_63:
        *((_DWORD *)this + 6) = v14;
      }
    }
    if (v11 == 100) {
      break;
    }
    if (v11 != 101 || v9 != 42) {
      goto LABEL_55;
    }
    if (*((_DWORD *)this + 11) != 101)
    {
      CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels((uint64_t)this);
      *((_DWORD *)this + 11) = 101;
      operator new();
    }
    int v15 = (CoreML::Specification::Int64Vector *)*((void *)this + 4);
    unint64_t v20 = *(char **)a2;
    if (*(void *)a2 >= *((void *)a2 + 1) || *v20 < 0)
    {
      int v21 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
      if (v21 < 0) {
        return 0;
      }
    }
    else
    {
      int v21 = *v20;
      *(void *)a2 = v20 + 1;
    }
    unint64_t v28 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v21);
    if ((v28 & 0x8000000000000000) != 0) {
      return 0;
    }
    int v26 = v28;
    uint64_t result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream(v15, (char **)a2, v29);
    if (!result) {
      return result;
    }
LABEL_51:
    if (!_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit(a2, v26)) {
      return 0;
    }
  }
  if (v9 != 34) {
    goto LABEL_55;
  }
  if (*((_DWORD *)this + 11) != 100)
  {
    CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels((uint64_t)this);
    *((_DWORD *)this + 11) = 100;
    operator new();
  }
  BOOL v19 = (CoreML::Specification::StringVector *)*((void *)this + 4);
  int v22 = *(char **)a2;
  if (*(void *)a2 >= *((void *)a2 + 1) || *v22 < 0)
  {
    int v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback(a2);
    if (v23 < 0) {
      return 0;
    }
  }
  else
  {
    int v23 = *v22;
    *(void *)a2 = v22 + 1;
  }
  unint64_t v30 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit(a2, v23);
  if ((v30 & 0x8000000000000000) == 0)
  {
    int v26 = v30;
    uint64_t result = CoreML::Specification::StringVector::MergePartialFromCodedStream(v19, (char **)a2, v31);
    if (!result) {
      return result;
    }
    goto LABEL_51;
  }
  return 0;
}

void sub_2243B47CC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40CFA7A0FDLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::TreeEnsembleClassifier::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int v5 = this;
  if (this != &CoreML::Specification::_TreeEnsembleClassifier_default_instance_)
  {
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
  }
  signed int v7 = *((_DWORD *)v5 + 6);
  if (v7) {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteInt32(2, v7, a2, a4);
  }
  int v8 = *((_DWORD *)v5 + 11);
  if (v8 == 100)
  {
    this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x64, v5[4], a2, a4);
    int v8 = *((_DWORD *)v5 + 11);
  }
  if (v8 == 101)
  {
    uint64_t v9 = v5[4];
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)0x65, v9, a2, a4);
  }
  return this;
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::ByteSizeLong(CoreML::Specification::TreeEnsembleClassifier *this)
{
  if (this == (CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_
    || (uint64_t v2 = (CoreML::Specification::TreeEnsembleParameters *)*((void *)this + 2)) == 0)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = CoreML::Specification::TreeEnsembleParameters::ByteSizeLong(v2);
    uint64_t v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  int v5 = *((_DWORD *)this + 6);
  if (v5)
  {
    if (v5 < 0) {
      uint64_t v6 = 11;
    }
    else {
      uint64_t v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    v4 += v6;
  }
  int v7 = *((_DWORD *)this + 11);
  if (v7 == 101)
  {
    uint64_t v8 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 4));
    goto LABEL_14;
  }
  if (v7 == 100)
  {
    uint64_t v8 = CoreML::Specification::StringVector::ByteSizeLong(*((CoreML::Specification::StringVector **)this + 4));
LABEL_14:
    v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
  *((_DWORD *)this + 1CoreML::Specification::CoreMLModels::WordTagger::New(this, 0) = v4;
  return v4;
}

std::string *CoreML::Specification::TreeEnsembleClassifier::MergeFrom(std::string *this, const CoreML::Specification::TreeEnsembleClassifier *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::TreeEnsembleClassifier *)&CoreML::Specification::_TreeEnsembleClassifier_default_instance_
    && v5 != 0)
  {
    int v7 = *(unint64_t **)(v3 + 16);
    if (!v7) {
      operator new();
    }
    if (v5) {
      uint64_t v8 = (const CoreML::Specification::TreeEnsembleParameters *)*((void *)a2 + 2);
    }
    else {
      uint64_t v8 = (const CoreML::Specification::TreeEnsembleParameters *)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
    }
    this = (std::string *)CoreML::Specification::TreeEnsembleParameters::MergeFrom(v7, v8);
  }
  int v9 = *((_DWORD *)a2 + 6);
  if (v9) {
    *(_DWORD *)(v3 + 24) = v9;
  }
  int v10 = *((_DWORD *)a2 + 11);
  if (v10 == 101)
  {
    if (*(_DWORD *)(v3 + 44) != 101)
    {
      CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 44) = 101;
      operator new();
    }
    unint64_t v12 = (const CoreML::Specification::GLMRegressor_DoubleArray *)*((void *)a2 + 4);
    int v14 = *(unint64_t **)(v3 + 32);
    return (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(v14, v12);
  }
  else if (v10 == 100)
  {
    if (*(_DWORD *)(v3 + 44) != 100)
    {
      CoreML::Specification::TreeEnsembleClassifier::clear_ClassLabels(v3);
      *(_DWORD *)(v3 + 44) = 100;
      operator new();
    }
    unsigned int v11 = (const CoreML::Specification::V5::TensorValue_RepeatedStrings *)*((void *)a2 + 4);
    unsigned int v13 = *(std::string **)(v3 + 32);
    return CoreML::Specification::V5::TensorValue_RepeatedStrings::MergeFrom(v13, v11);
  }
  return this;
}

void sub_2243B4B84(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406130BDD3);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::TreeEnsembleClassifier::IsInitialized(CoreML::Specification::TreeEnsembleClassifier *this)
{
  return 1;
}

void *CoreML::Specification::TreeEnsembleClassifier::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleClassifier");
}

CoreML::Specification::TreeEnsembleRegressor *CoreML::Specification::TreeEnsembleRegressor::TreeEnsembleRegressor(CoreML::Specification::TreeEnsembleRegressor *this)
{
  *(void *)this = &unk_26D77C998;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_) {
    CoreML::Specification::protobuf_TreeEnsemble_2eproto::InitDefaults(this);
  }
  *((void *)this + 2) = 0;
  *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
  return this;
}

void sub_2243B4C48(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::TreeEnsembleRegressor::~TreeEnsembleRegressor(CoreML::Specification::TreeEnsembleRegressor *this)
{
  *(void *)this = &unk_26D77C998;
  if (this != (CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::TreeEnsembleRegressor::~TreeEnsembleRegressor(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t *CoreML::Specification::TreeEnsembleRegressor::default_instance(CoreML::Specification::TreeEnsembleRegressor *this)
{
  return &CoreML::Specification::_TreeEnsembleRegressor_default_instance_;
}

void CoreML::Specification::TreeEnsembleRegressor::New(CoreML::Specification::TreeEnsembleRegressor *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243B4D94(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::TreeEnsembleRegressor>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleRegressor>);
  }
  return result;
}

uint64_t CoreML::Specification::TreeEnsembleRegressor::Clear(CoreML::Specification::TreeEnsembleRegressor *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

BOOL CoreML::Specification::TreeEnsembleRegressor::MergePartialFromCodedStream(CoreML::Specification::TreeEnsembleRegressor *this, char **a2, unsigned int a3)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2 < a2[1]) {
          break;
        }
        uint64_t v6 = 0;
LABEL_6:
        unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v6);
        unint64_t v7 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
        if ((v7 & 0x100000000) != 0) {
          goto LABEL_7;
        }
LABEL_22:
        if (v7) {
          BOOL v15 = (v7 & 7) == 4;
        }
        else {
          BOOL v15 = 1;
        }
        if (v15) {
          return 1;
        }
        if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v7, a3) & 1) == 0)return 0; {
      }
        }
      uint64_t v6 = *v5;
      if (*v5 < 1) {
        goto LABEL_6;
      }
      *a2 = v5 + 1;
      unint64_t v7 = v6 | 0x100000000;
      if ((v7 & 0x100000000) == 0) {
        goto LABEL_22;
      }
LABEL_7:
      if (v7 >> 3 != 2) {
        break;
      }
      if (v7 != 16) {
        goto LABEL_22;
      }
      unsigned int v13 = *a2;
      if (*a2 >= a2[1])
      {
        int v14 = 0;
      }
      else
      {
        int v14 = *v13;
        if ((*v13 & 0x80000000) == 0)
        {
          *a2 = v13 + 1;
          goto LABEL_35;
        }
      }
      Varint32Fallbacstd::string::size_type k = _tc_google::protobuf::io::CodedInputStream::ReadVarint32Fallback((_tc_google::protobuf::io::CodedInputStream *)a2, v14);
      int v14 = Varint32Fallback;
      if (Varint32Fallback < 0) {
        return 0;
      }
LABEL_35:
      *((_DWORD *)this + 6) = v14;
    }
    if (v7 >> 3 != 1 || v7 != 10) {
      goto LABEL_22;
    }
    int v10 = (CoreML::Specification::TreeEnsembleParameters *)*((void *)this + 2);
    if (!v10) {
      operator new();
    }
    unsigned int v11 = *a2;
    if (*a2 >= a2[1] || *v11 < 0)
    {
      int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
      if (VarintSizeAsIntFallback < 0) {
        return 0;
      }
    }
    else
    {
      int VarintSizeAsIntFallback = *v11;
      *a2 = v11 + 1;
    }
    unint64_t v16 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
    if ((v16 & 0x8000000000000000) != 0) {
      break;
    }
    int v18 = v16;
    BOOL result = CoreML::Specification::TreeEnsembleParameters::MergePartialFromCodedStream(v10, a2, v17);
    if (!result) {
      return result;
    }
  }
  while (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v18));
  return 0;
}

void sub_2243B4FD0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40CFA7A0FDLL);
  _Unwind_Resume(a1);
}

uint64_t *CoreML::Specification::TreeEnsembleRegressor::SerializeWithCachedSizes(uint64_t *this, _tc_google::protobuf::io::CodedOutputStream *a2, uint64_t a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (this != &CoreML::Specification::_TreeEnsembleRegressor_default_instance_)
  {
    uint64_t v6 = this[2];
    if (v6) {
      this = (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
    }
  }
  signed int v7 = *((_DWORD *)v5 + 6);
  if (v7)
  {
    return (uint64_t *)_tc_google::protobuf::internal::WireFormatLite::WriteInt32(2, v7, a2, a4);
  }
  return this;
}

CoreML::Specification::TreeEnsembleParameters *CoreML::Specification::TreeEnsembleRegressor::ByteSizeLong(CoreML::Specification::TreeEnsembleRegressor *this)
{
  if (this == (CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = (CoreML::Specification::TreeEnsembleParameters *)*((void *)this + 2);
    if (result)
    {
      uint64_t v3 = CoreML::Specification::TreeEnsembleParameters::ByteSizeLong(result);
      BOOL result = (CoreML::Specification::TreeEnsembleParameters *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
    }
  }
  int v4 = *((_DWORD *)this + 6);
  if (v4)
  {
    if (v4 < 0) {
      uint64_t v5 = 11;
    }
    else {
      uint64_t v5 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    BOOL result = (CoreML::Specification::TreeEnsembleParameters *)((char *)result + v5);
  }
  *((_DWORD *)this + 7) = result;
  return result;
}

std::string *CoreML::Specification::TreeEnsembleRegressor::MergeFrom(std::string *this, const CoreML::Specification::TreeEnsembleRegressor *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (a2 != (const CoreML::Specification::TreeEnsembleRegressor *)&CoreML::Specification::_TreeEnsembleRegressor_default_instance_
    && v5 != 0)
  {
    signed int v7 = (unint64_t *)v3->__r_.__value_.__r.__words[2];
    if (!v7) {
      operator new();
    }
    if (v5) {
      uint64_t v8 = (const CoreML::Specification::TreeEnsembleParameters *)*((void *)a2 + 2);
    }
    else {
      uint64_t v8 = (const CoreML::Specification::TreeEnsembleParameters *)&CoreML::Specification::_TreeEnsembleParameters_default_instance_;
    }
    this = (std::string *)CoreML::Specification::TreeEnsembleParameters::MergeFrom(v7, v8);
  }
  int v9 = *((_DWORD *)a2 + 6);
  if (v9) {
    LODWORD(v3[1].__r_.__value_.__l.__data_) = v9;
  }
  return this;
}

void sub_2243B51B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40CFA7A0FDLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::TreeEnsembleRegressor::IsInitialized(CoreML::Specification::TreeEnsembleRegressor *this)
{
  return 1;
}

void *CoreML::Specification::TreeEnsembleRegressor::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.TreeEnsembleRegressor");
}

void CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::New(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *this)
{
}

void CoreML::Specification::TreeEnsembleParameters_TreeNode::New(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
}

uint64_t CoreML::Specification::TreeEnsembleParameters_TreeNode::GetCachedSize(CoreML::Specification::TreeEnsembleParameters_TreeNode *this)
{
  return *((unsigned int *)this + 26);
}

void CoreML::Specification::TreeEnsembleParameters::New(CoreML::Specification::TreeEnsembleParameters *this)
{
}

void CoreML::Specification::TreeEnsembleClassifier::New(CoreML::Specification::TreeEnsembleClassifier *this)
{
}

void CoreML::Specification::TreeEnsembleRegressor::New(CoreML::Specification::TreeEnsembleRegressor *this)
{
}

uint64_t _tc_google::protobuf::internal::RepeatedPtrFieldBase::Clear<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v4 = *(void *)(v3 + 8 * v2);
      uint64_t v5 = *(unsigned int *)(v4 + 24);
      if ((int)v5 >= 1)
      {
        uint64_t v6 = (uint64_t *)(*(void *)(v4 + 32) + 8);
        do
        {
          uint64_t v7 = *v6++;
          *(void *)(v7 + 16) = 0;
          *(void *)(v7 + 24) = 0;
          --v5;
        }
        while (v5);
        *(_DWORD *)(v4 + 24) = 0;
      }
      ++v2;
      *(_OWORD *)(v4 + 88) = 0uLL;
      *(_OWORD *)(v4 + 72) = 0uLL;
      *(_OWORD *)(v4 + 56) = 0uLL;
      *(_OWORD *)(v4 + 4CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 0uLL;
    }
    while (v2 != v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    unint64_t v12 = a2;
    do
    {
      int v14 = *v11++;
      unsigned int v13 = v14;
      BOOL v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    BOOL v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo **)&a2[a5];
    do
    {
      int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::TreeEnsembleParameters_TreeNode_EvaluationInfo(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_2243B53F0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo>::Merge(CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo *a1, std::string *this)
{
  return CoreML::Specification::TreeEnsembleParameters_TreeNode_EvaluationInfo::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleParameters>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

std::string *_tc_google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::TreeEnsembleParameters_TreeNode>::TypeHandler>(std::string *result, std::string **a2, CoreML::Specification::TreeEnsembleParameters_TreeNode **a3, unsigned int a4, unsigned int a5)
{
  int v9 = (_tc_google::protobuf::Arena **)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    unsigned int v11 = a3;
    unint64_t v12 = a2;
    do
    {
      int v14 = *v11++;
      unsigned int v13 = v14;
      BOOL v15 = *v12++;
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    int v18 = *v9;
    BOOL v19 = &a3[a5];
    unint64_t v20 = (CoreML::Specification::TreeEnsembleParameters_TreeNode **)&a2[a5];
    do
    {
      int v21 = *v19;
      if (!v18) {
        operator new();
      }
      CoreML::Specification::TreeEnsembleParameters_TreeNode::TreeEnsembleParameters_TreeNode(Aligned);
      _tc_google::protobuf::Arena::AddListNode(v18, Aligned, (void (*)(void *))_tc_google::protobuf::internal::arena_destruct_object<CoreML::Specification::TreeEnsembleParameters_TreeNode>);
      BOOL result = _tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode>::Merge(v21, (std::string *)Aligned);
      *v20++ = Aligned;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

void sub_2243B555C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40FA1F30E5);
  _Unwind_Resume(a1);
}

std::string *_tc_google::protobuf::internal::GenericTypeHandler<CoreML::Specification::TreeEnsembleParameters_TreeNode>::Merge(CoreML::Specification::TreeEnsembleParameters_TreeNode *a1, std::string *this)
{
  return CoreML::Specification::TreeEnsembleParameters_TreeNode::MergeFrom(this, a1);
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleClassifier>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::TreeEnsembleRegressor>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_2243B5664(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2243B5688(_Unwind_Exception *a1)
{
}

float turi::variant_converter<float,void>::get(uint64_t a1, int *a2)
{
  void v22[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v22, 0, 13);
  uint64_t v2 = turi::variant_get_ref<turi::flexible_type>(a2);
  if ((atomic_ullong **)v2 != v22)
  {
    uint64_t v4 = *(atomic_ullong **)v2;
    *(atomic_ullong **)((char *)v22 + 5) = *(atomic_ullong **)(v2 + 5);
    v22[0] = v4;
    BYTE4(v22[1]) = *(unsigned char *)(v2 + 12);
    if (BYTE4(v22[1]) <= 9u && ((1 << SBYTE4(v22[1])) & 0x33C) != 0) {
      atomic_fetch_add(v22[0], 1uLL);
    }
  }
  v20[0] = 0.0;
  turi::flexible_type_internals::ft_converter<2>::get<float>(v20, (turi::flexible_type_internals *)v22, v3);
  float v6 = v20[0];
  switch(BYTE4(v22[1]))
  {
    case 2:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = v22[0];
        if (v22[0])
        {
          if (*((char *)v22[0] + 31) < 0) {
            operator delete(*((void **)v22[0] + 1));
          }
          uint64_t v8 = v7;
          uint64_t v9 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v16 = v22[0];
        if (v22[0])
        {
          int v17 = (void *)v22[0][1];
          if (v17)
          {
            v22[0][2] = (atomic_ullong)v17;
            operator delete(v17);
          }
          uint64_t v8 = v16;
          uint64_t v9 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v21);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v22[0];
        if (v22[0])
        {
          v21[0] = (void **)(v22[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v21);
LABEL_33:
          uint64_t v8 = v10;
          uint64_t v9 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v18 = v22[0];
        if (v22[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v22[0] + 2);
          uint64_t v8 = v18;
          unsigned int v15 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v22[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v11 = v22[0];
        if (v22[0])
        {
          unint64_t v12 = (void *)v22[0][6];
          if (v12)
          {
            v22[0][7] = (atomic_ullong)v12;
            operator delete(v12);
          }
          unsigned int v13 = (void *)v11[3];
          if (v13)
          {
            void v11[4] = (atomic_ullong)v13;
            operator delete(v13);
          }
          int v14 = (std::__shared_weak_count *)v11[2];
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v8 = v11;
          unsigned int v15 = 2071181815;
LABEL_37:
          uint64_t v9 = v15 | 0x1030C4000000000;
LABEL_38:
          MEMORY[0x22A614FA0](v8, v9);
        }
      }
      break;
    default:
      return v6;
  }
  return v6;
}

void sub_2243B5934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 44))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 56);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      int v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v26 = *(void **)(v18 - 56);
      if (!v26) {
        goto LABEL_27;
      }
      int v27 = (void *)v26[1];
      if (v27)
      {
        _OWORD v26[2] = v27;
        operator delete(v27);
      }
      int v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v23 = *(void **)(v18 - 56);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v23 = *(void **)(v18 - 56);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      int v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 56);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      int v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 56), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v24 = *(void **)(v18 - 56);
      if (!v24) {
        goto LABEL_27;
      }
      int v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

float *turi::flexible_type_internals::ft_converter<2>::get<float>(float *result, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12))
  {
    if (*((unsigned char *)this + 12) != 1) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"numeric", a3);
    }
    float v3 = *(double *)this;
  }
  else
  {
    float v3 = (float)*(uint64_t *)this;
  }
  *BOOL result = v3;
  return result;
}

void sub_2243B5C70()
{
}

void turi::flexible_type_internals::ft_converter<2>::get<float>(float &,turi::flexible_type const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", 117);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  float v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/data/flexible_type/flexible_type_converter.hpp", "operator()", 222, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  void turi::flexible_type_internals::ft_converter<2>::get<float>(float &,turi::flexible_type const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2243B5D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sframe::column_name(turi::sframe *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 5);
  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 6) - v3) >> 3) <= a2) {
    turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = (long long *)(v3 + 24 * a2);
  if (*((char *)v4 + 23) < 0)
  {
    float v6 = *(const std::string::value_type **)v4;
    std::string::size_type v7 = *((void *)v4 + 1);
    std::string::__init_copy_ctor_external(a3, v6, v7);
  }
  else
  {
    long long v5 = *v4;
    a3->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
  }
}

void std::vector<Eigen::Matrix<double,-1,1,0,-1,1>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        float v6 = (void *)*((void *)v4 - 2);
        v4 -= 16;
        free(v6);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long> const*,std::pair<std::string,unsigned long>*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v12 = this;
  unsigned int v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  std::string v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    float v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v8 = v13;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        uint64_t v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((void *)v6 + 3);
      v6 += 2;
      uint64_t v4 = (std::string *)((char *)v8 + 32);
      unsigned int v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,unsigned long>>,std::pair<std::string,unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_2243B603C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void turi::add_metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = *(uint64_t **)(v3 + 104);
  if (!v4) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "author");
  uint64_t v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  uint64_t v6 = v5;
  if (SHIBYTE(v50) < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      goto LABEL_29;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&v47, "author");
    long long v7 = (turi::flexible_type_impl *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v47.__r_.__value_.__l.__data_);
    switch(*((unsigned char *)v7 + 12))
    {
      case 0:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
        goto LABEL_18;
      case 1:
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::ostream::operator<<();
        std::stringbuf::str();
LABEL_18:
        __p[0] = *(void **)MEMORY[0x263F8C2B8];
        uint64_t v10 = *(void *)(MEMORY[0x263F8C2B8] + 72);
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
        uint64_t v50 = v10;
        uint64_t v51 = MEMORY[0x263F8C318] + 16;
        if (v53 < 0) {
          operator delete(v52);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x22A614E30](v54);
        goto LABEL_25;
      case 2:
        uint64_t v8 = *(void *)v7;
        if (*(char *)(*(void *)v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
        }
        else
        {
          long long v9 = *(_OWORD *)(v8 + 8);
          v48.__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
          *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v9;
        }
        goto LABEL_25;
      case 3:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v7 + 8));
        goto LABEL_25;
      case 4:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v7 + 8));
        goto LABEL_25;
      case 5:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v7 + 8));
        goto LABEL_25;
      case 6:
        turi::flexible_type_impl::get_string_visitor::operator()(v7, &v48);
        goto LABEL_25;
      case 7:
        memset(&v48, 0, sizeof(v48));
        goto LABEL_25;
      case 8:
        turi::flexible_type_impl::get_string_visitor::operator()();
        goto LABEL_25;
      case 9:
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v7 + 8));
LABEL_25:
        _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(v4 + 8, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
        goto LABEL_29;
      default:
LABEL_149:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
  if (v5) {
    goto LABEL_9;
  }
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(__p, "short_description");
  uint64_t v11 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  uint64_t v12 = v11;
  if (SHIBYTE(v50) < 0)
  {
    operator delete(__p[0]);
    if (!v12) {
      goto LABEL_53;
    }
  }
  else if (!v11)
  {
    goto LABEL_53;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "short_description");
  unsigned int v13 = (turi::flexible_type_impl *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v47.__r_.__value_.__l.__data_);
  switch(*((unsigned char *)v13 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_42;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_42:
      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v16 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v50 = v16;
      uint64_t v51 = MEMORY[0x263F8C318] + 16;
      if (v53 < 0) {
        operator delete(v52);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v54);
      break;
    case 2:
      uint64_t v14 = *(void *)v13;
      if (*(char *)(*(void *)v13 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v14 + 8), *(void *)(v14 + 16));
      }
      else
      {
        long long v15 = *(_OWORD *)(v14 + 8);
        v48.__r_.__value_.__r.__words[2] = *(void *)(v14 + 24);
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v13 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v13 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v13 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v13, &v48);
      break;
    case 7:
      memset(&v48, 0, sizeof(v48));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v13 + 8));
      break;
    default:
      goto LABEL_149;
  }
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(v4 + 6, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
LABEL_53:
  std::string::basic_string[abi:ne180100]<0>(__p, "version_string");
  uint64_t v17 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  uint64_t v18 = v17;
  if (SHIBYTE(v50) < 0)
  {
    operator delete(__p[0]);
    if (!v18) {
      goto LABEL_77;
    }
  }
  else if (!v17)
  {
    goto LABEL_77;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "version_string");
  BOOL v19 = (turi::flexible_type_impl *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v47.__r_.__value_.__l.__data_);
  switch(*((unsigned char *)v19 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_66;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_66:
      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v22 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v50 = v22;
      uint64_t v51 = MEMORY[0x263F8C318] + 16;
      if (v53 < 0) {
        operator delete(v52);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v54);
      break;
    case 2:
      uint64_t v20 = *(void *)v19;
      if (*(char *)(*(void *)v19 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v20 + 8), *(void *)(v20 + 16));
      }
      else
      {
        long long v21 = *(_OWORD *)(v20 + 8);
        v48.__r_.__value_.__r.__words[2] = *(void *)(v20 + 24);
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v19 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v19 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v19 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v19, &v48);
      break;
    case 7:
      memset(&v48, 0, sizeof(v48));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v19 + 8));
      break;
    default:
      goto LABEL_149;
  }
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(v4 + 7, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
LABEL_77:
  std::string::basic_string[abi:ne180100]<0>(__p, "license");
  uint64_t v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  uint64_t v24 = v23;
  if (SHIBYTE(v50) < 0)
  {
    operator delete(__p[0]);
    if (!v24) {
      goto LABEL_101;
    }
  }
  else if (!v23)
  {
    goto LABEL_101;
  }
  std::string::basic_string[abi:ne180100]<0>(&v47, "license");
  unsigned int v25 = (turi::flexible_type_impl *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&v47.__r_.__value_.__l.__data_);
  switch(*((unsigned char *)v25 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_90;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_90:
      __p[0] = *(void **)MEMORY[0x263F8C2B8];
      uint64_t v28 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v50 = v28;
      uint64_t v51 = MEMORY[0x263F8C318] + 16;
      if (v53 < 0) {
        operator delete(v52);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v54);
      break;
    case 2:
      uint64_t v26 = *(void *)v25;
      if (*(char *)(*(void *)v25 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v26 + 8), *(void *)(v26 + 16));
      }
      else
      {
        long long v27 = *(_OWORD *)(v26 + 8);
        v48.__r_.__value_.__r.__words[2] = *(void *)(v26 + 24);
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v27;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v25 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v25 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v25 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(v25, &v48);
      break;
    case 7:
      memset(&v48, 0, sizeof(v48));
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v25 + 8));
      break;
    default:
      goto LABEL_149;
  }
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(v4 + 9, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v48);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
LABEL_101:
  std::string::basic_string[abi:ne180100]<0>(__p, "user_defined");
  uint64_t v29 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)__p);
  uint64_t v30 = v29;
  if (SHIBYTE(v50) < 0)
  {
    operator delete(__p[0]);
    if (!v30) {
      return;
    }
  }
  else if (!v29)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "user_defined");
  uint64_t v31 = *(void *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)__p);
  if (SHIBYTE(v50) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v32 = *(unsigned char **)(v31 + 8);
  BOOL v33 = *(unsigned char **)(v31 + 16);
  if (v32 != v33)
  {
    uint64_t v45 = *(void **)(MEMORY[0x263F8C2B8] + 64);
    int v46 = (void *)*MEMORY[0x263F8C2B8];
    uint64_t v44 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    uint64_t v34 = (turi::flexible_type_impl *)(v32 + 16);
    while (2)
    {
      switch(*((unsigned char *)v34 + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_118;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_118:
          __p[0] = v46;
          *(void **)((char *)__p + *((void *)v46 - 3)) = v45;
          uint64_t v50 = v44;
          uint64_t v51 = MEMORY[0x263F8C318] + 16;
          if (v53 < 0) {
            operator delete(v52);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v54);
          break;
        case 2:
          uint64_t v35 = *(void *)v34;
          if (*(char *)(*(void *)v34 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v35 + 8), *(void *)(v35 + 16));
          }
          else
          {
            long long v36 = *(_OWORD *)(v35 + 8);
            v48.__r_.__value_.__r.__words[2] = *(void *)(v35 + 24);
            *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v36;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v34 + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v34 + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v34 + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v34, &v48);
          break;
        case 7:
          memset(&v48, 0, sizeof(v48));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v34 + 8));
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v37 = (turi::flexible_type_impl *)((char *)v34 - 16);
      switch(*((unsigned char *)v34 - 4))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_134;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_134:
          __p[0] = v46;
          *(void **)((char *)__p + *((void *)v46 - 3)) = v45;
          uint64_t v50 = v44;
          uint64_t v51 = MEMORY[0x263F8C318] + 16;
          if (v53 < 0) {
            operator delete(v52);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](v54);
          goto LABEL_141;
        case 2:
          uint64_t v38 = *(void *)v37;
          if (*(char *)(*(void *)v37 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v38 + 8), *(void *)(v38 + 16));
          }
          else
          {
            long long v39 = *(_OWORD *)(v38 + 8);
            v47.__r_.__value_.__r.__words[2] = *(void *)(v38 + 24);
            *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v39;
          }
          goto LABEL_141;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v37 + 8));
          goto LABEL_141;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (uint64_t *)(*(void *)v37 + 8));
          goto LABEL_141;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v37 + 8));
          goto LABEL_141;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(v37, &v47);
          goto LABEL_141;
        case 7:
          memset(&v47, 0, sizeof(v47));
          goto LABEL_141;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          goto LABEL_141;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, (void *)(*(void *)v37 + 8));
LABEL_141:
          long long v40 = _tc_google::protobuf::Map<std::string,std::string>::operator[]((uint64_t)(v4 + 3), &v47);
          int v41 = v40;
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40->__r_.__value_.__l.__data_);
          }
          long long v42 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
          v41->__r_.__value_.__r.__words[2] = v48.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
          *((unsigned char *)&v48.__r_.__value_.__s + 2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0;
          v48.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v47.__r_.__value_.__l.__data_);
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v48.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v43 = (char *)v34 + 16;
          uint64_t v34 = (turi::flexible_type_impl *)((char *)v34 + 32);
          if (v43 == v33) {
            return;
          }
          continue;
        default:
          goto LABEL_149;
      }
    }
  }
}

void sub_2243B729C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *turi::variant_converter<std::shared_ptr<turi::supervised::supervised_learning_model_base>,void>::get@<X0>(int *a1@<X1>, void *a2@<X8>)
{
  uint64_t v8 = &v7;
  uint64_t has_fallback_type = (void **)boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::get_visitor<std::shared_ptr<turi::model_base> const>,false>,void const*,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(*a1, *a1 ^ (*a1 >> 31), (uint64_t)&v8, (uint64_t)(a1 + 2));
  uint64_t v4 = has_fallback_type;
  if (!has_fallback_type)
  {
    uint64_t v8 = (char *)&unk_26D754360;
    boost::throw_exception<boost::bad_get>();
  }
  BOOL result = *has_fallback_type;
  if (*v4
  {
    uint64_t v6 = (atomic_ullong *)v4[1];
    *a2 = result;
    a2[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_2243B75B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<std::shared_ptr<turi::model_base>>(v10);
}

void sub_2243B75D4(_Unwind_Exception *a1)
{
}

void turi::export_linear_regression_as_model_asset(void *a1, uint64_t *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(const std::string **)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  CoreML::Pipeline::Regressor(v4, &v31, v32);
  std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>((const CoreML::Model *)v32, &v33);
  CoreML::Pipeline::~Pipeline((CoreML::Pipeline *)v32);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = v33;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  uint64_t v29 = (uint64_t *)*a1;
  uint64_t v30 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::setup_pipeline_from_mldata(v5, &v29);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v7 = *(void *)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  CoreML::LinearModel::LinearModel(v32, v7, &v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  memset(&v31, 0, sizeof(v31));
  uint64_t v8 = (std::__shared_weak_count *)a1[1];
  long long v27 = (uint64_t *)*a1;
  uint64_t v28 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::supervised::get_one_hot_encoded_coefs(a2, &v27, (uint64_t)&v31);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v9 = *(void *)(v31.__r_.__value_.__l.__size_ - 8);
  uint64_t v10 = (uint64_t *)operator new(8uLL);
  long long v21 = v10;
  uint64_t *v10 = v9;
  uint64_t v22 = v10 + 1;
  uint64_t v23 = v10 + 1;
  CoreML::LinearModel::setOffsets((uint64_t)v32, &v21, (CoreML::Result *)v24);
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  v31.__r_.__value_.__l.__size_ -= 8;
  memset(&v36, 0, sizeof(v36));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v36, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_, (uint64_t)(v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]) >> 3);
  long long v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v34 = (void **)&v15;
  char v35 = 0;
  long long v15 = operator new(0x18uLL);
  uint64_t v16 = v15;
  uint64_t v17 = v15 + 3;
  uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double> const*,std::vector<double> const*,std::vector<double>*>((uint64_t)&v17, (uint64_t)&v36, (uint64_t)&v37, v15);
  CoreML::LinearModel::setWeights((uint64_t)v32, (uint64_t *)&v15, (CoreML::Result *)v18);
  if (v20 < 0) {
    operator delete(__p);
  }
  uint64_t v34 = (void **)&v15;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v34);
  if (v36.__r_.__value_.__r.__words[0])
  {
    v36.__r_.__value_.__l.__size_ = v36.__r_.__value_.__r.__words[0];
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "__vectorized_features__");
  uint64_t v11 = *(void *)(*a1 + 64);
  uint64_t v12 = operator new(8uLL);
  v13[0] = v12;
  void *v12 = v11;
  v13[1] = v12 + 1;
  void v13[2] = v12 + 1;
  CoreML::FeatureType::Array((uint64_t)v13, &v14);
  CoreML::Model::addInput((uint64_t)v32, &v36, (CoreML::FeatureType *)&v14);
}

void sub_2243B79EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  uint64_t v38 = *(void **)(v36 - 160);
  if (v38)
  {
    *(void *)(v36 - 152) = v38;
    operator delete(v38);
  }
  CoreML::Model::~Model((CoreML::Model *)(v36 - 136));
  long long v39 = *(std::__shared_weak_count **)(v36 - 104);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(a1);
}

void turi::supervised::get_one_hot_encoded_coefs(uint64_t *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = (*a2)[3];
  uint64_t v4 = *(void *)(v3 + 64);
  LODWORD(vstd::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = *(_DWORD *)(v3 + 24);
  BOOL v5 = v3 > 6;
  int v6 = (1 << v3) & 0x4A;
  if (v5 || v6 == 0) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v4 - 1;
  }
  uint64_t v62 = v8;
  if (v8)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = a3 + 16;
    do
    {
      uint64_t v63 = v12;
      uint64_t v15 = **a2;
      if ((*a2)[1] != v15)
      {
        unint64_t v16 = 0;
        do
        {
          uint64_t v17 = (uint64_t *)(v15 + 16 * v16);
          uint64_t v19 = *v17;
          uint64_t v18 = (std::__shared_weak_count *)v17[1];
          if (v18)
          {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            unsigned int v20 = *(_DWORD *)(v19 + 24);
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          else
          {
            unsigned int v20 = *(_DWORD *)(v19 + 24);
          }
          if (v20 > 6 || ((1 << v20) & 0x4A) == 0)
          {
            unint64_t i = 0;
            goto LABEL_53;
          }
          uint64_t v23 = *(void **)(a3 + 8);
          unint64_t v22 = *(void *)(a3 + 16);
          if ((unint64_t)v23 >= v22)
          {
            unsigned int v25 = *(void **)a3;
            uint64_t v26 = ((uint64_t)v23 - *(void *)a3) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              goto LABEL_76;
            }
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14, v29);
              unsigned int v25 = *(void **)a3;
              uint64_t v23 = *(void **)(a3 + 8);
            }
            else
            {
              uint64_t v30 = 0;
            }
            unint64_t v32 = &v30[8 * v26];
            *(void *)unint64_t v32 = 0;
            uint64_t v24 = v32 + 8;
            while (v23 != v25)
            {
              uint64_t v33 = *--v23;
              *((void *)v32 - 1) = v33;
              v32 -= 8;
            }
            *(void *)a3 = v32;
            *(void *)(a3 + 8) = v24;
            *(void *)(a3 + 16) = &v30[8 * v29];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *uint64_t v23 = 0;
            uint64_t v24 = v23 + 1;
          }
          *(void *)(a3 + 8) = v24;
          for (unint64_t i = 1; ; ++i)
          {
LABEL_53:
            int v46 = (uint64_t *)(**a2 + 16 * v16);
            uint64_t v48 = *v46;
            std::string v47 = (std::__shared_weak_count *)v46[1];
            if (v47)
            {
              atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v49 = *(void *)(v48 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            }
            else
            {
              unint64_t v49 = *(void *)(v48 + 64);
            }
            if (i >= v49) {
              break;
            }
            uint64_t v34 = *a1;
            uint64_t v36 = *(void **)(a3 + 8);
            unint64_t v35 = *(void *)(a3 + 16);
            if ((unint64_t)v36 >= v35)
            {
              uint64_t v38 = *(void **)a3;
              uint64_t v39 = ((uint64_t)v36 - *(void *)a3) >> 3;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 61) {
                goto LABEL_76;
              }
              uint64_t v41 = v35 - (void)v38;
              if (v41 >> 2 > v40) {
                unint64_t v40 = v41 >> 2;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42)
              {
                uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14, v42);
                uint64_t v38 = *(void **)a3;
                uint64_t v36 = *(void **)(a3 + 8);
              }
              else
              {
                uint64_t v43 = 0;
              }
              uint64_t v44 = &v43[8 * v39];
              *(void *)uint64_t v44 = *(void *)(v34 + 8 * v13);
              uint64_t v37 = v44 + 8;
              while (v36 != v38)
              {
                uint64_t v45 = *--v36;
                *((void *)v44 - 1) = v45;
                v44 -= 8;
              }
              *(void *)a3 = v44;
              *(void *)(a3 + 8) = v37;
              *(void *)(a3 + 16) = &v43[8 * v42];
              if (v38) {
                operator delete(v38);
              }
            }
            else
            {
              void *v36 = *(void *)(v34 + 8 * v13);
              uint64_t v37 = v36 + 1;
            }
            *(void *)(a3 + 8) = v37;
            ++v13;
          }
          ++v16;
          uint64_t v15 = **a2;
        }
        while (v16 < ((*a2)[1] - v15) >> 4);
      }
      uint64_t v50 = *a1;
      uint64_t v52 = *(void **)(a3 + 8);
      unint64_t v51 = *(void *)(a3 + 16);
      if ((unint64_t)v52 >= v51)
      {
        long long v54 = *(void **)a3;
        uint64_t v55 = ((uint64_t)v52 - *(void *)a3) >> 3;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61) {
LABEL_76:
        }
          std::vector<float>::__throw_length_error[abi:ne180100]();
        uint64_t v57 = v51 - (void)v54;
        if (v57 >> 2 > v56) {
          unint64_t v56 = v57 >> 2;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58)
        {
          uint64_t v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v14, v58);
          long long v54 = *(void **)a3;
          uint64_t v52 = *(void **)(a3 + 8);
        }
        else
        {
          uint64_t v59 = 0;
        }
        long long v60 = &v59[8 * v55];
        *(void *)long long v60 = *(void *)(v50 + 8 * v13);
        char v53 = v60 + 8;
        while (v52 != v54)
        {
          uint64_t v61 = *--v52;
          *((void *)v60 - 1) = v61;
          v60 -= 8;
        }
        *(void *)a3 = v60;
        *(void *)(a3 + 8) = v53;
        *(void *)(a3 + 16) = &v59[8 * v58];
        if (v54) {
          operator delete(v54);
        }
      }
      else
      {
        *uint64_t v52 = *(void *)(v50 + 8 * v13);
        char v53 = v52 + 1;
      }
      ++v13;
      *(void *)(a3 + 8) = v53;
      uint64_t v12 = v63 + 1;
    }
    while (v63 + 1 != v62);
  }
}

void turi::export_linear_svm_as_model_asset(void *a1, uint64_t *a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(const void ***)(*a1 + 24);
  if (*((char *)v4 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    size_t v5 = (size_t)v4[1];
  }
  int v6 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v5 + 11);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v6 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*((char *)v4 + 23) >= 0) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = *v4;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "Probability");
  uint64_t v8 = *(const std::string **)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v51, "");
  CoreML::Pipeline::Classifier(v8, &v54, &v51, v52);
  std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>((const CoreML::Model *)v52, &v53);
  CoreML::Pipeline::~Pipeline((CoreML::Pipeline *)v52);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = v53;
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  unint64_t v49 = (uint64_t *)*a1;
  uint64_t v50 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::setup_pipeline_from_mldata(v9, &v49);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  uint64_t v11 = *(void *)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v51, "Linear SVM");
  CoreML::LogisticModel::LogisticModel(v52, v11, &v54, &v51);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  memset(&v51, 0, sizeof(v51));
  uint64_t v12 = (std::__shared_weak_count *)a1[1];
  std::string v47 = (uint64_t *)*a1;
  uint64_t v48 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::supervised::get_one_hot_encoded_coefs(a2, &v47, (uint64_t)&v51);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  std::vector<std::string>::size_type v13 = *(void *)(*(void *)(*a1 + 24) + 64);
  uint64_t v14 = *(void *)(v51.__r_.__value_.__l.__size_ - 8);
  uint64_t v15 = (char *)operator new(8uLL);
  v43.__begin_ = (std::vector<std::string>::pointer)v15;
  *(void *)uint64_t v15 = v14;
  v43.__end_ = (std::vector<std::string>::pointer)(v15 + 8);
  v43.__end_cap_.__value_ = (std::string *)(v15 + 8);
  CoreML::LogisticModel::setOffsets((uint64_t)v52, (uint64_t **)&v43, (CoreML::Result *)v44);
  if (v46 < 0) {
    operator delete(__p);
  }
  if (v43.__begin_)
  {
    v43.__end_ = v43.__begin_;
    operator delete(v43.__begin_);
  }
  v51.__r_.__value_.__l.__size_ -= 8;
  long long v56 = 0uLL;
  uint64_t v57 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v56, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_, (uint64_t)(v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]) >> 3);
  memset(&v43, 0, sizeof(v43));
  *(void *)&long long v55 = &v43;
  BYTE8(v55) = 0;
  v43.__begin_ = (std::vector<std::string>::pointer)operator new(0x18uLL);
  v43.__end_ = v43.__begin_;
  v43.__end_cap_.__value_ = v43.__begin_ + 1;
  v43.__end_ = (std::vector<std::string>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double> const*,std::vector<double> const*,std::vector<double>*>((uint64_t)&v43.__end_cap_, (uint64_t)&v56, (uint64_t)&v58, v43.__begin_->__r_.__value_.__r.__words);
  CoreML::LogisticModel::setWeights((uint64_t)v52, (uint64_t *)&v43, (CoreML::Result *)v40);
  if (v42 < 0) {
    operator delete(v41);
  }
  *(void *)&long long v55 = &v43;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  if ((void)v56)
  {
    *((void *)&v56 + 1) = v56;
    operator delete((void *)v56);
  }
  CoreML::FeatureType::Double((uint64_t *)&v56);
  CoreML::FeatureType::Double((uint64_t *)&v55);
  if (*(unsigned char *)(*(void *)(*a1 + 24) + 28) == 2)
  {
    std::vector<std::string>::vector(&v43, v13);
    if (v13)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      do
      {
        std::string::operator=(&v43.__begin_[v23], (const std::string *)(*(void *)(*(void *)(*(void *)(*(void *)(*a1 + 24) + 32) + 80) + v24) + 8));
        v24 += 16;
        ++v23;
        --v13;
      }
      while (v13);
    }
    CoreML::LogisticModel::setClassNames((uint64_t)v52, &v43, (CoreML::Result *)v33);
    if (v35 < 0) {
      operator delete(v34);
    }
    CoreML::FeatureType::String((uint64_t *)&v36);
    long long v25 = v36;
    long long v36 = 0uLL;
    uint64_t v26 = (std::__shared_weak_count *)*((void *)&v56 + 1);
    long long v56 = v25;
    if (v26)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      if (*((void *)&v36 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
      }
    }
    CoreML::FeatureType::Dictionary(2, (uint64_t *)&v36);
    long long v27 = v36;
    long long v36 = 0uLL;
    uint64_t v28 = (std::__shared_weak_count *)*((void *)&v55 + 1);
    long long v55 = v27;
    if (v28)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      if (*((void *)&v36 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
      }
    }
    *(void *)&long long v36 = &v43;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  }
  else
  {
    if (*(unsigned char *)(*(void *)(*a1 + 24) + 28)) {
      turi::export_linear_svm_as_model_asset(std::shared_ptr<turi::ml_metadata> const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
    }
    std::vector<long long>::vector(&v43, v13);
    if (v13)
    {
      unint64_t v16 = *(std::string::size_type **)(*(void *)(*(void *)(*a1 + 24) + 32) + 80);
      std::vector<std::string>::pointer begin = v43.__begin_;
      do
      {
        std::string::size_type v18 = *v16;
        v16 += 2;
        begin->__r_.__value_.__r.__words[0] = v18;
        std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)((char *)begin + 8);
        --v13;
      }
      while (v13);
    }
    CoreML::LogisticModel::setClassNames((uint64_t)v52, (uint64_t *)&v43, (CoreML::Result *)v37);
    if (v39 < 0) {
      operator delete(v38);
    }
    CoreML::FeatureType::Int64((uint64_t *)&v36);
    long long v19 = v36;
    long long v36 = 0uLL;
    unsigned int v20 = (std::__shared_weak_count *)*((void *)&v56 + 1);
    long long v56 = v19;
    if (v20)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      if (*((void *)&v36 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
      }
    }
    CoreML::FeatureType::Dictionary(1, (uint64_t *)&v36);
    long long v21 = v36;
    long long v36 = 0uLL;
    unint64_t v22 = (std::__shared_weak_count *)*((void *)&v55 + 1);
    long long v55 = v21;
    if (v22)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (*((void *)&v36 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
      }
    }
    if (v43.__begin_)
    {
      v43.__end_ = v43.__begin_;
      operator delete(v43.__begin_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v43, "__vectorized_features__");
  uint64_t v29 = *(void *)(*a1 + 64);
  uint64_t v30 = operator new(8uLL);
  v31[0] = v30;
  void *v30 = v29;
  v31[1] = v30 + 1;
  v31[2] = v30 + 1;
  CoreML::FeatureType::Array((uint64_t)v31, &v32);
  CoreML::Model::addInput((uint64_t)v52, (const std::string *)&v43, (CoreML::FeatureType *)&v32);
}

void sub_2243B860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t p_p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p)
{
  p_p = (uint64_t)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  uint64_t v63 = *(std::__shared_weak_count **)(v61 - 104);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  long long v64 = *(std::__shared_weak_count **)(v61 - 88);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  char v65 = *(void **)(v61 - 200);
  if (v65)
  {
    *(void *)(v61 - 192) = v65;
    operator delete(v65);
  }
  CoreML::Model::~Model((CoreML::Model *)(v61 - 176));
  std::string v66 = *(std::__shared_weak_count **)(v61 - 144);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  if (*(char *)(v61 - 113) < 0) {
    operator delete(*(void **)(v61 - 136));
  }
  _Unwind_Resume(a1);
}

void turi::export_logistic_model_as_model_asset(void *a1, uint64_t *a2)
{
  uint64_t v4 = *(const void ***)(*a1 + 24);
  if (*((char *)v4 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)v4 + 23);
  }
  else {
    size_t v5 = (size_t)v4[1];
  }
  std::string::basic_string[abi:ne180100]((uint64_t)&v93, v5 + 11);
  if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v6 = &v93;
  }
  else {
    int v6 = (std::string *)v93.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*((char *)v4 + 23) >= 0) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = *v4;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "Probability");
  uint64_t v8 = *(const std::string **)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v90, "");
  CoreML::Pipeline::Classifier(v8, &v93, &v90, v91);
  std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>((const CoreML::Model *)v91, &v92);
  CoreML::Pipeline::~Pipeline((CoreML::Pipeline *)v91);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = v92;
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  long long v88 = (uint64_t *)*a1;
  uint64_t v89 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::setup_pipeline_from_mldata(v9, &v88);
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  uint64_t v11 = *(void *)(*a1 + 24);
  std::string::basic_string[abi:ne180100]<0>(&v90, "Logistic Regression");
  CoreML::LogisticModel::LogisticModel(v91, v11, &v93, &v90);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  memset(&v90, 0, sizeof(v90));
  uint64_t v12 = (std::__shared_weak_count *)a1[1];
  long long v86 = (uint64_t *)*a1;
  int v87 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::supervised::get_one_hot_encoded_coefs(a2, &v86, (uint64_t)&v90);
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  long long v83 = 0;
  long long v84 = 0;
  std::locale v85 = 0;
  memset(v82, 0, sizeof(v82));
  std::vector<std::string>::size_type __n = *(void *)(*(void *)(*a1 + 24) + 64);
  uint64_t v61 = a1;
  std::vector<std::string>::size_type v63 = __n - 1;
  if (__n != 1)
  {
    uint64_t v13 = 0;
    unint64_t v62 = ((uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3) / v63;
    unint64_t v14 = v62 - 1;
    do
    {
      memset(&__p, 0, sizeof(__p));
      std::vector<std::vector<double>>::push_back[abi:ne180100](v82, (uint64_t)&__p);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      unint64_t v15 = v13 * v62;
      if (v62 != 1)
      {
        uint64_t v16 = 0;
        do
        {
          uint64_t v17 = v82[0] + 24 * v13;
          uint64_t v18 = v16 + v15;
          std::string::size_type v19 = v90.__r_.__value_.__r.__words[0];
          long long v21 = (void **)(v17 + 8);
          unsigned int v20 = *(void **)(v17 + 8);
          uint64_t v23 = (void *)(v17 + 16);
          unint64_t v22 = *(void *)(v17 + 16);
          if ((unint64_t)v20 >= v22)
          {
            long long v25 = *(void **)v17;
            uint64_t v26 = ((uint64_t)v20 - *(void *)v17) >> 3;
            unint64_t v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 2 > v27) {
              unint64_t v27 = v28 >> 2;
            }
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v23, v29);
              unsigned int v20 = *v21;
              long long v25 = *(void **)v17;
            }
            else
            {
              uint64_t v30 = 0;
            }
            std::string v31 = &v30[8 * v26];
            *(void *)std::string v31 = *(void *)(v19 + 8 * v18);
            uint64_t v24 = v31 + 8;
            while (v20 != v25)
            {
              uint64_t v32 = *--v20;
              *((void *)v31 - 1) = v32;
              v31 -= 8;
            }
            *(void *)uint64_t v17 = v31;
            uint64_t *v21 = v24;
            *uint64_t v23 = &v30[8 * v29];
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            *unsigned int v20 = *(void *)(v90.__r_.__value_.__r.__words[0] + 8 * v18);
            uint64_t v24 = v20 + 1;
          }
          uint64_t *v21 = v24;
          ++v16;
        }
        while (v16 != v14);
      }
      uint64_t v33 = *(void *)(v90.__r_.__value_.__r.__words[0] + 8 * (v14 + v15));
      uint64_t v34 = v84;
      if (v84 >= (uint64_t *)v85)
      {
        long long v36 = v83;
        uint64_t v37 = v84 - v83;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v85 - (char *)v83;
        if ((v85 - (char *)v83) >> 2 > v38) {
          unint64_t v38 = v39 >> 2;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v85, v40);
          long long v36 = v83;
          uint64_t v34 = v84;
        }
        else
        {
          uint64_t v41 = 0;
        }
        char v42 = (uint64_t *)&v41[8 * v37];
        uint64_t *v42 = v33;
        char v35 = v42 + 1;
        while (v34 != v36)
        {
          uint64_t v43 = *--v34;
          *--char v42 = v43;
        }
        long long v83 = v42;
        long long v84 = v35;
        std::locale v85 = &v41[8 * v40];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        uint64_t *v84 = v33;
        char v35 = v34 + 1;
      }
      long long v84 = v35;
      ++v13;
    }
    while (v13 != v63);
  }
  CoreML::LogisticModel::setWeights((uint64_t)v91, v82, (CoreML::Result *)v78);
  if (v80 < 0) {
    operator delete(v79);
  }
  CoreML::LogisticModel::setOffsets((uint64_t)v91, &v83, (CoreML::Result *)v75);
  if (v77 < 0) {
    operator delete(v76);
  }
  CoreML::FeatureType::Double((uint64_t *)&v74);
  CoreML::FeatureType::Double((uint64_t *)&v73);
  std::vector<std::string>::size_type v44 = __n;
  if (*(unsigned char *)(*(void *)(*v61 + 24) + 28) == 2)
  {
    std::vector<std::string>::vector(&__p, __n);
    if (__n)
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      do
      {
        std::string::operator=(&__p.__begin_[v52], (const std::string *)(*(void *)(*(void *)(*(void *)(*(void *)(*v61 + 24) + 32) + 80) + v53) + 8));
        v53 += 16;
        ++v52;
        --v44;
      }
      while (v44);
    }
    CoreML::LogisticModel::setClassNames((uint64_t)v91, &__p, (CoreML::Result *)v66);
    if (v68 < 0) {
      operator delete(v67);
    }
    CoreML::FeatureType::String((uint64_t *)&v69);
    long long v54 = v69;
    long long v69 = 0uLL;
    long long v55 = (std::__shared_weak_count *)*((void *)&v74 + 1);
    long long v74 = v54;
    if (v55)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      if (*((void *)&v69 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
      }
    }
    CoreML::FeatureType::Dictionary(2, (uint64_t *)&v69);
    long long v56 = v69;
    long long v69 = 0uLL;
    uint64_t v57 = (std::__shared_weak_count *)*((void *)&v73 + 1);
    long long v73 = v56;
    if (v57)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      if (*((void *)&v69 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
      }
    }
    *(void *)&long long v69 = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
  }
  else
  {
    if (*(unsigned char *)(*(void *)(*v61 + 24) + 28)) {
      turi::export_logistic_model_as_model_asset(std::shared_ptr<turi::ml_metadata> const&,Eigen::Matrix<double,-1,1,0,-1,1> const&,std::map<std::string,turi::flexible_type> const&)::$_0::operator()();
    }
    std::vector<long long>::vector(&__p, __n);
    if (__n)
    {
      uint64_t v45 = *(std::string::size_type **)(*(void *)(*(void *)(*v61 + 24) + 32) + 80);
      std::vector<std::string>::pointer begin = __p.__begin_;
      do
      {
        std::string::size_type v47 = *v45;
        v45 += 2;
        begin->__r_.__value_.__r.__words[0] = v47;
        std::vector<std::string>::pointer begin = (std::vector<std::string>::pointer)((char *)begin + 8);
        --v44;
      }
      while (v44);
    }
    CoreML::LogisticModel::setClassNames((uint64_t)v91, (uint64_t *)&__p, (CoreML::Result *)v70);
    if (v72 < 0) {
      operator delete(v71);
    }
    CoreML::FeatureType::Int64((uint64_t *)&v69);
    long long v48 = v69;
    long long v69 = 0uLL;
    unint64_t v49 = (std::__shared_weak_count *)*((void *)&v74 + 1);
    long long v74 = v48;
    if (v49)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      if (*((void *)&v69 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
      }
    }
    CoreML::FeatureType::Dictionary(1, (uint64_t *)&v69);
    long long v50 = v69;
    long long v69 = 0uLL;
    std::string v51 = (std::__shared_weak_count *)*((void *)&v73 + 1);
    long long v73 = v50;
    if (v51)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      if (*((void *)&v69 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
      }
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "__vectorized_features__");
  uint64_t v58 = *(void *)(*v61 + 64);
  uint64_t v59 = operator new(8uLL);
  v64[0] = v59;
  *uint64_t v59 = v58;
  v64[1] = v59 + 1;
  v64[2] = v59 + 1;
  CoreML::FeatureType::Array((uint64_t)v64, &v65);
  CoreML::Model::addInput((uint64_t)v91, (const std::string *)&__p, (CoreML::FeatureType *)&v65);
}

void sub_2243B9100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a57 = (uint64_t)&STACK[0x210];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a64);
  }
  if (a66) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a66);
  }
  STACK[0x210] = (unint64_t)&STACK[0x228];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  char v68 = *(void **)(v66 - 256);
  if (v68)
  {
    *(void *)(v66 - 248) = v68;
    operator delete(v68);
  }
  long long v69 = *(void **)(v66 - 200);
  if (v69)
  {
    *(void *)(v66 - 192) = v69;
    operator delete(v69);
  }
  CoreML::Model::~Model((CoreML::Model *)(v66 - 176));
  std::string v70 = *(std::__shared_weak_count **)(v66 - 144);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  if (*(char *)(v66 - 113) < 0) {
    operator delete(*(void **)(v66 - 136));
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<double>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    unint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    uint64_t v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)unint64_t v14 = 0;
    *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<double>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    std::locale v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    std::locale v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_2243B9430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>@<X0>(const CoreML::Model *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t result = std::__shared_ptr_emplace<CoreML::Pipeline>::__shared_ptr_emplace[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2243B948C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CoreML::Pipeline>::__shared_ptr_emplace[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,0>(void *a1, const CoreML::Model *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D77CAA8;
  CoreML::Model::Model(a1 + 3, a2);
  a1[3] = &unk_26D787868;
  return a1;
}

void sub_2243B9504(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreML::Pipeline>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreML::Pipeline>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<CoreML::Pipeline>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<double>>,std::vector<double> const*,std::vector<double> const*,std::vector<double>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2243B9654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<double>>,std::vector<double>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Pipeline>,void>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x108uLL);
  std::__shared_ptr_emplace<turi::coreml::MLModelWrapper>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<CoreML::Model>,std::allocator<turi::coreml::MLModelWrapper>,0>((uint64_t)v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<turi::visualization::Plot>::__enable_weak_this[abi:ne180100]<cppipc::ipc_object_base,turi::visualization::Plot,void>((uint64_t)a2, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_2243B9700(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::setup_pipeline_from_mldata(uint64_t a1, uint64_t **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  CoreML::FeatureVectorizer::FeatureVectorizer((CoreML::Model *)v233, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = **a2;
  if ((*a2)[1] == v4)
  {
LABEL_271:
    std::string::basic_string[abi:ne180100]<0>(&__p, "__vectorized_features__");
    uint64_t v144 = (*a2)[8];
    uint64_t v145 = operator new(8uLL);
    v158[0] = v145;
    void *v145 = v144;
    v158[1] = v145 + 1;
    v158[2] = v145 + 1;
    CoreML::FeatureType::Array((uint64_t)v158, &v159);
    CoreML::Model::addOutput((uint64_t)v233, &__p, (CoreML::FeatureType *)&v159);
  }
  unint64_t v5 = 0;
  std::string::size_type v157 = *MEMORY[0x263F8C2B8];
  std::string::size_type v155 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  std::string::size_type v156 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v154 = a1;
  while (2)
  {
    uint64_t v6 = (long long **)(v4 + 16 * v5);
    uint64_t v8 = *v6;
    uint64_t v7 = (std::__shared_weak_count *)v6[1];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v232, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      v232.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&v232.__r_.__value_.__l.__data_ = v9;
    }
    unint64_t v10 = (uint64_t *)(**a2 + 16 * v5);
    uint64_t v12 = *v10;
    unint64_t v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      int v13 = *(_DWORD *)(v12 + 24);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    else
    {
      int v13 = *(_DWORD *)(v12 + 24);
    }
    switch(v13)
    {
      case 0:
        CoreML::FeatureType::Double(&v228);
        (*(void (**)(void **__return_ptr, uint64_t, std::string *, uint64_t *))(*(void *)a1 + 16))(v230, a1, &v232, &v228);
        if (v231 < 0) {
          operator delete(v230[1]);
        }
        if (v229) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v229);
        }
        CoreML::FeatureType::Double(&v227);
        CoreML::Model::addInput((uint64_t)v233, &v232, (CoreML::FeatureType *)&v227);
      case 1:
      case 6:
        unint64_t v14 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v16 = *v14;
        uint64_t v15 = (std::__shared_weak_count *)v14[1];
        if (v15)
        {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        uint64_t v18 = *(void *)(v16 + 32);
        uint64_t v17 = *(void *)(v16 + 40);
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::size_type v19 = (long long **)(**a2 + 16 * v5);
        long long v21 = *v19;
        unsigned int v20 = (std::__shared_weak_count *)v19[1];
        if (v20)
        {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)v21, *((void *)v21 + 1));
        }
        else
        {
          long long v22 = *v21;
          v206.__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
          *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v22;
        }
        std::to_string((std::string *)v241, v5);
        uint64_t v39 = std::string::insert((std::string *)v241, 0, "One Hot Encoder on Column");
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        CoreML::OneHotEncoder::OneHotEncoder(v205, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v241[23] & 0x80000000) != 0) {
          operator delete(*(void **)v241);
        }
        uint64_t v41 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v43 = *v41;
        char v42 = (std::__shared_weak_count *)v41[1];
        if (v42)
        {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
          int v44 = *(unsigned __int8 *)(v43 + 28);
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        else
        {
          int v44 = *(unsigned __int8 *)(v43 + 28);
        }
        if (v44 == 2)
        {
          uint64_t v45 = (uint64_t *)(**a2 + 16 * v5);
          uint64_t v47 = *v45;
          char v46 = (std::__shared_weak_count *)v45[1];
          if (v46)
          {
            atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
            std::vector<std::string>::size_type v48 = *(void *)(v47 + 64);
            std::__shared_weak_count::__release_shared[abi:ne180100](v46);
          }
          else
          {
            std::vector<std::string>::size_type v48 = *(void *)(v47 + 64);
          }
          std::vector<std::string>::vector((std::vector<std::string> *)v241, v48);
          uint64_t v68 = 0;
          uint64_t v69 = 0;
          unint64_t v70 = 0;
          while (2)
          {
            std::string v71 = (uint64_t *)(**a2 + 16 * v5);
            uint64_t v73 = *v71;
            char v72 = (std::__shared_weak_count *)v71[1];
            if (v72)
            {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v74 = *(void *)(v73 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v72);
            }
            else
            {
              unint64_t v74 = *(void *)(v73 + 64);
            }
            if (v70 < v74)
            {
              std::string v75 = (turi::flexible_type_impl *)(*(void *)(v18 + 80) + v68);
              switch(*((unsigned char *)v75 + 12))
              {
                case 0:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  goto LABEL_97;
                case 1:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
LABEL_97:
                  __p.__r_.__value_.__r.__words[0] = v157;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v157 - 24)) = v156;
                  __p.__r_.__value_.__r.__words[2] = v155;
                  uint64_t v235 = MEMORY[0x263F8C318] + 16;
                  if (v239 < 0) {
                    operator delete(v238);
                  }
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x22A614E30](v240);
                  goto LABEL_104;
                case 2:
                  uint64_t v76 = *(void *)v75;
                  if (*(char *)(*(void *)v75 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(v76 + 8), *(void *)(v76 + 16));
                  }
                  else
                  {
                    long long v77 = *(_OWORD *)(v76 + 8);
                    v245.__r_.__value_.__r.__words[2] = *(void *)(v76 + 24);
                    *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v77;
                  }
                  goto LABEL_104;
                case 3:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v75 + 8));
                  goto LABEL_104;
                case 4:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(void *)v75 + 8));
                  goto LABEL_104;
                case 5:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v75 + 8));
                  goto LABEL_104;
                case 6:
                  turi::flexible_type_impl::get_string_visitor::operator()(v75, &v245);
                  goto LABEL_104;
                case 7:
                  memset(&v245, 0, sizeof(v245));
                  goto LABEL_104;
                case 8:
                  turi::flexible_type_impl::get_string_visitor::operator()();
                  goto LABEL_104;
                case 9:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v75 + 8));
LABEL_104:
                  uint64_t v78 = *(void *)v241 + v69;
                  if (*(char *)(*(void *)v241 + v69 + 23) < 0) {
                    operator delete(*(void **)v78);
                  }
                  long long v79 = *(_OWORD *)&v245.__r_.__value_.__l.__data_;
                  *(void *)(v78 + 16) = *((void *)&v245.__r_.__value_.__l + 2);
                  *(_OWORD *)uint64_t v78 = v79;
                  ++v70;
                  v69 += 24;
                  v68 += 16;
                  continue;
                default:
                  goto LABEL_272;
              }
            }
            break;
          }
          CoreML::OneHotEncoder::setFeatureEncoding((uint64_t)v205, (long long **)v241, (CoreML::Result *)v202);
          if (v204 < 0) {
            operator delete(v203);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v241;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_151;
        }
        unint64_t v49 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v51 = *v49;
        long long v50 = (std::__shared_weak_count *)v49[1];
        if (v50)
        {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          int v52 = *(unsigned __int8 *)(v51 + 28);
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          if (v52)
          {
LABEL_277:
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
            turi::setup_pipeline_from_mldata(CoreML::Pipeline &,std::shared_ptr<turi::ml_metadata>)::$_0::operator()();
          }
        }
        else if (*(unsigned char *)(v51 + 28))
        {
          goto LABEL_277;
        }
        char v80 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v82 = *v80;
        std::string v81 = (std::__shared_weak_count *)v80[1];
        if (v81)
        {
          atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v83 = *(void *)(v82 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v81);
        }
        else
        {
          unint64_t v83 = *(void *)(v82 + 64);
        }
        std::vector<long long>::vector(v201, v83);
        uint64_t v84 = 0;
        unint64_t v85 = 0;
        while (2)
        {
          long long v86 = (uint64_t *)(**a2 + 16 * v5);
          uint64_t v88 = *v86;
          int v87 = (std::__shared_weak_count *)v86[1];
          if (v87)
          {
            atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v89 = *(void *)(v88 + 64);
            std::__shared_weak_count::__release_shared[abi:ne180100](v87);
          }
          else
          {
            unint64_t v89 = *(void *)(v88 + 64);
          }
          if (v85 < v89)
          {
            uint64_t v90 = *(void *)(v18 + 80);
            uint64_t v91 = 0;
            switch(*(unsigned char *)(v90 + v84 + 12))
            {
              case 0:
                uint64_t v91 = *(void *)(v90 + v84);
                goto LABEL_143;
              case 1:
                uint64_t v91 = (uint64_t)*(double *)(v90 + v84);
                goto LABEL_143;
              case 2:
                uint64_t v93 = *(void *)(v90 + v84);
                __idx[0] = 0;
                long long v94 = (char *)(v93 + 8);
                if (*(char *)(v93 + 31) < 0) {
                  long long v94 = *(char **)(v93 + 8);
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, v94);
                uint64_t v91 = std::stoll(&__p, __idx, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (*(char *)(v93 + 31) < 0) {
                  uint64_t v95 = *(void *)(v93 + 16);
                }
                else {
                  uint64_t v95 = *(unsigned __int8 *)(v93 + 31);
                }
                if (__idx[0] != v95)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  uint64_t v148 = std::string::append(&v245, " cannot be interpreted as an integer");
                  long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v149;
                  v148->__r_.__value_.__l.__size_ = 0;
                  v148->__r_.__value_.__r.__words[2] = 0;
                  v148->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, &__p);
                  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_143;
              case 3:
                uint64_t v92 = *(void *)(v90 + v84);
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v92 + 8), *(void *)(v92 + 16), (uint64_t)(*(void *)(v92 + 16) - *(void *)(v92 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_142;
              case 4:
                uint64_t v96 = *(void *)(v90 + v84);
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v96 + 8), *(uint64_t **)(v96 + 16), (uint64_t)(*(void *)(v96 + 16) - *(void *)(v96 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
                goto LABEL_142;
              case 5:
                uint64_t v97 = *(void *)(v90 + v84);
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v97 + 8), *(uint64_t **)(v97 + 16), (uint64_t)(*(void *)(v97 + 16) - *(void *)(v97 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
                goto LABEL_142;
              case 6:
                uint64_t v91 = (uint64_t)(*(void *)(v90 + v84) << 8) >> 8;
                goto LABEL_143;
              case 7:
                goto LABEL_143;
              case 8:
                uint64_t v98 = *(void *)(v90 + v84);
                uint64_t v99 = *(void *)(v98 + 16);
                *(void *)unsigned int v241 = *(void *)(v98 + 8);
                *(void *)&v241[8] = v99;
                if (v99) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v99 + 8), 1u, memory_order_relaxed);
                }
                long long v100 = *(_OWORD *)(v98 + 24);
                long long v101 = *(_OWORD *)(v98 + 56);
                long long v242 = *(_OWORD *)(v98 + 40);
                long long v243 = v101;
                *(_OWORD *)&v241[16] = v100;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((atomic_uint **)&v241[8]);
                goto LABEL_142;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)(v90 + v84) + 8);
                turi::flexible_type_fail(0);
                if (v236)
                {
                  __n128 v237 = v236;
                  operator delete(v236);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  uint64_t v235 = __p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                if (__p.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                }
LABEL_142:
                uint64_t v91 = 0;
LABEL_143:
                *((void *)v201[0] + v85++) = v91;
                v84 += 16;
                continue;
              default:
                goto LABEL_273;
            }
          }
          break;
        }
        CoreML::OneHotEncoder::setFeatureEncoding((uint64_t)v205, (uint64_t **)v201, (CoreML::Result *)v198);
        if (v200 < 0) {
          operator delete(v199);
        }
        if (v201[0])
        {
          v201[1] = v201[0];
          operator delete(v201[0]);
        }
LABEL_151:
        CoreML::OneHotEncoder::setHandleUnknown((uint64_t)v205, 1, (CoreML::Result *)v195);
        if (v197 < 0) {
          operator delete(v196);
        }
        CoreML::OneHotEncoder::setUseSparse((CoreML::OneHotEncoder *)v205, 1, (CoreML::Result *)v192);
        if (v194 < 0) {
          operator delete(v193);
        }
        long long v102 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v104 = *v102;
        std::string::size_type v103 = (std::__shared_weak_count *)v102[1];
        if (v103
          && (atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed),
              std::__shared_weak_count::__release_shared[abi:ne180100](v103),
              std::string::size_type v105 = (uint64_t *)(**a2 + 16 * v5),
              uint64_t v104 = *v105,
              (std::string v106 = (std::__shared_weak_count *)v105[1]) != 0))
        {
          atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
          int v107 = *(unsigned __int8 *)(v104 + 28);
          std::__shared_weak_count::__release_shared[abi:ne180100](v106);
        }
        else
        {
          int v107 = *(unsigned __int8 *)(v104 + 28);
        }
        if (v107 == 2)
        {
          CoreML::FeatureType::String(&v187);
          CoreML::OneHotEncoder::addInput((uint64_t)v205, &v206, &v187, (uint64_t)v189);
          if (v191 < 0) {
            operator delete(v190);
          }
          if (v188) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v188);
          }
          CoreML::FeatureType::Dictionary(1, &v186);
          CoreML::Model::addOutput((uint64_t)v205, &v206, (CoreML::FeatureType *)&v186);
        }
        std::string::size_type v108 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v110 = *v108;
        char v109 = (std::__shared_weak_count *)v108[1];
        if (v109)
        {
          atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
          int v111 = *(unsigned __int8 *)(v110 + 28);
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
          if (v111)
          {
LABEL_276:
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v206;
            turi::setup_pipeline_from_mldata(CoreML::Pipeline &,std::shared_ptr<turi::ml_metadata>)::$_1::operator()();
          }
        }
        else if (*(unsigned char *)(v110 + 28))
        {
          goto LABEL_276;
        }
        CoreML::FeatureType::Int64(&v181);
        CoreML::OneHotEncoder::addInput((uint64_t)v205, &v206, &v181, (uint64_t)v183);
        if (v185 < 0) {
          operator delete(v184);
        }
        if (v182) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v182);
        }
        CoreML::FeatureType::Dictionary(1, &v180);
        CoreML::Model::addOutput((uint64_t)v205, &v206, (CoreML::FeatureType *)&v180);
      case 2:
        uint64_t v26 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v28 = *v26;
        unint64_t v27 = (std::__shared_weak_count *)v26[1];
        if (v27)
        {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v29 = *(void *)(v28 + 64);
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        else
        {
          uint64_t v29 = *(void *)(v28 + 64);
        }
        long long v221 = 0;
        uint64_t v220 = 0;
        uint64_t v222 = 0;
        uint64_t v53 = operator new(8uLL);
        uint64_t v220 = v53;
        *uint64_t v53 = v29;
        uint64_t v222 = v53 + 1;
        long long v221 = v53 + 1;
        CoreML::FeatureType::Array((uint64_t)&v220, &v223);
        (*(void (**)(void **__return_ptr, uint64_t, std::string *, uint64_t *))(*(void *)a1 + 16))(v225, a1, &v232, &v223);
        if (v226 < 0) {
          operator delete(v225[1]);
        }
        if (v224) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v224);
        }
        if (v220)
        {
          long long v221 = v220;
          operator delete(v220);
        }
        uint64_t v217 = 0;
        uint64_t v216 = 0;
        int64_t v218 = 0;
        long long v54 = operator new(8uLL);
        uint64_t v216 = v54;
        void *v54 = v29;
        int64_t v218 = v54 + 1;
        uint64_t v217 = v54 + 1;
        CoreML::FeatureType::Array((uint64_t)&v216, &v219);
        CoreML::Model::addInput((uint64_t)v233, &v232, (CoreML::FeatureType *)&v219);
      case 3:
        turi::setup_pipeline_from_mldata(CoreML::Pipeline &,std::shared_ptr<turi::ml_metadata>)::$_3::operator()();
      case 4:
        uint64_t v30 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v32 = *v30;
        std::string v31 = (std::__shared_weak_count *)v30[1];
        if (v31)
        {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        uint64_t v34 = *(void *)(v32 + 32);
        uint64_t v33 = *(void *)(v32 + 40);
        if (v33) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        }
        char v35 = (long long **)(**a2 + 16 * v5);
        uint64_t v37 = *v35;
        long long v36 = (std::__shared_weak_count *)v35[1];
        if (v36)
        {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        if (*((char *)v37 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v206, *(const std::string::value_type **)v37, *((void *)v37 + 1));
        }
        else
        {
          long long v38 = *v37;
          v206.__r_.__value_.__r.__words[2] = *((void *)v37 + 2);
          *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v38;
        }
        std::to_string((std::string *)v241, v5);
        long long v55 = std::string::insert((std::string *)v241, 0, "Dict Vectorizer on Column");
        long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        CoreML::DictVectorizer::DictVectorizer(v205, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v241[23] & 0x80000000) != 0) {
          operator delete(*(void **)v241);
        }
        uint64_t v57 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v59 = *v57;
        uint64_t v58 = (std::__shared_weak_count *)v57[1];
        if (v58)
        {
          atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
        }
        turi::ml_data_internal::column_indexer::extract_key_types(*(void *)(v59 + 32), (uint64_t)v201);
        if (v201[2] != (void *)1) {
          goto LABEL_274;
        }
        int v153 = *((unsigned __int8 *)v201[0] + 25);
        if (v153 == 2)
        {
          long long v60 = (uint64_t *)(**a2 + 16 * v5);
          uint64_t v62 = *v60;
          uint64_t v61 = (std::__shared_weak_count *)v60[1];
          if (v61)
          {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
            std::vector<std::string>::size_type v63 = *(void *)(v62 + 64);
            std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          }
          else
          {
            std::vector<std::string>::size_type v63 = *(void *)(v62 + 64);
          }
          std::vector<std::string>::vector((std::vector<std::string> *)v241, v63);
          uint64_t v112 = 0;
          uint64_t v113 = 0;
          unint64_t v114 = 0;
          while (2)
          {
            uint64_t v115 = (uint64_t *)(**a2 + 16 * v5);
            uint64_t v117 = *v115;
            int v116 = (std::__shared_weak_count *)v115[1];
            if (v116)
            {
              atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v118 = *(void *)(v117 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v116);
            }
            else
            {
              unint64_t v118 = *(void *)(v117 + 64);
            }
            if (v114 < v118)
            {
              uint64_t v119 = (turi::flexible_type_impl *)(*(void *)(v34 + 80) + v112);
              switch(*((unsigned char *)v119 + 12))
              {
                case 0:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
                  goto LABEL_189;
                case 1:
                  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p);
                  std::ostream::operator<<();
                  std::stringbuf::str();
LABEL_189:
                  __p.__r_.__value_.__r.__words[0] = v157;
                  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + *(void *)(v157 - 24)) = v156;
                  __p.__r_.__value_.__r.__words[2] = v155;
                  uint64_t v235 = MEMORY[0x263F8C318] + 16;
                  if (v239 < 0) {
                    operator delete(v238);
                  }
                  std::streambuf::~streambuf();
                  std::iostream::~basic_iostream();
                  MEMORY[0x22A614E30](v240);
                  goto LABEL_196;
                case 2:
                  uint64_t v120 = *(void *)v119;
                  if (*(char *)(*(void *)v119 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(v120 + 8), *(void *)(v120 + 16));
                  }
                  else
                  {
                    long long v121 = *(_OWORD *)(v120 + 8);
                    v245.__r_.__value_.__r.__words[2] = *(void *)(v120 + 24);
                    *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v121;
                  }
                  goto LABEL_196;
                case 3:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v119 + 8));
                  goto LABEL_196;
                case 4:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(void *)v119 + 8));
                  goto LABEL_196;
                case 5:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v119 + 8));
                  goto LABEL_196;
                case 6:
                  turi::flexible_type_impl::get_string_visitor::operator()(v119, &v245);
                  goto LABEL_196;
                case 7:
                  memset(&v245, 0, sizeof(v245));
                  goto LABEL_196;
                case 8:
                  turi::flexible_type_impl::get_string_visitor::operator()();
                  goto LABEL_196;
                case 9:
                  turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)v119 + 8));
LABEL_196:
                  uint64_t v122 = *(void *)v241 + v113;
                  if (*(char *)(*(void *)v241 + v113 + 23) < 0) {
                    operator delete(*(void **)v122);
                  }
                  long long v123 = *(_OWORD *)&v245.__r_.__value_.__l.__data_;
                  *(void *)(v122 + 16) = *((void *)&v245.__r_.__value_.__l + 2);
                  *(_OWORD *)uint64_t v122 = v123;
                  ++v114;
                  v113 += 24;
                  v112 += 16;
                  continue;
                default:
LABEL_272:
                  uint64_t result = turi::flexible_type_fail(0);
                  goto LABEL_278;
              }
            }
            break;
          }
          CoreML::DictVectorizer::setFeatureEncoding((uint64_t)v205, (long long **)v241, (CoreML::Result *)v177);
          uint64_t v124 = v154;
          if (v179 < 0) {
            operator delete(v178);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v241;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        else
        {
          if (*((unsigned char *)v201[0] + 25)) {
LABEL_274:
          }
            turi::setup_pipeline_from_mldata(CoreML::Pipeline &,std::shared_ptr<turi::ml_metadata>)::$_2::operator()();
          long long v64 = (uint64_t *)(**a2 + 16 * v5);
          uint64_t v66 = *v64;
          uint64_t v65 = (std::__shared_weak_count *)v64[1];
          if (v65)
          {
            atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v67 = *(void *)(v66 + 64);
            std::__shared_weak_count::__release_shared[abi:ne180100](v65);
          }
          else
          {
            unint64_t v67 = *(void *)(v66 + 64);
          }
          std::vector<long long>::vector(__idx, v67);
          uint64_t v125 = 0;
          unint64_t v126 = 0;
          while (1)
          {
            long long v127 = (uint64_t *)(**a2 + 16 * v5);
            uint64_t v129 = *v127;
            uint64_t v128 = (std::__shared_weak_count *)v127[1];
            if (v128)
            {
              atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v130 = *(void *)(v129 + 64);
              std::__shared_weak_count::__release_shared[abi:ne180100](v128);
            }
            else
            {
              unint64_t v130 = *(void *)(v129 + 64);
            }
            if (v126 >= v130) {
              break;
            }
            uint64_t v131 = *(void *)(v34 + 80);
            uint64_t v132 = 0;
            switch(*(unsigned char *)(v131 + v125 + 12))
            {
              case 0:
                uint64_t v132 = *(void *)(v131 + v125);
                goto LABEL_232;
              case 1:
                uint64_t v132 = (uint64_t)*(double *)(v131 + v125);
                goto LABEL_232;
              case 2:
                uint64_t v134 = *(void *)(v131 + v125);
                size_t v244 = 0;
                uint64_t v135 = (char *)(v134 + 8);
                if (*(char *)(v134 + 31) < 0) {
                  uint64_t v135 = *(char **)(v134 + 8);
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, v135);
                uint64_t v132 = std::stoll(&__p, &v244, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (*(char *)(v134 + 31) < 0) {
                  uint64_t v136 = *(void *)(v134 + 16);
                }
                else {
                  uint64_t v136 = *(unsigned __int8 *)(v134 + 31);
                }
                if (v244 != v136)
                {
                  uint64_t v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  uint64_t v151 = std::string::append(&v245, " cannot be interpreted as an integer");
                  long long v152 = *(_OWORD *)&v151->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v151->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v152;
                  v151->__r_.__value_.__l.__size_ = 0;
                  v151->__r_.__value_.__r.__words[2] = 0;
                  v151->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v150, &__p);
                  __cxa_throw(v150, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_232;
              case 3:
                uint64_t v133 = *(void *)(v131 + v125);
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v133 + 8), *(void *)(v133 + 16), (uint64_t)(*(void *)(v133 + 16) - *(void *)(v133 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_231;
              case 4:
                uint64_t v137 = *(void *)(v131 + v125);
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v137 + 8), *(uint64_t **)(v137 + 16), (uint64_t)(*(void *)(v137 + 16) - *(void *)(v137 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
                goto LABEL_231;
              case 5:
                uint64_t v138 = *(void *)(v131 + v125);
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v138 + 8), *(uint64_t **)(v138 + 16), (uint64_t)(*(void *)(v138 + 16) - *(void *)(v138 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
                goto LABEL_231;
              case 6:
                uint64_t v132 = (uint64_t)(*(void *)(v131 + v125) << 8) >> 8;
                goto LABEL_232;
              case 7:
                goto LABEL_232;
              case 8:
                uint64_t v139 = *(void *)(v131 + v125);
                uint64_t v140 = *(void *)(v139 + 16);
                *(void *)unsigned int v241 = *(void *)(v139 + 8);
                *(void *)&v241[8] = v140;
                if (v140) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v140 + 8), 1u, memory_order_relaxed);
                }
                long long v141 = *(_OWORD *)(v139 + 24);
                long long v142 = *(_OWORD *)(v139 + 56);
                long long v242 = *(_OWORD *)(v139 + 40);
                long long v243 = v142;
                *(_OWORD *)&v241[16] = v141;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((atomic_uint **)&v241[8]);
                goto LABEL_231;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)(v131 + v125) + 8);
                turi::flexible_type_fail(0);
                if (v236)
                {
                  __n128 v237 = v236;
                  operator delete(v236);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  uint64_t v235 = __p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                if (__p.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                }
LABEL_231:
                uint64_t v132 = 0;
LABEL_232:
                *(void *)(__idx[0] + 8 * v126++) = v132;
                v125 += 16;
                break;
              default:
LABEL_273:
                uint64_t result = turi::flexible_type_fail(0);
LABEL_278:
                __break(1u);
                return result;
            }
          }
          CoreML::DictVectorizer::setFeatureEncoding((uint64_t)v205, (uint64_t **)__idx, (CoreML::Result *)v173);
          uint64_t v124 = v154;
          if (v175 < 0) {
            operator delete(v174);
          }
          if (__idx[0])
          {
            __idx[1] = __idx[0];
            operator delete((void *)__idx[0]);
          }
        }
        uint64_t v143 = *(std::__shared_weak_count **)(**a2 + 16 * v5 + 8);
        if (v143)
        {
          atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v143);
        }
        CoreML::FeatureType::Dictionary(2, (uint64_t *)&__p);
        CoreML::FeatureType::Dictionary(1, (uint64_t *)v241);
        if (v153 == 2)
        {
          long long v169 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          CoreML::DictVectorizer::addInput((uint64_t)v205, &v206, (uint64_t *)&v169, (uint64_t)v170);
          if (v172 < 0) {
            operator delete(v171);
          }
          if (*((void *)&v169 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v169 + 1));
          }
          long long v166 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          if (__p.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void **__return_ptr, uint64_t, std::string *, long long *))(*(void *)v124 + 16))(v167, v124, &v206, &v166);
          if (v168 < 0) {
            operator delete(v167[1]);
          }
          if (*((void *)&v166 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v166 + 1));
          }
          long long v160 = *(_OWORD *)v241;
          if (*(void *)&v241[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v241[8] + 8), 1uLL, memory_order_relaxed);
          }
          CoreML::Model::addOutput((uint64_t)v205, &v206, (CoreML::FeatureType *)&v160);
        }
        long long v162 = *(_OWORD *)v241;
        if (*(void *)&v241[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v241[8] + 8), 1uLL, memory_order_relaxed);
        }
        CoreML::DictVectorizer::addInput((uint64_t)v205, &v206, (uint64_t *)&v162, (uint64_t)v163);
        if (v165 < 0) {
          operator delete(v164);
        }
        if (*((void *)&v162 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v162 + 1));
        }
        long long v161 = *(_OWORD *)v241;
        if (*(void *)&v241[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v241[8] + 8), 1uLL, memory_order_relaxed);
        }
        CoreML::Model::addOutput((uint64_t)v205, &v206, (CoreML::FeatureType *)&v161);
      case 7:
        uint64_t v23 = (uint64_t *)(**a2 + 16 * v5);
        uint64_t v25 = *v23;
        uint64_t v24 = (std::__shared_weak_count *)v23[1];
        if (v24)
        {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        memset(&__p, 0, sizeof(__p));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v25 + 80), *(void *)(v25 + 88), (uint64_t)(*(void *)(v25 + 88) - *(void *)(v25 + 80)) >> 3);
        uint64_t v211 = 0;
        double v209 = 0;
        unsigned int v210 = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&v209, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
        CoreML::FeatureType::Array((uint64_t)&v209, &v212);
        (*(void (**)(void **__return_ptr, uint64_t, std::string *, uint64_t *))(*(void *)a1 + 16))(v214, a1, &v232, &v212);
        if (v215 < 0) {
          operator delete(v214[1]);
        }
        if (v213) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v213);
        }
        if (v209)
        {
          unsigned int v210 = v209;
          operator delete(v209);
        }
        memset(v207, 0, sizeof(v207));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v207, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
        CoreML::FeatureType::Array((uint64_t)v207, &v208);
        CoreML::Model::addInput((uint64_t)v233, &v232, (CoreML::FeatureType *)&v208);
      default:
        if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v232.__r_.__value_.__l.__data_);
        }
        ++v5;
        uint64_t v4 = **a2;
        if (v5 >= ((*a2)[1] - v4) >> 4) {
          goto LABEL_271;
        }
        continue;
    }
  }
}

void sub_2243BB31C(_Unwind_Exception *a1)
{
}

void turi::coreml::MLModelWrapper::save(uint64_t a1)
{
  CoreML::Model::save(*(void *)(a1 + 224), (uint64_t)v2);
  if (!CoreML::Result::good((CoreML::Result *)v2))
  {
    uint64_t v1 = (turi::neural_net::float_scalar *)v2;
    turi::coreml::MLModelWrapper::save(std::string const&)::$_0::operator()(&v1);
  }
  if (v4 < 0) {
    operator delete(__p);
  }
}

void sub_2243BB9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::coreml::MLModelWrapper::add_metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = turi::gl_sarray_range::iterator::dereference(*(turi::gl_sarray_range::iterator **)(a1 + 224));
  turi::add_metadata(v3, a2);
}

void turi::set_array_feature(uint64_t *a1, __n128 *a2, __n128 *a3, uint64_t **a4)
{
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(a1 + 2, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, a2);
  _tc_google::protobuf::internal::ArenaStringPtr::SetNoArena(a1 + 3, (uint64_t)&_tc_google::protobuf::internal::fixed_address_empty_string, a3);
  uint64_t v7 = a1[4];
  if (!v7) {
    operator new();
  }
  if (*(_DWORD *)(v7 + 36) != 5)
  {
    CoreML::Specification::FeatureType::clear_Type(v7);
    *(_DWORD *)(v7 + 36) = 5;
    operator new();
  }
  uint64_t v8 = *(void *)(v7 + 24);
  *(_DWORD *)(v8 + 36) = 65600;
  long long v9 = *a4;
  unint64_t v10 = a4[1];
  if (*a4 != v10)
  {
    int v11 = *(_DWORD *)(v8 + 16);
    do
    {
      uint64_t v12 = *v9;
      if (v11 == *(_DWORD *)(v8 + 20))
      {
        _tc_google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v8 + 16), v11 + 1);
        int v11 = *(_DWORD *)(v8 + 16);
      }
      uint64_t v13 = *(void *)(v8 + 24) + 8 * v11++;
      *(_DWORD *)(v8 + 16) = v11;
      *(void *)(v13 + 8) = v12;
      ++v9;
    }
    while (v9 != v10);
  }
}

void sub_2243BBB64(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

void turi::export_style_transfer_model(const CoreML::Specification::NeuralNetwork **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, std::string *a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  CoreML::Specification::Model::Model((CoreML::Specification::Model *)v44);
  int v46 = 6;
  uint64_t v15 = v45;
  if (!v45) {
    operator new();
  }
  uint64_t v30 = a8;
  uint64_t v16 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v45 + 16);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __str = *(std::string *)a5;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Input image");
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (uint64_t *)_tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v15 + 16);
  std::string::basic_string[abi:ne180100]<0>(&v39, "index");
  std::string::basic_string[abi:ne180100]<0>(&v37, "Style index array (set index I to 1.0 to enable Ith style)");
  std::string::size_type v19 = operator new(8uLL);
  *std::string::size_type v19 = a7;
  *((void *)&v35 + 1) = v19 + 1;
  long long v36 = v19 + 1;
  *(void *)&long long v35 = v19;
  turi::set_array_feature(v18, &v39, &v37, (uint64_t **)&v35);
  operator delete(v19);
  if (v38 < 0) {
    operator delete((void *)v37.n128_u64[0]);
  }
  if (v40 < 0) {
    operator delete((void *)v39.n128_u64[0]);
  }
  unsigned int v20 = a6;
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0) {
    unsigned int v20 = (std::string *)a6->__r_.__value_.__r.__words[0];
  }
  std::string::value_type v21 = __toupper(v20->__r_.__value_.__s.__data_[0]);
  long long v22 = a6;
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0) {
    long long v22 = (std::string *)a6->__r_.__value_.__r.__words[0];
  }
  v22->__r_.__value_.__s.__data_[0] = v21;
  std::operator+<char>();
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(a6->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&a6->__r_.__value_.__l.__data_ = v35;
  a6->__r_.__value_.__r.__words[2] = (std::string::size_type)v36;
  uint64_t v23 = _tc_google::protobuf::internal::RepeatedPtrFieldBase::Add<_tc_google::protobuf::RepeatedPtrField<CoreML::Specification::FeatureDescription>::TypeHandler>(v15 + 40);
  if (SHIBYTE(a6->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v34, a6->__r_.__value_.__l.__data_, a6->__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = *a6;
  }
  std::string::basic_string[abi:ne180100]<0>(v32, "Stylized image");
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if (!a4) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (a4)
  {
LABEL_29:
  }
LABEL_30:
  if (v48 != 500)
  {
    CoreML::Specification::Model::clear_Type((uint64_t)v44);
    int v48 = 500;
    operator new();
  }
  unint64_t v27 = v47;
  CoreML::Specification::NeuralNetwork::MergeFrom(v47, *a1);
  uint64_t v28 = *((void *)v27 + 4);
  uint64_t v29 = *(void *)(v28 + 8 * *((int *)v27 + 6));
  std::string::operator=(*(std::string **)(*(void *)(*(void *)(v28 + 8) + 32) + 8), (const std::string *)a5);
  std::string::operator=(*(std::string **)(*(void *)(v29 + 56) + 8), a6);
  std::allocate_shared[abi:ne180100]<CoreML::Model,std::allocator<CoreML::Model>,CoreML::Specification::Model &,void>((const CoreML::Specification::Model *)v44, &v35);
  std::allocate_shared[abi:ne180100]<turi::coreml::MLModelWrapper,std::allocator<turi::coreml::MLModelWrapper>,std::shared_ptr<CoreML::Model>,void>(&v35, v30);
  if (*((void *)&v35 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
  }
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)v44);
}

void sub_2243BBF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  MEMORY[0x22A614FA0](v51, 0x10A1C40FD9EAC30);
  CoreML::Specification::Model::~Model((CoreML::Specification::Model *)(v52 - 144));
  _Unwind_Resume(a1);
}

uint64_t turi::anonymous namespace'::set_image_feature(uint64_t a1, uint64_t a2, uint64_t a3, std::string *__str, uint64_t a5, int a6)
{
  int v11 = *(std::string **)(a1 + 16);
  if (v11 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(v11, __str);
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(void *)(a5 + 8)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(a5 + 23))
  {
    goto LABEL_11;
  }
  if (*(uint64_t **)(a1 + 24) == &_tc_google::protobuf::internal::fixed_address_empty_string) {
    _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(*(std::string **)(a1 + 24), (const std::string *)a5);
LABEL_11:
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12) {
    operator new();
  }
  if (*(_DWORD *)(v12 + 36) != 4)
  {
    CoreML::Specification::FeatureType::clear_Type(v12);
    *(_DWORD *)(v12 + 36) = 4;
    operator new();
  }
  uint64_t v13 = *(void *)(v12 + 24);
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  *(_DWORD *)(v13 + 32) = a6;
  return v13;
}

void sub_2243BC15C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40B6FDD44FLL);
  _Unwind_Resume(a1);
}

double turi::anonymous namespace'::set_image_feature_size_range(turi::_anonymous_namespace_ *this, CoreML::Specification::ImageFeatureType *a2)
{
  if (*((_DWORD *)this + 13) != 31)
  {
    CoreML::Specification::ImageFeatureType::clear_SizeFlexibility((uint64_t)this);
    *((_DWORD *)this + 1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 31;
    operator new();
  }
  uint64_t v3 = *((void *)this + 5);
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4) {
    operator new();
  }
  uint64_t v5 = *(void *)(v3 + 24);
  if (!v5) {
    operator new();
  }
  *(void *)&double result = 64;
  *(_OWORD *)(v4 + 16) = xmmword_2246F5CA0;
  *(_OWORD *)(v5 + 16) = xmmword_2246F5CA0;
  return result;
}

void sub_2243BC26C(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x22A614FA0](v2, 0x1081C40B7564605);
  _Unwind_Resume(a1);
}

void CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl(CoreML::Specification::protobuf_Imputer_2eproto::TableStruct *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _tc_google::protobuf::internal::VerifyVersion((_tc_google::protobuf::internal *)0x2DD278, (_tc_google::protobuf::internal *)0x2DD278, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/coremltools_wrap/coremltools/mlmodel/build/format/Imputer.pb.cc", a4);
  _tc_google::protobuf::internal::InitProtobufDefaults(v4);
  CoreML::Specification::protobuf_DataStructures_2eproto::InitDefaults(v5);
  CoreML::Specification::_Imputer_default_instance_ = (uint64_t)&unk_26D77CAF8;
  *(void *)algn_26808E5A8 = 0;
  dword_26808E5C8 = 0;
  qword_26808E5C0 = 0;
  byte_26808E5D0 = 1;
}

void CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(CoreML::Specification::protobuf_Imputer_2eproto *this)
{
  unint64_t v1 = atomic_load(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once);
  if (v1 != 2)
  {
    v2[0] = &unk_26D7768F8;
    v2[1] = CoreML::Specification::protobuf_Imputer_2eproto::TableStruct::InitDefaultsImpl;
    char v3 = 0;
    _tc_google::protobuf::GoogleOnceInitImpl(&CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(void)::once, (uint64_t)v2);
    _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_2243BC3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _tc_google::protobuf::internal::FunctionClosure0::~FunctionClosure0((_tc_google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

CoreML::Specification::Imputer *CoreML::Specification::Imputer::Imputer(CoreML::Specification::Imputer *this)
{
  *(void *)this = &unk_26D77CAF8;
  *((void *)this + 1) = 0;
  if (this != (CoreML::Specification::Imputer *)&CoreML::Specification::_Imputer_default_instance_) {
    CoreML::Specification::protobuf_Imputer_2eproto::InitDefaults(this);
  }
  *((_DWORD *)this + 1CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 0;
  *((void *)this + 4) = 0;
  return this;
}

void sub_2243BC424(_Unwind_Exception *a1)
{
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void CoreML::Specification::Imputer::~Imputer(CoreML::Specification::Imputer *this)
{
  *(void *)this = &unk_26D77CAF8;
  CoreML::Specification::Imputer::SharedDtor((uint64_t)this);
  _tc_google::protobuf::internal::InternalMetadataWithArenaBase<std::string,_tc_google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  CoreML::Specification::Imputer::~Imputer(this);
  JUMPOUT(0x22A614FA0);
}

uint64_t CoreML::Specification::Imputer::SharedDtor(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 36)) {
    this = CoreML::Specification::Imputer::clear_ImputedValue(this);
  }
  if (*(_DWORD *)(v1 + 40))
  {
    return CoreML::Specification::Imputer::clear_ReplaceValue(v1);
  }
  return this;
}

uint64_t CoreML::Specification::Imputer::clear_ImputedValue(uint64_t this)
{
  uint64_t v1 = this;
  switch(*(_DWORD *)(this + 36))
  {
    case 3:
      uint64_t v2 = *(void *)(this + 16);
      if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
      {
        if (*(char *)(v2 + 23) < 0) {
          operator delete(*(void **)v2);
        }
        this = MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
      }
      break;
    case 4:
    case 5:
    case 6:
    case 7:
      this = *(void *)(this + 16);
      if (this) {
        this = (*(uint64_t (**)(uint64_t))(*(void *)this + 8))(this);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreML::Specification::Imputer::clear_ReplaceValue(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 40) == 13)
  {
    uint64_t v2 = *(void *)(this + 24);
    if ((uint64_t *)v2 != &_tc_google::protobuf::internal::fixed_address_empty_string && v2 != 0)
    {
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
      this = MEMORY[0x22A614FA0](v2, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 4CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 0;
  return this;
}

uint64_t *CoreML::Specification::Imputer::default_instance(CoreML::Specification::Imputer *this)
{
  return &CoreML::Specification::_Imputer_default_instance_;
}

void CoreML::Specification::Imputer::New(CoreML::Specification::Imputer *this, _tc_google::protobuf::Arena *a2)
{
}

void sub_2243BC6DC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A3C40D8CFA532);
  _Unwind_Resume(a1);
}

_tc_google::protobuf::Arena *_tc_google::protobuf::Arena::Own<CoreML::Specification::Imputer>(_tc_google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (_tc_google::protobuf::Arena *)_tc_google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))_tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Imputer>);
  }
  return result;
}

uint64_t CoreML::Specification::Imputer::Clear(CoreML::Specification::Imputer *this)
{
  CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
  return CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
}

uint64_t CoreML::Specification::Imputer::MergePartialFromCodedStream(CoreML::Specification::Imputer *this, char **a2, unsigned int a3)
{
  uint64_t v5 = (std::string **)((char *)this + 24);
  uint64_t v6 = (std::string **)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v7 = *a2;
      if (*a2 < a2[1]) {
        break;
      }
      uint64_t v8 = 0;
LABEL_7:
      unsigned int TagFallback = _tc_google::protobuf::io::CodedInputStream::ReadTagFallback((_tc_google::protobuf::io::CodedInputStream *)a2, v8);
      unint64_t v9 = TagFallback | ((unint64_t)(TagFallback - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0) {
        goto LABEL_8;
      }
LABEL_14:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 9) {
            goto LABEL_8;
          }
          CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
          unint64_t v51 = 0;
          uint64_t v12 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v51);
            if (!result) {
              return result;
            }
            unint64_t v13 = v51;
          }
          else
          {
            unint64_t v13 = *v12;
            *a2 = (char *)(v12 + 1);
          }
          *((void *)this + 2) = v13;
          *((_DWORD *)this + 9) = 1;
          continue;
        case 2u:
          if (v9 != 16) {
            goto LABEL_8;
          }
          CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
          unint64_t v14 = *a2;
          if (*a2 >= a2[1] || *v14 < 0)
          {
            Varint64Fallbacstd::string::size_type k = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v39 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            Varint64Fallbacstd::string::size_type k = *v14;
            *a2 = v14 + 1;
          }
          *((void *)this + 2) = Varint64Fallback;
          *((_DWORD *)this + 9) = 2;
          continue;
        case 3u:
          if (v9 != 26) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 9) != 3)
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 3;
            *((void *)this + 2) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_52:
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (*v6 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_52;
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v6);
          if (!result) {
            return result;
          }
          int v25 = *((_DWORD *)this + 9);
          uint64_t v26 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v25 == 3) {
            uint64_t v26 = *v6;
          }
          if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v26 = (std::string *)v26->__r_.__value_.__r.__words[0];
          }
          unint64_t v27 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v25 == 3) {
            unint64_t v27 = *v6;
          }
          if (SHIBYTE(v27->__r_.__value_.__r.__words[2]) < 0) {
            std::string::size_type size = (const char *)v27->__r_.__value_.__l.__size_;
          }
          else {
            std::string::size_type size = (const char *)HIBYTE(v27->__r_.__value_.__r.__words[2]);
          }
          long long v50 = "CoreML.Specification.Imputer.imputedStringValue";
          goto LABEL_114;
        case 4u:
          if (v9 != 34) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 9) != 4)
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 4;
            operator new();
          }
          uint64_t v16 = *v6;
          uint64_t v29 = *a2;
          if (*a2 >= a2[1] || *v29 < 0)
          {
            int VarintSizeAsIntFallback = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (VarintSizeAsIntFallback < 0) {
              return 0;
            }
          }
          else
          {
            int VarintSizeAsIntFallback = *v29;
            *a2 = v29 + 1;
          }
          unint64_t v41 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, VarintSizeAsIntFallback);
          if ((v41 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v43 = v41;
          uint64_t result = CoreML::Specification::DoubleVector::MergePartialFromCodedStream((CoreML::Specification::DoubleVector *)v16, a2, v42);
          if (!result) {
            return result;
          }
          goto LABEL_108;
        case 5u:
          if (v9 != 42) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 9) != 5)
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 5;
            operator new();
          }
          uint64_t v17 = *v6;
          std::string v31 = *a2;
          if (*a2 >= a2[1] || *v31 < 0)
          {
            int v32 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v32 < 0) {
              return 0;
            }
          }
          else
          {
            int v32 = *v31;
            *a2 = v31 + 1;
          }
          unint64_t v44 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v32);
          if ((v44 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v43 = v44;
          uint64_t result = CoreML::Specification::Int64Vector::MergePartialFromCodedStream((CoreML::Specification::Int64Vector *)v17, a2, v45);
          if (!result) {
            return result;
          }
          goto LABEL_108;
        case 6u:
          if (v9 != 50) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 9) != 6)
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 6;
            operator new();
          }
          uint64_t v18 = *v6;
          char v33 = *a2;
          if (*a2 >= a2[1] || *v33 < 0)
          {
            int v34 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v34 < 0) {
              return 0;
            }
          }
          else
          {
            int v34 = *v33;
            *a2 = v33 + 1;
          }
          unint64_t v46 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v34);
          if ((v46 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v43 = v46;
          uint64_t result = CoreML::Specification::StringToDoubleMap::MergePartialFromCodedStream((CoreML::Specification::StringToDoubleMap *)v18, a2, v47);
          if (!result) {
            return result;
          }
          goto LABEL_108;
        case 7u:
          if (v9 != 58) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 9) != 7)
          {
            CoreML::Specification::Imputer::clear_ImputedValue((uint64_t)this);
            *((_DWORD *)this + 9) = 7;
            operator new();
          }
          std::string::size_type v19 = *v6;
          long long v35 = *a2;
          if (*a2 >= a2[1] || *v35 < 0)
          {
            int v36 = _tc_google::protobuf::io::CodedInputStream::ReadVarintSizeAsIntFallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if (v36 < 0) {
              return 0;
            }
          }
          else
          {
            int v36 = *v35;
            *a2 = v35 + 1;
          }
          unint64_t v48 = _tc_google::protobuf::io::CodedInputStream::IncrementRecursionDepthAndPushLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v36);
          if ((v48 & 0x8000000000000000) != 0) {
            return 0;
          }
          int v43 = v48;
          uint64_t result = CoreML::Specification::Int64ToDoubleMap::MergePartialFromCodedStream((CoreML::Specification::Int64ToDoubleMap *)v19, a2, v49);
          if (!result) {
            return result;
          }
LABEL_108:
          if (_tc_google::protobuf::io::CodedInputStream::DecrementRecursionDepthAndPopLimit((_tc_google::protobuf::io::CodedInputStream *)a2, v43))
          {
            continue;
          }
          return 0;
        case 0xBu:
          if (v9 != 89) {
            goto LABEL_8;
          }
          CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
          unint64_t v51 = 0;
          unsigned int v20 = (unint64_t *)*a2;
          if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
          {
            uint64_t result = _tc_google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback((unint64_t **)a2, &v51);
            if (!result) {
              return result;
            }
            unint64_t v21 = v51;
          }
          else
          {
            unint64_t v21 = *v20;
            *a2 = (char *)(v20 + 1);
          }
          *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v21;
          *((_DWORD *)this + 1CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 11;
          break;
        case 0xCu:
          if (v9 != 96) {
            goto LABEL_8;
          }
          CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
          long long v22 = *a2;
          if (*a2 >= a2[1] || *v22 < 0)
          {
            unint64_t v23 = _tc_google::protobuf::io::CodedInputStream::ReadVarint64Fallback((_tc_google::protobuf::io::CodedInputStream *)a2);
            if ((v40 & 1) == 0) {
              return 0;
            }
          }
          else
          {
            unint64_t v23 = *v22;
            *a2 = v22 + 1;
          }
          *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v23;
          *((_DWORD *)this + 1CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 12;
          continue;
        case 0xDu:
          if (v9 != 106) {
            goto LABEL_8;
          }
          if (*((_DWORD *)this + 10) != 13)
          {
            CoreML::Specification::Imputer::clear_ReplaceValue((uint64_t)this);
            *((_DWORD *)this + 1CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 13;
            *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_79:
            _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          if (*v5 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_79;
          }
          uint64_t result = _tc_google::protobuf::internal::WireFormatLite::ReadBytes(a2, *v5);
          if (!result) {
            return result;
          }
          int v37 = *((_DWORD *)this + 10);
          uint64_t v26 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v37 == 13) {
            uint64_t v26 = *v5;
          }
          if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v26 = (std::string *)v26->__r_.__value_.__r.__words[0];
          }
          char v38 = (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string;
          if (v37 == 13) {
            char v38 = *v5;
          }
          if (SHIBYTE(v38->__r_.__value_.__r.__words[2]) < 0) {
            std::string::size_type size = (const char *)v38->__r_.__value_.__l.__size_;
          }
          else {
            std::string::size_type size = (const char *)HIBYTE(v38->__r_.__value_.__r.__words[2]);
          }
          long long v50 = "CoreML.Specification.Imputer.replaceStringValue";
LABEL_114:
          if (!_tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v26, size, 0, (uint64_t)v50))return 0; {
          continue;
          }
        default:
          goto LABEL_8;
      }
    }
    uint64_t v8 = *v7;
    if (*v7 < 1) {
      goto LABEL_7;
    }
    *a2 = v7 + 1;
    unint64_t v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0) {
      goto LABEL_14;
    }
LABEL_8:
    if (!v9 || (v9 & 7) == 4) {
      return 1;
    }
    if ((_tc_google::protobuf::internal::WireFormatLite::SkipField((_tc_google::protobuf::internal::WireFormatLite *)a2, (_tc_google::protobuf::io::CodedInputStream *)v9, a3) & 1) == 0)return 0; {
  }
    }
}

void sub_2243BCDE8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Imputer::SerializeWithCachedSizes(uint64_t this, _tc_google::protobuf::io::CodedOutputStream *a2, _tc_google::protobuf::io::CodedOutputStream *a3, _tc_google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6 == 1)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(this + 16), a3);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 2)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(2, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 3)
  {
    uint64_t v7 = *(unsigned __int8 **)(v5 + 16);
    if ((char)v7[23] < 0)
    {
      uint64_t v7 = *(unsigned __int8 **)v7;
      uint64_t v8 = *(const char **)(*(void *)(v5 + 16) + 8);
    }
    else
    {
      uint64_t v8 = (const char *)v7[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v7, v8, 1, (uint64_t)"CoreML.Specification.Imputer.imputedStringValue");
    if (*(_DWORD *)(v5 + 36) == 3) {
      unint64_t v9 = *(uint64_t **)(v5 + 16);
    }
    else {
      unint64_t v9 = &_tc_google::protobuf::internal::fixed_address_empty_string;
    }
    this = _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3, (uint64_t)v9, a2);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 4)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)4, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 5)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)5, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 6)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)6, *(void *)(v5 + 16), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
  }
  if (v6 == 7) {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteMessage((_tc_google::protobuf::internal::WireFormatLite *)7, *(void *)(v5 + 16), a2, a4);
  }
  int v10 = *(_DWORD *)(v5 + 40);
  if (v10 == 11)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteDouble((_tc_google::protobuf::internal::WireFormatLite *)0xB, a2, *(double *)(v5 + 24), a3);
    int v10 = *(_DWORD *)(v5 + 40);
  }
  if (v10 == 12)
  {
    this = _tc_google::protobuf::internal::WireFormatLite::WriteInt64(12, *(void *)(v5 + 24), a2, a4);
    int v10 = *(_DWORD *)(v5 + 40);
  }
  if (v10 == 13)
  {
    int v11 = *(unsigned __int8 **)(v5 + 24);
    if ((char)v11[23] < 0)
    {
      int v11 = *(unsigned __int8 **)v11;
      uint64_t v12 = *(const char **)(*(void *)(v5 + 24) + 8);
    }
    else
    {
      uint64_t v12 = (const char *)v11[23];
    }
    _tc_google::protobuf::internal::WireFormatLite::VerifyUtf8String((_tc_google::protobuf::internal *)v11, v12, 1, (uint64_t)"CoreML.Specification.Imputer.replaceStringValue");
    if (*(_DWORD *)(v5 + 40) == 13) {
      unint64_t v13 = *(uint64_t **)(v5 + 24);
    }
    else {
      unint64_t v13 = &_tc_google::protobuf::internal::fixed_address_empty_string;
    }
    return _tc_google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(13, (uint64_t)v13, a2);
  }
  return this;
}

uint64_t CoreML::Specification::Imputer::ByteSizeLong(CoreML::Specification::Imputer *this)
{
  switch(*((_DWORD *)this + 9))
  {
    case 1:
      uint64_t v2 = 9;
      break;
    case 2:
      unint64_t v3 = (9 * (__clz(*((void *)this + 2) | 1) ^ 0x3F) + 73) >> 6;
      goto LABEL_13;
    case 3:
      uint64_t v4 = *((void *)this + 2);
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      unint64_t v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_13;
    case 4:
      uint64_t v7 = CoreML::Specification::DoubleVector::ByteSizeLong(*((CoreML::Specification::DoubleVector **)this + 2));
      goto LABEL_12;
    case 5:
      uint64_t v7 = CoreML::Specification::Int64Vector::ByteSizeLong(*((CoreML::Specification::Int64Vector **)this + 2));
      goto LABEL_12;
    case 6:
      uint64_t v7 = CoreML::Specification::StringToDoubleMap::ByteSizeLong(*((_tc_google::protobuf::Arena ***)this + 2));
      goto LABEL_12;
    case 7:
      uint64_t v7 = CoreML::Specification::Int64ToDoubleMap::ByteSizeLong(*((_tc_google::protobuf::Arena ***)this + 2));
LABEL_12:
      unint64_t v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
LABEL_13:
      uint64_t v2 = v3 + 1;
      break;
    default:
      uint64_t v2 = 0;
      break;
  }
  int v8 = *((_DWORD *)this + 10);
  switch(v8)
  {
    case 13:
      uint64_t v10 = *((void *)this + 3);
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      uint64_t v12 = *(void *)(v10 + 8);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v11;
      }
      uint64_t v13 = v2 + v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_23;
    case 12:
      uint64_t v13 = v2 + ((9 * (__clz(*((void *)this + 3) | 1) ^ 0x3F) + 73) >> 6);
LABEL_23:
      uint64_t result = v13 + 1;
      break;
    case 11:
      uint64_t result = v2 + 9;
      break;
    default:
      uint64_t result = v2;
      break;
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

std::string *CoreML::Specification::Imputer::MergeFrom(std::string *this, const CoreML::Specification::Imputer *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    this = _tc_google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(&this->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  switch(*((_DWORD *)a2 + 9))
  {
    case 1:
      uint64_t v5 = *((void *)a2 + 2);
      if (*(_DWORD *)(v3 + 36) != 1)
      {
        this = (std::string *)CoreML::Specification::Imputer::clear_ImputedValue(v3);
        *(_DWORD *)(v3 + 36) = 1;
      }
      *(void *)(v3 + 16) = v5;
      goto LABEL_27;
    case 2:
      uint64_t v6 = *((void *)a2 + 2);
      if (*(_DWORD *)(v3 + 36) != 2)
      {
        this = (std::string *)CoreML::Specification::Imputer::clear_ImputedValue(v3);
        *(_DWORD *)(v3 + 36) = 2;
      }
      *(void *)(v3 + 16) = v6;
      goto LABEL_27;
    case 3:
      if (*(_DWORD *)(v3 + 36) != 3)
      {
        CoreML::Specification::Imputer::clear_ImputedValue(v3);
        *(_DWORD *)(v3 + 36) = 3;
        *(void *)(v3 + 16) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_22:
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t v7 = *(std::string **)(v3 + 16);
      if (v7 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_22;
      }
      this = std::string::operator=(v7, *((const std::string **)a2 + 2));
LABEL_27:
      int v8 = *((_DWORD *)a2 + 10);
      if (v8 != 13)
      {
        if (v8 == 12)
        {
          uint64_t v12 = *((void *)a2 + 3);
          if (*(_DWORD *)(v3 + 40) != 12)
          {
            this = (std::string *)CoreML::Specification::Imputer::clear_ReplaceValue(v3);
            *(_DWORD *)(v3 + 4CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 12;
          }
          *(void *)(v3 + 24) = v12;
        }
        else if (v8 == 11)
        {
          uint64_t v9 = *((void *)a2 + 3);
          if (*(_DWORD *)(v3 + 40) != 11)
          {
            this = (std::string *)CoreML::Specification::Imputer::clear_ReplaceValue(v3);
            *(_DWORD *)(v3 + 4CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 11;
          }
          *(void *)(v3 + 24) = v9;
        }
        return this;
      }
      uint64_t v10 = (const std::string *)*((void *)a2 + 3);
      if (*(_DWORD *)(v3 + 40) != 13)
      {
        CoreML::Specification::Imputer::clear_ReplaceValue(v3);
        *(_DWORD *)(v3 + 4CoreML::Specification::TreeEnsembleRegressor::New(this, 0) = 13;
        *(void *)(v3 + 24) = &_tc_google::protobuf::internal::fixed_address_empty_string;
LABEL_43:
        _tc_google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t v11 = *(std::string **)(v3 + 24);
      if (v11 == (std::string *)&_tc_google::protobuf::internal::fixed_address_empty_string) {
        goto LABEL_43;
      }
      return std::string::operator=(v11, v10);
    case 4:
      if (*(_DWORD *)(v3 + 36) != 4)
      {
        CoreML::Specification::Imputer::clear_ImputedValue(v3);
        *(_DWORD *)(v3 + 36) = 4;
        operator new();
      }
      goto LABEL_14;
    case 5:
      if (*(_DWORD *)(v3 + 36) != 5)
      {
        CoreML::Specification::Imputer::clear_ImputedValue(v3);
        *(_DWORD *)(v3 + 36) = 5;
        operator new();
      }
LABEL_14:
      this = (std::string *)CoreML::Specification::GLMRegressor_DoubleArray::MergeFrom(*(unint64_t **)(v3 + 16), *((const CoreML::Specification::GLMRegressor_DoubleArray **)a2 + 2));
      goto LABEL_27;
    case 6:
      if (*(_DWORD *)(v3 + 36) != 6)
      {
        CoreML::Specification::Imputer::clear_ImputedValue(v3);
        *(_DWORD *)(v3 + 36) = 6;
        operator new();
      }
      this = (std::string *)CoreML::Specification::StringToDoubleMap::MergeFrom(*(CoreML::Specification::StringToDoubleMap **)(v3 + 16), *((const CoreML::Specification::StringToDoubleMap **)a2 + 2));
      goto LABEL_27;
    case 7:
      if (*(_DWORD *)(v3 + 36) != 7)
      {
        CoreML::Specification::Imputer::clear_ImputedValue(v3);
        *(_DWORD *)(v3 + 36) = 7;
        operator new();
      }
      this = (std::string *)CoreML::Specification::Int64ToDoubleMap::MergeFrom(*(CoreML::Specification::Int64ToDoubleMap **)(v3 + 16), *((const CoreML::Specification::Int64ToDoubleMap **)a2 + 2));
      goto LABEL_27;
    default:
      goto LABEL_27;
  }
}

void sub_2243BD5B4(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C407031D3CFLL);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::Imputer::IsInitialized(CoreML::Specification::Imputer *this)
{
  return 1;
}

void *CoreML::Specification::Imputer::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CoreML.Specification.Imputer");
}

void CoreML::Specification::Imputer::New(CoreML::Specification::Imputer *this)
{
}

uint64_t _tc_google::protobuf::internal::arena_delete_object<CoreML::Specification::Imputer>(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void turi::export_xgboost_model(uint64_t **a1, uint64_t *a2, int a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v4 = (const void **)(*a1)[3];
  char v28 = a3;
  if (a3)
  {
    if (*((char *)v4 + 23) >= 0) {
      size_t v5 = *((unsigned __int8 *)v4 + 23);
    }
    else {
      size_t v5 = (size_t)v4[1];
    }
    uint64_t v6 = &v45;
    std::string::basic_string[abi:ne180100]((uint64_t)&v45, v5 + 11);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v6 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if (*((char *)v4 + 23) >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *v4;
      }
      memmove(v6, v7, v5);
    }
    strcpy((char *)v6 + v5, "Probability");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    CoreML::Pipeline::Classifier((const std::string *)v4, &v45, &__p, (uint64_t *)&v49);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "");
    CoreML::Pipeline::Regressor((const std::string *)v4, &v45, (uint64_t *)&v49);
  }
  std::allocate_shared[abi:ne180100]<CoreML::Pipeline,std::allocator<CoreML::Pipeline>,CoreML::Pipeline,void>((const CoreML::Model *)&v49, &v46);
  CoreML::Pipeline::~Pipeline((CoreML::Pipeline *)&v49);
  if ((v28 & 1) != 0 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  int v8 = v46;
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  unsigned int v42 = *a1;
  int v43 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::setup_pipeline_from_mldata((uint64_t)v8, &v42);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  v41[1] = 0;
  v41[0] = 0;
  char v40 = v41;
  uint64_t v10 = **a1;
  if ((*a1)[1] != v10)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = (uint64_t *)(v10 + 16 * v11);
      uint64_t v14 = *v12;
      uint64_t v13 = (std::__shared_weak_count *)v12[1];
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        int v15 = *(unsigned __int8 *)(v14 + 28);
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      else
      {
        int v15 = *(unsigned __int8 *)(v14 + 28);
      }
      if (v15 == 5)
      {
        for (unint64_t i = 0; ; ++i)
        {
          uint64_t v17 = (uint64_t *)(**a1 + 16 * v11);
          uint64_t v19 = *v17;
          uint64_t v18 = (std::__shared_weak_count *)v17[1];
          if (v18)
          {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v20 = *(void *)(v19 + 64);
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          else
          {
            unint64_t v20 = *(void *)(v19 + 64);
          }
          if (i >= v20) {
            break;
          }
          unint64_t v21 = (uint64_t *)(**a1 + 16 * v11);
          uint64_t v23 = *v21;
          long long v22 = (std::__shared_weak_count *)v21[1];
          if (v22)
          {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v24 = *(void *)(v23 + 104);
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          else
          {
            uint64_t v24 = *(void *)(v23 + 104);
          }
          v49.__begin_ = (std::vector<std::string>::pointer)(v24 + i);
          std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(&v40, (unint64_t *)&v49, (uint64_t *)&v49);
        }
      }
      ++v11;
      uint64_t v10 = **a1;
    }
    while (v11 < ((*a1)[1] - v10) >> 4);
  }
  CoreML::FeatureType::Double(&v39);
  memset(&v38[2], 0, 24);
  CoreML::FeatureType::Double(v38);
  uint64_t v25 = *a2;
  uint64_t v26 = a2[1];
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - *a2) >> 3);
  memset(&v49, 0, sizeof(v49));
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v49, v25, v26, v27);
  turi::gl_sarray::gl_sarray(v37, &v49, 7);
  unsigned int v47 = &v49;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  turi::gl_sarray::astype((uint64_t)v37, (uint64_t)&v47);
  std::string::basic_string[abi:ne180100]<0>(&v36, "X");
  size_t v34 = 0;
  size_t __idx = 0;
  uint64_t v35 = 0;
  memset(v32, 0, sizeof(v32));
  turi::gl_sarray::unpack((turi::gl_sarray *)&v47, (uint64_t)&__idx, (uint64_t **)v32, (uint64_t)&v48);
  std::string::basic_string[abi:ne180100]<0>(v30, "X.vertices");
  turi::gl_sframe::operator[]((uint64_t)&v48, (uint64_t)v30, (turi::gl_sarray *)&v49);
  turi::gl_sarray::operator=((uint64_t)v37, (uint64_t)&v49);
  v49.__begin_ = (std::vector<std::string>::pointer)&unk_26D759E80;
  if (v51 < 0) {
    operator delete(v50);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v49);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D759E10;
  if (v48.__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v48.__r_.__value_.__r.__words[2]);
  }
  v30[0] = (CoreML::TreeEnsembleBase *)v32;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v30);
  if (__idx)
  {
    size_t v34 = __idx;
    operator delete((void *)__idx);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v47);
  v30[0] = 0;
  v30[1] = 0;
  if (v28) {
    operator new();
  }
  operator new();
}

void sub_2243BEAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, boost::detail::shared_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v71 - 169) < 0) {
    operator delete(*(void **)(v71 - 192));
  }
  if (*(char *)(v71 - 201) < 0)
  {
    operator delete(*(void **)(v71 - 224));
    if ((v69 & 1) == 0)
    {
LABEL_8:
      uint64_t v73 = (void *)STACK[0x220];
      if (STACK[0x220])
      {
        STACK[0x228] = (unint64_t)v73;
        operator delete(v73);
      }
      if (v70) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
      if (a68) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a68);
      }
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&STACK[0x238]);
      if (STACK[0x268]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x268]);
      }
      if (SLOBYTE(STACK[0x287]) < 0) {
        operator delete((void *)STACK[0x270]);
      }
      if (STACK[0x298]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x298]);
      }
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&STACK[0x2A8], (void *)STACK[0x2B0]);
      if (STACK[0x308]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x308]);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v69)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v68);
  goto LABEL_8;
}

void std::shared_ptr<CoreML::TreeEnsembleBase>::reset[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(&v2, a2);
}

void std::shared_ptr<CoreML::TreeEnsembleBase>::reset[abi:ne180100]<CoreML::TreeEnsembleClassifier,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleClassifier,void>(&v2, a2);
}

void turi::export_xgboost_model(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::string> const&,BOOL,BOOL,std::map<std::string,turi::flexible_type> const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/coreml_export/xgboost_exporter.cpp", 109);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  long long v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"n", 1);
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 32;
  int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/toolkits/coreml_export/xgboost_exporter.cpp", "operator()", 220, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::export_xgboost_model(std::shared_ptr<turi::ml_metadata> const&,std::vector<std::string> const&,BOOL,BOOL,std::map<std::string,turi::flexible_type> const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2243BF20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2243BF378(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CoreML::TreeEnsembleRegressor *,std::shared_ptr<CoreML::TreeEnsembleBase>::__shared_ptr_default_delete<CoreML::TreeEnsembleBase,CoreML::TreeEnsembleRegressor>,std::allocator<CoreML::TreeEnsembleRegressor>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreML::TreeEnsembleRegressor *,std::shared_ptr<CoreML::TreeEnsembleBase>::__shared_ptr_default_delete<CoreML::TreeEnsembleBase,CoreML::TreeEnsembleRegressor>,std::allocator<CoreML::TreeEnsembleRegressor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleClassifier,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2243BF46C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<CoreML::TreeEnsembleBase>::shared_ptr[abi:ne180100]<CoreML::TreeEnsembleRegressor,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<CoreML::TreeEnsembleClassifier *,std::shared_ptr<CoreML::TreeEnsembleBase>::__shared_ptr_default_delete<CoreML::TreeEnsembleBase,CoreML::TreeEnsembleClassifier>,std::allocator<CoreML::TreeEnsembleClassifier>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<CoreML::TreeEnsembleClassifier *,std::shared_ptr<CoreML::TreeEnsembleBase>::__shared_ptr_default_delete<CoreML::TreeEnsembleBase,CoreML::TreeEnsembleClassifier>,std::allocator<CoreML::TreeEnsembleClassifier>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::map<std::string,turi::flexible_type>::map[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t a1, turi::flexible_type_impl *a2, turi::flexible_type_impl *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_impl<std::pair<turi::flexible_type,turi::flexible_type> const&>((uint64_t **)a1, v4, v6);
      uint64_t v6 = (turi::flexible_type_impl *)((char *)v6 + 32);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2243BF560(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_hint_unique_impl<std::pair<turi::flexible_type,turi::flexible_type> const&>(uint64_t **a1, uint64_t *a2, turi::flexible_type_impl *a3)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<turi::flexible_type,turi::flexible_type> const&>((uint64_t)a1, a3, (uint64_t)v10);
  size_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>(a1, a2, &v9, &v8, (const void **)v10[0] + 4);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v5, v10[0]);
    uint64_t v6 = v10[0];
    v10[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  return v6;
}

void sub_2243BF5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<turi::flexible_type,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, turi::flexible_type_impl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2243BF668(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(std::string *this, turi::flexible_type_impl *a2)
{
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_4;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_4:
      v11[0] = *MEMORY[0x263F8C2B8];
      uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      void v11[2] = v4;
      void v11[3] = MEMORY[0x263F8C318] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v13);
      break;
    case 2:
      uint64_t v5 = *(void *)a2;
      if (*(char *)(*(void *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(v5 + 8), *(void *)(v5 + 16));
      }
      else
      {
        long long v6 = *(_OWORD *)(v5 + 8);
        this->__r_.__value_.__r.__words[2] = *(void *)(v5 + 24);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      break;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v11, (void *)(*(void *)a2 + 8));
      break;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v11, (uint64_t *)(*(void *)a2 + 8));
      break;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v11, (void *)(*(void *)a2 + 8));
      break;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()(a2, this);
      break;
    case 7:
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
      this->__r_.__value_.__r.__words[2] = 0;
      break;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      break;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v11, (void *)(*(void *)a2 + 8));
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = (atomic_ullong *volatile *)&this[1];
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  this[1].__r_.__value_.__s.__data_[12] = 0;
  if ((std::string *)((char *)a2 + 16) != &this[1])
  {
    uint64_t v8 = (atomic_ullong *)*((void *)a2 + 2);
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 5) = *(void *)((char *)a2 + 21);
    atomic_ullong *volatile *v7 = v8;
    unsigned int v9 = *((unsigned __int8 *)a2 + 28);
    this[1].__r_.__value_.__s.__data_[12] = v9;
    if (v9 <= 9 && ((1 << v9) & 0x33C) != 0) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  return this;
}

void sub_2243BF990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<unsigned long>(unsigned int *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  v5[0] = &v4;
  if ((boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<unsigned long>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ ((int)*a1 >> 31)) & 1) == 0)
  {
    v5[1] = *a2;
    int v6 = 0;
    char v7 = 0;
    LODWORD(v5[0]) = 0;
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign(a1, (unsigned int *)v5);
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)v5);
  }
}

void sub_2243BFA78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<unsigned long>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9) {
    boost::detail::variant::forced_return<void>(a1);
  }
  return 0;
}

uint64_t boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::move_assign<std::vector<turi::flexible_type>>(int *a1, uint64_t a2)
{
  v3[11] = *MEMORY[0x263EF8340];
  v3[0] = a2;
  v3[1] = v3;
  uint64_t result = boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<std::vector<turi::flexible_type>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>((boost::detail::variant *)*a1, *a1 ^ (*a1 >> 31));
  if ((result & 1) == 0) {
    boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::convert_construct<std::vector<turi::flexible_type>>();
  }
  return result;
}

void sub_2243BFBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::variant::visitation_impl<mpl_::int_<0>,boost::detail::variant::visitation_impl_step<boost::mpl::l_iter<boost::mpl::l_item<mpl_::long_<9l>,turi::flexible_type,boost::mpl::l_item<mpl_::long_<8l>,std::shared_ptr<turi::unity_sgraph_base>,boost::mpl::l_item<mpl_::long_<7l>,turi::dataframe_t,boost::mpl::l_item<mpl_::long_<6l>,std::shared_ptr<turi::model_base>,boost::mpl::l_item<mpl_::long_<5l>,std::shared_ptr<turi::unity_sframe_base>,boost::mpl::l_item<mpl_::long_<4l>,std::shared_ptr<turi::unity_sarray_base>,boost::mpl::l_item<mpl_::long_<3l>,boost::recursive_wrapper<std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<2l>,boost::recursive_wrapper<std::vector<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>,boost::mpl::l_item<mpl_::long_<1l>,boost::recursive_wrapper<turi::function_closure_info>,boost::mpl::l_end>>>>>>>>>>,boost::mpl::l_iter<boost::mpl::l_end>>,boost::detail::variant::invoke_visitor<boost::detail::variant::direct_mover<std::vector<turi::flexible_type>>,false>,void *,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::has_fallback_type_>(boost::detail::variant *a1, unsigned int a2)
{
  if (a2 >= 9) {
    boost::detail::variant::forced_return<void>(a1);
  }
  return 0;
}

void turi::evaluation::get_index_map(uint64_t *a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v8 = *a1;
  unsigned int v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::gl_sarray::gl_sarray(v10, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  int v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::gl_sarray::gl_sarray(v7, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  turi::gl_sarray::unique((turi::gl_sarray *)v10);
}

void sub_2243C0078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v35);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a12);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a19);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&a26);
  _Unwind_Resume(a1);
}

void turi::evaluation::_supervised_streaming_evaluator(turi::unity_sarray **a1, turi::unity_sarray **a2, unsigned __int16 *a3, void *a4)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  turi::unity_sarray::get_underlying_sarray(*a1, &v32);
  turi::unity_sarray::get_underlying_sarray(*a2, &v31);
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v29 = v30;
  uint64_t v10 = (void *)*a4;
  uint64_t v8 = a4 + 1;
  unsigned int v9 = v10;
  if (v10 != v8)
  {
    do
    {
      memset(v34, 0, 13);
      turi::flexible_type_internals::ft_converter<1>::set<turi::flexible_type const&>((uint64_t)v34, v9 + 7);
      *(long long **)&v36[5] = *(long long **)((char *)v34 + 5);
      *(long long **)std::string v36 = v34[0];
      v36[12] = BYTE4(v34[1]);
      LODWORD(__p) = 0;
      v34[0] = (long long *)(v9 + 4);
      uint64_t v11 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v29, (const void **)v9 + 4, (uint64_t)&std::piecewise_construct, v34);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::variant_assign((unsigned int *)v11 + 14, (unsigned int *)&__p);
      boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>::destroy_content((unsigned int *)&__p);
      char v12 = (void *)v9[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          char v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v9[2];
          BOOL v16 = *v13 == (void)v9;
          unsigned int v9 = v13;
        }
        while (!v16);
      }
      unsigned int v9 = v13;
    }
    while (v13 != v8);
  }
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v18 = *((void *)a3 + 1);
    if (v18 == 3 && **(_WORD **)a3 == 30049 && *(unsigned char *)(*(void *)a3 + 2) == 99) {
      goto LABEL_50;
    }
    if (v18 == 9)
    {
      if (**(void **)a3 == 0x767275635F636F72 && *(unsigned char *)(*(void *)a3 + 8) == 101) {
        goto LABEL_50;
      }
      uint64_t v18 = *((void *)a3 + 1);
    }
    if (v18 == 14)
    {
      if (**(void **)a3 == 0x6C5F7972616E6962 && *(void *)(*(void *)a3 + 6) == 0x73736F6C676F6C5FLL) {
        goto LABEL_50;
      }
      uint64_t v18 = *((void *)a3 + 1);
    }
    if (v18 != 18) {
      goto LABEL_55;
    }
    long long v22 = *(unsigned __int16 **)a3;
  }
  else
  {
    unsigned int v14 = *((unsigned __int8 *)a3 + 23);
    if (v14 <= 0xD)
    {
      if (v14 == 3)
      {
        int v15 = *((unsigned __int8 *)a3 + 2);
        BOOL v16 = *a3 == 30049;
        int v17 = 99;
      }
      else
      {
        if (v14 != 9) {
          goto LABEL_55;
        }
        int v15 = *((unsigned __int8 *)a3 + 8);
        BOOL v16 = *(void *)a3 == 0x767275635F636F72;
        int v17 = 101;
      }
LABEL_39:
      if (!v16 || v15 != v17) {
        goto LABEL_55;
      }
      goto LABEL_50;
    }
    if (v14 == 14)
    {
      if (*(void *)a3 != 0x6C5F7972616E6962 || *(void *)(a3 + 3) != 0x73736F6C676F6C5FLL)
      {
LABEL_55:
        turi::evaluation::get_evaluator_metric(a3, (uint64_t)&v29, &v33);
        turi::sarray<turi::flexible_type>::get_reader(v32);
      }
LABEL_50:
      std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
      uint64_t v27 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)&v29, (const void **)&__p);
      uint64_t v28 = v27;
      if (v37 < 0)
      {
        operator delete(__p);
        if (v28) {
          goto LABEL_55;
        }
      }
      else if (v27)
      {
        goto LABEL_55;
      }
      turi::evaluation::get_index_map((uint64_t *)a1, (uint64_t *)a2);
    }
    long long v22 = a3;
    if (v14 != 18) {
      goto LABEL_55;
    }
  }
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *((void *)v22 + 1);
  int v15 = v22[8];
  BOOL v16 = v23 == 0x616C6369746C756DLL && v24 == 0x6F6C676F6C5F7373;
  int v17 = 29555;
  goto LABEL_39;
}

void sub_2243C0830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::get_evaluator_metric@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v164 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  int v6 = *((unsigned __int8 *)a1 + 23);
  if ((v6 & 0x80) != 0)
  {
    uint64_t v9 = a1[1];
    if (v9 == 4 && *(_DWORD *)*a1 == 1702063474)
    {
LABEL_70:
      int v17 = &unk_26D77CCE8;
      std::string __p = &unk_26D77CCE8;
      uint64_t v139 = 0;
      *(_OWORD *)uint64_t v140 = 0u;
      *(_OWORD *)long long v141 = 0u;
      long long v142 = 0u;
      std::allocate_shared[abi:ne180100]<turi::evaluation::rmse,std::allocator<turi::evaluation::rmse>,turi::evaluation::rmse,void>((uint64_t)&__p, v163);
      goto LABEL_71;
    }
    if (v9 == 9)
    {
      if (*(void *)*a1 == 0x6F7272655F78616DLL && *(unsigned char *)(*a1 + 8) == 114)
      {
LABEL_63:
        uint64_t v23 = (atomic_ullong *)operator new(0x40uLL);
        v23[1] = 0;
        int v23[2] = 0;
        *uint64_t v23 = (atomic_ullong)&unk_26D77CD68;
        void v23[3] = (atomic_ullong)&unk_26D77CDB8;
        *((_OWORD *)v23 + 2) = 0u;
        *((_OWORD *)v23 + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = 0u;
        *a3 = v23 + 3;
        a3[1] = v23;
        goto LABEL_87;
      }
      uint64_t v9 = a1[1];
    }
    if (v9 == 23)
    {
      if (*(void *)*a1 == 0x6F697375666E6F63
        && *(void *)(*a1 + 8) == 0x78697274616D5F6ELL
        && *(void *)(*a1 + 15) == 0x70616D5F6F6E5F78)
      {
LABEL_67:
        v153[1] = 0;
        v153[0] = 0;
        long long v152 = v153;
        turi::evaluation::confusion_matrix::confusion_matrix((uint64_t)&__p, (uint64_t)&v152);
        uint64_t v28 = operator new(0xD0uLL);
        v28[1] = 0;
        v28[2] = 0;
        *uint64_t v28 = &unk_26D77CE28;
        std::allocator<turi::evaluation::confusion_matrix>::construct[abi:ne180100]<turi::evaluation::confusion_matrix,turi::evaluation::confusion_matrix>((uint64_t)v163, v28 + 3, (uint64_t)&__p);
        *a3 = v28 + 3;
        a3[1] = v28;
        std::string __p = &unk_26D77CE78;
        std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v146);
        std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v145);
        std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v143, v144);
        std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)&v141[1]);
        *(void *)&v163[0] = &v139;
        std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v163);
        uint64_t v26 = (void *)v153[0];
        uint64_t v27 = &v152;
        goto LABEL_68;
      }
      uint64_t v9 = a1[1];
    }
    if (v9 != 16)
    {
LABEL_32:
      if (v9 != 8)
      {
LABEL_35:
        if (v9 == 14)
        {
          char v7 = (uint64_t *)*a1;
LABEL_55:
          uint64_t v18 = *v7;
          uint64_t v19 = *(uint64_t *)((char *)v7 + 6);
          if (v18 == 0x6C5F7972616E6962 && v19 == 0x73736F6C676F6C5FLL)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
            unint64_t v21 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
            turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get(v21, (uint64_t)v163);
            if (SHIBYTE(v140[0]) < 0) {
              operator delete(__p);
            }
            std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)v150, (uint64_t)v163);
            turi::evaluation::binary_logloss::binary_logloss((uint64_t)&__p, (uint64_t)v150);
            std::make_shared[abi:ne180100]<turi::evaluation::binary_logloss,turi::evaluation::binary_logloss,void>((uint64_t)&__p, &v162);
            long long v22 = v162;
            long long v162 = 0uLL;
            *(_OWORD *)a3 = v22;
            turi::evaluation::binary_logloss::~binary_logloss((turi::evaluation::binary_logloss *)&__p);
            std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v150);
            goto LABEL_86;
          }
        }
        goto LABEL_75;
      }
      if (*(void *)*a1 != 0x7963617275636361)
      {
        uint64_t v9 = a1[1];
        goto LABEL_35;
      }
LABEL_54:
      int v17 = &unk_26D77CF38;
      std::string __p = &unk_26D77CF38;
      uint64_t v139 = 0;
      *(_OWORD *)uint64_t v140 = 0u;
      *(_OWORD *)long long v141 = 0u;
      long long v142 = 0u;
      std::allocate_shared[abi:ne180100]<turi::evaluation::classifier_accuracy,std::allocator<turi::evaluation::classifier_accuracy>,turi::evaluation::classifier_accuracy,void>((uint64_t)&__p, v163);
LABEL_71:
      long long v29 = v163[0];
      v163[0] = 0uLL;
      *(_OWORD *)a3 = v29;
      std::string __p = v17;
      if (v141[1])
      {
        *(void **)&long long v142 = v141[1];
        operator delete(v141[1]);
      }
      uint64_t v23 = (atomic_ullong *)v140[0];
      if (v140[0])
      {
        v140[1] = v140[0];
        operator delete(v140[0]);
      }
      goto LABEL_87;
    }
    if (*(void *)*a1 != 0x6F697375666E6F63 || *(void *)(*a1 + 8) != 0x78697274616D5F6ELL)
    {
      uint64_t v9 = a1[1];
      goto LABEL_32;
    }
LABEL_64:
    std::string::basic_string[abi:ne180100]<0>(&__p, "inv_index_map");
    uint64_t v24 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<std::map<unsigned long,turi::flexible_type>,void>::get(v24, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::map<unsigned long,turi::flexible_type>::map[abi:ne180100](v151, (uint64_t)v163);
    turi::evaluation::confusion_matrix::confusion_matrix((uint64_t)&__p, (uint64_t)v151);
    uint64_t v25 = operator new(0xD0uLL);
    v25[1] = 0;
    v25[2] = 0;
    *uint64_t v25 = &unk_26D77CE28;
    std::allocator<turi::evaluation::confusion_matrix>::construct[abi:ne180100]<turi::evaluation::confusion_matrix,turi::evaluation::confusion_matrix>((uint64_t)&v162, v25 + 3, (uint64_t)&__p);
    *a3 = v25 + 3;
    a3[1] = v25;
    std::string __p = &unk_26D77CE78;
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v146);
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)v145);
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)&v143, v144);
    std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)&v141[1]);
    *(void *)&long long v162 = &v139;
    std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)v151, (void *)v151[1]);
    uint64_t v26 = (void *)*((void *)&v163[0] + 1);
    uint64_t v27 = v163;
LABEL_68:
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)v27, v26);
    goto LABEL_87;
  }
  char v7 = a1;
  switch(*((unsigned char *)a1 + 23))
  {
    case 8:
      goto LABEL_53;
    case 9:
      if (*a1 == 0x6F7272655F78616DLL && *((unsigned char *)a1 + 8) == 114) {
        goto LABEL_63;
      }
      goto LABEL_52;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xF:
      break;
    case 0xE:
      goto LABEL_55;
    case 0x10:
      if (*a1 == 0x6F697375666E6F63 && a1[1] == 0x78697274616D5F6ELL) {
        goto LABEL_64;
      }
      char v7 = a1;
      if (v6 == 14) {
        goto LABEL_55;
      }
LABEL_52:
      if (v6 != 8) {
        break;
      }
LABEL_53:
      if (*a1 == 0x7963617275636361) {
        goto LABEL_54;
      }
      break;
    default:
      if (v6 == 4)
      {
        if (*(_DWORD *)a1 != 1702063474) {
          break;
        }
        goto LABEL_70;
      }
      if (v6 == 23)
      {
        BOOL v14 = *a1 == 0x6F697375666E6F63 && a1[1] == 0x78697274616D5F6ELL;
        if (v14 && *(void *)((char *)a1 + 15) == 0x70616D5F6F6E5F78) {
          goto LABEL_67;
        }
      }
      break;
  }
LABEL_75:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "multiclass_logloss")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "log_loss"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
    uint64_t v30 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get(v30, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
    uint64_t v31 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)&__p);
    uint64_t v32 = v31;
    if (SHIBYTE(v140[0]) < 0)
    {
      operator delete(__p);
      if (v32)
      {
LABEL_81:
        std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
        char v33 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
        unint64_t v34 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v162, v33);
        if (SHIBYTE(v140[0]) < 0) {
          operator delete(__p);
        }
        goto LABEL_85;
      }
    }
    else if (v31)
    {
      goto LABEL_81;
    }
    unint64_t v34 = -1;
LABEL_85:
    turi::evaluation::multiclass_logloss::multiclass_logloss((uint64_t)&__p, (uint64_t)v163, v34);
    std::make_shared[abi:ne180100]<turi::evaluation::multiclass_logloss,turi::evaluation::multiclass_logloss,void>((uint64_t)&__p, &v162);
    long long v35 = v162;
    long long v162 = 0uLL;
    *(_OWORD *)a3 = v35;
    turi::evaluation::multiclass_logloss::~multiclass_logloss((turi::evaluation::multiclass_logloss *)&__p);
LABEL_86:
    uint64_t v23 = (atomic_ullong *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v163);
    goto LABEL_87;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "roc_curve"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    uint64_t v38 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v38, (uint64_t)&v162);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "binary");
    uint64_t v39 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    char v40 = turi::variant_converter<BOOL,void>::get((uint64_t)v163, v39);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
    unint64_t v41 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get(v41, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
    uint64_t v42 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)&__p);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    if (v42)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
      int v43 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
      unint64_t v44 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v149, v43);
      if (SHIBYTE(v140[0]) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      unint64_t v44 = -1;
    }
    std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)v148, (uint64_t)v163);
    *(atomic_ullong **)((char *)v161 + 5) = *(atomic_ullong **)((char *)&v162 + 5);
    v161[0] = (atomic_ullong *)v162;
    BYTE4(v161[1]) = BYTE12(v162);
    if (BYTE12(v162) <= 9u && ((1 << SBYTE12(v162)) & 0x33C) != 0) {
      atomic_fetch_add(v161[0], 1uLL);
    }
    turi::evaluation::roc_curve::roc_curve((uint64_t)&__p, (uint64_t)v148, (turi::evaluation *)v161, v40, v44);
    std::make_shared[abi:ne180100]<turi::evaluation::roc_curve,turi::evaluation::roc_curve,void>((uint64_t)&__p, &v149);
    long long v58 = v149;
    long long v149 = 0uLL;
    uint64_t v59 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v58;
    if (v59)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      if (*((void *)&v149 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v149 + 1));
      }
    }
    turi::evaluation::roc_curve::~roc_curve((turi::evaluation::roc_curve *)&__p);
    switch(BYTE4(v161[1]))
    {
      case 2:
        if (atomic_fetch_add(v161[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v60 = v161[0];
          if (v161[0])
          {
            if (*((char *)v161[0] + 31) < 0) {
              operator delete(*((void **)v161[0] + 1));
            }
            uint64_t v61 = v60;
            uint64_t v62 = 0x1012C404EF22A49;
            goto LABEL_187;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v161[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v76 = v161[0];
          if (v161[0])
          {
            long long v77 = (void *)v161[0][1];
            if (v77)
            {
              v161[0][2] = (atomic_ullong)v77;
              operator delete(v77);
            }
            uint64_t v61 = v76;
            uint64_t v62 = 0x1080C409938AC02;
            goto LABEL_187;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v161[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v74 = v161[0];
          if (v161[0])
          {
            uint64_t v154 = (void **)(v161[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v154);
            goto LABEL_182;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v161[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v74 = v161[0];
          if (v161[0])
          {
            uint64_t v154 = (void **)(v161[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v154);
LABEL_182:
            uint64_t v61 = v74;
            uint64_t v62 = 0x1020C405E66F15BLL;
            goto LABEL_187;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v161[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v78 = v161[0];
          if (v161[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v161[0] + 2);
            uint64_t v61 = v78;
            unsigned int v75 = -235920773;
            goto LABEL_186;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v161[0], 0xFFFFFFFFFFFFFFFFLL) == 1 && v161[0])
        {
          uint64_t v61 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v161[0]);
          unsigned int v75 = 2071181815;
LABEL_186:
          uint64_t v62 = v75 | 0x1030C4000000000;
LABEL_187:
          MEMORY[0x22A614FA0](v61, v62);
        }
        break;
      default:
        break;
    }
    memset(v161, 0, 13);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v148);
    uint64_t v23 = (atomic_ullong *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v163);
    switch(BYTE12(v162))
    {
      case 2:
        goto LABEL_225;
      case 3:
        goto LABEL_234;
      case 4:
        goto LABEL_228;
      case 5:
        goto LABEL_237;
      case 8:
        goto LABEL_240;
      case 9:
        goto LABEL_231;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "auc"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    std::string v45 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v45, (uint64_t)&v162);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "binary");
    unint64_t v46 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    char v47 = turi::variant_converter<BOOL,void>::get((uint64_t)v163, v46);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
    std::string v48 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get(v48, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
    uint64_t v49 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(a2, (const void **)&__p);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    if (v49)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "num_classes");
      long long v50 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
      unint64_t v51 = turi::variant_converter<unsigned long,void>::get((uint64_t)&v149, v50);
      if (SHIBYTE(v140[0]) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      unint64_t v51 = -1;
    }
    std::unordered_map<turi::flexible_type,unsigned long>::unordered_map((uint64_t)v147, (uint64_t)v163);
    *(atomic_ullong **)((char *)v160 + 5) = *(atomic_ullong **)((char *)&v162 + 5);
    v160[0] = (atomic_ullong *)v162;
    BYTE4(v160[1]) = BYTE12(v162);
    if (BYTE12(v162) <= 9u && ((1 << SBYTE12(v162)) & 0x33C) != 0) {
      atomic_fetch_add(v160[0], 1uLL);
    }
    turi::evaluation::auc::auc((uint64_t)&__p, (uint64_t)v147, (turi::evaluation *)v160, v47, v51);
    std::make_shared[abi:ne180100]<turi::evaluation::auc,turi::evaluation::auc,void>((uint64_t)&__p, &v149);
    long long v69 = v149;
    long long v149 = 0uLL;
    unint64_t v70 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v69;
    if (v70)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      if (*((void *)&v149 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v149 + 1));
      }
    }
    turi::evaluation::roc_curve::~roc_curve((turi::evaluation::roc_curve *)&__p);
    switch(BYTE4(v160[1]))
    {
      case 2:
        if (atomic_fetch_add(v160[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v71 = v160[0];
          if (v160[0])
          {
            if (*((char *)v160[0] + 31) < 0) {
              operator delete(*((void **)v160[0] + 1));
            }
            char v72 = v71;
            uint64_t v73 = 0x1012C404EF22A49;
            goto LABEL_223;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v160[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          int v87 = v160[0];
          if (v160[0])
          {
            uint64_t v88 = (void *)v160[0][1];
            if (v88)
            {
              v160[0][2] = (atomic_ullong)v88;
              operator delete(v88);
            }
            char v72 = v87;
            uint64_t v73 = 0x1080C409938AC02;
            goto LABEL_223;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v160[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v85 = v160[0];
          if (v160[0])
          {
            uint64_t v154 = (void **)(v160[0] + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v154);
            goto LABEL_218;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v160[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v85 = v160[0];
          if (v160[0])
          {
            uint64_t v154 = (void **)(v160[0] + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v154);
LABEL_218:
            char v72 = v85;
            uint64_t v73 = 0x1020C405E66F15BLL;
            goto LABEL_223;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v160[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v89 = v160[0];
          if (v160[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v160[0] + 2);
            char v72 = v89;
            unsigned int v86 = -235920773;
            goto LABEL_222;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v160[0], 0xFFFFFFFFFFFFFFFFLL) == 1 && v160[0])
        {
          char v72 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v160[0]);
          unsigned int v86 = 2071181815;
LABEL_222:
          uint64_t v73 = v86 | 0x1030C4000000000;
LABEL_223:
          MEMORY[0x22A614FA0](v72, v73);
        }
        break;
      default:
        break;
    }
    memset(v160, 0, 13);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v147);
    uint64_t v23 = (atomic_ullong *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)v163);
    switch(BYTE12(v162))
    {
      case 2:
LABEL_225:
        if (atomic_fetch_add((atomic_ullong *volatile)v162, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v90 = v162;
          if ((void)v162) {
            goto LABEL_382;
          }
        }
        break;
      case 3:
LABEL_234:
        if (atomic_fetch_add((atomic_ullong *volatile)v162, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v92 = (void *)v162;
          if ((void)v162) {
            goto LABEL_394;
          }
        }
        break;
      case 4:
LABEL_228:
        if (atomic_fetch_add((atomic_ullong *volatile)v162, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v91 = (void *)v162;
          if ((void)v162) {
            goto LABEL_387;
          }
        }
        break;
      case 5:
LABEL_237:
        if (atomic_fetch_add((atomic_ullong *volatile)v162, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v91 = (void *)v162;
          if ((void)v162) {
            goto LABEL_399;
          }
        }
        break;
      case 8:
LABEL_240:
        if (atomic_fetch_add((atomic_ullong *volatile)v162, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v93 = (void *)v162;
          if ((void)v162)
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(v162 + 16));
            long long v94 = v93;
            unsigned int v95 = -235920773;
            goto LABEL_391;
          }
        }
        break;
      case 9:
LABEL_231:
        if (atomic_fetch_add((atomic_ullong *volatile)v162, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = (atomic_ullong *)v162;
          if ((void)v162) {
            goto LABEL_390;
          }
        }
        break;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "flexible_accuracy"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    uint64_t v52 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v52, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    *(atomic_ullong **)((char *)v159 + 5) = *(atomic_ullong **)((char *)v163 + 5);
    v159[0] = *(atomic_ullong **)&v163[0];
    BYTE4(v159[1]) = BYTE12(v163[0]);
    if (BYTE12(v163[0]) <= 9u && ((1 << SBYTE12(v163[0])) & 0x33C) != 0) {
      atomic_fetch_add(v159[0], 1uLL);
    }
    turi::evaluation::flexible_accuracy::flexible_accuracy((uint64_t)&__p, (turi::evaluation *)v159);
    std::allocate_shared[abi:ne180100]<turi::evaluation::flexible_accuracy,std::allocator<turi::evaluation::flexible_accuracy>,turi::evaluation::flexible_accuracy,void>((uint64_t)&__p, (uint64_t *)&v162);
    long long v53 = v162;
    long long v162 = 0uLL;
    long long v54 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v53;
    if (v54)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      if (*((void *)&v162 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v162 + 1));
      }
    }
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v159[1]))
    {
      case 2:
        if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v55 = v159[0];
          if (v159[0])
          {
            if (*((char *)v159[0] + 31) < 0) {
              operator delete(*((void **)v159[0] + 1));
            }
            long long v56 = v55;
            uint64_t v57 = 0x1012C404EF22A49;
            goto LABEL_279;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string v106 = v159[0];
          if (v159[0])
          {
            int v107 = (void *)v159[0][1];
            if (v107)
            {
              v159[0][2] = (atomic_ullong)v107;
              operator delete(v107);
            }
            long long v56 = v106;
            uint64_t v57 = 0x1080C409938AC02;
            goto LABEL_279;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v104 = v159[0];
          if (v159[0])
          {
            *(void *)&long long v149 = v159[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
            goto LABEL_274;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v104 = v159[0];
          if (v159[0])
          {
            *(void *)&long long v149 = v159[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
LABEL_274:
            long long v56 = v104;
            uint64_t v57 = 0x1020C405E66F15BLL;
            goto LABEL_279;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          std::string::size_type v108 = v159[0];
          if (v159[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v159[0] + 2);
            long long v56 = v108;
            unsigned int v105 = -235920773;
            goto LABEL_278;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v159[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = v159[0];
          if (v159[0])
          {
            long long v56 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v159[0]);
            unsigned int v105 = 2071181815;
LABEL_278:
            uint64_t v57 = v105 | 0x1030C4000000000;
LABEL_279:
            uint64_t v23 = (atomic_ullong *)MEMORY[0x22A614FA0](v56, v57);
          }
        }
        break;
      default:
        break;
    }
    memset(v159, 0, 13);
    switch(BYTE12(v163[0]))
    {
      case 2:
        goto LABEL_380;
      case 3:
        goto LABEL_392;
      case 4:
        goto LABEL_385;
      case 5:
        goto LABEL_397;
      case 8:
        goto LABEL_402;
      case 9:
        goto LABEL_388;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "precision"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    std::vector<std::string>::size_type v63 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v63, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    *(atomic_ullong **)((char *)v158 + 5) = *(atomic_ullong **)((char *)v163 + 5);
    v158[0] = *(atomic_ullong **)&v163[0];
    BYTE4(v158[1]) = BYTE12(v163[0]);
    if (BYTE12(v163[0]) <= 9u && ((1 << SBYTE12(v163[0])) & 0x33C) != 0) {
      atomic_fetch_add(v158[0], 1uLL);
    }
    turi::evaluation::precision::precision((uint64_t)&__p, (turi::evaluation *)v158);
    std::allocate_shared[abi:ne180100]<turi::evaluation::precision,std::allocator<turi::evaluation::precision>,turi::evaluation::precision,void>((uint64_t)&__p, (uint64_t *)&v162);
    long long v64 = v162;
    long long v162 = 0uLL;
    uint64_t v65 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v64;
    if (v65)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      if (*((void *)&v162 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v162 + 1));
      }
    }
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v158[1]))
    {
      case 2:
        if (atomic_fetch_add(v158[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v66 = v158[0];
          if (v158[0])
          {
            if (*((char *)v158[0] + 31) < 0) {
              operator delete(*((void **)v158[0] + 1));
            }
            unint64_t v67 = v66;
            uint64_t v68 = 0x1012C404EF22A49;
            goto LABEL_315;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v158[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v117 = v158[0];
          if (v158[0])
          {
            unint64_t v118 = (void *)v158[0][1];
            if (v118)
            {
              v158[0][2] = (atomic_ullong)v118;
              operator delete(v118);
            }
            unint64_t v67 = v117;
            uint64_t v68 = 0x1080C409938AC02;
            goto LABEL_315;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v158[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v115 = v158[0];
          if (v158[0])
          {
            *(void *)&long long v149 = v158[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
            goto LABEL_310;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v158[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v115 = v158[0];
          if (v158[0])
          {
            *(void *)&long long v149 = v158[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
LABEL_310:
            unint64_t v67 = v115;
            uint64_t v68 = 0x1020C405E66F15BLL;
            goto LABEL_315;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v158[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v119 = v158[0];
          if (v158[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v158[0] + 2);
            unint64_t v67 = v119;
            unsigned int v116 = -235920773;
            goto LABEL_314;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v158[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = v158[0];
          if (v158[0])
          {
            unint64_t v67 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v158[0]);
            unsigned int v116 = 2071181815;
LABEL_314:
            uint64_t v68 = v116 | 0x1030C4000000000;
LABEL_315:
            uint64_t v23 = (atomic_ullong *)MEMORY[0x22A614FA0](v67, v68);
          }
        }
        break;
      default:
        break;
    }
    memset(v158, 0, 13);
    switch(BYTE12(v163[0]))
    {
      case 2:
        goto LABEL_380;
      case 3:
        goto LABEL_392;
      case 4:
        goto LABEL_385;
      case 5:
        goto LABEL_397;
      case 8:
        goto LABEL_402;
      case 9:
        goto LABEL_388;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "recall"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    long long v79 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v79, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    *(atomic_ullong **)((char *)v157 + 5) = *(atomic_ullong **)((char *)v163 + 5);
    v157[0] = *(atomic_ullong **)&v163[0];
    BYTE4(v157[1]) = BYTE12(v163[0]);
    if (BYTE12(v163[0]) <= 9u && ((1 << SBYTE12(v163[0])) & 0x33C) != 0) {
      atomic_fetch_add(v157[0], 1uLL);
    }
    turi::evaluation::recall::recall((uint64_t)&__p, (turi::evaluation *)v157);
    std::allocate_shared[abi:ne180100]<turi::evaluation::recall,std::allocator<turi::evaluation::recall>,turi::evaluation::recall,void>((uint64_t)&__p, (uint64_t *)&v162);
    long long v80 = v162;
    long long v162 = 0uLL;
    std::string v81 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v80;
    if (v81)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v81);
      if (*((void *)&v162 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v162 + 1));
      }
    }
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v157[1]))
    {
      case 2:
        if (atomic_fetch_add(v157[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v82 = v157[0];
          if (v157[0])
          {
            if (*((char *)v157[0] + 31) < 0) {
              operator delete(*((void **)v157[0] + 1));
            }
            unint64_t v83 = v82;
            uint64_t v84 = 0x1012C404EF22A49;
            goto LABEL_336;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v157[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v122 = v157[0];
          if (v157[0])
          {
            long long v123 = (void *)v157[0][1];
            if (v123)
            {
              v157[0][2] = (atomic_ullong)v123;
              operator delete(v123);
            }
            unint64_t v83 = v122;
            uint64_t v84 = 0x1080C409938AC02;
            goto LABEL_336;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v157[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v120 = v157[0];
          if (v157[0])
          {
            *(void *)&long long v149 = v157[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
            goto LABEL_331;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v157[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v120 = v157[0];
          if (v157[0])
          {
            *(void *)&long long v149 = v157[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
LABEL_331:
            unint64_t v83 = v120;
            uint64_t v84 = 0x1020C405E66F15BLL;
            goto LABEL_336;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v157[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v124 = v157[0];
          if (v157[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v157[0] + 2);
            unint64_t v83 = v124;
            unsigned int v121 = -235920773;
            goto LABEL_335;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v157[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = v157[0];
          if (v157[0])
          {
            unint64_t v83 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v157[0]);
            unsigned int v121 = 2071181815;
LABEL_335:
            uint64_t v84 = v121 | 0x1030C4000000000;
LABEL_336:
            uint64_t v23 = (atomic_ullong *)MEMORY[0x22A614FA0](v83, v84);
          }
        }
        break;
      default:
        break;
    }
    memset(v157, 0, 13);
    switch(BYTE12(v163[0]))
    {
      case 2:
        goto LABEL_380;
      case 3:
        goto LABEL_392;
      case 4:
        goto LABEL_385;
      case 5:
        goto LABEL_397;
      case 8:
        goto LABEL_402;
      case 9:
        goto LABEL_388;
      default:
        break;
    }
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "fbeta_score"))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "beta");
    uint64_t v96 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    double v97 = turi::variant_converter<double,void>::get((uint64_t)v163, v96);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    uint64_t v98 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v98, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    *(atomic_ullong **)((char *)v156 + 5) = *(atomic_ullong **)((char *)v163 + 5);
    v156[0] = *(atomic_ullong **)&v163[0];
    BYTE4(v156[1]) = BYTE12(v163[0]);
    if (BYTE12(v163[0]) <= 9u && ((1 << SBYTE12(v163[0])) & 0x33C) != 0) {
      atomic_fetch_add(v156[0], 1uLL);
    }
    turi::evaluation::fbeta_score::fbeta_score((uint64_t)&__p, (turi::evaluation *)v156, v97);
    std::allocate_shared[abi:ne180100]<turi::evaluation::fbeta_score,std::allocator<turi::evaluation::fbeta_score>,turi::evaluation::fbeta_score,void>((uint64_t)&__p, (uint64_t *)&v162);
    long long v99 = v162;
    long long v162 = 0uLL;
    long long v100 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v99;
    if (v100)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v100);
      if (*((void *)&v162 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v162 + 1));
      }
    }
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v156[1]))
    {
      case 2:
        if (atomic_fetch_add(v156[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v101 = v156[0];
          if (v156[0])
          {
            if (*((char *)v156[0] + 31) < 0) {
              operator delete(*((void **)v156[0] + 1));
            }
            long long v102 = v101;
            uint64_t v103 = 0x1012C404EF22A49;
            goto LABEL_378;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v156[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v132 = v156[0];
          if (v156[0])
          {
            uint64_t v133 = (void *)v156[0][1];
            if (v133)
            {
              v156[0][2] = (atomic_ullong)v133;
              operator delete(v133);
            }
            long long v102 = v132;
            uint64_t v103 = 0x1080C409938AC02;
            goto LABEL_378;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v156[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v130 = v156[0];
          if (v156[0])
          {
            *(void *)&long long v149 = v156[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
            goto LABEL_373;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v156[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v130 = v156[0];
          if (v156[0])
          {
            *(void *)&long long v149 = v156[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
LABEL_373:
            long long v102 = v130;
            uint64_t v103 = 0x1020C405E66F15BLL;
            goto LABEL_378;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v156[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v134 = v156[0];
          if (v156[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v156[0] + 2);
            long long v102 = v134;
            unsigned int v131 = -235920773;
            goto LABEL_377;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v156[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = v156[0];
          if (v156[0])
          {
            long long v102 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v156[0]);
            unsigned int v131 = 2071181815;
LABEL_377:
            uint64_t v103 = v131 | 0x1030C4000000000;
LABEL_378:
            uint64_t v23 = (atomic_ullong *)MEMORY[0x22A614FA0](v102, v103);
          }
        }
        break;
      default:
        break;
    }
    memset(v156, 0, 13);
    switch(BYTE12(v163[0]))
    {
      case 2:
        goto LABEL_380;
      case 3:
        goto LABEL_392;
      case 4:
        goto LABEL_385;
      case 5:
        goto LABEL_397;
      case 8:
        goto LABEL_402;
      case 9:
        goto LABEL_388;
      default:
        break;
    }
  }
  else
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "f1_score"))
    {
      std::string __p = a1;
      turi::evaluation::get_evaluator_metric(std::string const&,std::map<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>> const&)::{lambda(void)#1}::operator()();
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "average");
    char v109 = (int *)std::map<std::string,turi::neural_net::shared_float_array>::at(a2, (const void **)&__p);
    turi::variant_converter<turi::flexible_type,void>::get(v109, (uint64_t)v163);
    if (SHIBYTE(v140[0]) < 0) {
      operator delete(__p);
    }
    *(atomic_ullong **)((char *)v155 + 5) = *(atomic_ullong **)((char *)v163 + 5);
    v155[0] = *(atomic_ullong **)&v163[0];
    BYTE4(v155[1]) = BYTE12(v163[0]);
    if (BYTE12(v163[0]) <= 9u && ((1 << SBYTE12(v163[0])) & 0x33C) != 0) {
      atomic_fetch_add(v155[0], 1uLL);
    }
    turi::evaluation::fbeta_score::fbeta_score((uint64_t)&__p, (turi::evaluation *)v155, 1.0);
    std::allocate_shared[abi:ne180100]<turi::evaluation::fbeta_score,std::allocator<turi::evaluation::fbeta_score>,turi::evaluation::fbeta_score,void>((uint64_t)&__p, (uint64_t *)&v162);
    long long v110 = v162;
    long long v162 = 0uLL;
    int v111 = (std::__shared_weak_count *)a3[1];
    *(_OWORD *)a3 = v110;
    if (v111)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v111);
      if (*((void *)&v162 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v162 + 1));
      }
    }
    turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
    switch(BYTE4(v155[1]))
    {
      case 2:
        if (atomic_fetch_add(v155[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v112 = v155[0];
          if (v155[0])
          {
            if (*((char *)v155[0] + 31) < 0) {
              operator delete(*((void **)v155[0] + 1));
            }
            uint64_t v113 = v112;
            uint64_t v114 = 0x1012C404EF22A49;
            goto LABEL_357;
          }
        }
        break;
      case 3:
        if (atomic_fetch_add(v155[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v127 = v155[0];
          if (v155[0])
          {
            uint64_t v128 = (void *)v155[0][1];
            if (v128)
            {
              v155[0][2] = (atomic_ullong)v128;
              operator delete(v128);
            }
            uint64_t v113 = v127;
            uint64_t v114 = 0x1080C409938AC02;
            goto LABEL_357;
          }
        }
        break;
      case 4:
        if (atomic_fetch_add(v155[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v125 = v155[0];
          if (v155[0])
          {
            *(void *)&long long v149 = v155[0] + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
            goto LABEL_352;
          }
        }
        break;
      case 5:
        if (atomic_fetch_add(v155[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v125 = v155[0];
          if (v155[0])
          {
            *(void *)&long long v149 = v155[0] + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
LABEL_352:
            uint64_t v113 = v125;
            uint64_t v114 = 0x1020C405E66F15BLL;
            goto LABEL_357;
          }
        }
        break;
      case 8:
        if (atomic_fetch_add(v155[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v129 = v155[0];
          if (v155[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)v155[0] + 2);
            uint64_t v113 = v129;
            unsigned int v126 = -235920773;
            goto LABEL_356;
          }
        }
        break;
      case 9:
        if (atomic_fetch_add(v155[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = v155[0];
          if (v155[0])
          {
            uint64_t v113 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v155[0]);
            unsigned int v126 = 2071181815;
LABEL_356:
            uint64_t v114 = v126 | 0x1030C4000000000;
LABEL_357:
            uint64_t v23 = (atomic_ullong *)MEMORY[0x22A614FA0](v113, v114);
          }
        }
        break;
      default:
        break;
    }
    memset(v155, 0, 13);
    switch(BYTE12(v163[0]))
    {
      case 2:
LABEL_380:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v163[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v90 = *(void *)&v163[0];
          if (*(void *)&v163[0])
          {
LABEL_382:
            if (*(char *)(v90 + 31) < 0) {
              operator delete(*(void **)(v90 + 8));
            }
            long long v94 = (void *)v90;
            uint64_t v135 = 0x1012C404EF22A49;
            goto LABEL_401;
          }
        }
        break;
      case 3:
LABEL_392:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v163[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v92 = *(void **)&v163[0];
          if (*(void *)&v163[0])
          {
LABEL_394:
            uint64_t v136 = (void *)v92[1];
            if (v136)
            {
              v92[2] = v136;
              operator delete(v136);
            }
            long long v94 = v92;
            uint64_t v135 = 0x1080C409938AC02;
            goto LABEL_401;
          }
        }
        break;
      case 4:
LABEL_385:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v163[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v91 = *(void **)&v163[0];
          if (*(void *)&v163[0])
          {
LABEL_387:
            std::string __p = v91 + 1;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_400;
          }
        }
        break;
      case 5:
LABEL_397:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v163[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v91 = *(void **)&v163[0];
          if (*(void *)&v163[0])
          {
LABEL_399:
            std::string __p = v91 + 1;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_400:
            long long v94 = v91;
            uint64_t v135 = 0x1020C405E66F15BLL;
            goto LABEL_401;
          }
        }
        break;
      case 8:
LABEL_402:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v163[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v137 = *(void *)&v163[0];
          if (*(void *)&v163[0])
          {
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v163[0] + 16));
            uint64_t v23 = (atomic_ullong *)MEMORY[0x22A614FA0](v137, 0x1030C40F1F0227BLL);
          }
          *(void *)&v163[0] = 0;
        }
        break;
      case 9:
LABEL_388:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v163[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v23 = *(atomic_ullong **)&v163[0];
          if (*(void *)&v163[0])
          {
LABEL_390:
            long long v94 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v23);
            unsigned int v95 = 2071181815;
LABEL_391:
            uint64_t v135 = v95 | 0x1030C4000000000;
LABEL_401:
            uint64_t v23 = (atomic_ullong *)MEMORY[0x22A614FA0](v94, v135);
          }
        }
        break;
      default:
        break;
    }
  }
LABEL_87:
  uint64_t v36 = turi::thread::cpu_count((turi::thread *)v23);
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 24))(*a3, v36);
}

void sub_2243C28C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  turi::evaluation::flexible_accuracy::~flexible_accuracy((turi::evaluation::flexible_accuracy *)&__p);
  switch(*(unsigned char *)(v66 - 212))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v68 = *(void *)(v66 - 224);
      if (!v68) {
        goto LABEL_27;
      }
      if (*(char *)(v68 + 31) < 0) {
        operator delete(*(void **)(v68 + 8));
      }
      long long v69 = (void *)v68;
      uint64_t v70 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v74 = *(void **)(v66 - 224);
      if (!v74) {
        goto LABEL_27;
      }
      unsigned int v75 = (void *)v74[1];
      if (v75)
      {
        v74[2] = v75;
        operator delete(v75);
      }
      long long v69 = v74;
      uint64_t v70 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v71 = *(void **)(v66 - 224);
      if (!v71) {
        goto LABEL_27;
      }
      a65 = (uint64_t)(v71 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v71 = *(void **)(v66 - 224);
      if (!v71) {
        goto LABEL_27;
      }
      a65 = (uint64_t)(v71 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
LABEL_21:
      long long v69 = v71;
      uint64_t v70 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v76 = *(void *)(v66 - 224);
      if (!v76) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v76 + 16));
      long long v69 = (void *)v76;
      unsigned int v73 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 224), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      char v72 = *(void **)(v66 - 224);
      if (!v72) {
        goto LABEL_27;
      }
      long long v69 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v72);
      unsigned int v73 = 2071181815;
LABEL_25:
      uint64_t v70 = v73 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v69, v70);
LABEL_27:
      *(void *)(v66 - 224) = 0;
      *(_DWORD *)(v66 - 216) = 0;
      *(unsigned char *)(v66 - 212) = 0;
      switch(*(unsigned char *)(v66 - 100))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_54;
          }
          uint64_t v77 = *(void *)(v66 - 112);
          if (!v77) {
            goto LABEL_53;
          }
          if (*(char *)(v77 + 31) < 0) {
            operator delete(*(void **)(v77 + 8));
          }
          uint64_t v78 = (void *)v77;
          uint64_t v79 = 0x1012C404EF22A49;
          goto LABEL_52;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_54;
          }
          unint64_t v83 = *(void **)(v66 - 112);
          if (!v83) {
            goto LABEL_53;
          }
          uint64_t v84 = (void *)v83[1];
          if (v84)
          {
            v83[2] = v84;
            operator delete(v84);
          }
          uint64_t v78 = v83;
          uint64_t v79 = 0x1080C409938AC02;
          goto LABEL_52;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_54;
          }
          long long v80 = *(void **)(v66 - 112);
          if (!v80) {
            goto LABEL_53;
          }
          std::string __p = v80 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_47;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_54;
          }
          long long v80 = *(void **)(v66 - 112);
          if (!v80) {
            goto LABEL_53;
          }
          std::string __p = v80 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_47:
          uint64_t v78 = v80;
          uint64_t v79 = 0x1020C405E66F15BLL;
          goto LABEL_52;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_54;
          }
          uint64_t v85 = *(void *)(v66 - 112);
          if (!v85) {
            goto LABEL_53;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v85 + 16));
          uint64_t v78 = (void *)v85;
          unsigned int v82 = -235920773;
          goto LABEL_51;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v66 - 112), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_54;
          }
          std::string v81 = *(void **)(v66 - 112);
          if (!v81) {
            goto LABEL_53;
          }
          uint64_t v78 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v81);
          unsigned int v82 = 2071181815;
LABEL_51:
          uint64_t v79 = v82 | 0x1030C4000000000;
LABEL_52:
          MEMORY[0x22A614FA0](v78, v79);
LABEL_53:
          *(void *)(v66 - 112) = 0;
LABEL_54:
          unsigned int v86 = *(std::__shared_weak_count **)(v65 + 8);
          if (v86) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v86);
          }
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_54;
      }
    default:
      goto LABEL_27;
  }
}

void turi::evaluation::compute_classifier_metrics_from_probability_vectors(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  void v17[4] = *MEMORY[0x263EF8340];
  a5[2] = 0;
  a5[1] = 0;
  *a5 = a5 + 1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v14 = *(std::string *)a2;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v15 = *(std::string *)a3;
  }
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  LOBYTE(__p[1]) = 0;
  uint64_t v11 = (std::string *)operator new(0x30uLL);
  char v12 = v11;
  uint64_t v13 = v11 + 2;
  char v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v13, (long long *)&v14, &v16, v11);
  turi::gl_sframe::select_columns(a1, v10);
  __p[0] = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v8 = 0;
  while (1)
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[v8 + 2]) < 0) {
      operator delete(*(void **)((char *)&v14 + v8 * 8 + 24));
    }
    v8 -= 3;
    if (v8 == -6)
    {
      turi::gl_sframe::operator[]((uint64_t)v10, a3, (turi::gl_sarray *)&v14);
      v17[0] = &unk_26D77D6E8;
      v17[1] = a4;
      v17[3] = v17;
      turi::gl_sarray::apply((uint64_t)&v14, (uint64_t)v17, *(char *)(*(void *)a4 + 12), 1);
    }
  }
}

void sub_2243C4BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::destroy(v60, *(char **)(v60 + 8));
  _Unwind_Resume(a1);
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,char [17]>(unsigned __int8 *a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v5 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [17],std::__identity>(a1, a2, a3);
  int v6 = v5 + 24;
  if (v5 != a2 && v6 != a2)
  {
    do
    {
      size_t v8 = strlen(a3);
      size_t v9 = v8;
      if ((char)v6[23] < 0)
      {
        if (v8 != *((void *)v6 + 1)) {
          goto LABEL_13;
        }
        if (v8 == -1) {
LABEL_18:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        uint64_t v10 = *(unsigned __int8 **)v6;
      }
      else
      {
        if (v8 != v6[23]) {
          goto LABEL_13;
        }
        uint64_t v10 = v6;
        if (v9 == -1) {
          goto LABEL_18;
        }
      }
      if (memcmp(v10, a3, v9))
      {
LABEL_13:
        if ((char)v5[23] < 0) {
          operator delete(*(void **)v5);
        }
        long long v11 = *(_OWORD *)v6;
        *((void *)v5 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v5 = v11;
        v5 += 24;
        v6[23] = 0;
        *int v6 = 0;
      }
      v6 += 24;
    }
    while (v6 != a2);
  }
  return v5;
}

unsigned __int8 *std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,char [16]>(unsigned __int8 *a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v5 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [16],std::__identity>(a1, a2, a3);
  int v6 = v5 + 24;
  if (v5 != a2 && v6 != a2)
  {
    do
    {
      size_t v8 = strlen(a3);
      size_t v9 = v8;
      if ((char)v6[23] < 0)
      {
        if (v8 != *((void *)v6 + 1)) {
          goto LABEL_13;
        }
        if (v8 == -1) {
LABEL_18:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        uint64_t v10 = *(unsigned __int8 **)v6;
      }
      else
      {
        if (v8 != v6[23]) {
          goto LABEL_13;
        }
        uint64_t v10 = v6;
        if (v9 == -1) {
          goto LABEL_18;
        }
      }
      if (memcmp(v10, a3, v9))
      {
LABEL_13:
        if ((char)v5[23] < 0) {
          operator delete(*(void **)v5);
        }
        long long v11 = *(_OWORD *)v6;
        *((void *)v5 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v5 = v11;
        v5 += 24;
        v6[23] = 0;
        *int v6 = 0;
      }
      v6 += 24;
    }
    while (v6 != a2);
  }
  return v5;
}

uint64_t turi::evaluation::compute_classifier_metrics@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, turi::gl_sarray *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__str, "accuracy");
  std::string::basic_string[abi:ne180100]<0>(&__str[24], "auc");
  std::string::basic_string[abi:ne180100]<0>(&v93, "precision");
  std::string::basic_string[abi:ne180100]<0>(v95, "recall");
  std::string::basic_string[abi:ne180100]<0>(v96, "f1_score");
  std::string::basic_string[abi:ne180100]<0>(v97, "log_loss");
  std::string::basic_string[abi:ne180100]<0>(v98, "confusion_matrix");
  std::string::basic_string[abi:ne180100]<0>(v99, "roc_curve");
  uint64_t v77 = a6;
  memset(&v87, 0, sizeof(v87));
  *(void *)&long long v88 = &v87;
  BYTE8(v88) = 0;
  v87.__begin_ = (std::vector<std::string>::pointer)operator new(0xC0uLL);
  v87.__end_ = v87.__begin_;
  v87.__end_cap_.__value_ = v87.__begin_ + 8;
  uint64_t v12 = 0;
  v87.__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v87.__end_cap_, (long long *)__str, &v100, v87.__begin_);
  do
  {
    if (SHIBYTE(v99[v12 + 2]) < 0) {
      operator delete((void *)v99[v12]);
    }
    v12 -= 3;
  }
  while (v12 != -24);
  if (*((char *)a3 + 23) < 0)
  {
    std::string v14 = (int *)a3[1];
    if (v14 != (int *)4)
    {
      if (v14 != (int *)6) {
        goto LABEL_22;
      }
      uint64_t v13 = *a3;
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)*a3;
LABEL_21:
    if (v20 == 1869903201) {
      goto LABEL_29;
    }
LABEL_22:
    unint64_t v21 = (std::string *)std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>((uint64_t)v87.__begin_, (uint64_t)v87.__end_, a3);
    if (v21 == v87.__end_)
    {
      *(void *)std::string __str = a3;
    }
    if (*((char *)a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__str, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
    }
    else
    {
      *(_OWORD *)std::string __str = *(_OWORD *)a3;
      *(void *)&__str[16] = a3[2];
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v87, (std::string *)__str, (long long *)&__str[24], 1uLL);
    if ((__str[23] & 0x80000000) != 0)
    {
      long long v22 = *(void **)__str;
LABEL_28:
      operator delete(v22);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if (*((unsigned char *)a3 + 23) == 4)
  {
    int v20 = *(_DWORD *)a3;
    goto LABEL_21;
  }
  uint64_t v13 = (unsigned __int8 *)a3;
  if (*((unsigned char *)a3 + 23) != 6) {
    goto LABEL_22;
  }
LABEL_12:
  int v15 = *(_DWORD *)v13;
  int v16 = *((unsigned __int16 *)v13 + 2);
  if (v15 != 1869636978 || v16 != 29810) {
    goto LABEL_22;
  }
  std::string::basic_string[abi:ne180100]<0>(&v88, "report_by_class");
  std::vector<std::string>::pointer end = v87.__end_;
  if (v87.__end_ < v87.__end_cap_.__value_)
  {
    long long v19 = v88;
    v87.__end_->__r_.__value_.__r.__words[2] = v89[0];
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v19;
    v87.__end_ = end + 1;
    goto LABEL_29;
  }
  unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_ - (char *)v87.__begin_) >> 3);
  unint64_t v56 = v55 + 1;
  if (v55 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  if (0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) > v56) {
    unint64_t v56 = 0x5555555555555556 * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v57 = v56;
  }
  *(void *)&long long v92 = &v87.__end_cap_;
  if (v57) {
    long long v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v87.__end_cap_, v57);
  }
  else {
    long long v58 = 0;
  }
  unsigned int v73 = &v58[24 * v55];
  *(void *)std::string __str = v58;
  *(void *)&__str[8] = v73;
  *(void *)&__str[24] = &v58[24 * v57];
  long long v74 = v88;
  *((void *)v73 + 2) = v89[0];
  *(_OWORD *)unsigned int v73 = v74;
  v89[0] = 0;
  long long v88 = 0uLL;
  *(void *)&__str[16] = v73 + 24;
  std::vector<std::string>::__swap_out_circular_buffer(&v87, (std::__split_buffer<std::string> *)__str);
  unsigned int v75 = v87.__end_;
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__str);
  v87.__end_ = v75;
  if (SHIBYTE(v89[0]) < 0)
  {
    long long v22 = (void *)v88;
    goto LABEL_28;
  }
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(__str, "classes");
  uint64_t v23 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a5, (const void **)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (a5 + 8 == v23) {
    turi::evaluation::compute_classifier_metrics(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_0::operator()();
  }
  uint64_t v78 = a1;
  uint64_t v24 = a2;
  switch(*(unsigned char *)(v23 + 68))
  {
    case 0:
      uint64_t v25 = *(void *)(v23 + 56);
      BYTE12(v88) = 0;
      DWORD2(v88) = 0;
      *(void *)&long long v88 = v25;
      v86[0] = 0;
      long long v85 = 0uLL;
      *(void *)std::string __str = &v85;
      __str[8] = 0;
      *(void *)&long long v85 = operator new(0x10uLL);
      *((void *)&v85 + 1) = v85;
      v86[0] = v85 + 16;
      *((void *)&v85 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v86, (uint64_t *)&v88, v89, v85);
      switch(BYTE12(v88))
      {
        case 2:
          goto LABEL_83;
        case 3:
          goto LABEL_111;
        case 4:
          goto LABEL_99;
        case 5:
          goto LABEL_116;
        case 8:
          goto LABEL_120;
        case 9:
          goto LABEL_102;
        default:
          goto LABEL_125;
      }
    case 1:
      uint64_t v44 = *(void *)(v23 + 56);
      DWORD2(v88) = 0;
      BYTE12(v88) = 1;
      *(void *)&long long v88 = v44;
      v86[0] = 0;
      long long v85 = 0uLL;
      *(void *)std::string __str = &v85;
      __str[8] = 0;
      *(void *)&long long v85 = operator new(0x10uLL);
      *((void *)&v85 + 1) = v85;
      v86[0] = v85 + 16;
      *((void *)&v85 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v86, (uint64_t *)&v88, v89, v85);
      switch(BYTE12(v88))
      {
        case 2:
          goto LABEL_83;
        case 3:
          goto LABEL_111;
        case 4:
          goto LABEL_99;
        case 5:
          goto LABEL_116;
        case 8:
          goto LABEL_120;
        case 9:
          goto LABEL_102;
        default:
          goto LABEL_125;
      }
    case 2:
      *(void *)&long long v88 = 0;
      DWORD2(v88) = 0;
      BYTE12(v88) = 0;
      turi::flexible_type::operator=<std::string>((uint64_t)&v88);
    case 3:
      uint64_t v27 = *(void *)(v23 + 56);
      std::vector<turi::flexible_type>::vector(&v85, (uint64_t)(*(void *)(v27 + 16) - *(void *)(v27 + 8)) >> 3);
      uint64_t v28 = *(void *)(v27 + 8);
      if (*(void *)(v27 + 16) != v28)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        while (2)
        {
          uint64_t v31 = v85 + v29;
          switch(*(unsigned char *)(v85 + v29 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_77;
              }
              atomic_ullong *volatile v32 = *(atomic_ullong *volatile *)v31;
              if (!*(void *)v31) {
                goto LABEL_76;
              }
              if (*((char *)v32 + 31) < 0) {
                operator delete((void *)v32[1]);
              }
              atomic_ullong *volatile v33 = v32;
              uint64_t v34 = 0x1012C404EF22A49;
              goto LABEL_75;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_77;
              }
              atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)v31;
              if (!*(void *)v31) {
                goto LABEL_76;
              }
              uint64_t v42 = (void *)v41[1];
              if (v42)
              {
                void v41[2] = (atomic_ullong)v42;
                operator delete(v42);
              }
              atomic_ullong *volatile v33 = v41;
              uint64_t v34 = 0x1080C409938AC02;
              goto LABEL_75;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_77;
              }
              atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v31;
              if (!*(void *)v31) {
                goto LABEL_76;
              }
              *(void *)std::string __str = v35 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
              goto LABEL_70;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_77;
              }
              atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v31;
              if (!*(void *)v31) {
                goto LABEL_76;
              }
              *(void *)std::string __str = v35 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_70:
              atomic_ullong *volatile v33 = v35;
              uint64_t v34 = 0x1020C405E66F15BLL;
              goto LABEL_75;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_77;
              }
              atomic_ullong *volatile v43 = *(atomic_ullong *volatile *)v31;
              if (!*(void *)v31) {
                goto LABEL_76;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v43 + 2);
              atomic_ullong *volatile v33 = v43;
              unsigned int v40 = -235920773;
              goto LABEL_74;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v31, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                goto LABEL_77;
              }
              atomic_ullong *volatile v36 = *(atomic_ullong *volatile *)v31;
              if (!*(void *)v31) {
                goto LABEL_76;
              }
              char v37 = (void *)v36[6];
              if (v37)
              {
                v36[7] = (atomic_ullong)v37;
                operator delete(v37);
              }
              uint64_t v38 = (void *)v36[3];
              if (v38)
              {
                v36[4] = (atomic_ullong)v38;
                operator delete(v38);
              }
              uint64_t v39 = (std::__shared_weak_count *)v36[2];
              if (v39) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
              }
              atomic_ullong *volatile v33 = v36;
              unsigned int v40 = 2071181815;
LABEL_74:
              uint64_t v34 = v40 | 0x1030C4000000000;
LABEL_75:
              MEMORY[0x22A614FA0](v33, v34);
LABEL_76:
              *(void *)uint64_t v31 = 0;
LABEL_77:
              *(void *)uint64_t v31 = 0;
              *(_DWORD *)(v31 + 8) = 0;
              *(unsigned char *)(v31 + 12) = 1;
              *(void *)uint64_t v31 = *(void *)(v28 + 8 * v30++);
              uint64_t v28 = *(void *)(v27 + 8);
              v29 += 16;
              if (v30 >= (*(void *)(v27 + 16) - v28) >> 3) {
                goto LABEL_125;
              }
              continue;
            default:
              goto LABEL_77;
          }
        }
      }
      break;
    case 4:
      uint64_t v26 = *(void *)(v23 + 56);
      v86[0] = 0;
      long long v85 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v85, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 4);
      break;
    case 5:
      uint64_t v45 = *(void *)(v23 + 56);
      memset(__str, 0, 24);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__str, *(uint64_t **)(v45 + 8), *(uint64_t **)(v45 + 16), (uint64_t)(*(void *)(v45 + 16) - *(void *)(v45 + 8)) >> 5);
      turi::flexible_type_fail(0);
      long long v85 = 0uLL;
      v86[0] = 0;
      *(void *)&long long v88 = __str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      break;
    case 6:
      double v46 = (double)((uint64_t)(*(void *)(v23 + 56) << 8) >> 8);
      double v47 = (double)*(int *)(v23 + 64) / 1000000.0;
      DWORD2(v88) = 0;
      BYTE12(v88) = 1;
      *(double *)&long long v88 = v47 + v46;
      v86[0] = 0;
      long long v85 = 0uLL;
      *(void *)std::string __str = &v85;
      __str[8] = 0;
      *(void *)&long long v85 = operator new(0x10uLL);
      *((void *)&v85 + 1) = v85;
      v86[0] = v85 + 16;
      *((void *)&v85 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)v86, (uint64_t *)&v88, v89, v85);
      switch(BYTE12(v88))
      {
        case 2:
LABEL_83:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_125;
          }
          std::string v48 = (void *)v88;
          if (!(void)v88) {
            goto LABEL_125;
          }
          if (*(char *)(v88 + 31) < 0) {
            operator delete(*(void **)(v88 + 8));
          }
          uint64_t v49 = v48;
          uint64_t v50 = 0x1012C404EF22A49;
          goto LABEL_124;
        case 3:
LABEL_111:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_125;
          }
          uint64_t v65 = (void *)v88;
          if (!(void)v88) {
            goto LABEL_125;
          }
          uint64_t v66 = *(void **)(v88 + 8);
          if (v66)
          {
            *(void *)(v88 + 16) = v66;
            operator delete(v66);
          }
          uint64_t v49 = v65;
          uint64_t v50 = 0x1080C409938AC02;
          goto LABEL_124;
        case 4:
LABEL_99:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_125;
          }
          uint64_t v59 = (void *)v88;
          if (!(void)v88) {
            goto LABEL_125;
          }
          *(void *)std::string __str = v88 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
          goto LABEL_119;
        case 5:
LABEL_116:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_125;
          }
          uint64_t v59 = (void *)v88;
          if (!(void)v88) {
            goto LABEL_125;
          }
          *(void *)std::string __str = v88 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_119:
          uint64_t v49 = v59;
          uint64_t v50 = 0x1020C405E66F15BLL;
          goto LABEL_124;
        case 8:
LABEL_120:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_125;
          }
          unint64_t v67 = (void *)v88;
          if (!(void)v88) {
            goto LABEL_125;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v88 + 16));
          uint64_t v49 = v67;
          unsigned int v64 = -235920773;
          goto LABEL_123;
        case 9:
LABEL_102:
          if (atomic_fetch_add((atomic_ullong *volatile)v88, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_125;
          }
          uint64_t v60 = (void *)v88;
          if (!(void)v88) {
            goto LABEL_125;
          }
          uint64_t v61 = *(void **)(v88 + 48);
          if (v61)
          {
            *(void *)(v88 + 56) = v61;
            operator delete(v61);
          }
          uint64_t v62 = (void *)v60[3];
          if (v62)
          {
            v60[4] = v62;
            operator delete(v62);
          }
          std::vector<std::string>::size_type v63 = (std::__shared_weak_count *)v60[2];
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          uint64_t v49 = v60;
          unsigned int v64 = 2071181815;
LABEL_123:
          uint64_t v50 = v64 | 0x1030C4000000000;
LABEL_124:
          MEMORY[0x22A614FA0](v49, v50);
          break;
        default:
          goto LABEL_125;
      }
      break;
    case 7:
      long long v85 = 0uLL;
      v86[0] = 0;
      break;
    case 8:
      uint64_t v51 = *(void *)(v23 + 56);
      uint64_t v52 = *(void *)(v51 + 16);
      *(void *)std::string __str = *(void *)(v51 + 8);
      *(void *)&__str[8] = v52;
      if (v52) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v52 + 8), 1u, memory_order_relaxed);
      }
      long long v53 = *(_OWORD *)(v51 + 24);
      long long v54 = *(_OWORD *)(v51 + 56);
      long long v92 = *(_OWORD *)(v51 + 40);
      long long v93 = v54;
      *(_OWORD *)&__str[16] = v53;
      turi::flexible_type_fail(0);
      long long v85 = 0uLL;
      v86[0] = 0;
      boost::detail::shared_count::~shared_count((atomic_uint **)&__str[8]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__str, *(void *)(v23 + 56) + 8);
      turi::flexible_type_fail(0);
      long long v85 = 0uLL;
      v86[0] = 0;
      if (*((void *)&v92 + 1))
      {
        *(void *)&long long v93 = *((void *)&v92 + 1);
        operator delete(*((void **)&v92 + 1));
      }
      if (*(void *)&__str[16])
      {
        *(void *)&__str[24] = *(void *)&__str[16];
        operator delete(*(void **)&__str[16]);
      }
      if (*(void *)&__str[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
      }
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
LABEL_125:
  turi::gl_sarray::gl_sarray((turi::gl_sarray *)&v88);
  int v68 = turi::gl_sarray::dtype(a4);
  if (v68 == 3)
  {
    turi::gl_sarray::operator=((uint64_t)&v88, (uint64_t)a4);
  }
  else
  {
    if (v68 == 5)
    {
      long long v69 = (char *)operator new(0x40uLL);
      *((void *)v69 + 1) = 0;
      *((void *)v69 + 2) = 0;
      *(void *)long long v69 = &unk_26D77D618;
      *(_OWORD *)(v69 + 24) = 0u;
      *(_OWORD *)(v69 + 4CoreML::Specification::Imputer::New(this, 0) = 0u;
      *((_DWORD *)v69 + 14) = 1065353216;
      *(void *)std::string __str = 0;
      uint64_t v70 = v85;
      if (*((void *)&v85 + 1) != (void)v85)
      {
        unint64_t v71 = 0;
        do
        {
          std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&,unsigned long &>((uint64_t)(v69 + 24), (unsigned __int8 *)(v70 + 16 * v71), v70 + 16 * v71, __str);
          unint64_t v71 = *(void *)__str + 1;
          *(void *)std::string __str = v71;
          uint64_t v70 = v85;
        }
        while (v71 < (uint64_t)(*((void *)&v85 + 1) - v85) >> 4);
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)v69 + 1, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v69 + 1, 1uLL, memory_order_relaxed);
      *((void *)&v100 + 1) = &unk_26D77D668;
      long long v101 = v69 + 24;
      long long v102 = v69;
      uint64_t v103 = (char *)&v100 + 8;
      turi::gl_sarray::apply((uint64_t)a4, (uint64_t)&v100 + 8, 3, 1);
    }
    if (v68 != 9) {
    turi::gl_sarray::astype((uint64_t)a4, (uint64_t)__str);
    }
    turi::gl_sarray::operator=((uint64_t)&v88, (uint64_t)__str);
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)__str);
  }
  turi::gl_sarray::operator=((uint64_t)a4, (uint64_t)&v88);
  turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v88);
  turi::gl_sframe::operator[](v78, v24, (turi::gl_sarray *)&v88);
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[6],turi::gl_sarray_reference,0>(__str, "target", (uint64_t)&v88);
  std::pair<std::string,turi::gl_sarray>::pair[abi:ne180100]<char const(&)[12],turi::gl_sarray&,0>(&v94, "class_probs", a4);
  turi::gl_sframe::gl_sframe((char *)&v100 + 8, __str, 2);
  uint64_t v72 = 0;
  while (1)
  {
    turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v95[v72 + 2]);
    if (SHIBYTE(v95[v72 + 1]) < 0) {
      operator delete((void *)v95[v72 - 1]);
    }
    v72 -= 8;
    if (v72 == -16)
    {
      *(void *)&long long v88 = &unk_26D759E80;
      if (v90 < 0) {
        operator delete((void *)v89[4]);
      }
      turi::gl_sarray::~gl_sarray((turi::gl_sarray *)&v88);
      std::vector<std::string> v84 = v87;
      memset(&v87, 0, sizeof(v87));
      turi::gl_sframe::gl_sframe(v83, (char *)&v100 + 8);
      std::string::basic_string[abi:ne180100]<0>(v82, "target");
      std::string::basic_string[abi:ne180100]<0>(v81, "class_probs");
      long long v79 = v85;
      uint64_t v80 = v86[0];
      v86[0] = 0;
      long long v85 = 0uLL;
      turi::evaluation::compute_classifier_metrics_from_probability_vectors((uint64_t)v83, (uint64_t)v82, (uint64_t)v81, (uint64_t)&v79, v77);
    }
  }
}

void sub_2243C6080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,void *__p,int a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t *__pa,uint64_t a44,std::__split_buffer<std::string> *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (SHIBYTE(a45) < 0) {
    operator delete(__pa);
  }
  __pa = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void turi::evaluation::compute_object_detection_metrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v81 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "classes");
  uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a5, (const void **)__p);
  if ((v70[7] & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  if (a5 + 8 != v10)
  {
    uint64_t v55 = a4;
    uint64_t v56 = a2;
    switch(*(unsigned char *)(v10 + 68))
    {
      case 0:
        long long v11 = *(void ***)(v10 + 56);
        char v74 = 0;
        int v73 = 0;
        double v72 = *(double *)&v11;
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        uint64_t v65 = 0;
        __p[0] = &v65;
        LOBYTE(__p[1]) = 0;
        uint64_t v65 = (uint64_t *)operator new(0x10uLL);
        uint64_t v66 = (turi::flexible_type_impl *)v65;
        unint64_t v67 = v65 + 2;
        uint64_t v66 = (turi::flexible_type_impl *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v67, (uint64_t *)&v72, &v75, (uint64_t)v65);
        switch(v74)
        {
          case 2:
            goto LABEL_55;
          case 3:
            goto LABEL_75;
          case 4:
            goto LABEL_63;
          case 5:
            goto LABEL_80;
          case 8:
            goto LABEL_84;
          case 9:
            goto LABEL_66;
          default:
            goto LABEL_89;
        }
      case 1:
        atomic_ullong *volatile v32 = *(void ***)(v10 + 56);
        int v73 = 0;
        char v74 = 1;
        double v72 = *(double *)&v32;
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        uint64_t v65 = 0;
        __p[0] = &v65;
        LOBYTE(__p[1]) = 0;
        uint64_t v65 = (uint64_t *)operator new(0x10uLL);
        uint64_t v66 = (turi::flexible_type_impl *)v65;
        unint64_t v67 = v65 + 2;
        uint64_t v66 = (turi::flexible_type_impl *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v67, (uint64_t *)&v72, &v75, (uint64_t)v65);
        switch(v74)
        {
          case 2:
            goto LABEL_55;
          case 3:
            goto LABEL_75;
          case 4:
            goto LABEL_63;
          case 5:
            goto LABEL_80;
          case 8:
            goto LABEL_84;
          case 9:
            goto LABEL_66;
          default:
            goto LABEL_89;
        }
      case 2:
        double v72 = 0.0;
        int v73 = 0;
        char v74 = 0;
        turi::flexible_type::operator=<std::string>((uint64_t)&v72);
      case 3:
        uint64_t v15 = *(void *)(v10 + 56);
        std::vector<turi::flexible_type>::vector(&v65, (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 3);
        uint64_t v13 = a3;
        uint64_t v14 = a1;
        uint64_t v16 = *(void *)(v15 + 8);
        if (*(void *)(v15 + 16) != v16)
        {
          uint64_t v17 = 0;
          unint64_t v18 = 0;
          while (2)
          {
            long long v19 = &v65[v17];
            switch(BYTE4(v65[v17 + 1]))
            {
              case 2:
                if (atomic_fetch_add((atomic_ullong *volatile)*v19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_49;
                }
                atomic_ullong *volatile v20 = (atomic_ullong *volatile)*v19;
                if (!*v19) {
                  goto LABEL_48;
                }
                if (*((char *)v20 + 31) < 0) {
                  operator delete((void *)v20[1]);
                }
                atomic_ullong *volatile v21 = v20;
                uint64_t v22 = 0x1012C404EF22A49;
                goto LABEL_47;
              case 3:
                if (atomic_fetch_add((atomic_ullong *volatile)*v19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_49;
                }
                atomic_ullong *volatile v29 = (atomic_ullong *volatile)*v19;
                if (!*v19) {
                  goto LABEL_48;
                }
                unint64_t v30 = (void *)v29[1];
                if (v30)
                {
                  v29[2] = (atomic_ullong)v30;
                  operator delete(v30);
                }
                atomic_ullong *volatile v21 = v29;
                uint64_t v22 = 0x1080C409938AC02;
                goto LABEL_47;
              case 4:
                if (atomic_fetch_add((atomic_ullong *volatile)*v19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_49;
                }
                atomic_ullong *volatile v23 = (atomic_ullong *volatile)*v19;
                if (!*v19) {
                  goto LABEL_48;
                }
                __p[0] = v23 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                goto LABEL_42;
              case 5:
                if (atomic_fetch_add((atomic_ullong *volatile)*v19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_49;
                }
                atomic_ullong *volatile v23 = (atomic_ullong *volatile)*v19;
                if (!*v19) {
                  goto LABEL_48;
                }
                __p[0] = v23 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_42:
                atomic_ullong *volatile v21 = v23;
                uint64_t v22 = 0x1020C405E66F15BLL;
                goto LABEL_47;
              case 8:
                if (atomic_fetch_add((atomic_ullong *volatile)*v19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_49;
                }
                atomic_ullong *volatile v31 = (atomic_ullong *volatile)*v19;
                if (!*v19) {
                  goto LABEL_48;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v31 + 2);
                atomic_ullong *volatile v21 = v31;
                unsigned int v28 = -235920773;
                goto LABEL_46;
              case 9:
                if (atomic_fetch_add((atomic_ullong *volatile)*v19, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                  goto LABEL_49;
                }
                atomic_ullong *volatile v24 = (atomic_ullong *volatile)*v19;
                if (!*v19) {
                  goto LABEL_48;
                }
                uint64_t v25 = (void *)v24[6];
                if (v25)
                {
                  v24[7] = (atomic_ullong)v25;
                  operator delete(v25);
                }
                uint64_t v26 = (void *)v24[3];
                if (v26)
                {
                  void v24[4] = (atomic_ullong)v26;
                  operator delete(v26);
                }
                uint64_t v27 = (std::__shared_weak_count *)v24[2];
                if (v27) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                }
                atomic_ullong *volatile v21 = v24;
                unsigned int v28 = 2071181815;
LABEL_46:
                uint64_t v22 = v28 | 0x1030C4000000000;
LABEL_47:
                MEMORY[0x22A614FA0](v21, v22);
LABEL_48:
                *long long v19 = 0;
LABEL_49:
                *long long v19 = 0;
                *((_DWORD *)v19 + 2) = 0;
                *((unsigned char *)v19 + 12) = 1;
                *long long v19 = *(void *)(v16 + 8 * v18++);
                uint64_t v16 = *(void *)(v15 + 8);
                v17 += 2;
                if (v18 >= (*(void *)(v15 + 16) - v16) >> 3) {
                  goto LABEL_90;
                }
                continue;
              default:
                goto LABEL_49;
            }
          }
        }
        break;
      case 4:
        uint64_t v12 = *(void *)(v10 + 56);
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        uint64_t v65 = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v65, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
        goto LABEL_89;
      case 5:
        uint64_t v33 = *(void *)(v10 + 56);
        __p[1] = 0;
        *(void *)uint64_t v70 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(void *)(v33 + 16) - *(void *)(v33 + 8)) >> 5);
        uint64_t v13 = a3;
        uint64_t v14 = a1;
        turi::flexible_type_fail(0);
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        double v72 = COERCE_DOUBLE(__p);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
        break;
      case 6:
        double v34 = (double)((uint64_t)(*(void *)(v10 + 56) << 8) >> 8);
        double v35 = (double)*(int *)(v10 + 64) / 1000000.0;
        int v73 = 0;
        char v74 = 1;
        double v72 = v35 + v34;
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        uint64_t v65 = 0;
        __p[0] = &v65;
        LOBYTE(__p[1]) = 0;
        uint64_t v65 = (uint64_t *)operator new(0x10uLL);
        uint64_t v66 = (turi::flexible_type_impl *)v65;
        unint64_t v67 = v65 + 2;
        uint64_t v66 = (turi::flexible_type_impl *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v67, (uint64_t *)&v72, &v75, (uint64_t)v65);
        switch(v74)
        {
          case 2:
LABEL_55:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v72, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            double v36 = v72;
            if (v72 == 0.0) {
              break;
            }
            if (*(char *)(*(void *)&v72 + 31) < 0) {
              operator delete(*(void **)(*(void *)&v72 + 8));
            }
            double v37 = v36;
            uint64_t v38 = 0x1012C404EF22A49;
            goto LABEL_88;
          case 3:
LABEL_75:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v72, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            double v49 = v72;
            if (v72 == 0.0) {
              break;
            }
            uint64_t v50 = *(void **)(*(void *)&v72 + 8);
            if (v50)
            {
              *(void *)(*(void *)&v72 + 16) = v50;
              operator delete(v50);
            }
            double v37 = v49;
            uint64_t v38 = 0x1080C409938AC02;
            goto LABEL_88;
          case 4:
LABEL_63:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v72, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            double v43 = v72;
            if (v72 == 0.0) {
              break;
            }
            __p[0] = (void *)(*(void *)&v72 + 8);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_83;
          case 5:
LABEL_80:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v72, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            double v43 = v72;
            if (v72 == 0.0) {
              break;
            }
            __p[0] = (void *)(*(void *)&v72 + 8);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_83:
            double v37 = v43;
            uint64_t v38 = 0x1020C405E66F15BLL;
            goto LABEL_88;
          case 8:
LABEL_84:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v72, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            double v51 = v72;
            if (v72 == 0.0) {
              break;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v72 + 16));
            double v37 = v51;
            unsigned int v48 = -235920773;
            goto LABEL_87;
          case 9:
LABEL_66:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v72, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              break;
            }
            double v44 = v72;
            if (v72 == 0.0) {
              break;
            }
            uint64_t v45 = *(void **)(*(void *)&v72 + 48);
            if (v45)
            {
              *(void *)(*(void *)&v72 + 56) = v45;
              operator delete(v45);
            }
            double v46 = *(void **)(*(void *)&v44 + 24);
            if (v46)
            {
              *(void *)(*(void *)&v44 + 32) = v46;
              operator delete(v46);
            }
            double v47 = *(std::__shared_weak_count **)(*(void *)&v44 + 16);
            if (v47) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            }
            double v37 = v44;
            unsigned int v48 = 2071181815;
LABEL_87:
            uint64_t v38 = v48 | 0x1030C4000000000;
LABEL_88:
            MEMORY[0x22A614FA0](*(void *)&v37, v38);
            break;
          default:
            break;
        }
LABEL_89:
        uint64_t v13 = a3;
        uint64_t v14 = a1;
        break;
      case 7:
        uint64_t v13 = a3;
        uint64_t v14 = a1;
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        break;
      case 8:
        uint64_t v39 = *(void *)(v10 + 56);
        unsigned int v40 = *(atomic_uint **)(v39 + 16);
        __p[0] = *(void **)(v39 + 8);
        __p[1] = v40;
        if (v40) {
          atomic_fetch_add_explicit(v40 + 2, 1u, memory_order_relaxed);
        }
        uint64_t v13 = a3;
        uint64_t v14 = a1;
        long long v41 = *(_OWORD *)(v39 + 24);
        long long v42 = *(_OWORD *)(v39 + 56);
        *(_OWORD *)&v70[16] = *(_OWORD *)(v39 + 40);
        v71[0] = v42;
        *(_OWORD *)uint64_t v70 = v41;
        turi::flexible_type_fail(0);
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        break;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)(v10 + 56) + 8);
        turi::flexible_type_fail(0);
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        if (*(void *)&v70[24])
        {
          *(void *)&v71[0] = *(void *)&v70[24];
          operator delete(*(void **)&v70[24]);
        }
        uint64_t v13 = a3;
        uint64_t v14 = a1;
        if (*(void *)v70)
        {
          *(void *)&char v70[8] = *(void *)v70;
          operator delete(*(void **)v70);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        break;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
LABEL_90:
    turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v72);
    memset(v77, 0, sizeof(v77));
    memset(v76, 0, sizeof(v76));
    __int16 v78 = 257;
    char v79 = 0;
    int v80 = 0;
    if (*(char *)(v56 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v56, *(void *)(v56 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v56;
      *(void *)uint64_t v70 = *(void *)(v56 + 16);
    }
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v70[8], *(const std::string::value_type **)v13, *(void *)(v13 + 8));
    }
    else
    {
      *(_OWORD *)&char v70[8] = *(_OWORD *)v13;
      *(void *)&v70[24] = *(void *)(v13 + 16);
    }
    long long v63 = 0uLL;
    uint64_t v64 = 0;
    *(void *)&long long v57 = &v63;
    BYTE8(v57) = 0;
    *(void *)&long long v63 = operator new(0x30uLL);
    *((void *)&v63 + 1) = v63;
    uint64_t v64 = v63 + 48;
    *((void *)&v63 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v64, (long long *)__p, v71, (std::string *)v63);
    turi::gl_sframe::select_columns(v14, v61);
    turi::gl_sframe::operator=((uint64_t)&v72, (uint64_t)v61);
    v61[0] = (void **)&unk_26D759E10;
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    *(void *)&long long v57 = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
    uint64_t v52 = 0;
    while (1)
    {
      if ((char)v70[v52 + 31] < 0) {
        operator delete(*(void **)&v70[v52 + 8]);
      }
      v52 -= 24;
      if (v52 == -48)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        turi::gl_sframe::add_column((uint64_t)&v72, v55, (uint64_t)__p);
        if ((v70[7] & 0x80000000) != 0) {
          operator delete(__p[0]);
        }
        std::string::operator=(v76, (const std::string *)v56);
        turi::gl_sframe::column_names((turi::gl_sframe *)&v72);
        std::string::operator=(&v76[1], (const std::string *)__p[1] - 1);
        v61[0] = __p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v61);
        std::string::operator=((std::string *)v77, (const std::string *)v13);
        __p[1] = 0;
        *(void *)uint64_t v70 = 0;
        __p[0] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>((std::string *)__p, (turi::flexible_type_impl *)v65, v66, (v66 - (turi::flexible_type_impl *)v65) >> 4);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v77[24]);
        *(_OWORD *)&v77[24] = *(_OWORD *)__p;
        *(void *)&v77[40] = *(void *)v70;
        __p[1] = 0;
        *(void *)uint64_t v70 = 0;
        __p[0] = 0;
        v61[0] = __p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v61);
        LOBYTE(v78) = 0;
        turi::object_detection::simple_data_iterator::simple_data_iterator((turi::object_detection::simple_data_iterator *)__p, (const turi::object_detection::data_iterator::parameters *)&v72);
        uint64_t v60 = 0;
        long long v59 = 0uLL;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v59, v65, (uint64_t *)v66, (v66 - (turi::flexible_type_impl *)v65) >> 4);
        turi::object_detection::average_precision_calculator::average_precision_calculator(v61, &v59);
        *(void *)&long long v63 = &v59;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        turi::object_detection::simple_data_iterator::next_batch((turi::object_detection::simple_data_iterator *)__p, 0x20uLL, &v63);
        uint64_t v54 = *((void *)&v63 + 1);
        for (uint64_t i = v63; (void)v63 != *((void *)&v63 + 1); uint64_t i = v63)
        {
          do
          {
            turi::object_detection::average_precision_calculator::add_row((uint64_t)v61, (int **)(i + 40), (int **)(i + 16));
            i += 64;
          }
          while (i != v54);
          turi::object_detection::simple_data_iterator::next_batch((turi::object_detection::simple_data_iterator *)__p, 0x20uLL, &v57);
          std::vector<turi::neural_net::labeled_image>::__vdeallocate(&v63);
          long long v63 = v57;
          uint64_t v64 = v58;
          uint64_t v58 = 0;
          long long v57 = 0uLL;
          int v68 = (void **)&v57;
          std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100](&v68);
          uint64_t v54 = *((void *)&v63 + 1);
        }
        turi::object_detection::average_precision_calculator::evaluate((turi::object_detection::average_precision_calculator *)v61);
      }
    }
  }
  turi::evaluation::compute_object_detection_metrics(turi::gl_sframe,std::string,std::string,turi::gl_sarray,std::map<std::string,turi::flexible_type>)::$_0::operator()();
}

void sub_2243C7448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  switch(*(unsigned char *)(v42 - 236))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 248), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v44 = *(void *)(v42 - 248);
      if (!v44) {
        goto LABEL_27;
      }
      if (*(char *)(v44 + 31) < 0) {
        operator delete(*(void **)(v44 + 8));
      }
      uint64_t v45 = (void *)v44;
      uint64_t v46 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 248), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      double v49 = *(void **)(v42 - 248);
      if (!v49) {
        goto LABEL_27;
      }
      uint64_t v50 = (void *)v49[1];
      if (v50)
      {
        v49[2] = v50;
        operator delete(v50);
      }
      uint64_t v45 = v49;
      uint64_t v46 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 248), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v52 = *(void **)(v42 - 248);
      if (!v52) {
        goto LABEL_27;
      }
      std::string __p = v52 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_25;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 248), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v52 = *(void **)(v42 - 248);
      if (!v52) {
        goto LABEL_27;
      }
      std::string __p = v52 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_25:
      uint64_t v45 = v52;
      uint64_t v46 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 248), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v51 = *(void *)(v42 - 248);
      if (!v51) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v51 + 16));
      uint64_t v45 = (void *)v51;
      unsigned int v48 = -235920773;
      goto LABEL_18;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v42 - 248), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      double v47 = *(void **)(v42 - 248);
      if (!v47) {
        goto LABEL_27;
      }
      uint64_t v45 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v47);
      unsigned int v48 = 2071181815;
LABEL_18:
      uint64_t v46 = v48 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v45, v46);
LABEL_27:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_27;
  }
}

void turi::object_detection::average_precision_calculator::~average_precision_calculator(turi::object_detection::average_precision_calculator *this)
{
  long long v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 24);
  std::vector<turi::object_detection::average_precision_calculator::class_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)this;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void turi::object_detection::simple_data_iterator::~simple_data_iterator(turi::object_detection::simple_data_iterator *this)
{
  *(void *)this = &unk_26D77FA60;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 96);
  uint64_t v4 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  *((void *)this + 1) = &unk_26D759E10;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(void *)this = &unk_26D77FA60;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 96);
  uint64_t v4 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  *((void *)this + 1) = &unk_26D759E10;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  MEMORY[0x22A614FA0](this, 0x10A1C40ECC577EFLL);
}

void turi::object_detection::data_iterator::parameters::~parameters(void **this)
{
  uint64_t v3 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  *this = &unk_26D759E10;
  long long v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void turi::evaluation::precision_recall_by_user(const turi::sframe *a1, uint64_t *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  gettimeofday(&v23, 0);
  gettimeofday(&v23, 0);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v22, (const turi::sframe *)a2);
  turi::gl_sframe::gl_sframe((turi::gl_sframe *)v21, a1);
  turi::gl_sframe::column_names((turi::gl_sframe *)v22);
  turi::gl_sframe::column_names((turi::gl_sframe *)v22);
  uint64_t v4 = v19;
  uint64_t v5 = (unsigned __int8 *)v25[0];
  if (v20 - v19 == v25[1] - v25[0])
  {
    while (1)
    {
      if (v4 == v20)
      {
        v24[0] = (void **)v25;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
        int v6 = (unsigned __int8 **)v19;
        turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v18);
        turi::gl_sframe::gl_sframe((turi::gl_sframe *)&v17);
        LODWORD(v25[0]) = 1;
        uint64_t v7 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], v6);
        if (v7 != a2[6])
        {
          v29.__r_.__value_.__s.__data_[0] = turi::sarray<turi::flexible_type>::get_type(*(void *)(a2[23] - 0x5555555555555550 * ((unint64_t)(v7 - a2[5]) >> 3)));
          std::allocate_shared[abi:ne180100]<turi::ml_data_internal::column_indexer,std::allocator<turi::ml_data_internal::column_indexer>,std::string const&,turi::ml_column_mode,turi::flex_type_enum,void>((uint64_t)v6, (unsigned int *)v25, (char *)&v29, &v15);
          LODWORD(v25[0]) = 1;
          uint64_t v8 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(a2[5], a2[6], v6 + 3);
          if (v8 != a2[6])
          {
            v29.__r_.__value_.__s.__data_[0] = turi::sarray<turi::flexible_type>::get_type(*(void *)(a2[23] - 0x5555555555555550 * ((unint64_t)(v8 - a2[5]) >> 3)));
            std::allocate_shared[abi:ne180100]<turi::ml_data_internal::column_indexer,std::allocator<turi::ml_data_internal::column_indexer>,std::string const&,turi::ml_column_mode,turi::flex_type_enum,void>((uint64_t)(v6 + 3), (unsigned int *)v25, (char *)&v29, &v13);
            turi::ml_data_internal::column_indexer::initialize(v15);
            turi::ml_data_internal::column_indexer::initialize(v13);
            uint64_t v10 = v15;
            uint64_t v9 = v16;
            if (v16) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
            }
            v28[0] = &unk_26D77D838;
            v28[1] = v10;
            v28[2] = v9;
            v28[3] = v28;
            uint64_t v12 = v13;
            uint64_t v11 = v14;
            if (v14) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
            }
            v27[0] = &unk_26D77D8B8;
            v27[1] = v12;
            unint64_t v27[2] = v11;
            v27[3] = v27;
            turi::gl_sframe::operator[]((uint64_t)v21, (uint64_t)v6, (turi::gl_sarray *)v25);
            std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)v28);
            turi::gl_sarray::apply((uint64_t)v25, (uint64_t)v26, 0, 1);
          }
          v24[0] = (void **)(v6 + 3);
          turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
        }
        v24[0] = (void **)v6;
        turi::sframe::column_index(std::string const&)const::{lambda(void)#1}::operator()();
      }
      if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v24, v4, v5)) {
        break;
      }
      v4 += 24;
      v5 += 24;
    }
  }
  v24[0] = (void **)v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
  turi::evaluation::precision_recall_by_user(turi::sframe const&,turi::sframe const&,std::vector<unsigned long> const&)::$_0::operator()();
}

void sub_2243C872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  turi::sframe::~sframe(v65);
  turi::indexed_column_groupby::~indexed_column_groupby((turi::indexed_column_groupby *)&a23);
  turi::indexed_column_groupby::~indexed_column_groupby((turi::indexed_column_groupby *)&a33);
  turi::sframe::~sframe((turi::sframe *)&a65);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x328]);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](&STACK[0x490]);
  std::__function::__value_func<turi::flexible_type ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](&STACK[0x4B0]);
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a41);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a43);
  }
  a44 = (uint64_t)&unk_26D759E10;
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a46);
  }
  a47 = (uint64_t)&unk_26D759E10;
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a49);
  }
  STACK[0x328] = (unint64_t)&a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x328]);
  a53 = (uint64_t)&unk_26D759E10;
  if (a55) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a55);
  }
  a56 = (uint64_t)&unk_26D759E10;
  if (a58) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a58);
  }
  _Unwind_Resume(a1);
}

void turi::indexed_column_groupby::~indexed_column_groupby(turi::indexed_column_groupby *this)
{
  std::__tree<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::pair<unsigned long long,double>>>>>::destroy((uint64_t)this + 24, *((void **)this + 4));
  long long v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void turi::evaluation::rmse::~rmse(turi::evaluation::rmse *this)
{
  *(void *)this = &unk_26D77CCE8;
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D77CCE8;
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::evaluation::max_error::~max_error(turi::evaluation::max_error *this)
{
  *(void *)this = &unk_26D77CDB8;
  long long v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D77CDB8;
  long long v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22A614FA0);
}

void turi::evaluation::confusion_matrix::~confusion_matrix(turi::evaluation::confusion_matrix *this)
{
  *(void *)this = &unk_26D77CE78;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  long long v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(void *)this = &unk_26D77CE78;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  long long v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C40E904833FLL);
}

void turi::evaluation::classifier_accuracy::~classifier_accuracy(turi::evaluation::classifier_accuracy *this)
{
  *(void *)this = &unk_26D77CF38;
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D77CF38;
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t std::make_shared[abi:ne180100]<turi::evaluation::binary_logloss,turi::evaluation::binary_logloss,void>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x80uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_26D77CFA8;
  uint64_t result = std::allocator<turi::evaluation::binary_logloss>::construct[abi:ne180100]<turi::evaluation::binary_logloss,turi::evaluation::binary_logloss>((uint64_t)&v6, v4 + 3, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void turi::evaluation::binary_logloss::~binary_logloss(turi::evaluation::binary_logloss *this)
{
  *(void *)this = &unk_26D77CFF8;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 64);
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D77CFF8;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 64);
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t std::make_shared[abi:ne180100]<turi::evaluation::multiclass_logloss,turi::evaluation::multiclass_logloss,void>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x88uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_26D77D068;
  uint64_t result = std::allocator<turi::evaluation::multiclass_logloss>::construct[abi:ne180100]<turi::evaluation::multiclass_logloss,turi::evaluation::multiclass_logloss>((uint64_t)&v6, v4 + 3, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void turi::evaluation::multiclass_logloss::~multiclass_logloss(turi::evaluation::multiclass_logloss *this)
{
  *(void *)this = &unk_26D77D0B8;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 64);
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26D77D0B8;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 64);
  long long v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x22A614FA0);
}

void std::make_shared[abi:ne180100]<turi::evaluation::roc_curve,turi::evaluation::roc_curve,void>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_26D77D128;
  std::allocator<turi::evaluation::roc_curve>::construct[abi:ne180100]<turi::evaluation::roc_curve,turi::evaluation::roc_curve>((uint64_t)&v5, (uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
}

void std::make_shared[abi:ne180100]<turi::evaluation::auc,turi::evaluation::auc,void>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x148uLL);
  v4[1] = 0;
  void v4[2] = 0;
  void *v4 = &unk_26D77D1E8;
  std::allocator<turi::evaluation::auc>::construct[abi:ne180100]<turi::evaluation::auc,turi::evaluation::auc>((uint64_t)&v5, (uint64_t)(v4 + 3), a1);
  *a2 = v4 + 3;
  a2[1] = v4;
}

void turi::evaluation::flexible_accuracy::~flexible_accuracy(turi::evaluation::flexible_accuracy *this)
{
  *(void *)this = &unk_26D77D380;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 312);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 272);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  *(void *)this = &unk_26D77CE78;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  long long v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;

  *(void *)this = &unk_26D77D380;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 312);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 272);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  *(void *)this = &unk_26D77CE78;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 104);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy((uint64_t)this + 80, *((void **)this + 11));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 40);
  long long v2 = (void **)((char *)this + 8);
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C406EE6F45FLL);
}

void std::allocate_shared[abi:ne180100]<turi::evaluation::rmse,std::allocator<turi::evaluation::rmse>,turi::evaluation::rmse,void>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x58uLL);
  std::__shared_ptr_emplace<turi::evaluation::rmse>::__shared_ptr_emplace[abi:ne180100]<turi::evaluation::rmse,std::allocator<turi::evaluation::rmse>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
}

void sub_2243C9044(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__shared_ptr_emplace<turi::evaluation::rmse>::__shared_ptr_emplace[abi:ne180100]<turi::evaluation::rmse,std::allocator<turi::evaluation::rmse>,0>(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D77CC98;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = &unk_26D77CCE8;
  *(void *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 4CoreML::Specification::Imputer::New(this, 0) = 0;
  *(_OWORD *)(a1 + 4CoreML::Specification::Imputer::New(this, 0) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 56) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a1 + 8CoreML::Specification::Imputer::New(this, 0) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 8CoreML::Specification::Imputer::New(this, 0) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 4CoreML::Specification::Imputer::New(this, 0) = 0u;
  return result;
}

void std::__shared_ptr_emplace<turi::evaluation::rmse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CC98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::rmse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CC98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::rmse>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::evaluation::rmse::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "rmse");
}

void turi::evaluation::rmse::init(turi::evaluation::rmse *this, unint64_t a2)
{
  *((void *)this + 1) = a2;
  uint64_t v3 = (uint64_t *)((char *)this + 16);
  std::vector<double>::resize((uint64_t)this + 16, a2);
  std::vector<unsigned long>::resize((uint64_t)this + 40, *((void *)this + 1));
  if (*((void *)this + 1))
  {
    unint64_t v4 = 0;
    uint64_t v5 = *v3;
    uint64_t v6 = *((void *)this + 5);
    do
    {
      *(void *)(v5 + 8 * v4) = 0;
      *(void *)(v6 + 8 * v4++) = 0;
    }
    while (v4 < *((void *)this + 1));
  }
}

double turi::evaluation::rmse::register_example(turi::evaluation::rmse *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  double v7 = 0.0;
  switch(*((unsigned char *)a3 + 12))
  {
    case 0:
      double v7 = (double)*(uint64_t *)a3;
      break;
    case 1:
      double v7 = *(double *)a3;
      break;
    case 2:
      uint64_t v9 = *(void *)a3;
      uint64_t v10 = (char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      uint64_t v11 = (char *)v10;
      if (*(char *)(v9 + 31) < 0) {
        uint64_t v11 = *v10;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      double v12 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v9 + 31) < 0) {
        uint64_t v13 = *(void *)(v9 + 16);
      }
      else {
        uint64_t v13 = *(unsigned __int8 *)(v9 + 31);
      }
      if (__idx != v13)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unsigned int v40 = std::string::append(&v49, " cannot be interpreted as a float");
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v46[0] = (void *)v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v20 = v12;
      double v7 = v20;
      break;
    case 3:
      uint64_t v8 = *(void *)a3;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v8 + 8), *(void *)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v14 = *(void *)a3;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      break;
    case 5:
      uint64_t v15 = *(void *)a3;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      break;
    case 6:
      double v7 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      double v16 = *(double *)a3;
      uint64_t v17 = *(atomic_uint **)(*(void *)a3 + 16);
      __p[0] = *(void **)(*(void *)a3 + 8);
      __p[1] = v17;
      if (v17) {
        atomic_fetch_add_explicit(v17 + 2, 1u, memory_order_relaxed);
      }
      long long v18 = *(_OWORD *)(*(void *)&v16 + 24);
      long long v19 = *(_OWORD *)(*(void *)&v16 + 56);
      long long v47 = *(_OWORD *)(*(void *)&v16 + 40);
      long long v48 = v19;
      *(_OWORD *)uint64_t v46 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v47 + 1))
      {
        *(void *)&long long v48 = *((void *)&v47 + 1);
        operator delete(*((void **)&v47 + 1));
      }
      if (v46[0])
      {
        v46[1] = v46[0];
        operator delete(v46[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v21 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v21 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v21 = *(double *)a2;
      break;
    case 2:
      uint64_t v23 = *(void *)a2;
      atomic_ullong *volatile v24 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      uint64_t v25 = (char *)v24;
      if (*(char *)(v23 + 31) < 0) {
        uint64_t v25 = *v24;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v25);
      double v26 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v23 + 31) < 0) {
        uint64_t v27 = *(void *)(v23 + 16);
      }
      else {
        uint64_t v27 = *(unsigned __int8 *)(v23 + 31);
      }
      if (__idx != v27)
      {
        uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v43 = std::string::append(&v49, " cannot be interpreted as a float");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v46[0] = (void *)v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v42, (const std::string *)__p);
        __cxa_throw(v42, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v34 = v26;
      double v21 = v34;
      break;
    case 3:
      uint64_t v22 = *(void *)a2;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v22 + 8), *(void *)(v22 + 16), (uint64_t)(*(void *)(v22 + 16) - *(void *)(v22 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v28 = *(void *)a2;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v28 + 8), *(uint64_t **)(v28 + 16), (uint64_t)(*(void *)(v28 + 16) - *(void *)(v28 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      break;
    case 5:
      uint64_t v29 = *(void *)a2;
      __p[1] = 0;
      v46[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v29 + 8), *(uint64_t **)(v29 + 16), (uint64_t)(*(void *)(v29 + 16) - *(void *)(v29 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
      break;
    case 6:
      double v21 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      double v30 = *(double *)a2;
      atomic_ullong *volatile v31 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(v31 + 2, 1u, memory_order_relaxed);
      }
      long long v32 = *(_OWORD *)(*(void *)&v30 + 24);
      long long v33 = *(_OWORD *)(*(void *)&v30 + 56);
      long long v47 = *(_OWORD *)(*(void *)&v30 + 40);
      long long v48 = v33;
      *(_OWORD *)uint64_t v46 = v32;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v47 + 1))
      {
        *(void *)&long long v48 = *((void *)&v47 + 1);
        operator delete(*((void **)&v47 + 1));
      }
      if (v46[0])
      {
        v46[1] = v46[0];
        operator delete(v46[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  uint64_t v35 = *((void *)this + 5);
  uint64_t v36 = *(void *)(v35 + 8 * a4) + 1;
  *(void *)(v35 + 8 * a4) = v36;
  uint64_t v37 = *((void *)this + 2);
  double result = *(double *)(v37 + 8 * a4)
         + -(*(double *)(v37 + 8 * a4) - (v7 - v21) * (v7 - v21)) / (double)(unint64_t)v36;
  *(double *)(v37 + 8 * a4) = result;
  return result;
}

void sub_2243C9844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t turi::evaluation::supervised_evaluation_interface::register_unmapped_example(turi::evaluation::supervised_evaluation_interface *this, atomic_ullong **a2, void ***a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  char v34 = 0;
  int v33 = 0;
  long long v32 = *a2;
  char v31 = 0;
  int v30 = 0;
  uint64_t v29 = *a3;
  uint64_t result = (*(uint64_t (**)(turi::evaluation::supervised_evaluation_interface *, atomic_ullong **, void ***))(*(void *)this + 48))(this, &v32, &v29);
  switch(v31)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v4 = v29;
        if (v29)
        {
          if (*((char *)v29 + 31) < 0) {
            operator delete(v29[1]);
          }
          uint64_t v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v7 = v29;
        if (v29)
        {
          uint64_t v8 = v29[1];
          if (v8)
          {
            v29[2] = v8;
            operator delete(v8);
          }
          uint64_t v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v29;
        if (v29)
        {
          int v28 = v29 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v28);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = v29;
        if (v29)
        {
          int v28 = v29 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v28);
LABEL_18:
          uint64_t v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v15 = v29;
        if (v29)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v29 + 2);
          uint64_t v5 = v15;
          unsigned int v14 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v29, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = v29;
        if (v29)
        {
          uint64_t v11 = v29[6];
          if (v11)
          {
            v29[7] = v11;
            operator delete(v11);
          }
          double v12 = v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v5 = v10;
          unsigned int v14 = 2071181815;
LABEL_31:
          uint64_t v6 = v14 | 0x1030C4000000000;
LABEL_32:
          uint64_t result = MEMORY[0x22A614FA0](v5, v6);
        }
      }
      break;
    default:
      break;
  }
  switch(v34)
  {
    case 2:
      if (atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v16 = v32;
        if (v32)
        {
          if (*((char *)v32 + 31) < 0) {
            operator delete((void *)v32[1]);
          }
          uint64_t v17 = v16;
          uint64_t v18 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v19 = v32;
        if (v32)
        {
          float v20 = (void *)v32[1];
          if (v20)
          {
            void v32[2] = (atomic_ullong)v20;
            operator delete(v20);
          }
          uint64_t v17 = v19;
          uint64_t v18 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v21 = v32;
        if (v32)
        {
          uint64_t v29 = (void **)(v32 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v29);
          goto LABEL_50;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v21 = v32;
        if (v32)
        {
          uint64_t v29 = (void **)(v32 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v29);
LABEL_50:
          uint64_t v17 = v21;
          uint64_t v18 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v27 = v32;
        if (v32)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v32 + 2);
          uint64_t v17 = v27;
          unsigned int v26 = -235920773;
          goto LABEL_63;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v32, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v22 = v32;
        if (v32)
        {
          uint64_t v23 = (void *)v32[6];
          if (v23)
          {
            v32[7] = (atomic_ullong)v23;
            operator delete(v23);
          }
          atomic_ullong *volatile v24 = (void *)v22[3];
          if (v24)
          {
            v22[4] = (atomic_ullong)v24;
            operator delete(v24);
          }
          uint64_t v25 = (std::__shared_weak_count *)v22[2];
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          uint64_t v17 = v22;
          unsigned int v26 = 2071181815;
LABEL_63:
          uint64_t v18 = v26 | 0x1030C4000000000;
LABEL_64:
          uint64_t result = MEMORY[0x22A614FA0](v17, v18);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2243C9DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, atomic_ullong *);
  uint64_t v5 = va_arg(va1, void);
  switch(BYTE4(v5))
  {
    case 2:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)va);
      break;
    case 3:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)va);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)va);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)va);
      break;
    case 8:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)va);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>((atomic_ullong *volatile *)va);
      break;
    default:
      break;
  }
  turi::evaluation::supervised_evaluation_interface::register_unmapped_example((uint64_t)va, (uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::rmse::get_metric@<X0>(turi::evaluation::rmse *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (unint64_t *)*((void *)this + 5);
    uint64_t v6 = (double *)*((void *)this + 2);
    double v7 = 0.0;
    do
    {
      unint64_t v9 = *v5++;
      unint64_t v8 = v9;
      double v10 = (double)v9;
      double v11 = *v6++;
      double v7 = v7 + v10 * v11;
      v4 += v8;
      --v3;
    }
    while (v3);
    double v12 = v7 / (double)v4;
  }
  else
  {
    double v12 = NAN;
  }
  double v14 = sqrt(v12);
  uint64_t result = turi::flexible_type_converter<double>::set(&v14, (uint64_t)v15);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = *(void *)&v15[5];
  *(void *)(a2 + 8) = *(void *)v15;
  *(unsigned char *)(a2 + 2CoreML::Specification::Imputer::New(this, 0) = v15[12];
  *(_DWORD *)a2 = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::evaluation::max_error>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CD68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::max_error>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CD68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::max_error>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::evaluation::max_error::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "max_error");
}

void turi::evaluation::max_error::init(turi::evaluation::max_error *this, unint64_t a2)
{
  *((void *)this + 1) = a2;
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<double>::resize((uint64_t)this + 16, a2);
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    uint64_t v5 = *v3;
    bzero(v5, 8 * v4);
  }
}

void turi::evaluation::max_error::register_example(turi::evaluation::max_error *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  double v7 = 0.0;
  switch(*((unsigned char *)a3 + 12))
  {
    case 0:
      double v7 = (double)*(uint64_t *)a3;
      break;
    case 1:
      double v7 = *(double *)a3;
      break;
    case 2:
      uint64_t v9 = *(void *)a3;
      double v10 = (char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      double v11 = (char *)v10;
      if (*(char *)(v9 + 31) < 0) {
        double v11 = *v10;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v11);
      double v12 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v44[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v9 + 31) < 0) {
        uint64_t v13 = *(void *)(v9 + 16);
      }
      else {
        uint64_t v13 = *(unsigned __int8 *)(v9 + 31);
      }
      if (__idx != v13)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v38 = std::string::append(&v47, " cannot be interpreted as a float");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v44[0] = (void *)v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v20 = v12;
      double v7 = v20;
      break;
    case 3:
      uint64_t v8 = *(void *)a3;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v8 + 8), *(void *)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v14 = *(void *)a3;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      break;
    case 5:
      uint64_t v15 = *(void *)a3;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      break;
    case 6:
      double v7 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      double v16 = *(double *)a3;
      uint64_t v17 = *(atomic_uint **)(*(void *)a3 + 16);
      __p[0] = *(void **)(*(void *)a3 + 8);
      __p[1] = v17;
      if (v17) {
        atomic_fetch_add_explicit(v17 + 2, 1u, memory_order_relaxed);
      }
      long long v18 = *(_OWORD *)(*(void *)&v16 + 24);
      long long v19 = *(_OWORD *)(*(void *)&v16 + 56);
      long long v45 = *(_OWORD *)(*(void *)&v16 + 40);
      long long v46 = v19;
      *(_OWORD *)long long v44 = v18;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v45 + 1))
      {
        *(void *)&long long v46 = *((void *)&v45 + 1);
        operator delete(*((void **)&v45 + 1));
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v21 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v21 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v21 = *(double *)a2;
      break;
    case 2:
      uint64_t v23 = *(void *)a2;
      atomic_ullong *volatile v24 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      uint64_t v25 = (char *)v24;
      if (*(char *)(v23 + 31) < 0) {
        uint64_t v25 = *v24;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v25);
      double v26 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v44[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v23 + 31) < 0) {
        uint64_t v27 = *(void *)(v23 + 16);
      }
      else {
        uint64_t v27 = *(unsigned __int8 *)(v23 + 31);
      }
      if (__idx != v27)
      {
        unsigned int v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v41 = std::string::append(&v47, " cannot be interpreted as a float");
        long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v44[0] = (void *)v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v40, (const std::string *)__p);
        __cxa_throw(v40, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v34 = v26;
      double v21 = v34;
      break;
    case 3:
      uint64_t v22 = *(void *)a2;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v22 + 8), *(void *)(v22 + 16), (uint64_t)(*(void *)(v22 + 16) - *(void *)(v22 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v28 = *(void *)a2;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v28 + 8), *(uint64_t **)(v28 + 16), (uint64_t)(*(void *)(v28 + 16) - *(void *)(v28 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      break;
    case 5:
      uint64_t v29 = *(void *)a2;
      __p[1] = 0;
      v44[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v29 + 8), *(uint64_t **)(v29 + 16), (uint64_t)(*(void *)(v29 + 16) - *(void *)(v29 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
      break;
    case 6:
      double v21 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      double v30 = *(double *)a2;
      char v31 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v31;
      if (v31) {
        atomic_fetch_add_explicit(v31 + 2, 1u, memory_order_relaxed);
      }
      long long v32 = *(_OWORD *)(*(void *)&v30 + 24);
      long long v33 = *(_OWORD *)(*(void *)&v30 + 56);
      long long v45 = *(_OWORD *)(*(void *)&v30 + 40);
      long long v46 = v33;
      *(_OWORD *)long long v44 = v32;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v45 + 1))
      {
        *(void *)&long long v46 = *((void *)&v45 + 1);
        operator delete(*((void **)&v45 + 1));
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  double v35 = vabdd_f64(v7, v21);
  uint64_t v36 = *((void *)this + 2);
  if (v35 < *(double *)(v36 + 8 * a4)) {
    double v35 = *(double *)(v36 + 8 * a4);
  }
  *(double *)(v36 + 8 * a4) = v35;
}

void sub_2243CA6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t turi::evaluation::max_error::get_metric@<X0>(turi::evaluation::max_error *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  double v9 = 0.0;
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = (double *)*((void *)this + 2);
    double v5 = 0.0;
    do
    {
      double v6 = *v4++;
      double v7 = v6;
      if (v5 < v6) {
        double v5 = v7;
      }
      double v9 = v5;
      --v3;
    }
    while (v3);
  }
  uint64_t result = turi::flexible_type_converter<double>::set(&v9, (uint64_t)v10);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = *(void *)&v10[5];
  *(void *)(a2 + 8) = *(void *)v10;
  *(unsigned char *)(a2 + 2CoreML::Specification::Imputer::New(this, 0) = v10[12];
  *(_DWORD *)a2 = 0;
  return result;
}

void std::__shared_ptr_emplace<turi::evaluation::confusion_matrix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CE28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::confusion_matrix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CE28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::confusion_matrix>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<turi::evaluation::confusion_matrix>::construct[abi:ne180100]<turi::evaluation::confusion_matrix,turi::evaluation::confusion_matrix>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = &unk_26D77CE78;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
  uint64_t v5 = *(void *)(a3 + 32);
  a2[3] = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  a2[4] = v5;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 5), (uint64_t *)(a3 + 40));
  a2[10] = *(void *)(a3 + 80);
  double v6 = (void *)(a3 + 88);
  uint64_t v7 = *(void *)(a3 + 88);
  a2[11] = v7;
  uint64_t v8 = a2 + 11;
  uint64_t v9 = *(void *)(a3 + 96);
  a2[12] = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a3 + 8CoreML::Specification::Imputer::New(this, 0) = v6;
    *double v6 = 0;
    *(void *)(a3 + 96) = 0;
  }
  else
  {
    a2[10] = v8;
  }
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 13), (uint64_t *)(a3 + 104));
  return std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 18), (uint64_t *)(a3 + 144));
}

void *turi::evaluation::confusion_matrix::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "confusion_matrix");
}

uint64_t turi::evaluation::confusion_matrix::init(turi::evaluation::confusion_matrix *this, unint64_t a2)
{
  *((void *)this + 4) = a2;
  return std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::resize((uint64_t *)this + 1, a2);
}

uint64_t turi::evaluation::confusion_matrix::register_example(turi::evaluation::confusion_matrix *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)v12, (uint64_t *)a2, (uint64_t)a3);
  double v6 = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::find<std::pair<turi::flexible_type,turi::flexible_type>>((void *)(*((void *)this + 1) + 40 * a4), v12);
  uint64_t v7 = *((void *)this + 1) + 40 * a4;
  uint64_t v11 = v12;
  if (v6)
  {
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>(v7, v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
    uint64_t v9 = *((void *)v8 + 6) + 1;
  }
  else
  {
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>(v7, v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v11);
    uint64_t v9 = 1;
  }
  *((void *)v8 + 6) = v9;
  return std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v12);
}

void sub_2243CABA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::evaluation::confusion_matrix::get_metric(uint64_t ***this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  turi::evaluation::confusion_matrix::gather_counts_and_labels((turi::evaluation::confusion_matrix *)this);
  if (this[12])
  {
    long long v58 = 0u;
    long long v59 = 0u;
    int v60 = 1065353216;
    for (uint64_t i = this[20]; i; uint64_t i = (uint64_t **)*i)
    {
      __p[0] = i[2];
      v53[0] = (unint64_t)i[4];
      uint64_t v3 = std::map<unsigned long,turi::flexible_type>::at((uint64_t)(this + 10), (unint64_t *)__p);
      uint64_t v4 = std::map<unsigned long,turi::flexible_type>::at((uint64_t)(this + 10), v53);
      uint64_t v5 = i[6];
      std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)&__v, v3, (uint64_t)v4);
      v56.__begin_ = (std::vector<std::string>::pointer)&__v;
      *((void *)std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type>&&>,std::tuple<>>((uint64_t)&v58, (unsigned __int8 *)&__v, (uint64_t)&std::piecewise_construct, (uint64_t **)&v56)+ 6) = v5;
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)&__v);
    }
    if (this + 18 != (uint64_t ***)&v58)
    {
      *((_DWORD *)this + 44) = v60;
      std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,void *> *>>(this + 18, (void *)v59, 0);
    }
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&v58);
  }
  turi::sframe::sframe((turi::sframe *)&v58);
  memset(&v56, 0, sizeof(v56));
  std::string::basic_string[abi:ne180100]<0>(__p, "target_label");
  std::vector<std::string>::pointer end = v56.__end_;
  if (v56.__end_ >= v56.__end_cap_.__value_)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56.__end_ - (char *)v56.__begin_) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3) > v9) {
      unint64_t v9 = 0x5555555555555556 * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v56.__end_cap_;
    if (v10) {
      uint64_t v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v56.__end_cap_, v10);
    }
    else {
      uint64_t v11 = 0;
    }
    double v12 = v11 + v8;
    __v.__first_ = v11;
    __v.__begin_ = v12;
    __v.__end_cap_.__value_ = &v11[v10];
    long long v13 = *(_OWORD *)__p;
    v12->__r_.__value_.__r.__words[2] = v55;
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    __p[1] = 0;
    unint64_t v55 = 0;
    __p[0] = 0;
    __v.__end_ = v12 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v56, &__v);
    uint64_t v14 = v56.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v56.__end_ = v14;
    if (SHIBYTE(v55) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    v56.__end_->__r_.__value_.__r.__words[2] = v55;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
    v56.__end_ = end + 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "predicted_label");
  std::vector<std::string>::pointer v15 = v56.__end_;
  if (v56.__end_ >= v56.__end_cap_.__value_)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56.__end_ - (char *)v56.__begin_) >> 3);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3) > v18) {
      unint64_t v18 = 0x5555555555555556 * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v18;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v56.__end_cap_;
    if (v19) {
      float v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v56.__end_cap_, v19);
    }
    else {
      float v20 = 0;
    }
    double v21 = v20 + v17;
    __v.__first_ = v20;
    __v.__begin_ = v21;
    __v.__end_cap_.__value_ = &v20[v19];
    long long v22 = *(_OWORD *)__p;
    v21->__r_.__value_.__r.__words[2] = v55;
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
    __p[1] = 0;
    unint64_t v55 = 0;
    __p[0] = 0;
    __v.__end_ = v21 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v56, &__v);
    uint64_t v23 = v56.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v56.__end_ = v23;
    if (SHIBYTE(v55) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v16 = *(_OWORD *)__p;
    v56.__end_->__r_.__value_.__r.__words[2] = v55;
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    v56.__end_ = v15 + 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "count");
  std::vector<std::string>::pointer v24 = v56.__end_;
  if (v56.__end_ >= v56.__end_cap_.__value_)
  {
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v56.__end_ - (char *)v56.__begin_) >> 3);
    unint64_t v27 = v26 + 1;
    if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3) > v27) {
      unint64_t v27 = 0x5555555555555556 * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v56.__end_cap_.__value_ - (char *)v56.__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v28 = v27;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v56.__end_cap_;
    if (v28) {
      uint64_t v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)&v56.__end_cap_, v28);
    }
    else {
      uint64_t v29 = 0;
    }
    double v30 = v29 + v26;
    __v.__first_ = v29;
    __v.__begin_ = v30;
    __v.__end_cap_.__value_ = &v29[v28];
    long long v31 = *(_OWORD *)__p;
    v30->__r_.__value_.__r.__words[2] = v55;
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    __p[1] = 0;
    unint64_t v55 = 0;
    __p[0] = 0;
    __v.__end_ = v30 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v56, &__v);
    long long v32 = v56.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v56.__end_ = v32;
    if (SHIBYTE(v55) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v25 = *(_OWORD *)__p;
    v56.__end_->__r_.__value_.__r.__words[2] = v55;
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
    v56.__end_ = v24 + 1;
  }
  long long v33 = this[20];
  if (!v33)
  {
    LODWORD(v37) = 7;
    goto LABEL_63;
  }
  unsigned __int8 v34 = 7;
  uint64_t v35 = 7;
  while (1)
  {
    int v36 = *((unsigned __int8 *)v33 + 28);
    uint64_t v37 = *((unsigned __int8 *)v33 + 44);
    if (v34 == 7)
    {
      unsigned __int8 v34 = *((unsigned char *)v33 + 28);
    }
    else if (v36 != 7 && v36 != v34)
    {
      unsigned __int8 v34 = 2;
      goto LABEL_64;
    }
    if (v35 != 7)
    {
      BOOL v38 = v37 == 7 || v37 == v35;
      uint64_t v37 = v35;
      if (!v38)
      {
        LODWORD(v37) = 2;
LABEL_62:
        LODWORD(v35) = v37;
        if (v34 == 7)
        {
LABEL_63:
          unsigned __int8 v34 = 1;
          LODWORD(v35) = v37;
        }
LABEL_64:
        if (v35 == 7) {
          char v39 = 1;
        }
        else {
          char v39 = v35;
        }
        __p[0] = 0;
        __p[1] = 0;
        unint64_t v55 = 0;
        unsigned int v40 = operator new(1uLL);
        unsigned char *v40 = v34;
        __p[0] = v40;
        unint64_t v55 = (unint64_t)(v40 + 1);
        long long v41 = operator new(2uLL);
        long long v42 = v41 + 2;
        v41[1] = v39;
        *long long v41 = *v40;
        __p[0] = v41;
        __p[1] = v41 + 2;
        unint64_t v55 = (unint64_t)(v41 + 2);
        operator delete(v40);
        __p[1] = v41 + 2;
        if ((unint64_t)(v41 + 2) >= v55)
        {
          long long v44 = __p[0];
          uint64_t v45 = v42 - (char *)__p[0];
          int64_t v46 = v42 - (char *)__p[0] + 1;
          if (v46 < 0) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v47 = v55 - (unint64_t)__p[0];
          if (2 * (v55 - (unint64_t)__p[0]) > v46) {
            int64_t v46 = 2 * v47;
          }
          if (v47 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v48 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v48 = v46;
          }
          if (v48) {
            std::string v49 = operator new(v48);
          }
          else {
            std::string v49 = 0;
          }
          uint64_t v50 = &v49[v48];
          v49[v45] = 0;
          double v43 = &v49[v45 + 1];
          if (v42 == v44)
          {
            v49 += v45;
          }
          else
          {
            uint64_t v51 = v41 - v44 + 1;
            do
            {
              char v52 = *--v42;
              v49[v51--] = v52;
            }
            while (v42 != v44);
          }
          __p[0] = v49;
          __p[1] = v43;
          unint64_t v55 = (unint64_t)v50;
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          void v41[2] = 0;
          double v43 = v41 + 3;
        }
        __p[1] = v43;
        std::string::basic_string[abi:ne180100]<0>(&__v, "");
        turi::sframe::open_for_write((uint64_t)&v58, &v56, __p, (const std::string *)&__v, 1, 1);
      }
    }
    long long v33 = (uint64_t **)*v33;
    uint64_t v35 = v37;
    if (!v33) {
      goto LABEL_62;
    }
  }
}

void sub_2243CB8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *__p, __int16 a7, char a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__pa, std::__split_buffer<std::string> *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,...)
{
  va_start(va, a35);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result = a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    return std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 40 * a2;
    while (result != v7)
      uint64_t result = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

uint64_t std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v16[4] = result;
    if (v11) {
      double v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,turi::flexible_type>>>(result, v11);
    }
    else {
      double v12 = 0;
    }
    uint64_t v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    uint64_t v16[3] = &v12[40 * v11];
    std::vector<std::string>::pointer v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)uint64_t v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_2243CBC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = (uint64_t *)*a1;
  unint64_t v4 = (uint64_t *)a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 5;
    uint64_t result = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(result - 40, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v17 = operator new(0x38uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *unint64_t v17 = 0;
  v17[1] = v10;
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v17 + 2), *a4);
  void v17[6] = 0;
  char v28 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::vector<std::string>::pointer v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *std::vector<std::string>::pointer v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11) {
          v25 %= v11;
        }
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_2243CBF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::confusion_matrix::gather_counts_and_labels(turi::evaluation::confusion_matrix *this)
{
  long long v11 = 0u;
  long long v12 = 0u;
  int v13 = 1065353216;
  unint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    for (unint64_t i = 0; i < v2; ++i)
    {
      unint64_t v4 = *(unsigned __int8 **)(*((void *)this + 1) + 40 * i + 16);
      if (v4)
      {
        do
        {
          uint64_t v5 = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::find<std::pair<turi::flexible_type,turi::flexible_type>>(&v11, v4 + 16);
          uint64_t v6 = *((void *)v4 + 6);
          uint64_t v14 = (uint64_t *)(v4 + 16);
          if (v5)
          {
            uint64_t v7 = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>((uint64_t)&v11, v4 + 16, (uint64_t)&std::piecewise_construct, &v14);
            *((void *)v7 + 6) += v6;
          }
          else
          {
            *((void *)std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type> const&>,std::tuple<>>((uint64_t)&v11, v4 + 16, (uint64_t)&std::piecewise_construct, &v14)+ 6) = v6;
          }
          unint64_t v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
        unint64_t v2 = *((void *)this + 4);
      }
    }
  }
  if ((long long *)((char *)this + 144) != &v11)
  {
    *((_DWORD *)this + 44) = v13;
    std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,void *> *>>((void *)this + 18, (void *)v12, 0);
  }
  uint64_t v8 = (unsigned __int8 *)*((void *)this + 20);
  if (v8)
  {
    unint64_t v9 = (void *)((char *)this + 40);
    do
    {
      if (!std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(v9, v8 + 16))std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t)v9, v8 + 16, (uint64_t)(v8 + 16)); {
      if (!std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::find<turi::flexible_type>(v9, v8 + 32))std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t)v9, v8 + 32, (uint64_t)(v8 + 32));
      }
      uint64_t v8 = *(unsigned __int8 **)v8;
    }
    while (v8);
  }
  return std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)&v11);
}

void sub_2243CC118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::map<unsigned long,turi::flexible_type>::at(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  unint64_t v3 = *a2;
  while (1)
  {
    while (1)
    {
      unint64_t v4 = v2[4];
      if (v3 >= v4) {
        break;
      }
      unint64_t v2 = (void *)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return v2 + 5;
    }
    unint64_t v2 = (void *)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_unique_key_args<std::pair<turi::flexible_type,turi::flexible_type>,std::piecewise_construct_t const&,std::tuple<std::pair<turi::flexible_type,turi::flexible_type>&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(i + 16, (uint64_t)a2))return i; {
        }
          }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v17 = operator new(0x38uLL);
  v30[0] = v17;
  v30[1] = a1 + 16;
  *unint64_t v17 = 0;
  v17[1] = v10;
  float v18 = *a4;
  v17[2] = 0;
  *((_DWORD *)v17 + 6) = 0;
  *((unsigned char *)v17 + 28) = 0;
  uint64_t v19 = *v18;
  *(void *)((char *)v17 + 21) = *(uint64_t *)((char *)v18 + 5);
  v17[2] = v19;
  *((unsigned char *)v17 + 28) = *((unsigned char *)v18 + 12);
  *((unsigned char *)v18 + 12) = 0;
  void v17[4] = 0;
  *((_DWORD *)v17 + 1CoreML::Specification::Imputer::New(this, 0) = 0;
  *((unsigned char *)v17 + 44) = 0;
  uint64_t v20 = v18[2];
  *(void *)((char *)v17 + 37) = *(uint64_t *)((char *)v18 + 21);
  void v17[4] = v20;
  *((unsigned char *)v17 + 44) = *((unsigned char *)v18 + 28);
  *((unsigned char *)v18 + 28) = 0;
  void v17[6] = 0;
  char v31 = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    BOOL v23 = 1;
    if (v11 >= 3) {
      BOOL v23 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v11);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      size_t v26 = v25;
    }
    else {
      size_t v26 = v24;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v26);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)v30[0] = *v27;
    *unint64_t v27 = v30[0];
  }
  else
  {
    *(void *)v30[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v30[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v30[0])
    {
      unint64_t v28 = *(void *)(*(void *)v30[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v28 >= v11) {
          v28 %= v11;
        }
      }
      else
      {
        v28 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v28) = v30[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v30[0];
  v30[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return i;
}

void sub_2243CC440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,void *> *>>(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]((uint64_t)(v8 + 2), v4 + 2);
        v8[6] = v4[6];
        unint64_t v10 = (void *)*v8;
        std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi(a1, (uint64_t)v8);
        unint64_t v4 = (void *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        uint64_t v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_multi<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long> const&>(a1, v4 + 2);
    unint64_t v4 = (void *)*v4;
  }
}

void sub_2243CC52C(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_2243CC544(_Unwind_Exception *a1)
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi(void *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 16;
  unint64_t v5 = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()((uint64_t)(a1 + 3), (unsigned __int8 *)(a2 + 16));
  *(void *)(a2 + 8) = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi_perform(a1, (void *)a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__rehash<false>(a1, v12);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  unint64_t v16 = *(unsigned __int8 **)(*(void *)a1 + 8 * v15);
  if (v16)
  {
    unint64_t v17 = *(unsigned __int8 **)v16;
    if (*(void *)v16)
    {
      int v18 = 0;
      do
      {
        unint64_t v19 = *((void *)v17 + 1);
        if (v14 > 1)
        {
          unint64_t v20 = *((void *)v17 + 1);
          if (v19 >= v6) {
            unint64_t v20 = v19 % v6;
          }
        }
        else
        {
          unint64_t v20 = v19 & (v6 - 1);
        }
        if (v20 != v15) {
          break;
        }
        int v21 = v19 == a2
            ? std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>(v17 + 16, a3): 0;
        if (v18 & (v21 ^ 1)) {
          break;
        }
        v18 |= v21;
        unint64_t v16 = *(unsigned __int8 **)v16;
        unint64_t v17 = *(unsigned __int8 **)v16;
      }
      while (*(void *)v16);
    }
  }
  return v16;
}

void std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v13 = *(void *)(i + 8);
        if (v10 > 1)
        {
          if (v13 >= a2) {
            v13 %= a2;
          }
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          uint64_t v7 = (uint64_t *)i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          unint64_t v14 = *(void **)i;
          if (*(void *)i)
          {
            unint64_t v15 = (void *)i;
            while (1)
            {
              int v16 = std::operator==[abi:ne180100]<turi::flexible_type,turi::flexible_type,turi::flexible_type,turi::flexible_type>((unsigned __int8 *)(i + 16), (uint64_t)(v14 + 2));
              unint64_t v17 = (void *)*v15;
              if (!v16) {
                break;
              }
              unint64_t v14 = (void *)*v17;
              unint64_t v15 = (void *)*v15;
              if (!*v17) {
                goto LABEL_31;
              }
            }
            unint64_t v14 = (void *)*v15;
            unint64_t v17 = v15;
          }
          else
          {
            unint64_t v17 = (void *)i;
          }
LABEL_31:
          uint64_t *v7 = (uint64_t)v14;
          *unint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
          **(void **)(*(void *)a1 + 8 * v1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v7;
          uint64_t v7 = (uint64_t *)i;
          unint64_t v8 = v13;
        }
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__emplace_multi<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long> const&>(void *a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__construct_node<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long> const&>((uint64_t)a1, a2, (uint64_t)v5);
  uint64_t inserted = std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_2243CCA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::__unordered_map_hasher<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,true>,std::__unordered_map_equal<std::pair<turi::flexible_type,turi::flexible_type>,std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,turi::evaluation::flex_pair_hash,true>,std::allocator<std::__hash_value_type<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long>>>::__construct_node<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = operator new(0x38uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]((uint64_t)v7 + 16, a2);
  *((void *)v7 + 6) = a2[4];
  *(unsigned char *)(a3 + 16) = 1;
  uint64_t result = std::hash<std::pair<turi::flexible_type,turi::flexible_type>>::operator()(a1 + 24, (unsigned __int8 *)v7 + 16);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_2243CCAB4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::pair<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::confusion_matrix::confusion_matrix(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D77CE78;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4CoreML::Specification::Imputer::New(this, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 8CoreML::Specification::Imputer::New(this, 0) = a1 + 88;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12CoreML::Specification::Imputer::New(this, 0) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16CoreML::Specification::Imputer::New(this, 0) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  if (a1 + 80 != a2) {
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,turi::flexible_type>,std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *> *,long>>((uint64_t **)(a1 + 80), *(char **)a2, (char *)(a2 + 8));
  }
  return a1;
}

void sub_2243CCB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v15 = v14;
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v13);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v12);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(v11, *(void **)(v10 + 88));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(v10 + 40);
  a10 = v15;
  std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,turi::flexible_type>,std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *> *,long>>(uint64_t **result, char *a2, char *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    std::locale v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    unint64_t v14 = result;
    unint64_t v15 = v8;
    int v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint8x8_t v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          std::pair<unsigned long &,turi::flexible_type &>::operator=[abi:ne180100]<unsigned long const,turi::flexible_type,(void *)0>((uint64_t)v17, (uint64_t)(v9 + 32));
          std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__node_insert_multi(v5, v16);
          int v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (char *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(char **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (char *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              uint8x8_t v9 = a2;
            }
            while (!v11);
          }
          unint64_t v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          uint8x8_t v9 = a2;
        }
        while (!v11);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_multi<std::pair<unsigned long const,turi::flexible_type> const&>((uint64_t)v5, a2 + 32);
      uint64_t v12 = (char *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (char *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_2243CCD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned long &,turi::flexible_type &>::operator=[abi:ne180100]<unsigned long const,turi::flexible_type,(void *)0>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (uint64_t *)(a2 + 8);
  **(void **)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 + 8 != v4)
  {
    switch(*(unsigned char *)(v4 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v6 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          if (*((char *)v6 + 31) < 0) {
            operator delete((void *)v6[1]);
          }
          atomic_ullong *volatile v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            uint64_t v9[2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          atomic_ullong *volatile v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          int v21 = (void **)(v11 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v21);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          int v21 = (void **)(v11 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v21);
LABEL_19:
          atomic_ullong *volatile v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v12 + 2);
          atomic_ullong *volatile v7 = v12;
          unsigned int v13 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v4;
          if (*(void *)v4)
          {
            unint64_t v15 = (void *)v14[6];
            if (v15)
            {
              v14[7] = (atomic_ullong)v15;
              operator delete(v15);
            }
            int v16 = (void *)v14[3];
            if (v16)
            {
              void v14[4] = (atomic_ullong)v16;
              operator delete(v16);
            }
            unint64_t v17 = (std::__shared_weak_count *)v14[2];
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            atomic_ullong *volatile v7 = v14;
            unsigned int v13 = 2071181815;
LABEL_32:
            uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v7, v8);
          }
LABEL_34:
          *(void *)uint64_t v4 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v18 = *v3;
    *(void *)(v4 + 5) = *(uint64_t *)((char *)v3 + 5);
    *(void *)uint64_t v4 = v18;
    unsigned int v19 = *(unsigned __int8 *)(a2 + 20);
    *(unsigned char *)(v4 + 12) = v19;
    if (v19 <= 9 && ((1 << v19) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v4, 1uLL);
    }
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        unint64_t v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

void std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(a1, a2[1]);
    std::pair<unsigned long const,turi::flexible_type>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::pair<unsigned long const,turi::flexible_type>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 8);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          unint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = *(void **)(a1 + 8);
        if (v5)
        {
          atomic_ullong *volatile v6 = (void *)v5[1];
          if (v6)
          {
            void v5[2] = v6;
            operator delete(v6);
          }
          unint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        if (v7)
        {
          unint64_t v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 8);
        if (v7)
        {
          unint64_t v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          unint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 8);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          unint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 8);
        if (v10)
        {
          atomic_ullong *volatile v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          atomic_ullong *volatile v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          unsigned int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          unint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 2CoreML::Specification::Imputer::New(this, 0) = 0;
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_multi<std::pair<unsigned long const,turi::flexible_type> const&>(uint64_t a1, char *a2)
{
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__construct_node<std::pair<unsigned long const,turi::flexible_type> const&>(a1, a2, (uint64_t)v8);
  unint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (uint64_t **)v4;
        if (v8[0][4] >= (unint64_t)v4[4]) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        unint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unint64_t v5 = v3 + 1;
  }
  else
  {
    unint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v8[0]);
  atomic_ullong *volatile v6 = v8[0];
  v8[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v6;
}

char *std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__construct_node<std::pair<unsigned long const,turi::flexible_type> const&>@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = (char *)operator new(0x38uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *((void *)result + 4) = *(void *)a2;
  *((void *)result + 5) = 0;
  uint64_t v7 = (atomic_ullong *volatile *)(result + 40);
  *((_DWORD *)result + 12) = 0;
  result[52] = 0;
  if (result + 32 != a2)
  {
    *(void *)(result + 45) = *(void *)(a2 + 13);
    atomic_ullong *volatile *v7 = *((atomic_ullong *volatile *)a2 + 1);
    unsigned int v8 = a2[20];
    result[52] = v8;
    if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
      atomic_fetch_add(*v7, 1uLL);
    }
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<unsigned long const,turi::flexible_type>::~pair((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::vector<std::unordered_map<std::pair<turi::flexible_type,turi::flexible_type>,unsigned long,turi::evaluation::flex_pair_hash,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<std::pair<turi::flexible_type,turi::flexible_type> const,unsigned long>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t turi::variant_converter<std::map<unsigned long,turi::flexible_type>,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  void v21[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v21, 0, 13);
  uint64_t v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((atomic_ullong **)v3 != v21)
  {
    uint64_t v5 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v21 + 5) = *(atomic_ullong **)(v3 + 5);
    v21[0] = v5;
    BYTE4(v21[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v21[1]) <= 9u && ((1 << SBYTE4(v21[1])) & 0x33C) != 0) {
      atomic_fetch_add(v21[0], 1uLL);
    }
  }
  uint64_t result = turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::get((turi::flexible_type_internals *)v21, v4, a2);
  switch(BYTE4(v21[1]))
  {
    case 2:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v8 = v21[0];
        if (v21[0])
        {
          if (*((char *)v21[0] + 31) < 0) {
            operator delete(*((void **)v21[0] + 1));
          }
          unsigned int v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v17 = v21[0];
        if (v21[0])
        {
          uint64_t v18 = (void *)v21[0][1];
          if (v18)
          {
            v21[0][2] = (atomic_ullong)v18;
            operator delete(v18);
          }
          unsigned int v9 = v17;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v11 = v21[0];
        if (v21[0])
        {
          v20[0] = (void **)(v21[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v20);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v11 = v21[0];
        if (v21[0])
        {
          v20[0] = (void **)(v21[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v20);
LABEL_33:
          unsigned int v9 = v11;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v19 = v21[0];
        if (v21[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v21[0] + 2);
          unsigned int v9 = v19;
          unsigned int v16 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = v21[0];
        if (v21[0])
        {
          unsigned int v13 = (void *)v21[0][6];
          if (v13)
          {
            v21[0][7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          atomic_ullong *volatile v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          unint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          unsigned int v9 = v12;
          unsigned int v16 = 2071181815;
LABEL_37:
          uint64_t v10 = v16 | 0x1030C4000000000;
LABEL_38:
          uint64_t result = MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2243CD744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      int v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      size_t v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      unint64_t v27 = (void *)v26[1];
      if (v27)
      {
        _OWORD v26[2] = v27;
        operator delete(v27);
      }
      int v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      BOOL v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      BOOL v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      int v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      int v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      int v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

void sub_2243CDAA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  std::exception::~exception(&a10);
  __cxa_begin_catch(a1);
  turi::_throw_variant_error<turi::flexible_type>(v10);
}

void sub_2243CDAC8(_Unwind_Exception *a1)
{
}

uint64_t turi::flexible_type_converter<std::map<unsigned long,turi::flexible_type>>::get@<X0>(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  return turi::flexible_type_internals::ft_converter<9>::get<std::map<unsigned long,turi::flexible_type>>((uint64_t **)a3, a1, a2);
}

void sub_2243CDB14(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_internals::ft_converter<9>::get<std::map<unsigned long,turi::flexible_type>>(uint64_t **a1, turi::flexible_type_internals *this, const char *a3)
{
  v15[2] = *MEMORY[0x263EF8340];
  unint64_t v14 = 0;
  v15[0] = 0;
  *(void *)((char *)v15 + 5) = 0;
  int v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 4)
  {
    uint64_t v9 = *(void *)this;
    uint64_t v10 = *(void *)(*(void *)this + 8);
    if (*(void *)(*(void *)this + 16) != v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<10>::get<unsigned long,turi::flexible_type>(&v14, (turi::flexible_type_internals *)(v10 + v11), a3);
        std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,turi::flexible_type>>(a1, &v14, (uint64_t)&v14);
        ++v12;
        uint64_t v10 = *(void *)(v9 + 8);
        v11 += 16;
      }
      while (v12 < (*(void *)(v9 + 16) - v10) >> 4);
    }
  }
  else
  {
    if (v4 != 5) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"flex_dict / list of 2-element flex_lists/flex_vec", a3);
    }
    uint64_t v5 = *(void *)this;
    uint64_t v6 = *(void *)(*(void *)this + 8);
    if (*(void *)(*(void *)this + 16) != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(&v14, (turi::flexible_type_internals *)(v6 + v7), a3);
        turi::flexible_type_internals::ft_converter<1>::get((uint64_t)v15, (uint64_t *)(*(void *)(v5 + 8) + v7 + 16));
        std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,turi::flexible_type>>(a1, &v14, (uint64_t)&v14);
        ++v8;
        uint64_t v6 = *(void *)(v5 + 8);
        v7 += 32;
      }
      while (v8 < (*(void *)(v5 + 16) - v6) >> 5);
    }
  }
  return std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)&v14);
}

void sub_2243CDC80()
{
}

void sub_2243CDC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<unsigned long,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::pair<unsigned long,turi::flexible_type>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    unint64_t v9 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v10 = v5[4];
        if (v9 >= v10) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v10 >= v9) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v11 = operator new(0x38uLL);
    v14[1] = v6;
    *(void *)((char *)v11 + 45) = *(void *)(a3 + 13);
    uint64_t v12 = *(void *)(a3 + 8);
    void v11[4] = *(void *)a3;
    v11[5] = v12;
    *((unsigned char *)v11 + 52) = *(unsigned char *)(a3 + 20);
    *(unsigned char *)(a3 + 2CoreML::Specification::Imputer::New(this, 0) = 0;
    char v15 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v7, v11);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t turi::flexible_type_internals::ft_converter<10>::get<unsigned long,turi::flexible_type>(unint64_t *a1, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12) != 4) {
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec", a3);
  }
  uint64_t v3 = *(void *)this;
  if (*(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8) != 32) {
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec (list size != 2)", a3);
  }
  turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(a1, *(turi::flexible_type_internals **)(*(void *)this + 8), a3);
  uint64_t v5 = (uint64_t *)(*(void *)(v3 + 8) + 16);
  return turi::flexible_type_internals::ft_converter<1>::get((uint64_t)(a1 + 1), v5);
}

void sub_2243CDE40()
{
}

uint64_t *std::map<unsigned long,turi::flexible_type>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long,turi::flexible_type>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,turi::flexible_type>,std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2243CDE8C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long,turi::flexible_type>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,turi::flexible_type>,std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,turi::flexible_type> const&>(v5, v6, v4 + 4, (char *)v4 + 32);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,turi::flexible_type> const&>(uint64_t **a1, void *a2, unint64_t *a3, char *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__construct_node<std::pair<unsigned long const,turi::flexible_type> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned long,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::allocate_shared[abi:ne180100]<turi::evaluation::classifier_accuracy,std::allocator<turi::evaluation::classifier_accuracy>,turi::evaluation::classifier_accuracy,void>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x58uLL);
  std::__shared_ptr_emplace<turi::evaluation::classifier_accuracy>::__shared_ptr_emplace[abi:ne180100]<turi::evaluation::classifier_accuracy,std::allocator<turi::evaluation::classifier_accuracy>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
}

void sub_2243CE010(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double std::__shared_ptr_emplace<turi::evaluation::classifier_accuracy>::__shared_ptr_emplace[abi:ne180100]<turi::evaluation::classifier_accuracy,std::allocator<turi::evaluation::classifier_accuracy>,0>(uint64_t a1, uint64_t a2)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D77CEE8;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = &unk_26D77CF38;
  *(void *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 4CoreML::Specification::Imputer::New(this, 0) = 0;
  *(_OWORD *)(a1 + 4CoreML::Specification::Imputer::New(this, 0) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 56) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a1 + 8CoreML::Specification::Imputer::New(this, 0) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 8CoreML::Specification::Imputer::New(this, 0) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 4CoreML::Specification::Imputer::New(this, 0) = 0u;
  return result;
}

void std::__shared_ptr_emplace<turi::evaluation::classifier_accuracy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::classifier_accuracy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::classifier_accuracy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::evaluation::classifier_accuracy::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "classifier_accuracy");
}

double turi::evaluation::classifier_accuracy::register_example(turi::evaluation::classifier_accuracy *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  ++*(void *)(*((void *)this + 5) + 8 * a4);
  switch(*((unsigned char *)a3 + 12))
  {
    case 0:
      BOOL v6 = 0;
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          BOOL v7 = *(void *)a2 == *(void *)a3;
          goto LABEL_38;
        case 1:
          double v8 = *(double *)a2;
          uint64_t v9 = *(void *)a3;
          goto LABEL_83;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_50;
        case 6:
          BOOL v7 = *(void *)a3 == (uint64_t)(*(void *)a2 << 8) >> 8 && *((_DWORD *)a2 + 2) == 0;
          goto LABEL_38;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      BOOL v6 = 0;
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          double v8 = *(double *)a3;
          uint64_t v9 = *(void *)a2;
LABEL_83:
          BOOL v7 = v8 == (double)v9;
          goto LABEL_38;
        case 1:
          BOOL v6 = *(double *)a2 == *(double *)a3;
          goto LABEL_50;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_50;
        case 6:
          double v75 = *(double *)a3;
          double v76 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
          goto LABEL_90;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v10 = *((unsigned __int8 *)a2 + 12);
      BOOL v11 = v10 - 3 >= 7 && v10 >= 2;
      if (!v11) {
        goto LABEL_49;
      }
      if (v10 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v12 = *(void *)a3;
      double v13 = *(double *)a2;
      char v14 = *(unsigned char *)(*(void *)a2 + 31);
      size_t v15 = v14 < 0 ? *(void *)(*(void *)&v13 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
      uint64_t v77 = *(char *)(v12 + 31) < 0 ? *(void *)(v12 + 16) : *(unsigned __int8 *)(v12 + 31);
      if (v15 != v77) {
        goto LABEL_49;
      }
      __int16 v78 = (void *)(*(void *)&v13 + 8);
      if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
        __int16 v78 = (void *)*v78;
      }
      char v79 = (void *)(v12 + 8);
      if ((*(unsigned char *)(v12 + 31) & 0x80) != 0) {
        char v79 = (void *)*v79;
      }
      if (v14 < 0)
      {
        BOOL v7 = memcmp(v78, v79, v15) == 0;
LABEL_38:
        BOOL v6 = v7;
      }
      else
      {
        if (!v15) {
          goto LABEL_112;
        }
        size_t v80 = v15 - 1;
        do
        {
          int v82 = *(unsigned __int8 *)v78;
          __int16 v78 = (void *)((char *)v78 + 1);
          int v81 = v82;
          int v84 = *(unsigned __int8 *)v79;
          char v79 = (void *)((char *)v79 + 1);
          int v83 = v84;
          BOOL v11 = v80-- != 0;
          char v85 = v11;
          BOOL v6 = v81 == v83;
        }
        while (v81 == v83 && (v85 & 1) != 0);
      }
      goto LABEL_50;
    case 3:
      unsigned int v16 = *((unsigned __int8 *)a2 + 12);
      if (v16 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v16 != 3) {
        goto LABEL_49;
      }
      unint64_t v17 = *(double **)(*(void *)a2 + 8);
      uint64_t v18 = *(double **)(*(void *)a2 + 16);
      unint64_t v19 = v18 - v17;
      uint64_t v20 = *(double **)(*(void *)a3 + 8);
      if (v19 != (uint64_t)(*(void *)(*(void *)a3 + 16) - (void)v20) >> 3) {
        goto LABEL_49;
      }
      if (v18 == v17) {
        goto LABEL_112;
      }
      if (v19 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v18 - v17;
      }
      if (*v17 != *v20) {
        goto LABEL_49;
      }
      uint64_t v22 = 1;
      do
      {
        unint64_t v23 = v22;
        if (v21 == v22) {
          break;
        }
        double v24 = v17[v22];
        double v25 = v20[v22++];
      }
      while (v24 == v25);
      BOOL v6 = v23 >= v19;
      goto LABEL_50;
    case 4:
      unsigned int v26 = *((unsigned __int8 *)a2 + 12);
      if (v26 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v26 != 4) {
        goto LABEL_49;
      }
      int v27 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v87, (uint64_t *)(*(void *)a2 + 8), (void *)(*(void *)a3 + 8));
      goto LABEL_47;
    case 5:
      unsigned int v28 = *((unsigned __int8 *)a2 + 12);
      if (v28 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v28 != 5) {
        goto LABEL_49;
      }
      int v27 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v87, (uint64_t **)(*(void *)a2 + 8), (uint64_t **)(*(void *)a3 + 8));
      goto LABEL_47;
    case 6:
      BOOL v6 = 0;
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          BOOL v7 = *(void *)a2 == (uint64_t)(*(void *)a3 << 8) >> 8 && *((_DWORD *)a3 + 2) == 0;
          goto LABEL_38;
        case 1:
          double v76 = *(double *)a2;
          double v75 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
LABEL_90:
          BOOL v6 = vabdd_f64(v76, v75) < 0.0000005;
          goto LABEL_50;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_50;
        case 6:
          BOOL v7 = ((*(void *)a3 ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0 && *((_DWORD *)a2 + 2) == *((_DWORD *)a3 + 2);
          goto LABEL_38;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v29 = *((unsigned __int8 *)a2 + 12);
      if (v29 >= 0xA) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      BOOL v7 = v29 == 7;
      goto LABEL_38;
    case 8:
      unsigned int v30 = *((unsigned __int8 *)a2 + 12);
      if (v30 < 8 || v30 == 9) {
        goto LABEL_49;
      }
      if (v30 != 8) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      int v27 = turi::image_type::operator==(*(void *)a2 + 8, *(void *)a3 + 8);
LABEL_47:
      BOOL v6 = v27;
      goto LABEL_50;
    case 9:
      unsigned int v32 = *((unsigned __int8 *)a2 + 12);
      if (v32 < 9) {
        goto LABEL_49;
      }
      if (v32 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v35 = *(void *)a3;
      int v36 = *(void **)a2;
      if (*(void *)a3 == *(void *)a2) {
        goto LABEL_112;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v36 + 1), v35 + 8))
      {
LABEL_49:
        BOOL v6 = 0;
        goto LABEL_50;
      }
      BOOL v38 = (char *)v36[3];
      uint64_t v37 = (char *)v36[4];
      uint64_t v39 = v37 - v38;
      if (v37 == v38) {
        goto LABEL_112;
      }
      if (!v36[1]) {
        goto LABEL_112;
      }
      uint64_t v40 = 1;
      do
      {
        uint64_t v41 = *(void *)v38;
        v38 += 8;
        v40 *= v41;
      }
      while (v38 != v37);
      if (!v40)
      {
LABEL_112:
        BOOL v6 = 1;
        goto LABEL_50;
      }
      uint64_t v86 = 0;
      std::vector<unsigned long>::vector(&v87, v39 >> 3, &v86);
      long long v42 = v87;
      double v43 = v88;
      uint64_t v44 = **(void **)(v35 + 8);
      uint64_t v45 = (char *)v88 - (char *)v87;
      unint64_t v46 = v88 - v87;
      unint64_t v47 = v46 - 1;
      if (v46 <= 1) {
        uint64_t v48 = 1;
      }
      else {
        uint64_t v48 = v88 - v87;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v43 == v42)
    {
      uint64_t v56 = 0;
      double v57 = *(double *)(*(void *)v36[1] + 8 * v36[9]);
    }
    else
    {
      uint64_t v49 = 0;
      uint64_t v50 = (uint64_t *)v36[6];
      uint64_t v51 = v42;
      uint64_t v52 = v48;
      do
      {
        uint64_t v54 = *v51++;
        uint64_t v53 = v54;
        uint64_t v55 = *v50++;
        v49 += v55 * v53;
        --v52;
      }
      while (v52);
      uint64_t v56 = 0;
      double v57 = *(double *)(*(void *)v36[1] + 8 * (v36[9] + v49));
      long long v58 = *(uint64_t **)(v35 + 48);
      long long v59 = v42;
      uint64_t v60 = v48;
      do
      {
        uint64_t v62 = *v59++;
        uint64_t v61 = v62;
        uint64_t v63 = *v58++;
        v56 += v63 * v61;
        --v60;
      }
      while (v60);
    }
    double v64 = *(double *)(v44 + 8 * (*(void *)(v35 + 72) + v56));
    BOOL v6 = v57 == v64;
    if (v57 != v64)
    {
LABEL_80:
      if (!v42) {
        goto LABEL_50;
      }
      goto LABEL_115;
    }
    uint64_t v65 = v46;
    unint64_t v66 = v46 - 1;
    if (v45 >= 1) {
      break;
    }
LABEL_78:
    if ((v66 & 0x8000000000000000) != 0 || !v65) {
      goto LABEL_80;
    }
  }
  uint64_t v67 = v36[3];
  unint64_t v68 = v42[v47] + 1;
  v42[v47] = v68;
  if (v68 < *(void *)(v67 + 8 * v47))
  {
    uint64_t v65 = 1;
    unint64_t v66 = v46 - 1;
    goto LABEL_78;
  }
  uint64_t v69 = v67 - 16;
  unint64_t v70 = v46;
  unint64_t v71 = (unint64_t *)((char *)v42 + (v45 & 0xFFFFFFFFFFFFFFF8) - 16);
  while (1)
  {
    unint64_t v72 = v70 - 1;
    v71[1] = 0;
    if ((uint64_t)(v70 - 1) <= 0) {
      break;
    }
    unint64_t v73 = *v71 + 1;
    *v71-- = v73;
    unint64_t v74 = *(void *)(v69 + 8 * v70--);
    if (v73 < v74)
    {
      unint64_t v66 = v72 - 1;
      uint64_t v65 = 1;
      goto LABEL_78;
    }
  }
  BOOL v6 = 1;
LABEL_115:
  long long v88 = v42;
  operator delete(v42);
LABEL_50:
  uint64_t v33 = *((void *)this + 2);
  double result = *(double *)(v33 + 8 * a4) + (double)v6;
  *(double *)(v33 + 8 * a4) = result;
  return result;
}

double turi::evaluation::classifier_accuracy::register_unmapped_example(turi::evaluation::classifier_accuracy *this, const unint64_t *a2, const unint64_t *a3, uint64_t a4)
{
  ++*(void *)(*((void *)this + 5) + 8 * a4);
  double v4 = 0.0;
  if (*a2 == *a3) {
    double v4 = 1.0;
  }
  uint64_t v5 = *((void *)this + 2);
  double result = *(double *)(v5 + 8 * a4) + v4;
  *(double *)(v5 + 8 * a4) = result;
  return result;
}

uint64_t turi::evaluation::classifier_accuracy::get_metric@<X0>(turi::evaluation::classifier_accuracy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (double *)*((void *)this + 2);
    BOOL v6 = (uint64_t *)*((void *)this + 5);
    double v7 = 0.0;
    do
    {
      double v8 = *v5++;
      double v7 = v7 + v8;
      uint64_t v9 = *v6++;
      v4 += v9;
      --v3;
    }
    while (v3);
    double v10 = v7 / (double)v4;
  }
  else
  {
    double v10 = NAN;
  }
  double v12 = v10;
  uint64_t result = turi::flexible_type_converter<double>::set(&v12, (uint64_t)v13);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = *(void *)&v13[5];
  *(void *)(a2 + 8) = *(void *)v13;
  *(unsigned char *)(a2 + 2CoreML::Specification::Imputer::New(this, 0) = v13[12];
  *(_DWORD *)a2 = 0;
  return result;
}

uint64_t turi::variant_converter<std::unordered_map<turi::flexible_type,unsigned long>,void>::get@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  void v21[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  memset(v21, 0, 13);
  uint64_t v3 = turi::variant_get_ref<turi::flexible_type>(a1);
  if ((atomic_ullong **)v3 != v21)
  {
    uint64_t v5 = *(atomic_ullong **)v3;
    *(atomic_ullong **)((char *)v21 + 5) = *(atomic_ullong **)(v3 + 5);
    v21[0] = v5;
    BYTE4(v21[1]) = *(unsigned char *)(v3 + 12);
    if (BYTE4(v21[1]) <= 9u && ((1 << SBYTE4(v21[1])) & 0x33C) != 0) {
      atomic_fetch_add(v21[0], 1uLL);
    }
  }
  uint64_t result = turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::get((turi::flexible_type_internals *)v21, v4, a2);
  switch(BYTE4(v21[1]))
  {
    case 2:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v8 = v21[0];
        if (v21[0])
        {
          if (*((char *)v21[0] + 31) < 0) {
            operator delete(*((void **)v21[0] + 1));
          }
          uint64_t v9 = v8;
          uint64_t v10 = 0x1012C404EF22A49;
          goto LABEL_38;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v17 = v21[0];
        if (v21[0])
        {
          uint64_t v18 = (void *)v21[0][1];
          if (v18)
          {
            v21[0][2] = (atomic_ullong)v18;
            operator delete(v18);
          }
          uint64_t v9 = v17;
          uint64_t v10 = 0x1080C409938AC02;
          goto LABEL_38;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v11 = v21[0];
        if (v21[0])
        {
          v20[0] = (void **)(v21[0] + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v20);
          goto LABEL_33;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v11 = v21[0];
        if (v21[0])
        {
          v20[0] = (void **)(v21[0] + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v20);
LABEL_33:
          uint64_t v9 = v11;
          uint64_t v10 = 0x1020C405E66F15BLL;
          goto LABEL_38;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v19 = v21[0];
        if (v21[0])
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v21[0] + 2);
          uint64_t v9 = v19;
          unsigned int v16 = -235920773;
          goto LABEL_37;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(v21[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v12 = v21[0];
        if (v21[0])
        {
          double v13 = (void *)v21[0][6];
          if (v13)
          {
            v21[0][7] = (atomic_ullong)v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = (atomic_ullong)v14;
            operator delete(v14);
          }
          size_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v9 = v12;
          unsigned int v16 = 2071181815;
LABEL_37:
          uint64_t v10 = v16 | 0x1030C4000000000;
LABEL_38:
          uint64_t result = MEMORY[0x22A614FA0](v9, v10);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_2243CEC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18)
{
  switch(*(unsigned char *)(v18 - 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v20 = *(void *)(v18 - 40);
      if (!v20) {
        goto LABEL_27;
      }
      if (*(char *)(v20 + 31) < 0) {
        operator delete(*(void **)(v20 + 8));
      }
      uint64_t v21 = (void *)v20;
      uint64_t v22 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unsigned int v26 = *(void **)(v18 - 40);
      if (!v26) {
        goto LABEL_27;
      }
      int v27 = (void *)v26[1];
      if (v27)
      {
        _OWORD v26[2] = v27;
        operator delete(v27);
      }
      uint64_t v21 = v26;
      uint64_t v22 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void **)(v18 - 40);
      if (!v23) {
        goto LABEL_27;
      }
      a18 = v23 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_21:
      uint64_t v21 = v23;
      uint64_t v22 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v28 = *(void *)(v18 - 40);
      if (!v28) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v28 + 16));
      uint64_t v21 = (void *)v28;
      unsigned int v25 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v18 - 40), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      double v24 = *(void **)(v18 - 40);
      if (!v24) {
        goto LABEL_27;
      }
      uint64_t v21 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v24);
      unsigned int v25 = 2071181815;
LABEL_25:
      uint64_t v22 = v25 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v21, v22);
LABEL_27:
      _Unwind_Resume(exception_object);
      return;
    default:
      goto LABEL_27;
  }
}

uint64_t turi::flexible_type_converter<std::unordered_map<turi::flexible_type,unsigned long>>::get@<X0>(turi::flexible_type_internals *a1@<X1>, const char *a2@<X2>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  return turi::flexible_type_internals::ft_converter<9>::get<std::unordered_map<turi::flexible_type,unsigned long>>(a3, a1, a2);
}

void sub_2243CEF44(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::flexible_type_internals::ft_converter<9>::get<std::unordered_map<turi::flexible_type,unsigned long>>(uint64_t a1, turi::flexible_type_internals *this, const char *a3)
{
  v18[1] = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  int v16 = 0;
  char v17 = 0;
  v18[0] = 0;
  int v4 = *((unsigned __int8 *)this + 12);
  if (v4 == 4)
  {
    uint64_t v10 = *(void *)this;
    uint64_t v11 = *(void *)(*(void *)this + 8);
    if (*(void *)(*(void *)this + 16) != v11)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<10>::get<turi::flexible_type,unsigned long>((uint64_t)&v15, (turi::flexible_type_internals *)(v11 + v12), a3);
        std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,unsigned long>>(a1, (unsigned __int8 *)&v15, (uint64_t)&v15);
        ++v13;
        uint64_t v11 = *(void *)(v10 + 8);
        v12 += 16;
      }
      while (v13 < (*(void *)(v10 + 16) - v11) >> 4);
    }
  }
  else
  {
    if (v4 != 5) {
      turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"flex_dict / list of 2-element flex_lists/flex_vec", a3);
    }
    uint64_t v5 = *(void *)this;
    uint64_t v6 = *(void *)(*(void *)this + 8);
    if (*(void *)(*(void *)this + 16) != v6)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        turi::flexible_type_internals::ft_converter<1>::get((uint64_t)&v15, (uint64_t *)(v6 + v7));
        turi::flexible_type_internals::ft_converter<3>::get<unsigned long>(v18, (turi::flexible_type_internals *)(*(void *)(v5 + 8) + v7 + 16), v9);
        std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,unsigned long>>(a1, (unsigned __int8 *)&v15, (uint64_t)&v15);
        ++v8;
        uint64_t v6 = *(void *)(v5 + 8);
        v7 += 32;
      }
      while (v8 < (*(void *)(v5 + 16) - v6) >> 5);
    }
  }
  return std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v15);
}

void sub_2243CF0B4()
{
}

void sub_2243CF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,unsigned long>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = operator new(0x28uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v8;
  *(void *)((char *)v15 + 21) = *(void *)(a3 + 5);
  v15[2] = *(void *)a3;
  *((unsigned char *)v15 + 28) = *(unsigned char *)(a3 + 12);
  *(unsigned char *)(a3 + 12) = 0;
  v15[4] = *(void *)(a3 + 16);
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * vstd::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v2std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2243CF364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t *turi::flexible_type_internals::ft_converter<10>::get<turi::flexible_type,unsigned long>(uint64_t a1, turi::flexible_type_internals *this, const char *a3)
{
  if (*((unsigned char *)this + 12) != 4) {
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec", a3);
  }
  uint64_t v3 = *(void *)this;
  if (*(void *)(*(void *)this + 16) - *(void *)(*(void *)this + 8) != 32) {
    turi::flexible_type_internals::throw_type_conversion_error(this, (const turi::flexible_type *)"2-element flex_list/flex_vec (list size != 2)", a3);
  }
  turi::flexible_type_internals::ft_converter<1>::get(a1, *(uint64_t **)(*(void *)this + 8));
  uint64_t v6 = (turi::flexible_type_internals *)(*(void *)(v3 + 8) + 16);
  return turi::flexible_type_internals::ft_converter<3>::get<unsigned long>((unint64_t *)(a1 + 16), v6, v5);
}

void sub_2243CF41C()
{
}

void std::__shared_ptr_emplace<turi::evaluation::binary_logloss>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CFA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::binary_logloss>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77CFA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::binary_logloss>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<turi::evaluation::binary_logloss>::construct[abi:ne180100]<turi::evaluation::binary_logloss,turi::evaluation::binary_logloss>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  *a2 = &unk_26D77CFF8;
  a2[1] = v3;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *((_OWORD *)a2 + 1) = *(_OWORD *)(a3 + 16);
  a2[4] = *(void *)(a3 + 32);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  *(_OWORD *)(a2 + 5) = *(_OWORD *)(a3 + 40);
  a2[7] = *(void *)(a3 + 56);
  *(void *)(a3 + 4CoreML::Specification::Imputer::New(this, 0) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  return std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 8), (uint64_t *)(a3 + 64));
}

void *turi::evaluation::binary_logloss::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "binary_logloss");
}

long double turi::evaluation::binary_logloss::register_example(turi::evaluation::binary_logloss *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  if (*((unsigned char *)a3 + 12) == 7) {
    turi::evaluation::check_undefined(turi::flexible_type const&)::{lambda(void)#1}::operator()();
  }
  ++*(void *)(*((void *)this + 5) + 8 * a4);
  unint64_t v7 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((void *)this + 8, (unsigned __int8 *)a2);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v8 = *((void *)v7 + 4);
  double v9 = 0.0;
  switch(*((unsigned char *)a3 + 12))
  {
    case 0:
      double v9 = (double)*(uint64_t *)a3;
      break;
    case 1:
      double v9 = *(double *)a3;
      break;
    case 2:
      uint64_t v11 = *(void *)a3;
      uint64_t v12 = (char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      unint64_t v13 = (char *)v12;
      if (*(char *)(v11 + 31) < 0) {
        unint64_t v13 = *v12;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v13);
      double v14 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v31[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v11 + 31) < 0) {
        uint64_t v15 = *(void *)(v11 + 16);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(v11 + 31);
      }
      if (__idx != v15)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v28 = std::string::append(&v34, " cannot be interpreted as a float");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v31[0] = (void *)v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v22 = v14;
      double v9 = v22;
      break;
    case 3:
      uint64_t v10 = *(void *)a3;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v10 + 8), *(void *)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v16 = *(void *)a3;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      break;
    case 5:
      uint64_t v17 = *(void *)a3;
      __p[1] = 0;
      v31[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      break;
    case 6:
      double v9 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v18 = *(void *)a3;
      unint64_t v19 = *(atomic_uint **)(*(void *)a3 + 16);
      __p[0] = *(void **)(*(void *)a3 + 8);
      __p[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit(v19 + 2, 1u, memory_order_relaxed);
      }
      long long v20 = *(_OWORD *)(v18 + 24);
      long long v21 = *(_OWORD *)(v18 + 56);
      long long v32 = *(_OWORD *)(v18 + 40);
      long long v33 = v21;
      *(_OWORD *)char v31 = v20;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v32 + 1))
      {
        *(void *)&long long v33 = *((void *)&v32 + 1);
        operator delete(*((void **)&v32 + 1));
      }
      if (v31[0])
      {
        v31[1] = v31[0];
        operator delete(v31[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  __p[0] = *(void **)&v9;
  if (v9 < -0.000000001 || v9 > 1.0) {
    turi::evaluation::check_probability_range(double const&)::{lambda(void)#1}::operator()();
  }
  if (v8)
  {
    unint64_t v23 = (std::string *)__p;
  }
  else
  {
    double v9 = 1.0 - v9;
    *(double *)&v34.__r_.__value_.__l.__data_ = v9;
    unint64_t v23 = &v34;
  }
  if (v9 < 0.000000001) {
    unint64_t v23 = (std::string *)&EVAL_ZERO;
  }
  long double v24 = log(*(long double *)&v23->__r_.__value_.__l.__data_);
  uint64_t v25 = *((void *)this + 2);
  long double result = v24 + *(double *)(v25 + 8 * a4);
  *(long double *)(v25 + 8 * a4) = result;
  return result;
}

void sub_2243CF968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t turi::evaluation::binary_logloss::get_metric@<X0>(turi::evaluation::binary_logloss *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (double *)*((void *)this + 2);
    uint64_t v6 = (uint64_t *)*((void *)this + 5);
    double v7 = 0.0;
    do
    {
      double v8 = *v5++;
      double v7 = v7 + v8;
      uint64_t v9 = *v6++;
      v4 += v9;
      --v3;
    }
    while (v3);
  }
  else
  {
    unint64_t v4 = 0;
    double v7 = 0.0;
  }
  if (v4 <= 1) {
    unint64_t v4 = 1;
  }
  double v11 = -v7 / (double)v4;
  uint64_t result = turi::flexible_type_converter<double>::set(&v11, (uint64_t)v12);
  *(void *)(a2 + 1std::__function::__value_func<void ()(std::string)>::~__value_func[abi:ne180100]((void *)this + 3) = *(void *)&v12[5];
  *(void *)(a2 + 8) = *(void *)v12;
  *(unsigned char *)(a2 + 2CoreML::Specification::Imputer::New(this, 0) = v12[12];
  *(_DWORD *)a2 = 0;
  return result;
}

uint64_t std::unordered_map<turi::flexible_type,unsigned long>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,unsigned long> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_2243CFB9C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::binary_logloss::binary_logloss(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D77CFF8;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 8CoreML::Specification::Imputer::New(this, 0) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  if (a1 + 64 != a2)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>((void *)(a1 + 64), *(void **)(a2 + 16), 0);
  }
  return a1;
}

void sub_2243CFC40(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v2);
  uint64_t v5 = (void *)v1[5];
  if (v5)
  {
    v1[6] = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v3;
  if (*v3)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    double v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 4;
        std::pair<turi::flexible_type &,unsigned long &>::operator=[abi:ne180100]<turi::flexible_type const,unsigned long,(void *)0>(v12, v4 + 2);
        uint64_t v10 = (void *)*v8;
        std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi(a1, (uint64_t)v8);
        unint64_t v4 = (void *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        double v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_multi<std::pair<turi::flexible_type const,unsigned long> const&>(a1, (uint64_t)(v4 + 2));
    unint64_t v4 = (void *)*v4;
  }
}

void sub_2243CFD54(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_2243CFD6C(_Unwind_Exception *a1)
{
}

uint64_t **std::pair<turi::flexible_type &,unsigned long &>::operator=[abi:ne180100]<turi::flexible_type const,unsigned long,(void *)0>(uint64_t **a1, uint64_t *a2)
{
  unint64_t v4 = *a1;
  if (*a1 != a2)
  {
    switch(*((unsigned char *)v4 + 12))
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v5 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          if (*((char *)v5 + 31) < 0) {
            operator delete((void *)v5[1]);
          }
          atomic_ullong *volatile v6 = v5;
          uint64_t v7 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v8 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          BOOL v9 = (void *)v8[1];
          if (v9)
          {
            void v8[2] = (atomic_ullong)v9;
            operator delete(v9);
          }
          atomic_ullong *volatile v6 = v8;
          uint64_t v7 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          float v22 = (void **)(v10 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v22);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          float v22 = (void **)(v10 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v22);
LABEL_19:
          atomic_ullong *volatile v6 = v10;
          uint64_t v7 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v11 + 2);
          atomic_ullong *volatile v6 = v11;
          unsigned int v12 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = (atomic_ullong *volatile)*v4;
          if (*v4)
          {
            double v14 = (void *)v13[6];
            if (v14)
            {
              v13[7] = (atomic_ullong)v14;
              operator delete(v14);
            }
            uint64_t v15 = (void *)v13[3];
            if (v15)
            {
              v13[4] = (atomic_ullong)v15;
              operator delete(v15);
            }
            uint64_t v16 = (std::__shared_weak_count *)v13[2];
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            atomic_ullong *volatile v6 = v13;
            unsigned int v12 = 2071181815;
LABEL_32:
            uint64_t v7 = v12 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v6, v7);
          }
LABEL_34:
          uint64_t *v4 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v17 = *a2;
    *(uint64_t *)((char *)v4 + 5) = *(uint64_t *)((char *)a2 + 5);
    uint64_t *v4 = v17;
    LODWORD(v17) = *((unsigned __int8 *)a2 + 12);
    *((unsigned char *)v4 + 12) = v17;
    BOOL v18 = v17 > 9;
    int v19 = (1 << v17) & 0x33C;
    if (!v18 && v19 != 0) {
      atomic_fetch_add((atomic_ullong *volatile)*v4, 1uLL);
    }
  }
  *a1[1] = a2[2];
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_multi<std::pair<turi::flexible_type const,unsigned long> const&>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node<std::pair<turi::flexible_type const,unsigned long> const&>((uint64_t)a1, a2, v5);
  uint64_t inserted = std::__hash_table<std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,turi::flexible_type>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,turi::flexible_type>>>::__node_insert_multi(a1, (uint64_t)v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_2243D0048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node<std::pair<turi::flexible_type const,unsigned long> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X8>)
{
  atomic_ullong *volatile v5 = (unsigned __int8 *)(a1 + 16);
  atomic_ullong *volatile v6 = (char *)operator new(0x28uLL);
  *a3 = (unsigned __int8 *)v6;
  a3[1] = v5;
  *((void *)v6 + 2) = 0;
  uint64_t v7 = (atomic_ullong *volatile *)(v6 + 16);
  *((unsigned char *)a3 + 16) = 0;
  *(void *)atomic_ullong *volatile v6 = 0;
  *((void *)v6 + 1) = 0;
  *(void *)(v6 + 21) = 0;
  atomic_ullong *volatile v8 = (unsigned __int8 *)v6;
  if (v6 + 16 != (char *)a2)
  {
    *(void *)(v6 + 21) = *(void *)(a2 + 5);
    atomic_ullong *volatile *v7 = *(atomic_ullong *volatile *)a2;
    unsigned int v9 = *(unsigned __int8 *)(a2 + 12);
    v6[28] = v9;
    atomic_ullong *volatile v8 = (unsigned __int8 *)v6;
    if (v9 <= 9)
    {
      atomic_ullong *volatile v8 = (unsigned __int8 *)v6;
      if (((1 << v9) & 0x33C) != 0)
      {
        atomic_fetch_add(*v7, 1uLL);
        atomic_ullong *volatile v8 = *a3;
      }
    }
  }
  *((void *)v6 + 4) = *(void *)(a2 + 16);
  *((unsigned char *)a3 + 16) = 1;
  unint64_t result = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(v8 + 16);
  *((void *)*a3 + 1) = result;
  return result;
}

void sub_2243D0128(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::evaluation::multiclass_logloss>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77D068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::multiclass_logloss>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77D068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::multiclass_logloss>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<turi::evaluation::multiclass_logloss>::construct[abi:ne180100]<turi::evaluation::multiclass_logloss,turi::evaluation::multiclass_logloss>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  *a2 = &unk_26D77D0B8;
  a2[1] = v5;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  *((_OWORD *)a2 + 1) = *(_OWORD *)(a3 + 16);
  a2[4] = *(void *)(a3 + 32);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  *(_OWORD *)(a2 + 5) = *(_OWORD *)(a3 + 40);
  a2[7] = *(void *)(a3 + 56);
  *(void *)(a3 + 4CoreML::Specification::Imputer::New(this, 0) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  uint64_t result = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table((uint64_t)(a2 + 8), (uint64_t *)(a3 + 64));
  a2[13] = *(void *)(a3 + 104);
  return result;
}

void *turi::evaluation::multiclass_logloss::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "multiclass_logloss");
}

long double turi::evaluation::multiclass_logloss::register_example(turi::evaluation::multiclass_logloss *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  ++*(void *)(*((void *)this + 5) + 8 * a4);
  uint64_t v7 = 1;
  switch(*((unsigned char *)a3 + 12))
  {
    case 3:
      atomic_ullong *volatile v8 = (void *)(*(void *)a3 + 8);
      unsigned int v9 = (void *)(*(void *)a3 + 16);
      char v10 = 3;
      goto LABEL_5;
    case 4:
      atomic_ullong *volatile v8 = (void *)(*(void *)a3 + 8);
      unsigned int v9 = (void *)(*(void *)a3 + 16);
      char v10 = 4;
      goto LABEL_5;
    case 5:
      atomic_ullong *volatile v8 = (void *)(*(void *)a3 + 8);
      unsigned int v9 = (void *)(*(void *)a3 + 16);
      char v10 = 5;
LABEL_5:
      uint64_t v7 = (uint64_t)(*v9 - *v8) >> v10;
      break;
    case 9:
      long long v20 = *(uint64_t **)(*(void *)a3 + 24);
      int v19 = *(uint64_t **)(*(void *)a3 + 32);
      if (v19 == v20)
      {
        uint64_t v7 = 0;
      }
      else
      {
        uint64_t v7 = *(void *)(*(void *)a3 + 8);
        if (v7)
        {
          uint64_t v7 = 1;
          do
          {
            uint64_t v21 = *v20++;
            v7 *= v21;
          }
          while (v20 != v19);
        }
      }
      break;
    default:
      break;
  }
  if (v7 != *((void *)this + 13))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v31);
    float v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Size of prediction probability vector", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    switch(*((unsigned char *)a3 + 12))
    {
      case 9:
        int v28 = *(uint64_t **)(*(void *)a3 + 24);
        int v27 = *(uint64_t **)(*(void *)a3 + 32);
        if (v27 != v28 && *(void *)(*(void *)a3 + 8))
        {
          uint64_t v29 = 1;
          do
          {
            uint64_t v30 = *v28++;
            v29 *= v30;
          }
          while (v28 != v27);
        }
        break;
      default:
        break;
    }
    unint64_t v23 = (void *)std::ostream::operator<<();
    long double v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)") != number of classes", 22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
    uint64_t v25 = (void *)std::ostream::operator<<();
    char v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)").", 2);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v26);
    turi::evaluation::multiclass_logloss::register_example(turi::flexible_type const&,turi::flexible_type const&,unsigned long)::{lambda(void)#1}::operator()();
  }
  atomic_ullong *volatile v11 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((void *)this + 8, (unsigned __int8 *)a2);
  double v12 = 0.0;
  if (v11)
  {
    unint64_t v13 = *((void *)v11 + 4);
    uint64_t v14 = *(void *)(*(void *)a3 + 8);
    if (v13 < (*(void *)(*(void *)a3 + 16) - v14) >> 3) {
      double v12 = *(double *)(v14 + 8 * v13);
    }
  }
  if (v12 < -0.000000001 || v12 > 1.0) {
    turi::evaluation::check_probability_range(double const&)::{lambda(void)#1}::operator()();
  }
  double v15 = fmin(v12, 1.0);
  if (v15 < 1.0e-15) {
    double v15 = 1.0e-15;
  }
  long double v16 = log(v15);
  uint64_t v17 = *((void *)this + 2);
  long double result = v16 + *(double *)(v17 + 8 * a4);
  *(long double *)(v17 + 8 * a4) = result;
  return result;
}

void sub_2243D05CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::evaluation::multiclass_logloss::multiclass_logloss(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = &unk_26D77D0B8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 8CoreML::Specification::Imputer::New(this, 0) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  *(void *)(a1 + 104) = -1;
  if (a1 + 64 != a2)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>((void *)(a1 + 64), *(void **)(a2 + 16), 0);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (a3 != -1) {
    uint64_t v6 = a3;
  }
  *(void *)(a1 + 104) = v6;
  return a1;
}

void sub_2243D06D0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(v2);
  uint64_t v5 = (void *)v1[5];
  if (v5)
  {
    v1[6] = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v3;
  if (*v3)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::evaluation::roc_curve>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77D128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::evaluation::roc_curve>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D77D128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::evaluation::roc_curve>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

__n128 std::allocator<turi::evaluation::roc_curve>::construct[abi:ne180100]<turi::evaluation::roc_curve,turi::evaluation::roc_curve>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26D77D178;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 8, (uint64_t *)(a3 + 8));
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 48, (uint64_t *)(a3 + 48));
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a3 + 88);
  *(void *)(a2 + 104) = *(void *)(a3 + 104);
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 12CoreML::Specification::Imputer::New(this, 0) = 0;
  *(void *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 12CoreML::Specification::Imputer::New(this, 0) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
  *(void *)(a2 + 152) = *(void *)(a3 + 152);
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = 0;
  long long v5 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 16CoreML::Specification::Imputer::New(this, 0) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v5;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__hash_table(a2 + 192, (uint64_t *)(a3 + 192));
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 24CoreML::Specification::Imputer::New(this, 0) = 0;
  *(void *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a3 + 232);
  *(void *)(a2 + 248) = *(void *)(a3 + 248);
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 24CoreML::Specification::Imputer::New(this, 0) = 0;
  *(void *)(a3 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  __n128 result = *(__n128 *)(a3 + 256);
  *(__n128 *)(a2 + 256) = result;
  *(void *)(a2 + 272) = *(void *)(a3 + 272);
  *(void *)(a3 + 256) = 0;
  *(void *)(a3 + 264) = 0;
  *(void *)(a3 + 272) = 0;
  *(void *)(a2 + 28CoreML::Specification::Imputer::New(this, 0) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  uint64_t v7 = *(void *)(a3 + 288);
  *(void *)(a2 + 28CoreML::Specification::Imputer::New(this, 0) = *(void *)(a3 + 280);
  *(void *)(a2 + 288) = v7;
  *(void *)(a2 + 296) = *(void *)(a3 + 296);
  *(void *)(a3 + 28CoreML::Specification::Imputer::New(this, 0) = 0;
  *(void *)(a3 + 288) = 0;
  *(void *)(a3 + 296) = 0;
  return result;
}

void turi::evaluation::roc_curve::~roc_curve(turi::evaluation::roc_curve *this)
{
  turi::evaluation::roc_curve::~roc_curve(this);
  JUMPOUT(0x22A614FA0);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_26D77D178;
  uint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 256);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 232);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 192);
  uint64_t v3 = (void **)((char *)this + 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 112);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 88);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::pair<turi::flexible_type,turi::flexible_type>,std::hash<std::pair<turi::flexible_type,turi::flexible_type>>,std::equal_to<std::pair<turi::flexible_type,turi::flexible_type>>,std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>::~__hash_table((uint64_t)this + 8);
}

void *turi::evaluation::roc_curve::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "roc_curve");
}

void turi::evaluation::roc_curve::init(turi::evaluation::roc_curve *this, unint64_t a2)
{
  *((void *)this + 22) = a2;
  uint64_t v3 = (void *)((char *)this + 88);
  std::vector<std::vector<std::vector<unsigned long>>>::resize((uint64_t *)this + 11, a2);
  std::vector<std::vector<std::vector<unsigned long>>>::resize((uint64_t *)this + 14, *((void *)this + 22));
  std::vector<std::vector<unsigned long>>::resize((uint64_t *)this + 17, *((void *)this + 22));
  if (*((void *)this + 22))
  {
    unint64_t v4 = 0;
    unint64_t v5 = *((void *)this + 23);
    do
    {
      std::vector<std::vector<unsigned long>>::resize((uint64_t *)(*((void *)this + 11) + 24 * v4), v5);
      std::vector<std::vector<unsigned long>>::resize((uint64_t *)(*((void *)this + 14) + 24 * v4), *((void *)this + 23));
      std::vector<unsigned long>::resize(*((void *)this + 17) + 24 * v4, *((void *)this + 23));
      if (*((void *)this + 23))
      {
        unint64_t v6 = 0;
        unint64_t v7 = *((void *)this + 21);
        do
        {
          std::vector<unsigned long>::resize(*(void *)(*((void *)this + 11) + 24 * v4) + 24 * v6, v7);
          std::vector<unsigned long>::resize(*(void *)(*((void *)this + 14) + 24 * v4) + 24 * v6, *((void *)this + 21));
          *(void *)(*(void *)(*((void *)this + 17) + 24 * v4) + 8 * v6) = 0;
          unint64_t v7 = *((void *)this + 21);
          if (v7)
          {
            unint64_t v8 = 0;
            uint64_t v9 = *(void *)(*(void *)(*v3 + 24 * v4) + 24 * v6);
            uint64_t v10 = *(void *)(*(void *)(*((void *)this + 14) + 24 * v4) + 24 * v6);
            do
            {
              *(void *)(v9 + 8 * v8) = 0;
              *(void *)(v10 + 8 * v8++) = 0;
              unint64_t v7 = *((void *)this + 21);
            }
            while (v8 < v7);
          }
          ++v6;
          unint64_t v5 = *((void *)this + 23);
        }
        while (v6 < v5);
      }
      else
      {
        unint64_t v5 = 0;
      }
      ++v4;
    }
    while (v4 < *((void *)this + 22));
  }
  else
  {
    unint64_t v5 = *((void *)this + 23);
  }
  std::vector<std::vector<unsigned long>>::resize((uint64_t *)this + 29, v5);
  std::vector<std::vector<unsigned long>>::resize((uint64_t *)this + 32, *((void *)this + 23));
  std::vector<unsigned long>::resize((uint64_t)this + 280, *((void *)this + 23));
  if (*((void *)this + 23))
  {
    unint64_t v11 = 0;
    do
    {
      *(void *)(*((void *)this + 35) + 8 * v11) = 0;
      std::vector<unsigned long>::resize(*((void *)this + 29) + 24 * v11, *((void *)this + 21));
      std::vector<unsigned long>::resize(*((void *)this + 32) + 24 * v11, *((void *)this + 21));
      if (*((void *)this + 21))
      {
        unint64_t v12 = 0;
        uint64_t v13 = *(void *)(*((void *)this + 29) + 24 * v11);
        uint64_t v14 = *(void *)(*((void *)this + 32) + 24 * v11);
        do
        {
          *(void *)(v13 + 8 * v12) = 0;
          *(void *)(v14 + 8 * v12++) = 0;
        }
        while (v12 < *((void *)this + 21));
      }
      ++v11;
    }
    while (v11 < *((void *)this + 23));
  }
}

void turi::evaluation::roc_curve::register_example(turi::evaluation::roc_curve *this, const turi::flexible_type *a2, const turi::flexible_type *a3, uint64_t a4)
{
  if (*((unsigned char *)a3 + 12) == 7) {
    turi::evaluation::check_undefined(turi::flexible_type const&)::{lambda(void)#1}::operator()();
  }
  unint64_t v7 = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>((void *)this + 24, (unsigned __int8 *)a2);
  if (v7)
  {
    unint64_t v8 = *((void *)v7 + 4);
    if (*((unsigned char *)this + 161))
    {
      double v9 = 0.0;
      switch(*((unsigned char *)a3 + 12))
      {
        case 0:
          double v9 = (double)*(uint64_t *)a3;
          break;
        case 1:
          double v9 = *(double *)a3;
          break;
        case 2:
          uint64_t v49 = *(void *)a3;
          uint64_t v50 = (char **)(*(void *)a3 + 8);
          __idx[0] = 0;
          uint64_t v51 = (char *)v50;
          if (*(char *)(v49 + 31) < 0) {
            uint64_t v51 = *v50;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v51);
          double v52 = std::stod((const std::string *)__p, __idx);
          if (SHIBYTE(v82[0]) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v49 + 31) < 0) {
            uint64_t v53 = *(void *)(v49 + 16);
          }
          else {
            uint64_t v53 = *(unsigned __int8 *)(v49 + 31);
          }
          if (__idx[0] != v53)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            unint64_t v71 = std::string::append(&v85, " cannot be interpreted as a float");
            long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v82[0] = (void *)v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)__p);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          float v60 = v52;
          double v9 = v60;
          break;
        case 3:
          uint64_t v48 = *(void *)a3;
          __p[1] = 0;
          v82[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v48 + 8), *(void *)(v48 + 16), (uint64_t)(*(void *)(v48 + 16) - *(void *)(v48 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 4:
          uint64_t v54 = *(void *)a3;
          __p[1] = 0;
          v82[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v54 + 8), *(uint64_t **)(v54 + 16), (uint64_t)(*(void *)(v54 + 16) - *(void *)(v54 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v85.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
          break;
        case 5:
          uint64_t v55 = *(void *)a3;
          __p[1] = 0;
          v82[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v55 + 8), *(uint64_t **)(v55 + 16), (uint64_t)(*(void *)(v55 + 16) - *(void *)(v55 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v85.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
          break;
        case 6:
          double v9 = (double)*((int *)a3 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
          break;
        case 7:
          break;
        case 8:
          uint64_t v56 = *(void *)a3;
          double v57 = *(atomic_uint **)(*(void *)a3 + 16);
          __p[0] = *(void **)(*(void *)a3 + 8);
          __p[1] = v57;
          if (v57) {
            atomic_fetch_add_explicit(v57 + 2, 1u, memory_order_relaxed);
          }
          long long v58 = *(_OWORD *)(v56 + 24);
          long long v59 = *(_OWORD *)(v56 + 56);
          long long v83 = *(_OWORD *)(v56 + 40);
          long long v84 = v59;
          *(_OWORD *)int v82 = v58;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v83 + 1))
          {
            *(void *)&long long v84 = *((void *)&v83 + 1);
            operator delete(*((void **)&v83 + 1));
          }
          if (v82[0])
          {
            v82[1] = v82[0];
            operator delete(v82[0]);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v9 < -0.000000001 || v9 > 1.0) {
LABEL_99:
      }
        turi::evaluation::check_probability_range(double const&)::{lambda(void)#1}::operator()();
      unint64_t v61 = *((void *)this + 21);
      unint64_t v62 = vcvtmd_u64_f64(fmax(v9 * (double)v61, 0.0));
      if (v61 <= v62) {
        unint64_t v63 = v61 - 1;
      }
      else {
        unint64_t v63 = v62;
      }
      unint64_t v64 = (unint64_t)(float)v63;
      if (v8 == 1)
      {
        uint64_t v65 = *(void *)(*(void *)(*((void *)this + 11) + 24 * a4) + 24);
        ++*(void *)(v65 + 8 * v64);
        uint64_t v66 = **(void **)(*((void *)this + 14) + 24 * a4);
        ++*(void *)(v66 + 8 * v64);
        uint64_t v44 = (void *)(*(void *)(*((void *)this + 17) + 24 * a4) + 8);
      }
      else
      {
        uint64_t v67 = *(void *)(*(void *)(*((void *)this + 14) + 24 * a4) + 24);
        ++*(void *)(v67 + 8 * v64);
        uint64_t v68 = **(void **)(*((void *)this + 11) + 24 * a4);
        ++*(void *)(v68 + 8 * v64);
        uint64_t v44 = *(void **)(*((void *)this + 17) + 24 * a4);
      }
    }
    else
    {
      char v10 = *((unsigned char *)a3 + 12);
      uint64_t v11 = 1;
      switch(v10)
      {
        case 3:
          unint64_t v12 = (void *)(*(void *)a3 + 8);
          uint64_t v13 = (void *)(*(void *)a3 + 16);
          char v14 = 3;
          goto LABEL_10;
        case 4:
          unint64_t v12 = (void *)(*(void *)a3 + 8);
          uint64_t v13 = (void *)(*(void *)a3 + 16);
          char v14 = 4;
          goto LABEL_10;
        case 5:
          unint64_t v12 = (void *)(*(void *)a3 + 8);
          uint64_t v13 = (void *)(*(void *)a3 + 16);
          char v14 = 5;
LABEL_10:
          uint64_t v11 = (uint64_t)(*v13 - *v12) >> v14;
          break;
        case 9:
          long long v20 = *(uint64_t **)(*(void *)a3 + 24);
          int v19 = *(uint64_t **)(*(void *)a3 + 32);
          if (v19 == v20)
          {
            uint64_t v11 = 0;
          }
          else
          {
            uint64_t v11 = *(void *)(*(void *)a3 + 8);
            if (v11)
            {
              uint64_t v11 = 1;
              do
              {
                uint64_t v21 = *v20++;
                v11 *= v21;
              }
              while (v20 != v19);
            }
          }
          break;
        default:
          break;
      }
      if (v11 != *((void *)this + 23))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"Size of prediction probability vector", 37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"(", 1);
        switch(*((unsigned char *)a3 + 12))
        {
          case 9:
            __int16 v78 = *(uint64_t **)(*(void *)a3 + 24);
            uint64_t v77 = *(uint64_t **)(*(void *)a3 + 32);
            if (v77 != v78 && *(void *)(*(void *)a3 + 8))
            {
              uint64_t v79 = 1;
              do
              {
                uint64_t v80 = *v78++;
                v79 *= v80;
              }
              while (v78 != v77);
            }
            break;
          default:
            break;
        }
        unint64_t v73 = (void *)std::ostream::operator<<();
        unint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)") != number of classes", 22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"(", 1);
        double v75 = (void *)std::ostream::operator<<();
        double v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)").", 2);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v76);
        v85.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        turi::evaluation::roc_curve::register_example(turi::flexible_type const&,turi::flexible_type const&,unsigned long)::{lambda(void)#1}::operator()();
      }
      unint64_t v15 = 1;
      switch(*((unsigned char *)a3 + 12))
      {
        case 3:
          long double v16 = (void *)(*(void *)a3 + 8);
          uint64_t v17 = (void *)(*(void *)a3 + 16);
          char v18 = 3;
          goto LABEL_21;
        case 4:
          long double v16 = (void *)(*(void *)a3 + 8);
          uint64_t v17 = (void *)(*(void *)a3 + 16);
          char v18 = 4;
          goto LABEL_21;
        case 5:
          long double v16 = (void *)(*(void *)a3 + 8);
          uint64_t v17 = (void *)(*(void *)a3 + 16);
          char v18 = 5;
LABEL_21:
          unint64_t v15 = (uint64_t)(*v17 - *v16) >> v18;
          goto LABEL_22;
        case 9:
          unint64_t v46 = *(uint64_t **)(*(void *)a3 + 24);
          uint64_t v45 = *(uint64_t **)(*(void *)a3 + 32);
          if (v45 == v46 || !*(void *)(*(void *)a3 + 8)) {
            return;
          }
          unint64_t v15 = 1;
          do
          {
            uint64_t v47 = *v46++;
            v15 *= v47;
          }
          while (v46 != v45);
LABEL_22:
          if (v8 >= v15) {
            return;
          }
          unint64_t v22 = 0;
          break;
        default:
          goto LABEL_22;
      }
      while (1)
      {
        unint64_t v23 = 1;
        switch(v10)
        {
          case 3:
            long double v24 = (void *)(*(void *)a3 + 8);
            uint64_t v25 = (void *)(*(void *)a3 + 16);
            char v26 = 3;
            goto LABEL_28;
          case 4:
            long double v24 = (void *)(*(void *)a3 + 8);
            uint64_t v25 = (void *)(*(void *)a3 + 16);
            char v26 = 4;
            goto LABEL_28;
          case 5:
            long double v24 = (void *)(*(void *)a3 + 8);
            uint64_t v25 = (void *)(*(void *)a3 + 16);
            char v26 = 5;
LABEL_28:
            unint64_t v23 = (uint64_t)(*v25 - *v24) >> v26;
            break;
          case 9:
            long long v42 = *(uint64_t **)(*(void *)a3 + 24);
            uint64_t v41 = *(uint64_t **)(*(void *)a3 + 32);
            if (v41 == v42)
            {
              unint64_t v23 = 0;
            }
            else
            {
              unint64_t v23 = *(void *)(*(void *)a3 + 8);
              if (v23)
              {
                unint64_t v23 = 1;
                do
                {
                  uint64_t v43 = *v42++;
                  v23 *= v43;
                }
                while (v42 != v41);
              }
            }
            break;
          default:
            break;
        }
        if (v22 >= v23) {
          break;
        }
        if (v10 == 1)
        {
          uint64_t v30 = (double *)a3;
          if (v22) {
LABEL_101:
          }
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        else
        {
          if (v10 == 9)
          {
            uint64_t v29 = *(void *)a3;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)a3 + 8));
            int v27 = *(void **)(v29 + 8);
            unint64_t v28 = *(void *)(v29 + 72) + v22;
          }
          else
          {
            if (v10 != 3) {
              goto LABEL_101;
            }
            int v27 = (void *)(*(void *)a3 + 8);
            unint64_t v28 = v22;
          }
          uint64_t v30 = (double *)(*v27 + 8 * v28);
        }
        if (*v30 < -0.000000001 || *v30 > 1.0) {
          goto LABEL_99;
        }
        int v31 = *((unsigned __int8 *)a3 + 12);
        if (v31 == 1)
        {
          uint64_t v35 = (double *)a3;
          if (v22) {
LABEL_100:
          }
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        else
        {
          if (v31 == 9)
          {
            uint64_t v34 = *(void *)a3;
            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)a3 + 8));
            long long v32 = *(void **)(v34 + 8);
            unint64_t v33 = *(void *)(v34 + 72) + v22;
          }
          else
          {
            if (v31 != 3) {
              goto LABEL_100;
            }
            long long v32 = (void *)(*(void *)a3 + 8);
            unint64_t v33 = v22;
          }
          uint64_t v35 = (double *)(*v32 + 8 * v33);
        }
        unint64_t v36 = *((void *)this + 21);
        unint64_t v37 = vcvtmd_u64_f64(fmax(*v35 * (double)v36, 0.0));
        if (v36 <= v37) {
          unint64_t v37 = v36 - 1;
        }
        unint64_t v38 = (unint64_t)(float)v37;
        if (v22 == v8) {
          uint64_t v39 = 88;
        }
        else {
          uint64_t v39 = 112;
        }
        uint64_t v40 = *(void *)(*(void *)(*(void *)((char *)this + v39) + 24 * a4) + 24 * v22);
        ++*(void *)(v40 + 8 * v38);
        ++v22;
        char v10 = *((unsigned char *)a3 + 12);
      }
      uint64_t v44 = (void *)(*(void *)(*((void *)this + 17) + 24 * a4) + 8 * v8);
    }
    ++*v44;
  }
}

void sub_2243D13FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void turi::evaluation::roc_curve::get_metric(turi::evaluation::roc_curve *this)
{
  v28[9] = *MEMORY[0x263EF8340];
  turi::evaluation::roc_curve::gather_global_metrics(this);
  uint64_t v2 = *((void *)this + 23);
  v26[0] = *((void *)this + 21);
  v26[1] = v2;
  if (v2 == 2)
  {
    v24[1] = 0;
    unint64_t v25 = 1;
    unint64_t v23 = v24;
    v24[0] = 0;
    turi::evaluation::roc_curve::get_metric(void)::{lambda(std::vector<std::vector<unsigned long>> const&,std::vector<std::vector<unsigned long>> const&,std::vector<unsigned long> const&,unsigned long const&,BOOL,std::map<unsigned long,turi::flexible_type> const&)#1}::operator()((uint64_t)v26, (uint64_t)this + 232, (uint64_t)this + 256, (uint64_t **)this + 35, &v25, 1, (uint64_t)&v23);
  }
  int v3 = *((unsigned __int8 *)this + 160);
  if (v3 != 3 && v3 != 0) {
    turi::evaluation::roc_curve::get_metric(void)::{lambda(void)#1}::operator()();
  }
  v28[0] = 0;
  v28[1] = 0;
  int v27 = v28;
  for (uint64_t i = (uint64_t *)*((void *)this + 26); i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v23 = i + 4;
    unint64_t v6 = std::__tree<std::__value_type<unsigned long,turi::flexible_type>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,turi::flexible_type>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,turi::flexible_type>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v27, (unint64_t *)i + 4, (uint64_t)&std::piecewise_construct, &v23);
    unint64_t v7 = v6;
    unint64_t v8 = v6 + 5;
    if (i + 2 != (uint64_t *)(v6 + 5))
    {
      switch(*((unsigned char *)v6 + 52))
      {
        case 2:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_43;
          }
          atomic_ullong *volatile v9 = *v8;
          if (!*v8) {
            goto LABEL_42;
          }
          if (*((char *)v9 + 31) < 0) {
            operator delete((void *)v9[1]);
          }
          atomic_ullong *volatile v10 = v9;
          uint64_t v11 = 0x1012C404EF22A49;
          goto LABEL_41;
        case 3:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_43;
          }
          atomic_ullong *volatile v18 = *v8;
          if (!*v8) {
            goto LABEL_42;
          }
          int v19 = (void *)v18[1];
          if (v19)
          {
            unint64_t v18[2] = (atomic_ullong)v19;
            operator delete(v19);
          }
          atomic_ullong *volatile v10 = v18;
          uint64_t v11 = 0x1080C409938AC02;
          goto LABEL_41;
        case 4:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_43;
          }
          atomic_ullong *volatile v12 = *v8;
          if (!*v8) {
            goto LABEL_42;
          }
          unint64_t v23 = v12 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
          goto LABEL_36;
        case 5:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_43;
          }
          atomic_ullong *volatile v12 = *v8;
          if (!*v8) {
            goto LABEL_42;
          }
          unint64_t v23 = v12 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
LABEL_36:
          atomic_ullong *volatile v10 = v12;
          uint64_t v11 = 0x1020C405E66F15BLL;
          goto LABEL_41;
        case 8:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_43;
          }
          atomic_ullong *volatile v20 = *v8;
          if (!*v8) {
            goto LABEL_42;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
          atomic_ullong *volatile v10 = v20;
          unsigned int v17 = -235920773;
          goto LABEL_40;
        case 9:
          if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_43;
          }
          atomic_ullong *volatile v13 = *v8;
          if (!*v8) {
            goto LABEL_42;
          }
          char v14 = (void *)v13[6];
          if (v14)
          {
            v13[7] = (atomic_ullong)v14;
            operator delete(v14);
          }
          unint64_t v15 = (void *)v13[3];
          if (v15)
          {
            v13[4] = (atomic_ullong)v15;
            operator delete(v15);
          }
          long double v16 = (std::__shared_weak_count *)v13[2];
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          atomic_ullong *volatile v10 = v13;
          unsigned int v17 = 2071181815;
LABEL_40:
          uint64_t v11 = v17 | 0x1030C4000000000;
LABEL_41:
          MEMORY[0x22A614FA0](v10, v11);
LABEL_42:
          *unint64_t v8 = 0;
LABEL_43:
          uint64_t v21 = (uint64_t *)i[2];
          *(uint64_t **)((char *)v8 + 5) = *(uint64_t **)((char *)i + 21);
          *unint64_t v8 = v21;
          unsigned int v22 = *((unsigned __int8 *)i + 28);
          *((unsigned char *)v7 + 52) = v22;
          if (v22 <= 9 && ((1 << v22) & 0x33C) != 0) {
            atomic_fetch_add(*v8, 1uLL);
          }
          break;
        default:
          goto LABEL_43;
      }
    }
  }
  unint64_t v23 = 0;
  turi::evaluation::roc_curve::get_metric(void)::{lambda(std::vector<std::vector<unsigned long>> const&,std::vector<std::vector<unsigned long>> const&,std::vector<unsigned long> const&,unsigned long const&,BOOL,std::map<unsigned long,turi::flexible_type> const&)#1}::operator()((uint64_t)v26, (uint64_t)this + 232, (uint64_t)this + 256, (uint64_t **)this + 35, (unint64_t *)&v23, 0, (uint64_t)&v27);
}