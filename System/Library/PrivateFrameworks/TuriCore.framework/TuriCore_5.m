void sub_22401F3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node@<X0>(uint64_t ***a1@<X0>, _OWORD *a2@<X8>)
{
  v37[4] = *MEMORY[0x263EF8340];
  v3 = *a1;
  LODWORD(v37[0]) = *(_DWORD *)*a1;
  if (LODWORD(v37[0]) != 2)
  {
    __p[0] = v37;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = (char *)v3[8] - (char *)v3[7];
  __p[0] = (void *)(v4 >> 4);
  if (v4 != 32)
  {
    v37[0] = __p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 1), (const void **)__p);
  if (SBYTE7(v32) < 0) {
    operator delete(__p[0]);
  }
  if (!v6) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  }
  v7 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "function");
  uint64_t v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v7 + 4), (const void **)__p);
  if (SBYTE7(v32) < 0) {
    operator delete(__p[0]);
  }
  if (!v8) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  }
  v37[3] = 0;
  char v30 = 0;
  v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v28, "output_type");
  __p[0] = v28;
  v10 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 1, (const void **)v28, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v11) = 0;
  switch(*((unsigned char *)v10 + 68))
  {
    case 0:
      uint64_t v11 = *((void *)v10 + 7);
      goto LABEL_33;
    case 1:
      uint64_t v11 = (uint64_t)*((double *)v10 + 7);
      goto LABEL_33;
    case 2:
      uint64_t v13 = *((void *)v10 + 7);
      size_t __idx = 0;
      v14 = (char *)(v13 + 8);
      if (*(char *)(v13 + 31) < 0) {
        v14 = *(char **)(v13 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v14);
      LOBYTE(v11) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v32) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v15 = *(void *)(v13 + 16);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(v13 + 31);
      }
      if (__idx != v15)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        v26 = std::string::append(&v35, " cannot be interpreted as an integer");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        *(void *)&long long v32 = *((void *)&v26->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_33;
    case 3:
      uint64_t v12 = *((void *)v10 + 7);
      __p[1] = 0;
      *(void *)&long long v32 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v12 + 8), *(void *)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_32;
    case 4:
      uint64_t v16 = *((void *)v10 + 7);
      __p[1] = 0;
      *(void *)&long long v32 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      goto LABEL_32;
    case 5:
      uint64_t v17 = *((void *)v10 + 7);
      __p[1] = 0;
      *(void *)&long long v32 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      goto LABEL_32;
    case 6:
      uint64_t v11 = (uint64_t)(*((void *)v10 + 7) << 8) >> 8;
      goto LABEL_33;
    case 7:
      goto LABEL_33;
    case 8:
      uint64_t v18 = *((void *)v10 + 7);
      v19 = *(atomic_uint **)(v18 + 16);
      __p[0] = *(void **)(v18 + 8);
      __p[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit(v19 + 2, 1u, memory_order_relaxed);
      }
      long long v20 = *(_OWORD *)(v18 + 24);
      long long v21 = *(_OWORD *)(v18 + 56);
      long long v33 = *(_OWORD *)(v18 + 40);
      long long v34 = v21;
      long long v32 = v20;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v10 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v33 + 1))
      {
        *(void *)&long long v34 = *((void *)&v33 + 1);
        operator delete(*((void **)&v33 + 1));
      }
      if ((void)v32)
      {
        *((void *)&v32 + 1) = v32;
        operator delete((void *)v32);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_32:
      LOBYTE(v11) = 0;
LABEL_33:
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      char v30 = v11;
      v22 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "function");
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      v23 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v35);
      std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::operator=(v37, *((void *)v23 + 7) + 8);
      if (SBYTE7(v32) < 0) {
        operator delete(__p[0]);
      }
      std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &,void>((uint64_t)v37, __p);
      *a2 = *(_OWORD *)__p;
      uint64_t result = (uint64_t)std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](v37);
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
  return result;
}

void sub_22401F998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v34 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0) {
        operator delete(a9);
      }
      std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100]((void *)(v35 - 88));
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::BINARY_TRANSFORM_NODE", 45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401FC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22401FF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224020120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  v2 = (void *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"function\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 113, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224020320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xC0uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__shared_ptr_emplace[abi:ne180100]<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224020474(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__shared_ptr_emplace[abi:ne180100]<std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768CF8;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2240204E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26D768D48;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(void *)(a2 + 128) = 0;
  return std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__value_func[abi:ne180100](a2 + 136, a3);
}

void sub_2240205FC(_Unwind_Exception *a1)
{
  v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)> &,turi::flex_type_enum &>(v1);
  _Unwind_Resume(a1);
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::~operator_impl(void *a1)
{
  *a1 = &unk_26D768D48;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](a1 + 17);
  v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::~operator_impl(void *a1)
{
  *a1 = &unk_26D768D48;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](a1 + 17);
  v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  char v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::type()
{
  return 2;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2> const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 90 || v2 == 0)
  {
    turi::query_eval::query_context::get_next(this, 0, &v58);
    long long v6 = v58;
    long long v58 = 0uLL;
    char v7 = *(std::__shared_weak_count **)(a1 + 24);
    *(_OWORD *)(a1 + 16) = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v58 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
      }
    }
    turi::query_eval::query_context::get_next(this, 1uLL, &v58);
    long long v8 = v58;
    long long v58 = 0uLL;
    v9 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v8;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (*((void *)&v58 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
      }
    }
    v10 = *(uint64_t **)(a1 + 16);
    uint64_t v11 = *(uint64_t ***)(a1 + 32);
    if (v10)
    {
      if (v11)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = v10[1];
        if (v12 == v13 || !*(void *)v12) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = (uint64_t)(*(void *)(*(void *)v12 + 8) - **(void **)v12) >> 4;
        }
        v57 = (void **)v14;
        uint64_t v16 = *v11;
        char v15 = v11[1];
        if (v16 == v15)
        {
          uint64_t v17 = 0;
        }
        else
        {
          uint64_t v17 = *v16;
          if (*v16) {
            uint64_t v17 = (uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 4;
          }
        }
        uint64_t v56 = v17;
        if (v14 != v17)
        {
          *(void *)&long long v58 = &v57;
          *((void *)&v58 + 1) = &v56;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()();
        }
        uint64_t v19 = v13 - v12;
        *(void *)&long long v58 = v19 >> 4;
        if (v19 != 16)
        {
          v57 = (void **)&v58;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()();
        }
        *(void *)&long long v58 = ((char *)v15 - (char *)v16) >> 4;
        if ((char *)v15 - (char *)v16 != 16)
        {
          v57 = (void **)&v58;
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator()();
        }
        turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v58);
        long long v20 = *(std::__shared_weak_count **)(a1 + 128);
        *(_OWORD *)(a1 + 120) = v58;
        long long v58 = 0uLL;
        if (v20)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          if (*((void *)&v58 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
          }
        }
        uint64_t v21 = *(void *)(a1 + 16);
        if (*(void *)v21 == *(void *)(v21 + 8) || (v22 = **(void ***)v21) == 0) {
          unint64_t v23 = 0;
        }
        else {
          unint64_t v23 = (uint64_t)(v22[1] - *v22) >> 4;
        }
        turi::sframe_rows::resize(*(turi::sframe_rows **)(a1 + 120), 1uLL, v23);
        *(void *)(a1 + 56) = *(void *)(a1 + 16);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = *(void *)(a1 + 32);
        *(void *)(a1 + 88) = 0;
        uint64_t v24 = *(void *)(a1 + 120);
        if (!*(unsigned char *)(v24 + 24)) {
          turi::sframe_rows::ensure_unique(*(turi::sframe_rows **)(a1 + 120));
        }
        uint64_t v25 = 0;
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 104) = v24;
        while (1)
        {
          *(void *)(a1 + 112) = v25;
          uint64_t v26 = *(void *)(a1 + 16);
          if (*(void *)v26 == *(void *)(v26 + 8))
          {
            uint64_t v27 = 0;
          }
          else
          {
            uint64_t v27 = **(void **)v26;
            if (v27) {
              uint64_t v27 = (uint64_t)(*(void *)(v27 + 8) - *(void *)v27) >> 4;
            }
          }
          if (!*(void *)(a1 + 48) && *(void *)(a1 + 64) == v27) {
            break;
          }
          uint64_t v29 = *(void *)(a1 + 160);
          if (!v29) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(long long *__return_ptr))(*(void *)v29 + 48))(&v58);
          uint64_t v30 = ****(void ****)(a1 + 104) + 16 * *(void *)(a1 + 112);
          if (&v58 == (long long *)v30)
          {
            switch(BYTE12(v58))
            {
              case 2:
                if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v44 = (void *)v58;
                  if ((void)v58)
                  {
                    if (*(char *)(v58 + 31) < 0) {
                      operator delete(*(void **)(v58 + 8));
                    }
                    v45 = v44;
                    uint64_t v46 = 0x1012C404EF22A49;
                    goto LABEL_113;
                  }
                }
                break;
              case 3:
                if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v53 = (void *)v58;
                  if ((void)v58)
                  {
                    v54 = *(void **)(v58 + 8);
                    if (v54)
                    {
                      *(void *)(v58 + 16) = v54;
                      operator delete(v54);
                    }
                    v45 = v53;
                    uint64_t v46 = 0x1080C409938AC02;
                    goto LABEL_113;
                  }
                }
                break;
              case 4:
                if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v47 = (void *)v58;
                  if ((void)v58)
                  {
                    v57 = (void **)(v58 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v57);
                    goto LABEL_108;
                  }
                }
                break;
              case 5:
                if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v47 = (void *)v58;
                  if ((void)v58)
                  {
                    v57 = (void **)(v58 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v57);
LABEL_108:
                    v45 = v47;
                    uint64_t v46 = 0x1020C405E66F15BLL;
                    goto LABEL_113;
                  }
                }
                break;
              case 8:
                if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v55 = (void *)v58;
                  if ((void)v58)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(v58 + 16));
                    v45 = v55;
                    unsigned int v52 = -235920773;
                    goto LABEL_112;
                  }
                }
                break;
              case 9:
                if (atomic_fetch_add((atomic_ullong *volatile)v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  v48 = (void *)v58;
                  if ((void)v58)
                  {
                    v49 = *(void **)(v58 + 48);
                    if (v49)
                    {
                      *(void *)(v58 + 56) = v49;
                      operator delete(v49);
                    }
                    v50 = (void *)v48[3];
                    if (v50)
                    {
                      v48[4] = v50;
                      operator delete(v50);
                    }
                    v51 = (std::__shared_weak_count *)v48[2];
                    if (v51) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
                    }
                    v45 = v48;
                    unsigned int v52 = 2071181815;
LABEL_112:
                    uint64_t v46 = v52 | 0x1030C4000000000;
LABEL_113:
                    MEMORY[0x22A614FA0](v45, v46);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
            switch(*(unsigned char *)(v30 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v31 = *(atomic_ullong *volatile *)v30;
                  if (!*(void *)v30) {
                    goto LABEL_79;
                  }
                  if (*((char *)v31 + 31) < 0) {
                    operator delete((void *)v31[1]);
                  }
                  atomic_ullong *volatile v32 = v31;
                  uint64_t v33 = 0x1012C404EF22A49;
                  goto LABEL_78;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v40 = *(atomic_ullong *volatile *)v30;
                  if (!*(void *)v30) {
                    goto LABEL_79;
                  }
                  v41 = (void *)v40[1];
                  if (v41)
                  {
                    v40[2] = (atomic_ullong)v41;
                    operator delete(v41);
                  }
                  atomic_ullong *volatile v32 = v40;
                  uint64_t v33 = 0x1080C409938AC02;
                  goto LABEL_78;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)v30;
                  if (!*(void *)v30) {
                    goto LABEL_79;
                  }
                  v57 = (void **)(v34 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v57);
                  goto LABEL_73;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v34 = *(atomic_ullong *volatile *)v30;
                  if (!*(void *)v30) {
                    goto LABEL_79;
                  }
                  v57 = (void **)(v34 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v57);
LABEL_73:
                  atomic_ullong *volatile v32 = v34;
                  uint64_t v33 = 0x1020C405E66F15BLL;
                  goto LABEL_78;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v42 = *(atomic_ullong *volatile *)v30;
                  if (!*(void *)v30) {
                    goto LABEL_79;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v42 + 2);
                  atomic_ullong *volatile v32 = v42;
                  unsigned int v39 = -235920773;
                  goto LABEL_77;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v35 = *(atomic_ullong *volatile *)v30;
                  if (*(void *)v30)
                  {
                    v36 = (void *)v35[6];
                    if (v36)
                    {
                      v35[7] = (atomic_ullong)v36;
                      operator delete(v36);
                    }
                    v37 = (void *)v35[3];
                    if (v37)
                    {
                      v35[4] = (atomic_ullong)v37;
                      operator delete(v37);
                    }
                    v38 = (std::__shared_weak_count *)v35[2];
                    if (v38) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
                    }
                    atomic_ullong *volatile v32 = v35;
                    unsigned int v39 = 2071181815;
LABEL_77:
                    uint64_t v33 = v39 | 0x1030C4000000000;
LABEL_78:
                    MEMORY[0x22A614FA0](v32, v33);
                  }
LABEL_79:
                  *(void *)uint64_t v30 = 0;
                }
                break;
              default:
                break;
            }
            uint64_t v43 = v58;
            *(void *)(v30 + 5) = *(void *)((char *)&v58 + 5);
            *(void *)uint64_t v30 = v43;
            *(unsigned char *)(v30 + 12) = BYTE12(v58);
          }
          ++*(void *)(a1 + 64);
          ++*(void *)(a1 + 88);
          uint64_t v25 = *(void *)(a1 + 112) + 1;
        }
        turi::query_eval::query_context::emit((uint64_t)this, (long long *)(a1 + 120));
        int v18 = 90;
        goto LABEL_115;
      }
    }
    else if (!v11)
    {
      int v18 = 0;
LABEL_115:
      *(_DWORD *)(a1 + 8) = v18;
      return;
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
  }
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0xC0uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224020EBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768CF8;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::operator_impl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_224020F18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::operator_impl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D768D48;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 32) = v5;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&,turi::sframe_rows::row const&)>::__value_func[abi:ne180100](a1 + 136, a2 + 136);
  return a1;
}

void sub_224021020(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 128);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  turi::fileio_impl::general_fstream_sink::general_fstream_sink(v3, v1);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left != nullptr && rows_right != nullptr", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 72, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224021140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left->num_rows()", 21);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"rows_right->num_rows()", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 73, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240213D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left->num_columns()", 24);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 74, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224021664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_right->num_columns()", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/binary_transform.hpp", "operator()", 75, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)2>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240218F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node@<D0>(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v7) = **a1;
  if (v7 != 3)
  {
    uint64_t v8 = (uint64_t)&v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = *((void *)v3 + 8) - *((void *)v3 + 7);
  uint64_t v8 = v4 >> 4;
  if (v4 != 32)
  {
    char v7 = &v8;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  uint64_t v5 = (char *)operator new(0xC0uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)uint64_t v5 = &unk_26D768DA8;
  *((void *)v5 + 3) = &unk_26D768DF8;
  *((_DWORD *)v5 + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  v5[184] = 0;
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::LOGICAL_FILTER_NODE", 43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 142, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224021C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 143, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224021F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::~operator_impl(void *a1)
{
  *a1 = &unk_26D768DF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::~operator_impl(void *a1)
{
  *a1 = &unk_26D768DF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::type()
{
  return 3;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 125) {
    goto LABEL_22;
  }
  if (v3 == 97)
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v42);
    long long v15 = v42;
    long long v42 = 0uLL;
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (*((void *)&v42 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
      }
    }
    turi::sframe_rows::resize(*(turi::sframe_rows **)(a1 + 120), *(void *)(a1 + 144), *(void *)(a1 + 152));
    *(void *)(a1 + 136) = 0;
LABEL_72:
    uint64_t v24 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v24;
    uint64_t v23 = *(void *)(a1 + 88) + 1;
    *(void *)(a1 + 88) = v23;
    uint64_t v14 = *(void ***)(a1 + 16);
    goto LABEL_35;
  }
  if (v3) {
    return;
  }
  turi::query_eval::query_context::get_next(this, 0, &v42);
  long long v5 = v42;
  long long v42 = 0uLL;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    if (*((void *)&v42 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  turi::query_eval::query_context::get_next(this, 1uLL, &v42);
  long long v7 = v42;
  long long v42 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&v42 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (!*(void *)(a1 + 16))
  {
    if (!v9) {
      return;
    }
LABEL_21:
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
  }
  if (!v9) {
    goto LABEL_21;
  }
  turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v42);
  long long v10 = v42;
  long long v42 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v42 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
    }
  }
  *(void *)(a1 + 136) = 0;
  unint64_t v12 = (uint64_t)(*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 4;
  *(void *)(a1 + 144) = v12;
  uint64_t v13 = *this;
  *(void *)(a1 + 152) = *this;
  turi::sframe_rows::resize(*(turi::sframe_rows **)(a1 + 120), v12, (unint64_t)v13);
  uint64_t v14 = *(void ***)(a1 + 16);
  do
  {
    if (!v14 || (int v18 = *(void ***)(a1 + 32)) == 0) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()();
    }
    uint64_t v19 = 0;
    if (*v14 != v14[1])
    {
      uint64_t v19 = 0;
      long long v20 = (void *)**v14;
      if (v20) {
        uint64_t v19 = (uint64_t)(*(void *)(**v14 + 8) - *v20) >> 4;
      }
    }
    uint64_t v21 = 0;
    uint64_t v41 = v19;
    if (*v18 != v18[1])
    {
      uint64_t v21 = 0;
      v22 = (void *)**v18;
      if (v22) {
        uint64_t v21 = (uint64_t)(*(void *)(**v18 + 8) - *v22) >> 4;
      }
    }
    uint64_t v40 = v21;
    if (v19 != v21)
    {
      *(void *)&long long v42 = &v41;
      *((void *)&v42 + 1) = &v40;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()();
    }
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = v18;
    *(void *)(a1 + 88) = 0;
LABEL_35:
    uint64_t v25 = 0;
    uint64_t v26 = (uint64_t)*v14;
    if (*v14 != v14[1])
    {
      uint64_t v25 = 0;
      if (*(void *)v26) {
        uint64_t v25 = (uint64_t)(*(void *)(*(void *)v26 + 8) - **(void **)v26) >> 4;
      }
    }
    if (*(void *)(a1 + 48) || v24 != v25)
    {
      atomic_ullong *volatile v34 = (unsigned char *)(****(void ****)(a1 + 80) + 16 * v23);
      switch(v34[12])
      {
        case 0:
          double v36 = *(double *)v34;
          goto LABEL_68;
        case 1:
          if (*(double *)v34 != 0.0) {
            goto LABEL_69;
          }
          goto LABEL_72;
        case 2:
          uint64_t v35 = *(void *)v34;
          if (*(char *)(v35 + 31) < 0) {
            double v36 = *(double *)(v35 + 16);
          }
          else {
            *(void *)&double v36 = *(unsigned __int8 *)(v35 + 31);
          }
LABEL_68:
          if (v36 != 0.0) {
            goto LABEL_69;
          }
          goto LABEL_72;
        case 3:
        case 4:
        case 5:
          if (*(void *)(*(void *)v34 + 8) == *(void *)(*(void *)v34 + 16)) {
            goto LABEL_72;
          }
          goto LABEL_69;
        case 7:
          goto LABEL_72;
        case 8:
          if (*(void *)(*(void *)v34 + 64) == 3) {
            goto LABEL_72;
          }
LABEL_69:
          uint64_t v33 = (long long *)(a1 + 120);
          uint64_t v37 = *(void *)(a1 + 120);
          uint64_t v38 = *(void *)(a1 + 136);
          if (!*(unsigned char *)(v37 + 24)) {
            turi::sframe_rows::ensure_unique(*(turi::sframe_rows **)(a1 + 120));
          }
          *(void *)&long long v42 = v37;
          *((void *)&v42 + 1) = v38;
          turi::sframe_rows::row::operator=((uint64_t **)&v42, (void *)(a1 + 56));
          uint64_t v39 = *(void *)(a1 + 136) + 1;
          *(void *)(a1 + 136) = v39;
          if (v39 != *(void *)(a1 + 152)) {
            goto LABEL_72;
          }
          int v17 = 97;
          break;
        default:
          turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
      }
LABEL_74:
      turi::query_eval::query_context::emit((uint64_t)this, v33);
      goto LABEL_75;
    }
    *(unsigned char *)(a1 + 160) = 0;
    uint64_t v27 = (void *)(a1 + 32);
    do
    {
      turi::query_eval::query_context::get_next(this, 1uLL, &v42);
      long long v28 = v42;
      long long v42 = 0uLL;
      uint64_t v29 = *(std::__shared_weak_count **)(a1 + 40);
      *(_OWORD *)(a1 + 32) = v28;
      if (v29)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        if (*((void *)&v42 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
        }
        if (!*v27) {
          goto LABEL_49;
        }
      }
      else if (!(void)v28)
      {
        goto LABEL_49;
      }
      if (turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::is_all_zero(a1, (void **)(a1 + 32)))
      {
        turi::query_eval::query_context::skip_next(this, 0);
        continue;
      }
LABEL_49:
      *(unsigned char *)(a1 + 160) = 1;
      turi::query_eval::query_context::get_next(this, 0, &v42);
      long long v30 = v42;
      long long v42 = 0uLL;
      atomic_ullong *volatile v31 = *(std::__shared_weak_count **)(a1 + 24);
      *(_OWORD *)(a1 + 16) = v30;
      if (v31)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        if (*((void *)&v42 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
        }
      }
    }
    while (!*(unsigned char *)(a1 + 160));
    uint64_t v14 = *(void ***)(a1 + 16);
  }
  while (v14 || *v27);
  unint64_t v32 = *(void *)(a1 + 136);
  if (v32)
  {
    uint64_t v33 = (long long *)(a1 + 120);
    turi::sframe_rows::resize(*(turi::sframe_rows **)(a1 + 120), *(void *)(a1 + 144), v32);
    int v17 = 125;
    goto LABEL_74;
  }
LABEL_22:
  int v17 = 0;
LABEL_75:
  *(_DWORD *)(a1 + 8) = v17;
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xC0uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2240226B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768DA8;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_224022724(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

__n128 std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26D768DF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  uint64_t v3 = *(void *)(a3 + 24);
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)(a2 + 24) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a3 + 40);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a2 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  uint64_t v5 = *(void *)(a3 + 120);
  *(void *)(a2 + 112) = *(void *)(a3 + 112);
  *(void *)(a2 + 120) = v5;
  uint64_t v6 = *(void *)(a3 + 128);
  *(void *)(a2 + 128) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a3 + 136);
  *(_OWORD *)(a2 + 145) = *(_OWORD *)(a3 + 145);
  *(__n128 *)(a2 + 136) = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left != nullptr && rows_right != nullptr", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 75, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240228F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left != nullptr && rows_right != nullptr", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 86, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224022AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rows_left->num_rows()", 21);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"rows_right->num_rows()", 22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 87, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224022D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::is_all_zero(uint64_t a1, void **a2)
{
  uint64_t v2 = (unsigned char ***)**a2;
  if (v2 == (unsigned char ***)(*a2)[1]) {
    return 1;
  }
  uint64_t v3 = *v2;
  if (!v3) {
    return 1;
  }
  uint64_t v5 = v3;
  uint64_t v4 = *v3;
  uint64_t v6 = v5[1] - v4;
  if (!v6) {
    return 1;
  }
  uint64_t v7 = v6 >> 4;
  while (2)
  {
    switch(v4[12])
    {
      case 0:
        double v8 = *(double *)v4;
        goto LABEL_16;
      case 1:
        if (*(double *)v4 != 0.0) {
          return 0;
        }
        goto LABEL_17;
      case 2:
        if (*(char *)(*(void *)v4 + 31) < 0) {
          double v8 = *(double *)(*(void *)v4 + 16);
        }
        else {
          *(void *)&double v8 = *(unsigned __int8 *)(*(void *)v4 + 31);
        }
LABEL_16:
        if (v8 == 0.0) {
          goto LABEL_17;
        }
        return 0;
      case 3:
      case 4:
      case 5:
        if (*(void *)(*(void *)v4 + 8) != *(void *)(*(void *)v4 + 16)) {
          return 0;
        }
        goto LABEL_17;
      case 7:
        goto LABEL_17;
      case 8:
        if (*(void *)(*(void *)v4 + 64) == 3)
        {
LABEL_17:
          v4 += 16;
          if (!--v7) {
            return 1;
          }
          continue;
        }
        return 0;
      default:
        turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
    }
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(_DWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(p_p) = **a1;
  if (p_p != 4)
  {
    __p = &p_p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v5 = (uint64_t)(v3 + 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)&__p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
  if (!v6) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  uint64_t v7 = (uint64_t)(*a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(&p_p, "indices");
  uint64_t v8 = *(void *)std::map<std::string,turi::neural_net::shared_float_array>::at(v7, (const void **)&p_p);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  __p = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v8 + 8), *(uint64_t **)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
  if (SHIBYTE(v12) < 0) {
    operator delete(p_p);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  p_p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(&p_p, __p, v14, (v14 - (unsigned char *)__p) >> 4);
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,std::vector<unsigned long> &,void>((uint64_t)&p_p, &v9);
  *a2 = v9;
  if (p_p)
  {
    uint64_t v11 = p_p;
    operator delete(p_p);
  }
  p_p = &__p;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
}

void sub_2240230E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, void **a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p)
  {
    a13 = __p;
    operator delete(__p);
  }
  __p = &a18;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::PROJECT_NODE", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 106, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240232D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"indices\")", 43);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 107, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240234D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(void *a1, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a4);
    std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>((uint64_t)a1, a2, a3);
  }
}

void sub_224023628(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 == a3)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    uint64_t v5 = a2;
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    do
    {
      std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type &>(a1 + 16, v6, v5);
      v5 += 16;
      ++v6;
    }
    while (v5 != a3);
  }
  *(void *)(a1 + 8) = v6;
}

void sub_2240236BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type &>(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v4 = 0;
  switch(a3[12])
  {
    case 0:
      uint64_t v4 = *(void *)a3;
      goto LABEL_25;
    case 1:
      uint64_t v4 = (uint64_t)*(double *)a3;
      goto LABEL_25;
    case 2:
      uint64_t v6 = *(void *)a3;
      char v7 = (char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      uint64_t v8 = (char *)v7;
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v8 = *v7;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      uint64_t v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v20[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v9 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 31);
      }
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        int v17 = std::string::append(&v23, " cannot be interpreted as an integer");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v20[0] = (void *)v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v5 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v10 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      goto LABEL_24;
    case 5:
      uint64_t v11 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      goto LABEL_24;
    case 6:
      uint64_t v4 = (uint64_t)(*(void *)a3 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v12 = *(void *)a3;
      uint64_t v13 = *(atomic_uint **)(*(void *)a3 + 16);
      __p[0] = *(void **)(*(void *)a3 + 8);
      __p[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
      }
      long long v14 = *(_OWORD *)(v12 + 24);
      long long v15 = *(_OWORD *)(v12 + 56);
      long long v21 = *(_OWORD *)(v12 + 40);
      long long v22 = v15;
      *(_OWORD *)long long v20 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v21 + 1))
      {
        *(void *)&long long v22 = *((void *)&v21 + 1);
        operator delete(*((void **)&v21 + 1));
      }
      if (v20[0])
      {
        v20[1] = v20[0];
        operator delete(v20[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v4 = 0;
LABEL_25:
      *a2 = v4;
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_22402397C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,std::vector<unsigned long> &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  __n128 result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned long> &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224023AC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__shared_ptr_emplace[abi:ne180100]<std::vector<unsigned long> &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768E58;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::vector<unsigned long> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_224023B30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::vector<unsigned long> &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26D768EA8;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  char v4 = (void *)(a2 + 16);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  __n128 result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a2 + 16), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  if (*(void *)(a2 + 24) == *v4) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::operator_impl(std::vector<unsigned long> const&)::{lambda(void)#1}::operator()();
  }
  return result;
}

void sub_224023C7C(_Unwind_Exception *exception_object)
{
  char v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::operator_impl(std::vector<unsigned long> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_indices.size()", 16);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">", 1);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 45, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::operator_impl(std::vector<unsigned long> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224023E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::~operator_impl(void *a1)
{
  *a1 = &unk_26D768EA8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::~operator_impl(void *a1)
{
  *a1 = &unk_26D768EA8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::type()
{
  return 4;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::print@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  uint64_t v4 = *(void *)(a1 + 16);
  for (uint64_t i = *(void *)(a1 + 24); v4 != i; v4 += 8)
  {
    uint64_t v6 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, "project");
  char v7 = std::string::append(&v18, "(");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::stringbuf::str();
  if ((v17 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v10 = v17;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  uint64_t v11 = std::string::append(&v19, (const std::string::value_type *)v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v20, ")");
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if ((char)v17 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  v21[0] = *MEMORY[0x263F8C2B8];
  uint64_t v14 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v21[2] = v14;
  v21[3] = MEMORY[0x263F8C318] + 16;
  if (v22 < 0) {
    operator delete((void *)v21[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v23);
}

void sub_224024270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4> const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 79 || v2 == 0)
  {
    turi::query_eval::query_context::get_next(this, 0, &v13);
    uint64_t v6 = v13;
    if ((void)v13)
    {
      turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v12);
      char v7 = (void *)v13;
      long long v8 = (uint64_t *)v12;
      if (!*(unsigned char *)(v12 + 24)) {
        turi::sframe_rows::ensure_unique((turi::sframe_rows *)v12);
      }
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100](v8);
      uint64_t v9 = *(void *)(a1 + 16);
      if (*(void *)(a1 + 24) != v9)
      {
        unint64_t v10 = 0;
        do
        {
          std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v8, (long long *)(*v7 + 16 * *(void *)(v9 + 8 * v10++)));
          uint64_t v9 = *(void *)(a1 + 16);
        }
        while (v10 < (*(void *)(a1 + 24) - v9) >> 3);
      }
      turi::query_eval::query_context::emit((uint64_t)this, &v12);
      if (*((void *)&v12 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
    }
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
    if (v6) {
      int v11 = 79;
    }
    else {
      int v11 = 0;
    }
    *(_DWORD *)(a1 + 8) = v11;
  }
}

void sub_224024424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_22402449C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D768E58;
  *(void *)(a1 + 24) = &unk_26D768EA8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 40) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)(a1 + 40), *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  return a1;
}

void sub_22402453C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node@<D0>(_DWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v66.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v66.__r_.__value_.__l.__data_) == 5)
  {
    uint64_t v5 = (uint64_t)(v3 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "start");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v63) < 0) {
      operator delete(__p[0]);
    }
    if (!v6) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
    }
    uint64_t v7 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
    uint64_t v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v7, (const void **)__p);
    if (SBYTE7(v63) < 0) {
      operator delete(__p[0]);
    }
    if (!v8) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
    }
    uint64_t v9 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
    uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v9, (const void **)__p);
    if (SBYTE7(v63) < 0) {
      operator delete(__p[0]);
    }
    if (!v10) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
    }
    int v11 = (uint64_t **)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(v60, "start");
    __p[0] = v60;
    long long v12 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v11, (const void **)v60, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    uint64_t v13 = 0;
    switch(*((unsigned char *)v12 + 68))
    {
      case 0:
        uint64_t v13 = *((void *)v12 + 7);
        goto LABEL_35;
      case 1:
        uint64_t v13 = (uint64_t)*((double *)v12 + 7);
        goto LABEL_35;
      case 2:
        uint64_t v15 = *((void *)v12 + 7);
        size_t __idx = 0;
        uint64_t v16 = (char *)(v15 + 8);
        if (*(char *)(v15 + 31) < 0) {
          uint64_t v16 = *(char **)(v15 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v16);
        uint64_t v13 = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v63) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v15 + 31) < 0) {
          uint64_t v17 = *(void *)(v15 + 16);
        }
        else {
          uint64_t v17 = *(unsigned __int8 *)(v15 + 31);
        }
        if (__idx != v17)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          unsigned int v52 = std::string::append(&v66, " cannot be interpreted as an integer");
          long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          *(void *)&long long v63 = *((void *)&v52->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_35;
      case 3:
        uint64_t v14 = *((void *)v12 + 7);
        __p[1] = 0;
        *(void *)&long long v63 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v14 + 8), *(void *)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_34;
      case 4:
        uint64_t v18 = *((void *)v12 + 7);
        __p[1] = 0;
        *(void *)&long long v63 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        goto LABEL_34;
      case 5:
        uint64_t v19 = *((void *)v12 + 7);
        __p[1] = 0;
        *(void *)&long long v63 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v66.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
        goto LABEL_34;
      case 6:
        uint64_t v13 = (uint64_t)(*((void *)v12 + 7) << 8) >> 8;
        goto LABEL_35;
      case 7:
        goto LABEL_35;
      case 8:
        uint64_t v20 = *((void *)v12 + 7);
        long long v21 = *(atomic_uint **)(v20 + 16);
        __p[0] = *(void **)(v20 + 8);
        __p[1] = v21;
        if (v21) {
          atomic_fetch_add_explicit(v21 + 2, 1u, memory_order_relaxed);
        }
        long long v22 = *(_OWORD *)(v20 + 24);
        long long v23 = *(_OWORD *)(v20 + 56);
        long long v64 = *(_OWORD *)(v20 + 40);
        long long v65 = v23;
        long long v63 = v22;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_34;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v12 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v64 + 1))
        {
          *(void *)&long long v65 = *((void *)&v64 + 1);
          operator delete(*((void **)&v64 + 1));
        }
        if ((void)v63)
        {
          *((void *)&v63 + 1) = v63;
          operator delete((void *)v63);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_34:
        uint64_t v13 = 0;
LABEL_35:
        if (v61 < 0) {
          operator delete(v60[0]);
        }
        uint64_t v24 = (uint64_t **)(*a1 + 2);
        std::string::basic_string[abi:ne180100]<0>(v60, "begin_index");
        __p[0] = v60;
        uint64_t v25 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v24, (const void **)v60, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        uint64_t v26 = 0;
        switch(*((unsigned char *)v25 + 68))
        {
          case 0:
            uint64_t v26 = *((void *)v25 + 7);
            goto LABEL_61;
          case 1:
            uint64_t v26 = (uint64_t)*((double *)v25 + 7);
            goto LABEL_61;
          case 2:
            uint64_t v28 = *((void *)v25 + 7);
            size_t __idx = 0;
            uint64_t v29 = (char *)(v28 + 8);
            if (*(char *)(v28 + 31) < 0) {
              uint64_t v29 = *(char **)(v28 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v29);
            uint64_t v26 = std::stoll((const std::string *)__p, &__idx, 10);
            if (SBYTE7(v63) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(v28 + 31) < 0) {
              uint64_t v30 = *(void *)(v28 + 16);
            }
            else {
              uint64_t v30 = *(unsigned __int8 *)(v28 + 31);
            }
            if (__idx != v30)
            {
              v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v55 = std::string::append(&v66, " cannot be interpreted as an integer");
              long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
              *(void *)&long long v63 = *((void *)&v55->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v56;
              v55->__r_.__value_.__l.__size_ = 0;
              v55->__r_.__value_.__r.__words[2] = 0;
              v55->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v54, (const std::string *)__p);
              __cxa_throw(v54, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_61;
          case 3:
            uint64_t v27 = *((void *)v25 + 7);
            __p[1] = 0;
            *(void *)&long long v63 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v27 + 8), *(void *)(v27 + 16), (uint64_t)(*(void *)(v27 + 16) - *(void *)(v27 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_60;
          case 4:
            uint64_t v31 = *((void *)v25 + 7);
            __p[1] = 0;
            *(void *)&long long v63 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v66.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
            goto LABEL_60;
          case 5:
            uint64_t v32 = *((void *)v25 + 7);
            __p[1] = 0;
            *(void *)&long long v63 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(void *)(v32 + 16) - *(void *)(v32 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v66.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
            goto LABEL_60;
          case 6:
            uint64_t v26 = (uint64_t)(*((void *)v25 + 7) << 8) >> 8;
            goto LABEL_61;
          case 7:
            goto LABEL_61;
          case 8:
            uint64_t v33 = *((void *)v25 + 7);
            atomic_ullong *volatile v34 = *(atomic_uint **)(v33 + 16);
            __p[0] = *(void **)(v33 + 8);
            __p[1] = v34;
            if (v34) {
              atomic_fetch_add_explicit(v34 + 2, 1u, memory_order_relaxed);
            }
            long long v35 = *(_OWORD *)(v33 + 24);
            long long v36 = *(_OWORD *)(v33 + 56);
            long long v64 = *(_OWORD *)(v33 + 40);
            long long v65 = v36;
            long long v63 = v35;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            goto LABEL_60;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v25 + 7) + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v64 + 1))
            {
              *(void *)&long long v65 = *((void *)&v64 + 1);
              operator delete(*((void **)&v64 + 1));
            }
            if ((void)v63)
            {
              *((void *)&v63 + 1) = v63;
              operator delete((void *)v63);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
LABEL_60:
            uint64_t v26 = 0;
LABEL_61:
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            uint64_t v37 = (uint64_t **)(*a1 + 2);
            std::string::basic_string[abi:ne180100]<0>(v60, "end_index");
            __p[0] = v60;
            uint64_t v38 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v37, (const void **)v60, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
            uint64_t v39 = 0;
            switch(*((unsigned char *)v38 + 68))
            {
              case 0:
                uint64_t v39 = *((void *)v38 + 7);
                goto LABEL_87;
              case 1:
                uint64_t v39 = (uint64_t)*((double *)v38 + 7);
                goto LABEL_87;
              case 2:
                uint64_t v41 = *((void *)v38 + 7);
                size_t __idx = 0;
                long long v42 = (char *)(v41 + 8);
                if (*(char *)(v41 + 31) < 0) {
                  long long v42 = *(char **)(v41 + 8);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, v42);
                uint64_t v39 = std::stoll((const std::string *)__p, &__idx, 10);
                if (SBYTE7(v63) < 0) {
                  operator delete(__p[0]);
                }
                if (*(char *)(v41 + 31) < 0) {
                  uint64_t v43 = *(void *)(v41 + 16);
                }
                else {
                  uint64_t v43 = *(unsigned __int8 *)(v41 + 31);
                }
                if (__idx != v43)
                {
                  v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  long long v58 = std::string::append(&v66, " cannot be interpreted as an integer");
                  long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
                  *(void *)&long long v63 = *((void *)&v58->__r_.__value_.__l + 2);
                  *(_OWORD *)__p = v59;
                  v58->__r_.__value_.__l.__size_ = 0;
                  v58->__r_.__value_.__r.__words[2] = 0;
                  v58->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v57, (const std::string *)__p);
                  __cxa_throw(v57, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_87;
              case 3:
                uint64_t v40 = *((void *)v38 + 7);
                __p[1] = 0;
                *(void *)&long long v63 = 0;
                __p[0] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v40 + 8), *(void *)(v40 + 16), (uint64_t)(*(void *)(v40 + 16) - *(void *)(v40 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                goto LABEL_86;
              case 4:
                uint64_t v44 = *((void *)v38 + 7);
                __p[1] = 0;
                *(void *)&long long v63 = 0;
                __p[0] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(void *)(v44 + 16) - *(void *)(v44 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v66.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
                goto LABEL_86;
              case 5:
                uint64_t v45 = *((void *)v38 + 7);
                __p[1] = 0;
                *(void *)&long long v63 = 0;
                __p[0] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v45 + 8), *(uint64_t **)(v45 + 16), (uint64_t)(*(void *)(v45 + 16) - *(void *)(v45 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v66.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
                goto LABEL_86;
              case 6:
                uint64_t v39 = (uint64_t)(*((void *)v38 + 7) << 8) >> 8;
                goto LABEL_87;
              case 7:
                goto LABEL_87;
              case 8:
                uint64_t v46 = *((void *)v38 + 7);
                v47 = *(atomic_uint **)(v46 + 16);
                __p[0] = *(void **)(v46 + 8);
                __p[1] = v47;
                if (v47) {
                  atomic_fetch_add_explicit(v47 + 2, 1u, memory_order_relaxed);
                }
                long long v48 = *(_OWORD *)(v46 + 24);
                long long v49 = *(_OWORD *)(v46 + 56);
                long long v64 = *(_OWORD *)(v46 + 40);
                long long v65 = v49;
                long long v63 = v48;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
                goto LABEL_86;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v38 + 7) + 8);
                turi::flexible_type_fail(0);
                if (*((void *)&v64 + 1))
                {
                  *(void *)&long long v65 = *((void *)&v64 + 1);
                  operator delete(*((void **)&v64 + 1));
                }
                if ((void)v63)
                {
                  *((void *)&v63 + 1) = v63;
                  operator delete((void *)v63);
                }
                if (__p[1]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                }
LABEL_86:
                uint64_t v39 = 0;
LABEL_87:
                if (v61 < 0) {
                  operator delete(v60[0]);
                }
                v66.__r_.__value_.__r.__words[0] = v26 + v13;
                v60[0] = (void *)(v39 + v13);
                std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,unsigned long long,unsigned long long,void>((uint64_t *)&v66, (uint64_t *)v60, __p);
                double result = *(double *)__p;
                *a2 = *(_OWORD *)__p;
                return result;
              default:
                goto LABEL_99;
            }
          default:
            goto LABEL_99;
        }
      default:
        break;
    }
LABEL_99:
    turi::flexible_type_fail(0);
    __break(1u);
  }
  __p[0] = &v66;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_224024F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 57) < 0)
  {
    operator delete(*(void **)(v23 - 80));
    if ((v22 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::RANGE_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 88, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240252B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"start\")", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 89, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240254B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"begin_index\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 90, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240256B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"end_index\")", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 91, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240258B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,unsigned long long,unsigned long long,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,unsigned long long,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_224025A04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,unsigned long long,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,0>(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768F08;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,unsigned long long,unsigned long long>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_224025A78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,unsigned long long,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = *a3;
  uint64_t v5 = *a4;
  *(void *)a2 = &unk_26D768F58;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  if (v4 > v5) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::operator_impl(long long,long long)::{lambda(void)#1}::operator()();
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::operator_impl(long long,long long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_start", 7);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_end", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 46, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::operator_impl(long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224025D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::~operator_impl()
{
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::type()
{
  return 5;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,long long const&,long long const&,void>((uint64_t *)(a1 + 24), (uint64_t *)(a1 + 32), v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    if (v4 != 73) {
      return;
    }
    uint64_t v5 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v5;
  }
  if (v5 >= *(void *)(a1 + 32))
  {
    int v23 = 0;
  }
  else
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v24);
    if (*(void *)this >= *(void *)(a1 + 32) - *(void *)(a1 + 16)) {
      unint64_t v6 = *(void *)(a1 + 32) - *(void *)(a1 + 16);
    }
    else {
      unint64_t v6 = *(void *)this;
    }
    turi::sframe_rows::resize((turi::sframe_rows *)v24, 1uLL, v6);
    char v7 = (uint64_t ***)v24;
    if (!*(unsigned char *)(v24 + 24)) {
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v24);
    }
    uint64_t v8 = **v7;
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      do
      {
        switch(*(unsigned char *)(v9 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_44;
              }
              if (*((char *)v11 + 31) < 0) {
                operator delete((void *)v11[1]);
              }
              atomic_ullong *volatile v12 = v11;
              uint64_t v13 = 0x1012C404EF22A49;
              goto LABEL_43;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_44;
              }
              long long v21 = (void *)v20[1];
              if (v21)
              {
                v20[2] = (atomic_ullong)v21;
                operator delete(v21);
              }
              atomic_ullong *volatile v12 = v20;
              uint64_t v13 = 0x1080C409938AC02;
              goto LABEL_43;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_44;
              }
              uint64_t v25 = (void **)(v14 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v25);
              goto LABEL_38;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_44;
              }
              uint64_t v25 = (void **)(v14 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v25);
LABEL_38:
              atomic_ullong *volatile v12 = v14;
              uint64_t v13 = 0x1020C405E66F15BLL;
              goto LABEL_43;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)v9;
              if (!*(void *)v9) {
                goto LABEL_44;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v22 + 2);
              atomic_ullong *volatile v12 = v22;
              unsigned int v19 = -235920773;
              goto LABEL_42;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v9, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v9;
              if (*(void *)v9)
              {
                uint64_t v16 = (void *)v15[6];
                if (v16)
                {
                  v15[7] = (atomic_ullong)v16;
                  operator delete(v16);
                }
                uint64_t v17 = (void *)v15[3];
                if (v17)
                {
                  v15[4] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                uint64_t v18 = (std::__shared_weak_count *)v15[2];
                if (v18) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                }
                atomic_ullong *volatile v12 = v15;
                unsigned int v19 = 2071181815;
LABEL_42:
                uint64_t v13 = v19 | 0x1030C4000000000;
LABEL_43:
                MEMORY[0x22A614FA0](v12, v13);
              }
LABEL_44:
              *(void *)uint64_t v9 = 0;
            }
            break;
          default:
            break;
        }
        *(void *)uint64_t v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        *(unsigned char *)(v9 + 12) = 0;
        *(void *)uint64_t v9 = *(void *)(a1 + 16);
        v9 += 16;
        ++*(void *)(a1 + 16);
      }
      while (v9 != v10);
    }
    turi::query_eval::query_context::emit((uint64_t)this, &v24);
    if (*((void *)&v24 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
    }
    int v23 = 73;
  }
  *(_DWORD *)(a1 + 8) = v23;
}

void sub_22402614C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,long long const&,long long const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x40uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>::__shared_ptr_emplace[abi:ne180100]<unsigned long long,unsigned long long,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_2240261D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(_DWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v54.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v54.__r_.__value_.__l.__data_) == 6)
  {
    uint64_t v5 = (uint64_t)(v3 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v51) < 0) {
      operator delete(__p[0]);
    }
    if (!v6) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
    }
    char v7 = (uint64_t **)(*a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    uint64_t v8 = *((void *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7, (const void **)__p, (uint64_t)&std::piecewise_construct, &v54)+ 7);
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
    uint64_t v48 = *(void *)(v8 + 8);
    long long v49 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (SBYTE7(v51) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v47 = 0;
    uint64_t v10 = *a1;
    std::string::basic_string[abi:ne180100]<0>(v45, "begin_index");
    atomic_ullong *volatile v11 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v10 + 2), (const void **)v45);
    uint64_t v12 = 0;
    switch(v11[12])
    {
      case 0:
        uint64_t v12 = *(void *)v11;
        goto LABEL_33;
      case 1:
        uint64_t v12 = (uint64_t)*(double *)v11;
        goto LABEL_33;
      case 2:
        uint64_t v14 = *(void *)v11;
        atomic_ullong *volatile v15 = (char **)(*(void *)v11 + 8);
        size_t __idx = 0;
        uint64_t v16 = (char *)v15;
        if (*(char *)(v14 + 31) < 0) {
          uint64_t v16 = *v15;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v16);
        uint64_t v12 = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v51) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v14 + 31) < 0) {
          uint64_t v17 = *(void *)(v14 + 16);
        }
        else {
          uint64_t v17 = *(unsigned __int8 *)(v14 + 31);
        }
        if (__idx != v17)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v39 = std::string::append(&v54, " cannot be interpreted as an integer");
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          *(void *)&long long v51 = *((void *)&v39->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_33;
      case 3:
        uint64_t v13 = *(void *)v11;
        __p[1] = 0;
        *(void *)&long long v51 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v13 + 8), *(void *)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_32;
      case 4:
        uint64_t v18 = *(void *)v11;
        __p[1] = 0;
        *(void *)&long long v51 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
        goto LABEL_32;
      case 5:
        uint64_t v19 = *(void *)v11;
        __p[1] = 0;
        *(void *)&long long v51 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
        goto LABEL_32;
      case 6:
        uint64_t v12 = (uint64_t)(*(void *)v11 << 8) >> 8;
        goto LABEL_33;
      case 7:
        goto LABEL_33;
      case 8:
        uint64_t v20 = *(void *)v11;
        long long v21 = *(atomic_uint **)(*(void *)v11 + 16);
        __p[0] = *(void **)(*(void *)v11 + 8);
        __p[1] = v21;
        if (v21) {
          atomic_fetch_add_explicit(v21 + 2, 1u, memory_order_relaxed);
        }
        long long v22 = *(_OWORD *)(v20 + 24);
        long long v23 = *(_OWORD *)(v20 + 56);
        long long v52 = *(_OWORD *)(v20 + 40);
        long long v53 = v23;
        long long v51 = v22;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_32;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v11 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v52 + 1))
        {
          *(void *)&long long v53 = *((void *)&v52 + 1);
          operator delete(*((void **)&v52 + 1));
        }
        if ((void)v51)
        {
          *((void *)&v51 + 1) = v51;
          operator delete((void *)v51);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_32:
        uint64_t v12 = 0;
LABEL_33:
        if (v46 < 0) {
          operator delete(v45[0]);
        }
        uint64_t v47 = v12;
        uint64_t v44 = 0;
        long long v24 = *a1;
        std::string::basic_string[abi:ne180100]<0>(v45, "end_index");
        uint64_t v25 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v24 + 2), (const void **)v45);
        uint64_t v26 = 0;
        switch(v25[12])
        {
          case 0:
            uint64_t v26 = *(void *)v25;
            goto LABEL_59;
          case 1:
            uint64_t v26 = (uint64_t)*(double *)v25;
            goto LABEL_59;
          case 2:
            uint64_t v28 = *(void *)v25;
            uint64_t v29 = (char **)(*(void *)v25 + 8);
            size_t __idx = 0;
            uint64_t v30 = (char *)v29;
            if (*(char *)(v28 + 31) < 0) {
              uint64_t v30 = *v29;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v30);
            uint64_t v26 = std::stoll((const std::string *)__p, &__idx, 10);
            if (SBYTE7(v51) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(v28 + 31) < 0) {
              uint64_t v31 = *(void *)(v28 + 16);
            }
            else {
              uint64_t v31 = *(unsigned __int8 *)(v28 + 31);
            }
            if (__idx != v31)
            {
              uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              long long v42 = std::string::append(&v54, " cannot be interpreted as an integer");
              long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
              *(void *)&long long v51 = *((void *)&v42->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v43;
              v42->__r_.__value_.__l.__size_ = 0;
              v42->__r_.__value_.__r.__words[2] = 0;
              v42->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v41, (const std::string *)__p);
              __cxa_throw(v41, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_59;
          case 3:
            uint64_t v27 = *(void *)v25;
            __p[1] = 0;
            *(void *)&long long v51 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v27 + 8), *(void *)(v27 + 16), (uint64_t)(*(void *)(v27 + 16) - *(void *)(v27 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_58;
          case 4:
            uint64_t v32 = *(void *)v25;
            __p[1] = 0;
            *(void *)&long long v51 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(void *)(v32 + 16) - *(void *)(v32 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
            goto LABEL_58;
          case 5:
            uint64_t v33 = *(void *)v25;
            __p[1] = 0;
            *(void *)&long long v51 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(void *)(v33 + 16) - *(void *)(v33 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v54.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
            goto LABEL_58;
          case 6:
            uint64_t v26 = (uint64_t)(*(void *)v25 << 8) >> 8;
            goto LABEL_59;
          case 7:
            goto LABEL_59;
          case 8:
            uint64_t v34 = *(void *)v25;
            long long v35 = *(atomic_uint **)(*(void *)v25 + 16);
            __p[0] = *(void **)(*(void *)v25 + 8);
            __p[1] = v35;
            if (v35) {
              atomic_fetch_add_explicit(v35 + 2, 1u, memory_order_relaxed);
            }
            long long v36 = *(_OWORD *)(v34 + 24);
            long long v37 = *(_OWORD *)(v34 + 56);
            long long v52 = *(_OWORD *)(v34 + 40);
            long long v53 = v37;
            long long v51 = v36;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            goto LABEL_58;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v25 + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v52 + 1))
            {
              *(void *)&long long v53 = *((void *)&v52 + 1);
              operator delete(*((void **)&v52 + 1));
            }
            if ((void)v51)
            {
              *((void *)&v51 + 1) = v51;
              operator delete((void *)v51);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
LABEL_58:
            uint64_t v26 = 0;
LABEL_59:
            if (v46 < 0) {
              operator delete(v45[0]);
            }
            uint64_t v44 = v26;
            std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &,void>(&v48, &v47, &v44, __p);
            *a2 = *(_OWORD *)__p;
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            return;
          default:
            goto LABEL_70;
        }
      default:
        break;
    }
LABEL_70:
    turi::flexible_type_fail(0);
    __break(1u);
  }
  __p[0] = &v54;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_2240268B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 57) < 0)
  {
    operator delete(*(void **)(v28 - 80));
    if ((v27 & 1) == 0)
    {
LABEL_8:
      if (a16 < 0) {
        operator delete(a11);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v26);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SARRAY_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  atomic_ullong *volatile v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224026BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"sarray\")", 46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sarray_source.hpp", "operator()", 119, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224026DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x88uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_224026F54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768FB8;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_224026FCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768FB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D768FB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::shared_ptr<turi::sarray<turi::flexible_type>> &,unsigned long &,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = *a3;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a4;
  uint64_t v8 = *a5;
  *(void *)a2 = &unk_26D769008;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 64) = v6;
  *(void *)(a2 + 72) = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 80) = v7;
  if (v8 == -1)
  {
    uint64_t v9 = *(void *)(a2 + 64);
    if (*(unsigned char *)(v9 + 248) && (v10 = *(uint64_t **)(v9 + 80), (uint64_t v11 = *(void *)(v9 + 88) - (void)v10) != 0))
    {
      uint64_t v8 = 0;
      unint64_t v12 = v11 >> 3;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        uint64_t v13 = *v10++;
        v8 += v13;
        --v12;
      }
      while (v12);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = v8;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::~operator_impl(void *a1)
{
  *a1 = &unk_26D769008;
  int v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::~operator_impl(void *a1)
{
  *a1 = &unk_26D769008;
  int v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::type()
{
  return 6;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const&,void>((uint64_t *)(a1 + 64), v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 85 || v4 == 82)
  {
    *(unsigned char *)(a1 + 32) = turi::query_eval::query_context::should_skip(this);
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 16) = v5;
  }
  else
  {
    if (v4) {
      return;
    }
    if (!*(void *)(a1 + 96)) {
      turi::sarray<turi::flexible_type>::get_reader(*(void *)(a1 + 64));
    }
    *(void *)(a1 + 16) = *(void *)(a1 + 80);
    *(void *)(a1 + 24) = *(void *)this;
    *(unsigned char *)(a1 + 32) = turi::query_eval::query_context::should_skip(this);
    uint64_t v5 = *(void *)(a1 + 16);
  }
  if (v5 == *(void *)(a1 + 88))
  {
    int v6 = 0;
  }
  else
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v10);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 56);
    *(_OWORD *)(a1 + 48) = v10;
    long long v10 = 0uLL;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 88) >= (unint64_t)(*(void *)(a1 + 24) + v8)) {
      uint64_t v9 = *(void *)(a1 + 24) + v8;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 88);
    }
    *(void *)(a1 + 40) = v9;
    if (*(unsigned char *)(a1 + 32))
    {
      long long v10 = 0uLL;
      turi::query_eval::query_context::emit((uint64_t)this, &v10);
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
      int v6 = 85;
    }
    else
    {
      (*(void (**)(void))(**(void **)(*(void *)(a1 + 96) + 8) + 80))(*(void *)(*(void *)(a1 + 96) + 8));
      turi::query_eval::query_context::emit((uint64_t)this, (long long *)(a1 + 48));
      int v6 = 82;
    }
  }
  *(_DWORD *)(a1 + 8) = v6;
}

void sub_224027410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    turi::gl_sarray::ensure_has_sarray_reader(a9);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x88uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224027488(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::sarray<turi::flexible_type>> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D768FB8;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::shared_ptr<turi::sarray<turi::flexible_type>> const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2240274F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>,std::shared_ptr<turi::sarray<turi::flexible_type>> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)a2 = &unk_26D769008;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 64) = v4;
  *(void *)(a2 + 72) = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *(void *)(a2 + 64);
  }
  *(void *)(a2 + 80) = 0;
  if (*(unsigned char *)(v4 + 248) && (v5 = *(uint64_t **)(v4 + 80), (uint64_t v6 = *(void *)(v4 + 88) - (void)v5) != 0))
  {
    uint64_t v7 = 0;
    unint64_t v8 = v6 >> 3;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      uint64_t v9 = *v5++;
      v7 += v9;
      --v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = v7;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(_DWORD **a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LODWORD(__str) = **a1;
  if (__str != 7)
  {
    __p[0] = &__str;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
  uint64_t v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 8), (const void **)__p);
  if (v53 < 0) {
    operator delete(__p[0]);
  }
  if (!v5) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  uint64_t v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "sframe");
  uint64_t v7 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v6 + 8), (const void **)&__str);
  turi::sframe::sframe((turi::sframe *)__p, (const turi::sframe *)(*(void *)v7 + 8));
  if (SBYTE7(__str_16) < 0) {
    operator delete((void *)__str);
  }
  uint64_t v45 = 0;
  unint64_t v8 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v43, "begin_index");
  uint64_t v9 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v8 + 2), (const void **)v43);
  uint64_t v10 = 0;
  switch(v9[12])
  {
    case 0:
      uint64_t v10 = *(void *)v9;
      goto LABEL_31;
    case 1:
      uint64_t v10 = (uint64_t)*(double *)v9;
      goto LABEL_31;
    case 2:
      uint64_t v12 = *(void *)v9;
      uint64_t v13 = (char **)(*(void *)v9 + 8);
      size_t __idx = 0;
      uint64_t v14 = (char *)v13;
      if (*(char *)(v12 + 31) < 0) {
        uint64_t v14 = *v13;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, v14);
      uint64_t v10 = std::stoll((const std::string *)&__str, &__idx, 10);
      if (SBYTE7(__str_16) < 0) {
        operator delete((void *)__str);
      }
      if (*(char *)(v12 + 31) < 0) {
        uint64_t v15 = *(void *)(v12 + 16);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(v12 + 31);
      }
      if (__idx != v15)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v37 = std::string::append(&v50, " cannot be interpreted as an integer");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        *(void *)&long long __str_16 = *((void *)&v37->__r_.__value_.__l + 2);
        long long __str = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__str);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_31;
    case 3:
      uint64_t v11 = *(void *)v9;
      *(void *)&long long __str_16 = 0;
      long long __str = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v11 + 8), *(void *)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)__str)
      {
        *((void *)&__str + 1) = __str;
        operator delete((void *)__str);
      }
      goto LABEL_30;
    case 4:
      uint64_t v16 = *(void *)v9;
      *(void *)&long long __str_16 = 0;
      long long __str = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      goto LABEL_30;
    case 5:
      uint64_t v17 = *(void *)v9;
      *(void *)&long long __str_16 = 0;
      long long __str = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
      goto LABEL_30;
    case 6:
      uint64_t v10 = (uint64_t)(*(void *)v9 << 8) >> 8;
      goto LABEL_31;
    case 7:
      goto LABEL_31;
    case 8:
      uint64_t v18 = *(void *)v9;
      uint64_t v19 = *(void *)(*(void *)v9 + 16);
      *(void *)&long long __str = *(void *)(*(void *)v9 + 8);
      *((void *)&__str + 1) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 1u, memory_order_relaxed);
      }
      long long v20 = *(_OWORD *)(v18 + 24);
      long long v21 = *(_OWORD *)(v18 + 56);
      long long v48 = *(_OWORD *)(v18 + 40);
      long long v49 = v21;
      long long __str_16 = v20;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__str + 1);
      goto LABEL_30;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)v9 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v48 + 1))
      {
        *(void *)&long long v49 = *((void *)&v48 + 1);
        operator delete(*((void **)&v48 + 1));
      }
      if ((void)__str_16)
      {
        *((void *)&__str_16 + 1) = __str_16;
        operator delete((void *)__str_16);
      }
      if (*((void *)&__str + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
      }
LABEL_30:
      uint64_t v10 = 0;
LABEL_31:
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      uint64_t v45 = v10;
      uint64_t v42 = 0;
      long long v22 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v43, "end_index");
      long long v23 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v22 + 2), (const void **)v43);
      uint64_t v24 = 0;
      switch(v23[12])
      {
        case 0:
          uint64_t v24 = *(void *)v23;
          goto LABEL_57;
        case 1:
          uint64_t v24 = (uint64_t)*(double *)v23;
          goto LABEL_57;
        case 2:
          uint64_t v26 = *(void *)v23;
          int v27 = (char **)(*(void *)v23 + 8);
          size_t __idx = 0;
          uint64_t v28 = (char *)v27;
          if (*(char *)(v26 + 31) < 0) {
            uint64_t v28 = *v27;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v28);
          uint64_t v24 = std::stoll((const std::string *)&__str, &__idx, 10);
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
          if (*(char *)(v26 + 31) < 0) {
            uint64_t v29 = *(void *)(v26 + 16);
          }
          else {
            uint64_t v29 = *(unsigned __int8 *)(v26 + 31);
          }
          if (__idx != v29)
          {
            uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            long long v40 = std::string::append(&v50, " cannot be interpreted as an integer");
            long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
            *(void *)&long long __str_16 = *((void *)&v40->__r_.__value_.__l + 2);
            long long __str = v41;
            v40->__r_.__value_.__l.__size_ = 0;
            v40->__r_.__value_.__r.__words[2] = 0;
            v40->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v39, (const std::string *)&__str);
            __cxa_throw(v39, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_57;
        case 3:
          uint64_t v25 = *(void *)v23;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v25 + 8), *(void *)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((void)__str)
          {
            *((void *)&__str + 1) = __str;
            operator delete((void *)__str);
          }
          goto LABEL_56;
        case 4:
          uint64_t v30 = *(void *)v23;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(void *)(v30 + 16) - *(void *)(v30 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
          goto LABEL_56;
        case 5:
          uint64_t v31 = *(void *)v23;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v50);
          goto LABEL_56;
        case 6:
          uint64_t v24 = (uint64_t)(*(void *)v23 << 8) >> 8;
          goto LABEL_57;
        case 7:
          goto LABEL_57;
        case 8:
          uint64_t v32 = *(void *)v23;
          uint64_t v33 = *(void *)(*(void *)v23 + 16);
          *(void *)&long long __str = *(void *)(*(void *)v23 + 8);
          *((void *)&__str + 1) = v33;
          if (v33) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v33 + 8), 1u, memory_order_relaxed);
          }
          long long v34 = *(_OWORD *)(v32 + 24);
          long long v35 = *(_OWORD *)(v32 + 56);
          long long v48 = *(_OWORD *)(v32 + 40);
          long long v49 = v35;
          long long __str_16 = v34;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__str + 1);
          goto LABEL_56;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)v23 + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v48 + 1))
          {
            *(void *)&long long v49 = *((void *)&v48 + 1);
            operator delete(*((void **)&v48 + 1));
          }
          if ((void)__str_16)
          {
            *((void *)&__str_16 + 1) = __str_16;
            operator delete((void *)__str_16);
          }
          if (*((void *)&__str + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
          }
LABEL_56:
          uint64_t v24 = 0;
LABEL_57:
          if (v44 < 0) {
            operator delete(v43[0]);
          }
          uint64_t v42 = v24;
          std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,turi::sframe &,unsigned long &,unsigned long &,void>((turi::sframe *)__p, &v45, &v42, &__str);
          *a2 = __str;
          turi::sframe::~sframe((turi::sframe *)__p);
          break;
        default:
          goto LABEL_68;
      }
      break;
    default:
LABEL_68:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_224027C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a36 < 0)
  {
    operator delete(a31);
    if ((v44 & 1) == 0)
    {
LABEL_8:
      if (a16 < 0) {
        operator delete(a11);
      }
      turi::sframe::~sframe((turi::sframe *)&a38);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v43);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::SFRAME_SOURCE_NODE", 42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", "operator()", 120, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224027FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", 119);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"sframe\")", 46);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/sframe_source.hpp", "operator()", 122, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240281C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,turi::sframe &,unsigned long &,unsigned long &,void>@<X0>(turi::sframe *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0x1A0uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__shared_ptr_emplace[abi:ne180100]<turi::sframe &,unsigned long &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_224028328(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__shared_ptr_emplace[abi:ne180100]<turi::sframe &,unsigned long &,unsigned long &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,0>(void *a1, turi::sframe *a2, uint64_t *a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D769068;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,turi::sframe &,unsigned long &,unsigned long &>((int)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_2240283A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,turi::sframe &,unsigned long &,unsigned long &>(int a1, uint64_t a2, turi::sframe *a3, uint64_t *a4, uint64_t *a5)
{
  v10[37] = *MEMORY[0x263EF8340];
  turi::sframe::sframe((turi::sframe *)v10, a3);
  uint64_t v8 = *a4;
  uint64_t v9 = *a5;
  *(void *)a2 = &unk_26D7690B8;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  turi::sframe::sframe((turi::sframe *)(a2 + 64), (const turi::sframe *)v10);
  *(void *)(a2 + 360) = v8;
  if (v9 == -1)
  {
    if (*(unsigned char *)(a2 + 352)) {
      uint64_t v9 = *(void *)(a2 + 96);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 368) = v9;
  turi::sframe::~sframe((turi::sframe *)v10);
}

void sub_224028534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 32);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  turi::sframe::~sframe((turi::sframe *)&a9);
  _Unwind_Resume(a1);
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::~operator_impl(void *a1)
{
  *a1 = &unk_26D7690B8;
  int v2 = (std::__shared_weak_count *)a1[48];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  turi::sframe::~sframe((turi::sframe *)(a1 + 8));
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::~operator_impl(void *a1)
{
  *a1 = &unk_26D7690B8;
  int v2 = (std::__shared_weak_count *)a1[48];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  turi::sframe::~sframe((turi::sframe *)(a1 + 8));
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::type()
{
  return 7;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,turi::sframe const&,void>((turi::sframe *)(a1 + 64), v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::execute(uint64_t a1, turi::query_eval::query_context *this)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 == 82 || v4 == 79)
  {
    *(unsigned char *)(a1 + 48) = turi::query_eval::query_context::should_skip(this);
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 16) = v5;
  }
  else
  {
    if (v4) {
      return;
    }
    if (!*(void *)(a1 + 376)) {
      turi::sframe::get_reader((turi::sframe *)(a1 + 64));
    }
    *(void *)(a1 + 16) = *(void *)(a1 + 360);
    *(void *)(a1 + 40) = *(void *)this;
    *(unsigned char *)(a1 + 48) = turi::query_eval::query_context::should_skip(this);
    uint64_t v5 = *(void *)(a1 + 16);
  }
  if (v5 == *(void *)(a1 + 368))
  {
    int v6 = 0;
  }
  else
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v10);
    char v7 = *(std::__shared_weak_count **)(a1 + 32);
    *(_OWORD *)(a1 + 24) = v10;
    long long v10 = 0uLL;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
    }
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 368) >= (unint64_t)(*(void *)(a1 + 40) + v8)) {
      uint64_t v9 = *(void *)(a1 + 40) + v8;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 368);
    }
    *(void *)(a1 + 56) = v9;
    if (*(unsigned char *)(a1 + 48))
    {
      long long v10 = 0uLL;
      turi::query_eval::query_context::emit((uint64_t)this, &v10);
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
      int v6 = 82;
    }
    else
    {
      turi::sframe_reader::read_rows(*(turi::sframe_reader **)(a1 + 376), v8, v9, *(turi::sframe_rows **)(a1 + 24));
      turi::query_eval::query_context::emit((uint64_t)this, (long long *)(a1 + 24));
      int v6 = 79;
    }
  }
  *(_DWORD *)(a1 + 8) = v6;
}

void sub_22402880C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9) {
    turi::gl_sframe::get_sframe_reader(a9);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,turi::sframe const&,void>@<X0>(turi::sframe *a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x1A0uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__shared_ptr_emplace[abi:ne180100]<turi::sframe const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224028884(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::__shared_ptr_emplace[abi:ne180100]<turi::sframe const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>,0>(void *a1, turi::sframe *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D769068;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,turi::sframe const&>((int)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2240288F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>,turi::sframe const&>(int a1, uint64_t a2, turi::sframe *a3)
{
  v5[37] = *MEMORY[0x263EF8340];
  turi::sframe::sframe((turi::sframe *)v5, a3);
  *(void *)a2 = &unk_26D7690B8;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(unsigned char *)(a2 + 48) = 0;
  turi::sframe::sframe((turi::sframe *)(a2 + 64), (const turi::sframe *)v5);
  *(void *)(a2 + 360) = 0;
  if (*(unsigned char *)(a2 + 352)) {
    uint64_t v4 = *(void *)(a2 + 96);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 368) = v4;
  turi::sframe::~sframe((turi::sframe *)v5);
}

void sub_2240289D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 32);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  turi::sframe::~sframe((turi::sframe *)&a9);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::sframe_reader>::operator=[abi:ne180100]<turi::sframe_reader,std::default_delete<turi::sframe_reader>,void>()
{
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  v53[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = (_DWORD *)*a1;
  LODWORD(v53[0]) = *(_DWORD *)*a1;
  if (LODWORD(v53[0]) != 8)
  {
    __p[0] = v53;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = *((void *)v3 + 8) - *((void *)v3 + 7);
  __p[0] = (void *)(v4 >> 4);
  if (v4 != 16)
  {
    v53[0] = __p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 2), (const void **)__p);
  if (SBYTE7(v48) < 0) {
    operator delete(__p[0]);
  }
  if (!v6) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  }
  char v7 = (_DWORD *)*a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "function");
  uint64_t v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v7 + 8), (const void **)__p);
  if (SBYTE7(v48) < 0) {
    operator delete(__p[0]);
  }
  if (!v8) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  }
  v53[3] = 0;
  char v46 = 0;
  uint64_t v9 = (uint64_t **)*a1;
  std::string::basic_string[abi:ne180100]<0>(v44, "output_type");
  __p[0] = v44;
  long long v10 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 1, (const void **)v44, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  LOBYTE(v11) = 0;
  switch(*((unsigned char *)v10 + 68))
  {
    case 0:
      uint64_t v11 = *((void *)v10 + 7);
      goto LABEL_33;
    case 1:
      uint64_t v11 = (uint64_t)*((double *)v10 + 7);
      goto LABEL_33;
    case 2:
      uint64_t v13 = *((void *)v10 + 7);
      size_t __idx = 0;
      uint64_t v14 = (char *)(v13 + 8);
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v14 = *(char **)(v13 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v14);
      LOBYTE(v11) = std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v48) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v15 = *(void *)(v13 + 16);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(v13 + 31);
      }
      if (__idx != v15)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v38 = std::string::append(&v51, " cannot be interpreted as an integer");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        *(void *)&long long v48 = *((void *)&v38->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_33;
    case 3:
      uint64_t v12 = *((void *)v10 + 7);
      __p[1] = 0;
      *(void *)&long long v48 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v12 + 8), *(void *)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_32;
    case 4:
      uint64_t v16 = *((void *)v10 + 7);
      __p[1] = 0;
      *(void *)&long long v48 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
      goto LABEL_32;
    case 5:
      uint64_t v17 = *((void *)v10 + 7);
      __p[1] = 0;
      *(void *)&long long v48 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
      goto LABEL_32;
    case 6:
      uint64_t v11 = (uint64_t)(*((void *)v10 + 7) << 8) >> 8;
      goto LABEL_33;
    case 7:
      goto LABEL_33;
    case 8:
      uint64_t v18 = *((void *)v10 + 7);
      uint64_t v19 = *(atomic_uint **)(v18 + 16);
      __p[0] = *(void **)(v18 + 8);
      __p[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit(v19 + 2, 1u, memory_order_relaxed);
      }
      long long v20 = *(_OWORD *)(v18 + 24);
      long long v21 = *(_OWORD *)(v18 + 56);
      long long v49 = *(_OWORD *)(v18 + 40);
      long long v50 = v21;
      long long v48 = v20;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_32;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v10 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v49 + 1))
      {
        *(void *)&long long v50 = *((void *)&v49 + 1);
        operator delete(*((void **)&v49 + 1));
      }
      if ((void)v48)
      {
        *((void *)&v48 + 1) = v48;
        operator delete((void *)v48);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_32:
      LOBYTE(v11) = 0;
LABEL_33:
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      char v46 = v11;
      long long v22 = (uint64_t **)*a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "function");
      v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      long long v23 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 4, (const void **)__p, (uint64_t)&std::piecewise_construct, &v51);
      std::function<turi::flexible_type ()(turi::sframe_rows::row const&)>::operator=(v53, *((void *)v23 + 7) + 8);
      if (SBYTE7(v48) < 0) {
        operator delete(__p[0]);
      }
      int v43 = 0;
      uint64_t v25 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v44, "random_seed");
      __p[0] = v44;
      uint64_t v24 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v25 + 8), (const void **)v44, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      LODWORD(v25) = 0;
      switch(*((unsigned char *)v24 + 68))
      {
        case 0:
          uint64_t v25 = *((void *)v24 + 7);
          goto LABEL_61;
        case 1:
          uint64_t v25 = (uint64_t)*((double *)v24 + 7);
          goto LABEL_61;
        case 2:
          uint64_t v27 = *((void *)v24 + 7);
          size_t __idx = 0;
          uint64_t v28 = (char *)(v27 + 8);
          if (*(char *)(v27 + 31) < 0) {
            uint64_t v28 = *(char **)(v27 + 8);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v28);
          LODWORD(v25) = std::stoll((const std::string *)__p, &__idx, 10);
          if (SBYTE7(v48) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v27 + 31) < 0) {
            uint64_t v29 = *(void *)(v27 + 16);
          }
          else {
            uint64_t v29 = *(unsigned __int8 *)(v27 + 31);
          }
          if (__idx != v29)
          {
            long long v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            long long v41 = std::string::append(&v51, " cannot be interpreted as an integer");
            long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            *(void *)&long long v48 = *((void *)&v41->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v40, (const std::string *)__p);
            __cxa_throw(v40, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_61;
        case 3:
          uint64_t v26 = *((void *)v24 + 7);
          __p[1] = 0;
          *(void *)&long long v48 = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v26 + 8), *(void *)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_60;
        case 4:
          uint64_t v30 = *((void *)v24 + 7);
          __p[1] = 0;
          *(void *)&long long v48 = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(void *)(v30 + 16) - *(void *)(v30 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
          goto LABEL_60;
        case 5:
          uint64_t v31 = *((void *)v24 + 7);
          __p[1] = 0;
          *(void *)&long long v48 = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v51.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
          goto LABEL_60;
        case 6:
          uint64_t v25 = (uint64_t)(*((void *)v24 + 7) << 8) >> 8;
          goto LABEL_61;
        case 7:
          goto LABEL_61;
        case 8:
          uint64_t v32 = *((void *)v24 + 7);
          uint64_t v33 = *(atomic_uint **)(v32 + 16);
          __p[0] = *(void **)(v32 + 8);
          __p[1] = v33;
          if (v33) {
            atomic_fetch_add_explicit(v33 + 2, 1u, memory_order_relaxed);
          }
          long long v34 = *(_OWORD *)(v32 + 24);
          long long v35 = *(_OWORD *)(v32 + 56);
          long long v49 = *(_OWORD *)(v32 + 40);
          long long v50 = v35;
          long long v48 = v34;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          goto LABEL_60;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v24 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v49 + 1))
          {
            *(void *)&long long v50 = *((void *)&v49 + 1);
            operator delete(*((void **)&v49 + 1));
          }
          if ((void)v48)
          {
            *((void *)&v48 + 1) = v48;
            operator delete((void *)v48);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
LABEL_60:
          LODWORD(v25) = 0;
LABEL_61:
          if (v45 < 0) {
            operator delete(v44[0]);
          }
          int v43 = v25;
          std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&)> &,turi::flex_type_enum &,int &,void>((uint64_t)v53, &v46, &v43, __p);
          *a2 = *(_OWORD *)__p;
          uint64_t result = (uint64_t)std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](v53);
          break;
        default:
          goto LABEL_74;
      }
      break;
    default:
LABEL_74:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
  return result;
}

void sub_22402920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      if (a16 < 0) {
        operator delete(a11);
      }
      std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100]((void *)(v37 - 104));
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TRANSFORM_NODE", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224029560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240297F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240299F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", 115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"function\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/transform.hpp", "operator()", 113, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224029BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,std::function<turi::flexible_type ()(turi::sframe_rows::row const&)> &,turi::flex_type_enum &,int &,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = (char *)operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__shared_ptr_emplace[abi:ne180100]<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)> &,turi::flex_type_enum &,int &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,0>((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_224029D54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__shared_ptr_emplace[abi:ne180100]<std::function<turi::flexible_type ()(turi::sframe_rows::row const&)> &,turi::flex_type_enum &,int &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,0>(uint64_t a1, uint64_t a2, char *a3, int *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D769118;
  char v5 = *a3;
  uint64_t v6 = *a4;
  *(void *)(a1 + 24) = &unk_26D769168;
  *(_DWORD *)(a1 + 32) = 0;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::__value_func[abi:ne180100](a1 + 40, a2);
  *(unsigned char *)(a1 + 72) = v5;
  *(void *)(a1 + 80) = v6;
  return a1;
}

void sub_224029DF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769118;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769118;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::~operator_impl(void *a1)
{
  *a1 = &unk_26D769168;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::~operator_impl(void *a1)
{
  *a1 = &unk_26D769168;
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::~__value_func[abi:ne180100](a1 + 2);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::type()
{
  return 8;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8> const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  uint64_t v191 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 91)
  {
    if (v4) {
      return;
    }
    if (*(void *)(a1 + 56) != -1)
    {
      source = (turi::thread *)turi::random::get_source((turi::random *)a1);
      uint64_t v6 = *(void *)(a1 + 56);
      tls_data = turi::thread::get_tls_data(source);
      turi::random::generator::seed(source, *tls_data + v6);
    }
  }
  turi::query_eval::query_context::get_next(this, 0, &v177);
  uint64_t v8 = v177;
  if ((void)v177)
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v176);
    if (*(void *)v177 == *(void *)(v177 + 8) || (uint64_t v9 = **(void ***)v177) == 0) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = (uint64_t)(v9[1] - *v9) >> 4;
    }
    turi::sframe_rows::resize((turi::sframe_rows *)v176, 1uLL, v10);
    uint64_t v175 = 0;
    uint64_t v11 = (void ***)v176;
    if (!*(unsigned char *)(v176 + 24)) {
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v176);
    }
    for (uint64_t i = 0; ; ++i)
    {
      if (*(void *)v177 == *(void *)(v177 + 8))
      {
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = **(void **)v177;
        if (v13) {
          uint64_t v13 = (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 4;
        }
      }
      if (v175 == v13) {
        break;
      }
      uint64_t v14 = *(void *)(a1 + 40);
      if (!v14) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v14 + 48))(v190);
      int v16 = *(unsigned __int8 *)(a1 + 48);
      if (v16 == 7 || v190[12] == v16 || v190[12] == 7)
      {
        uint64_t v17 = ***v11 + 16 * i;
        if (v190 != (unsigned char *)v17)
        {
          switch(*(unsigned char *)(v17 + 12))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_57;
                }
                if (*((char *)v18 + 31) < 0) {
                  operator delete((void *)v18[1]);
                }
                atomic_ullong *volatile v19 = v18;
                uint64_t v20 = 0x1012C404EF22A49;
                goto LABEL_56;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v28 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_57;
                }
                uint64_t v29 = (void *)v28[1];
                if (v29)
                {
                  v28[2] = (atomic_ullong)v29;
                  operator delete(v29);
                }
                atomic_ullong *volatile v19 = v28;
                uint64_t v20 = 0x1080C409938AC02;
                goto LABEL_56;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_57;
                }
                *(void *)v178 = v22 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
                goto LABEL_51;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_57;
                }
                *(void *)v178 = v22 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
LABEL_51:
                atomic_ullong *volatile v19 = v22;
                uint64_t v20 = 0x1020C405E66F15BLL;
                goto LABEL_56;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v30 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_57;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v30 + 2);
                atomic_ullong *volatile v19 = v30;
                unsigned int v27 = -235920773;
                goto LABEL_55;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)v17;
                if (*(void *)v17)
                {
                  uint64_t v24 = (void *)v23[6];
                  if (v24)
                  {
                    v23[7] = (atomic_ullong)v24;
                    operator delete(v24);
                  }
                  uint64_t v25 = (void *)v23[3];
                  if (v25)
                  {
                    v23[4] = (atomic_ullong)v25;
                    operator delete(v25);
                  }
                  uint64_t v26 = (std::__shared_weak_count *)v23[2];
                  if (v26) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
                  }
                  atomic_ullong *volatile v19 = v23;
                  unsigned int v27 = 2071181815;
LABEL_55:
                  uint64_t v20 = v27 | 0x1030C4000000000;
LABEL_56:
                  MEMORY[0x22A614FA0](v19, v20);
                }
LABEL_57:
                *(void *)uint64_t v17 = 0;
              }
              break;
            default:
              break;
          }
          uint64_t v31 = *(void *)v190;
          *(void *)(v17 + 5) = *(void *)&v190[5];
          *(void *)uint64_t v17 = v31;
          LODWORD(v31) = v190[12];
          *(unsigned char *)(v17 + 12) = v190[12];
          switch((int)v31)
          {
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              atomic_fetch_add(*(atomic_ullong *volatile *)v17, 1uLL);
              break;
            default:
              break;
          }
        }
      }
      else
      {
        uint64_t v21 = 0;
        memset(v189, 0, 13);
        BYTE4(v189[1]) = v16;
        switch(v16)
        {
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            uint64_t v21 = 0x1900000000000000;
            v189[0] = (atomic_ullong *)0x1900000000000000;
            LODWORD(v189[1]) = 0;
            break;
          case 8:
            operator new();
          case 9:
            operator new();
          default:
            break;
        }
        switch(v190[12])
        {
          case 0:
            switch(BYTE4(v189[1]))
            {
              case 0:
                uint64_t v44 = *(void *)v190;
                goto LABEL_129;
              case 1:
                double v76 = (double)*(uint64_t *)v190;
                goto LABEL_266;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                v75 = v189[0];
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v178);
                std::ostream::operator<<();
                std::stringbuf::str();
                goto LABEL_242;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 6:
                v189[0] = (atomic_ullong *)(*(void *)v190 & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
                LODWORD(v189[1]) = 0;
                goto LABEL_320;
              case 7:
                goto LABEL_319;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              default:
                goto LABEL_463;
            }
          case 1:
            switch(BYTE4(v189[1]))
            {
              case 0:
                uint64_t v44 = (uint64_t)*(double *)v190;
                goto LABEL_129;
              case 1:
                double v76 = *(double *)v190;
                goto LABEL_266;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                v75 = v189[0];
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v178);
                std::ostream::operator<<();
                std::stringbuf::str();
LABEL_242:
                v77 = v75 + 1;
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v178);
                if (*((char *)v75 + 31) < 0) {
                  operator delete((void *)*v77);
                }
                long long v78 = v187;
                atomic_ullong v79 = v188;
                goto LABEL_283;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 6:
                int v80 = (int)((*(double *)v190 - (double)(uint64_t)floor(*(double *)v190)) * 1000000.0);
                if (v80 >= 999999) {
                  int v80 = 999999;
                }
                if (v80 >= 0xF4240) {
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                }
                v189[0] = (atomic_ullong *)(vcvtmd_s64_f64(*(double *)v190) & 0xFFFFFFFFFFFFFFLL | 0x5900000000000000);
                LODWORD(v189[1]) = v80;
                goto LABEL_320;
              case 7:
                goto LABEL_319;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              default:
                goto LABEL_463;
            }
          case 2:
            switch(BYTE4(v189[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_319;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                long long v49 = v189[0];
                if (*(char *)(*(void *)v190 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v178, *(const std::string::value_type **)(*(void *)v190 + 8), *(void *)(*(void *)v190 + 16));
                }
                else
                {
                  long long v50 = *(_OWORD *)(*(void *)v190 + 8);
                  *(void *)&v178[16] = *(void *)(*(void *)v190 + 24);
                  *(_OWORD *)v178 = v50;
                }
                goto LABEL_406;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              default:
                goto LABEL_463;
            }
          case 3:
            std::string v51 = (char **)(*(void *)v190 + 8);
            switch(BYTE4(v189[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_319;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                char v46 = v189[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v187, (void *)(*(void *)v190 + 8));
                goto LABEL_134;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                if (v189[0] == *(atomic_ullong **)v190) {
                  goto LABEL_320;
                }
                uint64_t v54 = (char *)(v189[0] + 1);
                v60 = (uint64_t *)(*(void *)v190 + 16);
                break;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<std::__wrap_iter<double const*>,std::__wrap_iter<double const*>>((char **)v189[0] + 1, *(void **)(*(void *)v190 + 8), *(void **)(*(void *)v190 + 16), (uint64_t)(*(void *)(*(void *)v190 + 16) - *(void *)(*(void *)v190 + 8)) >> 3);
                goto LABEL_320;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                v68 = v189[0];
                long long v187 = 0uLL;
                atomic_ullong v188 = 0;
                v184 = 0;
                v185 = 0;
                uint64_t v186 = 0;
                std::allocate_shared[abi:ne180100]<std::vector<double>,std::allocator<std::vector<double>>,std::vector<double> const&,void>(*(void *)v190 + 8, &v181);
                turi::flexible_type_impl::ndarray<double>::ndarray(v178, &v181, (uint64_t)&v187, (uint64_t)&v184, 0);
                if (v182) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v182);
                }
                if (v184)
                {
                  v185 = v184;
                  operator delete(v184);
                }
                if ((void)v187)
                {
                  *((void *)&v187 + 1) = v187;
                  operator delete((void *)v187);
                }
                long long v69 = *(_OWORD *)v178;
                *(_OWORD *)v178 = 0uLL;
                v70 = (std::__shared_weak_count *)v68[2];
                *(_OWORD *)(v68 + 1) = v69;
                if (v70) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v70);
                }
                v71 = (void *)v68[3];
                if (v71)
                {
                  v68[4] = (atomic_ullong)v71;
                  operator delete(v71);
                  v68[3] = 0;
                  v68[4] = 0;
                  v68[5] = 0;
                }
                v72 = (void *)v68[6];
                *(_OWORD *)(v68 + 3) = *(_OWORD *)&v178[16];
                v68[5] = *(void *)v179;
                *(_OWORD *)&v178[16] = 0uLL;
                *(void *)v179 = 0;
                if (v72)
                {
                  v68[7] = (atomic_ullong)v72;
                  operator delete(v72);
                  v68[6] = 0;
                  v68[7] = 0;
                  v68[8] = 0;
                }
                *((_OWORD *)v68 + 3) = *(_OWORD *)&v179[8];
                v68[8] = *(void *)&v179[24];
                memset(&v179[8], 0, 24);
                v68[9] = v180;
                goto LABEL_449;
              default:
                goto LABEL_463;
            }
LABEL_166:
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v54, *v51, *v60, (*v60 - (uint64_t)*v51) >> 3);
            goto LABEL_320;
          case 4:
            char v45 = (uint64_t *)(*(void *)v190 + 8);
            switch(BYTE4(v189[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_319;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                char v46 = v189[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v187, v45);
                goto LABEL_134;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                turi::flexible_type_impl::soft_assignment_visitor::operator()((uint64_t)v178, v189[0] + 1, v45);
                goto LABEL_320;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                if (v189[0] != *(atomic_ullong **)v190) {
                  std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)(v189[0] + 1), *(uint64_t **)(*(void *)v190 + 8), *(uint64_t **)(*(void *)v190 + 16), (uint64_t)(*(void *)(*(void *)v190 + 16) - *(void *)(*(void *)v190 + 8)) >> 4);
                }
                goto LABEL_320;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                char v61 = v189[0];
                atomic_ullong v188 = 0;
                long long v187 = 0uLL;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v187, *(uint64_t **)(*(void *)v190 + 8), *(uint64_t **)(*(void *)v190 + 16), (uint64_t)(*(void *)(*(void *)v190 + 16) - *(void *)(*(void *)v190 + 8)) >> 4);
                turi::flexible_type_impl::get_ndvec_visitor::operator()((uint64_t *)&v187, v178);
                long long v62 = *(_OWORD *)v178;
                *(_OWORD *)v178 = 0uLL;
                long long v63 = (std::__shared_weak_count *)v61[2];
                *(_OWORD *)(v61 + 1) = v62;
                if (v63) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v63);
                }
                long long v64 = (void *)v61[3];
                if (v64)
                {
                  v61[4] = (atomic_ullong)v64;
                  operator delete(v64);
                  v61[3] = 0;
                  v61[4] = 0;
                  v61[5] = 0;
                }
                long long v65 = (void *)v61[6];
                *(_OWORD *)(v61 + 3) = *(_OWORD *)&v178[16];
                v61[5] = *(void *)v179;
                *(_OWORD *)&v178[16] = 0uLL;
                *(void *)v179 = 0;
                if (v65)
                {
                  v61[7] = (atomic_ullong)v65;
                  operator delete(v65);
                  v61[6] = 0;
                  v61[7] = 0;
                  v61[8] = 0;
                }
                *((_OWORD *)v61 + 3) = *(_OWORD *)&v179[8];
                v61[8] = *(void *)&v179[24];
                memset(&v179[8], 0, 24);
                v61[9] = v180;
                turi::flexible_type_impl::ndarray<double>::~ndarray(v178);
                v184 = (void **)&v187;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v184);
                goto LABEL_320;
              default:
                goto LABEL_463;
            }
          case 5:
            switch(BYTE4(v189[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_319;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                long long v49 = v189[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v187, (void *)(*(void *)v190 + 8));
                goto LABEL_406;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                if (v189[0] != *(atomic_ullong **)v190) {
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__assign_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>((char **)v189[0] + 1, *(uint64_t **)(*(void *)v190 + 8), *(uint64_t **)(*(void *)v190 + 16), (uint64_t)(*(void *)(*(void *)v190 + 16) - *(void *)(*(void *)v190 + 8)) >> 5);
                }
                goto LABEL_320;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              default:
                goto LABEL_463;
            }
          case 6:
            switch(BYTE4(v189[1]))
            {
              case 0:
                uint64_t v44 = (uint64_t)(*(void *)v190 << 8) >> 8;
                goto LABEL_129;
              case 1:
                double v76 = (double)*(int *)&v190[8] / 1000000.0 + (double)((uint64_t)(*(void *)v190 << 8) >> 8);
LABEL_266:
                v189[0] = *(atomic_ullong **)&v76;
                goto LABEL_320;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                v91 = v189[0];
                *(void *)&long long v187 = *(void *)v190;
                DWORD2(v187) = *(_DWORD *)&v190[8];
                turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v187, (std::string *)v178);
                v77 = v91 + 1;
                if (*((char *)v91 + 31) < 0) {
                  operator delete((void *)*v77);
                }
                long long v78 = *(_OWORD *)v178;
                atomic_ullong v79 = *(void *)&v178[16];
LABEL_283:
                v77[2] = v79;
                *(_OWORD *)v77 = v78;
                goto LABEL_320;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 6:
                v189[0] = *(atomic_ullong **)v190;
                LODWORD(v189[1]) = *(_DWORD *)&v190[8];
                goto LABEL_320;
              case 7:
                goto LABEL_319;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              default:
                goto LABEL_463;
            }
          case 7:
            switch(BYTE4(v189[1]))
            {
              case 0:
              case 6:
                goto LABEL_319;
              case 1:
                uint64_t v44 = 0x7FF8000000000000;
LABEL_129:
                v189[0] = (atomic_ullong *)v44;
                goto LABEL_320;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                v67 = v189[0] + 1;
                if (*((char *)v189[0] + 31) < 0) {
                  operator delete((void *)*v67);
                }
                atomic_ullong *v67 = 0;
                v67[1] = 0;
                v67[2] = 0;
                goto LABEL_320;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 7:
                goto LABEL_320;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              default:
                goto LABEL_463;
            }
          case 8:
            long long v52 = (uint64_t *)(*(void *)v190 + 8);
            switch(BYTE4(v189[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_319;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                char v46 = v189[0];
                turi::flexible_type_impl::get_string_visitor::operator()();
LABEL_134:
                char v53 = v46 + 1;
                if (*((char *)v46 + 31) < 0) {
                  goto LABEL_407;
                }
                goto LABEL_408;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                v73 = v189[0];
                turi::flexible_type_impl::get_vec_visitor::operator()(v52, (double **)v178, v15);
                v74 = (void *)v73[1];
                if (v74)
                {
                  v73[2] = (atomic_ullong)v74;
                  operator delete(v74);
                  v73[1] = 0;
                  v73[2] = 0;
                  v73[3] = 0;
                }
                *(_OWORD *)(v73 + 1) = *(_OWORD *)v178;
                v73[3] = *(void *)&v178[16];
                goto LABEL_320;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                v86 = v189[0];
                turi::flexible_type_impl::get_ndvec_visitor::operator()(v52, v178, v15);
                long long v87 = *(_OWORD *)v178;
                *(_OWORD *)v178 = 0uLL;
                v88 = (std::__shared_weak_count *)v86[2];
                *(_OWORD *)(v86 + 1) = v87;
                if (v88) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v88);
                }
                v89 = (void *)v86[3];
                if (v89)
                {
                  v86[4] = (atomic_ullong)v89;
                  operator delete(v89);
                  v86[3] = 0;
                  v86[4] = 0;
                  v86[5] = 0;
                }
                v90 = (void *)v86[6];
                *(_OWORD *)(v86 + 3) = *(_OWORD *)&v178[16];
                v86[5] = *(void *)v179;
                *(_OWORD *)&v178[16] = 0uLL;
                *(void *)v179 = 0;
                if (v90)
                {
                  v86[7] = (atomic_ullong)v90;
                  operator delete(v90);
                  v86[6] = 0;
                  v86[7] = 0;
                  v86[8] = 0;
                }
                *((_OWORD *)v86 + 3) = *(_OWORD *)&v179[8];
                v86[8] = *(void *)&v179[24];
                memset(&v179[8], 0, 24);
                v86[9] = v180;
                goto LABEL_449;
              default:
                goto LABEL_463;
            }
          case 9:
            uint64_t v47 = *(void *)v190;
            long long v48 = (char ***)(*(void *)v190 + 8);
            switch(BYTE4(v189[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_319;
              case 2:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                long long v49 = v189[0];
                turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&v187, v48);
LABEL_406:
                char v53 = v49 + 1;
                if (*((char *)v49 + 31) < 0) {
LABEL_407:
                }
                  operator delete((void *)*v53);
LABEL_408:
                long long v123 = *(_OWORD *)v178;
                v53[2] = *(void *)&v178[16];
                *(_OWORD *)char v53 = v123;
                goto LABEL_320;
              case 3:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                uint64_t v54 = (char *)(v189[0] + 1);
                uint64_t v55 = *(void *)(*(void *)v190 + 72);
                if (v55) {
                  goto LABEL_389;
                }
                v57 = *(uint64_t **)(*(void *)v190 + 24);
                long long v56 = *(uint64_t **)(*(void *)v190 + 32);
                long long v58 = *(void **)(*(void *)v190 + 8);
                if (v56 != v57 && v58)
                {
                  uint64_t v55 = 1;
                  do
                  {
                    uint64_t v59 = *v57++;
                    v55 *= v59;
                  }
                  while (v57 != v56);
                }
                if (v55 != (uint64_t)(v58[1] - *v58) >> 3
                  || turi::flexible_type_impl::ndarray<double>::last_index((void *)(*(void *)v190 + 8)) != ((*v48)[1] - **v48) >> 3)
                {
LABEL_389:
                  if (!turi::flexible_type_impl::ndarray<double>::is_valid((void *)(v47 + 8))) {
                    turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
                  }
                  if (turi::flexible_type_impl::ndarray<double>::is_full((void *)(v47 + 8)))
                  {
                    turi::flexible_type_impl::ndarray<double>::ndarray(v178, v47 + 8);
                  }
                  else
                  {
                    long long v187 = 0uLL;
                    atomic_ullong v188 = 0;
                    v184 = 0;
                    v185 = 0;
                    uint64_t v186 = 0;
                    v181 = 0;
                    v182 = 0;
                    uint64_t v183 = 0;
                    turi::flexible_type_impl::ndarray<double>::ndarray(v178, (uint64_t)&v187, (uint64_t)&v184, (uint64_t)&v181, 0);
                    if (v181)
                    {
                      v182 = v181;
                      operator delete(v181);
                    }
                    if (v184)
                    {
                      v185 = v184;
                      operator delete(v184);
                    }
                    if ((void)v187)
                    {
                      *((void *)&v187 + 1) = v187;
                      operator delete((void *)v187);
                    }
                    atomic_ullong v180 = 0;
                    if (&v178[16] != (unsigned char *)(v47 + 24)) {
                      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v178[16], *(char **)(v47 + 24), *(void *)(v47 + 32), (uint64_t)(*(void *)(v47 + 32) - *(void *)(v47 + 24)) >> 3);
                    }
                    v120 = *(uint64_t **)(v47 + 24);
                    v119 = *(uint64_t **)(v47 + 32);
                    if (v119 == v120 || !*v48)
                    {
                      unint64_t v121 = 0;
                    }
                    else
                    {
                      unint64_t v121 = 1;
                      do
                      {
                        uint64_t v122 = *v120++;
                        v121 *= v122;
                      }
                      while (v120 != v119);
                    }
                    std::vector<double>::resize(*(uint64_t *)v178, v121);
                    std::vector<unsigned long>::resize((uint64_t)&v179[8], (uint64_t)(*(void *)(v47 + 32) - *(void *)(v47 + 24)) >> 3);
                    if (*(void *)&v178[24] != *(void *)&v178[16]
                      && *(void *)(*(void *)v178 + 8) != **(void **)v178)
                    {
                      std::vector<std::pair<unsigned long,unsigned long>>::vector(&v187, (uint64_t)(*(void *)(v47 + 56) - *(void *)(v47 + 48)) >> 3);
                      uint64_t v124 = *(void *)(v47 + 48);
                      uint64_t v125 = *(void *)(v47 + 56);
                      v126 = (unint64_t *)v187;
                      uint64_t v127 = v125 - v124;
                      if (v125 != v124)
                      {
                        uint64_t v128 = 0;
                        unint64_t v129 = v127 >> 3;
                        if (v129 <= 1) {
                          unint64_t v129 = 1;
                        }
                        v130 = (void *)(v187 + 8);
                        do
                        {
                          *(v130 - 1) = *(void *)(v124 + 8 * v128);
                          void *v130 = v128++;
                          v130 += 2;
                        }
                        while (v129 != v128);
                      }
                      std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v187 + 1), *((unint64_t **)&v187 + 1), (uint64_t)v126, v126);
                      uint64_t v131 = v187;
                      uint64_t v132 = *(void *)&v179[8];
                      *(void *)(*(void *)&v179[8] + 8 * *(void *)(v187 + 8)) = 1;
                      uint64_t v133 = *(void *)(v47 + 56) - *(void *)(v47 + 48);
                      if ((unint64_t)v133 >= 9)
                      {
                        unint64_t v134 = v133 >> 3;
                        uint64_t v135 = *(void *)&v178[16];
                        if (v134 <= 2) {
                          unint64_t v134 = 2;
                        }
                        v136 = (uint64_t *)(v131 + 24);
                        unint64_t v137 = v134 - 1;
                        do
                        {
                          uint64_t v138 = *(void *)(v135 + 8 * *(v136 - 2)) * *(void *)(v132 + 8 * *(v136 - 2));
                          uint64_t v139 = *v136;
                          v136 += 2;
                          *(void *)(v132 + 8 * v139) = v138;
                          --v137;
                        }
                        while (v137);
                      }
                      unint64_t v140 = (uint64_t)(*(void *)(v47 + 32) - *(void *)(v47 + 24)) >> 3;
                      v181 = 0;
                      std::vector<unsigned long>::vector(&v184, v140, &v181);
                      v141 = v184;
                      v142 = v185;
                      uint64_t v143 = (char *)v185 - (char *)v184;
                      unint64_t v144 = v185 - v184;
                      unint64_t v145 = v144 - 1;
                      if (v144 <= 1) {
                        uint64_t v146 = 1;
                      }
                      else {
                        uint64_t v146 = v185 - v184;
                      }
                      v147 = *(uint64_t **)&v179[8];
                      uint64_t v148 = **(void **)v178;
                      do
                      {
                        if (v142 == v141)
                        {
                          uint64_t v156 = 0;
                          uint64_t v157 = *(void *)(**(void **)(v47 + 8) + 8 * *(void *)(v47 + 72));
                        }
                        else
                        {
                          uint64_t v149 = 0;
                          v150 = *(uint64_t **)(v47 + 48);
                          v151 = v141;
                          uint64_t v152 = v146;
                          do
                          {
                            uint64_t v154 = (uint64_t)*v151++;
                            uint64_t v153 = v154;
                            uint64_t v155 = *v150++;
                            v149 += v155 * v153;
                            --v152;
                          }
                          while (v152);
                          uint64_t v156 = 0;
                          uint64_t v157 = *(void *)(**(void **)(v47 + 8) + 8 * (*(void *)(v47 + 72) + v149));
                          v158 = v141;
                          v159 = v147;
                          uint64_t v160 = v146;
                          do
                          {
                            uint64_t v162 = (uint64_t)*v158++;
                            uint64_t v161 = v162;
                            uint64_t v163 = *v159++;
                            v156 += v163 * v161;
                            --v160;
                          }
                          while (v160);
                        }
                        *(void *)(v148 + 8 * v156) = v157;
                        uint64_t v164 = v142 - v141;
                        unint64_t v165 = v144 - 1;
                        if (v143 >= 1)
                        {
                          uint64_t v166 = *(void *)(v47 + 24);
                          unint64_t v167 = (unint64_t)v141[v145] + 1;
                          v141[v145] = (void *)v167;
                          if (v167 >= *(void *)(v166 + 8 * v145))
                          {
                            uint64_t v168 = v166 - 16;
                            uint64_t v169 = v142 - v141;
                            v170 = (unint64_t *)((char *)v141 + (v143 & 0xFFFFFFFFFFFFFFF8) - 16);
                            do
                            {
                              uint64_t v171 = v169 - 1;
                              v170[1] = 0;
                              if (v169 - 1 <= 0) {
                                goto LABEL_442;
                              }
                              unint64_t v172 = *v170 + 1;
                              *v170-- = v172;
                              unint64_t v173 = *(void *)(v168 + 8 * v169--);
                            }
                            while (v172 >= v173);
                            unint64_t v165 = v171 - 1;
                            uint64_t v164 = 1;
                          }
                          else
                          {
                            uint64_t v164 = 1;
                            unint64_t v165 = v144 - 1;
                          }
                        }
                      }
                      while ((v165 & 0x8000000000000000) == 0 && v164);
LABEL_442:
                      if (v141)
                      {
                        v185 = v141;
                        operator delete(v141);
                      }
                      if ((void)v187)
                      {
                        *((void *)&v187 + 1) = v187;
                        operator delete((void *)v187);
                      }
                    }
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)v178);
                  if (!turi::flexible_type_impl::ndarray<double>::is_full(v178)) {
                    turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
                  }
                  if (v54 != *(char **)v178) {
                    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v54, **(char ***)v178, *(void *)(*(void *)v178 + 8), (uint64_t)(*(void *)(*(void *)v178 + 8) - **(void **)v178) >> 3);
                  }
LABEL_449:
                  turi::flexible_type_impl::ndarray<double>::~ndarray(v178);
                  goto LABEL_320;
                }
                if (!turi::flexible_type_impl::ndarray<double>::is_full((void *)(v47 + 8))) {
                  turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
                }
                std::string v51 = *v48;
                if (v54 != (char *)*v48)
                {
                  v60 = (uint64_t *)(v51 + 1);
                  goto LABEL_166;
                }
LABEL_320:
                uint64_t v92 = ***v11 + 16 * i;
                if (v189 != (atomic_ullong **)v92)
                {
                  switch(*(unsigned char *)(v92 + 12))
                  {
                    case 2:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v93 = *(atomic_ullong *volatile *)v92;
                        if (!*(void *)v92) {
                          goto LABEL_353;
                        }
                        if (*((char *)v93 + 31) < 0) {
                          operator delete((void *)v93[1]);
                        }
                        atomic_ullong *volatile v94 = v93;
                        uint64_t v95 = 0x1012C404EF22A49;
                        goto LABEL_352;
                      }
                      break;
                    case 3:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v102 = *(atomic_ullong *volatile *)v92;
                        if (!*(void *)v92) {
                          goto LABEL_353;
                        }
                        v103 = (void *)v102[1];
                        if (v103)
                        {
                          v102[2] = (atomic_ullong)v103;
                          operator delete(v103);
                        }
                        atomic_ullong *volatile v94 = v102;
                        uint64_t v95 = 0x1080C409938AC02;
                        goto LABEL_352;
                      }
                      break;
                    case 4:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v96 = *(atomic_ullong *volatile *)v92;
                        if (!*(void *)v92) {
                          goto LABEL_353;
                        }
                        *(void *)v178 = v96 + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
                        goto LABEL_347;
                      }
                      break;
                    case 5:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v96 = *(atomic_ullong *volatile *)v92;
                        if (!*(void *)v92) {
                          goto LABEL_353;
                        }
                        *(void *)v178 = v96 + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
LABEL_347:
                        atomic_ullong *volatile v94 = v96;
                        uint64_t v95 = 0x1020C405E66F15BLL;
                        goto LABEL_352;
                      }
                      break;
                    case 8:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v104 = *(atomic_ullong *volatile *)v92;
                        if (!*(void *)v92) {
                          goto LABEL_353;
                        }
                        boost::detail::shared_count::~shared_count((atomic_uint **)v104 + 2);
                        atomic_ullong *volatile v94 = v104;
                        unsigned int v101 = -235920773;
                        goto LABEL_351;
                      }
                      break;
                    case 9:
                      if (atomic_fetch_add(*(atomic_ullong *volatile *)v92, 0xFFFFFFFFFFFFFFFFLL) == 1)
                      {
                        atomic_ullong *volatile v97 = *(atomic_ullong *volatile *)v92;
                        if (*(void *)v92)
                        {
                          v98 = (void *)v97[6];
                          if (v98)
                          {
                            v97[7] = (atomic_ullong)v98;
                            operator delete(v98);
                          }
                          v99 = (void *)v97[3];
                          if (v99)
                          {
                            v97[4] = (atomic_ullong)v99;
                            operator delete(v99);
                          }
                          v100 = (std::__shared_weak_count *)v97[2];
                          if (v100) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v100);
                          }
                          atomic_ullong *volatile v94 = v97;
                          unsigned int v101 = 2071181815;
LABEL_351:
                          uint64_t v95 = v101 | 0x1030C4000000000;
LABEL_352:
                          MEMORY[0x22A614FA0](v94, v95);
                        }
LABEL_353:
                        *(void *)uint64_t v92 = 0;
                      }
                      break;
                    default:
                      break;
                  }
                  v105 = v189[0];
                  *(atomic_ullong **)(v92 + 5) = *(atomic_ullong **)((char *)v189 + 5);
                  *(void *)uint64_t v92 = v105;
                  unsigned int v106 = BYTE4(v189[1]);
                  *(unsigned char *)(v92 + 12) = BYTE4(v189[1]);
                  if (v106 <= 9 && ((1 << v106) & 0x33C) != 0) {
                    atomic_fetch_add(*(atomic_ullong *volatile *)v92, 1uLL);
                  }
                }
                switch(BYTE4(v189[1]))
                {
                  case 2:
                    if (atomic_fetch_add(v189[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v107 = v189[0];
                      if (v189[0])
                      {
                        if (*((char *)v189[0] + 31) < 0) {
                          operator delete(*((void **)v189[0] + 1));
                        }
                        v108 = v107;
                        uint64_t v109 = 0x1012C404EF22A49;
                        goto LABEL_388;
                      }
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(v189[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v116 = v189[0];
                      if (v189[0])
                      {
                        v117 = (void *)v189[0][1];
                        if (v117)
                        {
                          v189[0][2] = (atomic_ullong)v117;
                          operator delete(v117);
                        }
                        v108 = v116;
                        uint64_t v109 = 0x1080C409938AC02;
                        goto LABEL_388;
                      }
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(v189[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v110 = v189[0];
                      if (v189[0])
                      {
                        *(void *)v178 = v189[0] + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
                        goto LABEL_383;
                      }
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(v189[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v110 = v189[0];
                      if (v189[0])
                      {
                        *(void *)v178 = v189[0] + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
LABEL_383:
                        v108 = v110;
                        uint64_t v109 = 0x1020C405E66F15BLL;
                        goto LABEL_388;
                      }
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(v189[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v118 = v189[0];
                      if (v189[0])
                      {
                        boost::detail::shared_count::~shared_count((atomic_uint **)v189[0] + 2);
                        v108 = v118;
                        unsigned int v115 = -235920773;
                        goto LABEL_387;
                      }
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(v189[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v111 = v189[0];
                      if (v189[0])
                      {
                        v112 = (void *)v189[0][6];
                        if (v112)
                        {
                          v189[0][7] = (atomic_ullong)v112;
                          operator delete(v112);
                        }
                        v113 = (void *)v111[3];
                        if (v113)
                        {
                          v111[4] = (atomic_ullong)v113;
                          operator delete(v113);
                        }
                        v114 = (std::__shared_weak_count *)v111[2];
                        if (v114) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v114);
                        }
                        v108 = v111;
                        unsigned int v115 = 2071181815;
LABEL_387:
                        uint64_t v109 = v115 | 0x1030C4000000000;
LABEL_388:
                        MEMORY[0x22A614FA0](v108, v109);
                      }
                    }
                    break;
                  default:
                    goto LABEL_60;
                }
                break;
              case 4:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                goto LABEL_319;
              case 5:
                if (*(void *)v21 != 1) {
                  operator new();
                }
LABEL_319:
                turi::flexible_type_fail(0);
                goto LABEL_320;
              case 8:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                v81 = v189[0];
                turi::flexible_type_impl::get_img_visitor::operator()(*(void *)v190 + 8, (turi::image_type *)v178);
                long long v82 = *(_OWORD *)v178;
                *(_OWORD *)v178 = 0uLL;
                long long v83 = *(_OWORD *)(v81 + 1);
                *(_OWORD *)(v81 + 1) = v82;
                long long v187 = v83;
                boost::detail::shared_count::~shared_count((atomic_uint **)&v187 + 1);
                long long v84 = *(_OWORD *)&v178[16];
                long long v85 = *(_OWORD *)v179;
                *(_OWORD *)(v81 + 7) = *(_OWORD *)&v179[16];
                *(_OWORD *)(v81 + 5) = v85;
                *(_OWORD *)(v81 + 3) = v84;
                boost::detail::shared_count::~shared_count((atomic_uint **)&v178[8]);
                goto LABEL_320;
              case 9:
                if (*(void *)v21 != 1) {
                  operator new();
                }
                std::string v66 = v189[0];
                std::shared_ptr<std::vector<double>>::operator=[abi:ne180100](v189[0] + 1, (uint64_t *)(*(void *)v190 + 8));
                if (v66 != (atomic_ullong *)v47)
                {
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v66 + 24, *(char **)(v47 + 24), *(void *)(v47 + 32), (uint64_t)(*(void *)(v47 + 32) - *(void *)(v47 + 24)) >> 3);
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v66 + 48, *(char **)(v47 + 48), *(void *)(v47 + 56), (uint64_t)(*(void *)(v47 + 56) - *(void *)(v47 + 48)) >> 3);
                }
                v66[9] = *(void *)(v47 + 72);
                goto LABEL_320;
              default:
                goto LABEL_463;
            }
            break;
          default:
LABEL_463:
            turi::flexible_type_fail(0);
            __break(1u);
            return;
        }
      }
LABEL_60:
      ++v175;
      switch(v190[12])
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v190, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v32 = *(void **)v190;
            if (*(void *)v190)
            {
              if (*(char *)(*(void *)v190 + 31) < 0) {
                operator delete(*(void **)(*(void *)v190 + 8));
              }
              uint64_t v33 = v32;
              uint64_t v34 = 0x1012C404EF22A49;
              goto LABEL_91;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v190, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            long long v41 = *(void **)v190;
            if (*(void *)v190)
            {
              long long v42 = *(void **)(*(void *)v190 + 8);
              if (v42)
              {
                *(void *)(*(void *)v190 + 16) = v42;
                operator delete(v42);
              }
              uint64_t v33 = v41;
              uint64_t v34 = 0x1080C409938AC02;
              goto LABEL_91;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v190, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            long long v35 = *(void **)v190;
            if (*(void *)v190)
            {
              *(void *)v178 = *(void *)v190 + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
              goto LABEL_86;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v190, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            long long v35 = *(void **)v190;
            if (*(void *)v190)
            {
              *(void *)v178 = *(void *)v190 + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v178);
LABEL_86:
              uint64_t v33 = v35;
              uint64_t v34 = 0x1020C405E66F15BLL;
              goto LABEL_91;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v190, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v43 = *(void **)v190;
            if (*(void *)v190)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)v190 + 16));
              uint64_t v33 = v43;
              unsigned int v40 = -235920773;
              goto LABEL_90;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v190, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v36 = *(void **)v190;
            if (*(void *)v190)
            {
              uint64_t v37 = *(void **)(*(void *)v190 + 48);
              if (v37)
              {
                *(void *)(*(void *)v190 + 56) = v37;
                operator delete(v37);
              }
              long long v38 = (void *)v36[3];
              if (v38)
              {
                v36[4] = v38;
                operator delete(v38);
              }
              long long v39 = (std::__shared_weak_count *)v36[2];
              if (v39) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
              }
              uint64_t v33 = v36;
              unsigned int v40 = 2071181815;
LABEL_90:
              uint64_t v34 = v40 | 0x1030C4000000000;
LABEL_91:
              MEMORY[0x22A614FA0](v33, v34);
            }
          }
          break;
        default:
          continue;
      }
    }
    turi::query_eval::query_context::emit((uint64_t)this, &v176);
    if (*((void *)&v176 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v176 + 1));
    }
  }
  if (*((void *)&v177 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v177 + 1));
  }
  if (v8) {
    int v174 = 91;
  }
  else {
    int v174 = 0;
  }
  *(_DWORD *)(a1 + 8) = v174;
}

void sub_22402C9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, ...)
{
  va_start(va, a15);
  uint64_t v17 = *(void **)(v15 - 192);
  if (v17)
  {
    *(void *)(v15 - 184) = v17;
    operator delete(v17);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray((uint64_t *)va);
  switch(*(unsigned char *)(v15 - 140))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v18 = *(void *)(v15 - 152);
      if (!v18) {
        goto LABEL_29;
      }
      if (*(char *)(v18 + 31) < 0) {
        operator delete(*(void **)(v18 + 8));
      }
      atomic_ullong *volatile v19 = (void *)v18;
      uint64_t v20 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v24 = *(void **)(v15 - 152);
      if (!v24) {
        goto LABEL_29;
      }
      uint64_t v25 = (void *)v24[1];
      if (v25)
      {
        v24[2] = v25;
        operator delete(v25);
      }
      atomic_ullong *volatile v19 = v24;
      uint64_t v20 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v21 = *(void **)(v15 - 152);
      if (!v21) {
        goto LABEL_29;
      }
      *(void *)(v15 - 216) = v21 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 216));
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v21 = *(void **)(v15 - 152);
      if (!v21) {
        goto LABEL_29;
      }
      *(void *)(v15 - 216) = v21 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 216));
LABEL_23:
      atomic_ullong *volatile v19 = v21;
      uint64_t v20 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      uint64_t v26 = *(void *)(v15 - 152);
      if (!v26) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v26 + 16));
      atomic_ullong *volatile v19 = (void *)v26;
      unsigned int v23 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 152), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_29;
      }
      atomic_ullong *volatile v22 = *(void **)(v15 - 152);
      if (!v22) {
        goto LABEL_29;
      }
      atomic_ullong *volatile v19 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v22);
      unsigned int v23 = 2071181815;
LABEL_27:
      uint64_t v20 = v23 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v19, v20);
LABEL_29:
      switch(*(unsigned char *)(v15 - 124))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          uint64_t v27 = *(void *)(v15 - 136);
          if (!v27) {
            break;
          }
          if (*(char *)(v27 + 31) < 0) {
            operator delete(*(void **)(v27 + 8));
          }
          atomic_ullong *volatile v28 = (void *)v27;
          uint64_t v29 = 0x1012C404EF22A49;
          goto LABEL_46;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          uint64_t v32 = *(void **)(v15 - 136);
          if (!v32) {
            break;
          }
          uint64_t v33 = (void *)v32[1];
          if (v33)
          {
            v32[2] = v33;
            operator delete(v33);
          }
          atomic_ullong *volatile v28 = v32;
          uint64_t v29 = 0x1080C409938AC02;
          goto LABEL_46;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          uint64_t v30 = *(void *)(v15 - 136);
          if (!v30) {
            goto LABEL_55;
          }
          *(void *)(v15 - 216) = v30 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 216));
          goto LABEL_50;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          uint64_t v30 = *(void *)(v15 - 136);
          if (!v30) {
            goto LABEL_55;
          }
          *(void *)(v15 - 216) = v30 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v15 - 216));
LABEL_50:
          uint64_t v34 = v30;
          uint64_t v35 = 0x1020C405E66F15BLL;
          goto LABEL_54;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          uint64_t v36 = *(void *)(v15 - 136);
          if (!v36) {
            goto LABEL_55;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v36 + 16));
          uint64_t v34 = v36;
          uint64_t v35 = 0x1030C40F1F0227BLL;
LABEL_54:
          MEMORY[0x22A614FA0](v34, v35);
LABEL_55:
          *(void *)(v15 - 136) = 0;
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v15 - 136), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            break;
          }
          uint64_t v31 = *(void **)(v15 - 136);
          if (!v31) {
            break;
          }
          atomic_ullong *volatile v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v31);
          uint64_t v29 = 0x1030C407B73B9F7;
LABEL_46:
          MEMORY[0x22A614FA0](v28, v29);
          break;
        default:
          break;
      }
      if (a13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a13);
      }
      if (a15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a15);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_29;
  }
}

uint64_t std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x58uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_22402D288(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)8>>,0>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D769118;
  *(void *)(a1 + 24) = &unk_26D769168;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 8);
  std::__function::__value_func<turi::flexible_type ()(turi::sframe_rows::row const&)>::__value_func[abi:ne180100](a1 + 40, a2 + 16);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_22402D320(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node@<X0>(uint64_t ***a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v135 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  LODWORD(__p) = *(_DWORD *)*a1;
  if (__p != 10)
  {
    *(void *)&long long v129 = &__p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = (char *)v3[8] - (char *)v3[7];
  *(void *)&long long v129 = v4 >> 4;
  if (v4 != 16)
  {
    __p = &v129;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&v129, "output_types");
  uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v3 + 1), (const void **)&v129);
  if (SBYTE7(v130) < 0) {
    operator delete((void *)v129);
  }
  if (!v6) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
  }
  char v7 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v129, "function");
  uint64_t v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v7 + 4), (const void **)&v129);
  if (SBYTE7(v130) < 0) {
    operator delete((void *)v129);
  }
  if (!v8) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
  }
  uint64_t v109 = a2;
  v133[3] = 0;
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "output_types");
  *(void *)&long long v129 = &__p;
  unint64_t v10 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9 + 1, (const void **)&__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
  switch(*((unsigned char *)v10 + 68))
  {
    case 0:
      std::string::size_type v11 = *((void *)v10 + 7);
      v134.__r_.__value_.__s.__data_[12] = 0;
      LODWORD(v134.__r_.__value_.__r.__words[1]) = 0;
      v134.__r_.__value_.__r.__words[0] = v11;
      unsigned int v115 = 0;
      v116 = 0;
      v114 = 0;
      *(void *)&long long v129 = &v114;
      BYTE8(v129) = 0;
      v114 = (double *)operator new(0x10uLL);
      unsigned int v115 = v114;
      v116 = (char *)(v114 + 2);
      unsigned int v115 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v116, (uint64_t *)&v134, (uint64_t *)&v134.__r_.__value_.__r.__words[2], (uint64_t)v114);
      switch(v134.__r_.__value_.__s.__data_[12])
      {
        case 2:
          goto LABEL_60;
        case 3:
          goto LABEL_80;
        case 4:
          goto LABEL_68;
        case 5:
          goto LABEL_85;
        case 8:
          goto LABEL_89;
        case 9:
          goto LABEL_71;
        default:
          goto LABEL_94;
      }
      goto LABEL_94;
    case 1:
      std::string::size_type v30 = *((void *)v10 + 7);
      LODWORD(v134.__r_.__value_.__r.__words[1]) = 0;
      v134.__r_.__value_.__s.__data_[12] = 1;
      v134.__r_.__value_.__r.__words[0] = v30;
      unsigned int v115 = 0;
      v116 = 0;
      v114 = 0;
      *(void *)&long long v129 = &v114;
      BYTE8(v129) = 0;
      v114 = (double *)operator new(0x10uLL);
      unsigned int v115 = v114;
      v116 = (char *)(v114 + 2);
      unsigned int v115 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v116, (uint64_t *)&v134, (uint64_t *)&v134.__r_.__value_.__r.__words[2], (uint64_t)v114);
      switch(v134.__r_.__value_.__s.__data_[12])
      {
        case 2:
          goto LABEL_60;
        case 3:
          goto LABEL_80;
        case 4:
          goto LABEL_68;
        case 5:
          goto LABEL_85;
        case 8:
          goto LABEL_89;
        case 9:
          goto LABEL_71;
        default:
          goto LABEL_94;
      }
      goto LABEL_94;
    case 2:
      v134.__r_.__value_.__r.__words[0] = 0;
      LODWORD(v134.__r_.__value_.__r.__words[1]) = 0;
      v134.__r_.__value_.__s.__data_[12] = 0;
      turi::flexible_type::operator=<std::string>((uint64_t)&v134);
    case 3:
      uint64_t v13 = *((void *)v10 + 7);
      std::vector<turi::flexible_type>::vector(&v114, (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 3);
      uint64_t v14 = *(void *)(v13 + 8);
      if (*(void *)(v13 + 16) != v14)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          uint64_t v17 = (char *)&v114[v15];
          switch(BYTE4(v114[v15 + 1]))
          {
            case 2:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_53;
                }
                if (*((char *)v18 + 31) < 0) {
                  operator delete((void *)v18[1]);
                }
                atomic_ullong *volatile v19 = v18;
                uint64_t v20 = 0x1012C404EF22A49;
                goto LABEL_52;
              }
              break;
            case 3:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v27 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_53;
                }
                atomic_ullong *volatile v28 = (void *)v27[1];
                if (v28)
                {
                  v27[2] = (atomic_ullong)v28;
                  operator delete(v28);
                }
                atomic_ullong *volatile v19 = v27;
                uint64_t v20 = 0x1080C409938AC02;
                goto LABEL_52;
              }
              break;
            case 4:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_53;
                }
                *(void *)&long long v129 = v21 + 1;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
                goto LABEL_47;
              }
              break;
            case 5:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_53;
                }
                *(void *)&long long v129 = v21 + 1;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
LABEL_47:
                atomic_ullong *volatile v19 = v21;
                uint64_t v20 = 0x1020C405E66F15BLL;
                goto LABEL_52;
              }
              break;
            case 8:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v29 = *(atomic_ullong *volatile *)v17;
                if (!*(void *)v17) {
                  goto LABEL_53;
                }
                boost::detail::shared_count::~shared_count((atomic_uint **)v29 + 2);
                atomic_ullong *volatile v19 = v29;
                unsigned int v26 = -235920773;
                goto LABEL_51;
              }
              break;
            case 9:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)v17, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                atomic_ullong *volatile v22 = *(atomic_ullong *volatile *)v17;
                if (*(void *)v17)
                {
                  unsigned int v23 = (void *)v22[6];
                  if (v23)
                  {
                    v22[7] = (atomic_ullong)v23;
                    operator delete(v23);
                  }
                  uint64_t v24 = (void *)v22[3];
                  if (v24)
                  {
                    v22[4] = (atomic_ullong)v24;
                    operator delete(v24);
                  }
                  uint64_t v25 = (std::__shared_weak_count *)v22[2];
                  if (v25) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                  }
                  atomic_ullong *volatile v19 = v22;
                  unsigned int v26 = 2071181815;
LABEL_51:
                  uint64_t v20 = v26 | 0x1030C4000000000;
LABEL_52:
                  MEMORY[0x22A614FA0](v19, v20);
                }
LABEL_53:
                *(void *)uint64_t v17 = 0;
              }
              break;
            default:
              break;
          }
          *(void *)uint64_t v17 = 0;
          *((_DWORD *)v17 + 2) = 0;
          v17[12] = 1;
          *(void *)uint64_t v17 = *(void *)(v14 + 8 * v16++);
          uint64_t v14 = *(void *)(v13 + 8);
          v15 += 2;
        }
        while (v16 < (*(void *)(v13 + 16) - v14) >> 3);
      }
      goto LABEL_94;
    case 4:
      uint64_t v12 = *((void *)v10 + 7);
      unsigned int v115 = 0;
      v116 = 0;
      v114 = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v114, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 4);
      goto LABEL_94;
    case 5:
      uint64_t v31 = *((void *)v10 + 7);
      *(void *)&long long v130 = 0;
      long long v129 = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v129, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v114 = 0;
      unsigned int v115 = 0;
      v116 = 0;
      v134.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
      goto LABEL_94;
    case 6:
      double v32 = (double)((uint64_t)(*((void *)v10 + 7) << 8) >> 8);
      double v33 = (double)*((int *)v10 + 16) / 1000000.0;
      LODWORD(v134.__r_.__value_.__r.__words[1]) = 0;
      v134.__r_.__value_.__s.__data_[12] = 1;
      *(double *)&v134.__r_.__value_.__l.__data_ = v33 + v32;
      unsigned int v115 = 0;
      v116 = 0;
      v114 = 0;
      *(void *)&long long v129 = &v114;
      BYTE8(v129) = 0;
      v114 = (double *)operator new(0x10uLL);
      unsigned int v115 = v114;
      v116 = (char *)(v114 + 2);
      unsigned int v115 = (double *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::flexible_type>,turi::flexible_type*,turi::flexible_type*,turi::flexible_type*>((uint64_t)&v116, (uint64_t *)&v134, (uint64_t *)&v134.__r_.__value_.__r.__words[2], (uint64_t)v114);
      switch(v134.__r_.__value_.__s.__data_[12])
      {
        case 2:
LABEL_60:
          if (atomic_fetch_add((atomic_ullong *volatile)v134.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v34 = v134.__r_.__value_.__r.__words[0];
            if (v134.__r_.__value_.__r.__words[0])
            {
              if (*(char *)(v134.__r_.__value_.__r.__words[0] + 31) < 0) {
                operator delete(*(void **)(v134.__r_.__value_.__r.__words[0] + 8));
              }
              uint64_t v35 = (void *)v34;
              uint64_t v36 = 0x1012C404EF22A49;
              goto LABEL_93;
            }
          }
          break;
        case 3:
LABEL_80:
          if (atomic_fetch_add((atomic_ullong *volatile)v134.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v47 = v134.__r_.__value_.__r.__words[0];
            if (v134.__r_.__value_.__r.__words[0])
            {
              long long v48 = *(void **)(v134.__r_.__value_.__r.__words[0] + 8);
              if (v48)
              {
                *(void *)(v134.__r_.__value_.__r.__words[0] + 16) = v48;
                operator delete(v48);
              }
              uint64_t v35 = (void *)v47;
              uint64_t v36 = 0x1080C409938AC02;
              goto LABEL_93;
            }
          }
          break;
        case 4:
LABEL_68:
          if (atomic_fetch_add((atomic_ullong *volatile)v134.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v41 = v134.__r_.__value_.__r.__words[0];
            if (v134.__r_.__value_.__r.__words[0])
            {
              *(void *)&long long v129 = v134.__r_.__value_.__r.__words[0] + 8;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
              goto LABEL_88;
            }
          }
          break;
        case 5:
LABEL_85:
          if (atomic_fetch_add((atomic_ullong *volatile)v134.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v41 = v134.__r_.__value_.__r.__words[0];
            if (v134.__r_.__value_.__r.__words[0])
            {
              *(void *)&long long v129 = v134.__r_.__value_.__r.__words[0] + 8;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
LABEL_88:
              uint64_t v35 = (void *)v41;
              uint64_t v36 = 0x1020C405E66F15BLL;
              goto LABEL_93;
            }
          }
          break;
        case 8:
LABEL_89:
          if (atomic_fetch_add((atomic_ullong *volatile)v134.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string::size_type v49 = v134.__r_.__value_.__r.__words[0];
            if (v134.__r_.__value_.__r.__words[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v134.__r_.__value_.__r.__words[0] + 16));
              uint64_t v35 = (void *)v49;
              unsigned int v46 = -235920773;
              goto LABEL_92;
            }
          }
          break;
        case 9:
LABEL_71:
          if (atomic_fetch_add((atomic_ullong *volatile)v134.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            long long v42 = (void *)v134.__r_.__value_.__r.__words[0];
            if (v134.__r_.__value_.__r.__words[0])
            {
              int v43 = *(void **)(v134.__r_.__value_.__r.__words[0] + 48);
              if (v43)
              {
                *(void *)(v134.__r_.__value_.__r.__words[0] + 56) = v43;
                operator delete(v43);
              }
              uint64_t v44 = (void *)v42[3];
              if (v44)
              {
                v42[4] = v44;
                operator delete(v44);
              }
              char v45 = (std::__shared_weak_count *)v42[2];
              if (v45) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v45);
              }
              uint64_t v35 = v42;
              unsigned int v46 = 2071181815;
LABEL_92:
              uint64_t v36 = v46 | 0x1030C4000000000;
LABEL_93:
              MEMORY[0x22A614FA0](v35, v36);
            }
          }
          break;
        default:
          goto LABEL_94;
      }
      goto LABEL_94;
    case 7:
      v114 = 0;
      unsigned int v115 = 0;
      v116 = 0;
      goto LABEL_94;
    case 8:
      uint64_t v37 = *((void *)v10 + 7);
      uint64_t v38 = *(void *)(v37 + 16);
      *(void *)&long long v129 = *(void *)(v37 + 8);
      *((void *)&v129 + 1) = v38;
      if (v38) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 + 8), 1u, memory_order_relaxed);
      }
      long long v39 = *(_OWORD *)(v37 + 24);
      long long v40 = *(_OWORD *)(v37 + 56);
      long long v131 = *(_OWORD *)(v37 + 40);
      long long v132 = v40;
      long long v130 = v39;
      turi::flexible_type_fail(0);
      v114 = 0;
      unsigned int v115 = 0;
      v116 = 0;
      boost::detail::shared_count::~shared_count((atomic_uint **)&v129 + 1);
      goto LABEL_94;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v129, *((void *)v10 + 7) + 8);
      turi::flexible_type_fail(0);
      v114 = 0;
      unsigned int v115 = 0;
      v116 = 0;
      if (*((void *)&v131 + 1))
      {
        *(void *)&long long v132 = *((void *)&v131 + 1);
        operator delete(*((void **)&v131 + 1));
      }
      if ((void)v130)
      {
        *((void *)&v130 + 1) = v130;
        operator delete((void *)v130);
      }
      if (*((void *)&v129 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v129 + 1));
      }
LABEL_94:
      v110 = a1;
      if (SBYTE7(v119) < 0) {
        operator delete(__p);
      }
      v111 = 0;
      v112 = 0;
      v113 = 0;
      std::string v51 = v114;
      long long v50 = v115;
      if (v114 != v115)
      {
        while (2)
        {
          double v52 = *v51;
          int v53 = *((unsigned __int8 *)v51 + 12) - 2;
          switch(*((unsigned char *)v51 + 12))
          {
            case 2:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 1uLL);
              size_t __idx = 0;
              uint64_t v54 = (char *)(*(void *)&v52 + 8);
              if (*(char *)(*(void *)&v52 + 31) < 0) {
                uint64_t v54 = *(char **)(*(void *)&v52 + 8);
              }
              uint64_t v55 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v134, v54);
              LOBYTE(v56) = std::stoll(v55, &__idx, 10);
              if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v134.__r_.__value_.__l.__data_);
              }
              if (*(char *)(*(void *)&v52 + 31) < 0) {
                uint64_t v57 = *(void *)(*(void *)&v52 + 16);
              }
              else {
                uint64_t v57 = *(unsigned __int8 *)(*(void *)&v52 + 31);
              }
              if (__idx != v57)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                v107 = std::string::append(&v127, " cannot be interpreted as an integer");
                long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
                v134.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v108;
                v107->__r_.__value_.__l.__size_ = 0;
                v107->__r_.__value_.__r.__words[2] = 0;
                v107->__r_.__value_.__r.__words[0] = 0;
                std::runtime_error::runtime_error(exception, &v134);
                __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
              }
              goto LABEL_120;
            case 3:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 1uLL);
              size_t v125 = 0;
              uint64_t v126 = 0;
              size_t v124 = 0;
              std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v124, *(const void **)(*(void *)&v52 + 8), *(void *)(*(void *)&v52 + 16), (uint64_t)(*(void *)(*(void *)&v52 + 16) - *(void *)(*(void *)&v52 + 8)) >> 3);
              turi::flexible_type_fail(0);
              if (v124)
              {
                size_t v125 = v124;
                operator delete((void *)v124);
              }
              goto LABEL_119;
            case 4:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 1uLL);
              memset(v123, 0, sizeof(v123));
              std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v123, *(uint64_t **)(*(void *)&v52 + 8), *(uint64_t **)(*(void *)&v52 + 16), (uint64_t)(*(void *)(*(void *)&v52 + 16) - *(void *)(*(void *)&v52 + 8)) >> 4);
              turi::flexible_type_fail(0);
              v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
              goto LABEL_119;
            case 5:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 1uLL);
              memset(v122, 0, sizeof(v122));
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v122, *(uint64_t **)(*(void *)&v52 + 8), *(uint64_t **)(*(void *)&v52 + 16), (uint64_t)(*(void *)(*(void *)&v52 + 16) - *(void *)(*(void *)&v52 + 8)) >> 5);
              turi::flexible_type_fail(0);
              v134.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v134);
              goto LABEL_119;
            case 8:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 1uLL);
              long long v58 = *(atomic_uint **)(*(void *)&v52 + 16);
              __p = *(void **)(*(void *)&v52 + 8);
              v118 = v58;
              if (v58) {
                atomic_fetch_add_explicit(v58 + 2, 1u, memory_order_relaxed);
              }
              long long v59 = *(_OWORD *)(*(void *)&v52 + 24);
              long long v60 = *(_OWORD *)(*(void *)&v52 + 56);
              long long v120 = *(_OWORD *)(*(void *)&v52 + 40);
              long long v121 = v60;
              long long v119 = v59;
              turi::flexible_type_fail(0);
              boost::detail::shared_count::~shared_count(&v118);
              goto LABEL_119;
            case 9:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 1uLL);
              turi::flexible_type_impl::ndarray<double>::ndarray(&v129, *(void *)&v52 + 8);
              turi::flexible_type_fail(0);
              if (*((void *)&v131 + 1))
              {
                *(void *)&long long v132 = *((void *)&v131 + 1);
                operator delete(*((void **)&v131 + 1));
              }
              if ((void)v130)
              {
                *((void *)&v130 + 1) = v130;
                operator delete((void *)v130);
              }
              if (*((void *)&v129 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v129 + 1));
              }
LABEL_119:
              LOBYTE(v56) = 0;
LABEL_120:
              char v61 = v112;
              if (v112 >= v113)
              {
                unint64_t v63 = (unint64_t)v111;
                uint64_t v64 = v112 - (unsigned char *)v111;
                uint64_t v65 = v112 - (unsigned char *)v111 + 1;
                if (v65 < 0) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v66 = v113 - (unsigned char *)v111;
                if (2 * (v113 - (unsigned char *)v111) > (unint64_t)v65) {
                  uint64_t v65 = 2 * v66;
                }
                if (v66 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v67 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v67 = v65;
                }
                if (v67) {
                  v68 = (char *)operator new(v67);
                }
                else {
                  v68 = 0;
                }
                long long v69 = &v68[v64];
                v70 = &v68[v64];
                char *v70 = v56;
                long long v62 = v70 + 1;
                if (v61 != (char *)v63)
                {
                  v71 = &v61[~v63];
                  do
                  {
                    char v72 = *--v61;
                    (v71--)[(void)v68] = v72;
                  }
                  while (v61 != (char *)v63);
                  long long v69 = v68;
                }
                v111 = v69;
                v112 = v62;
                v113 = &v68[v67];
                if (v63) {
                  operator delete((void *)v63);
                }
              }
              else
              {
                char *v112 = v56;
                long long v62 = v61 + 1;
              }
              v112 = v62;
              switch(v53)
              {
                case 0:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v52 != 0)
                  {
                    if (*(char *)(*(void *)&v52 + 31) < 0) {
                      operator delete(*(void **)(*(void *)&v52 + 8));
                    }
                    double v74 = v52;
                    uint64_t v75 = 0x1012C404EF22A49;
                    goto LABEL_180;
                  }
                  break;
                case 1:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v52 != 0)
                  {
                    long long v83 = *(void **)(*(void *)&v52 + 8);
                    if (v83)
                    {
                      *(void *)(*(void *)&v52 + 16) = v83;
                      operator delete(v83);
                    }
                    double v74 = v52;
                    uint64_t v75 = 0x1080C409938AC02;
                    goto LABEL_180;
                  }
                  break;
                case 2:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v52 != 0)
                  {
                    *(void *)&long long v129 = *(void *)&v52 + 8;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
                    goto LABEL_173;
                  }
                  break;
                case 3:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v52 != 0)
                  {
                    *(void *)&long long v129 = *(void *)&v52 + 8;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
LABEL_173:
                    double v74 = v52;
                    uint64_t v75 = 0x1020C405E66F15BLL;
                    goto LABEL_180;
                  }
                  break;
                case 6:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v52 != 0)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v52 + 16));
                    double v74 = v52;
                    unsigned int v81 = -235920773;
                    goto LABEL_179;
                  }
                  break;
                case 7:
                  if (atomic_fetch_add(*(atomic_ullong *volatile *)&v52, 0xFFFFFFFFFFFFFFFFLL) == 1
                    && *(void *)&v52 != 0)
                  {
                    long long v78 = *(void **)(*(void *)&v52 + 48);
                    if (v78)
                    {
                      *(void *)(*(void *)&v52 + 56) = v78;
                      operator delete(v78);
                    }
                    atomic_ullong v79 = *(void **)(*(void *)&v52 + 24);
                    if (v79)
                    {
                      *(void *)(*(void *)&v52 + 32) = v79;
                      operator delete(v79);
                    }
                    int v80 = *(std::__shared_weak_count **)(*(void *)&v52 + 16);
                    if (v80) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
                    }
                    double v74 = v52;
                    unsigned int v81 = 2071181815;
LABEL_179:
                    uint64_t v75 = v81 | 0x1030C4000000000;
LABEL_180:
                    MEMORY[0x22A614FA0](*(void *)&v74, v75);
                  }
                  break;
                default:
                  break;
              }
              v51 += 2;
              if (v51 == v50) {
                break;
              }
              continue;
            default:
              LOBYTE(v56) = 0;
              switch(*((unsigned char *)v51 + 12))
              {
                case 0:
                  uint64_t v56 = *(void *)v51;
                  goto LABEL_120;
                case 1:
                  uint64_t v56 = (uint64_t)v52;
                  goto LABEL_120;
                case 6:
                  uint64_t v56 = (uint64_t)(*(void *)&v52 << 8) >> 8;
                  goto LABEL_120;
                case 7:
                  goto LABEL_120;
                default:
LABEL_228:
                  uint64_t result = turi::flexible_type_fail(0);
                  goto LABEL_229;
              }
          }
          break;
        }
      }
      v86 = *v110;
      std::string::basic_string[abi:ne180100]<0>(&v129, "function");
      __p = &v129;
      long long v87 = std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v86 + 4, (const void **)&v129, (uint64_t)&std::piecewise_construct, (_OWORD **)&__p);
      std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::operator=(v133, *((void *)v87 + 7) + 8);
      if (SBYTE7(v130) < 0) {
        operator delete((void *)v129);
      }
      LODWORD(v127.__r_.__value_.__l.__data_) = 0;
      v88 = *v110;
      std::string::basic_string[abi:ne180100]<0>(&v134, "random_seed");
      *(void *)&long long v129 = &v134;
      v89 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v88 + 1, (const void **)&v134.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v129);
      LODWORD(v90) = 0;
      switch(*((unsigned char *)v89 + 68))
      {
        case 0:
          uint64_t v90 = *((void *)v89 + 7);
          goto LABEL_214;
        case 1:
          uint64_t v90 = (uint64_t)*((double *)v89 + 7);
          goto LABEL_214;
        case 2:
          uint64_t v92 = *((void *)v89 + 7);
          size_t v124 = 0;
          atomic_ullong *volatile v93 = (char *)(v92 + 8);
          if (*(char *)(v92 + 31) < 0) {
            atomic_ullong *volatile v93 = *(char **)(v92 + 8);
          }
          atomic_ullong *volatile v94 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v129, v93);
          LODWORD(v90) = std::stoll(v94, &v124, 10);
          if (SBYTE7(v130) < 0) {
            operator delete((void *)v129);
          }
          if (*(char *)(v92 + 31) < 0) {
            uint64_t v95 = *(void *)(v92 + 16);
          }
          else {
            uint64_t v95 = *(unsigned __int8 *)(v92 + 31);
          }
          if (v124 != v95)
          {
            v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            atomic_ullong *volatile v104 = std::string::append((std::string *)&__p, " cannot be interpreted as an integer");
            long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
            *(void *)&long long v130 = *((void *)&v104->__r_.__value_.__l + 2);
            long long v129 = v105;
            v104->__r_.__value_.__l.__size_ = 0;
            v104->__r_.__value_.__r.__words[2] = 0;
            v104->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v103, (const std::string *)&v129);
            __cxa_throw(v103, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_214;
        case 3:
          uint64_t v91 = *((void *)v89 + 7);
          *(void *)&long long v130 = 0;
          long long v129 = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v129, *(const void **)(v91 + 8), *(void *)(v91 + 16), (uint64_t)(*(void *)(v91 + 16) - *(void *)(v91 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((void)v129)
          {
            *((void *)&v129 + 1) = v129;
            operator delete((void *)v129);
          }
          goto LABEL_213;
        case 4:
          uint64_t v96 = *((void *)v89 + 7);
          *(void *)&long long v130 = 0;
          long long v129 = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v129, *(uint64_t **)(v96 + 8), *(uint64_t **)(v96 + 16), (uint64_t)(*(void *)(v96 + 16) - *(void *)(v96 + 8)) >> 4);
          turi::flexible_type_fail(0);
          __p = &v129;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_213;
        case 5:
          uint64_t v97 = *((void *)v89 + 7);
          *(void *)&long long v130 = 0;
          long long v129 = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v129, *(uint64_t **)(v97 + 8), *(uint64_t **)(v97 + 16), (uint64_t)(*(void *)(v97 + 16) - *(void *)(v97 + 8)) >> 5);
          turi::flexible_type_fail(0);
          __p = &v129;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_213;
        case 6:
          uint64_t v90 = (uint64_t)(*((void *)v89 + 7) << 8) >> 8;
          goto LABEL_214;
        case 7:
          goto LABEL_214;
        case 8:
          uint64_t v98 = *((void *)v89 + 7);
          uint64_t v99 = *(void *)(v98 + 16);
          *(void *)&long long v129 = *(void *)(v98 + 8);
          *((void *)&v129 + 1) = v99;
          if (v99) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v99 + 8), 1u, memory_order_relaxed);
          }
          long long v100 = *(_OWORD *)(v98 + 24);
          long long v101 = *(_OWORD *)(v98 + 56);
          long long v131 = *(_OWORD *)(v98 + 40);
          long long v132 = v101;
          long long v130 = v100;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&v129 + 1);
          goto LABEL_213;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&v129, *((void *)v89 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v131 + 1))
          {
            *(void *)&long long v132 = *((void *)&v131 + 1);
            operator delete(*((void **)&v131 + 1));
          }
          if ((void)v130)
          {
            *((void *)&v130 + 1) = v130;
            operator delete((void *)v130);
          }
          if (*((void *)&v129 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v129 + 1));
          }
LABEL_213:
          LODWORD(v90) = 0;
LABEL_214:
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v134.__r_.__value_.__l.__data_);
          }
          LODWORD(v127.__r_.__value_.__l.__data_) = v90;
          std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &,void>((uint64_t)v133, (uint64_t)&v111, (int *)&v127, &v129);
          *uint64_t v109 = v129;
          if (v111)
          {
            v112 = (char *)v111;
            operator delete(v111);
          }
          *(void *)&long long v129 = &v114;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v129);
          uint64_t result = (uint64_t)std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](v133);
          break;
        default:
          goto LABEL_228;
      }
      break;
    default:
      uint64_t result = turi::flexible_type_fail(0);
LABEL_229:
      __break(1u);
      break;
  }
  return result;
}

void sub_22402E4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, boost::detail::shared_count *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v47 - 217) < 0) {
    operator delete(*(void **)(v47 - 240));
  }
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v47 - 105) < 0) {
        operator delete(*(void **)(v47 - 128));
      }
      if (a14) {
        operator delete(a14);
      }
      a40 = &a17;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
      std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100]((void *)(v47 - 160));
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_TRANSFORM_NODE", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  std::string::size_type v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22402EF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  std::string::size_type v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22402F22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_types\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22402F42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", 127);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"function\")", 48);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_transform.hpp", "operator()", 113, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22402F62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x68uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__shared_ptr_emplace[abi:ne180100]<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_22402F790(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__shared_ptr_emplace[abi:ne180100]<std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,0>(void *a1, uint64_t a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7691C8;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_22402F808(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7691C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7691C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::function<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)> &,std::vector<turi::flex_type_enum> &,int &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v7 = *a5;
  *(void *)a2 = &unk_26D769218;
  *(_DWORD *)(a2 + 8) = 0;
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__value_func[abi:ne180100](a2 + 16, a3);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t result = std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>((void *)(a2 + 48), *(const void **)a4, *(void *)(a4 + 8), *(void *)(a4 + 8) - *(void *)a4);
  *(_DWORD *)(a2 + 72) = v7;
  return result;
}

void sub_22402F934(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::~operator_impl(void *a1)
{
  *a1 = &unk_26D769218;
  int v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::~operator_impl(void *a1)
{
  *a1 = &unk_26D769218;
  int v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](a1 + 2);
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::type()
{
  return 10;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 85)
  {
    if (v4) {
      return;
    }
    if (*(_DWORD *)(a1 + 72) != -1)
    {
      source = (turi::thread *)turi::random::get_source((turi::random *)a1);
      int v6 = *(_DWORD *)(a1 + 72);
      tls_data = turi::thread::get_tls_data(source);
      turi::random::generator::seed(source, *tls_data + v6);
    }
  }
  turi::query_eval::query_context::get_next(this, 0, &v24);
  uint64_t v8 = v24;
  if ((void)v24)
  {
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v23);
    if (*(void *)v24 == *(void *)(v24 + 8) || (uint64_t v9 = **(void ***)v24) == 0) {
      unint64_t v10 = 0;
    }
    else {
      unint64_t v10 = (uint64_t)(v9[1] - *v9) >> 4;
    }
    turi::sframe_rows::resize((turi::sframe_rows *)v23, *(void *)(a1 + 56) - *(void *)(a1 + 48), v10);
    uint64_t v20 = 0;
    uint64_t v21 = v24;
    uint64_t v22 = 0;
    uint64_t v12 = v23;
    if (!*(unsigned char *)(v23 + 24)) {
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v23);
    }
    uint64_t v13 = 0;
    uint64_t v18 = v12;
    uint64_t v19 = 0;
    while (1)
    {
      if (*(void *)v24 == *(void *)(v24 + 8))
      {
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = **(void **)v24;
        if (v14) {
          uint64_t v14 = (uint64_t)(*(void *)(v14 + 8) - *(void *)v14) >> 4;
        }
      }
      if (!v20 && v13 == v14) {
        break;
      }
      uint64_t v16 = *(void *)(a1 + 40);
      if (!v16) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v16 + 48))(v16, &v21, &v18);
      ++v19;
      uint64_t v13 = ++v22;
    }
    turi::sframe_rows::type_check_inplace((uint64_t *)v23, (void *)(a1 + 48), v11);
    turi::query_eval::query_context::emit((uint64_t)this, &v23);
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (v8) {
    int v17 = 85;
  }
  else {
    int v17 = 0;
  }
  *(_DWORD *)(a1 + 8) = v17;
}

void sub_22402FC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x68uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22402FCD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7691C8;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22402FD40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26D769218;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::__value_func[abi:ne180100](a2 + 16, a3 + 16);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  double result = std::vector<turi::flex_type_enum>::__init_with_size[abi:ne180100]<turi::flex_type_enum*,turi::flex_type_enum*>((void *)(a2 + 48), *(const void **)(a3 + 48), *(void *)(a3 + 56), *(void *)(a3 + 56) - *(void *)(a3 + 48));
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a3 + 72);
  return result;
}

void sub_22402FDD4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(turi::sframe_rows::row const&,turi::sframe_rows::row&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node@<X0>(_DWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  LODWORD(v7) = **a1;
  if (v7 != 11)
  {
    uint64_t v8 = (uint64_t)&v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = *((void *)v3 + 8) - *((void *)v3 + 7);
  uint64_t v5 = v4 >> 4;
  uint64_t v8 = v4 >> 4;
  if (!v4)
  {
    int v7 = &v8;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  double result = operator new(0x48uLL);
  result[1] = 0;
  result[2] = 0;
  *double result = &unk_26D769278;
  result[3] = &unk_26D7692C8;
  *((_DWORD *)result + 8) = 0;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[8] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::UNION_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  __n128 v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 117, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224030044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  __n128 v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240302D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::~operator_impl(uint64_t a1)
{
  *(void *)a1 = &unk_26D7692C8;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D7692C8;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x22A614FA0](a1, 0x10A1C40E6614521);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::type()
{
  return 11;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11> const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 86)
  {
    if (v4) {
      return;
    }
    std::vector<std::shared_ptr<turi::sframe_rows const>>::resize((uint64_t *)(a1 + 16), *(void *)(a1 + 40));
  }
  if (!*(void *)(a1 + 40)) {
    goto LABEL_14;
  }
  uint64_t v5 = 0;
  char v6 = 0;
  unint64_t v7 = 0;
  char v8 = 1;
  do
  {
    turi::query_eval::query_context::get_next(this, v7, v20);
    uint64_t v9 = *(void *)(a1 + 16);
    long long v10 = *(_OWORD *)v20;
    v20[0] = 0;
    v20[1] = 0;
    __n128 v11 = *(std::__shared_weak_count **)(v9 + v5 + 8);
    *(_OWORD *)(v9 + 16 * v7) = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v20[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20[1]);
    }
    BOOL v12 = *(void *)(*(void *)(a1 + 16) + v5) == 0;
    v6 |= v12;
    v8 &= v12;
    ++v7;
    v5 += 16;
  }
  while (v7 < *(void *)(a1 + 40));
  if (v6)
  {
    if ((v8 & 1) == 0) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
    }
    int v13 = 0;
  }
  else
  {
LABEL_14:
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, v20);
    uint64_t v14 = (uint64_t *)v20[0];
    if (!*((unsigned char *)v20[0] + 24)) {
      turi::sframe_rows::ensure_unique(v20[0]);
    }
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100](v14);
    unint64_t v15 = *(void *)(a1 + 40);
    if (v15)
    {
      for (unint64_t i = 0; i < v15; ++i)
      {
        int v17 = *(long long ***)(*(void *)(a1 + 16) + 16 * i);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        if (*v17 != v19)
        {
          do
            std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v14, v18++);
          while (v18 != v19);
          unint64_t v15 = *(void *)(a1 + 40);
        }
      }
    }
    turi::query_eval::query_context::emit((uint64_t)this, (long long *)v20);
    if (v20[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20[1]);
    }
    int v13 = 86;
  }
  *(_DWORD *)(a1 + 8) = v13;
}

void sub_224030708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_22403076C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26D769278;
  *(void *)(a1 + 24) = &unk_26D7692C8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 40) = 0;
  std::vector<std::shared_ptr<turi::sframe_rows const>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::sframe_rows const>*,std::shared_ptr<turi::sframe_rows const>*>((void *)(a1 + 40), *(void **)(a2 + 16), *(void **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4);
  *(void *)(a1 + 64) = *(void *)(a2 + 40);
  return a1;
}

void sub_224030818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<turi::sframe_rows const>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::sframe_rows const>*,std::shared_ptr<turi::sframe_rows const>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::sframe_rows const>>,std::shared_ptr<turi::sframe_rows const>*,std::shared_ptr<turi::sframe_rows const>*,std::shared_ptr<turi::sframe_rows const>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224030894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::sframe_rows const>>,std::shared_ptr<turi::sframe_rows const>*,std::shared_ptr<turi::sframe_rows const>*,std::shared_ptr<turi::sframe_rows const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sframe_rows const>>,std::shared_ptr<turi::sframe_rows const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sframe_rows const>>,std::shared_ptr<turi::sframe_rows const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<turi::sframe_rows const>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<turi::sframe_rows const>>::__append(a1, v5);
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"all_null", 8);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 71, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224030B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::sframe_rows const>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      int v13 = 0;
    }
    uint64_t v14 = v13;
    unint64_t v15 = &v13[16 * v10];
    int v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<turi::sframe_rows const>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_224030CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::sframe_rows const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::sframe_rows const>>,std::reverse_iterator<std::shared_ptr<turi::sframe_rows const>*>,std::reverse_iterator<std::shared_ptr<turi::sframe_rows const>*>,std::reverse_iterator<std::shared_ptr<turi::sframe_rows const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::sframe_rows const>>,std::reverse_iterator<std::shared_ptr<turi::sframe_rows const>*>,std::reverse_iterator<std::shared_ptr<turi::sframe_rows const>*>,std::reverse_iterator<std::shared_ptr<turi::sframe_rows const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sframe_rows const>>,std::reverse_iterator<std::shared_ptr<turi::sframe_rows const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sframe_rows const>>,std::reverse_iterator<std::shared_ptr<turi::sframe_rows const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(uint64_t ***a1)
{
  uint64_t v1 = *a1;
  LODWORD(v36.__r_.__value_.__l.__data_) = *(_DWORD *)*a1;
  if (LODWORD(v36.__r_.__value_.__l.__data_) == 13)
  {
    uint64_t v2 = (char *)v1[8] - (char *)v1[7];
    __p[0] = (void *)(v2 >> 4);
    if (v2 != 16)
    {
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
    }
    uint64_t v4 = (uint64_t)(v1 + 1);
    std::string::basic_string[abi:ne180100]<0>(__p, "output_type");
    uint64_t v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v4, (const void **)__p);
    if (SBYTE7(v33) < 0) {
      operator delete(__p[0]);
    }
    if (!v5) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()();
    }
    uint64_t v6 = (uint64_t)(*a1 + 4);
    std::string::basic_string[abi:ne180100]<0>(__p, "aggregator");
    uint64_t v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v6, (const void **)__p);
    if (SBYTE7(v33) < 0) {
      operator delete(__p[0]);
    }
    if (!v7) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()();
    }
    uint64_t v8 = *a1 + 4;
    std::string::basic_string[abi:ne180100]<0>(__p, "aggregator");
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    uint64_t v9 = *((void *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8, (const void **)__p, (uint64_t)&std::piecewise_construct, &v36)+ 7);
    uint64_t v11 = *(uint64_t (****)(void))(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    if (SBYTE7(v33) < 0) {
      operator delete(__p[0]);
    }
    char v31 = 0;
    unint64_t v12 = *a1;
    std::string::basic_string[abi:ne180100]<0>(v29, "output_type");
    __p[0] = v29;
    char v13 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v12 + 1, (const void **)v29, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    LOBYTE(v14) = 0;
    switch(*((unsigned char *)v13 + 68))
    {
      case 0:
        uint64_t v14 = *((void *)v13 + 7);
        goto LABEL_37;
      case 1:
        uint64_t v14 = (uint64_t)*((double *)v13 + 7);
        goto LABEL_37;
      case 2:
        uint64_t v16 = *((void *)v13 + 7);
        size_t __idx = 0;
        int v17 = (char *)(v16 + 8);
        if (*(char *)(v16 + 31) < 0) {
          int v17 = *(char **)(v16 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v17);
        LOBYTE(v14) = std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v33) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v16 + 31) < 0) {
          uint64_t v18 = *(void *)(v16 + 16);
        }
        else {
          uint64_t v18 = *(unsigned __int8 *)(v16 + 31);
        }
        if (__idx != v18)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          atomic_ullong *volatile v27 = std::string::append(&v36, " cannot be interpreted as an integer");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          *(void *)&long long v33 = *((void *)&v27->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_37;
      case 3:
        uint64_t v15 = *((void *)v13 + 7);
        __p[1] = 0;
        *(void *)&long long v33 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v15 + 8), *(void *)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_36;
      case 4:
        uint64_t v19 = *((void *)v13 + 7);
        __p[1] = 0;
        *(void *)&long long v33 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
        goto LABEL_36;
      case 5:
        uint64_t v20 = *((void *)v13 + 7);
        __p[1] = 0;
        *(void *)&long long v33 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
        goto LABEL_36;
      case 6:
        uint64_t v14 = (uint64_t)(*((void *)v13 + 7) << 8) >> 8;
        goto LABEL_37;
      case 7:
        goto LABEL_37;
      case 8:
        uint64_t v21 = *((void *)v13 + 7);
        uint64_t v22 = *(atomic_uint **)(v21 + 16);
        __p[0] = *(void **)(v21 + 8);
        __p[1] = v22;
        if (v22) {
          atomic_fetch_add_explicit(v22 + 2, 1u, memory_order_relaxed);
        }
        long long v23 = *(_OWORD *)(v21 + 24);
        long long v24 = *(_OWORD *)(v21 + 56);
        long long v34 = *(_OWORD *)(v21 + 40);
        long long v35 = v24;
        long long v33 = v23;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_36;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v13 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v34 + 1))
        {
          *(void *)&long long v35 = *((void *)&v34 + 1);
          operator delete(*((void **)&v34 + 1));
        }
        if ((void)v33)
        {
          *((void *)&v33 + 1) = v33;
          operator delete((void *)v33);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_36:
        LOBYTE(v14) = 0;
LABEL_37:
        if (v30 < 0) {
          operator delete(v29[0]);
        }
        char v31 = v14;
        uint64_t v25 = (**v11)(v11);
        std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(__p, v25);
      default:
        turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
  }
  __p[0] = &v36;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
}

void sub_224031318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 57) < 0)
  {
    operator delete(*(void **)(v24 - 80));
    if ((v23 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0) {
        operator delete(a9);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::REDUCE_NODE", 35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 95, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403160C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 96, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403189C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"output_type\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 97, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224031A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->any_operator_parameters.count(\"aggregator\")", 50);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/reduce.hpp", "operator()", 98, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224031C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,void>@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_224031DF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,0>(void *a1, uint64_t *a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D769328;
  std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_224031E64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::construct[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &>(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v5 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v6 = *a4;
  *(void *)a2 = &unk_26D769378;
  *(_DWORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a2 + 32) = v6;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *(unsigned char *)(a2 + 32) = v6;
  }
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::~operator_impl(void *a1)
{
  *a1 = &unk_26D769378;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::~operator_impl(void *a1)
{
  *a1 = &unk_26D769378;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x22A614FA0);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::type()
{
  return 13;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::clone(uint64_t a1)
{
  uint64_t v1 = (***(uint64_t (****)(void))(a1 + 16))(*(void *)(a1 + 16));
  std::shared_ptr<turi::group_aggregate_value>::shared_ptr[abi:ne180100]<turi::group_aggregate_value,void>(&v2, v1);
}

void sub_2240320B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 77)
  {
    int v17 = 0;
  }
  else
  {
    if (v3) {
      return;
    }
    do
    {
      v5.n128_f64[0] = turi::query_eval::query_context::get_next(this, 0, &v37);
      uint64_t v6 = v37;
      if ((void)v37)
      {
        long long v33 = 0;
        uint64_t v34 = v37;
        uint64_t v35 = 0;
        if (*(void *)v37 != *(void *)(v37 + 8))
        {
          char v7 = **(void ***)v37;
          if (v7)
          {
            uint64_t v8 = v7[1] - *v7;
            if (v8)
            {
              uint64_t v9 = 0;
              uint64_t v10 = v8 >> 4;
              do
              {
                uint64_t v11 = *(void *)(a1 + 16);
                if (*(void *)(v34 + 8) - *(void *)v34 == 16)
                {
                  (*(void (**)(void, uint64_t, __n128))(*(void *)v11 + 16))(*(void *)(a1 + 16), ***(void ***)v34 + 16 * v9, v5);
                }
                else
                {
                  turi::sframe_rows::row::operator std::vector<turi::flexible_type>(&v34, (uint64_t *)v32);
                  (*(void (**)(uint64_t, turi::sframe_rows **))(*(void *)v11 + 8))(v11, v32);
                  std::string v36 = v32;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
                }
                uint64_t v9 = ++v35;
              }
              while (v33 || v9 != v10);
            }
          }
        }
      }
      if (*((void *)&v37 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    while (v6);
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, v32);
    turi::sframe_rows::resize(v32[0], 1uLL, 1uLL);
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 40))(&v37);
    unint64_t v12 = v32[0];
    if (!*((unsigned char *)v32[0] + 24)) {
      turi::sframe_rows::ensure_unique(v32[0]);
    }
    char v13 = ***(long long ****)v12;
    if (&v37 == v13)
    {
      switch(BYTE12(v37))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v24 = (void *)v37;
            if ((void)v37)
            {
              if (*(char *)(v37 + 31) < 0) {
                operator delete(*(void **)(v37 + 8));
              }
              uint64_t v25 = v24;
              uint64_t v26 = 0x1012C404EF22A49;
              goto LABEL_78;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = (void *)v37;
            if ((void)v37)
            {
              long long v28 = *(void **)(v37 + 8);
              if (v28)
              {
                *(void *)(v37 + 16) = v28;
                operator delete(v28);
              }
              uint64_t v25 = v27;
              uint64_t v26 = 0x1080C409938AC02;
              goto LABEL_78;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v29 = (void *)v37;
            if ((void)v37)
            {
              long long v33 = (void **)(v37 + 8);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v33);
              goto LABEL_70;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v29 = (void *)v37;
            if ((void)v37)
            {
              long long v33 = (void **)(v37 + 8);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v33);
LABEL_70:
              uint64_t v25 = v29;
              uint64_t v26 = 0x1020C405E66F15BLL;
              goto LABEL_78;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            char v30 = (void *)v37;
            if ((void)v37)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)(v37 + 16));
              uint64_t v25 = v30;
              unsigned int v31 = -235920773;
              goto LABEL_77;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v37, 0xFFFFFFFFFFFFFFFFLL) == 1 && (void)v37)
          {
            uint64_t v25 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v37);
            unsigned int v31 = 2071181815;
LABEL_77:
            uint64_t v26 = v31 | 0x1030C4000000000;
LABEL_78:
            MEMORY[0x22A614FA0](v25, v26);
          }
          break;
        default:
          break;
      }
    }
    else
    {
      switch(*((unsigned char *)v13 + 12))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v14 = *(atomic_ullong *volatile *)v13;
            if (!*(void *)v13) {
              goto LABEL_46;
            }
            if (*((char *)v14 + 31) < 0) {
              operator delete((void *)v14[1]);
            }
            char v15 = v14;
            uint64_t v16 = 0x1012C404EF22A49;
            goto LABEL_45;
          }
          break;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v18 = *(atomic_ullong *volatile *)v13;
            if (!*(void *)v13) {
              goto LABEL_46;
            }
            uint64_t v19 = (void *)v18[1];
            if (v19)
            {
              v18[2] = (atomic_ullong)v19;
              operator delete(v19);
            }
            char v15 = v18;
            uint64_t v16 = 0x1080C409938AC02;
            goto LABEL_45;
          }
          break;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v13;
            if (!*(void *)v13) {
              goto LABEL_46;
            }
            long long v33 = (void **)(v20 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v33);
            goto LABEL_37;
          }
          break;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v20 = *(atomic_ullong *volatile *)v13;
            if (!*(void *)v13) {
              goto LABEL_46;
            }
            long long v33 = (void **)(v20 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v33);
LABEL_37:
            char v15 = v20;
            uint64_t v16 = 0x1020C405E66F15BLL;
            goto LABEL_45;
          }
          break;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v21 = *(atomic_ullong *volatile *)v13;
            if (!*(void *)v13) {
              goto LABEL_46;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
            char v15 = v21;
            unsigned int v22 = -235920773;
            goto LABEL_44;
          }
          break;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*(void *)v13)
            {
              char v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v13);
              unsigned int v22 = 2071181815;
LABEL_44:
              uint64_t v16 = v22 | 0x1030C4000000000;
LABEL_45:
              MEMORY[0x22A614FA0](v15, v16);
            }
LABEL_46:
            *(void *)char v13 = 0;
          }
          break;
        default:
          break;
      }
      int v23 = (void *)v37;
      *(void *)((char *)v13 + 5) = *(void *)((char *)&v37 + 5);
      *(void *)char v13 = v23;
      *((unsigned char *)v13 + 12) = BYTE12(v37);
    }
    turi::query_eval::query_context::emit((uint64_t)this, (long long *)v32);
    if (v32[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32[1]);
    }
    int v17 = 77;
  }
  *(_DWORD *)(a1 + 8) = v17;
}

void sub_224032648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, _Unwind_Exception *a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_ullong *a16, int a17, char a18)
{
  switch(a18)
  {
    case 2:
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::execute(&a16);
      goto LABEL_13;
    case 3:
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::execute(&a16);
      goto LABEL_13;
    case 4:
      if (atomic_fetch_add(a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      uint64_t v19 = a16;
      if (!a16) {
        break;
      }
      a12 = (_Unwind_Exception *)(a16 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
      goto LABEL_10;
    case 5:
      if (atomic_fetch_add(a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        break;
      }
      uint64_t v19 = a16;
      if (!a16) {
        break;
      }
      a12 = (_Unwind_Exception *)(a16 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
LABEL_10:
      MEMORY[0x22A614FA0](v19, 0x1020C405E66F15BLL);
      break;
    case 8:
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>::execute(&a16);
      goto LABEL_13;
    case 9:
      turi::flexible_type_internals::ft_converter<9>::set<std::map<std::string,std::vector<std::string>>>(&a16);
LABEL_13:
      exception_object = a12;
      break;
    default:
      break;
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum const&,void>@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::group_aggregate_value> &,turi::flex_type_enum &,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)13>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_22403284C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node@<X0>(_DWORD **a1@<X0>, void *a2@<X8>)
{
  int v3 = *a1;
  LODWORD(v11) = **a1;
  if (v11 != 12)
  {
    __p[0] = &v11;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = *((void *)v3 + 8) - *((void *)v3 + 7);
  uint64_t v5 = v4 >> 4;
  __p[0] = (void *)(v4 >> 4);
  if (!v4)
  {
    uint64_t v11 = __p;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  uint64_t v6 = (char *)operator new(0x78uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26D7693D8;
  *((void *)v6 + 3) = &unk_26D769428;
  *((_DWORD *)v6 + 8) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((void *)v6 + 11) = v5;
  *((void *)v6 + 12) = 0;
  *((void *)v6 + 13) = 0;
  *((void *)v6 + 14) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "index_map");
  uint64_t v7 = *(void *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v3 + 2), (const void **)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = std::vector<std::pair<unsigned long,unsigned long>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t *)v6 + 12, *(void *)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 5);
  *a2 = v6 + 24;
  a2[1] = v6;
  return result;
}

void sub_2240329A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::GENERALIZED_UNION_PROJECT_NODE", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  char v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 125, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224032B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  char v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 126, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  char v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224032DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7693D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7693D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::~operator_impl(uint64_t a1)
{
  *(void *)a1 = &unk_26D769428;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

{
  void *v2;
  void **v4;

  *(void *)a1 = &unk_26D769428;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 16);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return MEMORY[0x22A614FA0](a1, 0x10A1C40C5881B98);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::type()
{
  return 12;
}

double turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::clone@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&,void>(a1, v4);
  double result = v4[0];
  *a2 = *(_OWORD *)v4;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 != 95)
  {
    if (v4) {
      return;
    }
    std::vector<std::shared_ptr<turi::sframe_rows const>>::resize((uint64_t *)(a1 + 16), *(void *)(a1 + 64));
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::resize((uint64_t *)(a1 + 40), *(void *)(a1 + 64));
  }
  if (!*(void *)(a1 + 64)) {
    goto LABEL_19;
  }
  uint64_t v5 = 0;
  char v6 = 0;
  unint64_t v7 = 0;
  char v8 = 1;
  do
  {
    turi::query_eval::query_context::get_next(this, v7, v23);
    uint64_t v9 = *(void *)(a1 + 16);
    long long v10 = *(_OWORD *)v23;
    v23[0] = 0;
    v23[1] = 0;
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + v5 + 8);
    *(_OWORD *)(v9 + 16 * v7) = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v23[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v23[1]);
    }
    BOOL v12 = *(void *)(*(void *)(a1 + 16) + v5) == 0;
    v6 |= v12;
    v8 &= v12;
    ++v7;
    unint64_t v13 = *(void *)(a1 + 64);
    v5 += 16;
  }
  while (v7 < v13);
  if ((v6 & 1) == 0)
  {
    if (v13)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      for (unint64_t i = 0; i < v13; ++i)
      {
        atomic_ullong *volatile v18 = *(uint64_t ***)(*(void *)(a1 + 16) + v16);
        uint64_t v19 = *(void *)(a1 + 40) + v15;
        if ((uint64_t **)v19 != v18)
        {
          std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>(v19, *v18, v18[1], ((char *)v18[1] - (char *)*v18) >> 4);
          unint64_t v13 = *(void *)(a1 + 64);
        }
        v16 += 16;
        v15 += 24;
      }
    }
LABEL_19:
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, v23);
    atomic_ullong *volatile v20 = (uint64_t *)v23[0];
    if (!*((unsigned char *)v23[0] + 24)) {
      turi::sframe_rows::ensure_unique(v23[0]);
    }
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100](v20);
    atomic_ullong *volatile v21 = *(void **)(a1 + 72);
    for (j = *(void **)(a1 + 80); v21 != j; v21 += 2)
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v20, (long long *)(*(void *)(*(void *)(a1 + 40) + 24 * *v21) + 16 * v21[1]));
    turi::query_eval::query_context::emit((uint64_t)this, (long long *)v23);
    if (v23[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v23[1]);
    }
    int v14 = 95;
    goto LABEL_26;
  }
  if ((v8 & 1) == 0) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
  }
  int v14 = 0;
LABEL_26:
  *(_DWORD *)(a1 + 8) = v14;
}

void sub_2240332A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    int v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        char v6 = v4;
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  int v4 = operator new(0x78uLL);
  double result = std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224033380(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>::__shared_ptr_emplace[abi:ne180100]<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12> const&,std::allocator<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D7693D8;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::operator_impl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2240333DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::operator_impl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D769428;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::vector<std::shared_ptr<turi::sframe_rows const>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::sframe_rows const>*,std::shared_ptr<turi::sframe_rows const>*>((void *)(a1 + 16), *(void **)(a2 + 16), *(void **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 4);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__init_with_size[abi:ne180100]<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>((void *)(a1 + 40), *(void ***)(a2 + 40), *(void ***)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)(a1 + 72), *(long long **)(a2 + 72), *(long long **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 4);
  return a1;
}

void sub_2240334C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__init_with_size[abi:ne180100]<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>(void *result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224033554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>(uint64_t a1, void **a2, void **a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    char v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__init_with_size[abi:ne180100]<std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>(v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_224033614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__init_with_size[abi:ne180100]<std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<turi::flexible_type>>>,std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224033690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<turi::flexible_type>>>,std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<turi::flexible_type>>>,std::shared_ptr<std::vector<turi::flexible_type>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<std::vector<turi::flexible_type>>>,std::shared_ptr<std::vector<turi::flexible_type>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    int v3 = v1;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

void std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::resize(uint64_t *a1, unint64_t a2)
{
  int v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      char v8 = v3;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  unint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"all_null", 8);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    BOOL v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 77, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240339A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      BOOL v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      BOOL v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    atomic_ullong *volatile v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    int v17 = &v16[v14];
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer(&v15);
  }
}

void sub_224033BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    int v3 = v1;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__assign_with_size[abi:ne180100]<std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((void *)a1, v12);
    long long v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<turi::flexible_type>>>,std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v20, a2, v15, v9);
    long long v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<std::vector<turi::flexible_type>>>,std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*,std::shared_ptr<std::vector<turi::flexible_type>>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_224033F78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_224033F80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<unsigned long,unsigned long>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = (uint64_t)v9;
      operator delete(v9);
      uint64_t v8 = 0;
      uint64_t *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v12 = (uint64_t)v7;
    uint64_t v13 = v6;
    uint64_t v14 = a3;
LABEL_21:
    return std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(v12, v13, v14);
  }
  uint64_t v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 4;
  if (v16 < a4)
  {
    uint64_t v17 = a2 + 32 * v16;
    if (v15 != v9)
    {
      uint64_t v18 = 32 * v16;
      do
      {
        std::pair<unsigned long,unsigned long>::operator=[abi:ne180100]<turi::flexible_type,turi::flexible_type,(void *)0>((uint64_t *)v9, v6);
        v6 += 32;
        v9 += 16;
        v18 -= 32;
      }
      while (v18);
    }
    uint64_t v12 = (uint64_t)v7;
    uint64_t v13 = v17;
    uint64_t v14 = a3;
    goto LABEL_21;
  }
  if (a2 == a3)
  {
    uint64_t v19 = *result;
  }
  else
  {
    uint64_t v19 = *result;
    do
    {
      uint64_t result = std::pair<unsigned long,unsigned long>::operator=[abi:ne180100]<turi::flexible_type,turi::flexible_type,(void *)0>((uint64_t *)v9, v6);
      v6 += 32;
      v9 += 16;
      v19 += 16;
    }
    while (v6 != a3);
  }
  v7[1] = v19;
  return result;
}

uint64_t *std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3)
  {
    uint64_t result = *(uint64_t **)(a1 + 8);
  }
  else
  {
    uint64_t v5 = a2;
    uint64_t result = *(uint64_t **)(a1 + 8);
    do
    {
      uint64_t v7 = std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(result, v5);
      v5 += 32;
      uint64_t result = v7 + 2;
    }
    while (v5 != a3);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_224034168(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      uint64_t v4 = *(void *)a2;
      goto LABEL_25;
    case 1:
      uint64_t v4 = (uint64_t)*(double *)a2;
      goto LABEL_25;
    case 2:
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      uint64_t v8 = (char *)v7;
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v8 = *v7;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      uint64_t v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v35[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v9 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 31);
      }
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        atomic_ullong *volatile v29 = std::string::append(&v38, " cannot be interpreted as an integer");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v35[0] = (void *)v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v5 = *(void *)a2;
      __p[1] = 0;
      v35[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v10 = *(void *)a2;
      __p[1] = 0;
      v35[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      goto LABEL_24;
    case 5:
      uint64_t v11 = *(void *)a2;
      __p[1] = 0;
      v35[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      goto LABEL_24;
    case 6:
      uint64_t v4 = (uint64_t)(*(void *)a2 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v12 = *(void *)a2;
      uint64_t v13 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
      }
      long long v14 = *(_OWORD *)(v12 + 24);
      long long v15 = *(_OWORD *)(v12 + 56);
      long long v36 = *(_OWORD *)(v12 + 40);
      long long v37 = v15;
      *(_OWORD *)uint64_t v35 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v36 + 1))
      {
        *(void *)&long long v37 = *((void *)&v36 + 1);
        operator delete(*((void **)&v36 + 1));
      }
      if (v35[0])
      {
        v35[1] = v35[0];
        operator delete(v35[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v4 = 0;
LABEL_25:
      *a1 = v4;
      uint64_t v16 = 0;
      switch(*(unsigned char *)(a2 + 28))
      {
        case 0:
          uint64_t v16 = *(void *)(a2 + 16);
          goto LABEL_49;
        case 1:
          uint64_t v16 = (uint64_t)*(double *)(a2 + 16);
          goto LABEL_49;
        case 2:
          uint64_t v18 = *(void *)(a2 + 16);
          size_t __idx = 0;
          uint64_t v19 = (char *)(v18 + 8);
          if (*(char *)(v18 + 31) < 0) {
            uint64_t v19 = *(char **)(v18 + 8);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v19);
          uint64_t v16 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v35[0]) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v18 + 31) < 0) {
            uint64_t v20 = *(void *)(v18 + 16);
          }
          else {
            uint64_t v20 = *(unsigned __int8 *)(v18 + 31);
          }
          if (__idx != v20)
          {
            unsigned int v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            double v32 = std::string::append(&v38, " cannot be interpreted as an integer");
            long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
            v35[0] = (void *)v32->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v33;
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v31, (const std::string *)__p);
            __cxa_throw(v31, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_49;
        case 3:
          uint64_t v17 = *(void *)(a2 + 16);
          __p[1] = 0;
          v35[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v17 + 8), *(void *)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_48;
        case 4:
          uint64_t v21 = *(void *)(a2 + 16);
          __p[1] = 0;
          v35[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(void *)(v21 + 16) - *(void *)(v21 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
          goto LABEL_48;
        case 5:
          uint64_t v22 = *(void *)(a2 + 16);
          __p[1] = 0;
          v35[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(void *)(v22 + 16) - *(void *)(v22 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
          goto LABEL_48;
        case 6:
          uint64_t v16 = (uint64_t)(*(void *)(a2 + 16) << 8) >> 8;
          goto LABEL_49;
        case 7:
          goto LABEL_49;
        case 8:
          uint64_t v23 = *(void *)(a2 + 16);
          uint64_t v24 = *(atomic_uint **)(v23 + 16);
          __p[0] = *(void **)(v23 + 8);
          __p[1] = v24;
          if (v24) {
            atomic_fetch_add_explicit(v24 + 2, 1u, memory_order_relaxed);
          }
          long long v25 = *(_OWORD *)(v23 + 24);
          long long v26 = *(_OWORD *)(v23 + 56);
          long long v36 = *(_OWORD *)(v23 + 40);
          long long v37 = v26;
          *(_OWORD *)uint64_t v35 = v25;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          goto LABEL_48;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)(a2 + 16) + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v36 + 1))
          {
            *(void *)&long long v37 = *((void *)&v36 + 1);
            operator delete(*((void **)&v36 + 1));
          }
          if (v35[0])
          {
            v35[1] = v35[0];
            operator delete(v35[0]);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
LABEL_48:
          uint64_t v16 = 0;
LABEL_49:
          a1[1] = v16;
          return a1;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_2240346C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t *std::pair<unsigned long,unsigned long>::operator=[abi:ne180100]<turi::flexible_type,turi::flexible_type,(void *)0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  switch(*(unsigned char *)(a2 + 12))
  {
    case 0:
      uint64_t v4 = *(void *)a2;
      goto LABEL_25;
    case 1:
      uint64_t v4 = (uint64_t)*(double *)a2;
      goto LABEL_25;
    case 2:
      uint64_t v6 = *(void *)a2;
      uint64_t v7 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      uint64_t v8 = (char *)v7;
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v8 = *v7;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      uint64_t v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v35[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v9 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 31);
      }
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        atomic_ullong *volatile v29 = std::string::append(&v38, " cannot be interpreted as an integer");
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v35[0] = (void *)v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v5 = *(void *)a2;
      __p[1] = 0;
      v35[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v10 = *(void *)a2;
      __p[1] = 0;
      v35[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      goto LABEL_24;
    case 5:
      uint64_t v11 = *(void *)a2;
      __p[1] = 0;
      v35[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
      goto LABEL_24;
    case 6:
      uint64_t v4 = (uint64_t)(*(void *)a2 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v12 = *(void *)a2;
      uint64_t v13 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
      }
      long long v14 = *(_OWORD *)(v12 + 24);
      long long v15 = *(_OWORD *)(v12 + 56);
      long long v36 = *(_OWORD *)(v12 + 40);
      long long v37 = v15;
      *(_OWORD *)uint64_t v35 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v36 + 1))
      {
        *(void *)&long long v37 = *((void *)&v36 + 1);
        operator delete(*((void **)&v36 + 1));
      }
      if (v35[0])
      {
        v35[1] = v35[0];
        operator delete(v35[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v4 = 0;
LABEL_25:
      *a1 = v4;
      uint64_t v16 = 0;
      switch(*(unsigned char *)(a2 + 28))
      {
        case 0:
          uint64_t v16 = *(void *)(a2 + 16);
          goto LABEL_49;
        case 1:
          uint64_t v16 = (uint64_t)*(double *)(a2 + 16);
          goto LABEL_49;
        case 2:
          uint64_t v18 = *(void *)(a2 + 16);
          size_t __idx = 0;
          uint64_t v19 = (char *)(v18 + 8);
          if (*(char *)(v18 + 31) < 0) {
            uint64_t v19 = *(char **)(v18 + 8);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v19);
          uint64_t v16 = std::stoll((const std::string *)__p, &__idx, 10);
          if (SHIBYTE(v35[0]) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v18 + 31) < 0) {
            uint64_t v20 = *(void *)(v18 + 16);
          }
          else {
            uint64_t v20 = *(unsigned __int8 *)(v18 + 31);
          }
          if (__idx != v20)
          {
            unsigned int v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            double v32 = std::string::append(&v38, " cannot be interpreted as an integer");
            long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
            v35[0] = (void *)v32->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v33;
            v32->__r_.__value_.__l.__size_ = 0;
            v32->__r_.__value_.__r.__words[2] = 0;
            v32->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v31, (const std::string *)__p);
            __cxa_throw(v31, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_49;
        case 3:
          uint64_t v17 = *(void *)(a2 + 16);
          __p[1] = 0;
          v35[0] = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v17 + 8), *(void *)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          goto LABEL_48;
        case 4:
          uint64_t v21 = *(void *)(a2 + 16);
          __p[1] = 0;
          v35[0] = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v21 + 8), *(uint64_t **)(v21 + 16), (uint64_t)(*(void *)(v21 + 16) - *(void *)(v21 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
          goto LABEL_48;
        case 5:
          uint64_t v22 = *(void *)(a2 + 16);
          __p[1] = 0;
          v35[0] = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v22 + 8), *(uint64_t **)(v22 + 16), (uint64_t)(*(void *)(v22 + 16) - *(void *)(v22 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v38.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
          goto LABEL_48;
        case 6:
          uint64_t v16 = (uint64_t)(*(void *)(a2 + 16) << 8) >> 8;
          goto LABEL_49;
        case 7:
          goto LABEL_49;
        case 8:
          uint64_t v23 = *(void *)(a2 + 16);
          uint64_t v24 = *(atomic_uint **)(v23 + 16);
          __p[0] = *(void **)(v23 + 8);
          __p[1] = v24;
          if (v24) {
            atomic_fetch_add_explicit(v24 + 2, 1u, memory_order_relaxed);
          }
          long long v25 = *(_OWORD *)(v23 + 24);
          long long v26 = *(_OWORD *)(v23 + 56);
          long long v36 = *(_OWORD *)(v23 + 40);
          long long v37 = v26;
          *(_OWORD *)uint64_t v35 = v25;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          goto LABEL_48;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)(a2 + 16) + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v36 + 1))
          {
            *(void *)&long long v37 = *((void *)&v36 + 1);
            operator delete(*((void **)&v36 + 1));
          }
          if (v35[0])
          {
            v35[1] = v35[0];
            operator delete(v35[0]);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
LABEL_48:
          uint64_t v16 = 0;
LABEL_49:
          a1[1] = v16;
          return a1;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_224034D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node@<X0>(_DWORD **a1@<X0>, void *a2@<X8>)
{
  int v3 = *a1;
  LODWORD(v6) = **a1;
  if (v6 != 14)
  {
    uint64_t v7 = (uint64_t)&v6;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()();
  }
  uint64_t v4 = *((void *)v3 + 8) - *((void *)v3 + 7);
  uint64_t v7 = v4 >> 4;
  if (v4 != 48)
  {
    uint64_t v6 = &v7;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()();
  }
  uint64_t result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26D769488;
  result[3] = &unk_26D7694D8;
  *((_DWORD *)result + 8) = 0;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::TERNARY_OPERATOR", 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 151, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224035128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 152, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240353B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::type()
{
  return 14;
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::clone@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26D769488;
  result[3] = &unk_26D7694D8;
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 8);
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(uint64_t a1, turi::query_eval::execution_node **this)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 != 132 && v2 != 0) {
    return;
  }
  uint64_t v5 = a1;
  turi::query_eval::query_context::get_next(this, 0, &v88);
  uint64_t v6 = v88;
  if ((void)v88)
  {
    uint64_t v7 = *(uint64_t ***)v88;
    uint64_t v8 = *(void *)(v88 + 8) - *(void *)v88;
    *(void *)&long long v87 = v8 >> 4;
    if (v8 != 16)
    {
      *(void *)&long long v86 = &v87;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()();
    }
    uint64_t v9 = *v7;
    uint64_t v10 = std::accumulate[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,unsigned long,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(unsigned long,turi::flexible_type const&)#1}>((unsigned char *)**v7, (unsigned char *)(*v7)[1], 0);
    turi::query_eval::query_context::get_output_buffer((uint64_t)this, &v87);
    if (!v10)
    {
      unint64_t v11 = 1;
      unint64_t v12 = 2;
LABEL_12:
      turi::query_eval::query_context::skip_next(this, v11);
      uint64_t v13 = (uint64_t *)v87;
      if (!*(unsigned char *)(v87 + 24)) {
        turi::sframe_rows::ensure_unique((turi::sframe_rows *)v87);
      }
      turi::query_eval::query_context::get_next(this, v12, &v86);
      long long v14 = *(uint64_t **)v86;
      uint64_t v15 = *(void *)(v86 + 8);
      if (*(void *)v86 == v15)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v16 = *v14;
        if (*v14) {
          uint64_t v16 = (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 4;
        }
      }
      uint64_t v81 = v16;
      uint64_t v85 = (v9[1] - *v9) >> 4;
      if (v16 != v85)
      {
        *(void *)&long long v84 = &v81;
        *((void *)&v84 + 1) = &v85;
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()();
      }
      uint64_t v20 = v15 - (void)v14;
      *(void *)&long long v84 = v20 >> 4;
      if (v20 != 16)
      {
        uint64_t v81 = (uint64_t)&v84;
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()();
      }
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100](v13);
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::push_back[abi:ne180100](v13, *(long long **)v86);
      uint64_t v21 = (std::__shared_weak_count *)*((void *)&v86 + 1);
      if (!*((void *)&v86 + 1)) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if (v10 == (v9[1] - *v9) >> 4)
    {
      unint64_t v11 = 2;
      unint64_t v12 = 1;
      goto LABEL_12;
    }
    turi::query_eval::query_context::get_next(this, 2uLL, &v86);
    turi::query_eval::query_context::get_next(this, 1uLL, &v84);
    if (!(void)v84) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator()();
    }
    if (!(void)v86) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#5}::operator()();
    }
    uint64_t v17 = *(void *)v86;
    uint64_t v18 = *(void *)(v86 + 8);
    if (*(void *)v86 == v18 || !*(void *)v17) {
      unint64_t v19 = 0;
    }
    else {
      unint64_t v19 = (uint64_t)(*(void *)(*(void *)v17 + 8) - **(void **)v17) >> 4;
    }
    uint64_t v85 = v19;
    uint64_t v83 = (v9[1] - *v9) >> 4;
    if (v19 != v83)
    {
      uint64_t v81 = (uint64_t)&v85;
      long long v82 = &v83;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#6}::operator()();
    }
    uint64_t v24 = *(uint64_t **)v84;
    uint64_t v23 = *(void *)(v84 + 8);
    if (*(void *)v84 == v23)
    {
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = *v24;
      if (*v24) {
        uint64_t v25 = (uint64_t)(*(void *)(v25 + 8) - *(void *)v25) >> 4;
      }
    }
    uint64_t v85 = v25;
    uint64_t v83 = v19;
    if (v25 != v19)
    {
      uint64_t v81 = (uint64_t)&v85;
      long long v82 = &v83;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#7}::operator()();
    }
    uint64_t v26 = v18 - v17;
    uint64_t v81 = v26 >> 4;
    if (v26 != 16)
    {
      uint64_t v85 = (uint64_t)&v81;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#8}::operator()();
    }
    uint64_t v81 = (v23 - (uint64_t)v24) >> 4;
    if (v23 - (void)v24 != 16)
    {
      uint64_t v85 = (uint64_t)&v81;
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#9}::operator()();
    }
    turi::sframe_rows::resize((turi::sframe_rows *)v87, 1uLL, v19);
    uint64_t v77 = v6;
    uint64_t v78 = v5;
    int v28 = (uint64_t ***)v84;
    int v80 = (uint64_t ***)v86;
    atomic_ullong *volatile v29 = (uint64_t ***)v87;
    if (!*(unsigned char *)(v87 + 24)) {
      turi::sframe_rows::ensure_unique((turi::sframe_rows *)v87);
    }
    uint64_t v30 = *v9;
    uint64_t v31 = v9[1];
    if (*v9 == v31)
    {
LABEL_139:
      if (*((void *)&v84 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v84 + 1));
      }
      uint64_t v21 = (std::__shared_weak_count *)*((void *)&v86 + 1);
      uint64_t v6 = v77;
      uint64_t v5 = v78;
      if (!*((void *)&v86 + 1)) {
        goto LABEL_27;
      }
LABEL_26:
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_27:
      turi::query_eval::query_context::emit((uint64_t)this, &v87);
      if (*((void *)&v87 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v87 + 1));
      }
      goto LABEL_29;
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    atomic_ullong v79 = v28;
    while (1)
    {
      uint64_t v34 = (unint64_t *)(v30 + v32);
      switch(*(unsigned char *)(v30 + v32 + 12))
      {
        case 0:
          if (!*v34) {
            goto LABEL_67;
          }
          goto LABEL_50;
        case 1:
          v27.n128_u64[0] = *v34;
          if (*(double *)v34 != 0.0) {
            goto LABEL_50;
          }
          goto LABEL_67;
        case 2:
          unint64_t v41 = *v34;
          if (*(char *)(v41 + 31) < 0)
          {
            if (*(void *)(v41 + 16))
            {
LABEL_50:
              uint64_t v35 = ***v28;
              uint64_t v36 = ***v29;
              if (v35 != v36)
              {
                uint64_t v37 = v36 + v32;
                switch(*(unsigned char *)(v36 + v32 + 12))
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v38 = *(atomic_ullong *volatile *)v37;
                      if (!*(void *)v37) {
                        goto LABEL_132;
                      }
                      if (*((char *)v38 + 31) < 0) {
                        operator delete((void *)v38[1]);
                      }
                      atomic_ullong *volatile v39 = v38;
                      uint64_t v40 = 0x1012C404EF22A49;
                      goto LABEL_109;
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v60 = *(atomic_ullong *volatile *)v37;
                      if (!*(void *)v37) {
                        goto LABEL_132;
                      }
                      char v61 = (void *)v60[1];
                      if (v61)
                      {
                        v60[2] = (atomic_ullong)v61;
                        operator delete(v61);
                      }
                      atomic_ullong *volatile v39 = v60;
                      uint64_t v40 = 0x1080C409938AC02;
                      goto LABEL_109;
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v49 = *(atomic_ullong *volatile *)v37;
                      if (!*(void *)v37) {
                        goto LABEL_132;
                      }
                      uint64_t v81 = (uint64_t)(v49 + 1);
                      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
                      goto LABEL_117;
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v49 = *(atomic_ullong *volatile *)v37;
                      if (!*(void *)v37) {
                        goto LABEL_132;
                      }
                      uint64_t v81 = (uint64_t)(v49 + 1);
                      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
LABEL_117:
                      atomic_ullong *volatile v64 = v49;
                      uint64_t v65 = 0x1020C405E66F15BLL;
                      goto LABEL_131;
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v72 = *(atomic_ullong *volatile *)v37;
                      if (*(void *)v37)
                      {
                        boost::detail::shared_count::~shared_count((atomic_uint **)v72 + 2);
                        atomic_ullong *volatile v64 = v72;
                        uint64_t v65 = 0x1030C40F1F0227BLL;
LABEL_131:
                        MEMORY[0x22A614FA0](v64, v65);
                      }
                      goto LABEL_132;
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      atomic_ullong *volatile v54 = *(atomic_ullong *volatile *)v37;
                      if (*(void *)v37)
                      {
                        uint64_t v55 = (void *)v54[6];
                        if (v55)
                        {
                          v54[7] = (atomic_ullong)v55;
                          operator delete(v55);
                        }
                        uint64_t v56 = (void *)v54[3];
                        if (v56)
                        {
                          v54[4] = (atomic_ullong)v56;
                          operator delete(v56);
                        }
                        uint64_t v57 = (std::__shared_weak_count *)v54[2];
                        if (v57) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
                        }
                        atomic_ullong *volatile v39 = v54;
                        uint64_t v40 = 0x1030C407B73B9F7;
LABEL_109:
                        MEMORY[0x22A614FA0](v39, v40, v27);
                      }
LABEL_132:
                      *(void *)uint64_t v37 = 0;
                      int v28 = v79;
                    }
                    break;
                  default:
                    break;
                }
                uint64_t v73 = *(void *)(v35 + v32);
                *(void *)(v37 + 5) = *(void *)(v35 + v32 + 5);
                *(void *)uint64_t v37 = v73;
                unsigned int v74 = *(unsigned __int8 *)(v35 + v32 + 12);
                *(unsigned char *)(v37 + 12) = v74;
                BOOL v69 = v74 > 9;
                int v75 = (1 << v74) & 0x33C;
                if (!v69 && v75 != 0) {
                  goto LABEL_137;
                }
              }
              goto LABEL_138;
            }
          }
          else if (*(unsigned char *)(v41 + 31))
          {
            goto LABEL_50;
          }
LABEL_67:
          uint64_t v42 = ***v80;
          uint64_t v43 = ***v29;
          if (v42 != v43)
          {
            uint64_t v44 = v43 + v32;
            switch(*(unsigned char *)(v43 + v32 + 12))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v45 = *(atomic_ullong *volatile *)v44;
                  if (!*(void *)v44) {
                    goto LABEL_122;
                  }
                  if (*((char *)v45 + 31) < 0) {
                    operator delete((void *)v45[1]);
                  }
                  atomic_ullong *volatile v46 = v45;
                  uint64_t v47 = 0x1012C404EF22A49;
                  goto LABEL_103;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v58 = *(atomic_ullong *volatile *)v44;
                  if (!*(void *)v44) {
                    goto LABEL_122;
                  }
                  long long v59 = (void *)v58[1];
                  if (v59)
                  {
                    v58[2] = (atomic_ullong)v59;
                    operator delete(v59);
                  }
                  atomic_ullong *volatile v46 = v58;
                  uint64_t v47 = 0x1080C409938AC02;
                  goto LABEL_103;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v48 = *(atomic_ullong *volatile *)v44;
                  if (!*(void *)v44) {
                    goto LABEL_122;
                  }
                  uint64_t v81 = (uint64_t)(v48 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
                  goto LABEL_113;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v48 = *(atomic_ullong *volatile *)v44;
                  if (!*(void *)v44) {
                    goto LABEL_122;
                  }
                  uint64_t v81 = (uint64_t)(v48 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
LABEL_113:
                  atomic_ullong *volatile v62 = v48;
                  uint64_t v63 = 0x1020C405E66F15BLL;
                  goto LABEL_121;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v66 = *(atomic_ullong *volatile *)v44;
                  if (*(void *)v44)
                  {
                    boost::detail::shared_count::~shared_count((atomic_uint **)v66 + 2);
                    atomic_ullong *volatile v62 = v66;
                    uint64_t v63 = 0x1030C40F1F0227BLL;
LABEL_121:
                    MEMORY[0x22A614FA0](v62, v63);
                  }
                  goto LABEL_122;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v44, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v50 = *(atomic_ullong *volatile *)v44;
                  if (*(void *)v44)
                  {
                    std::string v51 = (void *)v50[6];
                    if (v51)
                    {
                      v50[7] = (atomic_ullong)v51;
                      operator delete(v51);
                    }
                    double v52 = (void *)v50[3];
                    if (v52)
                    {
                      v50[4] = (atomic_ullong)v52;
                      operator delete(v52);
                    }
                    int v53 = (std::__shared_weak_count *)v50[2];
                    if (v53) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
                    }
                    atomic_ullong *volatile v46 = v50;
                    uint64_t v47 = 0x1030C407B73B9F7;
LABEL_103:
                    MEMORY[0x22A614FA0](v46, v47, v27);
                  }
LABEL_122:
                  *(void *)uint64_t v44 = 0;
                  int v28 = v79;
                }
                break;
              default:
                break;
            }
            uint64_t v67 = *(void *)(v42 + v32);
            *(void *)(v44 + 5) = *(void *)(v42 + v32 + 5);
            *(void *)uint64_t v44 = v67;
            unsigned int v68 = *(unsigned __int8 *)(v42 + v32 + 12);
            *(unsigned char *)(v44 + 12) = v68;
            BOOL v69 = v68 > 9;
            int v70 = (1 << v68) & 0x33C;
            if (!v69 && v70 != 0)
            {
              uint64_t v37 = v43 + 16 * v33;
LABEL_137:
              atomic_fetch_add(*(atomic_ullong *volatile *)v37, 1uLL);
            }
          }
LABEL_138:
          ++v33;
          v32 += 16;
          if (v30 + v32 == v31) {
            goto LABEL_139;
          }
          break;
        case 3:
        case 4:
        case 5:
          if (*(void *)(*v34 + 8) != *(void *)(*v34 + 16)) {
            goto LABEL_50;
          }
          goto LABEL_67;
        case 7:
          goto LABEL_67;
        case 8:
          if (*(void *)(*v34 + 64) == 3) {
            goto LABEL_67;
          }
          goto LABEL_50;
        default:
          turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
      }
    }
  }
LABEL_29:
  if (*((void *)&v88 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v88 + 1));
  }
  if (v6) {
    int v22 = 132;
  }
  else {
    int v22 = 0;
  }
  *(_DWORD *)(v5 + 8) = v22;
}

void sub_224035E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 88);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"condition->num_columns()", 24);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 68, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224036124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::accumulate[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,unsigned long,turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(unsigned long,turi::flexible_type const&)#1}>(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  while (a1 != a2)
  {
    int v3 = 1;
    switch(a1[12])
    {
      case 0:
        double v5 = *(double *)a1;
        goto LABEL_10;
      case 1:
        BOOL v4 = *(double *)a1 == 0.0;
        goto LABEL_11;
      case 2:
        if (*(char *)(*(void *)a1 + 31) < 0) {
          double v5 = *(double *)(*(void *)a1 + 16);
        }
        else {
          *(void *)&double v5 = *(unsigned __int8 *)(*(void *)a1 + 31);
        }
LABEL_10:
        BOOL v4 = *(void *)&v5 == 0;
        goto LABEL_11;
      case 3:
      case 4:
      case 5:
        BOOL v4 = *(void *)(*(void *)a1 + 8) == *(void *)(*(void *)a1 + 16);
        goto LABEL_11;
      case 7:
        goto LABEL_14;
      case 8:
        BOOL v4 = *(void *)(*(void *)a1 + 64) == 3;
LABEL_11:
        int v3 = v4;
LABEL_14:
        a3 += v3 ^ 1u;
        a1 += 16;
        break;
      default:
        turi::flexible_type::is_zero(void)const::{lambda(void)#1}::operator()();
    }
  }
  return a3;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input->num_rows()", 17);
  double v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"condition_column.size()", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 98, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240364A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"input->num_columns()", 20);
  double v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 99, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224036730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"istrue != nullptr", 17);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 107, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224036930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#5}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"isfalse != nullptr", 18);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 108, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#5}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224036B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#6}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"isfalse->num_rows()", 19);
  double v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"condition_column.size()", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 109, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224036DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#7}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"istrue->num_rows()", 18);
  double v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"condition_column.size()", 23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 110, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#7}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224037058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#8}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"isfalse->num_columns()", 22);
  double v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 111, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#8}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240372E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#9}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", 122);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"istrue->num_columns()", 21);
  double v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/ternary_operator.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)14>::execute(turi::query_eval::query_context &)::{lambda(void)#9}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224037578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::query_operator::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  int v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  BOOL v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"false", 5);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    double v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator.hpp", "operator()", 136, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::query_operator::from_planner_node(std::shared_ptr<turi::query_eval::planner_node>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224037778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,BOOL>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, void **a4)
{
  char v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        char v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        return v9;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        char v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x38uLL);
    unint64_t v12 = v11;
    uint64_t v13 = (*a4)[1];
    v11[4] = **a4;
    v11[5] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *((unsigned char *)v11 + 48) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
  }
  return (uint64_t **)v12;
}

void std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<turi::query_eval::planner_node> const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *std::__function::__value_func<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)0>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  int v2 = *(uint64_t ***)a1;
  int v3 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_224037A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)1>::get(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v4 = *a1;
  double v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr((uint64_t)&v4, a2, a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_224037AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)2>::get(unsigned int **a1@<X0>, void *a2@<X8>)
{
  int v2 = *a1;
  int v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::extract_field<turi::query_eval::visitor_get_name,std::string>((void *)*v2, a2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_224037B5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)3>::get(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v3 = (std::__shared_weak_count *)a1[1];
  uint64_t v4 = *a1;
  double v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr((uint64_t)&v4, a2, a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_224037BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)4>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  int v2 = *(uint64_t ***)a1;
  int v3 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_224037C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)5>::get(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  int v2 = *(_DWORD **)a1;
  int v3 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_224037C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)6>::get(uint64_t *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  uint64_t v2 = *a1;
  int v3 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::repr(&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_224037CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)7>::get(uint64_t *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  uint64_t v2 = *a1;
  int v3 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::repr(&v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_224037D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)10>::get(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v3 = *a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::repr((uint64_t)&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224037DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)11>::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v3 = *a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::repr(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224037E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::visitor_repr<(turi::query_eval::planner_node_type)12>::get(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v3 = *a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::repr(&v3, a2);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_224037E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(uint64_t ***a1)
{
  v73[2] = *(atomic_ullong **)MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  LODWORD(v60[0].__r_.__value_.__l.__data_) = *(_DWORD *)*a1;
  if (LODWORD(v60[0].__r_.__value_.__l.__data_))
  {
    __p[0] = v60;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v1 + 1), (const void **)__p);
  if (SBYTE7(v67) < 0) {
    operator delete(__p[0]);
  }
  if (!v3) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()();
  }
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
  uint64_t v5 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v4 + 1), (const void **)__p);
  if (SBYTE7(v67) < 0) {
    operator delete(__p[0]);
  }
  if (!v5) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator()();
  }
  uint64_t v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
  uint64_t v7 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v6 + 1), (const void **)__p);
  if (SBYTE7(v67) < 0) {
    operator delete(__p[0]);
  }
  if (!v7) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator()();
  }
  unint64_t v8 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v60[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  uint64_t v9 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v8 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, v60);
  memset(v73, 0, 13);
  if ((atomic_ullong **)((char *)v9 + 56) != v73)
  {
    *(atomic_ullong **)((char *)v73 + 5) = *(atomic_ullong **)((char *)v9 + 61);
    v73[0] = *((atomic_ullong **)v9 + 7);
    BYTE4(v73[1]) = *((unsigned char *)v9 + 68);
    if (BYTE4(v73[1]) <= 9u && ((1 << SBYTE4(v73[1])) & 0x33C) != 0) {
      atomic_fetch_add(v73[0], 1uLL);
    }
  }
  if (SBYTE7(v67) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v10 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v65, "begin_index");
  __p[0] = &v65;
  unint64_t v11 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v10 + 1, (const void **)&v65.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  switch(*((unsigned char *)v11 + 68))
  {
    case 0:
    case 1:
    case 6:
    case 7:
      goto LABEL_37;
    case 2:
      uint64_t v13 = *((void *)v11 + 7);
      size_t __idx = 0;
      long long v14 = (char *)(v13 + 8);
      if (*(char *)(v13 + 31) < 0) {
        long long v14 = *(char **)(v13 + 8);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v14);
      std::stoll((const std::string *)__p, &__idx, 10);
      if (SBYTE7(v67) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v13 + 31) < 0) {
        uint64_t v15 = *(void *)(v13 + 16);
      }
      else {
        uint64_t v15 = *(unsigned __int8 *)(v13 + 31);
      }
      if (__idx != v15)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        atomic_ullong *volatile v38 = std::string::append(v60, " cannot be interpreted as an integer");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        *(void *)&long long v67 = *((void *)&v38->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_37;
    case 3:
      uint64_t v12 = *((void *)v11 + 7);
      __p[1] = 0;
      *(void *)&long long v67 = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v12 + 8), *(void *)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_37;
    case 4:
      uint64_t v16 = *((void *)v11 + 7);
      __p[1] = 0;
      *(void *)&long long v67 = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v60[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
      goto LABEL_37;
    case 5:
      uint64_t v17 = *((void *)v11 + 7);
      __p[1] = 0;
      *(void *)&long long v67 = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v60[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
      goto LABEL_37;
    case 8:
      uint64_t v18 = *((void *)v11 + 7);
      unint64_t v19 = *(atomic_uint **)(v18 + 16);
      __p[0] = *(void **)(v18 + 8);
      __p[1] = v19;
      if (v19) {
        atomic_fetch_add_explicit(v19 + 2, 1u, memory_order_relaxed);
      }
      long long v20 = *(_OWORD *)(v18 + 24);
      long long v21 = *(_OWORD *)(v18 + 56);
      long long v68 = *(_OWORD *)(v18 + 40);
      long long v69 = v21;
      long long v67 = v20;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_37;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v11 + 7) + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v68 + 1))
      {
        *(void *)&long long v69 = *((void *)&v68 + 1);
        operator delete(*((void **)&v68 + 1));
      }
      if ((void)v67)
      {
        *((void *)&v67 + 1) = v67;
        operator delete((void *)v67);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_37:
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      uint64_t v22 = *a1;
      std::string::basic_string[abi:ne180100]<0>(&v65, "end_index");
      __p[0] = &v65;
      uint64_t v23 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v22 + 1, (const void **)&v65.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
      switch(*((unsigned char *)v23 + 68))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          break;
        case 2:
          uint64_t v25 = *((void *)v23 + 7);
          size_t __idx = 0;
          uint64_t v26 = (char *)(v25 + 8);
          if (*(char *)(v25 + 31) < 0) {
            uint64_t v26 = *(char **)(v25 + 8);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v26);
          std::stoll((const std::string *)__p, &__idx, 10);
          if (SBYTE7(v67) < 0) {
            operator delete(__p[0]);
          }
          if (*(char *)(v25 + 31) < 0) {
            uint64_t v27 = *(void *)(v25 + 16);
          }
          else {
            uint64_t v27 = *(unsigned __int8 *)(v25 + 31);
          }
          if (__idx != v27)
          {
            uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            unint64_t v41 = std::string::append(v60, " cannot be interpreted as an integer");
            long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            *(void *)&long long v67 = *((void *)&v41->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v40, (const std::string *)__p);
            __cxa_throw(v40, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          return result;
        case 3:
          uint64_t v24 = *((void *)v23 + 7);
          __p[1] = 0;
          *(void *)&long long v67 = 0;
          __p[0] = 0;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v24 + 8), *(void *)(v24 + 16), (uint64_t)(*(void *)(v24 + 16) - *(void *)(v24 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          break;
        case 4:
          uint64_t v28 = *((void *)v23 + 7);
          __p[1] = 0;
          *(void *)&long long v67 = 0;
          __p[0] = 0;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v28 + 8), *(uint64_t **)(v28 + 16), (uint64_t)(*(void *)(v28 + 16) - *(void *)(v28 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v60[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
          break;
        case 5:
          uint64_t v29 = *((void *)v23 + 7);
          __p[1] = 0;
          *(void *)&long long v67 = 0;
          __p[0] = 0;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v29 + 8), *(uint64_t **)(v29 + 16), (uint64_t)(*(void *)(v29 + 16) - *(void *)(v29 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v60[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v60);
          break;
        case 8:
          uint64_t v30 = *((void *)v23 + 7);
          uint64_t v31 = *(atomic_uint **)(v30 + 16);
          __p[0] = *(void **)(v30 + 8);
          __p[1] = v31;
          if (v31) {
            atomic_fetch_add_explicit(v31 + 2, 1u, memory_order_relaxed);
          }
          long long v32 = *(_OWORD *)(v30 + 24);
          long long v33 = *(_OWORD *)(v30 + 56);
          long long v68 = *(_OWORD *)(v30 + 40);
          long long v69 = v33;
          long long v67 = v32;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
          break;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v23 + 7) + 8);
          turi::flexible_type_fail(0);
          if (*((void *)&v68 + 1))
          {
            *(void *)&long long v69 = *((void *)&v68 + 1);
            operator delete(*((void **)&v68 + 1));
          }
          if ((void)v67)
          {
            *((void *)&v67 + 1) = v67;
            operator delete((void *)v67);
          }
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
          break;
        default:
          goto LABEL_130;
      }
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v60);
      uint64_t v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Const(", 6);
      switch(BYTE4(v73[1]))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_70;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_70:
          __p[0] = *(void **)MEMORY[0x263F8C2B8];
          uint64_t v36 = *(void *)(MEMORY[0x263F8C2B8] + 72);
          *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2B8] + 64);
          *(void *)&long long v67 = v36;
          *((void *)&v67 + 1) = MEMORY[0x263F8C318] + 16;
          if (v71 < 0) {
            operator delete(v70);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x22A614E30](&v72);
          break;
        case 2:
          if (*((char *)v73[0] + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)v73[0] + 1), v73[0][2]);
          }
          else
          {
            long long v35 = *(_OWORD *)(v73[0] + 1);
            v65.__r_.__value_.__r.__words[2] = v73[0][3];
            *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v35;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, v73[0] + 1);
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, v73[0] + 1);
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, v73[0] + 1);
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)v73, &v65);
          break;
        case 7:
          memset(&v65, 0, sizeof(v65));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)__p, v73[0] + 1);
          break;
        default:
          goto LABEL_130;
      }
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v43 = &v65;
      }
      else {
        uint64_t v43 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v65.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v43, size);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)")[", 2);
      atomic_ullong *volatile v45 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)":", 1);
      atomic_ullong *volatile v46 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"]", 1);
      std::stringbuf::str();
      v60[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
      *(std::string::size_type *)((char *)v60[0].__r_.__value_.__r.__words
                                + *(void *)(v60[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v60[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
      if (v62 < 0) {
        operator delete(v61);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      uint64_t result = MEMORY[0x22A614E30](&v63);
      switch(BYTE4(v73[1]))
      {
        case 2:
          if (atomic_fetch_add(v73[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v48 = v73[0];
            if (v73[0])
            {
              if (*((char *)v73[0] + 31) < 0) {
                operator delete(*((void **)v73[0] + 1));
              }
              atomic_ullong *volatile v49 = v48;
              uint64_t v50 = 0x1012C404EF22A49;
              goto LABEL_124;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v73[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v57 = v73[0];
            if (v73[0])
            {
              atomic_ullong *volatile v58 = (void *)v73[0][1];
              if (v58)
              {
                v73[0][2] = (atomic_ullong)v58;
                operator delete(v58);
              }
              atomic_ullong *volatile v49 = v57;
              uint64_t v50 = 0x1080C409938AC02;
              goto LABEL_124;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v73[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string v51 = v73[0];
            if (v73[0])
            {
              __p[0] = v73[0] + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_119;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v73[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            std::string v51 = v73[0];
            if (v73[0])
            {
              __p[0] = v73[0] + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_119:
              atomic_ullong *volatile v49 = v51;
              uint64_t v50 = 0x1020C405E66F15BLL;
              goto LABEL_124;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v73[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            long long v59 = v73[0];
            if (v73[0])
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v73[0] + 2);
              atomic_ullong *volatile v49 = v59;
              unsigned int v56 = -235920773;
              goto LABEL_123;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v73[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            double v52 = v73[0];
            if (v73[0])
            {
              int v53 = (void *)v73[0][6];
              if (v53)
              {
                v73[0][7] = (atomic_ullong)v53;
                operator delete(v53);
              }
              atomic_ullong *volatile v54 = (void *)v52[3];
              if (v54)
              {
                v52[4] = (atomic_ullong)v54;
                operator delete(v54);
              }
              uint64_t v55 = (std::__shared_weak_count *)v52[2];
              if (v55) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v55);
              }
              atomic_ullong *volatile v49 = v52;
              unsigned int v56 = 2071181815;
LABEL_123:
              uint64_t v50 = v56 | 0x1030C4000000000;
LABEL_124:
              uint64_t result = MEMORY[0x22A614FA0](v49, v50);
            }
          }
          break;
        default:
          return result;
      }
      break;
    default:
LABEL_130:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
  return result;
}

void sub_224038C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v59 & 1) == 0)
    {
LABEL_8:
      if (a51 < 0) {
        operator delete(a46);
      }
      switch(*(unsigned char *)(v60 - 108))
      {
        case 2:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          uint64_t v62 = *(void *)(v60 - 120);
          if (!v62) {
            goto LABEL_36;
          }
          if (*(char *)(v62 + 31) < 0) {
            operator delete(*(void **)(v62 + 8));
          }
          uint64_t v63 = (void *)v62;
          uint64_t v64 = 0x1012C404EF22A49;
          goto LABEL_35;
        case 3:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          std::string v65 = *(void **)(v60 - 120);
          if (!v65) {
            goto LABEL_36;
          }
          atomic_ullong *volatile v66 = (void *)v65[1];
          if (v66)
          {
            v65[2] = v66;
            operator delete(v66);
          }
          uint64_t v63 = v65;
          uint64_t v64 = 0x1080C409938AC02;
          goto LABEL_35;
        case 4:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          long long v67 = *(void **)(v60 - 120);
          if (!v67) {
            goto LABEL_36;
          }
          a9 = v67 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
          goto LABEL_27;
        case 5:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          long long v67 = *(void **)(v60 - 120);
          if (!v67) {
            goto LABEL_36;
          }
          a9 = v67 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
LABEL_27:
          uint64_t v63 = v67;
          uint64_t v64 = 0x1020C405E66F15BLL;
          goto LABEL_35;
        case 8:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          uint64_t v68 = *(void *)(v60 - 120);
          if (!v68) {
            goto LABEL_36;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v68 + 16));
          uint64_t v63 = (void *)v68;
          unsigned int v69 = -235920773;
          goto LABEL_34;
        case 9:
          if (atomic_fetch_add(*(atomic_ullong *volatile *)(v60 - 120), 0xFFFFFFFFFFFFFFFFLL) != 1) {
            goto LABEL_36;
          }
          int v70 = *(void **)(v60 - 120);
          if (!v70) {
            goto LABEL_36;
          }
          uint64_t v63 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v70);
          unsigned int v69 = 2071181815;
LABEL_34:
          uint64_t v64 = v69 | 0x1030C4000000000;
LABEL_35:
          MEMORY[0x22A614FA0](v63, v64);
LABEL_36:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_36;
      }
    }
  }
  else if (!v59)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v58);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::CONSTANT_NODE", 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224039198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"value\")", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 119, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224039398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"begin_index\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 120, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224039598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"end_index\")", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/constant.hpp", "operator()", 121, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)0>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224039798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 64) - *(void *)(*(void *)a1 + 56);
  v34.__r_.__value_.__r.__words[0] = v4 >> 4;
  if (v4 != 32)
  {
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "Append(");
  char v7 = *(uint64_t **)(*(void *)a1 + 56);
  uint64_t v9 = *v7;
  unint64_t v8 = (std::__shared_weak_count *)v7[1];
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v10 + 48))(v29);
  if ((v30 & 0x80u) == 0) {
    unint64_t v11 = v29;
  }
  else {
    unint64_t v11 = (void **)v29[0];
  }
  if ((v30 & 0x80u) == 0) {
    std::string::size_type v12 = v30;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v29[1];
  }
  uint64_t v13 = std::string::append(&v31, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  char v15 = std::string::append(&v32, ",");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(*(void *)(*(void *)a1 + 56) + 24);
  uint64_t v24 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(void *)(a2 + 24);
  if (!v18) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v18 + 48))(__p);
  if ((v26 & 0x80u) == 0) {
    unint64_t v19 = __p;
  }
  else {
    unint64_t v19 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v20 = v26;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  long long v21 = std::string::append(&v33, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  uint64_t v23 = std::string::append(&v34, ")");
  *a3 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_224039B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/append.hpp", "operator()", 153, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224039D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 64) - *(void *)(*(void *)a1 + 56);
  v34.__r_.__value_.__r.__words[0] = v4 >> 4;
  if (v4 != 32)
  {
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(&v31, "Filter(");
  char v7 = *(uint64_t **)(*(void *)a1 + 56);
  uint64_t v9 = *v7;
  unint64_t v8 = (std::__shared_weak_count *)v7[1];
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a2 + 24);
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v10 + 48))(v29);
  if ((v30 & 0x80u) == 0) {
    unint64_t v11 = v29;
  }
  else {
    unint64_t v11 = (void **)v29[0];
  }
  if ((v30 & 0x80u) == 0) {
    std::string::size_type v12 = v30;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)v29[1];
  }
  uint64_t v13 = std::string::append(&v31, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  char v15 = std::string::append(&v32, "[");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(*(void *)(*(void *)a1 + 56) + 24);
  uint64_t v24 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(void *)(a2 + 24);
  if (!v18) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v18 + 48))(__p);
  if ((v26 & 0x80u) == 0) {
    unint64_t v19 = __p;
  }
  else {
    unint64_t v19 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v20 = v26;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  long long v21 = std::string::append(&v33, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  uint64_t v23 = std::string::append(&v34, "])");
  *a3 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if ((char)v30 < 0) {
    operator delete(v29[0]);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_22403A0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (*(char *)(v37 - 57) < 0) {
    operator delete(*(void **)(v37 - 80));
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (*(char *)(v37 - 89) < 0) {
    operator delete(*(void **)(v37 - 112));
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->inputs.size()", 20);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/logical_filter.hpp", "operator()", 160, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403A308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(uint64_t ***a1)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  *(_DWORD *)atomic_ullong *volatile v102 = *(_DWORD *)*a1;
  if (*(_DWORD *)v102 != 4)
  {
    __p[0] = v102;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  uint64_t v3 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v1 + 1), (const void **)__p);
  if (v92 < 0) {
    operator delete(__p[0]);
  }
  if (!v3) {
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()();
  }
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  *(void *)atomic_ullong *volatile v102 = __p;
  uint64_t v5 = *((void *)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)v102)+ 7);
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  uint64_t v96 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v96, *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4);
  if (v92 < 0) {
    operator delete(__p[0]);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PR(", 3);
  if (v97 == v96)
  {
LABEL_133:
    v102[0] = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v102, 1);
    std::stringbuf::str();
    __p[0] = *(void **)MEMORY[0x263F8C2C8];
    *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
    if (v94 < 0) {
      operator delete(v93);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x22A614E30](&v95);
    __p[0] = &v96;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    uint64_t v6 = 0;
    switch(v96[12])
    {
      case 0:
        uint64_t v6 = *(void *)v96;
        goto LABEL_32;
      case 1:
        uint64_t v6 = (uint64_t)*(double *)v96;
        goto LABEL_32;
      case 2:
        uint64_t v8 = *(void *)v96;
        uint64_t v9 = (char **)(*(void *)v96 + 8);
        uint64_t v85 = 0;
        uint64_t v10 = (char *)v9;
        if (*(char *)(v8 + 31) < 0) {
          uint64_t v10 = *v9;
        }
        unint64_t v11 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v102, v10);
        uint64_t v6 = std::stoll(v11, (size_t *)&v85, 10);
        if ((v102[23] & 0x80000000) != 0) {
          operator delete(*(void **)v102);
        }
        if (*(char *)(v8 + 31) < 0) {
          std::string::size_type v12 = *(void **)(v8 + 16);
        }
        else {
          std::string::size_type v12 = (void *)*(unsigned __int8 *)(v8 + 31);
        }
        if (v85 != v12)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          int v80 = std::string::append((std::string *)v99, " cannot be interpreted as an integer");
          long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          *(void *)&v102[16] = *((void *)&v80->__r_.__value_.__l + 2);
          *(_OWORD *)atomic_ullong *volatile v102 = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)v102);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_32;
      case 3:
        uint64_t v7 = *(void *)v96;
        memset(v102, 0, 24);
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v102, *(const void **)(v7 + 8), *(void *)(v7 + 16), (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (*(void *)v102)
        {
          *(void *)&v102[8] = *(void *)v102;
          operator delete(*(void **)v102);
        }
        goto LABEL_31;
      case 4:
        uint64_t v13 = *(void *)v96;
        memset(v102, 0, 24);
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v102, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 4);
        turi::flexible_type_fail(0);
        *(void *)uint64_t v99 = v102;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        goto LABEL_31;
      case 5:
        uint64_t v14 = *(void *)v96;
        memset(v102, 0, 24);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v102, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 5);
        turi::flexible_type_fail(0);
        *(void *)uint64_t v99 = v102;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        goto LABEL_31;
      case 6:
        uint64_t v6 = (uint64_t)(*(void *)v96 << 8) >> 8;
        goto LABEL_32;
      case 7:
        goto LABEL_32;
      case 8:
        uint64_t v15 = *(void *)v96;
        uint64_t v16 = *(void *)(*(void *)v96 + 16);
        *(void *)atomic_ullong *volatile v102 = *(void *)(*(void *)v96 + 8);
        *(void *)&v102[8] = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 1u, memory_order_relaxed);
        }
        long long v17 = *(_OWORD *)(v15 + 24);
        long long v18 = *(_OWORD *)(v15 + 56);
        long long v103 = *(_OWORD *)(v15 + 40);
        long long v104 = v18;
        *(_OWORD *)&v102[16] = v17;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&v102[8]);
        goto LABEL_31;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(v102, *(void *)v96 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v103 + 1))
        {
          *(void *)&long long v104 = *((void *)&v103 + 1);
          operator delete(*((void **)&v103 + 1));
        }
        if (*(void *)&v102[16])
        {
          *(void *)&v102[24] = *(void *)&v102[16];
          operator delete(*(void **)&v102[16]);
        }
        if (*(void *)&v102[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v102[8]);
        }
LABEL_31:
        uint64_t v6 = 0;
LABEL_32:
        unint64_t v19 = operator new(8uLL);
        v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        void *v19 = v6;
        v106.__r_.__value_.__l.__size_ = (std::string::size_type)(v19 + 1);
        v106.__r_.__value_.__r.__words[2] = (std::string::size_type)(v19 + 1);
        v89 = 0;
        uint64_t v90 = 0;
        long long v88 = 0;
        *(void *)atomic_ullong *volatile v102 = &v88;
        v102[8] = 0;
        long long v88 = operator new(0x18uLL);
        v89 = v88;
        uint64_t v90 = v88 + 3;
        v89 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const*,std::vector<unsigned long> const*,std::vector<unsigned long>*>((uint64_t)&v90, (uint64_t)&v106, (uint64_t)&v107, v88);
        if (v106.__r_.__value_.__r.__words[0])
        {
          v106.__r_.__value_.__l.__size_ = v106.__r_.__value_.__r.__words[0];
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        std::string::size_type v20 = v96;
        if ((unint64_t)(v97 - v96) < 0x11)
        {
LABEL_120:
          char v71 = v88;
          uint64_t v72 = v89;
          if (v88 != v89)
          {
            char v73 = 1;
            do
            {
              if ((v73 & 1) == 0) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)",", 1);
              }
              uint64_t v74 = (uint64_t)(v71[1] - *v71) >> 3;
              if (v74 != 1)
              {
                if (v74 == 3)
                {
                  double v76 = (void *)std::ostream::operator<<();
                  v102[0] = 44;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)v102, 1);
                  uint64_t v77 = (void *)std::ostream::operator<<();
                  v102[0] = 44;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v102, 1);
                }
                else if (v74 == 2)
                {
                  int v75 = (void *)std::ostream::operator<<();
                  v102[0] = 44;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v102, 1);
                }
                else
                {
                  uint64_t v78 = (void *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)",...,", 5);
                }
              }
              std::ostream::operator<<();
              char v73 = 0;
              v71 += 3;
            }
            while (v71 != v72);
          }
          *(void *)atomic_ullong *volatile v102 = &v88;
          std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v102);
          goto LABEL_133;
        }
        unint64_t v21 = 1;
        while (2)
        {
          long long v22 = &v20[16 * v21];
          uint64_t v23 = *(void *)(*(v89 - 2) - 8) + 1;
          switch(v22[12])
          {
            case 0:
              if (*(void *)v22 == v23) {
                goto LABEL_47;
              }
              goto LABEL_37;
            case 1:
              if (*(double *)v22 == (double)v23) {
                goto LABEL_47;
              }
              goto LABEL_37;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_37;
            case 6:
              uint64_t v26 = *(void *)v22;
              int v27 = *((_DWORD *)v22 + 2);
              if (v23 != v26 << 8 >> 8 || v27 != 0)
              {
LABEL_37:
                uint64_t v24 = &v96[16 * v21];
                uint64_t v25 = 0;
                switch(v24[12])
                {
                  case 0:
                    uint64_t v25 = *(void *)v24;
                    goto LABEL_71;
                  case 1:
                    uint64_t v25 = (uint64_t)*(double *)v24;
                    goto LABEL_71;
                  case 2:
                    uint64_t v33 = *(void *)v24;
                    std::string v34 = (char **)(*(void *)v24 + 8);
                    size_t __idx = 0;
                    long long v35 = (char *)v34;
                    if (*(char *)(v33 + 31) < 0) {
                      long long v35 = *v34;
                    }
                    uint64_t v36 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v102, v35);
                    uint64_t v25 = std::stoll(v36, &__idx, 10);
                    if ((v102[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v102);
                    }
                    if (*(char *)(v33 + 31) < 0) {
                      uint64_t v37 = *(void *)(v33 + 16);
                    }
                    else {
                      uint64_t v37 = *(unsigned __int8 *)(v33 + 31);
                    }
                    if (__idx != v37)
                    {
                      long long v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::operator+<char>();
                      uint64_t v83 = std::string::append(&v106, " cannot be interpreted as an integer");
                      long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
                      *(void *)&v102[16] = *((void *)&v83->__r_.__value_.__l + 2);
                      *(_OWORD *)atomic_ullong *volatile v102 = v84;
                      v83->__r_.__value_.__l.__size_ = 0;
                      v83->__r_.__value_.__r.__words[2] = 0;
                      v83->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(v82, (const std::string *)v102);
                      __cxa_throw(v82, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                    }
                    goto LABEL_71;
                  case 3:
                    uint64_t v32 = *(void *)v24;
                    memset(v102, 0, 24);
                    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v102, *(const void **)(v32 + 8), *(void *)(v32 + 16), (uint64_t)(*(void *)(v32 + 16) - *(void *)(v32 + 8)) >> 3);
                    turi::flexible_type_fail(0);
                    if (*(void *)v102)
                    {
                      *(void *)&v102[8] = *(void *)v102;
                      operator delete(*(void **)v102);
                    }
                    goto LABEL_70;
                  case 4:
                    uint64_t v38 = *(void *)v24;
                    memset(v102, 0, 24);
                    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v102, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(void *)(v38 + 16) - *(void *)(v38 + 8)) >> 4);
                    turi::flexible_type_fail(0);
                    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
                    goto LABEL_70;
                  case 5:
                    uint64_t v39 = *(void *)v24;
                    memset(v102, 0, 24);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v102, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(void *)(v39 + 16) - *(void *)(v39 + 8)) >> 5);
                    turi::flexible_type_fail(0);
                    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
                    goto LABEL_70;
                  case 6:
                    uint64_t v25 = (uint64_t)(*(void *)v24 << 8) >> 8;
                    goto LABEL_71;
                  case 7:
                    goto LABEL_71;
                  case 8:
                    uint64_t v40 = *(void *)v24;
                    uint64_t v41 = *(void *)(v40 + 16);
                    *(void *)uint64_t v99 = *(void *)(v40 + 8);
                    *(void *)&v99[8] = v41;
                    if (v41) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 + 8), 1u, memory_order_relaxed);
                    }
                    long long v42 = *(_OWORD *)(v40 + 24);
                    long long v43 = *(_OWORD *)(v40 + 56);
                    long long v100 = *(_OWORD *)(v40 + 40);
                    long long v101 = v43;
                    *(_OWORD *)&v99[16] = v42;
                    turi::flexible_type_fail(0);
                    boost::detail::shared_count::~shared_count((atomic_uint **)&v99[8]);
                    goto LABEL_70;
                  case 9:
                    turi::flexible_type_impl::ndarray<double>::ndarray(v102, *(void *)v24 + 8);
                    turi::flexible_type_fail(0);
                    if (*((void *)&v103 + 1))
                    {
                      *(void *)&long long v104 = *((void *)&v103 + 1);
                      operator delete(*((void **)&v103 + 1));
                    }
                    if (*(void *)&v102[16])
                    {
                      *(void *)&v102[24] = *(void *)&v102[16];
                      operator delete(*(void **)&v102[16]);
                    }
                    if (*(void *)&v102[8]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v102[8]);
                    }
LABEL_70:
                    uint64_t v25 = 0;
LABEL_71:
                    uint64_t v44 = operator new(8uLL);
                    uint64_t v85 = v44;
                    void *v44 = v25;
                    long long v86 = v44 + 1;
                    long long v87 = v44 + 1;
                    std::vector<std::vector<unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v88, (uint64_t)&v85);
                    if (v85)
                    {
                      long long v86 = v85;
                      operator delete(v85);
                    }
LABEL_115:
                    ++v21;
                    std::string::size_type v20 = v96;
                    if (v21 >= (v97 - v96) >> 4) {
                      goto LABEL_120;
                    }
                    continue;
                  default:
                    goto LABEL_142;
                }
              }
LABEL_47:
              uint64_t v29 = &v96[16 * v21];
              uint64_t v30 = 0;
              std::string v31 = v89;
              switch(v29[12])
              {
                case 0:
                  uint64_t v30 = *(void *)v29;
                  goto LABEL_98;
                case 1:
                  uint64_t v30 = (uint64_t)*(double *)v29;
                  goto LABEL_98;
                case 2:
                  uint64_t v46 = *(void *)v29;
                  uint64_t v47 = (char **)(*(void *)v29 + 8);
                  uint64_t v85 = 0;
                  atomic_ullong *volatile v48 = (char *)v47;
                  if (*(char *)(v46 + 31) < 0) {
                    atomic_ullong *volatile v48 = *v47;
                  }
                  atomic_ullong *volatile v49 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(v102, v48);
                  uint64_t v30 = std::stoll(v49, (size_t *)&v85, 10);
                  if ((v102[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v102);
                  }
                  if (*(char *)(v46 + 31) < 0) {
                    uint64_t v50 = *(void **)(v46 + 16);
                  }
                  else {
                    uint64_t v50 = (void *)*(unsigned __int8 *)(v46 + 31);
                  }
                  if (v85 != v50)
                  {
                    uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::operator+<char>();
                    unsigned int v69 = std::string::append(&v106, " cannot be interpreted as an integer");
                    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
                    *(void *)&v102[16] = *((void *)&v69->__r_.__value_.__l + 2);
                    *(_OWORD *)atomic_ullong *volatile v102 = v70;
                    v69->__r_.__value_.__l.__size_ = 0;
                    v69->__r_.__value_.__r.__words[2] = 0;
                    v69->__r_.__value_.__r.__words[0] = 0;
                    std::runtime_error::runtime_error(v68, (const std::string *)v102);
                    __cxa_throw(v68, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                  }
                  goto LABEL_98;
                case 3:
                  uint64_t v45 = *(void *)v29;
                  memset(v102, 0, 24);
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v102, *(const void **)(v45 + 8), *(void *)(v45 + 16), (uint64_t)(*(void *)(v45 + 16) - *(void *)(v45 + 8)) >> 3);
                  turi::flexible_type_fail(0);
                  if (*(void *)v102)
                  {
                    *(void *)&v102[8] = *(void *)v102;
                    operator delete(*(void **)v102);
                  }
                  goto LABEL_97;
                case 4:
                  uint64_t v51 = *(void *)v29;
                  memset(v102, 0, 24);
                  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(v102, *(uint64_t **)(v51 + 8), *(uint64_t **)(v51 + 16), (uint64_t)(*(void *)(v51 + 16) - *(void *)(v51 + 8)) >> 4);
                  turi::flexible_type_fail(0);
                  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
                  goto LABEL_97;
                case 5:
                  uint64_t v52 = *(void *)v29;
                  memset(v102, 0, 24);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(v102, *(uint64_t **)(v52 + 8), *(uint64_t **)(v52 + 16), (uint64_t)(*(void *)(v52 + 16) - *(void *)(v52 + 8)) >> 5);
                  turi::flexible_type_fail(0);
                  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v106);
                  goto LABEL_97;
                case 6:
                  uint64_t v30 = (uint64_t)(*(void *)v29 << 8) >> 8;
                  goto LABEL_98;
                case 7:
                  goto LABEL_98;
                case 8:
                  uint64_t v53 = *(void *)v29;
                  uint64_t v54 = *(void *)(v53 + 16);
                  *(void *)uint64_t v99 = *(void *)(v53 + 8);
                  *(void *)&v99[8] = v54;
                  if (v54) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 + 8), 1u, memory_order_relaxed);
                  }
                  long long v55 = *(_OWORD *)(v53 + 24);
                  long long v56 = *(_OWORD *)(v53 + 56);
                  long long v100 = *(_OWORD *)(v53 + 40);
                  long long v101 = v56;
                  *(_OWORD *)&v99[16] = v55;
                  turi::flexible_type_fail(0);
                  boost::detail::shared_count::~shared_count((atomic_uint **)&v99[8]);
                  goto LABEL_97;
                case 9:
                  turi::flexible_type_impl::ndarray<double>::ndarray(v102, *(void *)v29 + 8);
                  turi::flexible_type_fail(0);
                  if (*((void *)&v103 + 1))
                  {
                    *(void *)&long long v104 = *((void *)&v103 + 1);
                    operator delete(*((void **)&v103 + 1));
                  }
                  if (*(void *)&v102[16])
                  {
                    *(void *)&v102[24] = *(void *)&v102[16];
                    operator delete(*(void **)&v102[16]);
                  }
                  if (*(void *)&v102[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v102[8]);
                  }
LABEL_97:
                  uint64_t v30 = 0;
LABEL_98:
                  unint64_t v57 = *(v31 - 1);
                  atomic_ullong *volatile v58 = (uint64_t *)*(v31 - 2);
                  if ((unint64_t)v58 >= v57)
                  {
                    uint64_t v60 = (uint64_t *)*(v31 - 3);
                    uint64_t v61 = v58 - v60;
                    if ((unint64_t)(v61 + 1) >> 61) {
                      std::vector<float>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v62 = v57 - (void)v60;
                    unint64_t v63 = (uint64_t)(v57 - (void)v60) >> 2;
                    if (v63 <= v61 + 1) {
                      unint64_t v63 = v61 + 1;
                    }
                    if (v62 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v64 = v63;
                    }
                    if (v64)
                    {
                      std::string v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v31 - 1), v64);
                      uint64_t v60 = (uint64_t *)*(v31 - 3);
                      atomic_ullong *volatile v58 = (uint64_t *)*(v31 - 2);
                    }
                    else
                    {
                      std::string v65 = 0;
                    }
                    atomic_ullong *volatile v66 = (uint64_t *)&v65[8 * v61];
                    *atomic_ullong *volatile v66 = v30;
                    int v59 = v66 + 1;
                    while (v58 != v60)
                    {
                      uint64_t v67 = *--v58;
                      *--atomic_ullong *volatile v66 = v67;
                    }
                    *(v31 - 3) = v66;
                    *(v31 - 2) = v59;
                    *(v31 - 1) = &v65[8 * v64];
                    if (v60) {
                      operator delete(v60);
                    }
                  }
                  else
                  {
                    *atomic_ullong *volatile v58 = v30;
                    int v59 = v58 + 1;
                  }
                  *(v31 - 2) = v59;
                  goto LABEL_115;
                default:
                  goto LABEL_142;
              }
            default:
LABEL_142:
              turi::flexible_type_fail(0);
              break;
          }
          break;
        }
LABEL_144:
        __break(1u);
        break;
      default:
        turi::flexible_type_fail(0);
        goto LABEL_144;
    }
  }
}

void sub_22403B164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v61 - 185) < 0) {
    operator delete(*(void **)(v61 - 208));
  }
  if (a59 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      a15 = &a51;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v60)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v59);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::PROJECT_NODE", 36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    std::string::size_type v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 131, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403B628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", 113);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"indices\")", 43);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/project.hpp", "operator()", 132, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403B828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    void *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)char v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_22403BA58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const*,std::vector<unsigned long> const*,std::vector<unsigned long>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_22403BB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>,std::reverse_iterator<std::vector<unsigned long>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::reverse_iterator<std::vector<unsigned long>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(_DWORD **a1)
{
  uint64_t v1 = *a1;
  LODWORD(v67.__r_.__value_.__l.__data_) = **a1;
  if (LODWORD(v67.__r_.__value_.__l.__data_) == 5)
  {
    uint64_t v3 = (uint64_t)(v1 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "start");
    uint64_t v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v3, (const void **)__p);
    if (SBYTE7(v59) < 0) {
      operator delete(__p[0]);
    }
    if (!v4) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()();
    }
    uint64_t v5 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v5, (const void **)__p);
    if (SBYTE7(v59) < 0) {
      operator delete(__p[0]);
    }
    if (!v6) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator()();
    }
    uint64_t v7 = (uint64_t)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
    uint64_t v8 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>(v7, (const void **)__p);
    if (SBYTE7(v59) < 0) {
      operator delete(__p[0]);
    }
    if (!v8) {
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator()();
    }
    uint64_t v9 = (uint64_t **)(*a1 + 2);
    std::string::basic_string[abi:ne180100]<0>(v65, "start");
    __p[0] = v65;
    unint64_t v10 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9, v65, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
    switch(*((unsigned char *)v10 + 68))
    {
      case 0:
      case 1:
      case 6:
      case 7:
        goto LABEL_31;
      case 2:
        uint64_t v12 = *((void *)v10 + 7);
        size_t __idx = 0;
        long long v13 = (char *)(v12 + 8);
        if (*(char *)(v12 + 31) < 0) {
          long long v13 = *(char **)(v12 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v13);
        std::stoll((const std::string *)__p, &__idx, 10);
        if (SBYTE7(v59) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v12 + 31) < 0) {
          uint64_t v14 = *(void *)(v12 + 16);
        }
        else {
          uint64_t v14 = *(unsigned __int8 *)(v12 + 31);
        }
        if (__idx != v14)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v50 = std::string::append(&v67, " cannot be interpreted as an integer");
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          *(void *)&long long v59 = *((void *)&v50->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_31;
      case 3:
        uint64_t v11 = *((void *)v10 + 7);
        __p[1] = 0;
        *(void *)&long long v59 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v11 + 8), *(void *)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_31;
      case 4:
        uint64_t v15 = *((void *)v10 + 7);
        __p[1] = 0;
        *(void *)&long long v59 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
        goto LABEL_31;
      case 5:
        uint64_t v16 = *((void *)v10 + 7);
        __p[1] = 0;
        *(void *)&long long v59 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v67.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
        goto LABEL_31;
      case 8:
        uint64_t v17 = *((void *)v10 + 7);
        long long v18 = *(atomic_uint **)(v17 + 16);
        __p[0] = *(void **)(v17 + 8);
        __p[1] = v18;
        if (v18) {
          atomic_fetch_add_explicit(v18 + 2, 1u, memory_order_relaxed);
        }
        long long v19 = *(_OWORD *)(v17 + 24);
        long long v20 = *(_OWORD *)(v17 + 56);
        long long v60 = *(_OWORD *)(v17 + 40);
        long long v61 = v20;
        long long v59 = v19;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_31;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v10 + 7) + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v60 + 1))
        {
          *(void *)&long long v61 = *((void *)&v60 + 1);
          operator delete(*((void **)&v60 + 1));
        }
        if ((void)v59)
        {
          *((void *)&v59 + 1) = v59;
          operator delete((void *)v59);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_31:
        if (v66 < 0) {
          operator delete((void *)v65[0]);
        }
        unint64_t v21 = (uint64_t **)(*a1 + 2);
        std::string::basic_string[abi:ne180100]<0>(v65, "begin_index");
        __p[0] = v65;
        long long v22 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21, v65, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
        switch(*((unsigned char *)v22 + 68))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_53;
          case 2:
            uint64_t v24 = *((void *)v22 + 7);
            size_t __idx = 0;
            uint64_t v25 = (char *)(v24 + 8);
            if (*(char *)(v24 + 31) < 0) {
              uint64_t v25 = *(char **)(v24 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v25);
            std::stoll((const std::string *)__p, &__idx, 10);
            if (SBYTE7(v59) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(v24 + 31) < 0) {
              uint64_t v26 = *(void *)(v24 + 16);
            }
            else {
              uint64_t v26 = *(unsigned __int8 *)(v24 + 31);
            }
            if (__idx != v26)
            {
              uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v53 = std::string::append(&v67, " cannot be interpreted as an integer");
              long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
              *(void *)&long long v59 = *((void *)&v53->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v54;
              v53->__r_.__value_.__l.__size_ = 0;
              v53->__r_.__value_.__r.__words[2] = 0;
              v53->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v52, (const std::string *)__p);
              __cxa_throw(v52, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_53;
          case 3:
            uint64_t v23 = *((void *)v22 + 7);
            __p[1] = 0;
            *(void *)&long long v59 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v23 + 8), *(void *)(v23 + 16), (uint64_t)(*(void *)(v23 + 16) - *(void *)(v23 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_53;
          case 4:
            uint64_t v27 = *((void *)v22 + 7);
            __p[1] = 0;
            *(void *)&long long v59 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v27 + 8), *(uint64_t **)(v27 + 16), (uint64_t)(*(void *)(v27 + 16) - *(void *)(v27 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v67.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
            goto LABEL_53;
          case 5:
            uint64_t v28 = *((void *)v22 + 7);
            __p[1] = 0;
            *(void *)&long long v59 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v28 + 8), *(uint64_t **)(v28 + 16), (uint64_t)(*(void *)(v28 + 16) - *(void *)(v28 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v67.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
            goto LABEL_53;
          case 8:
            uint64_t v29 = *((void *)v22 + 7);
            uint64_t v30 = *(atomic_uint **)(v29 + 16);
            __p[0] = *(void **)(v29 + 8);
            __p[1] = v30;
            if (v30) {
              atomic_fetch_add_explicit(v30 + 2, 1u, memory_order_relaxed);
            }
            long long v31 = *(_OWORD *)(v29 + 24);
            long long v32 = *(_OWORD *)(v29 + 56);
            long long v60 = *(_OWORD *)(v29 + 40);
            long long v61 = v32;
            long long v59 = v31;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            goto LABEL_53;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v22 + 7) + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v60 + 1))
            {
              *(void *)&long long v61 = *((void *)&v60 + 1);
              operator delete(*((void **)&v60 + 1));
            }
            if ((void)v59)
            {
              *((void *)&v59 + 1) = v59;
              operator delete((void *)v59);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
LABEL_53:
            if (v66 < 0) {
              operator delete((void *)v65[0]);
            }
            uint64_t v33 = (uint64_t **)(*a1 + 2);
            std::string::basic_string[abi:ne180100]<0>(v65, "end_index");
            __p[0] = v65;
            std::string v34 = std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v33, v65, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
            switch(*((unsigned char *)v34 + 68))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_75;
              case 2:
                uint64_t v36 = *((void *)v34 + 7);
                size_t __idx = 0;
                uint64_t v37 = (char *)(v36 + 8);
                if (*(char *)(v36 + 31) < 0) {
                  uint64_t v37 = *(char **)(v36 + 8);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, v37);
                std::stoll((const std::string *)__p, &__idx, 10);
                if (SBYTE7(v59) < 0) {
                  operator delete(__p[0]);
                }
                if (*(char *)(v36 + 31) < 0) {
                  uint64_t v38 = *(void *)(v36 + 16);
                }
                else {
                  uint64_t v38 = *(unsigned __int8 *)(v36 + 31);
                }
                if (__idx != v38)
                {
                  long long v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  long long v56 = std::string::append(&v67, " cannot be interpreted as an integer");
                  long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
                  *(void *)&long long v59 = *((void *)&v56->__r_.__value_.__l + 2);
                  *(_OWORD *)__p = v57;
                  v56->__r_.__value_.__l.__size_ = 0;
                  v56->__r_.__value_.__r.__words[2] = 0;
                  v56->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v55, (const std::string *)__p);
                  __cxa_throw(v55, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_75;
              case 3:
                uint64_t v35 = *((void *)v34 + 7);
                __p[1] = 0;
                *(void *)&long long v59 = 0;
                __p[0] = 0;
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v35 + 8), *(void *)(v35 + 16), (uint64_t)(*(void *)(v35 + 16) - *(void *)(v35 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                goto LABEL_75;
              case 4:
                uint64_t v39 = *((void *)v34 + 7);
                __p[1] = 0;
                *(void *)&long long v59 = 0;
                __p[0] = 0;
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(void *)(v39 + 16) - *(void *)(v39 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v67.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
                goto LABEL_75;
              case 5:
                uint64_t v40 = *((void *)v34 + 7);
                __p[1] = 0;
                *(void *)&long long v59 = 0;
                __p[0] = 0;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v40 + 8), *(uint64_t **)(v40 + 16), (uint64_t)(*(void *)(v40 + 16) - *(void *)(v40 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v67.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
                goto LABEL_75;
              case 8:
                uint64_t v41 = *((void *)v34 + 7);
                long long v42 = *(atomic_uint **)(v41 + 16);
                __p[0] = *(void **)(v41 + 8);
                __p[1] = v42;
                if (v42) {
                  atomic_fetch_add_explicit(v42 + 2, 1u, memory_order_relaxed);
                }
                long long v43 = *(_OWORD *)(v41 + 24);
                long long v44 = *(_OWORD *)(v41 + 56);
                long long v60 = *(_OWORD *)(v41 + 40);
                long long v61 = v44;
                long long v59 = v43;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
                goto LABEL_75;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(__p, *((void *)v34 + 7) + 8);
                turi::flexible_type_fail(0);
                if (*((void *)&v60 + 1))
                {
                  *(void *)&long long v61 = *((void *)&v60 + 1);
                  operator delete(*((void **)&v60 + 1));
                }
                if ((void)v59)
                {
                  *((void *)&v59 + 1) = v59;
                  operator delete((void *)v59);
                }
                if (__p[1]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                }
LABEL_75:
                if (v66 < 0) {
                  operator delete((void *)v65[0]);
                }
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Sequence(", 9);
                uint64_t v45 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)")[", 2);
                uint64_t v46 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)":", 1);
                uint64_t v47 = (void *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"]", 1);
                std::stringbuf::str();
                __p[0] = *(void **)MEMORY[0x263F8C2C8];
                *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
                __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
                if (v63 < 0) {
                  operator delete(v62);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                return MEMORY[0x22A614E30](&v64);
              default:
                goto LABEL_89;
            }
          default:
            goto LABEL_89;
        }
      default:
        break;
    }
LABEL_89:
    turi::flexible_type_fail(0);
    __break(1u);
  }
  __p[0] = &v67;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()();
}

void sub_22403C814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 73) < 0)
  {
    operator delete(*(void **)(v16 - 96));
    if ((v15 & 1) == 0)
    {
LABEL_8:
      if (*(char *)(v16 - 97) < 0) {
        operator delete(*(void **)(v16 - 120));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(int)pnode->operator_type", 25);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(int)planner_node_type::RANGE_NODE", 34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  unint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 115, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  long long v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403CB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"start\")", 41);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 116, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"begin_index\")", 47);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 117, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403CF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"pnode->operator_parameters.count(\"end_index\")", 45);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/range.hpp", "operator()", 118, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)5>::repr(std::shared_ptr<turi::query_eval::planner_node>,std::function<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)> &)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22403D198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::repr(uint64_t *a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v54);
  uint64_t v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v57, "sarray");
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
  uint64_t v3 = *((void *)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v2 + 32), (const void **)&v57, (uint64_t)&std::piecewise_construct, &v61)+ 7);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  uint64_t v52 = v5;
  uint64_t v53 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SBYTE7(v58) < 0) {
    operator delete((void *)v57);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"S", 1);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(&v52);
  std::ostream::operator<<();
  uint64_t v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
  char v7 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(v6 + 8, (const void **)__p);
  uint64_t v8 = 0;
  switch(v7[12])
  {
    case 0:
      uint64_t v8 = *(void *)v7;
      goto LABEL_29;
    case 1:
      uint64_t v8 = (uint64_t)*(double *)v7;
      goto LABEL_29;
    case 2:
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = (char **)(*(void *)v7 + 8);
      size_t __idx = 0;
      uint64_t v12 = (char *)v11;
      if (*(char *)(v10 + 31) < 0) {
        uint64_t v12 = *v11;
      }
      long long v13 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v57, v12);
      uint64_t v8 = std::stoll(v13, &__idx, 10);
      if (SBYTE7(v58) < 0) {
        operator delete((void *)v57);
      }
      if (*(char *)(v10 + 31) < 0) {
        uint64_t v14 = *(void *)(v10 + 16);
      }
      else {
        uint64_t v14 = *(unsigned __int8 *)(v10 + 31);
      }
      if (__idx != v14)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v45 = std::string::append(&v61, " cannot be interpreted as an integer");
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        *(void *)&long long v58 = *((void *)&v45->__r_.__value_.__l + 2);
        long long v57 = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&v57);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_29;
    case 3:
      uint64_t v9 = *(void *)v7;
      *(void *)&long long v58 = 0;
      long long v57 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v57, *(const void **)(v9 + 8), *(void *)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)v57)
      {
        *((void *)&v57 + 1) = v57;
        operator delete((void *)v57);
      }
      goto LABEL_28;
    case 4:
      uint64_t v15 = *(void *)v7;
      *(void *)&long long v58 = 0;
      long long v57 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v57, *(uint64_t **)(v15 + 8), *(uint64_t **)(v15 + 16), (uint64_t)(*(void *)(v15 + 16) - *(void *)(v15 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      goto LABEL_28;
    case 5:
      uint64_t v16 = *(void *)v7;
      *(void *)&long long v58 = 0;
      long long v57 = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v57, *(uint64_t **)(v16 + 8), *(uint64_t **)(v16 + 16), (uint64_t)(*(void *)(v16 + 16) - *(void *)(v16 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      goto LABEL_28;
    case 6:
      uint64_t v8 = (uint64_t)(*(void *)v7 << 8) >> 8;
      goto LABEL_29;
    case 7:
      goto LABEL_29;
    case 8:
      uint64_t v17 = *(void *)v7;
      uint64_t v18 = *(void *)(*(void *)v7 + 16);
      *(void *)&long long v57 = *(void *)(*(void *)v7 + 8);
      *((void *)&v57 + 1) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 1u, memory_order_relaxed);
      }
      long long v19 = *(_OWORD *)(v17 + 24);
      long long v20 = *(_OWORD *)(v17 + 56);
      long long v59 = *(_OWORD *)(v17 + 40);
      long long v60 = v20;
      long long v58 = v19;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&v57 + 1);
      goto LABEL_28;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v57, *(void *)v7 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v59 + 1))
      {
        *(void *)&long long v60 = *((void *)&v59 + 1);
        operator delete(*((void **)&v59 + 1));
      }
      if ((void)v58)
      {
        *((void *)&v58 + 1) = v58;
        operator delete((void *)v58);
      }
      if (*((void *)&v57 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
      }
LABEL_28:
      uint64_t v8 = 0;
LABEL_29:
      if (v51 < 0) {
        operator delete(__p[0]);
      }
      break;
    default:
LABEL_79:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  uint64_t v21 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
  long long v22 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(v21 + 8, (const void **)__p);
  uint64_t v23 = 0;
  switch(v22[12])
  {
    case 0:
      uint64_t v23 = *(void *)v22;
      goto LABEL_55;
    case 1:
      uint64_t v23 = (uint64_t)*(double *)v22;
      goto LABEL_55;
    case 2:
      uint64_t v25 = *(void *)v22;
      uint64_t v26 = (char **)(*(void *)v22 + 8);
      size_t __idx = 0;
      uint64_t v27 = (char *)v26;
      if (*(char *)(v25 + 31) < 0) {
        uint64_t v27 = *v26;
      }
      uint64_t v28 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v57, v27);
      uint64_t v23 = std::stoll(v28, &__idx, 10);
      if (SBYTE7(v58) < 0) {
        operator delete((void *)v57);
      }
      if (*(char *)(v25 + 31) < 0) {
        uint64_t v29 = *(void *)(v25 + 16);
      }
      else {
        uint64_t v29 = *(unsigned __int8 *)(v25 + 31);
      }
      if (__idx != v29)
      {
        uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        atomic_ullong *volatile v48 = std::string::append(&v61, " cannot be interpreted as an integer");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        *(void *)&long long v58 = *((void *)&v48->__r_.__value_.__l + 2);
        long long v57 = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v47, (const std::string *)&v57);
        __cxa_throw(v47, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_55;
    case 3:
      uint64_t v24 = *(void *)v22;
      *(void *)&long long v58 = 0;
      long long v57 = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v57, *(const void **)(v24 + 8), *(void *)(v24 + 16), (uint64_t)(*(void *)(v24 + 16) - *(void *)(v24 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)v57)
      {
        *((void *)&v57 + 1) = v57;
        operator delete((void *)v57);
      }
      goto LABEL_54;
    case 4:
      uint64_t v30 = *(void *)v22;
      *(void *)&long long v58 = 0;
      long long v57 = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v57, *(uint64_t **)(v30 + 8), *(uint64_t **)(v30 + 16), (uint64_t)(*(void *)(v30 + 16) - *(void *)(v30 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      goto LABEL_54;
    case 5:
      uint64_t v31 = *(void *)v22;
      *(void *)&long long v58 = 0;
      long long v57 = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v57, *(uint64_t **)(v31 + 8), *(uint64_t **)(v31 + 16), (uint64_t)(*(void *)(v31 + 16) - *(void *)(v31 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
      goto LABEL_54;
    case 6:
      uint64_t v23 = (uint64_t)(*(void *)v22 << 8) >> 8;
      goto LABEL_55;
    case 7:
      goto LABEL_55;
    case 8:
      uint64_t v32 = *(void *)v22;
      uint64_t v33 = *(void *)(*(void *)v22 + 16);
      *(void *)&long long v57 = *(void *)(*(void *)v22 + 8);
      *((void *)&v57 + 1) = v33;
      if (v33) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 + 8), 1u, memory_order_relaxed);
      }
      long long v34 = *(_OWORD *)(v32 + 24);
      long long v35 = *(_OWORD *)(v32 + 56);
      long long v59 = *(_OWORD *)(v32 + 40);
      long long v60 = v35;
      long long v58 = v34;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&v57 + 1);
      goto LABEL_54;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&v57, *(void *)v22 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v59 + 1))
      {
        *(void *)&long long v60 = *((void *)&v59 + 1);
        operator delete(*((void **)&v59 + 1));
      }
      if ((void)v58)
      {
        *((void *)&v58 + 1) = v58;
        operator delete((void *)v58);
      }
      if (*((void *)&v57 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
      }
LABEL_54:
      uint64_t v23 = 0;
LABEL_55:
      if ((v51 & 0x80000000) == 0)
      {
        if (!v8) {
          goto LABEL_59;
        }
LABEL_67:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"[", 1);
        uint64_t v41 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)",", 1);
        long long v42 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"]", 1);
        goto LABEL_68;
      }
      operator delete(__p[0]);
      if (v8) {
        goto LABEL_67;
      }
LABEL_59:
      if (*(unsigned char *)(v52 + 248) && (uint64_t v36 = *(uint64_t **)(v52 + 80), (v37 = *(void *)(v52 + 88) - (void)v36) != 0))
      {
        uint64_t v38 = 0;
        unint64_t v39 = v37 >> 3;
        if (v39 <= 1) {
          unint64_t v39 = 1;
        }
        do
        {
          uint64_t v40 = *v36++;
          v38 += v40;
          --v39;
        }
        while (v39);
      }
      else
      {
        uint64_t v38 = 0;
      }
      if (v23 != v38) {
        goto LABEL_67;
      }
LABEL_68:
      std::stringbuf::str();
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      v54[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v54 + *(void *)(v54[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v54[1] = MEMORY[0x263F8C318] + 16;
      if (v55 < 0) {
        operator delete((void *)v54[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x22A614E30](&v56);
    default:
      goto LABEL_79;
  }
}

void sub_22403DA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  if (*(char *)(v19 - 137) < 0) {
    operator delete(*(void **)(v19 - 160));
  }
  if (*(char *)(v19 - 57) < 0)
  {
    operator delete(*(void **)(v19 - 80));
    if ((v18 & 1) == 0)
    {
LABEL_8:
      if (a14 < 0) {
        operator delete(__p);
      }
      if (a16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a16);
      }
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v17);
  goto LABEL_8;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(uint64_t *a1)
{
  {
    turi::mutex::mutex(&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::access_lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::access_lock, &dword_223D44000);
  }
  pthread_mutex_lock(&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::access_lock);
  {
    qword_268067148 = 0;
    off_268067140 = 0;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers = &off_268067140;
    __cxa_atexit((void (*)(void *))std::map<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>::~map[abi:ne180100], &turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers, &dword_223D44000);
  }
  uint64_t v2 = *a1;
  uint64_t v22 = *a1;
  uint64_t v3 = off_268067140;
  if (off_268067140)
  {
    uint64_t v4 = (uint64_t *)&off_268067140;
    do
    {
      uint64_t v5 = v3[4];
      BOOL v6 = v5 < v2;
      if (v5 >= v2) {
        char v7 = v3;
      }
      else {
        char v7 = v3 + 1;
      }
      if (!v6) {
        uint64_t v4 = v3;
      }
      uint64_t v3 = (void *)*v7;
    }
    while (*v7);
    if (v4 != (uint64_t *)&off_268067140 && v4[4] <= v2)
    {
      uint64_t v8 = v4[6];
      if (v8 && *(void *)(v8 + 8) != -1)
      {
        uint64_t v9 = v4 + 7;
        goto LABEL_36;
      }
      std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase((uint64_t **)&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers, v4);
    }
  }
  ++turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::current_number;
  uint64_t v10 = (uint64_t *)turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers;
  if ((_BYTE)turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::current_number) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers == (_UNKNOWN *)&off_268067140;
  }
  if (!v11)
  {
    do
    {
      uint64_t v12 = v10[6];
      if (!v12 || *(void *)(v12 + 8) == -1)
      {
        uint64_t v14 = std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase((uint64_t **)&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers, v10);
      }
      else
      {
        long long v13 = (uint64_t *)v10[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            long long v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (uint64_t *)v10[2];
            BOOL v11 = *v14 == (void)v10;
            uint64_t v10 = v14;
          }
          while (!v11);
        }
      }
      uint64_t v10 = v14;
    }
    while (v14 != (uint64_t *)&off_268067140);
  }
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::current_number;
  uint64_t v23 = &v22;
  int v18 = std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>((uint64_t **)&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::tracked_numbers, &v22, (uint64_t)&std::piecewise_construct, &v23);
  uint64_t v19 = (std::__shared_weak_count *)v18[6];
  v18[5] = v16;
  v18[6] = v15;
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  v18[7] = v17;
  uint64_t v9 = &turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::current_number;
LABEL_36:
  uint64_t v20 = *v9;
  pthread_mutex_unlock(&turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag(std::shared_ptr<turi::sarray<turi::flexible_type>> const&)::access_lock);
  return v20;
}

void sub_22403DE9C(_Unwind_Exception *a1)
{
}

uint64_t std::map<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[6];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::__map_value_compare<long,std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::pair<std::weak_ptr<turi::sarray<turi::flexible_type>>,unsigned long>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  char v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        char v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        char v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::repr(uint64_t *a1)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v68);
  uint64_t v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sframe");
  uint64_t v3 = std::map<std::string,turi::neural_net::shared_float_array>::at(v2 + 32, (const void **)&__p);
  turi::sframe::sframe((turi::sframe *)v81, (const turi::sframe *)(*(void *)v3 + 8));
  if (SBYTE7(v72) < 0) {
    operator delete((void *)__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"SF(", 3);
  if (v82)
  {
    std::vector<unsigned long>::vector(&__p, v82);
    if (v82)
    {
      for (unint64_t i = 0; i < v82; ++i)
      {
        turi::sframe::select_column((uint64_t)v81, i, &v75);
        uint64_t v5 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::unique_sarray_tag((uint64_t *)&v75);
        *(void *)(__p + 8 * i) = v5;
        if (v75.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
        }
      }
    }
    uint64_t v6 = *(void *)__p;
    char v7 = operator new(8uLL);
    uint64_t v78 = v7;
    void *v7 = v6;
    atomic_ullong v79 = v7 + 1;
    int v80 = v7 + 1;
    memset(&v75, 0, sizeof(v75));
    size_t __idx = (size_t)&v75;
    char v77 = 0;
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v75.__r_.__value_.__l.__size_ = v75.__r_.__value_.__r.__words[0];
    v75.__r_.__value_.__r.__words[2] = v75.__r_.__value_.__r.__words[0] + 24;
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long> const*,std::vector<unsigned long> const*,std::vector<unsigned long>*>((uint64_t)&v75.__r_.__value_.__r.__words[2], (uint64_t)&v78, (uint64_t)v81, v75.__r_.__value_.__l.__data_);
    if (v78)
    {
      atomic_ullong v79 = v78;
      operator delete(v78);
    }
    uint64_t v8 = __p;
    if (*((void *)&__p + 1) - (void)__p >= 9uLL)
    {
      unint64_t v9 = 1;
      do
      {
        uint64_t v10 = *(void *)(v8 + 8 * v9);
        std::string::size_type size = v75.__r_.__value_.__l.__size_;
        uint64_t v12 = *(char **)(v75.__r_.__value_.__l.__size_ - 16);
        if (v10 == *((void *)v12 - 1) + 1)
        {
          unint64_t v13 = *(void *)(v75.__r_.__value_.__l.__size_ - 8);
          if ((unint64_t)v12 >= v13)
          {
            uint64_t v16 = *(char **)(v75.__r_.__value_.__l.__size_ - 24);
            uint64_t v17 = (v12 - v16) >> 3;
            if ((unint64_t)(v17 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v18 = v13 - (void)v16;
            unint64_t v19 = (uint64_t)(v13 - (void)v16) >> 2;
            if (v19 <= v17 + 1) {
              unint64_t v19 = v17 + 1;
            }
            if (v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20)
            {
              uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v75.__r_.__value_.__l.__size_ - 8, v20);
              uint64_t v16 = *(char **)(size - 24);
              uint64_t v12 = *(char **)(size - 16);
              uint64_t v10 = *(void *)(v8 + 8 * v9);
            }
            else
            {
              uint64_t v21 = 0;
            }
            uint64_t v22 = &v21[8 * v17];
            *(void *)uint64_t v22 = v10;
            uint64_t v14 = v22 + 8;
            while (v12 != v16)
            {
              uint64_t v23 = *((void *)v12 - 1);
              v12 -= 8;
              *((void *)v22 - 1) = v23;
              v22 -= 8;
            }
            *(void *)(size - 24) = v22;
            *(void *)(size - 16) = v14;
            *(void *)(size - 8) = &v21[8 * v20];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(void *)uint64_t v12 = v10;
            uint64_t v14 = v12 + 8;
          }
          *(void *)(size - 16) = v14;
        }
        else
        {
          uint64_t v15 = operator new(8uLL);
          uint64_t v78 = v15;
          *uint64_t v15 = v10;
          atomic_ullong v79 = v15 + 1;
          int v80 = v15 + 1;
          std::vector<std::vector<unsigned long>>::push_back[abi:ne180100]((uint64_t *)&v75, (uint64_t)&v78);
          if (v78)
          {
            atomic_ullong v79 = v78;
            operator delete(v78);
          }
        }
        ++v9;
        uint64_t v8 = __p;
      }
      while (v9 < (uint64_t)(*((void *)&__p + 1) - __p) >> 3);
    }
    std::string::size_type v25 = v75.__r_.__value_.__l.__size_;
    uint64_t v24 = (void *)v75.__r_.__value_.__r.__words[0];
    if (v75.__r_.__value_.__r.__words[0] != v75.__r_.__value_.__l.__size_)
    {
      char v26 = 1;
      do
      {
        if ((v26 & 1) == 0) {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)",", 1);
        }
        uint64_t v27 = (uint64_t)(v24[1] - *v24) >> 3;
        if (v27 == 2)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"S", 1);
          uint64_t v28 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",S", 2);
        }
        else if (v27 == 1)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"S", 1);
        }
        else
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"S", 1);
          uint64_t v29 = (void *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)",...,S", 6);
        }
        std::ostream::operator<<();
        char v26 = 0;
        v24 += 3;
      }
      while (v24 != (void *)v25);
    }
    uint64_t v78 = &v75;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
    if ((void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)")", 1);
  uint64_t v30 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v78, "begin_index");
  uint64_t v31 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(v30 + 8, (const void **)&v78);
  uint64_t v32 = 0;
  switch(v31[12])
  {
    case 0:
      uint64_t v32 = *(void *)v31;
      goto LABEL_70;
    case 1:
      uint64_t v32 = (uint64_t)*(double *)v31;
      goto LABEL_70;
    case 2:
      uint64_t v34 = *(void *)v31;
      long long v35 = (char **)(*(void *)v31 + 8);
      size_t __idx = 0;
      uint64_t v36 = (char *)v35;
      if (*(char *)(v34 + 31) < 0) {
        uint64_t v36 = *v35;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v36);
      uint64_t v32 = std::stoll((const std::string *)&__p, &__idx, 10);
      if (SBYTE7(v72) < 0) {
        operator delete((void *)__p);
      }
      if (*(char *)(v34 + 31) < 0) {
        uint64_t v37 = *(void *)(v34 + 16);
      }
      else {
        uint64_t v37 = *(unsigned __int8 *)(v34 + 31);
      }
      if (__idx != v37)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        char v63 = std::string::append(&v75, " cannot be interpreted as an integer");
        long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        *(void *)&long long v72 = *((void *)&v63->__r_.__value_.__l + 2);
        long long __p = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_70;
    case 3:
      uint64_t v33 = *(void *)v31;
      *(void *)&long long v72 = 0;
      long long __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v33 + 8), *(void *)(v33 + 16), (uint64_t)(*(void *)(v33 + 16) - *(void *)(v33 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_69;
    case 4:
      uint64_t v38 = *(void *)v31;
      *(void *)&long long v72 = 0;
      long long __p = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(void *)(v38 + 16) - *(void *)(v38 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      goto LABEL_69;
    case 5:
      uint64_t v39 = *(void *)v31;
      *(void *)&long long v72 = 0;
      long long __p = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(void *)(v39 + 16) - *(void *)(v39 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      goto LABEL_69;
    case 6:
      uint64_t v32 = (uint64_t)(*(void *)v31 << 8) >> 8;
      goto LABEL_70;
    case 7:
      goto LABEL_70;
    case 8:
      uint64_t v40 = *(void *)v31;
      uint64_t v41 = *(void *)(*(void *)v31 + 16);
      *(void *)&long long __p = *(void *)(*(void *)v31 + 8);
      *((void *)&__p + 1) = v41;
      if (v41) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 + 8), 1u, memory_order_relaxed);
      }
      long long v42 = *(_OWORD *)(v40 + 24);
      long long v43 = *(_OWORD *)(v40 + 56);
      long long v73 = *(_OWORD *)(v40 + 40);
      long long v74 = v43;
      long long v72 = v42;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p + 1);
      goto LABEL_69;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v31 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v73 + 1))
      {
        *(void *)&long long v74 = *((void *)&v73 + 1);
        operator delete(*((void **)&v73 + 1));
      }
      if ((void)v72)
      {
        *((void *)&v72 + 1) = v72;
        operator delete((void *)v72);
      }
      if (*((void *)&__p + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
      }
LABEL_69:
      uint64_t v32 = 0;
LABEL_70:
      if (SHIBYTE(v80) < 0) {
        operator delete(v78);
      }
      break;
    default:
LABEL_115:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      return result;
  }
  uint64_t v44 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v78, "end_index");
  uint64_t v45 = (unsigned char *)std::map<std::string,turi::neural_net::shared_float_array>::at(v44 + 8, (const void **)&v78);
  uint64_t v46 = 0;
  switch(v45[12])
  {
    case 0:
      uint64_t v46 = *(void *)v45;
      goto LABEL_96;
    case 1:
      uint64_t v46 = (uint64_t)*(double *)v45;
      goto LABEL_96;
    case 2:
      uint64_t v48 = *(void *)v45;
      long long v49 = (char **)(*(void *)v45 + 8);
      size_t __idx = 0;
      uint64_t v50 = (char *)v49;
      if (*(char *)(v48 + 31) < 0) {
        uint64_t v50 = *v49;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v50);
      uint64_t v46 = std::stoll((const std::string *)&__p, &__idx, 10);
      if (SBYTE7(v72) < 0) {
        operator delete((void *)__p);
      }
      if (*(char *)(v48 + 31) < 0) {
        uint64_t v51 = *(void *)(v48 + 16);
      }
      else {
        uint64_t v51 = *(unsigned __int8 *)(v48 + 31);
      }
      if (__idx != v51)
      {
        std::string v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        char v66 = std::string::append(&v75, " cannot be interpreted as an integer");
        long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
        *(void *)&long long v72 = *((void *)&v66->__r_.__value_.__l + 2);
        long long __p = v67;
        v66->__r_.__value_.__l.__size_ = 0;
        v66->__r_.__value_.__r.__words[2] = 0;
        v66->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v65, (const std::string *)&__p);
        __cxa_throw(v65, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_96;
    case 3:
      uint64_t v47 = *(void *)v45;
      *(void *)&long long v72 = 0;
      long long __p = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v47 + 8), *(void *)(v47 + 16), (uint64_t)(*(void *)(v47 + 16) - *(void *)(v47 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      goto LABEL_95;
    case 4:
      uint64_t v52 = *(void *)v45;
      *(void *)&long long v72 = 0;
      long long __p = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v52 + 8), *(uint64_t **)(v52 + 16), (uint64_t)(*(void *)(v52 + 16) - *(void *)(v52 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      goto LABEL_95;
    case 5:
      uint64_t v53 = *(void *)v45;
      *(void *)&long long v72 = 0;
      long long __p = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(void *)(v53 + 16) - *(void *)(v53 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
      goto LABEL_95;
    case 6:
      uint64_t v46 = (uint64_t)(*(void *)v45 << 8) >> 8;
      goto LABEL_96;
    case 7:
      goto LABEL_96;
    case 8:
      uint64_t v54 = *(void *)v45;
      uint64_t v55 = *(void *)(*(void *)v45 + 16);
      *(void *)&long long __p = *(void *)(*(void *)v45 + 8);
      *((void *)&__p + 1) = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 + 8), 1u, memory_order_relaxed);
      }
      long long v56 = *(_OWORD *)(v54 + 24);
      long long v57 = *(_OWORD *)(v54 + 56);
      long long v73 = *(_OWORD *)(v54 + 40);
      long long v74 = v57;
      long long v72 = v56;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p + 1);
      goto LABEL_95;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v45 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v73 + 1))
      {
        *(void *)&long long v74 = *((void *)&v73 + 1);
        operator delete(*((void **)&v73 + 1));
      }
      if ((void)v72)
      {
        *((void *)&v72 + 1) = v72;
        operator delete((void *)v72);
      }
      if (*((void *)&__p + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
      }
LABEL_95:
      uint64_t v46 = 0;
LABEL_96:
      if (SHIBYTE(v80) < 0)
      {
        operator delete(v78);
        if (!v32) {
          goto LABEL_100;
        }
LABEL_104:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"[", 1);
        long long v59 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)",", 1);
        long long v60 = (void *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"]", 1);
        goto LABEL_105;
      }
      if (v32) {
        goto LABEL_104;
      }
LABEL_100:
      if (v84) {
        uint64_t v58 = v83;
      }
      else {
        uint64_t v58 = 0;
      }
      if (v46 != v58) {
        goto LABEL_104;
      }
LABEL_105:
      std::stringbuf::str();
      turi::sframe::~sframe((turi::sframe *)v81);
      v68[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v68 + *(void *)(v68[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      v68[1] = MEMORY[0x263F8C318] + 16;
      if (v69 < 0) {
        operator delete((void *)v68[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x22A614E30](&v70);
    default:
      goto LABEL_115;
  }
}

void sub_22403EB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a61 < 0)
  {
    operator delete(a56);
    if ((v71 & 1) == 0)
    {
LABEL_8:
      if (a69 < 0) {
        operator delete(a64);
      }
      turi::sframe::~sframe((turi::sframe *)&a70);
      std::ostringstream::~ostringstream((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
  }
  else if (!v71)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v70);
  goto LABEL_8;
}

void *turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::repr@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  BOOL v11 = *(int **)a1;
  uint64_t v12 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)10>::infer_length(&v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  switch(v4)
  {
    case 1:
      uint64_t v5 = "Tr->[C0]";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    case 2:
      uint64_t v5 = "Tr->[C0,C1]";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    case 3:
      uint64_t v5 = "Tr->[C0,C1,C2]";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Tr->[C0,...,C", 13);
  char v7 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"]", 1);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v8[1] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x22A614E30](&v10);
}

void sub_22403EF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::repr(uint64_t *a1, uint64_t a2)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Union(", 6);
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 56);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 != v6)
  {
    char v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
      {
        LOBYTE(__p[0]) = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(v5 + 8);
      unint64_t v13 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(void *)(a2 + 24);
      if (!v9) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void **__return_ptr))(*(void *)v9 + 48))(__p);
      if ((v15 & 0x80u) == 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if ((v15 & 0x80u) == 0) {
        uint64_t v11 = v15;
      }
      else {
        uint64_t v11 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      char v7 = 0;
      v5 += 16;
    }
    while (v5 != v6);
  }
  LOBYTE(__p[0]) = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)__p, 1);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v16[1] = MEMORY[0x263F8C318] + 16;
  if (v17 < 0) {
    operator delete((void *)v16[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v18);
}

void sub_22403F1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::repr(uint64_t *a1, uint64_t a2)
{
  uint64_t v168 = *MEMORY[0x263EF8340];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v154);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)"UP(", 3);
  uint64_t v2 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "index_map");
  uint64_t v3 = *(void *)std::map<std::string,turi::neural_net::shared_float_array>::at(v2 + 8, (const void **)__p);
  if (SBYTE7(v158) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 == *(void *)(v3 + 16))
  {
LABEL_219:
    LOBYTE(__p[0]) = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)__p, 1);
    std::stringbuf::str();
    v154[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v154 + *(void *)(v154[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v154[1] = MEMORY[0x263F8C318] + 16;
    if (v155 < 0) {
      operator delete((void *)v154[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x22A614E30](&v156);
  }
  else
  {
    uint64_t v5 = 0;
    switch(*(unsigned char *)(v4 + 12))
    {
      case 0:
        uint64_t v5 = *(void *)v4;
        goto LABEL_28;
      case 1:
        uint64_t v5 = (uint64_t)*(double *)v4;
        goto LABEL_28;
      case 2:
        uint64_t v7 = *(void *)v4;
        uint64_t v8 = (char **)(*(void *)v4 + 8);
        __idx.__r_.__value_.__r.__words[0] = 0;
        uint64_t v9 = (char *)v8;
        if (*(char *)(v7 + 31) < 0) {
          uint64_t v9 = *v8;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v9);
        uint64_t v5 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
        if (SBYTE7(v158) < 0) {
          operator delete(__p[0]);
        }
        if (*(char *)(v7 + 31) < 0) {
          uint64_t v10 = *(void *)(v7 + 16);
        }
        else {
          uint64_t v10 = *(unsigned __int8 *)(v7 + 31);
        }
        if (__idx.__r_.__value_.__r.__words[0] != v10)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v135 = std::string::append(&v149, " cannot be interpreted as an integer");
          long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
          *(void *)&long long v158 = *((void *)&v135->__r_.__value_.__l + 2);
          *(_OWORD *)long long __p = v136;
          v135->__r_.__value_.__l.__size_ = 0;
          v135->__r_.__value_.__r.__words[2] = 0;
          v135->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, (const std::string *)__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_28;
      case 3:
        uint64_t v6 = *(void *)v4;
        __p[1] = 0;
        *(void *)&long long v158 = 0;
        __p[0] = 0;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        goto LABEL_27;
      case 4:
        uint64_t v11 = *(void *)v4;
        __p[1] = 0;
        *(void *)&long long v158 = 0;
        __p[0] = 0;
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v149.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
        goto LABEL_27;
      case 5:
        uint64_t v12 = *(void *)v4;
        __p[1] = 0;
        *(void *)&long long v158 = 0;
        __p[0] = 0;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v149.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
        goto LABEL_27;
      case 6:
        uint64_t v5 = (uint64_t)(*(void *)v4 << 8) >> 8;
        goto LABEL_28;
      case 7:
        goto LABEL_28;
      case 8:
        uint64_t v13 = *(void *)v4;
        uint64_t v14 = *(atomic_uint **)(v13 + 16);
        __p[0] = *(void **)(v13 + 8);
        __p[1] = v14;
        if (v14) {
          atomic_fetch_add_explicit(v14 + 2, 1u, memory_order_relaxed);
        }
        long long v15 = *(_OWORD *)(v13 + 24);
        long long v16 = *(_OWORD *)(v13 + 56);
        long long v159 = *(_OWORD *)(v13 + 40);
        long long v160 = v16;
        long long v158 = v15;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
        goto LABEL_27;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v4 + 8);
        turi::flexible_type_fail(0);
        if (*((void *)&v159 + 1))
        {
          *(void *)&long long v160 = *((void *)&v159 + 1);
          operator delete(*((void **)&v159 + 1));
        }
        if ((void)v158)
        {
          *((void *)&v158 + 1) = v158;
          operator delete((void *)v158);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
LABEL_27:
        uint64_t v5 = 0;
LABEL_28:
        uint64_t v17 = *(void *)(v3 + 8);
        uint64_t v18 = 0;
        switch(*(unsigned char *)(v17 + 28))
        {
          case 0:
            uint64_t v18 = *(void *)(v17 + 16);
            goto LABEL_52;
          case 1:
            uint64_t v18 = (uint64_t)*(double *)(v17 + 16);
            goto LABEL_52;
          case 2:
            uint64_t v20 = *(void *)(v17 + 16);
            __idx.__r_.__value_.__r.__words[0] = 0;
            uint64_t v21 = (char *)(v20 + 8);
            if (*(char *)(v20 + 31) < 0) {
              uint64_t v21 = *(char **)(v20 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v21);
            uint64_t v18 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
            if (SBYTE7(v158) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(v20 + 31) < 0) {
              uint64_t v22 = *(void *)(v20 + 16);
            }
            else {
              uint64_t v22 = *(unsigned __int8 *)(v20 + 31);
            }
            if (__idx.__r_.__value_.__r.__words[0] != v22)
            {
              unint64_t v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v138 = std::string::append(&v149, " cannot be interpreted as an integer");
              long long v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
              *(void *)&long long v158 = *((void *)&v138->__r_.__value_.__l + 2);
              *(_OWORD *)long long __p = v139;
              v138->__r_.__value_.__l.__size_ = 0;
              v138->__r_.__value_.__r.__words[2] = 0;
              v138->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v137, (const std::string *)__p);
              __cxa_throw(v137, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_52;
          case 3:
            uint64_t v19 = *(void *)(v17 + 16);
            __p[1] = 0;
            *(void *)&long long v158 = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v19 + 8), *(void *)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            goto LABEL_51;
          case 4:
            uint64_t v23 = *(void *)(v17 + 16);
            __p[1] = 0;
            *(void *)&long long v158 = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(void *)(v23 + 16) - *(void *)(v23 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v149.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
            goto LABEL_51;
          case 5:
            uint64_t v24 = *(void *)(v17 + 16);
            __p[1] = 0;
            *(void *)&long long v158 = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(void *)(v24 + 16) - *(void *)(v24 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v149.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
            goto LABEL_51;
          case 6:
            uint64_t v18 = (uint64_t)(*(void *)(v17 + 16) << 8) >> 8;
            goto LABEL_52;
          case 7:
            goto LABEL_52;
          case 8:
            uint64_t v25 = *(void *)(v17 + 16);
            char v26 = *(atomic_uint **)(v25 + 16);
            __p[0] = *(void **)(v25 + 8);
            __p[1] = v26;
            if (v26) {
              atomic_fetch_add_explicit(v26 + 2, 1u, memory_order_relaxed);
            }
            long long v27 = *(_OWORD *)(v25 + 24);
            long long v28 = *(_OWORD *)(v25 + 56);
            long long v159 = *(_OWORD *)(v25 + 40);
            long long v160 = v28;
            long long v158 = v27;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            goto LABEL_51;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)(v17 + 16) + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v159 + 1))
            {
              *(void *)&long long v160 = *((void *)&v159 + 1);
              operator delete(*((void **)&v159 + 1));
            }
            if ((void)v158)
            {
              *((void *)&v158 + 1) = v158;
              operator delete((void *)v158);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
LABEL_51:
            uint64_t v18 = 0;
LABEL_52:
            uint64_t v29 = operator new(8uLL);
            *uint64_t v29 = v18;
            uint64_t v163 = v5;
            uint64_t v164 = 0;
            long long v165 = 0uLL;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v164, v29, (uint64_t)(v29 + 1), 1uLL);
            v151 = 0;
            uint64_t v152 = 0;
            uint64_t v153 = 0;
            __p[0] = &v151;
            LOBYTE(__p[1]) = 0;
            v151 = (char *)operator new(0x20uLL);
            uint64_t v152 = v151;
            uint64_t v153 = v151 + 32;
            uint64_t v152 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>> const*,std::pair<unsigned long,std::vector<unsigned long>> const*,std::pair<unsigned long,std::vector<unsigned long>>*>((uint64_t)&v153, (uint64_t)&v163, (uint64_t)&v166, v151);
            if (v164)
            {
              *(void *)&long long v165 = v164;
              operator delete(v164);
            }
            operator delete(v29);
            uint64_t v30 = *(void *)(v3 + 8);
            if ((unint64_t)(*(void *)(v3 + 16) - v30) < 0x21)
            {
LABEL_188:
              v117 = v151;
              if (v152 != v151)
              {
                uint64_t v118 = 0;
                unint64_t v119 = 0;
                char v120 = 1;
                do
                {
                  if ((v120 & 1) == 0)
                  {
                    if (*(void *)&v117[v118 - 32] == *(void *)&v117[v118]) {
                      long long v121 = ",";
                    }
                    else {
                      long long v121 = ";";
                    }
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v121, 1);
                  }
                  uint64_t v122 = *(void *)&v117[v118];
                  if (!v119 || v122 != *(void *)&v151[v118 - 32])
                  {
                    long long v123 = *(_OWORD *)(*(void *)(*a1 + 56) + 16 * v122);
                    uint64_t v148 = (std::__shared_weak_count *)*((void *)&v123 + 1);
                    if (*((void *)&v123 + 1)) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v123 + 1) + 8), 1uLL, memory_order_relaxed);
                    }
                    uint64_t v124 = *(void *)(a2 + 24);
                    if (!v124) {
                      std::__throw_bad_function_call[abi:ne180100]();
                    }
                    (*(void (**)(void **__return_ptr))(*(void *)v124 + 48))(__p);
                    if ((SBYTE7(v158) & 0x80u) == 0) {
                      size_t v125 = __p;
                    }
                    else {
                      size_t v125 = (void **)__p[0];
                    }
                    if ((SBYTE7(v158) & 0x80u) == 0) {
                      uint64_t v126 = BYTE7(v158);
                    }
                    else {
                      uint64_t v126 = (uint64_t)__p[1];
                    }
                    std::string v127 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, (uint64_t)v125, v126);
                    LOBYTE(v163) = 58;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)&v163, 1);
                    if (SBYTE7(v158) < 0) {
                      operator delete(__p[0]);
                    }
                    if (v148) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v148);
                    }
                  }
                  uint64_t v128 = (uint64_t)(*(void *)&v117[v118 + 16] - *(void *)&v117[v118 + 8]) >> 3;
                  if (v128 != 1)
                  {
                    if (v128 == 3)
                    {
                      long long v130 = (void *)std::ostream::operator<<();
                      LOBYTE(__p[0]) = 44;
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)__p, 1);
                      long long v131 = (void *)std::ostream::operator<<();
                      LOBYTE(__p[0]) = 44;
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)__p, 1);
                    }
                    else if (v128 == 2)
                    {
                      long long v129 = (void *)std::ostream::operator<<();
                      LOBYTE(__p[0]) = 44;
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v129, (uint64_t)__p, 1);
                    }
                    else
                    {
                      long long v132 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)",...,", 5);
                    }
                  }
                  std::ostream::operator<<();
                  char v120 = 0;
                  ++v119;
                  v117 = v151;
                  v118 += 32;
                }
                while (v119 < (v152 - v151) >> 5);
              }
              __p[0] = &v151;
              std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_219;
            }
            unint64_t v31 = 1;
            while (2)
            {
              uint64_t v32 = v30 + 32 * v31;
              uint64_t v33 = *((void *)v152 - 4);
              switch(*(unsigned char *)(v32 + 12))
              {
                case 0:
                  double v40 = *(double *)v32;
                  uint64_t v34 = *(void *)(v3 + 8);
                  if (*(void *)&v40 != v33) {
                    goto LABEL_58;
                  }
                  goto LABEL_69;
                case 1:
                  double v41 = *(double *)v32;
                  uint64_t v34 = *(void *)(v3 + 8);
                  if (v41 == (double)v33) {
                    goto LABEL_69;
                  }
                  goto LABEL_58;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
LABEL_57:
                  uint64_t v34 = *(void *)(v3 + 8);
                  goto LABEL_58;
                case 6:
                  int v37 = *(_DWORD *)(v32 + 8);
                  uint64_t v38 = *(void *)v32 << 8;
                  uint64_t v34 = *(void *)(v3 + 8);
                  if (v33 == v38 >> 8 && v37 == 0)
                  {
LABEL_69:
                    uint64_t v42 = v34 + 32 * v31;
                    int v43 = *(unsigned __int8 *)(v42 + 28);
                    uint64_t v44 = v42 + 16;
                    uint64_t v45 = *(void *)(*((void *)v152 - 2) - 8) + 1;
                    switch(v43)
                    {
                      case 0:
                        double v46 = *(double *)v44;
                        uint64_t v34 = *(void *)(v3 + 8);
                        if (*(void *)&v46 == v45) {
                          goto LABEL_144;
                        }
                        goto LABEL_58;
                      case 1:
                        double v83 = *(double *)v44;
                        uint64_t v34 = *(void *)(v3 + 8);
                        if (v83 != (double)v45) {
                          goto LABEL_58;
                        }
                        goto LABEL_144;
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 7:
                      case 8:
                      case 9:
                        goto LABEL_57;
                      case 6:
                        int v84 = *(_DWORD *)(v44 + 8);
                        uint64_t v85 = *(void *)v44 << 8;
                        uint64_t v34 = *(void *)(v3 + 8);
                        if (v45 != v85 >> 8 || v84 != 0) {
                          goto LABEL_58;
                        }
LABEL_144:
                        uint64_t v87 = v34 + 32 * v31;
                        int v88 = *(unsigned __int8 *)(v87 + 28);
                        uint64_t v89 = 0;
                        uint64_t v90 = v152;
                        uint64_t v91 = (uint64_t *)(v87 + 16);
                        switch(v88)
                        {
                          case 0:
                            uint64_t v89 = *v91;
                            goto LABEL_168;
                          case 1:
                            uint64_t v89 = (uint64_t)*(double *)v91;
                            goto LABEL_168;
                          case 2:
                            uint64_t v93 = *v91;
                            char v94 = (char **)(*v91 + 8);
                            __idx.__r_.__value_.__r.__words[0] = 0;
                            uint64_t v95 = (char *)v94;
                            if (*(char *)(v93 + 31) < 0) {
                              uint64_t v95 = *v94;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__p, v95);
                            uint64_t v89 = std::stoll((const std::string *)__p, (size_t *)&__idx, 10);
                            if (SBYTE7(v158) < 0) {
                              operator delete(__p[0]);
                            }
                            if (*(char *)(v93 + 31) < 0) {
                              uint64_t v96 = *(void *)(v93 + 16);
                            }
                            else {
                              uint64_t v96 = *(unsigned __int8 *)(v93 + 31);
                            }
                            if (__idx.__r_.__value_.__r.__words[0] != v96)
                            {
                              v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::operator+<char>();
                              unsigned int v115 = std::string::append(&v149, " cannot be interpreted as an integer");
                              long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
                              *(void *)&long long v158 = *((void *)&v115->__r_.__value_.__l + 2);
                              *(_OWORD *)long long __p = v116;
                              v115->__r_.__value_.__l.__size_ = 0;
                              v115->__r_.__value_.__r.__words[2] = 0;
                              v115->__r_.__value_.__r.__words[0] = 0;
                              std::runtime_error::runtime_error(v114, (const std::string *)__p);
                              __cxa_throw(v114, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                            }
                            goto LABEL_168;
                          case 3:
                            uint64_t v92 = *v91;
                            __p[1] = 0;
                            *(void *)&long long v158 = 0;
                            __p[0] = 0;
                            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v92 + 8), *(void *)(v92 + 16), (uint64_t)(*(void *)(v92 + 16) - *(void *)(v92 + 8)) >> 3);
                            turi::flexible_type_fail(0);
                            if (__p[0])
                            {
                              __p[1] = __p[0];
                              operator delete(__p[0]);
                            }
                            goto LABEL_167;
                          case 4:
                            uint64_t v97 = *v91;
                            __p[1] = 0;
                            *(void *)&long long v158 = 0;
                            __p[0] = 0;
                            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v97 + 8), *(uint64_t **)(v97 + 16), (uint64_t)(*(void *)(v97 + 16) - *(void *)(v97 + 8)) >> 4);
                            turi::flexible_type_fail(0);
                            v149.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
                            goto LABEL_167;
                          case 5:
                            uint64_t v98 = *v91;
                            __p[1] = 0;
                            *(void *)&long long v158 = 0;
                            __p[0] = 0;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v98 + 8), *(uint64_t **)(v98 + 16), (uint64_t)(*(void *)(v98 + 16) - *(void *)(v98 + 8)) >> 5);
                            turi::flexible_type_fail(0);
                            v149.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v149);
                            goto LABEL_167;
                          case 6:
                            uint64_t v89 = *v91 << 8 >> 8;
                            goto LABEL_168;
                          case 7:
                            goto LABEL_168;
                          case 8:
                            uint64_t v99 = *v91;
                            long long v100 = *(atomic_uint **)(v99 + 16);
                            uint64_t v163 = *(void *)(v99 + 8);
                            uint64_t v164 = v100;
                            if (v100) {
                              atomic_fetch_add_explicit(v100 + 2, 1u, memory_order_relaxed);
                            }
                            long long v101 = *(_OWORD *)(v99 + 24);
                            long long v102 = *(_OWORD *)(v99 + 56);
                            long long v166 = *(_OWORD *)(v99 + 40);
                            long long v167 = v102;
                            long long v165 = v101;
                            turi::flexible_type_fail(0);
                            boost::detail::shared_count::~shared_count(&v164);
                            goto LABEL_167;
                          case 9:
                            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *v91 + 8);
                            turi::flexible_type_fail(0);
                            if (*((void *)&v159 + 1))
                            {
                              *(void *)&long long v160 = *((void *)&v159 + 1);
                              operator delete(*((void **)&v159 + 1));
                            }
                            if ((void)v158)
                            {
                              *((void *)&v158 + 1) = v158;
                              operator delete((void *)v158);
                            }
                            if (__p[1]) {
                              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                            }
LABEL_167:
                            uint64_t v89 = 0;
LABEL_168:
                            unint64_t v103 = *((void *)v90 - 1);
                            long long v104 = (uint64_t *)*((void *)v90 - 2);
                            if ((unint64_t)v104 >= v103)
                            {
                              std::string v106 = (uint64_t *)*((void *)v90 - 3);
                              uint64_t v107 = v104 - v106;
                              if ((unint64_t)(v107 + 1) >> 61) {
                                std::vector<float>::__throw_length_error[abi:ne180100]();
                              }
                              unint64_t v108 = v103 - (void)v106;
                              unint64_t v109 = (uint64_t)(v103 - (void)v106) >> 2;
                              if (v109 <= v107 + 1) {
                                unint64_t v109 = v107 + 1;
                              }
                              if (v108 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v110 = v109;
                              }
                              if (v110)
                              {
                                v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v90 - 8), v110);
                                std::string v106 = (uint64_t *)*((void *)v90 - 3);
                                long long v104 = (uint64_t *)*((void *)v90 - 2);
                              }
                              else
                              {
                                v111 = 0;
                              }
                              v112 = (uint64_t *)&v111[8 * v107];
                              uint64_t *v112 = v89;
                              long long v105 = v112 + 1;
                              while (v104 != v106)
                              {
                                uint64_t v113 = *--v104;
                                *--v112 = v113;
                              }
                              *((void *)v90 - 3) = v112;
                              *((void *)v90 - 2) = v105;
                              *((void *)v90 - 1) = &v111[8 * v110];
                              if (v106) {
                                operator delete(v106);
                              }
                            }
                            else
                            {
                              *long long v104 = v89;
                              long long v105 = v104 + 1;
                            }
                            *((void *)v90 - 2) = v105;
                            goto LABEL_129;
                          default:
                            goto LABEL_232;
                        }
                      default:
                        goto LABEL_232;
                    }
                  }
                  else
                  {
LABEL_58:
                    uint64_t v35 = v34 + 32 * v31;
                    uint64_t v36 = 0;
                    switch(*(unsigned char *)(v35 + 12))
                    {
                      case 0:
                        uint64_t v36 = *(void *)v35;
                        goto LABEL_94;
                      case 1:
                        uint64_t v36 = (uint64_t)*(double *)v35;
                        goto LABEL_94;
                      case 2:
                        uint64_t v48 = *(void *)v35;
                        long long v49 = (char **)(*(void *)v35 + 8);
                        size_t v162 = 0;
                        uint64_t v50 = (char *)v49;
                        if (*(char *)(v48 + 31) < 0) {
                          uint64_t v50 = *v49;
                        }
                        std::string::basic_string[abi:ne180100]<0>(__p, v50);
                        uint64_t v36 = std::stoll((const std::string *)__p, &v162, 10);
                        if (SBYTE7(v158) < 0) {
                          operator delete(__p[0]);
                        }
                        if (*(char *)(v48 + 31) < 0) {
                          uint64_t v51 = *(void *)(v48 + 16);
                        }
                        else {
                          uint64_t v51 = *(unsigned __int8 *)(v48 + 31);
                        }
                        if (v162 != v51)
                        {
                          unint64_t v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::operator+<char>();
                          v141 = std::string::append(&__idx, " cannot be interpreted as an integer");
                          long long v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
                          *(void *)&long long v158 = *((void *)&v141->__r_.__value_.__l + 2);
                          *(_OWORD *)long long __p = v142;
                          v141->__r_.__value_.__l.__size_ = 0;
                          v141->__r_.__value_.__r.__words[2] = 0;
                          v141->__r_.__value_.__r.__words[0] = 0;
                          std::runtime_error::runtime_error(v140, (const std::string *)__p);
                          __cxa_throw(v140, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                        }
                        goto LABEL_94;
                      case 3:
                        uint64_t v47 = *(void *)v35;
                        __p[1] = 0;
                        *(void *)&long long v158 = 0;
                        __p[0] = 0;
                        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v47 + 8), *(void *)(v47 + 16), (uint64_t)(*(void *)(v47 + 16) - *(void *)(v47 + 8)) >> 3);
                        turi::flexible_type_fail(0);
                        if (__p[0])
                        {
                          __p[1] = __p[0];
                          operator delete(__p[0]);
                        }
                        goto LABEL_93;
                      case 4:
                        uint64_t v52 = *(void *)v35;
                        __p[1] = 0;
                        *(void *)&long long v158 = 0;
                        __p[0] = 0;
                        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v52 + 8), *(uint64_t **)(v52 + 16), (uint64_t)(*(void *)(v52 + 16) - *(void *)(v52 + 8)) >> 4);
                        turi::flexible_type_fail(0);
                        __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
                        goto LABEL_93;
                      case 5:
                        uint64_t v53 = *(void *)v35;
                        __p[1] = 0;
                        *(void *)&long long v158 = 0;
                        __p[0] = 0;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v53 + 8), *(uint64_t **)(v53 + 16), (uint64_t)(*(void *)(v53 + 16) - *(void *)(v53 + 8)) >> 5);
                        turi::flexible_type_fail(0);
                        __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
                        goto LABEL_93;
                      case 6:
                        uint64_t v36 = (uint64_t)(*(void *)v35 << 8) >> 8;
                        goto LABEL_94;
                      case 7:
                        goto LABEL_94;
                      case 8:
                        uint64_t v54 = *(void *)v35;
                        uint64_t v55 = *(atomic_uint **)(v54 + 16);
                        uint64_t v163 = *(void *)(v54 + 8);
                        uint64_t v164 = v55;
                        if (v55) {
                          atomic_fetch_add_explicit(v55 + 2, 1u, memory_order_relaxed);
                        }
                        long long v56 = *(_OWORD *)(v54 + 24);
                        long long v57 = *(_OWORD *)(v54 + 56);
                        long long v166 = *(_OWORD *)(v54 + 40);
                        long long v167 = v57;
                        long long v165 = v56;
                        turi::flexible_type_fail(0);
                        boost::detail::shared_count::~shared_count(&v164);
                        goto LABEL_93;
                      case 9:
                        turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)v35 + 8);
                        turi::flexible_type_fail(0);
                        if (*((void *)&v159 + 1))
                        {
                          *(void *)&long long v160 = *((void *)&v159 + 1);
                          operator delete(*((void **)&v159 + 1));
                        }
                        if ((void)v158)
                        {
                          *((void *)&v158 + 1) = v158;
                          operator delete((void *)v158);
                        }
                        if (__p[1]) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                        }
LABEL_93:
                        uint64_t v36 = 0;
LABEL_94:
                        uint64_t v58 = *(void *)(v3 + 8) + 32 * v31;
                        int v59 = *(unsigned __int8 *)(v58 + 28);
                        uint64_t v60 = 0;
                        std::string v61 = (uint64_t *)(v58 + 16);
                        switch(v59)
                        {
                          case 0:
                            uint64_t v60 = *v61;
                            goto LABEL_118;
                          case 1:
                            uint64_t v60 = (uint64_t)*(double *)v61;
                            goto LABEL_118;
                          case 2:
                            uint64_t v63 = *v61;
                            long long v64 = (char **)(*v61 + 8);
                            size_t v162 = 0;
                            std::string v65 = (char *)v64;
                            if (*(char *)(v63 + 31) < 0) {
                              std::string v65 = *v64;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__p, v65);
                            uint64_t v60 = std::stoll((const std::string *)__p, &v162, 10);
                            if (SBYTE7(v158) < 0) {
                              operator delete(__p[0]);
                            }
                            if (*(char *)(v63 + 31) < 0) {
                              uint64_t v66 = *(void *)(v63 + 16);
                            }
                            else {
                              uint64_t v66 = *(unsigned __int8 *)(v63 + 31);
                            }
                            if (v162 != v66)
                            {
                              uint64_t v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::operator+<char>();
                              unint64_t v144 = std::string::append(&__idx, " cannot be interpreted as an integer");
                              long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
                              *(void *)&long long v158 = *((void *)&v144->__r_.__value_.__l + 2);
                              *(_OWORD *)long long __p = v145;
                              v144->__r_.__value_.__l.__size_ = 0;
                              v144->__r_.__value_.__r.__words[2] = 0;
                              v144->__r_.__value_.__r.__words[0] = 0;
                              std::runtime_error::runtime_error(v143, (const std::string *)__p);
                              __cxa_throw(v143, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                            }
                            goto LABEL_118;
                          case 3:
                            uint64_t v62 = *v61;
                            __p[1] = 0;
                            *(void *)&long long v158 = 0;
                            __p[0] = 0;
                            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v62 + 8), *(void *)(v62 + 16), (uint64_t)(*(void *)(v62 + 16) - *(void *)(v62 + 8)) >> 3);
                            turi::flexible_type_fail(0);
                            if (__p[0])
                            {
                              __p[1] = __p[0];
                              operator delete(__p[0]);
                            }
                            goto LABEL_117;
                          case 4:
                            uint64_t v67 = *v61;
                            __p[1] = 0;
                            *(void *)&long long v158 = 0;
                            __p[0] = 0;
                            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v67 + 8), *(uint64_t **)(v67 + 16), (uint64_t)(*(void *)(v67 + 16) - *(void *)(v67 + 8)) >> 4);
                            turi::flexible_type_fail(0);
                            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
                            goto LABEL_117;
                          case 5:
                            uint64_t v68 = *v61;
                            __p[1] = 0;
                            *(void *)&long long v158 = 0;
                            __p[0] = 0;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v68 + 8), *(uint64_t **)(v68 + 16), (uint64_t)(*(void *)(v68 + 16) - *(void *)(v68 + 8)) >> 5);
                            turi::flexible_type_fail(0);
                            __idx.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__idx);
                            goto LABEL_117;
                          case 6:
                            uint64_t v60 = *v61 << 8 >> 8;
                            goto LABEL_118;
                          case 7:
                            goto LABEL_118;
                          case 8:
                            uint64_t v69 = *v61;
                            uint64_t v70 = *(atomic_uint **)(v69 + 16);
                            uint64_t v163 = *(void *)(v69 + 8);
                            uint64_t v164 = v70;
                            if (v70) {
                              atomic_fetch_add_explicit(v70 + 2, 1u, memory_order_relaxed);
                            }
                            long long v71 = *(_OWORD *)(v69 + 24);
                            long long v72 = *(_OWORD *)(v69 + 56);
                            long long v166 = *(_OWORD *)(v69 + 40);
                            long long v167 = v72;
                            long long v165 = v71;
                            turi::flexible_type_fail(0);
                            boost::detail::shared_count::~shared_count(&v164);
                            goto LABEL_117;
                          case 9:
                            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *v61 + 8);
                            turi::flexible_type_fail(0);
                            if (*((void *)&v159 + 1))
                            {
                              *(void *)&long long v160 = *((void *)&v159 + 1);
                              operator delete(*((void **)&v159 + 1));
                            }
                            if ((void)v158)
                            {
                              *((void *)&v158 + 1) = v158;
                              operator delete((void *)v158);
                            }
                            if (__p[1]) {
                              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                            }
LABEL_117:
                            uint64_t v60 = 0;
LABEL_118:
                            long long v73 = operator new(8uLL);
                            void *v73 = v60;
                            v149.__r_.__value_.__r.__words[0] = v36;
                            uint64_t v150 = 0;
                            *(_OWORD *)&v149.__r_.__value_.__r.__words[1] = 0uLL;
                            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v149.__r_.__value_.__l.__size_, v73, (uint64_t)(v73 + 1), 1uLL);
                            long long v74 = v152;
                            if (v152 >= v153)
                            {
                              uint64_t v75 = (v152 - v151) >> 5;
                              unint64_t v76 = v75 + 1;
                              if ((unint64_t)(v75 + 1) >> 59) {
                                std::vector<float>::__throw_length_error[abi:ne180100]();
                              }
                              uint64_t v77 = v153 - v151;
                              if ((v153 - v151) >> 4 > v76) {
                                unint64_t v76 = v77 >> 4;
                              }
                              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFE0) {
                                unint64_t v78 = 0x7FFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v78 = v76;
                              }
                              *(void *)&long long v159 = &v153;
                              atomic_ullong v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>((uint64_t)&v153, v78);
                              int v80 = &v79[32 * v75];
                              __p[0] = v79;
                              __p[1] = v80;
                              *((void *)&v158 + 1) = &v79[32 * v81];
                              *(void *)int v80 = v149.__r_.__value_.__r.__words[0];
                              *((void *)v80 + 1) = 0;
                              *((void *)v80 + 2) = 0;
                              *((void *)v80 + 3) = 0;
                              *(_OWORD *)(v80 + 8) = *(_OWORD *)&v149.__r_.__value_.__r.__words[1];
                              *((void *)v80 + 3) = v150;
                              *(_OWORD *)&v149.__r_.__value_.__r.__words[1] = 0uLL;
                              uint64_t v150 = 0;
                              *(void *)&long long v158 = v80 + 32;
                              std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__swap_out_circular_buffer((uint64_t *)&v151, __p);
                              unint64_t v82 = v152;
                              std::__split_buffer<std::pair<unsigned long,std::vector<unsigned long>>>::~__split_buffer((uint64_t)__p);
                              uint64_t v152 = v82;
                              if (v149.__r_.__value_.__l.__size_)
                              {
                                v149.__r_.__value_.__r.__words[2] = v149.__r_.__value_.__l.__size_;
                                operator delete((void *)v149.__r_.__value_.__l.__size_);
                              }
                            }
                            else
                            {
                              *(void *)uint64_t v152 = v149.__r_.__value_.__r.__words[0];
                              *((void *)v74 + 1) = 0;
                              *((void *)v74 + 2) = 0;
                              *((void *)v74 + 3) = 0;
                              *(_OWORD *)(v74 + 8) = *(_OWORD *)&v149.__r_.__value_.__r.__words[1];
                              *((void *)v74 + 3) = v150;
                              *(_OWORD *)&v149.__r_.__value_.__r.__words[1] = 0uLL;
                              uint64_t v150 = 0;
                              uint64_t v152 = v74 + 32;
                            }
                            operator delete(v73);
LABEL_129:
                            ++v31;
                            uint64_t v30 = *(void *)(v3 + 8);
                            if (v31 >= (*(void *)(v3 + 16) - v30) >> 5) {
                              goto LABEL_188;
                            }
                            continue;
                          default:
                            goto LABEL_232;
                        }
                      default:
                        goto LABEL_232;
                    }
                  }
                default:
                  goto LABEL_232;
              }
            }
LABEL_232:
            uint64_t result = turi::flexible_type_fail(0);
            break;
          default:
            goto LABEL_232;
        }
        break;
      default:
        uint64_t result = turi::flexible_type_fail(0);
        break;
    }
    __break(1u);
  }
  return result;
}

void sub_2240406D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a63 < 0) {
    operator delete(__p);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v64 & 1) == 0)
    {
LABEL_8:
      a15 = &a22;
      std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
      std::ostringstream::~ostringstream((uint64_t)&a25);
      _Unwind_Resume(a1);
    }
  }
  else if (!v64)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v63);
  goto LABEL_8;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>> const*,std::pair<unsigned long,std::vector<unsigned long>> const*,std::pair<unsigned long,std::vector<unsigned long>>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = *(void *)v6;
      v4[2] = 0;
      double v4[3] = 0;
      v4[1] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v4 + 1, *(const void **)(v6 + 8), *(void *)(v6 + 16), (uint64_t)(*(void *)(v6 + 16) - *(void *)(v6 + 8)) >> 3);
      uint64_t v4 = v11 + 4;
      v11 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_224040C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::pair<unsigned long,std::vector<unsigned long>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 - 24);
    if (v3)
    {
      *(void *)(v1 - 16) = v3;
      operator delete(v3);
    }
    v1 -= 32;
  }
}

void std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<std::pair<unsigned long,std::vector<unsigned long>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v7 - 32) = v8;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::vector<unsigned long>>>,std::reverse_iterator<std::pair<unsigned long,std::vector<unsigned long>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<unsigned long,std::vector<unsigned long>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<unsigned long,std::vector<unsigned long>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

uint64_t std::__function::__value_func<std::string ()(std::shared_ptr<turi::query_eval::planner_node>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void turi::query_eval::make_segmented_graph(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void **)(a3 + 8);
  if (!v6)
  {
LABEL_7:
    if (a2) {
      operator new();
    }
    __p[0] = a1;
    uint64_t v9 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
    uint64_t v11 = (uint64_t *)*a1;
    uint64_t v10 = (uint64_t *)a1[1];
    if (v10) {
      atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
    }
    char v12 = (std::__shared_weak_count *)v9[7];
    v9[6] = v11;
    v9[7] = v10;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  unint64_t v7 = *a1;
  while (1)
  {
    unint64_t v8 = v6[4];
    if (v7 >= v8) {
      break;
    }
LABEL_6:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (v8 < v7)
  {
    ++v6;
    goto LABEL_6;
  }
  __p[0] = a1;
  long long v13 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
  *(void *)a4 = v13[6];
  long long v14 = v13[7];
  *(void *)(a4 + 8) = v14;
  if (v14) {
    atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
  }
}

void sub_224041B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a35 < 0)
  {
    operator delete(a30);
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (a17 < 0) {
        operator delete(a12);
      }
      uint64_t v39 = *(std::__shared_weak_count **)(v35 + 8);
      if (v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t **turi::query_eval::make_sliced_graph@<X0>(unint64_t *a1@<X0>, std::string::size_type a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v13.__r_.__value_.__r.__words[0] = a2;
  uint64_t v11 = a3;
  if (a2 > (unint64_t)a3)
  {
    __p[0] = &v13;
    __p[1] = &v11;
    turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_0::operator()();
  }
  uint64_t v6 = *(void **)(a4 + 8);
  if (!v6) {
LABEL_8:
  }
    operator new();
  unint64_t v7 = *a1;
  while (1)
  {
    unint64_t v8 = v6[4];
    if (v7 >= v8) {
      break;
    }
LABEL_7:
    uint64_t v6 = (void *)*v6;
    if (!v6) {
      goto LABEL_8;
    }
  }
  if (v8 < v7)
  {
    ++v6;
    goto LABEL_7;
  }
  __p[0] = a1;
  uint64_t result = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a4, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
  *a5 = result[6];
  uint64_t v10 = result[7];
  a5[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_224042940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 89) < 0)
  {
    operator delete(*(void **)(v26 - 112));
    if ((v25 & 1) == 0)
    {
LABEL_8:
      if (a17 < 0) {
        operator delete(a12);
      }
      long long v28 = *(std::__shared_weak_count **)(v23 + 8);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v24);
  goto LABEL_8;
}

void turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_transformations.cpp", 130);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"begin_index", 11);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"end_index", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_transformations.cpp", "operator()", 60, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string v13 = v16;
  turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224042D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_transformations.cpp", 130);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"end_index", 9);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"old_end_index", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  unint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    char v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/operator_transformations.cpp", "operator()", 76, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  std::string v13 = v16;
  turi::query_eval::make_sliced_graph(std::shared_ptr<turi::query_eval::planner_node>,unsigned long,unsigned long,std::map<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::planner_node>> &)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224042F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::planner_node::planner_node(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const void ***)(a2 + 32);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = (uint64_t *)(a1 + 32);
  std::map<std::string,turi::flexible_type>::map[abi:ne180100]((uint64_t *)(a1 + 8), a2 + 8);
  std::map<std::string,turi::any>::map[abi:ne180100](v5, v4);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__init_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((void *)(a1 + 56), *(void **)(a2 + 56), *(void **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_224043130(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(v3, *(void **)(v1 + 40));
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::query_eval::planner_node>::shared_ptr[abi:ne180100]<turi::query_eval::planner_node,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2240431CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<turi::query_eval::planner_node>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::query_eval::planner_node *,std::shared_ptr<turi::query_eval::planner_node>::__shared_ptr_default_delete<turi::query_eval::planner_node,turi::query_eval::planner_node>,std::allocator<turi::query_eval::planner_node>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<turi::query_eval::planner_node *,std::shared_ptr<turi::query_eval::planner_node>::__shared_ptr_default_delete<turi::query_eval::planner_node,turi::query_eval::planner_node>,std::allocator<turi::query_eval::planner_node>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::query_eval::planner_node>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 88);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = (void **)(a2 + 56);
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(a2 + 32, *(void **)(a2 + 40));
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(a2 + 8, *(void **)(a2 + 16));
    MEMORY[0x22A614FA0](a2, 0x1020C409E48DA19);
  }
}

uint64_t std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::__map_value_compare<std::string,std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,turi::any>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void turi::query_eval::optimization_transform_registry::set_num_stages(turi::query_eval::optimization_transform_registry *this, unint64_t a2)
{
  std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::resize((uint64_t *)this, a2);
  uint64_t v3 = *(uint64_t **)this;
  uint64_t v4 = (uint64_t *)*((void *)this + 1);
  while (v3 != v4)
  {
    std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::resize(v3, 0x10uLL);
    v3 += 3;
  }
}

void std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      unint64_t v8 = v3;
      std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      unint64_t v8 = v3;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void turi::query_eval::optimization_transform_registry::register_optimization(void *a1, uint64_t **a2, long long *a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      char v9 = 0;
      uint64_t v10 = *v3;
      do
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)a3 + 24))(*(void *)a3, v8))
        {
          std::vector<std::shared_ptr<turi::query_eval::opt_transform>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(*a1 + 24 * v10) + v7), a3);
          char v9 = 1;
        }
        ++v8;
        v7 += 24;
      }
      while (v8 != 16);
      std::string::basic_string[abi:ne180100]<0>(&v20, "Config ERROR: transform ");
      (*(void (**)(void **__return_ptr))(**(void **)a3 + 16))(v18);
      if ((v19 & 0x80u) == 0) {
        uint64_t v11 = v18;
      }
      else {
        uint64_t v11 = (void **)v18[0];
      }
      if ((v19 & 0x80u) == 0) {
        std::string::size_type v12 = v19;
      }
      else {
        std::string::size_type v12 = (std::string::size_type)v18[1];
      }
      std::string v13 = std::string::append(&v20, (const std::string::value_type *)v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      char v15 = std::string::append(&v21, " does not seem to apply to any node types.");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      int64_t v23 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      uint64_t v17 = __p;
      if (v23 < 0) {
        uint64_t v17 = (void **)__p[0];
      }
      assert_msg(v9 & 1, "%s", (const char *)v17);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if ((char)v19 < 0) {
        operator delete(v18[0]);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      ++v3;
    }
    while (v3 != v4);
  }
}

void sub_224043684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<turi::query_eval::opt_transform>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<turi::query_eval::opt_transform>>::__swap_out_circular_buffer(a1, v18);
    char v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    char v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2240437F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::optimization_engine::optimize_planner_graph(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<turi::query_eval::optimization_transform_registry const>::~shared_ptr[abi:ne180100], &turi::query_eval::get_transform_registry(void)::transform_registry, &dword_223D44000);
  }
  uint64_t v6 = turi::query_eval::get_transform_registry(void)::transform_registry;
  if (turi::query_eval::get_transform_registry(void)::transform_registry) {
    goto LABEL_3;
  }
  {
    turi::mutex::mutex(&turi::query_eval::get_transform_registry(void)::creation_lock);
    __cxa_atexit((void (*)(void *))turi::mutex::~mutex, &turi::query_eval::get_transform_registry(void)::creation_lock, &dword_223D44000);
  }
  pthread_mutex_lock(&turi::query_eval::get_transform_registry(void)::creation_lock);
  uint64_t v6 = turi::query_eval::get_transform_registry(void)::transform_registry;
  if (!turi::query_eval::get_transform_registry(void)::transform_registry) {
    operator new();
  }
  uint64_t v7 = (std::__shared_weak_count *)qword_268082008;
  if (qword_268082008) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_268082008 + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&turi::query_eval::get_transform_registry(void)::creation_lock);
  if (!v6)
  {
    uint64_t v6 = turi::query_eval::get_transform_registry(void)::transform_registry;
LABEL_3:
    uint64_t v7 = (std::__shared_weak_count *)qword_268082008;
    if (qword_268082008) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_268082008 + 8), 1uLL, memory_order_relaxed);
    }
  }
  pthread_mutex_lock(&turi::query_eval::global_query_lock);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v12 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v12 = 0;
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v16 = v17;
  memset(v17, 0, sizeof(v17));
  uint64_t v8 = *a1;
  char v9 = (std::__shared_weak_count *)a1[1];
  v10[0] = v8;
  v10[1] = (uint64_t)v9;
  uint64_t v11 = v6;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::_run((uint64_t)&v11, v10, a2, a3);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  turi::query_eval::optimization_engine::~optimization_engine((turi::query_eval::optimization_engine *)&v11);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_224043A54(_Unwind_Exception *a1)
{
}

void turi::query_eval::optimization_engine::_run(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v21 = *a2;
  uint64_t v22 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::make_planner_node(&v21, &v23);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v18 = v23;
  unsigned __int8 v19 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::build_node_info(a1, &v18, &v20);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  turi::query_eval::get_stages_to_run(a3, &__p);
  uint64_t v8 = (uint64_t *)__p;
  char v9 = v17;
  if (__p != v17)
  {
    do
    {
      uint64_t v10 = *v8;
      uint64_t v11 = (std::__shared_weak_count *)*((void *)&v20 + 1);
      long long v15 = v20;
      if (*((void *)&v20 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::optimization_engine::run_stage(a1, v10, &v15);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      ++v8;
    }
    while (v8 != v9);
  }
  uint64_t v12 = *(uint64_t **)(v23 + 56);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *a4 = v14;
  a4[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  if (__p)
  {
    long long v17 = (uint64_t *)__p;
    operator delete(__p);
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_224043C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 56);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<turi::query_eval::optimization_transform_registry const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void turi::query_eval::optimization_engine::replace_node(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (!*((unsigned char *)*a2 + 89))
  {
    uint64_t v5 = *v3;
    if (*v3 != *a3)
    {
      uint64_t v7 = (std::__shared_weak_count *)v3[1];
      uint64_t v42 = v5;
      int v43 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::optimization_engine::build_node_info(a1, &v42, &v44);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      uint64_t v39 = *a3;
      double v40 = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::optimization_engine::build_node_info(a1, &v39, &v41);
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      std::vector<std::shared_ptr<turi::query_eval::node_info>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<turi::query_eval::node_info>*>,std::__wrap_iter<std::shared_ptr<turi::query_eval::node_info>*>>((uint64_t *)(v41 + 64), *(void **)(v41 + 72), *(uint64_t **)(v44 + 64), *(void **)(v44 + 72), (uint64_t)(*(void *)(v44 + 72) - *(void *)(v44 + 64)) >> 4);
      uint64_t v9 = v44;
      uint64_t v10 = *(void *)(v44 + 64);
      uint64_t v11 = *(void *)(v44 + 72);
      if (v10 != v11)
      {
        do
        {
          uint64_t v12 = *(void *)(*(void *)v10 + 40);
          uint64_t v13 = *(void *)(*(void *)v10 + 48) - v12;
          if (v13)
          {
            uint64_t v14 = 0;
            uint64_t v15 = v13 >> 4;
            if ((unint64_t)(v13 >> 4) <= 1) {
              uint64_t v15 = 1;
            }
            while (*(void *)(v12 + v14) != (void)v44)
            {
              v14 += 16;
              if (!--v15) {
                goto LABEL_27;
              }
            }
            long long v16 = v41;
            if (*((void *)&v41 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v17 = v12 + v14;
            uint64_t v18 = *(std::__shared_weak_count **)(v17 + 8);
            *(_OWORD *)uint64_t v17 = v16;
            if (v18) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v18);
            }
            uint64_t v19 = *(void *)(**(void **)v10 + 56);
            uint64_t v21 = *(void *)v41;
            uint64_t v20 = *(void *)(v41 + 8);
            if (v20) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v22 = (void *)(v19 + v14);
            uint64_t v23 = (std::__shared_weak_count *)v22[1];
            void *v22 = v21;
            v22[1] = v20;
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
          }
LABEL_27:
          v10 += 16;
        }
        while (v10 != v11);
        uint64_t v9 = v44;
      }
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)(v9 + 64));
      uint64_t v24 = (std::__shared_weak_count *)*((void *)&v44 + 1);
      long long v38 = v44;
      if (*((void *)&v44 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::optimization_engine::eliminate_node_and_prune(a1, (uint64_t *)&v38);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      uint64_t v25 = v41;
      uint64_t v26 = *(uint64_t **)(v41 + 40);
      long long v27 = *(uint64_t **)(v41 + 48);
      if (v26 != v27)
      {
        do
        {
          uint64_t v28 = *v26;
          uint64_t v29 = (std::__shared_weak_count *)v26[1];
          if (v29)
          {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
            *((void *)&v37 + 1) = v29;
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            *((void *)&v37 + 1) = 0;
          }
          *(void *)&long long v37 = v28;
          if (*(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(v28 + 16))) {
            std::vector<std::shared_ptr<turi::query_eval::node_info const>>::push_back[abi:ne180100]((uint64_t *)(a1 + 40), &v37);
          }
          if (*((void *)&v37 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
          }
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          v26 += 2;
        }
        while (v26 != v27);
        uint64_t v25 = v41;
      }
      uint64_t v30 = *(uint64_t **)(v25 + 64);
      unint64_t v31 = *(uint64_t **)(v25 + 72);
      if (v30 != v31)
      {
        do
        {
          uint64_t v32 = *v30;
          uint64_t v33 = (std::__shared_weak_count *)v30[1];
          if (v33)
          {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            *((void *)&v36 + 1) = v33;
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            *((void *)&v36 + 1) = 0;
          }
          *(void *)&long long v36 = v32;
          if (*(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(v32 + 16))) {
            std::vector<std::shared_ptr<turi::query_eval::node_info const>>::push_back[abi:ne180100]((uint64_t *)(a1 + 40), &v36);
          }
          if (*((void *)&v36 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
          }
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          v30 += 2;
        }
        while (v30 != v31);
        uint64_t v25 = v41;
      }
      uint64_t v34 = (std::__shared_weak_count *)*((void *)&v41 + 1);
      *(void *)&long long v35 = v25;
      *((void *)&v35 + 1) = *((void *)&v41 + 1);
      if (*((void *)&v41 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (*(_DWORD *)(*(void *)(a1 + 16) + 4 * *(int *)(v25 + 16)))
      {
        std::vector<std::shared_ptr<turi::query_eval::node_info const>>::push_back[abi:ne180100]((uint64_t *)(a1 + 40), &v35);
        uint64_t v34 = (std::__shared_weak_count *)*((void *)&v35 + 1);
      }
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (*((void *)&v41 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
      }
      if (*((void *)&v44 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
      }
    }
  }
}

void sub_224043FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 56);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::optimization_engine::build_node_info(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X8>)
{
  uint64_t v7 = (uint64_t **)(a1 + 72);
  uint64_t v6 = *(void **)(a1 + 72);
  if (!v6) {
    goto LABEL_12;
  }
  unint64_t v8 = *a2;
  uint64_t v9 = (uint64_t **)(a1 + 72);
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= v8;
    if (v10 >= v8) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v6 + 1;
    }
    if (v11) {
      uint64_t v9 = (uint64_t **)v6;
    }
    uint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 != v7 && v8 >= (unint64_t)v9[4])
  {
    *(void *)a3 = v9[6];
    uint64_t v24 = v9[7];
    *((void *)a3 + 1) = v24;
    if (v24) {
      atomic_fetch_add_explicit(v24 + 1, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    std::allocate_shared[abi:ne180100]<turi::query_eval::node_info,std::allocator<turi::query_eval::node_info>,std::shared_ptr<turi::query_eval::planner_node> &,void>(a2, a3);
    std::vector<std::shared_ptr<turi::query_eval::node_info>>::push_back[abi:ne180100]((uint64_t *)(a1 + 88), a3);
    *(void *)&long long v26 = a2;
    uint64_t v13 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(v7 - 1, (unint64_t *)a2, (uint64_t)&std::piecewise_construct, (uint64_t **)&v26);
    uint64_t v15 = *(uint64_t **)a3;
    uint64_t v14 = (uint64_t *)*((void *)a3 + 1);
    if (v14) {
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    }
    long long v16 = (std::__shared_weak_count *)v13[7];
    v13[6] = v15;
    v13[7] = v14;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    std::vector<std::shared_ptr<turi::query_eval::node_info>>::resize((uint64_t *)(*(void *)a3 + 40), (uint64_t)(*(void *)(*a2 + 64) - *(void *)(*a2 + 56)) >> 4);
    uint64_t v17 = *(void *)(*a2 + 56);
    if (*(void *)(*a2 + 64) != v17)
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        long long v20 = *(_OWORD *)(v17 + 16 * v19);
        long long v25 = v20;
        if (*((void *)&v20 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        turi::query_eval::optimization_engine::build_node_info(&v26, a1, &v25);
        uint64_t v21 = *(void *)(*(void *)a3 + 40);
        long long v22 = v26;
        long long v26 = 0uLL;
        uint64_t v23 = *(std::__shared_weak_count **)(v21 + v18 + 8);
        *(_OWORD *)(v21 + 16 * v19) = v22;
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        if (*((void *)&v26 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
        }
        if (*((void *)&v25 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
        }
        std::vector<std::shared_ptr<turi::query_eval::node_info>>::push_back[abi:ne180100]((uint64_t *)(*(void *)(*(void *)(*(void *)a3 + 40) + v18) + 64), a3);
        ++v19;
        uint64_t v17 = *(void *)(*a2 + 56);
        v18 += 16;
      }
      while (v19 < (*(void *)(*a2 + 64) - v17) >> 4);
    }
  }
}

void sub_224044250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::optimization_engine::eliminate_node_and_prune(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(v2 + 89) = 1;
  uint64_t v3 = *(void *)(v2 + 48);
  if (*(void *)(v2 + 40) != v3)
  {
    do
    {
      uint64_t v7 = *(void *)(v3 - 16);
      uint64_t v6 = *(std::__shared_weak_count **)(v3 - 8);
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v2 = *a2;
      }
      uint64_t v8 = *(void *)(v2 + 48);
      uint64_t v9 = *(std::__shared_weak_count **)(v8 - 8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      *(void *)(v2 + 48) = v8 - 16;
      uint64_t v11 = *(void *)(v7 + 64);
      uint64_t v10 = *(long long **)(v7 + 72);
      uint64_t v12 = (uint64_t)v10 - v11;
      if ((long long *)((char *)v10 - v11) == (long long *)16)
      {
        if (*(void *)v11 == *a2)
        {
          std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)(v7 + 64));
          v19[0] = v7;
          v19[1] = v6;
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          turi::query_eval::optimization_engine::eliminate_node_and_prune(a1, v19);
          if (!v6) {
            goto LABEL_20;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          goto LABEL_19;
        }
      }
      else if (v10 != (long long *)v11)
      {
        uint64_t v13 = v12 >> 4;
        if ((unint64_t)(v12 >> 4) <= 1) {
          uint64_t v13 = 1;
        }
        uint64_t v14 = *(void *)(v7 + 64);
        while (*(void *)v11 != *a2)
        {
          v11 += 16;
          v14 += 16;
          if (!--v13) {
            goto LABEL_18;
          }
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>((uint64_t)&v20, (long long *)(v11 + 16), v10, v11);
        uint64_t v16 = v11 + v15 - v14;
        for (uint64_t i = *(void *)(v7 + 72); i != v16; i -= 16)
        {
          uint64_t v18 = *(std::__shared_weak_count **)(i - 8);
          if (v18) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
        }
        *(void *)(v7 + 72) = v16;
        if (!v6) {
          goto LABEL_20;
        }
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        goto LABEL_20;
      }
LABEL_18:
      if (v6) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v2 = *a2;
      uint64_t v3 = *(void *)(*a2 + 48);
    }
    while (*(void *)(*a2 + 40) != v3);
  }
}

void sub_224044400(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<turi::query_eval::node_info>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<turi::query_eval::node_info>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224044534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::query_eval::node_info>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<turi::query_eval::node_info>>::__append(a1, v5);
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)15>::make_planner_node(uint64_t *a1@<X0>, void *a2@<X8>)
{
  v12[1] = *MEMORY[0x263EF8340];
  unint64_t v11 = 0;
  v12[0] = 0;
  uint64_t v10 = &v11;
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = (const void **)v7;
  memset(v5, 0, sizeof(v5));
  int v8 = 15;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v8, (uint64_t)&v10, &v6, v5, a2);
  uint64_t v9 = (void **)v5;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v6, v7[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v10, v11);
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  uint64_t v10 = (std::__shared_weak_count **)*a1;
  unint64_t v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node> const*,std::shared_ptr<turi::query_eval::planner_node> const*>(*a2 + 56, (uint64_t *)&v10, v12, 1uLL);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_2240446E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  char v20 = *(std::__shared_weak_count **)(v18 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::optimization_engine::run_stage(uint64_t a1, uint64_t a2, void *a3)
{
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 16), 0x10uLL);
  unint64_t v4 = *(char **)(a1 + 16);
  unint64_t v5 = *(char **)(a1 + 24);
  uint64_t v6 = v5 - v4;
  if (v5 != v4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v6 >> 2;
    uint64_t v9 = *(void *)(**(void **)a1 + 24 * a2);
    if ((unint64_t)(v6 >> 2) <= 1) {
      uint64_t v8 = 1;
    }
    do
    {
      *(_DWORD *)unint64_t v4 = *(void *)(v9 + 24 * SHIDWORD(v7)) != *(void *)(v9 + 24 * SHIDWORD(v7) + 8);
      v4 += 4;
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
  do
  {
    char v20 = (std::__shared_weak_count *)a3[1];
    v25[0] = *a3;
    v25[1] = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::optimization_engine::_build_active_node_queue((void *)a1, (uint64_t)v25);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    uint64_t v13 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 40) == v13) {
      break;
    }
    char v10 = 0;
    do
    {
      uint64_t v12 = *(void *)(v13 - 16);
      unint64_t v11 = *(std::__shared_weak_count **)(v13 - 8);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = *(void *)(a1 + 48);
        uint64_t v14 = *(std::__shared_weak_count **)(v13 - 8);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      *(void *)(a1 + 48) = v13 - 16;
      if (!*(unsigned char *)(v12 + 89))
      {
        uint64_t v15 = *(void *)(**(void **)a1 + 24 * a2) + 24 * *(int *)(v12 + 16);
        long long v17 = *(uint64_t **)v15;
        uint64_t v16 = *(uint64_t **)(v15 + 8);
        while (v17 != v16)
        {
          uint64_t v18 = *v17;
          uint64_t v23 = v12;
          uint64_t v24 = v11;
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 32))(v18, a1, &v23);
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          if (v19)
          {
            char v10 = 1;
            break;
          }
          v17 += 2;
        }
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      uint64_t v13 = *(void *)(a1 + 48);
    }
    while (*(void *)(a1 + 40) != v13);
  }
  while ((v10 & 1) != 0);
}

void sub_224044918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::optimization_engine::_build_active_node_queue(void *a1, uint64_t a2)
{
  v35[1] = *MEMORY[0x263EF8340];
  unint64_t v4 = a1 + 5;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100](a1 + 5);
  std::vector<std::shared_ptr<turi::query_eval::node_info const>>::reserve(v4, a1[10]);
  unint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v33 = *(std::__shared_weak_count ***)a2;
  uint64_t v34 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<turi::query_eval::node_info const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::node_info const> const*,std::shared_ptr<turi::query_eval::node_info const> const*>((uint64_t)v4, (uint64_t *)&v33, v35, 1uLL);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v34 = 0;
  v35[0] = 0;
  uint64_t v33 = &v34;
  uint64_t v6 = a1[5];
  uint64_t v7 = (void *)a1[6];
  if (v7 == (void *)v6)
  {
    uint64_t v6 = a1[6];
    goto LABEL_33;
  }
  unint64_t v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(v6 + 16 * v8);
    char v10 = *(unint64_t **)(v9 + 40);
    unint64_t v11 = *(unint64_t **)(v9 + 48);
    if (v10 != v11)
    {
      do
      {
        unint64_t v12 = *v10;
        unint64_t v13 = v10[1];
        *(void *)&long long v32 = *v10;
        *((void *)&v32 + 1) = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = v34;
        uint64_t v15 = &v34;
        if (!v34) {
          goto LABEL_21;
        }
        uint64_t v16 = &v34;
        do
        {
          unint64_t shared_owners = v14[1].__shared_owners_;
          BOOL v18 = shared_owners >= v12;
          if (shared_owners >= v12) {
            p_unint64_t shared_owners = (std::__shared_weak_count **)v14;
          }
          else {
            p_unint64_t shared_owners = (std::__shared_weak_count **)&v14->__shared_owners_;
          }
          if (v18) {
            uint64_t v16 = (std::__shared_weak_count **)v14;
          }
          uint64_t v14 = *p_shared_owners;
        }
        while (*p_shared_owners);
        uint64_t v15 = &v34;
        if (v16 == &v34 || (uint64_t v15 = v16, v16[4] != (std::__shared_weak_count *)v12))
        {
LABEL_21:
          unint64_t v31 = v12;
          std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)&v33, v15, &v31, (uint64_t *)&v31);
          std::vector<std::shared_ptr<turi::query_eval::node_info const>>::push_back[abi:ne180100](v4, &v32);
        }
        if (*((void *)&v32 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
        }
        v10 += 2;
      }
      while (v10 != v11);
      uint64_t v6 = a1[5];
      uint64_t v7 = (void *)a1[6];
    }
    ++v8;
  }
  while (v8 < ((uint64_t)v7 - v6) >> 4);
  if ((void *)v6 == v7)
  {
    char v20 = (void *)v6;
    goto LABEL_43;
  }
  char v20 = (void *)v6;
  while (*(_DWORD *)(a1[2] + 4 * *(int *)(*v20 + 16)))
  {
    v20 += 2;
    if (v20 == v7) {
      goto LABEL_33;
    }
  }
  if (v20 == v7)
  {
LABEL_33:
    char v20 = v7;
    goto LABEL_43;
  }
  uint64_t v21 = v20 + 2;
  if (v20 + 2 != v7)
  {
    do
    {
      uint64_t v22 = *v21;
      if (*(_DWORD *)(a1[2] + 4 * *(int *)(*v21 + 16)))
      {
        uint64_t v23 = v21[1];
        *uint64_t v21 = 0;
        v21[1] = 0;
        uint64_t v24 = (std::__shared_weak_count *)v20[1];
        *char v20 = v22;
        v20[1] = v23;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        v20 += 2;
      }
      v21 += 2;
    }
    while (v21 != v7);
    uint64_t v6 = *v4;
  }
LABEL_43:
  std::vector<std::shared_ptr<turi::query_eval::node_info const>>::resize(v4, ((uint64_t)v20 - v6) >> 4);
  long long v25 = (uint64_t *)a1[5];
  long long v26 = (uint64_t *)a1[6];
  long long v27 = v26 - 2;
  if (v25 != v26 && v27 > v25)
  {
    do
    {
      uint64_t v29 = *v25;
      *long long v25 = *v27;
      *long long v27 = v29;
      uint64_t v30 = v25[1];
      v25[1] = v27[1];
      v27[1] = v30;
      v25 += 2;
      v27 -= 2;
    }
    while (v25 < v27);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v33, v34);
}

void sub_224044BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14)
{
}

void **std::vector<std::shared_ptr<turi::query_eval::node_info const>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<turi::query_eval::node_info const>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v7);
  }
  return result;
}

void sub_224044CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<turi::query_eval::node_info const>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<turi::query_eval::node_info const>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224044DC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::query_eval::node_info const>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<turi::query_eval::node_info const>>::__append(a1, v5);
  }
}

void turi::query_eval::optimization_engine::release_node(uint64_t a1, uint64_t a2)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)(*(void *)a2 + 40));
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)(*(void *)a2 + 64));
  uint64_t v3 = *(void **)a2;
  unint64_t v4 = *(std::__shared_weak_count **)(*(void *)a2 + 8);
  void *v3 = 0;
  v3[1] = 0;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void turi::query_eval::optimization_engine::~optimization_engine(turi::query_eval::optimization_engine *this)
{
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 12);
  uint64_t v2 = (uint64_t *)((char *)this + 88);
  while (v3 != v4)
  {
    turi::query_eval::optimization_engine::release_node((uint64_t)this, v3);
    v3 += 16;
  }
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  *((void *)this + 8) = (char *)this + 72;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100](v2);
  uint64_t v7 = (void **)v2;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  uint64_t v7 = (void **)((char *)this + 40);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v5 = (void *)*((void *)this + 2);
  if (v5)
  {
    *((void *)this + 3) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void std::shared_ptr<turi::query_eval::optimization_transform_registry const>::reset[abi:ne180100]<turi::query_eval::optimization_transform_registry,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::query_eval::optimization_transform_registry const>::shared_ptr[abi:ne180100]<turi::query_eval::optimization_transform_registry,void>(&v2, a2);
}

void std::shared_ptr<turi::query_eval::optimization_transform_registry const>::shared_ptr[abi:ne180100]<turi::query_eval::optimization_transform_registry,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_224045050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<turi::query_eval::optimization_transform_registry>::reset[abi:ne180100]((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<turi::query_eval::optimization_transform_registry *,std::shared_ptr<turi::query_eval::optimization_transform_registry const>::__shared_ptr_default_delete<turi::query_eval::optimization_transform_registry const,turi::query_eval::optimization_transform_registry>,std::allocator<turi::query_eval::optimization_transform_registry>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<turi::query_eval::optimization_transform_registry>::operator()[abi:ne180100](a1 + 24, *(void ***)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<turi::query_eval::optimization_transform_registry *,std::shared_ptr<turi::query_eval::optimization_transform_registry const>::__shared_ptr_default_delete<turi::query_eval::optimization_transform_registry const,turi::query_eval::optimization_transform_registry>,std::allocator<turi::query_eval::optimization_transform_registry>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<turi::query_eval::optimization_transform_registry>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (a2)
  {
    uint64_t v4 = a2;
    std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x22A614FA0](a2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<turi::query_eval::optimization_transform_registry>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x22A614FA0](v2, 0x20C40960023A9);
  }
  return result;
}

void std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node> const*,std::shared_ptr<turi::query_eval::planner_node> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((void *)a1, v12);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      char v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_224045314(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22404531C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::~__split_buffer(&v15);
  }
}

void sub_224045478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>,std::reverse_iterator<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    std::vector<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer(&v15);
  }
}

void sub_224045808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>>,std::reverse_iterator<std::vector<std::shared_ptr<turi::query_eval::opt_transform>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>>,std::reverse_iterator<std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<turi::query_eval::opt_transform>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::opt_transform>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::opt_transform>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::opt_transform>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::opt_transform>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::opt_transform>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::opt_transform>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::opt_transform>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::opt_transform>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::opt_transform>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::opt_transform>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::opt_transform>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::opt_transform>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<turi::query_eval::node_info const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info const>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info const>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info const>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info const>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::shared_ptr<turi::query_eval::node_info>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<turi::query_eval::node_info>*>,std::__wrap_iter<std::shared_ptr<turi::query_eval::node_info>*>>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    long long v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        char v21 = &a3[2 * a5];
      }
      else
      {
        char v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::shared_ptr<turi::query_eval::node_info>*,std::shared_ptr<turi::query_eval::node_info>*,std::shared_ptr<turi::query_eval::node_info>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<turi::query_eval::node_info>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      uint64_t v23 = &v22[2 * a5];
      do
      {
        uint64_t *v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      v26[2] = v23;
      uint64_t v5 = (void *)std::vector<std::shared_ptr<turi::query_eval::node_info>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_224045D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<turi::query_eval::node_info>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    long long v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      void *v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<turi::query_eval::node_info>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::shared_ptr<turi::query_eval::node_info>*,std::shared_ptr<turi::query_eval::node_info>*,std::shared_ptr<turi::query_eval::node_info>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::shared_ptr<turi::query_eval::node_info>*,std::shared_ptr<turi::query_eval::node_info>*,std::shared_ptr<turi::query_eval::node_info>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::shared_ptr<turi::query_eval::node_info>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::shared_ptr<turi::query_eval::node_info>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    char v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *char v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::shared_ptr<turi::query_eval::node_info>*,std::shared_ptr<turi::query_eval::node_info>*,std::shared_ptr<turi::query_eval::node_info>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  long long v9 = a4;
  char v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::shared_ptr<turi::query_eval::node_info>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<turi::query_eval::node_info,std::allocator<turi::query_eval::node_info>,std::shared_ptr<turi::query_eval::planner_node> &,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x80uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::query_eval::node_info>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node> &,std::allocator<turi::query_eval::node_info>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22404610C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::query_eval::node_info>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node> &,std::allocator<turi::query_eval::node_info>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D769628;
  std::allocator<turi::query_eval::node_info>::construct[abi:ne180100]<turi::query_eval::node_info,std::shared_ptr<turi::query_eval::planner_node> &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22404617C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::node_info>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::node_info>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

void std::__shared_ptr_emplace<turi::query_eval::node_info>::__on_zero_shared(uint64_t a1)
{
  std::allocator<turi::query_eval::node_info>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<turi::query_eval::node_info>::construct[abi:ne180100]<turi::query_eval::node_info,std::shared_ptr<turi::query_eval::planner_node> &>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v4 = *a3;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::node_info::node_info(a2, (uint64_t)&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_224046284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::node_info::node_info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_DWORD **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *(_DWORD **)a1;
  }
  *(_DWORD *)(a1 + 16) = *v3;
  *(void *)(a1 + 24) = turi::query_eval::planner_node_type_to_attributes();
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_WORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = -1;
  return a1;
}

void sub_224046308(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<turi::query_eval::node_info>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 64);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a2 + 40);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::vector<std::shared_ptr<turi::query_eval::node_info>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::node_info>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::shared_ptr<turi::query_eval::node_info>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    long long v14 = v13;
    long long v15 = &v13[16 * v10];
    unint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<turi::query_eval::node_info>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_2240464DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<turi::query_eval::node_info const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::node_info const> const*,std::shared_ptr<turi::query_eval::node_info const> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100]((void *)a1, v12);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::shared_ptr<turi::query_eval::node_info const> const*,std::shared_ptr<turi::query_eval::node_info const> const*,std::shared_ptr<turi::query_eval::node_info const>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v20, a2, v15, v9);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::shared_ptr<turi::query_eval::node_info const> const*,std::shared_ptr<turi::query_eval::node_info const> const*,std::shared_ptr<turi::query_eval::node_info const>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *,std::shared_ptr<turi::fileio::file_ownership_handle> *>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_224046634(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_22404663C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::shared_ptr<turi::query_eval::node_info const> const*,std::shared_ptr<turi::query_eval::node_info const> const*,std::shared_ptr<turi::query_eval::node_info const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::shared_ptr<turi::query_eval::node_info const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::node_info const>>,std::shared_ptr<turi::query_eval::node_info const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<turi::query_eval::node_info const>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      char v13 = 0;
    }
    unint64_t v14 = v13;
    long long v15 = &v13[16 * v10];
    uint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<turi::query_eval::node_info const>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_2240467FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *turi::query_eval::get_stages_to_run@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 41);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
  {
    uint64_t result = operator new(0x28uLL);
    *a2 = result;
    uint64_t v5 = (char *)(result + 5);
    a2[2] = result + 5;
    result[4] = 6;
    *(_OWORD *)uint64_t result = xmmword_2246D00E0;
    *((_OWORD *)result + 1) = unk_2246D00F0;
  }
  else
  {
    uint64_t result = operator new(0x38uLL);
    *a2 = result;
    uint64_t v5 = (char *)(result + 7);
    a2[2] = result + 7;
    result[6] = 6;
    *(_OWORD *)uint64_t result = xmmword_2246D0108;
    *((_OWORD *)result + 1) = unk_2246D0118;
    *((_OWORD *)result + 2) = xmmword_2246D0128;
  }
  a2[1] = v5;
  return result;
}

void turi::query_eval::populate_transforms(turi::query_eval *this, turi::query_eval::optimization_transform_registry *a2)
{
  turi::query_eval::optimization_transform_registry::set_num_stages(this, 7uLL);
  int v3 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v3;
  uint64_t *v3 = 0;
  uint64_t v70 = v3 + 1;
  long long v71 = v3 + 1;
  uint64_t v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_26D7696F0;
  double v4[3] = &unk_26D769740;
  *(void *)&long long v68 = v4 + 3;
  *((void *)&v68 + 1) = v4;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v68);
  if (*((void *)&v68 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v68 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v5 = (char *)operator new(0x20uLL);
  uint64_t v70 = (uint64_t *)(v5 + 32);
  long long v71 = (uint64_t *)(v5 + 32);
  *(_OWORD *)uint64_t v5 = xmmword_2246D0140;
  *((_OWORD *)v5 + 1) = unk_2246D0150;
  uint64_t v69 = (uint64_t *)v5;
  uint64_t v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_26D7697A0;
  void v6[3] = &unk_26D7697F0;
  *(void *)&long long v67 = v6 + 3;
  *((void *)&v67 + 1) = v6;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v67);
  if (*((void *)&v67 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v67 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v7 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v7 + 3;
  long long v71 = v7 + 3;
  v7[2] = 3;
  *(_OWORD *)uint64_t v7 = xmmword_2246D0160;
  uint64_t v69 = v7;
  uint64_t v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  *uint64_t v8 = &unk_26D769858;
  void v8[3] = &unk_26D7698A8;
  *(void *)&long long v66 = v8 + 3;
  *((void *)&v66 + 1) = v8;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v66);
  if (*((void *)&v66 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  unint64_t v9 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v9 + 3;
  long long v71 = v9 + 3;
  v9[2] = 3;
  *(_OWORD *)unint64_t v9 = xmmword_2246D0160;
  uint64_t v69 = v9;
  uint64_t v10 = operator new(0x20uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  void *v10 = &unk_26D7698F8;
  v10[3] = &unk_26D769948;
  *(void *)&long long v65 = v10 + 3;
  *((void *)&v65 + 1) = v10;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v65);
  if (*((void *)&v65 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v65 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v11 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v11 + 3;
  long long v71 = v11 + 3;
  v11[2] = 3;
  *(_OWORD *)uint64_t v11 = xmmword_2246D0160;
  uint64_t v69 = v11;
  unint64_t v12 = operator new(0x20uLL);
  v12[1] = 0;
  uint64_t v12[2] = 0;
  *unint64_t v12 = &unk_26D769A40;
  void v12[3] = &unk_26D769A90;
  *(void *)&long long v64 = v12 + 3;
  *((void *)&v64 + 1) = v12;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v64);
  if (*((void *)&v64 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  char v13 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v13 + 3;
  long long v71 = v13 + 3;
  v13[2] = 3;
  *(_OWORD *)char v13 = xmmword_2246D0160;
  uint64_t v69 = v13;
  unint64_t v14 = operator new(0x20uLL);
  v14[1] = 0;
  v14[2] = 0;
  void *v14 = &unk_26D769AE0;
  v14[3] = &unk_26D769B30;
  *(void *)&long long v63 = v14 + 3;
  *((void *)&v63 + 1) = v14;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v63);
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  long long v15 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v15 + 3;
  long long v71 = v15 + 3;
  v15[2] = 3;
  *(_OWORD *)long long v15 = xmmword_2246D0160;
  uint64_t v69 = v15;
  uint64_t v16 = operator new(0x20uLL);
  v16[1] = 0;
  v16[2] = 0;
  *uint64_t v16 = &unk_26D769B80;
  v16[3] = &unk_26D769BD0;
  *(void *)&long long v62 = v16 + 3;
  *((void *)&v62 + 1) = v16;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v62);
  if (*((void *)&v62 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v62 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v17 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v17 + 3;
  long long v71 = v17 + 3;
  v17[2] = 3;
  *(_OWORD *)uint64_t v17 = xmmword_2246D0160;
  uint64_t v69 = v17;
  uint64_t v18 = operator new(0x20uLL);
  v18[1] = 0;
  v18[2] = 0;
  *uint64_t v18 = &unk_26D769C58;
  v18[3] = &unk_26D769CA8;
  *(void *)&long long v61 = v18 + 3;
  *((void *)&v61 + 1) = v18;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v61);
  if (*((void *)&v61 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v61 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v19 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v19 + 3;
  long long v71 = v19 + 3;
  void v19[2] = 3;
  *(_OWORD *)uint64_t v19 = xmmword_2246D0160;
  uint64_t v69 = v19;
  char v20 = operator new(0x20uLL);
  v20[1] = 0;
  v20[2] = 0;
  *char v20 = &unk_26D769CF8;
  v20[3] = &unk_26D769D48;
  *(void *)&long long v60 = v20 + 3;
  *((void *)&v60 + 1) = v20;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v60);
  if (*((void *)&v60 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  char v21 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v21 + 3;
  long long v71 = v21 + 3;
  v21[2] = 3;
  *(_OWORD *)char v21 = xmmword_2246D0160;
  uint64_t v69 = v21;
  uint64_t v22 = operator new(0x20uLL);
  v22[1] = 0;
  v22[2] = 0;
  void *v22 = &unk_26D769D98;
  v22[3] = &unk_26D769DE8;
  *(void *)&long long v59 = v22 + 3;
  *((void *)&v59 + 1) = v22;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v59);
  if (*((void *)&v59 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v23 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v23 + 3;
  long long v71 = v23 + 3;
  v23[2] = 3;
  *(_OWORD *)uint64_t v23 = xmmword_2246D0160;
  uint64_t v69 = v23;
  uint64_t v24 = operator new(0x20uLL);
  v24[1] = 0;
  v24[2] = 0;
  *uint64_t v24 = &unk_26D769E38;
  v24[3] = &unk_26D769E88;
  *(void *)&long long v58 = v24 + 3;
  *((void *)&v58 + 1) = v24;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v58);
  if (*((void *)&v58 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  long long v25 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v25 + 3;
  long long v71 = v25 + 3;
  void v25[2] = 3;
  *(_OWORD *)long long v25 = xmmword_2246D0160;
  uint64_t v69 = v25;
  long long v26 = operator new(0x20uLL);
  v26[1] = 0;
  v26[2] = 0;
  void *v26 = &unk_26D769ED8;
  v26[3] = &unk_26D769F28;
  *(void *)&long long v57 = v26 + 3;
  *((void *)&v57 + 1) = v26;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v57);
  if (*((void *)&v57 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  long long v27 = (uint64_t *)operator new(0x18uLL);
  uint64_t v70 = v27 + 3;
  long long v71 = v27 + 3;
  v27[2] = 3;
  *(_OWORD *)long long v27 = xmmword_2246D0160;
  uint64_t v69 = v27;
  uint64_t v28 = operator new(0x20uLL);
  v28[1] = 0;
  v28[2] = 0;
  *uint64_t v28 = &unk_26D769F78;
  v28[3] = &unk_26D769FC8;
  *(void *)&long long v56 = v28 + 3;
  *((void *)&v56 + 1) = v28;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v56);
  if (*((void *)&v56 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v56 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v29 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v29;
  *uint64_t v29 = 2;
  uint64_t v70 = v29 + 1;
  long long v71 = v29 + 1;
  uint64_t v30 = operator new(0x20uLL);
  v30[1] = 0;
  v30[2] = 0;
  *uint64_t v30 = &unk_26D76A018;
  v30[3] = &unk_26D76A068;
  *(void *)&long long v55 = v30 + 3;
  *((void *)&v55 + 1) = v30;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v55);
  if (*((void *)&v55 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  unint64_t v31 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v31;
  *unint64_t v31 = 2;
  uint64_t v70 = v31 + 1;
  long long v71 = v31 + 1;
  long long v32 = operator new(0x20uLL);
  v32[1] = 0;
  v32[2] = 0;
  *long long v32 = &unk_26D76A0B8;
  v32[3] = &unk_26D76A108;
  *(void *)&long long v54 = v32 + 3;
  *((void *)&v54 + 1) = v32;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v54);
  if (*((void *)&v54 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v33 = (uint64_t *)operator new(0x10uLL);
  uint64_t v69 = v33;
  *(_OWORD *)uint64_t v33 = xmmword_2246D00D0;
  uint64_t v70 = v33 + 2;
  long long v71 = v33 + 2;
  uint64_t v34 = operator new(0x20uLL);
  v34[1] = 0;
  v34[2] = 0;
  *uint64_t v34 = &unk_26D76A170;
  v34[3] = &unk_26D76A1C0;
  *(void *)&long long v53 = v34 + 3;
  *((void *)&v53 + 1) = v34;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v53);
  if (*((void *)&v53 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  long long v35 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v35;
  *long long v35 = 3;
  uint64_t v70 = v35 + 1;
  long long v71 = v35 + 1;
  long long v36 = operator new(0x20uLL);
  v36[1] = 0;
  v36[2] = 0;
  void *v36 = &unk_26D76A210;
  v36[3] = &unk_26D76A260;
  *(void *)&long long v52 = v36 + 3;
  *((void *)&v52 + 1) = v36;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v52);
  if (*((void *)&v52 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v52 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  long long v37 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v37;
  uint64_t *v37 = 4;
  uint64_t v70 = v37 + 1;
  long long v71 = v37 + 1;
  long long v38 = operator new(0x20uLL);
  v38[1] = 0;
  v38[2] = 0;
  void *v38 = &unk_26D76A2B0;
  v38[3] = &unk_26D76A300;
  *(void *)&long long v51 = v38 + 3;
  *((void *)&v51 + 1) = v38;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v51);
  if (*((void *)&v51 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v39 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v39;
  *uint64_t v39 = 5;
  uint64_t v70 = v39 + 1;
  long long v71 = v39 + 1;
  double v40 = operator new(0x20uLL);
  v40[1] = 0;
  v40[2] = 0;
  *double v40 = &unk_26D76A350;
  v40[3] = &unk_26D76A3A0;
  *(void *)&long long v50 = v40 + 3;
  *((void *)&v50 + 1) = v40;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v50);
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  long long v41 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v41;
  uint64_t *v41 = 5;
  uint64_t v70 = v41 + 1;
  long long v71 = v41 + 1;
  uint64_t v42 = operator new(0x20uLL);
  v42[1] = 0;
  v42[2] = 0;
  *uint64_t v42 = &unk_26D76A3F0;
  v42[3] = &unk_26D76A440;
  *(void *)&long long v49 = v42 + 3;
  *((void *)&v49 + 1) = v42;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v49);
  if (*((void *)&v49 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  int v43 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v43;
  *int v43 = 5;
  uint64_t v70 = v43 + 1;
  long long v71 = v43 + 1;
  long long v44 = operator new(0x20uLL);
  v44[1] = 0;
  v44[2] = 0;
  void *v44 = &unk_26D76A490;
  v44[3] = &unk_26D76A4E0;
  *(void *)&long long v48 = v44 + 3;
  *((void *)&v48 + 1) = v44;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v48);
  if (*((void *)&v48 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v48 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  uint64_t v45 = (uint64_t *)operator new(8uLL);
  uint64_t v69 = v45;
  uint64_t *v45 = 6;
  uint64_t v70 = v45 + 1;
  long long v71 = v45 + 1;
  double v46 = operator new(0x20uLL);
  v46[1] = 0;
  v46[2] = 0;
  *double v46 = &unk_26D76A530;
  v46[3] = &unk_26D76A580;
  *(void *)&long long v47 = v46 + 3;
  *((void *)&v47 + 1) = v46;
  turi::query_eval::optimization_transform_registry::register_optimization(this, &v69, &v47);
  if (*((void *)&v47 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
}

void sub_2240475D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  long long v37 = *(void **)(v35 - 40);
  if (v37)
  {
    *(void *)(v35 - 32) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::deserialize()
{
}

void sub_22404785C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

void *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::holder(void *a1, uint64_t *a2)
{
  *a1 = &unk_26D769688;
  a1[2] = 0;
  uint64_t v4 = a1 + 2;
  a1[1] = a1 + 2;
  uint64_t v5 = a1 + 1;
  a1[3] = 0;
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)(a1 + 1), 0);
  void *v5 = v4;
  a1[3] = 0;
  *uint64_t v4 = 0;
  turi::deserialize_iterator<turi::iarchive_soft_fail,std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::insert_iterator<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>(a2, (uint64_t)v5, (uint64_t)v4);
  return a1;
}

void sub_224047908(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~holder(uint64_t a1)
{
  *(void *)a1 = &unk_26D769688;
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~holder(uint64_t a1)
{
  *(void *)a1 = &unk_26D769688;
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  JUMPOUT(0x22A614FA0);
}

void *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::type()
{
}

void turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::clone()
{
}

void sub_224047A40(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

uint64_t turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::deserializer_id()
{
  return turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry;
}

uint64_t **turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::deep_op_equal(uint64_t **result, uint64_t a2)
{
  if (result != (uint64_t **)a2) {
    return std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>(result + 1, *(void **)(a2 + 8), (void *)(a2 + 16));
  }
  return result;
}

uint64_t turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::save(void *a1, turi::oarchive **a2)
{
  uint64_t v4 = *a2;
  if (*(void *)*a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)v4 + 5);
    if (*((void *)v4 + 4) + 8 > v5)
    {
      size_t v10 = 2 * v5 + 16;
      *((void *)v4 + 5) = v10;
      uint64_t v11 = (char **)*((void *)v4 + 2);
      if (v11)
      {
        uint64_t v6 = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*((std::vector<char> **)v4 + 2), v14);
          uint64_t v6 = (char *)**((void **)v4 + 2);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        uint64_t v6 = (char *)malloc_type_realloc(*((void **)v4 + 3), v10, 0xF6EA6B1uLL);
      }
      *((void *)v4 + 3) = v6;
    }
    else
    {
      uint64_t v6 = (char *)*((void *)v4 + 3);
    }
    *(void *)&v6[*((void *)v4 + 4)] = turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::registry;
    *((void *)v4 + 4) += 8;
  }
  uint64_t v7 = (void *)a1[1];
  uint64_t v8 = a1[3];
  return turi::serialize_iterator<turi::oarchive_soft_fail,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>>(a2, v7, a1 + 2, v8);
}

void *turi::any::holder<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::print(uint64_t a1, void *a2)
{
  return a2;
}

void turi::deserialize_iterator<turi::iarchive_soft_fail,std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::insert_iterator<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v15[0] = a2;
  v15[1] = a3;
  unint64_t v14 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 24);
    unint64_t v7 = *(void *)(v5 + v6);
    unint64_t v14 = v7;
    *(void *)(v4 + 24) = v6 + 8;
    if (v7)
    {
      unint64_t v8 = 0;
      do
      {
        unint64_t v11 = 0;
        unint64_t v12 = 0;
        BOOL v13 = 0;
        turi::archive_detail::deserialize_impl<turi::iarchive_soft_fail,std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,false,void>::exec(a1, &v11);
        v9[0] = v11;
        v9[1] = v12;
        size_t v10 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::insert_iterator<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::operator=[abi:ne180100]((uint64_t)v15, v9);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        ++v8;
      }
      while (v8 < v14);
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_224047CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

uint64_t std::insert_iterator<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::operator=[abi:ne180100](uint64_t a1, unint64_t *a2)
{
  int v3 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (char *)*((void *)v3 + 1);
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(char **)v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (char *)*((void *)v3 + 2);
      BOOL v6 = *(void *)v5 == (void)v3;
      int v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void turi::archive_detail::deserialize_impl<turi::iarchive_soft_fail,std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,false,void>::exec(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 16);
  if (v5)
  {
    *a2 = *(void *)(v5 + *(void *)(v4 + 24));
    *(void *)(v4 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  turi::archive_detail::deserialize_impl<turi::iarchive_soft_fail,std::shared_ptr<turi::sarray<turi::flexible_type>>,false,void>::exec(a1, a2 + 1);
}

char *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t a4)
{
  BOOL v6 = (void **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  unint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = (char *)operator new(0x38uLL);
    *((void *)v7 + 4) = *(void *)a4;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 8);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_224047EEC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>> const&>(v5, v6, v4 + 4, v4 + 4);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>> const&>(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  BOOL v6 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v13, &v12, a3);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    unint64_t v7 = (uint64_t *)operator new(0x38uLL);
    uint64_t v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    uint64_t v10 = a4[2];
    v7[6] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v13, v8, v7);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    unint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    unint64_t v14 = result;
    long long v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      long long v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          std::pair<unsigned long &,std::shared_ptr<turi::sarray<turi::flexible_type>> &>::operator=[abi:ne180100]<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>,(void *)0>((uint64_t)v17, v9 + 4);
          std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__node_insert_multi(v5, v16);
          uint64_t v16 = v15;
          if (v15) {
            long long v15 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          unint64_t v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v11);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_multi<std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>> const&>(v5, a2 + 4);
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_224048190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  int v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        int v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t std::pair<unsigned long &,std::shared_ptr<turi::sarray<turi::flexible_type>> &>::operator=[abi:ne180100]<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>,(void *)0>(uint64_t a1, void *a2)
{
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = a2[1];
  **(void **)a1 = *a2;
  uint64_t v5 = a2[2];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v6 = (std::__shared_weak_count *)v3[1];
  void *v3 = v4;
  v3[1] = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_multi<std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>> const&>(uint64_t **a1, unint64_t *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (uint64_t *)operator new(0x38uLL);
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v5[4] = *a2;
  v5[5] = v7;
  uint64_t v8 = a2[2];
  v5[6] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  while (1)
  {
    uint64_t v9 = *v4;
    uint64_t v10 = v4;
    if (!*v4) {
      break;
    }
    while (1)
    {
      uint64_t v4 = (uint64_t **)v9;
      if (v6 < v9[4]) {
        break;
      }
      uint64_t v9 = (uint64_t *)v9[1];
      if (!v9)
      {
        uint64_t v10 = v4 + 1;
        goto LABEL_7;
      }
    }
  }
LABEL_7:
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v4, v10, v5);
  return v5;
}

uint64_t turi::serialize_iterator<turi::oarchive_soft_fail,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>>(turi::oarchive **a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = *a1;
  if (*(void *)*a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v10 = *((void *)v7 + 5);
    if (*((void *)v7 + 4) + 8 > v10)
    {
      size_t v15 = 2 * v10 + 16;
      *((void *)v7 + 5) = v15;
      uint64_t v16 = (uint64_t *)*((void *)v7 + 2);
      if (v16)
      {
        uint64_t result = *v16;
        size_t v17 = v16[1] - *v16;
        BOOL v18 = v15 >= v17;
        std::vector<char>::size_type v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*((std::vector<char> **)v7 + 2), v19);
          uint64_t result = **((void **)v7 + 2);
        }
        else if (!v18)
        {
          v16[1] = result + v15;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*((void **)v7 + 3), v15, 0xF6EA6B1uLL);
      }
      *((void *)v7 + 3) = result;
    }
    else
    {
      uint64_t result = *((void *)v7 + 3);
    }
    *(void *)(result + *((void *)v7 + 4)) = a4;
    *((void *)v7 + 4) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive_soft_fail,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>>,false,void>::exec(a1, (uint64_t)(a2 + 4));
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v14 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v14);
      }
      ++v11;
      a2 = v13;
    }
    while (v13 != a3);
  }
  if (v11 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
  return result;
}

unsigned char *turi::archive_detail::serialize_impl<turi::oarchive_soft_fail,std::pair<unsigned long const,std::shared_ptr<turi::sarray<turi::flexible_type>>>,false,void>::exec(turi::oarchive **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*(void *)*a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)v4 + 5);
    if (*((void *)v4 + 4) + 8 > v5)
    {
      size_t v8 = 2 * v5 + 16;
      *((void *)v4 + 5) = v8;
      uint64_t v9 = (char **)*((void *)v4 + 2);
      if (v9)
      {
        unint64_t v6 = *v9;
        size_t v10 = v9[1] - *v9;
        BOOL v11 = v8 >= v10;
        std::vector<char>::size_type v12 = v8 - v10;
        if (v12 != 0 && v11)
        {
          std::vector<char>::__append(*((std::vector<char> **)v4 + 2), v12);
          unint64_t v6 = (char *)**((void **)v4 + 2);
        }
        else if (!v11)
        {
          v9[1] = &v6[v8];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*((void **)v4 + 3), v8, 0xF6EA6B1uLL);
      }
      *((void *)v4 + 3) = v6;
    }
    else
    {
      unint64_t v6 = (char *)*((void *)v4 + 3);
    }
    *(void *)&v6[*((void *)v4 + 4)] = *(void *)a2;
    *((void *)v4 + 4) += 8;
  }
  return turi::archive_detail::serialize_impl<turi::oarchive_soft_fail,std::shared_ptr<turi::sarray<turi::flexible_type>>,false,void>::exec(a1, (turi::v2_block_impl::block_manager **)(a2 + 8));
}

void *turi::operator<<<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>(void *a1, void *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  unint64_t v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      uint64_t v7 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"-->", 3);
      std::ostream::operator<<();
      size_t v8 = (void *)v5[1];
      uint64_t v9 = v5;
      if (v8)
      {
        do
        {
          unint64_t v5 = v8;
          size_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v5 = (void *)v9[2];
          BOOL v10 = *v5 == (void)v9;
          uint64_t v9 = v5;
        }
        while (!v10);
      }
      if (v5 == v4) {
        break;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_expand_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7696F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_expand_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7696F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_expand_generalized_union_project>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_expand_generalized_union_project::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "gen_union_proj(...) -> project(union(...), ...)");
}

BOOL turi::query_eval::opt_expand_generalized_union_project::transform_applies(uint64_t a1, int a2)
{
  return a2 == 12;
}

uint64_t turi::query_eval::opt_expand_generalized_union_project::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  std::vector<unsigned long>::vector(&v47, ((*a3)[6] - (*a3)[5]) >> 4);
  uint64_t v4 = *a3;
  uint64_t v5 = (*a3)[5];
  if ((*a3)[6] != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      *((void *)v47 + v7) = v8;
      v8 += turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(v5 + v6));
      ++v7;
      uint64_t v4 = *a3;
      uint64_t v5 = (*a3)[5];
      v6 += 16;
    }
    while (v7 < ((*a3)[6] - v5) >> 4);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
  uint64_t v9 = *(void *)turi::query_eval::node_info::p(v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::vector<unsigned long>::vector(&v46, (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 5);
  uint64_t v10 = *(void *)(v9 + 8);
  if (*(void *)(v9 + 16) == v10)
  {
LABEL_64:
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(**a3 + 56, &__p);
    long long v45 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)&v45, (uint64_t **)&v46);
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  while (2)
  {
    uint64_t v13 = 0;
    switch(*(unsigned char *)(v10 + v11 + 12))
    {
      case 0:
        uint64_t v13 = *(void *)(v10 + v11);
        goto LABEL_32;
      case 1:
        uint64_t v13 = (uint64_t)*(double *)(v10 + v11);
        goto LABEL_32;
      case 2:
        uint64_t v15 = *(void *)(v10 + v11);
        __idx[0] = 0;
        uint64_t v16 = (char *)(v15 + 8);
        if (*(char *)(v15 + 31) < 0) {
          uint64_t v16 = *(char **)(v15 + 8);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v16);
        uint64_t v13 = std::stoll(&__p, __idx, 10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (*(char *)(v15 + 31) < 0) {
          uint64_t v17 = *(void *)(v15 + 16);
        }
        else {
          uint64_t v17 = *(unsigned __int8 *)(v15 + 31);
        }
        if (__idx[0] != v17)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          int v43 = std::string::append(&v57, " cannot be interpreted as an integer");
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_32;
      case 3:
        uint64_t v14 = *(void *)(v10 + v11);
        memset(&__p, 0, sizeof(__p));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v14 + 8), *(void *)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_31;
      case 4:
        uint64_t v18 = *(void *)(v10 + v11);
        memset(&__p, 0, sizeof(__p));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        goto LABEL_31;
      case 5:
        uint64_t v19 = *(void *)(v10 + v11);
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
        goto LABEL_31;
      case 6:
        uint64_t v13 = (uint64_t)(*(void *)(v10 + v11) << 8) >> 8;
        goto LABEL_32;
      case 7:
        goto LABEL_32;
      case 8:
        uint64_t v20 = *(void *)(v10 + v11);
        char v21 = *(atomic_uint **)(v20 + 16);
        uint64_t v48 = *(void *)(v20 + 8);
        long long v49 = v21;
        if (v21) {
          atomic_fetch_add_explicit(v21 + 2, 1u, memory_order_relaxed);
        }
        long long v22 = *(_OWORD *)(v20 + 24);
        long long v23 = *(_OWORD *)(v20 + 56);
        long long v51 = *(_OWORD *)(v20 + 40);
        long long v52 = v23;
        long long v50 = v22;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count(&v49);
        goto LABEL_31;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)(v10 + v11) + 8);
        turi::flexible_type_fail(0);
        if (v55)
        {
          long long v56 = v55;
          operator delete(v55);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v54 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
LABEL_31:
        uint64_t v13 = 0;
LABEL_32:
        uint64_t v24 = v10 + v11;
        int v25 = *(unsigned __int8 *)(v10 + v11 + 28);
        uint64_t v26 = 0;
        uint64_t v27 = *((void *)v47 + v13);
        switch(v25)
        {
          case 0:
            uint64_t v26 = *(void *)(v24 + 16);
            goto LABEL_56;
          case 1:
            uint64_t v26 = (uint64_t)*(double *)(v24 + 16);
            goto LABEL_56;
          case 2:
            uint64_t v29 = *(void *)(v24 + 16);
            __idx[0] = 0;
            uint64_t v30 = (char *)(v29 + 8);
            if (*(char *)(v29 + 31) < 0) {
              uint64_t v30 = *(char **)(v29 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v30);
            uint64_t v26 = std::stoll(&__p, __idx, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (*(char *)(v29 + 31) < 0) {
              uint64_t v31 = *(void *)(v29 + 16);
            }
            else {
              uint64_t v31 = *(unsigned __int8 *)(v29 + 31);
            }
            if (__idx[0] != v31)
            {
              long long v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v39 = std::string::append(&v57, " cannot be interpreted as an integer");
              long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
              v39->__r_.__value_.__l.__size_ = 0;
              v39->__r_.__value_.__r.__words[2] = 0;
              v39->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v38, &__p);
              __cxa_throw(v38, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_56;
          case 3:
            uint64_t v28 = *(void *)(v24 + 16);
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v28 + 8), *(void *)(v28 + 16), (uint64_t)(*(void *)(v28 + 16) - *(void *)(v28 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_55;
          case 4:
            uint64_t v32 = *(void *)(v24 + 16);
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(void *)(v32 + 16) - *(void *)(v32 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            goto LABEL_55;
          case 5:
            uint64_t v33 = *(void *)(v24 + 16);
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(void *)(v33 + 16) - *(void *)(v33 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
            goto LABEL_55;
          case 6:
            uint64_t v26 = (uint64_t)(*(void *)(v24 + 16) << 8) >> 8;
            goto LABEL_56;
          case 7:
            goto LABEL_56;
          case 8:
            uint64_t v34 = *(void *)(v24 + 16);
            uint64_t v35 = *(atomic_uint **)(v34 + 16);
            uint64_t v48 = *(void *)(v34 + 8);
            long long v49 = v35;
            if (v35) {
              atomic_fetch_add_explicit(v35 + 2, 1u, memory_order_relaxed);
            }
            long long v36 = *(_OWORD *)(v34 + 24);
            long long v37 = *(_OWORD *)(v34 + 56);
            long long v51 = *(_OWORD *)(v34 + 40);
            long long v52 = v37;
            long long v50 = v36;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v49);
            goto LABEL_55;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)(v24 + 16) + 8);
            turi::flexible_type_fail(0);
            if (v55)
            {
              long long v56 = v55;
              operator delete(v55);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v54 = __p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
LABEL_55:
            uint64_t v26 = 0;
LABEL_56:
            *((void *)v46 + v12++) = v26 + v27;
            uint64_t v10 = *(void *)(v9 + 8);
            v11 += 32;
            if (v12 >= (*(void *)(v9 + 16) - v10) >> 5) {
              goto LABEL_64;
            }
            continue;
          default:
            goto LABEL_67;
        }
      default:
LABEL_67:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
  }
}

void sub_224048E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v38 - 97) < 0)
  {
    operator delete(*(void **)(v38 - 120));
    if ((v37 & 1) == 0)
    {
LABEL_8:
      if (a17) {
        operator delete(a17);
      }
      if (a20) {
        operator delete(a20);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t turi::query_eval::node_info::num_columns(turi::query_eval::node_info *this)
{
  uint64_t result = *((void *)this + 12);
  if (result == -1)
  {
    int v3 = (std::__shared_weak_count *)*((void *)this + 1);
    uint64_t v4 = *(void *)this;
    uint64_t v5 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t result = turi::query_eval::infer_planner_node_num_output_columns(&v4);
    *((void *)this + 12) = result;
    if (v5)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      return *((void *)this + 12);
    }
  }
  return result;
}

void sub_2240490E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::node_info::p(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*a1 + 8, (const void **)a2);
  uint64_t v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v21, "Parameter ");
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v22, " not valid in node of type ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  turi::query_eval::planner_node_type_to_name(__p, *((unsigned int *)a1 + 4));
  if ((v20 & 0x80u) == 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v14 = v20;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  uint64_t v15 = std::string::append(&v23, (const std::string::value_type *)v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v25 = v15->__r_.__value_.__r.__words[2];
  long long v24 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = (const char *)&v24;
  if (v25 < 0) {
    uint64_t v17 = (const char *)v24;
  }
  assert_msg(v5 + 16 != v4, "%s", v17);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return v4 + 56;
}

void sub_224049280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  uint64_t v5 = v2 >> 4;
  if (!v2)
  {
    int v3 = (const void **)&v5;
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&)::{lambda(void)#1}::operator()();
  }
  v6[0] = 0;
  v6[1] = 0;
  v4[1] = 0;
  uint64_t v5 = (uint64_t)v6;
  int v3 = (const void **)v4;
  v4[0] = 0;
  int v7 = 11;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v7, (uint64_t)&v5, &v3, (void **)a1, a2);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v3, v4[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_22404939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14)
{
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", 111);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"nodes.size()", 12);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  int v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  long long v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/union.hpp", "operator()", 107, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22404954C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_identity_project>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7697A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_identity_project>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7697A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_identity_project>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_eliminate_identity_project::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(a, {0,1,...,num_columns(a)}) -> a");
}

BOOL turi::query_eval::opt_project_transform::transform_applies(uint64_t a1, int a2)
{
  return a2 == 4;
}

uint64_t turi::query_eval::opt_eliminate_identity_project::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  uint64_t v6 = *(void *)turi::query_eval::node_info::p(v5, (uint64_t)__p);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v7 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*a3)[5]);
  std::string::size_type v8 = *(char **)(v6 + 8);
  uint64_t v9 = *(char **)(v6 + 16);
  if (v7 != (v9 - v8) >> 4) {
    return 0;
  }
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    if (v7 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v7;
    }
    do
    {
      uint64_t v12 = *(void *)v8;
      v8 += 16;
      if (v10 != v12) {
        return 0;
      }
    }
    while (v11 != ++v10);
  }
  uint64_t v13 = *a3;
  std::string::size_type v14 = (std::__shared_weak_count *)a3[1];
  std::string v21 = *a3;
  std::string v22 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = *a3;
  }
  char v15 = *(uint64_t **)v13[5];
  uint64_t v17 = *v15;
  long long v16 = (std::__shared_weak_count *)v15[1];
  uint64_t v19 = v17;
  unsigned __int8 v20 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v21, &v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return 1;
}

void sub_22404982C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_split_contractive_expansive_projection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_split_contractive_expansive_projection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_split_contractive_expansive_projection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_split_contractive_expansive_projection::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(a, ...) ?->? expanding_project(contracting_project(a, ...), ...)");
}

uint64_t turi::query_eval::opt_split_contractive_expansive_projection::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v62, "indices");
  uint64_t v5 = *(void *)turi::query_eval::node_info::p(v4, (uint64_t)&v62);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>>((uint64_t)v54, *(unsigned char **)(v5 + 8), *(unsigned char **)(v5 + 16));
  unint64_t v6 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*a3)[5]);
  if (v56 < v6 && v6 <= (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4)
  {
    std::string __p = 0;
    long long v52 = 0;
    long long v53 = 0;
    std::vector<unsigned long>::reserve(&__p, v56);
    std::vector<unsigned long>::vector(&v50, (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4);
    v49[0] = 0;
    v49[1] = 0;
    uint64_t v48 = v49;
    uint64_t v7 = *(void *)(v5 + 8);
    if (*(void *)(v5 + 16) != v7)
    {
      unint64_t v8 = 0;
      while (2)
      {
        uint64_t v9 = v7 + 16 * v8;
        unint64_t v10 = 0;
        switch(*(unsigned char *)(v9 + 12))
        {
          case 0:
            unint64_t v10 = *(void *)v9;
            goto LABEL_32;
          case 1:
            unint64_t v10 = (uint64_t)*(double *)v9;
            goto LABEL_32;
          case 2:
            unint64_t v12 = *(void *)v9;
            uint64_t v13 = (char **)(*(void *)v9 + 8);
            __idx[0] = 0;
            std::string::size_type v14 = (char *)v13;
            if (*(char *)(v12 + 31) < 0) {
              std::string::size_type v14 = *v13;
            }
            char v15 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&v62, v14);
            unint64_t v10 = std::stoll(v15, __idx, 10);
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
            if (*(char *)(v12 + 31) < 0) {
              uint64_t v16 = *(void *)(v12 + 16);
            }
            else {
              uint64_t v16 = *(unsigned __int8 *)(v12 + 31);
            }
            if (__idx[0] != v16)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              long long v41 = std::string::append(&v66, " cannot be interpreted as an integer");
              long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
              v62.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v42;
              v41->__r_.__value_.__l.__size_ = 0;
              v41->__r_.__value_.__r.__words[2] = 0;
              v41->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, &v62);
              __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_32;
          case 3:
            unint64_t v11 = *(void *)v9;
            memset(&v62, 0, sizeof(v62));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v62, *(const void **)(v11 + 8), *(void *)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (v62.__r_.__value_.__r.__words[0])
            {
              v62.__r_.__value_.__l.__size_ = v62.__r_.__value_.__r.__words[0];
              operator delete(v62.__r_.__value_.__l.__data_);
            }
            goto LABEL_31;
          case 4:
            unint64_t v17 = *(void *)v9;
            memset(&v62, 0, sizeof(v62));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v62, *(uint64_t **)(v17 + 8), *(uint64_t **)(v17 + 16), (uint64_t)(*(void *)(v17 + 16) - *(void *)(v17 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
            goto LABEL_31;
          case 5:
            unint64_t v18 = *(void *)v9;
            memset(&v62, 0, sizeof(v62));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&v62, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v66.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
            goto LABEL_31;
          case 6:
            unint64_t v10 = (uint64_t)(*(void *)v9 << 8) >> 8;
            goto LABEL_32;
          case 7:
            goto LABEL_32;
          case 8:
            unint64_t v19 = *(void *)v9;
            unsigned __int8 v20 = *(atomic_uint **)(v19 + 16);
            uint64_t v57 = *(void *)(v19 + 8);
            long long v58 = v20;
            if (v20) {
              atomic_fetch_add_explicit(v20 + 2, 1u, memory_order_relaxed);
            }
            long long v21 = *(_OWORD *)(v19 + 24);
            long long v22 = *(_OWORD *)(v19 + 56);
            long long v60 = *(_OWORD *)(v19 + 40);
            long long v61 = v22;
            long long v59 = v21;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v58);
            goto LABEL_31;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&v62, *(void *)v9 + 8);
            turi::flexible_type_fail(0);
            if (v64)
            {
              long long v65 = v64;
              operator delete(v64);
            }
            if (v62.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v63 = v62.__r_.__value_.__r.__words[2];
              operator delete((void *)v62.__r_.__value_.__r.__words[2]);
            }
            if (v62.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v62.__r_.__value_.__l.__size_);
            }
LABEL_31:
            unint64_t v10 = 0;
LABEL_32:
            std::string v23 = (void *)v49[0];
            char v24 = v49;
            if (!v49[0]) {
              goto LABEL_45;
            }
            int64_t v25 = v49;
            do
            {
              unint64_t v26 = v23[4];
              BOOL v27 = v26 >= v10;
              if (v26 >= v10) {
                uint64_t v28 = v23;
              }
              else {
                uint64_t v28 = v23 + 1;
              }
              if (v27) {
                int64_t v25 = v23;
              }
              std::string v23 = (void *)*v28;
            }
            while (*v28);
            char v24 = v49;
            if (v25 == v49) {
              goto LABEL_45;
            }
            if (v25[4] == v10)
            {
              std::string::size_type v29 = v25[5];
            }
            else
            {
              char v24 = v25;
LABEL_45:
              std::string::size_type v29 = ((char *)v52 - (unsigned char *)__p) >> 3;
              v62.__r_.__value_.__r.__words[0] = v10;
              v62.__r_.__value_.__l.__size_ = v29;
              std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>(&v48, v24, (unint64_t *)&v62, &v62);
              uint64_t v30 = v52;
              if (v52 >= v53)
              {
                uint64_t v32 = (unint64_t *)__p;
                uint64_t v33 = ((char *)v52 - (unsigned char *)__p) >> 3;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 61) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v35 = (char *)v53 - (unsigned char *)__p;
                if (((char *)v53 - (unsigned char *)__p) >> 2 > v34) {
                  unint64_t v34 = v35 >> 2;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v53, v36);
                  uint64_t v32 = (unint64_t *)__p;
                  uint64_t v30 = v52;
                }
                else
                {
                  int v37 = 0;
                }
                uint64_t v38 = (unint64_t *)&v37[8 * v33];
                unint64_t *v38 = v10;
                uint64_t v31 = v38 + 1;
                while (v30 != v32)
                {
                  unint64_t v39 = *--v30;
                  *--uint64_t v38 = v39;
                }
                std::string __p = v38;
                long long v52 = v31;
                long long v53 = (unint64_t *)&v37[8 * v36];
                if (v32) {
                  operator delete(v32);
                }
              }
              else
              {
                *long long v52 = v10;
                uint64_t v31 = v30 + 1;
              }
              long long v52 = v31;
            }
            *((void *)v50 + v8++) = v29;
            uint64_t v7 = *(void *)(v5 + 8);
            if (v8 >= (*(void *)(v5 + 16) - v7) >> 4) {
              break;
            }
            continue;
          default:
            uint64_t result = turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
        break;
      }
    }
    int v43 = *(uint64_t **)(*a3)[5];
    uint64_t v45 = *v43;
    uint64_t v44 = v43[1];
    v47[0] = v45;
    v47[1] = v44;
    if (v44) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v47, (uint64_t **)&__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)v54, v55);
  return 0;
}

void sub_224049F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (*(char *)(v34 - 169) < 0) {
    operator delete(*(void **)(v34 - 192));
  }
  if (*(char *)(v34 - 97) < 0)
  {
    operator delete(*(void **)(v34 - 120));
    if ((v33 & 1) == 0)
    {
LABEL_8:
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a19, a20);
      if (__p)
      {
        a23 = (uint64_t)__p;
        operator delete(__p);
      }
      if (a25)
      {
        a26 = (uint64_t)a25;
        operator delete(a25);
      }
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a28, a29);
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v32);
  goto LABEL_8;
}

uint64_t std::set<unsigned long>::set[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      std::__tree<unsigned long>::__emplace_hint_unique_impl<turi::flexible_type const&>((uint64_t **)a1, v4, v6);
      v6 += 16;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_22404A164(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__emplace_hint_unique_impl<turi::flexible_type const&>(uint64_t **a1, void *a2, unsigned char *a3)
{
  std::__tree<unsigned long>::__construct_node<turi::flexible_type const&>((uint64_t)a1, a3, (uint64_t)&__p);
  uint64_t v5 = (uint64_t **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v10, &v9, (unint64_t *)__p + 4);
  unint64_t v6 = *v5;
  if (*v5)
  {
    uint64_t v7 = __p;
    std::string __p = 0;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v10, v5, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v6;
}

void sub_22404A204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<unsigned long>::__construct_node<turi::flexible_type const&>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (uint64_t *)operator new(0x28uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  std::allocator<std::__tree_node<unsigned long,void *>>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(v5, v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_22404A27C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void std::allocator<std::__tree_node<unsigned long,void *>>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v4 = 0;
  switch(a3[12])
  {
    case 0:
      uint64_t v4 = *(void *)a3;
      goto LABEL_25;
    case 1:
      uint64_t v4 = (uint64_t)*(double *)a3;
      goto LABEL_25;
    case 2:
      uint64_t v6 = *(void *)a3;
      uint64_t v7 = (char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      unint64_t v8 = (char *)v7;
      if (*(char *)(v6 + 31) < 0) {
        unint64_t v8 = *v7;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      uint64_t v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v20[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v9 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 31);
      }
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v17 = std::string::append(&v23, " cannot be interpreted as an integer");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v20[0] = (void *)v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v5 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v10 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      goto LABEL_24;
    case 5:
      uint64_t v11 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      goto LABEL_24;
    case 6:
      uint64_t v4 = (uint64_t)(*(void *)a3 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v12 = *(void *)a3;
      uint64_t v13 = *(atomic_uint **)(*(void *)a3 + 16);
      __p[0] = *(void **)(*(void *)a3 + 8);
      __p[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
      }
      long long v14 = *(_OWORD *)(v12 + 24);
      long long v15 = *(_OWORD *)(v12 + 56);
      long long v21 = *(_OWORD *)(v12 + 40);
      long long v22 = v15;
      *(_OWORD *)unsigned __int8 v20 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v21 + 1))
      {
        *(void *)&long long v22 = *((void *)&v21 + 1);
        operator delete(*((void **)&v21 + 1));
      }
      if (v20[0])
      {
        v20[1] = v20[0];
        operator delete(v20[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v4 = 0;
LABEL_25:
      *a2 = v4;
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_22404A54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

uint64_t *std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>(uint64_t **a1, void *a2, unint64_t *a3, _OWORD *a4)
{
  uint64_t v6 = (void **)std::__tree<unsigned long>::__find_equal<unsigned long>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_merge>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7698F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_merge>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7698F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_merge>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_union_merge::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(a, union(b,c)) -> union(a,b,c)");
}

BOOL turi::query_eval::opt_union_transform::transform_applies(uint64_t a1, int a2)
{
  return a2 == 11;
}

uint64_t turi::query_eval::opt_union_merge::apply_transform(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*a3 + 40);
  uint64_t v4 = *(void *)(*a3 + 48);
  if (v3 == v4) {
    return 0;
  }
  while (*(_DWORD *)(*(void *)v3 + 16) != 11)
  {
    v3 += 16;
    if (v3 == v4) {
      return 0;
    }
  }
  memset(v13, 0, sizeof(v13));
  uint64_t v15 = 0;
  uint64_t v16 = (void **)&unk_26D7699B0;
  unint64_t v17 = (std::__shared_weak_count *)v14;
  long long v18 = v13;
  unint64_t v19 = &v16;
  std::__function::__value_func<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::swap[abi:ne180100](&v16, v14);
  std::__function::__value_func<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::~__value_func[abi:ne180100](&v16);
  if (!v15) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v15 + 48))(v15, a3);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)v13, &v16);
  unint64_t v8 = (std::__shared_weak_count *)a3[1];
  uint64_t v11 = (uint64_t *)*a3;
  uint64_t v12 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v16;
  uint64_t v10 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v11, (uint64_t *)&v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__function::__value_func<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::~__value_func[abi:ne180100](v14);
  uint64_t v16 = (void **)v13;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v16);
  return 1;
}

void sub_22404A924(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v5 - 48);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__function::__value_func<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  *(void *)(v5 - 56) = va;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 56));
  _Unwind_Resume(a1);
}

void std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::~__func()
{
}

__n128 std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D7699B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D7699B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::operator()(uint64_t a1, uint64_t *a2)
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1} &,std::shared_ptr<turi::query_eval::node_info const> const&>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1},std::allocator<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1}>,void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<turi::query_eval::opt_union_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::node_info const> const&)#1} &,std::shared_ptr<turi::query_eval::node_info const> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*(_DWORD *)(v3 + 16) == 11)
  {
    uint64_t v4 = *(uint64_t **)(v3 + 40);
    for (uint64_t i = *(uint64_t **)(v3 + 48); v4 != i; v4 += 2)
    {
      uint64_t v6 = *a1;
      uint64_t v10 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      uint64_t v11 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(void *)(v6 + 24);
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 48))(v8, &v10);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
  }
  else
  {
    uint64_t v9 = (uint64_t *)a1[1];
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::push_back[abi:ne180100](v9, (long long *)v3);
  }
}

void sub_22404AB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<turi::query_eval::planner_node>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_22404AC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::planner_node>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::planner_node>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::planner_node>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::planner_node>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::planner_node>*>,std::reverse_iterator<std::shared_ptr<turi::query_eval::planner_node>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::planner_node>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::reverse_iterator<std::shared_ptr<turi::query_eval::planner_node>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_22404B020(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(std::shared_ptr<turi::query_eval::node_info const> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769A40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769A40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_on_source>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_union_on_source::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(source, source) -> source");
}

uint64_t turi::query_eval::opt_union_on_source::apply_transform(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v194 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)(*a3 + 40);
  uint64_t v4 = *(void *)(*a3 + 48) - (void)v3;
  if (!v4) {
    return 0;
  }
  unint64_t v6 = 0;
  unint64_t v7 = v4 >> 4;
  uint64_t v8 = (unint64_t)(v4 >> 4) <= 1 ? 1 : v4 >> 4;
  do
  {
    uint64_t v9 = *v3;
    v3 += 2;
    if ((*(_DWORD *)(v9 + 16) & 0xFFFFFFFE) == 6) {
      ++v6;
    }
    --v8;
  }
  while (v8);
  if (v6 < 2) {
    return 0;
  }
  std::vector<std::array<unsigned long,3ul>>::vector(v181, v7);
  v179 = 0;
  unint64_t v180 = 0;
  v178 = (uint64_t *)&v179;
  uint64_t v11 = *a3;
  uint64_t v12 = *(void *)(*a3 + 40);
  uint64_t v166 = a2;
  if (*(void *)(*a3 + 48) != v12)
  {
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)(v12 + 16 * v13);
      int v15 = *(_DWORD *)(v14 + 16);
      if ((v15 & 0xFFFFFFFE) == 6) {
        break;
      }
LABEL_79:
      ++v13;
      uint64_t v12 = *(void *)(v11 + 40);
      if (v13 >= (*(void *)(v11 + 48) - v12) >> 4)
      {
        uint64_t v57 = v179;
        unint64_t v58 = v180;
        goto LABEL_88;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v175, "begin_index");
    uint64_t v16 = (unsigned char *)turi::query_eval::node_info::p((uint64_t *)v14, (uint64_t)&v175);
    uint64_t v17 = 0;
    switch(v16[12])
    {
      case 0:
        uint64_t v17 = *(void *)v16;
        goto LABEL_37;
      case 1:
        uint64_t v17 = (uint64_t)*(double *)v16;
        goto LABEL_37;
      case 2:
        uint64_t v19 = *(void *)v16;
        uint64_t v20 = (char **)(*(void *)v16 + 8);
        __idx[0] = 0;
        long long v21 = (char *)v20;
        if (*(char *)(v19 + 31) < 0) {
          long long v21 = *v20;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v21);
        uint64_t v17 = std::stoll(&__p, __idx, 10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (*(char *)(v19 + 31) < 0) {
          uint64_t v22 = *(void *)(v19 + 16);
        }
        else {
          uint64_t v22 = *(unsigned __int8 *)(v19 + 31);
        }
        if (__idx[0] != v22)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          long long v160 = std::string::append(&v186, " cannot be interpreted as an integer");
          long long v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v161;
          v160->__r_.__value_.__l.__size_ = 0;
          v160->__r_.__value_.__r.__words[2] = 0;
          v160->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_37;
      case 3:
        uint64_t v18 = *(void *)v16;
        memset(&__p, 0, sizeof(__p));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v18 + 8), *(void *)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_36;
      case 4:
        uint64_t v23 = *(void *)v16;
        memset(&__p, 0, sizeof(__p));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(void *)(v23 + 16) - *(void *)(v23 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
        goto LABEL_36;
      case 5:
        uint64_t v24 = *(void *)v16;
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(void *)(v24 + 16) - *(void *)(v24 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
        goto LABEL_36;
      case 6:
        uint64_t v17 = (uint64_t)(*(void *)v16 << 8) >> 8;
        goto LABEL_37;
      case 7:
        goto LABEL_37;
      case 8:
        uint64_t v25 = *(void *)v16;
        uint64_t v26 = *(void *)(*(void *)v16 + 16);
        v182 = *(void **)(*(void *)v16 + 8);
        *(void *)uint64_t v183 = v26;
        if (v26) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 1u, memory_order_relaxed);
        }
        long long v27 = *(_OWORD *)(v25 + 24);
        long long v28 = *(_OWORD *)(v25 + 56);
        long long v184 = *(_OWORD *)(v25 + 40);
        long long v185 = v28;
        *(_OWORD *)&v183[8] = v27;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count((atomic_uint **)v183);
        goto LABEL_36;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v16 + 8);
        turi::flexible_type_fail(0);
        if (v192)
        {
          v193 = v192;
          operator delete(v192);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          v190 = (char *)__p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
LABEL_36:
        uint64_t v17 = 0;
LABEL_37:
        if (SHIBYTE(v177) < 0) {
          operator delete(v175);
        }
        std::string::size_type v29 = *(uint64_t **)(*(void *)(*a3 + 40) + 16 * v13);
        std::string::basic_string[abi:ne180100]<0>(&v175, "end_index");
        uint64_t v30 = (unsigned char *)turi::query_eval::node_info::p(v29, (uint64_t)&v175);
        uint64_t v31 = 0;
        switch(v30[12])
        {
          case 0:
            uint64_t v31 = *(void *)v30;
            goto LABEL_63;
          case 1:
            uint64_t v31 = (uint64_t)*(double *)v30;
            goto LABEL_63;
          case 2:
            uint64_t v33 = *(void *)v30;
            uint64_t v34 = (char **)(*(void *)v30 + 8);
            __idx[0] = 0;
            uint64_t v35 = (char *)v34;
            if (*(char *)(v33 + 31) < 0) {
              uint64_t v35 = *v34;
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v35);
            uint64_t v31 = std::stoll(&__p, __idx, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (*(char *)(v33 + 31) < 0) {
              uint64_t v36 = *(void *)(v33 + 16);
            }
            else {
              uint64_t v36 = *(unsigned __int8 *)(v33 + 31);
            }
            if (__idx[0] != v36)
            {
              std::string::size_type v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              long long v55 = std::string::append(&v186, " cannot be interpreted as an integer");
              long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v56;
              v55->__r_.__value_.__l.__size_ = 0;
              v55->__r_.__value_.__r.__words[2] = 0;
              v55->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v54, &__p);
              __cxa_throw(v54, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_63;
          case 3:
            uint64_t v32 = *(void *)v30;
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v32 + 8), *(void *)(v32 + 16), (uint64_t)(*(void *)(v32 + 16) - *(void *)(v32 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_62;
          case 4:
            uint64_t v37 = *(void *)v30;
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v37 + 8), *(uint64_t **)(v37 + 16), (uint64_t)(*(void *)(v37 + 16) - *(void *)(v37 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
            goto LABEL_62;
          case 5:
            uint64_t v38 = *(void *)v30;
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v38 + 8), *(uint64_t **)(v38 + 16), (uint64_t)(*(void *)(v38 + 16) - *(void *)(v38 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
            goto LABEL_62;
          case 6:
            uint64_t v31 = (uint64_t)(*(void *)v30 << 8) >> 8;
            goto LABEL_63;
          case 7:
            goto LABEL_63;
          case 8:
            uint64_t v39 = *(void *)v30;
            uint64_t v40 = *(void *)(*(void *)v30 + 16);
            v182 = *(void **)(*(void *)v30 + 8);
            *(void *)uint64_t v183 = v40;
            if (v40) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v40 + 8), 1u, memory_order_relaxed);
            }
            long long v41 = *(_OWORD *)(v39 + 24);
            long long v42 = *(_OWORD *)(v39 + 56);
            long long v184 = *(_OWORD *)(v39 + 40);
            long long v185 = v42;
            *(_OWORD *)&v183[8] = v41;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)v183);
            goto LABEL_62;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v30 + 8);
            turi::flexible_type_fail(0);
            if (v192)
            {
              v193 = v192;
              operator delete(v192);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              v190 = (char *)__p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
LABEL_62:
            uint64_t v31 = 0;
LABEL_63:
            if (SHIBYTE(v177) < 0) {
              operator delete(v175);
            }
            int v43 = *(uint64_t **)(*(void *)(*a3 + 40) + 16 * v13);
            if (v15 == 7)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "sframe");
              uint64_t v44 = turi::query_eval::node_info::any_p<turi::sframe>(v43, (uint64_t)&__p);
              if (*(unsigned char *)(v44 + 288)) {
                uint64_t v45 = *(void *)(v44 + 32);
              }
              else {
                uint64_t v45 = 0;
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
              uint64_t v46 = turi::query_eval::node_info::any_p<turi::sframe>(v43, (uint64_t)&__p);
              uint64_t v47 = *(void *)v46;
              if (*(unsigned char *)(*(void *)v46 + 248)
                && (v49 = v47 + 80, uint64_t v48 = *(uint64_t **)(v47 + 80), (v50 = *(void *)(v49 + 8) - (void)v48) != 0))
              {
                uint64_t v45 = 0;
                unint64_t v51 = v50 >> 3;
                if (v51 <= 1) {
                  unint64_t v51 = 1;
                }
                do
                {
                  uint64_t v52 = *v48++;
                  v45 += v52;
                  --v51;
                }
                while (v51);
              }
              else
              {
                uint64_t v45 = 0;
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            long long v53 = (uint64_t *)((char *)v181[0] + 24 * v13);
            uint64_t *v53 = v17;
            v53[1] = v31;
            v53[2] = v45;
            std::__tree<std::array<unsigned long,3ul>>::__emplace_unique_key_args<std::array<unsigned long,3ul>,std::array<unsigned long,3ul> const&>(&v178, (uint64_t)v181[0] + 24 * v13, (uint64_t)v181[0] + 24 * v13);
            uint64_t v11 = *a3;
            goto LABEL_79;
          default:
            goto LABEL_250;
        }
      default:
LABEL_250:
        uint64_t result = turi::flexible_type_fail(0);
        break;
    }
    goto LABEL_253;
  }
  uint64_t v57 = 0;
  unint64_t v58 = 0;
LABEL_88:
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v178, v57);
  BOOL v59 = v58 == v6;
  uint64_t v10 = v58 != v6;
  if (v59)
  {
LABEL_246:
    if (v181[0])
    {
      v181[1] = v181[0];
      operator delete(v181[0]);
    }
    return v10;
  }
  unsigned int v165 = v10;
  v178 = 0;
  v179 = 0;
  unint64_t v180 = 0;
  long long v176 = 0;
  uint64_t v177 = 0;
  uint64_t v175 = &v176;
  uint64_t v60 = *(void *)(*a3 + 40);
  if (*(void *)(*a3 + 48) == v60)
  {
    uint64_t v126 = 0;
    size_t v125 = 0;
    unint64_t v62 = 0;
LABEL_200:
    if ((char *)v125 - (char *)v126 == 72)
    {
      std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::vector(&__p, 0xAAAAAAAAAAAAAAABLL * ((v126[7] - v126[6]) >> 3));
      std::string::size_type v127 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        uint64_t v128 = 0;
        uint64_t v129 = 0;
        unint64_t v130 = 0;
        do
        {
          uint64_t v131 = v126[6] + v128;
          uint64_t v133 = *(void *)(v131 + 8);
          uint64_t v132 = *(void *)(v131 + 16);
          if (v132) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 8), 1uLL, memory_order_relaxed);
          }
          std::string v134 = (void *)(v127 + v129);
          uint64_t v135 = (std::__shared_weak_count *)v134[1];
          *std::string v134 = v133;
          v134[1] = v132;
          if (v135) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v135);
          }
          ++v130;
          std::string::size_type v127 = __p.__r_.__value_.__r.__words[0];
          v129 += 16;
          v128 += 24;
        }
        while (v130 < (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
      }
      v182 = 0;
      *(void *)uint64_t v183 = 0;
      *(void *)&v183[8] = 0;
      turi::sframe::sframe((uint64_t)v188, (uint64_t **)&__p, (const void ***)&v182, 1);
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v188);
    }
    __p.__r_.__value_.__r.__words[0] = -1;
    std::vector<unsigned long>::vector(&v182, v62, &__p);
    memset(&v186, 0, sizeof(v186));
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::reserve((uint64_t *)&v186, 0x8E38E38E38E38E39 * (v179 - v178));
    long long v136 = v178;
    unint64_t v137 = v179;
    if (v178 != v179)
    {
      uint64_t v138 = 0;
      do
      {
        if (*(unsigned char *)v136)
        {
          uint64_t v140 = v136[6];
          uint64_t v139 = v136[7];
          unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((v139 - v140) >> 3);
          std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::vector(__idx, v141);
          if (v139 != v140)
          {
            uint64_t v142 = 0;
            uint64_t v143 = 0;
            if (v141 <= 1) {
              unint64_t v141 = 1;
            }
            do
            {
              unint64_t v144 = (void *)(v136[6] + v143);
              *((void *)v182 + *v144) = v138;
              size_t v145 = __idx[0];
              uint64_t v147 = v144[1];
              uint64_t v146 = v144[2];
              if (v146) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v146 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v148 = (void *)(v145 + v142);
              std::string v149 = (std::__shared_weak_count *)v148[1];
              *uint64_t v148 = v147;
              v148[1] = v146;
              if (v149) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v149);
              }
              ++v138;
              v142 += 16;
              v143 += 24;
              --v141;
            }
            while (v141);
          }
          memset(v172, 0, sizeof(v172));
          turi::sframe::sframe((uint64_t)v187, (uint64_t **)__idx, (const void ***)v172, 1);
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v187);
        }
        std::vector<std::shared_ptr<turi::query_eval::planner_node>>::push_back[abi:ne180100]((uint64_t *)&v186, *(long long **)(*(void *)(*a3 + 40) + 16 * v136[1]));
        unint64_t v150 = v136[2];
        if (v150 < v136[3])
        {
          v151 = v182;
          do
            v151[v150++] = v138++;
          while (v150 < v136[3]);
        }
        v136 += 9;
      }
      while (v136 != v137);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)&v186, &__p);
    unint64_t v152 = (uint64_t)(*(void *)v183 - (void)v182) >> 3;
    if (v152 <= 1) {
      unint64_t v152 = 1;
    }
    unint64_t v153 = v152 - 1;
    uint64_t v154 = (uint64_t *)((char *)v182 + 8);
    while (v153)
    {
      uint64_t v155 = *v154;
      uint64_t v156 = *(v154 - 1) + 1;
      --v153;
      ++v154;
      if (v156 != v155)
      {
        long long v171 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)&v171, (uint64_t **)&v182);
      }
    }
    uint64_t v157 = (std::__shared_weak_count *)a3[1];
    uint64_t v169 = (uint64_t *)*a3;
    v170 = v157;
    if (v157) {
      atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v168 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    uint64_t v10 = v165;
    if (__p.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    turi::query_eval::optimization_engine::replace_node(v166, &v169, (uint64_t *)&v168);
    if (*((void *)&v168 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v168 + 1));
    }
    if (v170) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v170);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v186;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v182)
    {
      *(void *)uint64_t v183 = v182;
      operator delete(v182);
    }
    std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v175, v176);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v178;
    std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    goto LABEL_246;
  }
  unint64_t v61 = 0;
  unint64_t v62 = 0;
  while (1)
  {
    uint64_t v63 = *(void *)(v60 + 16 * v61);
    int v64 = *(_DWORD *)(v63 + 16);
    if ((v64 & 0xFFFFFFFE) == 6) {
      break;
    }
    long long v67 = v179;
    if ((unint64_t)v179 >= v180)
    {
      unint64_t v69 = 0x8E38E38E38E38E39 * (v179 - v178);
      unint64_t v70 = v69 + 1;
      if (v69 + 1 > 0x38E38E38E38E38ELL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      if (0x1C71C71C71C71C72 * ((uint64_t)(v180 - (void)v178) >> 3) > v70) {
        unint64_t v70 = 0x1C71C71C71C71C72 * ((uint64_t)(v180 - (void)v178) >> 3);
      }
      if (0x8E38E38E38E38E39 * ((uint64_t)(v180 - (void)v178) >> 3) >= 0x1C71C71C71C71C7) {
        unint64_t v71 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v71 = v70;
      }
      uint64_t v191 = &v180;
      if (v71) {
        long long v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>((uint64_t)&v180, v71);
      }
      else {
        long long v72 = 0;
      }
      std::string::size_type v73 = (std::string::size_type)&v72[72 * v69];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      __p.__r_.__value_.__l.__size_ = v73;
      v190 = &v72[72 * v71];
      *(_OWORD *)std::string::size_type v73 = 0u;
      *(_OWORD *)(v73 + 16) = 0u;
      *(_OWORD *)(v73 + 32) = 0u;
      *(_OWORD *)(v73 + 48) = 0u;
      *(void *)(v73 + 64) = 0;
      __p.__r_.__value_.__r.__words[2] = v73 + 72;
      std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__swap_out_circular_buffer((uint64_t *)&v178, &__p);
      long long v68 = v179;
      std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v179[8] = 0;
      *((_OWORD *)v67 + 2) = 0u;
      *((_OWORD *)v67 + 3) = 0u;
      long long v68 = v67 + 9;
      *(_OWORD *)long long v67 = 0u;
      *((_OWORD *)v67 + 1) = 0u;
    }
    v179 = v68;
    *((unsigned char *)v68 - 72) = 0;
    *(v68 - 8) = v61;
    *(v68 - 7) = v62;
    v62 += turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*(void *)(*a3 + 40) + 16 * v61));
    *(v179 - 6) = v62;
LABEL_191:
    ++v61;
    uint64_t v60 = *(void *)(*a3 + 40);
    if (v61 >= (*(void *)(*a3 + 48) - v60) >> 4)
    {
      uint64_t v126 = v178;
      size_t v125 = v179;
      goto LABEL_200;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__idx, "begin_index");
  long long v65 = (unsigned char *)turi::query_eval::node_info::p((uint64_t *)v63, (uint64_t)__idx);
  uint64_t v66 = 0;
  switch(v65[12])
  {
    case 0:
      uint64_t v66 = *(void *)v65;
      goto LABEL_129;
    case 1:
      uint64_t v66 = (uint64_t)*(double *)v65;
      goto LABEL_129;
    case 2:
      uint64_t v75 = *(void *)v65;
      unint64_t v76 = (char **)(*(void *)v65 + 8);
      v172[0] = 0;
      uint64_t v77 = (char *)v76;
      if (*(char *)(v75 + 31) < 0) {
        uint64_t v77 = *v76;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v77);
      uint64_t v66 = std::stoll(&__p, v172, 10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v75 + 31) < 0) {
        uint64_t v78 = *(void *)(v75 + 16);
      }
      else {
        uint64_t v78 = *(unsigned __int8 *)(v75 + 31);
      }
      if (v172[0] != v78)
      {
        size_t v162 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v163 = std::string::append(&v186, " cannot be interpreted as an integer");
        long long v164 = *(_OWORD *)&v163->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v163->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v164;
        v163->__r_.__value_.__l.__size_ = 0;
        v163->__r_.__value_.__r.__words[2] = 0;
        v163->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v162, &__p);
        __cxa_throw(v162, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_129;
    case 3:
      uint64_t v74 = *(void *)v65;
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v74 + 8), *(void *)(v74 + 16), (uint64_t)(*(void *)(v74 + 16) - *(void *)(v74 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_128;
    case 4:
      uint64_t v79 = *(void *)v65;
      memset(&__p, 0, sizeof(__p));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v79 + 8), *(uint64_t **)(v79 + 16), (uint64_t)(*(void *)(v79 + 16) - *(void *)(v79 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
      goto LABEL_128;
    case 5:
      uint64_t v80 = *(void *)v65;
      memset(&__p, 0, sizeof(__p));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v80 + 8), *(uint64_t **)(v80 + 16), (uint64_t)(*(void *)(v80 + 16) - *(void *)(v80 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
      goto LABEL_128;
    case 6:
      uint64_t v66 = (uint64_t)(*(void *)v65 << 8) >> 8;
      goto LABEL_129;
    case 7:
      goto LABEL_129;
    case 8:
      uint64_t v81 = *(void *)v65;
      uint64_t v82 = *(void *)(*(void *)v65 + 16);
      v182 = *(void **)(*(void *)v65 + 8);
      *(void *)uint64_t v183 = v82;
      if (v82) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v82 + 8), 1u, memory_order_relaxed);
      }
      long long v83 = *(_OWORD *)(v81 + 24);
      long long v84 = *(_OWORD *)(v81 + 56);
      long long v184 = *(_OWORD *)(v81 + 40);
      long long v185 = v84;
      *(_OWORD *)&v183[8] = v83;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)v183);
      goto LABEL_128;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v65 + 8);
      turi::flexible_type_fail(0);
      if (v192)
      {
        v193 = v192;
        operator delete(v192);
      }
      if (__p.__r_.__value_.__r.__words[2])
      {
        v190 = (char *)__p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
LABEL_128:
      uint64_t v66 = 0;
LABEL_129:
      if (v174 < 0) {
        operator delete((void *)__idx[0]);
      }
      uint64_t v85 = *(uint64_t **)(*(void *)(*a3 + 40) + 16 * v61);
      std::string::basic_string[abi:ne180100]<0>(__idx, "end_index");
      long long v86 = (unsigned char *)turi::query_eval::node_info::p(v85, (uint64_t)__idx);
      uint64_t v87 = 0;
      switch(v86[12])
      {
        case 0:
          uint64_t v87 = *(void *)v86;
          goto LABEL_155;
        case 1:
          uint64_t v87 = (uint64_t)*(double *)v86;
          goto LABEL_155;
        case 2:
          uint64_t v89 = *(void *)v86;
          uint64_t v90 = (char **)(*(void *)v86 + 8);
          v172[0] = 0;
          uint64_t v91 = (char *)v90;
          if (*(char *)(v89 + 31) < 0) {
            uint64_t v91 = *v90;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v91);
          uint64_t v87 = std::stoll(&__p, v172, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v89 + 31) < 0) {
            uint64_t v92 = *(void *)(v89 + 16);
          }
          else {
            uint64_t v92 = *(unsigned __int8 *)(v89 + 31);
          }
          if (v172[0] != v92)
          {
            uint64_t v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            long long v123 = std::string::append(&v186, " cannot be interpreted as an integer");
            long long v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v124;
            v123->__r_.__value_.__l.__size_ = 0;
            v123->__r_.__value_.__r.__words[2] = 0;
            v123->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v122, &__p);
            __cxa_throw(v122, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_155;
        case 3:
          uint64_t v88 = *(void *)v86;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v88 + 8), *(void *)(v88 + 16), (uint64_t)(*(void *)(v88 + 16) - *(void *)(v88 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_154;
        case 4:
          uint64_t v93 = *(void *)v86;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v93 + 8), *(uint64_t **)(v93 + 16), (uint64_t)(*(void *)(v93 + 16) - *(void *)(v93 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
          goto LABEL_154;
        case 5:
          uint64_t v94 = *(void *)v86;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v94 + 8), *(uint64_t **)(v94 + 16), (uint64_t)(*(void *)(v94 + 16) - *(void *)(v94 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
          goto LABEL_154;
        case 6:
          uint64_t v87 = (uint64_t)(*(void *)v86 << 8) >> 8;
          goto LABEL_155;
        case 7:
          goto LABEL_155;
        case 8:
          uint64_t v95 = *(void *)v86;
          uint64_t v96 = *(void *)(*(void *)v86 + 16);
          v182 = *(void **)(*(void *)v86 + 8);
          *(void *)uint64_t v183 = v96;
          if (v96) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v96 + 8), 1u, memory_order_relaxed);
          }
          long long v97 = *(_OWORD *)(v95 + 24);
          long long v98 = *(_OWORD *)(v95 + 56);
          long long v184 = *(_OWORD *)(v95 + 40);
          long long v185 = v98;
          *(_OWORD *)&v183[8] = v97;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)v183);
          goto LABEL_154;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v86 + 8);
          turi::flexible_type_fail(0);
          if (v192)
          {
            v193 = v192;
            operator delete(v192);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            v190 = (char *)__p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
LABEL_154:
          uint64_t v87 = 0;
LABEL_155:
          if (v174 < 0) {
            operator delete((void *)__idx[0]);
          }
          uint64_t v99 = (char *)v181[0] + 24 * v61;
          long long v100 = std::__tree<std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::__map_value_compare<std::array<unsigned long,3ul>,std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::less<std::array<unsigned long,3ul>>,true>,std::allocator<std::__value_type<std::array<unsigned long,3ul>,unsigned long>>>::find<std::array<unsigned long,3ul>>((uint64_t)&v175, (uint64_t)v99);
          if (&v176 == v100)
          {
            uint64_t v102 = v66;
            long long v104 = v178;
            unint64_t v103 = v179;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
            long long v105 = std::__tree<std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::__map_value_compare<std::array<unsigned long,3ul>,std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::less<std::array<unsigned long,3ul>>,true>,std::allocator<std::__value_type<std::array<unsigned long,3ul>,unsigned long>>>::__emplace_unique_key_args<std::array<unsigned long,3ul>,std::piecewise_construct_t const&,std::tuple<std::array<unsigned long,3ul> const&>,std::tuple<>>((uint64_t **)&v175, (uint64_t)v99, (uint64_t)&std::piecewise_construct, &__p);
            unint64_t v101 = 0x8E38E38E38E38E39 * (v103 - v104);
            *((void *)v105 + 7) = v101;
            std::string v106 = v179;
            if ((unint64_t)v179 >= v180)
            {
              unint64_t v109 = 0x8E38E38E38E38E39 * (v179 - v178);
              unint64_t v110 = v109 + 1;
              if (v109 + 1 > 0x38E38E38E38E38ELL) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              if (0x1C71C71C71C71C72 * ((uint64_t)(v180 - (void)v178) >> 3) > v110) {
                unint64_t v110 = 0x1C71C71C71C71C72 * ((uint64_t)(v180 - (void)v178) >> 3);
              }
              if (0x8E38E38E38E38E39 * ((uint64_t)(v180 - (void)v178) >> 3) >= 0x1C71C71C71C71C7) {
                unint64_t v111 = 0x38E38E38E38E38ELL;
              }
              else {
                unint64_t v111 = v110;
              }
              uint64_t v191 = &v180;
              if (v111)
              {
                v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>((uint64_t)&v180, v111);
                uint64_t v108 = v102;
              }
              else
              {
                uint64_t v108 = v102;
                v112 = 0;
              }
              std::string::size_type v113 = (std::string::size_type)&v112[72 * v109];
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
              __p.__r_.__value_.__l.__size_ = v113;
              v190 = &v112[72 * v111];
              *(_OWORD *)std::string::size_type v113 = 0u;
              *(_OWORD *)(v113 + 16) = 0u;
              *(_OWORD *)(v113 + 32) = 0u;
              *(_OWORD *)(v113 + 48) = 0u;
              *(void *)(v113 + 64) = 0;
              __p.__r_.__value_.__r.__words[2] = v113 + 72;
              std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__swap_out_circular_buffer((uint64_t *)&v178, &__p);
              uint64_t v107 = v179;
              std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
            }
            else
            {
              v179[8] = 0;
              *((_OWORD *)v106 + 2) = 0u;
              *((_OWORD *)v106 + 3) = 0u;
              uint64_t v107 = v106 + 9;
              *(_OWORD *)std::string v106 = 0u;
              *((_OWORD *)v106 + 1) = 0u;
              uint64_t v108 = v102;
            }
            v179 = v107;
            *((unsigned char *)v107 - 72) = 1;
            *(v107 - 5) = v108;
            *(v107 - 4) = v87;
          }
          else
          {
            unint64_t v101 = v100[7];
          }
          if (v64 == 7)
          {
            v114 = *(uint64_t **)(*(void *)(*a3 + 40) + 16 * v61);
            std::string::basic_string[abi:ne180100]<0>(&v182, "sframe");
            unsigned int v115 = (const turi::sframe *)turi::query_eval::node_info::any_p<turi::sframe>(v114, (uint64_t)&v182);
            turi::sframe::sframe((turi::sframe *)&__p, v115);
            if ((v183[15] & 0x80000000) != 0) {
              operator delete(v182);
            }
            if (v190)
            {
              for (unint64_t i = 0; i < (unint64_t)v190; ++i)
              {
                v117 = v178;
                turi::sframe::select_column((uint64_t)&__p, i, &v186);
                v182 = (void *)(v62 + i);
                *(_OWORD *)uint64_t v183 = *(_OWORD *)&v186.__r_.__value_.__l.__data_;
                *(_OWORD *)&v186.__r_.__value_.__l.__data_ = 0uLL;
                std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::push_back[abi:ne180100](&v117[9 * v101 + 6], (uint64_t)&v182);
                if (*(void *)&v183[8]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v183[8]);
                }
                if (v186.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v186.__r_.__value_.__l.__size_);
                }
              }
              v62 += i;
            }
            turi::sframe::~sframe((turi::sframe *)&__p);
          }
          else
          {
            uint64_t v118 = v178;
            unint64_t v119 = *(uint64_t **)(*(void *)(*a3 + 40) + 16 * v61);
            std::string::basic_string[abi:ne180100]<0>(&v182, "sarray");
            char v120 = (std::string::size_type *)turi::query_eval::node_info::any_p<turi::sframe>(v119, (uint64_t)&v182);
            __p.__r_.__value_.__r.__words[0] = v62;
            __p.__r_.__value_.__l.__size_ = *v120;
            std::string::size_type v121 = v120[1];
            __p.__r_.__value_.__r.__words[2] = v121;
            if (v121) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v121 + 8), 1uLL, memory_order_relaxed);
            }
            std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::push_back[abi:ne180100](&v118[9 * v101 + 6], (uint64_t)&__p);
            if (__p.__r_.__value_.__r.__words[2]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
            }
            if ((v183[15] & 0x80000000) != 0) {
              operator delete(v182);
            }
            ++v62;
          }
          goto LABEL_191;
        default:
          goto LABEL_252;
      }
    default:
LABEL_252:
      uint64_t result = turi::flexible_type_fail(0);
      break;
  }
LABEL_253:
  __break(1u);
  return result;
}

void sub_22404C88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, boost::detail::shared_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (STACK[0x3C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3C8]);
  }
  a31 = (uint64_t)&a51;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (__p)
  {
    a44 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a34, (void *)a35);
  a51 = &a37;
  std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a51);
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::node_info::any_p<turi::sframe>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*a1 + 32, (const void **)a2);
  uint64_t v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v21, "Any-parameter ");
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (const std::string::value_type *)a2;
  }
  else {
    unint64_t v7 = *(const std::string::value_type **)a2;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = std::string::append(&v21, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v22, " not valid in node of type ");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  turi::query_eval::planner_node_type_to_name(__p, *((unsigned int *)a1 + 4));
  if ((v20 & 0x80u) == 0) {
    unint64_t v13 = __p;
  }
  else {
    unint64_t v13 = (void **)__p[0];
  }
  if ((v20 & 0x80u) == 0) {
    std::string::size_type v14 = v20;
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  int v15 = std::string::append(&v23, (const std::string::value_type *)v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v25 = v15->__r_.__value_.__r.__words[2];
  long long v24 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  uint64_t v17 = (const char *)&v24;
  if (v25 < 0) {
    uint64_t v17 = (const char *)v24;
  }
  assert_msg(v5 + 40 != v4, "%s", v17);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if ((char)v20 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  return *(void *)(v4 + 56) + 8;
}

void sub_22404CF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, v12);
    std::string::size_type v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(void *)std::string::size_type v14 = *(void *)a2;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = std::__split_buffer<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~__split_buffer(v16);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_22404D0CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<turi::query_eval::planner_node>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v7);
  }
  return result;
}

void sub_22404D160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::array<unsigned long,3ul>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22404D1F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::array<unsigned long,3ul>>::__emplace_unique_key_args<std::array<unsigned long,3ul>,std::array<unsigned long,3ul> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  size_t v5 = (void **)std::__tree<std::array<unsigned long,3ul>>::__find_equal<std::array<unsigned long,3ul>>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *std::__tree<std::array<unsigned long,3ul>>::__find_equal<std::array<unsigned long,3ul>>(uint64_t a1, void *a2, uint64_t a3)
{
  size_t v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
LABEL_2:
    while (2)
    {
      uint64_t v6 = 0;
      unint64_t v7 = v4;
      do
      {
        unint64_t v8 = *(void *)(a3 + v6 * 8);
        unint64_t v9 = v7[v6 + 4];
        if (v8 < v9)
        {
          uint64_t v4 = (void *)*v7;
          uint64_t result = v7;
          if (*v7) {
            goto LABEL_2;
          }
          goto LABEL_22;
        }
      }
      while (v9 >= v8 && v6++ != 2);
      uint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v7[v11 + 4];
        unint64_t v13 = *(void *)(a3 + v11 * 8);
        if (v12 < v13) {
          break;
        }
        if (v13 < v12 || v11++ == 2) {
          goto LABEL_22;
        }
      }
      uint64_t result = v7 + 1;
      uint64_t v4 = (void *)v7[1];
      if (v4) {
        continue;
      }
      break;
    }
  }
  else
  {
    unint64_t v7 = result;
  }
LABEL_22:
  *a2 = v7;
  return result;
}

void *std::__tree<std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::__map_value_compare<std::array<unsigned long,3ul>,std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::less<std::array<unsigned long,3ul>>,true>,std::allocator<std::__value_type<std::array<unsigned long,3ul>,unsigned long>>>::find<std::array<unsigned long,3ul>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v3 = v4;
  if (v4)
  {
    size_t v5 = result;
    do
    {
      uint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = v3[v6 + 4];
        unint64_t v8 = *(void *)(a2 + v6 * 8);
        if (v7 < v8) {
          break;
        }
        if (v8 < v7 || v6++ == 2)
        {
          size_t v5 = v3;
          break;
        }
      }
      if (v7 < v8) {
        ++v3;
      }
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
    if (v5 != result)
    {
      for (uint64_t i = 0; ; ++i)
      {
        unint64_t v11 = *(void *)(a2 + i * 8);
        unint64_t v12 = v5[i + 4];
        if (v11 < v12) {
          break;
        }
        if (v12 < v11 || i == 2) {
          return v5;
        }
      }
    }
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::__map_value_compare<std::array<unsigned long,3ul>,std::__value_type<std::array<unsigned long,3ul>,unsigned long>,std::less<std::array<unsigned long,3ul>>,true>,std::allocator<std::__value_type<std::array<unsigned long,3ul>,unsigned long>>>::__emplace_unique_key_args<std::array<unsigned long,3ul>,std::piecewise_construct_t const&,std::tuple<std::array<unsigned long,3ul> const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::array<unsigned long,3ul>>::__find_equal<std::array<unsigned long,3ul>>((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x40uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v9;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 72);
      long long v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_OWORD *)(v7 - 72) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 72;
      *((void *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>,std::reverse_iterator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = (void **)(v1 + 48);
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 72;
  }
}

void **std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info> &>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    uint64_t v4 = (void **)(i - 24);
    std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

uint64_t std::vector<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      uint64_t v9 = *(void *)(a3 - 24);
      a3 -= 24;
      *(void *)uint64_t v8 = v9;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>,std::reverse_iterator<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 24;
  }
}

void **std::__split_buffer<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 24;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 24;
    }
  }
}

void std::vector<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info,std::allocator<turi::query_eval::opt_union_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::merge_info>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 72;
        uint64_t v7 = (void **)(v4 - 24);
        std::vector<std::pair<unsigned long,std::shared_ptr<boost::variant<boost::detail::variant::recursive_flag<turi::flexible_type>,std::shared_ptr<turi::unity_sgraph_base>,turi::dataframe_t,std::shared_ptr<turi::model_base>,std::shared_ptr<turi::unity_sframe_base>,std::shared_ptr<turi::unity_sarray_base>,std::map<std::string,boost::recursive_variant_>,std::vector<boost::recursive_variant_>,boost::recursive_wrapper<turi::function_closure_info>>>>>::__destroy_vector::operator()[abi:ne180100](&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_on_source>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_project_on_source::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(source) -> source");
}

uint64_t turi::query_eval::opt_project_on_source::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  if (*(_DWORD *)(*(void *)(*a3)[5] + 16) != 7) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  uint64_t v5 = *(void *)turi::query_eval::node_info::p(v3, (uint64_t)__p);
  std::string::size_type v73 = 0;
  uint64_t v74 = 0;
  long long v72 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v72, *(uint64_t **)(v5 + 8), *(uint64_t **)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(uint64_t **)(*a3)[5];
  std::string::basic_string[abi:ne180100]<0>(&__str, "sframe");
  uint64_t v7 = (const turi::sframe *)turi::query_eval::node_info::any_p<turi::sframe>(v6, (uint64_t)&__str);
  turi::sframe::sframe((turi::sframe *)__p, v7);
  if (SBYTE7(__str_16) < 0) {
    operator delete((void *)__str);
  }
  uint64_t v9 = v72;
  uint64_t v8 = v73;
  unint64_t v10 = (v73 - v72) >> 4;
  BOOL v11 = v10 <= v85;
  if (v10 > v85)
  {
    turi::sframe::~sframe((turi::sframe *)__p);
    __p[0] = &v72;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return v11;
  }
  unint64_t v69 = 0;
  unint64_t v70 = 0;
  unint64_t v71 = 0;
  if (v72 != v73)
  {
    while (2)
    {
      unint64_t v12 = 0;
      switch(v9[12])
      {
        case 0:
          unint64_t v12 = *(void *)v9;
          goto LABEL_32;
        case 1:
          unint64_t v12 = (uint64_t)*(double *)v9;
          goto LABEL_32;
        case 2:
          uint64_t v14 = *(void *)v9;
          long long v15 = (char **)(*(void *)v9 + 8);
          size_t __idx = 0;
          long long v16 = (char *)v15;
          if (*(char *)(v14 + 31) < 0) {
            long long v16 = *v15;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v16);
          unint64_t v12 = std::stoll((const std::string *)&__str, &__idx, 10);
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
          if (*(char *)(v14 + 31) < 0) {
            uint64_t v17 = *(void *)(v14 + 16);
          }
          else {
            uint64_t v17 = *(unsigned __int8 *)(v14 + 31);
          }
          if (__idx != v17)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v34 = std::string::append(&v80, " cannot be interpreted as an integer");
            long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            *(void *)&long long __str_16 = *((void *)&v34->__r_.__value_.__l + 2);
            long long __str = v35;
            v34->__r_.__value_.__l.__size_ = 0;
            v34->__r_.__value_.__r.__words[2] = 0;
            v34->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)&__str);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_32;
        case 3:
          uint64_t v13 = *(void *)v9;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v13 + 8), *(void *)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((void)__str)
          {
            *((void *)&__str + 1) = __str;
            operator delete((void *)__str);
          }
          goto LABEL_31;
        case 4:
          uint64_t v18 = *(void *)v9;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v18 + 8), *(uint64_t **)(v18 + 16), (uint64_t)(*(void *)(v18 + 16) - *(void *)(v18 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
          goto LABEL_31;
        case 5:
          uint64_t v19 = *(void *)v9;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
          goto LABEL_31;
        case 6:
          unint64_t v12 = (uint64_t)(*(void *)v9 << 8) >> 8;
          goto LABEL_32;
        case 7:
          goto LABEL_32;
        case 8:
          uint64_t v20 = *(void *)v9;
          uint64_t v21 = *(void *)(*(void *)v9 + 16);
          *(void *)&v75[0] = *(void *)(*(void *)v9 + 8);
          *((void *)&v75[0] + 1) = v21;
          if (v21) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v21 + 8), 1u, memory_order_relaxed);
          }
          long long v22 = *(_OWORD *)(v20 + 24);
          long long v23 = *(_OWORD *)(v20 + 56);
          v75[2] = *(_OWORD *)(v20 + 40);
          v75[3] = v23;
          v75[1] = v22;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)v75 + 1);
          goto LABEL_31;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)v9 + 8);
          turi::flexible_type_fail(0);
          if (v78[1])
          {
            *(void **)&long long v79 = v78[1];
            operator delete(v78[1]);
          }
          if ((void)__str_16)
          {
            *((void *)&__str_16 + 1) = __str_16;
            operator delete((void *)__str_16);
          }
          if (*((void *)&__str + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
          }
LABEL_31:
          unint64_t v12 = 0;
LABEL_32:
          turi::sframe::select_column((uint64_t)__p, v12, v75);
          long long v24 = v70;
          if ((unint64_t)v70 >= v71)
          {
            uint64_t v25 = (v70 - v69) >> 4;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 60) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v27 = v71 - (void)v69;
            if ((uint64_t)(v71 - (void)v69) >> 3 > v26) {
              unint64_t v26 = v27 >> 3;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            v78[0] = &v71;
            std::string::size_type v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v71, v28);
            uint64_t v30 = &v29[16 * v25];
            *(void *)&long long __str = v29;
            *((void *)&__str + 1) = v30;
            *((void *)&__str_16 + 1) = &v29[16 * v31];
            *(_OWORD *)uint64_t v30 = v75[0];
            v75[0] = 0uLL;
            *(void *)&long long __str_16 = v30 + 16;
            std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__swap_out_circular_buffer((uint64_t *)&v69, &__str);
            uint64_t v32 = v70;
            std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)&__str);
            unint64_t v70 = v32;
            if (*((void *)&v75[0] + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75[0] + 1));
            }
          }
          else
          {
            *(_OWORD *)unint64_t v70 = v75[0];
            unint64_t v70 = v24 + 16;
          }
          v9 += 16;
          if (v9 == v8) {
            break;
          }
          continue;
        default:
          goto LABEL_103;
      }
      break;
    }
  }
  uint64_t v36 = *(uint64_t **)(*a3)[5];
  std::string::basic_string[abi:ne180100]<0>(&v80, "begin_index");
  uint64_t v37 = (unsigned char *)turi::query_eval::node_info::p(v36, (uint64_t)&v80);
  switch(v37[12])
  {
    case 0:
    case 1:
    case 6:
    case 7:
      goto LABEL_72;
    case 2:
      uint64_t v39 = *(void *)v37;
      uint64_t v40 = (char **)(*(void *)v37 + 8);
      size_t __idx = 0;
      long long v41 = (char *)v40;
      if (*(char *)(v39 + 31) < 0) {
        long long v41 = *v40;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, v41);
      std::stoll((const std::string *)&__str, &__idx, 10);
      if (SBYTE7(__str_16) < 0) {
        operator delete((void *)__str);
      }
      if (*(char *)(v39 + 31) < 0) {
        uint64_t v42 = *(void *)(v39 + 16);
      }
      else {
        uint64_t v42 = *(unsigned __int8 *)(v39 + 31);
      }
      if (__idx != v42)
      {
        uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v67 = std::string::append((std::string *)v75, " cannot be interpreted as an integer");
        long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
        *(void *)&long long __str_16 = *((void *)&v67->__r_.__value_.__l + 2);
        long long __str = v68;
        v67->__r_.__value_.__l.__size_ = 0;
        v67->__r_.__value_.__r.__words[2] = 0;
        v67->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v66, (const std::string *)&__str);
        __cxa_throw(v66, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_72;
    case 3:
      uint64_t v38 = *(void *)v37;
      *(void *)&long long __str_16 = 0;
      long long __str = 0uLL;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v38 + 8), *(void *)(v38 + 16), (uint64_t)(*(void *)(v38 + 16) - *(void *)(v38 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if ((void)__str)
      {
        *((void *)&__str + 1) = __str;
        operator delete((void *)__str);
      }
      goto LABEL_72;
    case 4:
      uint64_t v43 = *(void *)v37;
      *(void *)&long long __str_16 = 0;
      long long __str = 0uLL;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(void *)(v43 + 16) - *(void *)(v43 + 8)) >> 4);
      turi::flexible_type_fail(0);
      *(void *)&v75[0] = &__str;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
      goto LABEL_72;
    case 5:
      uint64_t v44 = *(void *)v37;
      *(void *)&long long __str_16 = 0;
      long long __str = 0uLL;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(void *)(v44 + 16) - *(void *)(v44 + 8)) >> 5);
      turi::flexible_type_fail(0);
      *(void *)&v75[0] = &__str;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
      goto LABEL_72;
    case 8:
      uint64_t v45 = *(void *)v37;
      uint64_t v46 = *(void *)(*(void *)v37 + 16);
      *(void *)&long long __str = *(void *)(*(void *)v37 + 8);
      *((void *)&__str + 1) = v46;
      if (v46) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v46 + 8), 1u, memory_order_relaxed);
      }
      long long v47 = *(_OWORD *)(v45 + 24);
      long long v48 = *(_OWORD *)(v45 + 56);
      *(_OWORD *)uint64_t v78 = *(_OWORD *)(v45 + 40);
      long long v79 = v48;
      long long __str_16 = v47;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__str + 1);
      goto LABEL_72;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)v37 + 8);
      turi::flexible_type_fail(0);
      if (v78[1])
      {
        *(void **)&long long v79 = v78[1];
        operator delete(v78[1]);
      }
      if ((void)__str_16)
      {
        *((void *)&__str_16 + 1) = __str_16;
        operator delete((void *)__str_16);
      }
      if (*((void *)&__str + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
      }
LABEL_72:
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      uint64_t v49 = *(uint64_t **)(*a3)[5];
      std::string::basic_string[abi:ne180100]<0>(&v80, "end_index");
      uint64_t v50 = (unsigned char *)turi::query_eval::node_info::p(v49, (uint64_t)&v80);
      switch(v50[12])
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_94;
        case 2:
          uint64_t v52 = *(void *)v50;
          long long v53 = (char **)(*(void *)v50 + 8);
          size_t __idx = 0;
          std::string::size_type v54 = (char *)v53;
          if (*(char *)(v52 + 31) < 0) {
            std::string::size_type v54 = *v53;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v54);
          std::stoll((const std::string *)&__str, &__idx, 10);
          if (SBYTE7(__str_16) < 0) {
            operator delete((void *)__str);
          }
          if (*(char *)(v52 + 31) < 0) {
            uint64_t v55 = *(void *)(v52 + 16);
          }
          else {
            uint64_t v55 = *(unsigned __int8 *)(v52 + 31);
          }
          if (__idx != v55)
          {
            uint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            int v64 = std::string::append((std::string *)v75, " cannot be interpreted as an integer");
            long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
            *(void *)&long long __str_16 = *((void *)&v64->__r_.__value_.__l + 2);
            long long __str = v65;
            v64->__r_.__value_.__l.__size_ = 0;
            v64->__r_.__value_.__r.__words[2] = 0;
            v64->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v63, (const std::string *)&__str);
            __cxa_throw(v63, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_94;
        case 3:
          uint64_t v51 = *(void *)v50;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__str, *(const void **)(v51 + 8), *(void *)(v51 + 16), (uint64_t)(*(void *)(v51 + 16) - *(void *)(v51 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if ((void)__str)
          {
            *((void *)&__str + 1) = __str;
            operator delete((void *)__str);
          }
          goto LABEL_94;
        case 4:
          uint64_t v56 = *(void *)v50;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__str, *(uint64_t **)(v56 + 8), *(uint64_t **)(v56 + 16), (uint64_t)(*(void *)(v56 + 16) - *(void *)(v56 + 8)) >> 4);
          turi::flexible_type_fail(0);
          *(void *)&v75[0] = &__str;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
          goto LABEL_94;
        case 5:
          uint64_t v57 = *(void *)v50;
          *(void *)&long long __str_16 = 0;
          long long __str = 0uLL;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__str, *(uint64_t **)(v57 + 8), *(uint64_t **)(v57 + 16), (uint64_t)(*(void *)(v57 + 16) - *(void *)(v57 + 8)) >> 5);
          turi::flexible_type_fail(0);
          *(void *)&v75[0] = &__str;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
          goto LABEL_94;
        case 8:
          uint64_t v58 = *(void *)v50;
          uint64_t v59 = *(void *)(*(void *)v50 + 16);
          *(void *)&long long __str = *(void *)(*(void *)v50 + 8);
          *((void *)&__str + 1) = v59;
          if (v59) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v59 + 8), 1u, memory_order_relaxed);
          }
          long long v60 = *(_OWORD *)(v58 + 24);
          long long v61 = *(_OWORD *)(v58 + 56);
          *(_OWORD *)uint64_t v78 = *(_OWORD *)(v58 + 40);
          long long v79 = v61;
          long long __str_16 = v60;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count((atomic_uint **)&__str + 1);
          goto LABEL_94;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__str, *(void *)v50 + 8);
          turi::flexible_type_fail(0);
          if (v78[1])
          {
            *(void **)&long long v79 = v78[1];
            operator delete(v78[1]);
          }
          if ((void)__str_16)
          {
            *((void *)&__str_16 + 1) = __str_16;
            operator delete((void *)__str_16);
          }
          if (*((void *)&__str + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__str + 1));
          }
LABEL_94:
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v80.__r_.__value_.__l.__data_);
          }
          long long __str = 0uLL;
          *(void *)&long long __str_16 = 0;
          turi::sframe::sframe((uint64_t)v82, (uint64_t **)&v69, (const void ***)&__str, 1);
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v82);
        default:
          goto LABEL_103;
      }
    default:
      break;
  }
LABEL_103:
  uint64_t result = turi::flexible_type_fail(0);
  __break(1u);
  return result;
}

void sub_22404E564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, boost::detail::shared_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v53 & 1) == 0)
    {
LABEL_8:
      if (a52 < 0) {
        operator delete(a47);
      }
      a47 = &a17;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
      turi::sframe::~sframe((turi::sframe *)&STACK[0x248]);
      STACK[0x248] = (unint64_t)&a20;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x248]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v53)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v52);
  goto LABEL_8;
}

uint64_t std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray<turi::flexible_type>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray<turi::flexible_type>>*>,std::reverse_iterator<std::shared_ptr<turi::sarray<turi::flexible_type>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::reverse_iterator<std::shared_ptr<turi::sarray<turi::flexible_type>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::group_aggregate_value>>,std::reverse_iterator<std::shared_ptr<turi::group_aggregate_value>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_append_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_append_on_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_append_on_source>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_append_on_source::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "append(source, source) -> source");
}

BOOL turi::query_eval::opt_append_transform::transform_applies(uint64_t a1, int a2)
{
  return a2 == 1;
}

BOOL turi::query_eval::opt_append_on_source::apply_transform(uint64_t a1, uint64_t a2, void *a3)
{
  v27[37] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a3;
  uint64_t v4 = *(void **)(*a3 + 40);
  uint64_t v5 = *(void *)(*a3 + 48) - (void)v4;
  uint64_t v26 = v5 >> 4;
  if (!v5)
  {
    uint64_t v20 = &v26;
    turi::query_eval::opt_append_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(void)#1}::operator()();
  }
  if ((*(_DWORD *)(*v4 + 16) & 0xFFFFFFFE) != 6 || (*(_DWORD *)(v4[2] + 16) & 0xFFFFFFFE) != 6) {
    return 0;
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v18 = v3;
  uint64_t v19 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::opt_append_on_source::try_sframe_append((uint64_t)&v18, &v26);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if ((_BYTE)v26)
  {
    turi::sframe::sframe((turi::sframe *)v25, (const turi::sframe *)v27);
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v25);
  }
  long long v9 = (std::__shared_weak_count *)a3[1];
  uint64_t v16 = *a3;
  uint64_t v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::opt_append_on_source::try_sarray_append((uint64_t)&v16, &v20);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  BOOL v8 = (_BYTE)v20 != 0;
  if ((_BYTE)v20)
  {
    std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>&,void>((uint64_t)v21, &v15);
    if (!v24 || (uint64_t v10 = v22, v23 == v22))
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v12 = v23 - v22;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      do
      {
        uint64_t v13 = *v10++;
        v11 += v13;
        --v12;
      }
      while (v12);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::make_planner_node(&v15, 0, v11);
  }
  turi::sarray<turi::flexible_type>::~sarray((uint64_t)v21);
  turi::sframe::~sframe((turi::sframe *)v27);
  return v8;
}

void sub_22404ED9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  turi::sarray<turi::flexible_type>::~sarray(v17);
  turi::sframe::~sframe((turi::sframe *)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void turi::query_eval::opt_append_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/optimizations/append_transforms.hpp", 136);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"n->inputs.size()", 16);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"!=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  BOOL v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"!=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/optimizations/append_transforms.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  uint64_t v13 = v16;
  turi::query_eval::opt_append_on_source::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22404EFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::opt_append_on_source::try_sframe_append(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v120 = *MEMORY[0x263EF8340];
  turi::sframe::sframe((turi::sframe *)v116);
  uint64_t v4 = *(uint64_t ***)(*(void *)a1 + 40);
  v112 = *(uint64_t ***)(*(void *)a1 + 48);
  if (v4 == v112) {
    goto LABEL_249;
  }
  unint64_t v111 = (turi::sframe *)(a2 + 8);
  while (1)
  {
    uint64_t v5 = *v4;
    if (*((_DWORD *)*v4 + 4) != 7) {
      break;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
    uint64_t v6 = turi::query_eval::node_info::p(v5, (uint64_t)__p);
    double v7 = *(double *)v6;
    int v8 = *(_DWORD *)(v6 + 8);
    unsigned int v9 = *(unsigned __int8 *)(v6 + 12);
    if (v9 <= 9 && ((1 << v9) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 1uLL);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v11 = *v4;
    std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
    uint64_t v12 = turi::query_eval::node_info::p(v11, (uint64_t)__p);
    double v13 = *(double *)v12;
    int v14 = *(_DWORD *)(v12 + 8);
    unsigned int v15 = *(unsigned __int8 *)(v12 + 12);
    if (v15 <= 9 && ((1 << v15) & 0x33C) != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)&v13, 1uLL);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v17 = *v4;
    std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
    uint64_t v18 = turi::query_eval::node_info::any_p<turi::sframe>(v17, (uint64_t)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    switch(v9)
    {
      case 0u:
        if (v7 != 0.0) {
          goto LABEL_21;
        }
        goto LABEL_64;
      case 1u:
        if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
          goto LABEL_64;
        }
        goto LABEL_21;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 7u:
      case 8u:
      case 9u:
        goto LABEL_21;
      case 6u:
        if ((*(void *)&v7 & 0xFFFFFFFFFFFFFFLL) != 0 || v8)
        {
LABEL_21:
          *a2 = 0;
          turi::sframe::sframe(v111, (const turi::sframe *)v116);
          char v19 = 0;
          goto LABEL_22;
        }
LABEL_64:
        if (*(unsigned char *)(v18 + 288)) {
          uint64_t v31 = *(void *)(v18 + 32);
        }
        else {
          uint64_t v31 = 0;
        }
        switch(v15)
        {
          case 0u:
            if (*(void *)&v13 != v31) {
              goto LABEL_21;
            }
            break;
          case 1u:
            if (v13 != (double)v31) {
              goto LABEL_21;
            }
            break;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_21;
          case 6u:
            if (v31 != (uint64_t)(*(void *)&v13 << 8) >> 8 || v14) {
              goto LABEL_21;
            }
            break;
          default:
            goto LABEL_260;
        }
        unint64_t v109 = a2;
        uint64_t v110 = a1;
        if (v117)
        {
          uint64_t v32 = 0;
          for (unint64_t i = 0; i < v117; ++i)
          {
            uint64_t v34 = *(void *)(v18 + 40);
            if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v18 + 48) - v34) >> 3) <= i) {
              turi::sframe::column_name(unsigned long)const::{lambda(void)#1}::operator()();
            }
            long long v35 = (long long *)(v34 + v32);
            if (*((char *)v35 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v35, *((void *)v35 + 1));
            }
            else
            {
              long long v36 = *v35;
              __p[0].__r_.__value_.__r.__words[2] = *((void *)v35 + 2);
              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v36;
            }
            turi::sframe::set_column_name((uint64_t)v116, i, __p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            v32 += 24;
          }
        }
        switch(v15)
        {
          case 0u:
            switch(v9)
            {
              case 0u:
                BOOL v37 = *(void *)&v7 == *(void *)&v13;
                goto LABEL_163;
              case 1u:
                double v83 = v7;
                double v84 = (double)*(uint64_t *)&v13;
                goto LABEL_162;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_152;
              case 6u:
                if (*(void *)&v13 != (uint64_t)(*(void *)&v7 << 8) >> 8) {
                  goto LABEL_152;
                }
                a2 = v109;
                a1 = v110;
                if (!v8) {
                  goto LABEL_246;
                }
                goto LABEL_153;
              default:
                goto LABEL_260;
            }
          case 1u:
            switch(v9)
            {
              case 0u:
                double v83 = v13;
                double v84 = (double)*(uint64_t *)&v7;
                goto LABEL_162;
              case 1u:
                double v83 = v7;
                double v84 = v13;
LABEL_162:
                BOOL v37 = v83 == v84;
                goto LABEL_163;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_152;
              case 6u:
                double v85 = vabdd_f64((double)v8 / 1000000.0 + (double)((uint64_t)(*(void *)&v7 << 8) >> 8), v13);
                goto LABEL_174;
              default:
                goto LABEL_260;
            }
          case 2u:
            if (v9 - 3 < 7 || v9 < 2) {
              goto LABEL_152;
            }
            if (v9 != 2) {
              goto LABEL_260;
            }
            if (*(char *)(*(void *)&v7 + 31) < 0) {
              size_t v73 = *(void *)(*(void *)&v7 + 16);
            }
            else {
              size_t v73 = *(unsigned __int8 *)(*(void *)&v7 + 31);
            }
            if (*(char *)(*(void *)&v13 + 31) < 0) {
              uint64_t v86 = *(void *)(*(void *)&v13 + 16);
            }
            else {
              uint64_t v86 = *(unsigned __int8 *)(*(void *)&v13 + 31);
            }
            if (v73 != v86) {
              goto LABEL_152;
            }
            uint64_t v87 = (unsigned __int8 *)(*(void *)&v7 + 8);
            if ((*(unsigned char *)(*(void *)&v7 + 31) & 0x80) != 0) {
              uint64_t v87 = *(unsigned __int8 **)v87;
            }
            uint64_t v88 = (unsigned __int8 *)(*(void *)&v13 + 8);
            if ((*(unsigned char *)(*(void *)&v13 + 31) & 0x80) != 0) {
              uint64_t v88 = *(unsigned __int8 **)v88;
            }
            a1 = v110;
            if ((*(unsigned char *)(*(void *)&v7 + 31) & 0x80) == 0)
            {
              for (; v73; --v73)
              {
                if (*v87 != *v88)
                {
LABEL_152:
                  a2 = v109;
                  a1 = v110;
                  goto LABEL_153;
                }
                ++v87;
                ++v88;
              }
              goto LABEL_172;
            }
            a2 = v109;
            if (memcmp(v87, v88, v73)) {
              goto LABEL_153;
            }
            char v19 = 1;
LABEL_23:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)&v13, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v13 != 0)
            {
              if (*(char *)(*(void *)&v13 + 31) < 0) {
                operator delete(*(void **)(*(void *)&v13 + 8));
              }
              double v21 = v13;
              uint64_t v22 = 0x1012C404EF22A49;
              goto LABEL_200;
            }
            goto LABEL_201;
          case 3u:
            if (v9 > 9) {
              goto LABEL_260;
            }
            if (v9 != 3) {
              goto LABEL_152;
            }
            uint64_t v74 = *(double **)(*(void *)&v7 + 8);
            uint64_t v75 = *(double **)(*(void *)&v7 + 16);
            unint64_t v76 = v75 - v74;
            uint64_t v77 = *(double **)(*(void *)&v13 + 8);
            if (v76 != (uint64_t)(*(void *)(*(void *)&v13 + 16) - (void)v77) >> 3) {
              goto LABEL_152;
            }
            if (v75 == v74)
            {
              char v19 = 1;
              a2 = v109;
              a1 = v110;
LABEL_193:
              if (atomic_fetch_add(*(atomic_ullong *volatile *)&v13, 0xFFFFFFFFFFFFFFFFLL) == 1
                && *(void *)&v13 != 0)
              {
                uint64_t v90 = *(void **)(*(void *)&v13 + 8);
                if (v90)
                {
                  *(void *)(*(void *)&v13 + 16) = v90;
                  operator delete(v90);
                }
                double v21 = v13;
                uint64_t v22 = 0x1080C409938AC02;
                goto LABEL_200;
              }
              goto LABEL_201;
            }
            if (v76 <= 1) {
              uint64_t v78 = 1;
            }
            else {
              uint64_t v78 = v75 - v74;
            }
            a2 = v109;
            a1 = v110;
            if (*v74 != *v77) {
              goto LABEL_153;
            }
            uint64_t v79 = 1;
            do
            {
              unint64_t v80 = v79;
              if (v78 == v79) {
                break;
              }
              double v81 = v74[v79];
              double v82 = v77[v79++];
            }
            while (v81 == v82);
            char v38 = v80 >= v76;
LABEL_159:
            if ((v38 & 1) == 0) {
              goto LABEL_153;
            }
            goto LABEL_154;
          case 4u:
            if (v9 > 9) {
              goto LABEL_260;
            }
            if (v9 != 4) {
              goto LABEL_152;
            }
            char v38 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v113, (uint64_t *)(*(void *)&v7 + 8), (void *)(*(void *)&v13 + 8));
            goto LABEL_158;
          case 5u:
            if (v9 > 9) {
              goto LABEL_260;
            }
            if (v9 != 5) {
              goto LABEL_152;
            }
            char v38 = turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v113, (uint64_t **)(*(void *)&v7 + 8), (uint64_t **)(*(void *)&v13 + 8));
            goto LABEL_158;
          case 6u:
            switch(v9)
            {
              case 0u:
                if (*(void *)&v7 != (uint64_t)(*(void *)&v13 << 8) >> 8) {
                  goto LABEL_152;
                }
                a2 = v109;
                a1 = v110;
                if (!v14) {
                  goto LABEL_246;
                }
                goto LABEL_153;
              case 1u:
                double v85 = vabdd_f64(v7, (double)v14 / 1000000.0 + (double)((uint64_t)(*(void *)&v13 << 8) >> 8));
LABEL_174:
                a2 = v109;
                a1 = v110;
                if (v85 < 0.0000005) {
                  goto LABEL_246;
                }
                goto LABEL_153;
              case 2u:
              case 3u:
              case 4u:
              case 5u:
              case 7u:
              case 8u:
              case 9u:
                goto LABEL_152;
              case 6u:
                if (((*(void *)&v13 ^ *(void *)&v7) & 0xFFFFFFFFFFFFFFLL) != 0) {
                  goto LABEL_152;
                }
                BOOL v37 = v8 == v14;
LABEL_163:
                a2 = v109;
                a1 = v110;
                if (!v37) {
                  goto LABEL_153;
                }
                goto LABEL_246;
              default:
                goto LABEL_260;
            }
          case 7u:
            if (v9 < 7 || v9 - 8 < 2) {
              goto LABEL_152;
            }
            if (v9 != 7) {
              goto LABEL_260;
            }
            goto LABEL_172;
          case 8u:
            if (v9 < 8 || v9 == 9) {
              goto LABEL_152;
            }
            if (v9 != 8) {
              goto LABEL_260;
            }
            char v38 = turi::image_type::operator==(*(void *)&v7 + 8, *(void *)&v13 + 8);
LABEL_158:
            a2 = v109;
            a1 = v110;
            goto LABEL_159;
          case 9u:
            if (v9 < 9) {
              goto LABEL_152;
            }
            if (v9 != 9) {
              goto LABEL_260;
            }
            if (*(void *)&v13 == *(void *)&v7) {
              goto LABEL_172;
            }
            if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(void *)&v7 + 8, *(void *)&v13 + 8)) {
              goto LABEL_152;
            }
            uint64_t v40 = *(char **)(*(void *)&v7 + 24);
            uint64_t v39 = *(char **)(*(void *)&v7 + 32);
            uint64_t v41 = v39 - v40;
            if (v39 == v40) {
              goto LABEL_172;
            }
            if (!*(void *)(*(void *)&v7 + 8)) {
              goto LABEL_172;
            }
            uint64_t v42 = 1;
            do
            {
              uint64_t v43 = *(void *)v40;
              v40 += 8;
              v42 *= v43;
            }
            while (v40 != v39);
            if (!v42) {
              goto LABEL_172;
            }
            uint64_t v114 = 0;
            std::vector<unsigned long>::vector(__p, v41 >> 3, &v114);
            long long v44 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
            uint64_t v45 = **(void **)(*(void *)&v13 + 8);
            int64_t v46 = __p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0];
            unint64_t v47 = (uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3;
            unint64_t v48 = v47 - 1;
            if (v47 <= 1) {
              uint64_t v49 = 1;
            }
            else {
              uint64_t v49 = (uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3;
            }
            break;
          default:
            goto LABEL_260;
        }
        break;
      default:
LABEL_260:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
    while (1)
    {
      if (*((void *)&v44 + 1) == (void)v44)
      {
        uint64_t v57 = 0;
        double v58 = *(double *)(**(void **)(*(void *)&v7 + 8) + 8 * *(void *)(*(void *)&v7 + 72));
      }
      else
      {
        uint64_t v50 = 0;
        uint64_t v51 = *(uint64_t **)(*(void *)&v7 + 48);
        uint64_t v52 = (uint64_t *)v44;
        uint64_t v53 = v49;
        do
        {
          uint64_t v55 = *v52++;
          uint64_t v54 = v55;
          uint64_t v56 = *v51++;
          v50 += v56 * v54;
          --v53;
        }
        while (v53);
        uint64_t v57 = 0;
        double v58 = *(double *)(**(void **)(*(void *)&v7 + 8) + 8 * (*(void *)(*(void *)&v7 + 72) + v50));
        uint64_t v59 = *(uint64_t **)(*(void *)&v13 + 48);
        long long v60 = (uint64_t *)v44;
        uint64_t v61 = v49;
        do
        {
          uint64_t v63 = *v60++;
          uint64_t v62 = v63;
          uint64_t v64 = *v59++;
          v57 += v64 * v62;
          --v61;
        }
        while (v61);
      }
      double v65 = *(double *)(v45 + 8 * (*(void *)(*(void *)&v13 + 72) + v57));
      if (v58 != v65)
      {
LABEL_117:
        double v107 = v58;
        double v108 = v65;
        if ((void)v44)
        {
          __p[0].__r_.__value_.__l.__size_ = v44;
          operator delete((void *)v44);
        }
        a2 = v109;
        a1 = v110;
        if (v107 != v108)
        {
LABEL_153:
          turi::sframe::append((turi::sframe *)v116, (const turi::sframe *)v18, (turi::sframe *)__p);
          turi::sframe::operator=((uint64_t)v116, (uint64_t)__p);
          turi::sframe::~sframe((turi::sframe *)__p);
        }
LABEL_154:
        char v19 = 1;
        goto LABEL_22;
      }
      uint64_t v66 = v47;
      uint64_t v67 = v47 - 1;
      if (v46 >= 1) {
        break;
      }
LABEL_115:
      if (v67 < 0 || !v66) {
        goto LABEL_117;
      }
    }
    uint64_t v68 = *(void *)(*(void *)&v7 + 24);
    unint64_t v69 = *(void *)(v44 + 8 * v48) + 1;
    *(void *)(v44 + 8 * v48) = v69;
    unint64_t v70 = (v46 & 0xFFFFFFFFFFFFFFF8) - 16;
    uint64_t v67 = v47 - 1;
    if (v69 < *(void *)(v68 + 8 * v48))
    {
      uint64_t v66 = 1;
      uint64_t v67 = v47 - 1;
      goto LABEL_115;
    }
    while (1)
    {
      *(void *)(v44 + v70 + 8) = 0;
      if (v67 <= 0) {
        break;
      }
      --v67;
      unint64_t v71 = *(void *)(v44 + v70) + 1;
      *(void *)(v44 + v70) = v71;
      unint64_t v72 = *(void *)(v68 + v70);
      v70 -= 8;
      if (v71 < v72)
      {
        uint64_t v66 = 1;
        goto LABEL_115;
      }
    }
    __p[0].__r_.__value_.__l.__size_ = v44;
    operator delete((void *)v44);
LABEL_172:
    char v19 = 1;
    a2 = v109;
    a1 = v110;
LABEL_22:
    switch(v15)
    {
      case 2u:
        goto LABEL_23;
      case 3u:
        goto LABEL_193;
      case 4u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v13, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v13 == 0) {
          goto LABEL_201;
        }
        __p[0].__r_.__value_.__r.__words[0] = *(void *)&v13 + 8;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_51;
      case 5u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v13, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v13 == 0) {
          goto LABEL_201;
        }
        __p[0].__r_.__value_.__r.__words[0] = *(void *)&v13 + 8;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_51:
        double v21 = v13;
        uint64_t v22 = 0x1020C405E66F15BLL;
        break;
      case 8u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v13, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v13 == 0) {
          goto LABEL_201;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v13 + 16));
        double v21 = v13;
        unsigned int v28 = -235920773;
        goto LABEL_57;
      case 9u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v13, 0xFFFFFFFFFFFFFFFFLL) != 1 || *(void *)&v13 == 0) {
          goto LABEL_201;
        }
        uint64_t v25 = *(void **)(*(void *)&v13 + 48);
        if (v25)
        {
          *(void *)(*(void *)&v13 + 56) = v25;
          operator delete(v25);
        }
        uint64_t v26 = *(void **)(*(void *)&v13 + 24);
        if (v26)
        {
          *(void *)(*(void *)&v13 + 32) = v26;
          operator delete(v26);
        }
        uint64_t v27 = *(std::__shared_weak_count **)(*(void *)&v13 + 16);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        double v21 = v13;
        unsigned int v28 = 2071181815;
LABEL_57:
        uint64_t v22 = v28 | 0x1030C4000000000;
        break;
      default:
        goto LABEL_201;
    }
LABEL_200:
    MEMORY[0x22A614FA0](*(void *)&v21, v22);
LABEL_201:
    switch(v9)
    {
      case 2u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v7 != 0)
        {
          if (*(char *)(*(void *)&v7 + 31) < 0) {
            operator delete(*(void **)(*(void *)&v7 + 8));
          }
          double v92 = v7;
          uint64_t v93 = 0x1012C404EF22A49;
          goto LABEL_244;
        }
        break;
      case 3u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v7 != 0)
        {
          unint64_t v101 = *(void **)(*(void *)&v7 + 8);
          if (v101)
          {
            *(void *)(*(void *)&v7 + 16) = v101;
            operator delete(v101);
          }
          double v92 = v7;
          uint64_t v93 = 0x1080C409938AC02;
          goto LABEL_244;
        }
        break;
      case 4u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v7 != 0)
        {
          __p[0].__r_.__value_.__r.__words[0] = *(void *)&v7 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_237;
        }
        break;
      case 5u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v7 != 0)
        {
          __p[0].__r_.__value_.__r.__words[0] = *(void *)&v7 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_237:
          double v92 = v7;
          uint64_t v93 = 0x1020C405E66F15BLL;
          goto LABEL_244;
        }
        break;
      case 8u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v7 != 0)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v7 + 16));
          double v92 = v7;
          unsigned int v99 = -235920773;
          goto LABEL_243;
        }
        break;
      case 9u:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v7, 0xFFFFFFFFFFFFFFFFLL) == 1 && *(void *)&v7 != 0)
        {
          uint64_t v96 = *(void **)(*(void *)&v7 + 48);
          if (v96)
          {
            *(void *)(*(void *)&v7 + 56) = v96;
            operator delete(v96);
          }
          long long v97 = *(void **)(*(void *)&v7 + 24);
          if (v97)
          {
            *(void *)(*(void *)&v7 + 32) = v97;
            operator delete(v97);
          }
          long long v98 = *(std::__shared_weak_count **)(*(void *)&v7 + 16);
          if (v98) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v98);
          }
          double v92 = v7;
          unsigned int v99 = 2071181815;
LABEL_243:
          uint64_t v93 = v99 | 0x1030C4000000000;
LABEL_244:
          MEMORY[0x22A614FA0](*(void *)&v92, v93);
        }
        break;
      default:
        break;
    }
    if ((v19 & 1) == 0) {
      goto LABEL_258;
    }
LABEL_246:
    v4 += 2;
    if (v4 == v112)
    {
LABEL_249:
      if (v119) {
        BOOL v104 = v118 == 0;
      }
      else {
        BOOL v104 = 1;
      }
      if (v104)
      {
        long long v105 = **(uint64_t ***)(*(void *)a1 + 40);
        std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
        uint64_t v106 = turi::query_eval::node_info::any_p<turi::sframe>(v105, (uint64_t)__p);
        turi::sframe::operator=((uint64_t)v116, v106);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      *a2 = 1;
      turi::sframe::sframe((turi::sframe *)(a2 + 8), (const turi::sframe *)v116);
      goto LABEL_258;
    }
  }
  *a2 = 0;
  turi::sframe::sframe(v111, (const turi::sframe *)v116);
LABEL_258:
  turi::sframe::~sframe((turi::sframe *)v116);
}

void sub_22404FD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  switch(v63)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) != 1 || v62 == 0) {
        goto LABEL_39;
      }
      if (*(char *)(v62 + 31) < 0) {
        operator delete(*(void **)(v62 + 8));
      }
      uint64_t v66 = (void *)v62;
      uint64_t v67 = 0x1012C404EF22A49;
      goto LABEL_38;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) != 1 || v62 == 0) {
        goto LABEL_39;
      }
      unint64_t v72 = *(void **)(v62 + 8);
      if (v72)
      {
        *(void *)(v62 + 16) = v72;
        operator delete(v72);
      }
      uint64_t v66 = (void *)v62;
      uint64_t v67 = 0x1080C409938AC02;
      goto LABEL_38;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) != 1 || v62 == 0) {
        goto LABEL_39;
      }
      a18 = v62 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
      goto LABEL_31;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) != 1 || v62 == 0) {
        goto LABEL_39;
      }
      a18 = v62 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_31:
      uint64_t v66 = (void *)v62;
      uint64_t v67 = 0x1020C405E66F15BLL;
      goto LABEL_38;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) != 1 || v62 == 0) {
        goto LABEL_39;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v62 + 16));
      uint64_t v66 = (void *)v62;
      unsigned int v70 = -235920773;
      goto LABEL_37;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v62, 0xFFFFFFFFFFFFFFFFLL) != 1 || v62 == 0) {
        goto LABEL_39;
      }
      uint64_t v66 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v62);
      unsigned int v70 = 2071181815;
LABEL_37:
      uint64_t v67 = v70 | 0x1030C4000000000;
LABEL_38:
      MEMORY[0x22A614FA0](v66, v67);
LABEL_39:
      switch(v61)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v60) {
            goto LABEL_65;
          }
          if (*(char *)(v60 + 31) < 0) {
            operator delete(*(void **)(v60 + 8));
          }
          uint64_t v75 = (void *)v60;
          uint64_t v76 = 0x1012C404EF22A49;
          goto LABEL_64;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v60) {
            goto LABEL_65;
          }
          uint64_t v78 = *(void **)(v60 + 8);
          if (v78)
          {
            *(void *)(v60 + 16) = v78;
            operator delete(v78);
          }
          uint64_t v75 = (void *)v60;
          uint64_t v76 = 0x1080C409938AC02;
          goto LABEL_64;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v60) {
            goto LABEL_65;
          }
          a18 = v60 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
          goto LABEL_59;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v60) {
            goto LABEL_65;
          }
          a18 = v60 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
LABEL_59:
          uint64_t v75 = (void *)v60;
          uint64_t v76 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v60) {
            goto LABEL_65;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v60 + 16));
          uint64_t v75 = (void *)v60;
          unsigned int v77 = -235920773;
          goto LABEL_63;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v60, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v60) {
            goto LABEL_65;
          }
          uint64_t v75 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v60);
          unsigned int v77 = 2071181815;
LABEL_63:
          uint64_t v76 = v77 | 0x1030C4000000000;
LABEL_64:
          MEMORY[0x22A614FA0](v75, v76);
LABEL_65:
          turi::sframe::~sframe((turi::sframe *)&a60);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_65;
      }
    default:
      goto LABEL_39;
  }
}

uint64_t turi::query_eval::opt_append_on_source::try_sarray_append@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  turi::sarray<turi::flexible_type>::sarray((uint64_t)v59);
  uint64_t v53 = a1;
  uint64_t v3 = *(uint64_t ***)(*(void *)a1 + 40);
  uint64_t v55 = *(uint64_t ***)(*(void *)a1 + 48);
  if (v3 == v55)
  {
LABEL_139:
    if (!v62) {
      goto LABEL_145;
    }
    int64_t v46 = v60;
    if (v61 == v60) {
      goto LABEL_145;
    }
    uint64_t v47 = 0;
    unint64_t v48 = v61 - v60;
    if (v48 <= 1) {
      unint64_t v48 = 1;
    }
    do
    {
      uint64_t v49 = *v46++;
      v47 += v49;
      --v48;
    }
    while (v48);
    if (!v47)
    {
LABEL_145:
      uint64_t v50 = **(uint64_t ***)(*(void *)v53 + 40);
      std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
      uint64_t v51 = (uint64_t *)turi::query_eval::node_info::any_p<turi::sframe>(v50, (uint64_t)__p);
      turi::sarray<turi::flexible_type>::operator=((uint64_t)v59, *v51);
      if (v58 < 0) {
        operator delete(__p[0]);
      }
    }
    *a2 = 1;
    turi::sarray<turi::flexible_type>::sarray((uint64_t)(a2 + 8), (uint64_t)v59);
  }
  else
  {
    uint64_t v54 = (uint64_t)(a2 + 8);
    while (2)
    {
      uint64_t v4 = *v3;
      if (*((_DWORD *)*v3 + 4) == 6)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
        uint64_t v5 = turi::query_eval::node_info::p(v4, (uint64_t)__p);
        double v6 = *(double *)v5;
        int v7 = *(_DWORD *)(v5 + 8);
        unsigned int v8 = *(unsigned __int8 *)(v5 + 12);
        if (v8 <= 9 && ((1 << v8) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)&v6, 1uLL);
        }
        if (v58 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v10 = *v3;
        std::string::basic_string[abi:ne180100]<0>(__p, "end_index");
        uint64_t v11 = turi::query_eval::node_info::p(v10, (uint64_t)__p);
        double v12 = *(double *)v11;
        int v13 = *(_DWORD *)(v11 + 8);
        unsigned int v14 = *(unsigned __int8 *)(v11 + 12);
        if (v14 <= 9 && ((1 << v14) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)&v12, 1uLL);
        }
        if (v58 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v16 = *v3;
        std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
        uint64_t v17 = (uint64_t *)turi::query_eval::node_info::any_p<turi::sframe>(v16, (uint64_t)__p);
        uint64_t v19 = *v17;
        uint64_t v18 = (std::__shared_weak_count *)v17[1];
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v58 < 0) {
          operator delete(__p[0]);
        }
        switch(v8)
        {
          case 0u:
            if (v6 == 0.0) {
              goto LABEL_98;
            }
            goto LABEL_23;
          case 1u:
            if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
              goto LABEL_98;
            }
            goto LABEL_23;
          case 2u:
          case 3u:
          case 4u:
          case 5u:
          case 7u:
          case 8u:
          case 9u:
            goto LABEL_23;
          case 6u:
            if ((*(void *)&v6 & 0xFFFFFFFFFFFFFFLL) == 0 && !v7)
            {
LABEL_98:
              if (!*(unsigned char *)(v19 + 248)
                || (v36 = *(char **)(v19 + 80), long long v35 = *(char **)(v19 + 88), v37 = v35 - v36, v35 == v36))
              {
                uint64_t v38 = 0;
              }
              else
              {
                uint64_t v38 = 0;
                unint64_t v39 = v37 >> 3;
                if (v39 <= 1) {
                  unint64_t v39 = 1;
                }
                do
                {
                  uint64_t v40 = *(void *)v36;
                  v36 += 8;
                  v38 += v40;
                  --v39;
                }
                while (v39);
              }
              switch(v14)
              {
                case 0u:
                  if (*(void *)&v12 == v38)
                  {
                    switch(v8)
                    {
                      case 0u:
                        if (*(void *)&v6 != *(void *)&v12) {
                          goto LABEL_120;
                        }
                        goto LABEL_121;
                      case 1u:
                        double v43 = v6;
                        double v45 = (double)*(uint64_t *)&v12;
                        goto LABEL_137;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_120;
                      case 6u:
                        if (*(void *)&v12 != (uint64_t)(*(void *)&v6 << 8) >> 8 || v7) {
                          goto LABEL_120;
                        }
                        goto LABEL_121;
                      default:
                        goto LABEL_150;
                    }
                  }
                  break;
                case 1u:
                  double v43 = v12;
                  if (v12 == (double)v38)
                  {
                    switch(v8)
                    {
                      case 0u:
                        double v45 = (double)*(uint64_t *)&v6;
LABEL_137:
                        if (v43 != v45) {
                          goto LABEL_120;
                        }
                        goto LABEL_121;
                      case 1u:
                        if (v6 == v12) {
                          goto LABEL_121;
                        }
                        goto LABEL_120;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_120;
                      case 6u:
                        double v44 = vabdd_f64((double)v7 / 1000000.0 + (double)((uint64_t)(*(void *)&v6 << 8) >> 8), v12);
                        goto LABEL_134;
                      default:
                        goto LABEL_150;
                    }
                  }
                  break;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 7u:
                case 8u:
                case 9u:
                  break;
                case 6u:
                  uint64_t v41 = (uint64_t)(*(void *)&v12 << 8) >> 8;
                  if (v41 == v38 && v13 == 0)
                  {
                    switch(v8)
                    {
                      case 0u:
                        if (v41 == *(void *)&v6) {
                          goto LABEL_121;
                        }
                        goto LABEL_120;
                      case 1u:
                        double v44 = vabdd_f64(v6, (double)v13 / 1000000.0 + (double)v41);
LABEL_134:
                        if (v44 < 0.0000005) {
                          goto LABEL_121;
                        }
                        goto LABEL_120;
                      case 2u:
                      case 3u:
                      case 4u:
                      case 5u:
                      case 7u:
                      case 8u:
                      case 9u:
                        goto LABEL_120;
                      case 6u:
                        if (((*(void *)&v12 ^ *(void *)&v6) & 0xFFFFFFFFFFFFFFLL) != 0 || v7 != v13)
                        {
LABEL_120:
                          turi::sarray<turi::flexible_type>::append((uint64_t)v59, v19, (uint64_t)__p);
                          turi::sarray<turi::flexible_type>::operator=((uint64_t)v59, (uint64_t)__p);
                          turi::sarray<turi::flexible_type>::~sarray((uint64_t)__p);
                        }
LABEL_121:
                        char v20 = 1;
                        if (!v18) {
                          goto LABEL_25;
                        }
                        goto LABEL_24;
                      default:
                        goto LABEL_150;
                    }
                  }
                  break;
                default:
                  goto LABEL_150;
              }
            }
LABEL_23:
            *a2 = 0;
            turi::sarray<turi::flexible_type>::sarray(v54, (uint64_t)v59);
            char v20 = 0;
            if (v18) {
LABEL_24:
            }
              std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_25:
            switch(v14)
            {
              case 2u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v12, 0xFFFFFFFFFFFFFFFFLL) == 1 && v12 != 0.0)
                {
                  if (*(char *)(*(void *)&v12 + 31) < 0) {
                    operator delete(*(void **)(*(void *)&v12 + 8));
                  }
                  double v21 = v12;
                  uint64_t v22 = 0x1012C404EF22A49;
                  goto LABEL_56;
                }
                break;
              case 3u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v12, 0xFFFFFFFFFFFFFFFFLL) == 1 && v12 != 0.0)
                {
                  uint64_t v27 = *(void **)(*(void *)&v12 + 8);
                  if (v27)
                  {
                    *(void *)(*(void *)&v12 + 16) = v27;
                    operator delete(v27);
                  }
                  double v21 = v12;
                  uint64_t v22 = 0x1080C409938AC02;
                  goto LABEL_56;
                }
                break;
              case 4u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v12, 0xFFFFFFFFFFFFFFFFLL) == 1 && v12 != 0.0)
                {
                  __p[0] = (void *)(*(void *)&v12 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_51;
                }
                break;
              case 5u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v12, 0xFFFFFFFFFFFFFFFFLL) == 1 && v12 != 0.0)
                {
                  __p[0] = (void *)(*(void *)&v12 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_51:
                  double v21 = v12;
                  uint64_t v22 = 0x1020C405E66F15BLL;
                  goto LABEL_56;
                }
                break;
              case 8u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v12, 0xFFFFFFFFFFFFFFFFLL) == 1 && v12 != 0.0)
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v12 + 16));
                  double v21 = v12;
                  unsigned int v26 = -235920773;
                  goto LABEL_55;
                }
                break;
              case 9u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v12, 0xFFFFFFFFFFFFFFFFLL) == 1 && v12 != 0.0)
                {
                  long long v23 = *(void **)(*(void *)&v12 + 48);
                  if (v23)
                  {
                    *(void *)(*(void *)&v12 + 56) = v23;
                    operator delete(v23);
                  }
                  char v24 = *(void **)(*(void *)&v12 + 24);
                  if (v24)
                  {
                    *(void *)(*(void *)&v12 + 32) = v24;
                    operator delete(v24);
                  }
                  uint64_t v25 = *(std::__shared_weak_count **)(*(void *)&v12 + 16);
                  if (v25) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                  }
                  double v21 = v12;
                  unsigned int v26 = 2071181815;
LABEL_55:
                  uint64_t v22 = v26 | 0x1030C4000000000;
LABEL_56:
                  MEMORY[0x22A614FA0](*(void *)&v21, v22);
                }
                break;
              default:
                break;
            }
            switch(v8)
            {
              case 2u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v6, 0xFFFFFFFFFFFFFFFFLL) == 1 && v6 != 0.0)
                {
                  if (*(char *)(*(void *)&v6 + 31) < 0) {
                    operator delete(*(void **)(*(void *)&v6 + 8));
                  }
                  double v28 = v6;
                  uint64_t v29 = 0x1012C404EF22A49;
                  goto LABEL_88;
                }
                break;
              case 3u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v6, 0xFFFFFFFFFFFFFFFFLL) == 1 && v6 != 0.0)
                {
                  uint64_t v34 = *(void **)(*(void *)&v6 + 8);
                  if (v34)
                  {
                    *(void *)(*(void *)&v6 + 16) = v34;
                    operator delete(v34);
                  }
                  double v28 = v6;
                  uint64_t v29 = 0x1080C409938AC02;
                  goto LABEL_88;
                }
                break;
              case 4u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v6, 0xFFFFFFFFFFFFFFFFLL) == 1 && v6 != 0.0)
                {
                  __p[0] = (void *)(*(void *)&v6 + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  goto LABEL_83;
                }
                break;
              case 5u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v6, 0xFFFFFFFFFFFFFFFFLL) == 1 && v6 != 0.0)
                {
                  __p[0] = (void *)(*(void *)&v6 + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_83:
                  double v28 = v6;
                  uint64_t v29 = 0x1020C405E66F15BLL;
                  goto LABEL_88;
                }
                break;
              case 8u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v6, 0xFFFFFFFFFFFFFFFFLL) == 1 && v6 != 0.0)
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v6 + 16));
                  double v28 = v6;
                  unsigned int v33 = -235920773;
                  goto LABEL_87;
                }
                break;
              case 9u:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)&v6, 0xFFFFFFFFFFFFFFFFLL) == 1 && v6 != 0.0)
                {
                  uint64_t v30 = *(void **)(*(void *)&v6 + 48);
                  if (v30)
                  {
                    *(void *)(*(void *)&v6 + 56) = v30;
                    operator delete(v30);
                  }
                  uint64_t v31 = *(void **)(*(void *)&v6 + 24);
                  if (v31)
                  {
                    *(void *)(*(void *)&v6 + 32) = v31;
                    operator delete(v31);
                  }
                  uint64_t v32 = *(std::__shared_weak_count **)(*(void *)&v6 + 16);
                  if (v32) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                  }
                  double v28 = v6;
                  unsigned int v33 = 2071181815;
LABEL_87:
                  uint64_t v29 = v33 | 0x1030C4000000000;
LABEL_88:
                  MEMORY[0x22A614FA0](*(void *)&v28, v29);
                }
                break;
              default:
                break;
            }
            if ((v20 & 1) == 0) {
              return turi::sarray<turi::flexible_type>::~sarray((uint64_t)v59);
            }
            v3 += 2;
            if (v3 == v55) {
              goto LABEL_139;
            }
            continue;
          default:
LABEL_150:
            uint64_t result = turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
      }
      break;
    }
    *a2 = 0;
    turi::sarray<turi::flexible_type>::sarray(v54, (uint64_t)v59);
  }
  return turi::sarray<turi::flexible_type>::~sarray((uint64_t)v59);
}

void sub_224050A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  switch(v55)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v54) {
        goto LABEL_29;
      }
      if (*(char *)(v54 + 31) < 0) {
        operator delete(*(void **)(v54 + 8));
      }
      uint64_t v57 = (void *)v54;
      uint64_t v58 = 0x1012C404EF22A49;
      goto LABEL_28;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v54) {
        goto LABEL_29;
      }
      uint64_t v60 = *(void **)(v54 + 8);
      if (v60)
      {
        *(void *)(v54 + 16) = v60;
        operator delete(v60);
      }
      uint64_t v57 = (void *)v54;
      uint64_t v58 = 0x1080C409938AC02;
      goto LABEL_28;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v54) {
        goto LABEL_29;
      }
      std::string __p = (void *)(v54 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_23;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v54) {
        goto LABEL_29;
      }
      std::string __p = (void *)(v54 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_23:
      uint64_t v57 = (void *)v54;
      uint64_t v58 = 0x1020C405E66F15BLL;
      goto LABEL_28;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v54) {
        goto LABEL_29;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v54 + 16));
      uint64_t v57 = (void *)v54;
      unsigned int v59 = -235920773;
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v54, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v54) {
        goto LABEL_29;
      }
      uint64_t v57 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v54);
      unsigned int v59 = 2071181815;
LABEL_27:
      uint64_t v58 = v59 | 0x1030C4000000000;
LABEL_28:
      MEMORY[0x22A614FA0](v57, v58);
LABEL_29:
      switch(v52)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v51, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v51) {
            goto LABEL_55;
          }
          if (*(char *)(v51 + 31) < 0) {
            operator delete(*(void **)(v51 + 8));
          }
          int v61 = (void *)v51;
          uint64_t v62 = 0x1012C404EF22A49;
          goto LABEL_54;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v51, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v51) {
            goto LABEL_55;
          }
          uint64_t v64 = *(void **)(v51 + 8);
          if (v64)
          {
            *(void *)(v51 + 16) = v64;
            operator delete(v64);
          }
          int v61 = (void *)v51;
          uint64_t v62 = 0x1080C409938AC02;
          goto LABEL_54;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v51, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v51) {
            goto LABEL_55;
          }
          std::string __p = (void *)(v51 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
          goto LABEL_49;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v51, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v51) {
            goto LABEL_55;
          }
          std::string __p = (void *)(v51 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_49:
          int v61 = (void *)v51;
          uint64_t v62 = 0x1020C405E66F15BLL;
          goto LABEL_54;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v51, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v51) {
            goto LABEL_55;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v51 + 16));
          int v61 = (void *)v51;
          unsigned int v63 = -235920773;
          goto LABEL_53;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v51, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v51) {
            goto LABEL_55;
          }
          int v61 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v51);
          unsigned int v63 = 2071181815;
LABEL_53:
          uint64_t v62 = v63 | 0x1030C4000000000;
LABEL_54:
          MEMORY[0x22A614FA0](v61, v62);
LABEL_55:
          turi::sarray<turi::flexible_type>::~sarray((uint64_t)&a51);
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_55;
      }
    default:
      goto LABEL_29;
  }
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)6>::make_planner_node(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v26[5] = *(void **)MEMORY[0x263EF8340];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v17);
  long long v14 = 0u;
  long long v15 = 0u;
  int v13 = &v18;
  uint64_t v16 = 0;
  uint64_t v5 = turi::index_file_information::index_file_information(&v20, (const turi::index_file_information *)(*a1 + 8));
  turi::index_file_information::save((turi::index_file_information *)v5, (turi::oarchive *)&v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v26, v26[1]);
  std::string __p = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v23)
  {
    char v24 = v23;
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  turi::sarray<turi::flexible_type>::get_type(*a1);
  if (a3 == -1)
  {
    uint64_t v6 = *a1;
    if (*(unsigned char *)(*a1 + 248))
    {
      uint64_t v8 = v6 + 80;
      int v7 = *(uint64_t **)(v6 + 80);
      uint64_t v9 = *(void *)(v8 + 8) - (void)v7;
      if (v9)
      {
        uint64_t v10 = 0;
        unint64_t v11 = v9 >> 3;
        if (v11 <= 1) {
          unint64_t v11 = 1;
        }
        do
        {
          uint64_t v12 = *v7++;
          v10 += v12;
          --v11;
        }
        while (v11);
      }
    }
  }
  std::stringbuf::str();
  std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[6],std::string,0>(&v20, "index");
}

void sub_224051364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a15, (void *)a16);
  std::pair<std::string const,turi::any>::~pair((uint64_t)&a71);
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a25, (void *)a26);
  for (uint64_t i = 120; i != -40; i -= 40)
    std::pair<std::string const,turi::flexible_type>::~pair(v71 - 248 + i);
  if (a24 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  LOBYTE(v19) = *(unsigned char *)(a1 + 249);
  if ((_BYTE)v19)
  {
    std::string v20 = &v19;
    turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#1}::operator()();
  }
  LOBYTE(v19) = *(unsigned char *)(a2 + 249);
  if ((_BYTE)v19)
  {
    std::string v20 = &v19;
    turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#2}::operator()();
  }
  uint64_t v5 = a1;
  if (*(unsigned char *)(a2 + 248))
  {
    if (*(unsigned char *)(a1 + 248))
    {
      uint64_t v6 = (_OWORD *)(a1 + 32);
      LODWORD(v19) = *(_DWORD *)(a1 + 32);
      LODWORD(v18) = *(_DWORD *)(a2 + 32);
      if (v19 != v18)
      {
        std::string v20 = &v19;
        double v21 = &v18;
        turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#3}::operator()();
      }
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a2 + 48);
      uint64_t v19 = v7;
      if (v7 != v18)
      {
        std::string v20 = &v19;
        double v21 = &v18;
        turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#4}::operator()();
      }
      turi::sarray<turi::flexible_type>::sarray(a3);
      *(unsigned char *)(a3 + 248) = 1;
      std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v5 + 8));
      *(_OWORD *)(a3 + 32) = *v6;
      *(void *)(a3 + 48) = *(void *)(v5 + 48);
      std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v5 + 56));
      if (a3 == v5)
      {
        uint64_t v8 = (uint64_t *)(a3 + 256);
      }
      else
      {
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a3 + 80), *(char **)(v5 + 80), *(void *)(v5 + 88), (uint64_t)(*(void *)(v5 + 88) - *(void *)(v5 + 80)) >> 3);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a3 + 104), *(std::string **)(v5 + 104), *(long long **)(v5 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 112) - *(void *)(v5 + 104)) >> 3));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a3 + 128), *(long long **)(v5 + 128), (long long *)(v5 + 136));
        uint64_t v8 = (uint64_t *)(a3 + 256);
        std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a3 + 256, *(uint64_t **)(v5 + 256), *(uint64_t **)(v5 + 264), (uint64_t)(*(void *)(v5 + 264) - *(void *)(v5 + 256)) >> 4);
      }
      *(void *)(a3 + 40) += *(void *)(a2 + 40);
      uint64_t v9 = *(char **)(a2 + 80);
      uint64_t v10 = *(char **)(a2 + 88);
      if (v9 != v10)
      {
        unint64_t v11 = *(char **)(a3 + 88);
        do
        {
          unint64_t v11 = std::vector<unsigned long>::insert(a3 + 80, v11, v9) + 8;
          v9 += 8;
        }
        while (v9 != v10);
      }
      uint64_t v12 = *(const std::vector<std::string>::value_type **)(a2 + 104);
      int v13 = *(const std::vector<std::string>::value_type **)(a2 + 112);
      if (v12 != v13)
      {
        v14.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a3 + 112);
        do
          v14.__i_ = std::vector<std::string>::insert((std::vector<std::string> *)(a3 + 104), v14, v12++).__i_ + 1;
        while (v12 != v13);
      }
      uint64_t v16 = *(void **)(a2 + 256);
      long long v15 = *(void **)(a2 + 264);
      if (v16 != v15)
      {
        uint64_t v17 = *(void **)(a3 + 264);
        do
        {
          uint64_t v17 = std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::insert(v8, v17, v16) + 2;
          v16 += 2;
        }
        while (v16 != v15);
      }
      turi::sarray<turi::flexible_type>::try_compact(a3);
      return;
    }
    uint64_t v5 = a2;
  }
  turi::sarray<turi::flexible_type>::sarray(a3, v5);
}

void sub_2240516FC(_Unwind_Exception *a1)
{
  turi::sarray<turi::flexible_type>::~sarray(v1);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::flexible_type>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v8);
  }
  long long v9 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)uint64_t v8 = v9;
  *(unsigned char *)(a2 + 79) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  uint64_t v10 = (void **)(a2 + 80);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 80, (__n128 *)(a2 + 80));
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 104));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  std::string v20 = (void *)(a2 + 128);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__move_assign(a1 + 128, (void *)(a2 + 128));
  unint64_t v11 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)unint64_t v11 = v12;
  *(unsigned char *)(a2 + 175) = 0;
  *(unsigned char *)(a2 + 152) = 0;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__vdeallocate((uint64_t *)(a1 + 256));
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 256) = 0;
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 249);
  memset(v21, 0, 24);
  DWORD2(v21[0]) = -1;
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  memset(__p, 0, sizeof(__p));
  long long v23 = 0u;
  uint64_t v24 = 0;
  uint64_t v25 = &v26;
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  int v13 = (void **)(a2 + 56);
  *uint64_t v4 = 0u;
  *((void *)v4 + 2) = *(void *)&v21[0];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)v21 + 8);
  *(void *)(a2 + 48) = 0;
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*v13);
  }
  *(_OWORD *)int v13 = 0u;
  *(void **)(a2 + 72) = __p[0];
  std::vector<std::string>::const_iterator v14 = *v10;
  if (*v10)
  {
    *(void *)(a2 + 88) = v14;
    operator delete(v14);
  }
  *(_OWORD *)(a2 + 80) = *(_OWORD *)&__p[1];
  *(void *)(a2 + 96) = 0;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 104));
  uint64_t v16 = a2 + 136;
  long long v15 = *(void **)(a2 + 136);
  *(_OWORD *)(a2 + 104) = v23;
  *(void *)(a2 + 120) = v24;
  uint64_t v24 = 0;
  long long v23 = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v20, v15);
  uint64_t v17 = v26;
  *(void *)(a2 + 128) = v25;
  *(void *)(a2 + 136) = v17;
  uint64_t v18 = v27;
  *(void *)(a2 + 144) = v27;
  if (v18)
  {
    void v17[2] = v16;
    uint64_t v17 = 0;
    uint64_t v25 = &v26;
    unsigned int v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    *std::string v20 = v16;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v25, v17);
  double v28 = (void **)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  MEMORY[0x22A614700](a2 + 152, "");
  *(void *)(a2 + 176) = 0;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__clear[abi:ne180100]((uint64_t *)(a2 + 256));
  *(_WORD *)(a2 + 248) = 0;
  return a1;
}

{
  BOOL v2;
  uint64_t v5;
  void *exception;
  const char *v8;

  if (*(unsigned char *)(a2 + 248)) {
    uint64_t v2 = *(unsigned char *)(a2 + 249) == 0;
  }
  else {
    uint64_t v2 = 1;
  }
  if (!v2)
  {
    exception = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot copy an array which is writing";
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 249))
  {
    exception = __cxa_allocate_exception(8uLL);
    uint64_t v8 = "Cannot copy over an array which is writing";
LABEL_12:
    std::runtime_error *exception = v8;
    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
  }
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  uint64_t v5 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v5;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
  }
  else
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(a2 + 104), *(long long **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(long long **)(a2 + 128), (long long *)(a2 + 136));
    std::string::operator=((std::string *)(a1 + 152), (const std::string *)(a2 + 152));
    std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(a1 + 256, *(uint64_t **)(a2 + 256), *(uint64_t **)(a2 + 264), (uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 4);
  }
  *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 248);
  return a1;
}

uint64_t turi::sarray<turi::flexible_type>::sarray(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26D759AF8;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  int v4 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v4 == 0, "Mutex create error %d", v4);
  *(_WORD *)(a1 + 248) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  turi::sarray<turi::flexible_type>::operator=(a1, a2);
  return a1;
}

{
  uint64_t v4;

  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  int v4 = turi::sarray<turi::flexible_type>::sarray(a1);
  turi::sarray<turi::flexible_type>::operator=(v4, a2);
  return a1;
}

void sub_224051C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  turi::mutex::~mutex(v4);
  if (*(char *)(v3 + 175) < 0) {
    operator delete(*v5);
  }
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"writing", 7);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"false", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 460, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224051E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"other.writing", 13);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"false", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 461, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224052090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index_info.version", 18);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.index_info.version", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 467, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224052324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)const::{lambda(void)#4}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", 101);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  int v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"index_info.block_size", 21);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"other.index_info.block_size", 27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    long long v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "operator()", 468, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  int v13 = v16;
  turi::sarray<turi::flexible_type>::append(turi::sarray<turi::flexible_type> const&)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240525B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::try_compact(uint64_t a1)
{
  if (turi::SFRAME_COMPACTION_THRESHOLD)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3) > turi::SFRAME_COMPACTION_THRESHOLD) {
      turi::sarray_compact<turi::flexible_type>(a1, turi::SFRAME_COMPACTION_THRESHOLD);
    }
  }
}

void *std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::insert(uint64_t *a1, void *a2, void *a3)
{
  int v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  uint64_t v9 = v8 >> 4;
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v7;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v41 = a1 + 2;
    if (v18)
    {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)(a1 + 2), v18);
      uint64_t v21 = v20;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v21 = 0;
    }
    long long v23 = (long long *)&v19[16 * v9];
    uint64_t v38 = v19;
    *(void *)&long long v39 = v23;
    *((void *)&v39 + 1) = v23;
    uint64_t v40 = &v19[16 * v21];
    if (v9 == v21)
    {
      if (v8 < 1)
      {
        if ((void *)v7 == v4) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v8 >> 3;
        }
        uint64_t v45 = v11;
        unsigned int v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v11, v25);
        uint64_t v28 = v39;
        uint64_t v29 = *((void *)&v39 + 1) - v39;
        if (*((void *)&v39 + 1) == (void)v39)
        {
          int64x2_t v34 = vdupq_n_s64(v39);
          unint64_t v31 = (unint64_t)&v26[16 * (v25 >> 2)];
        }
        else
        {
          uint64_t v30 = v29 >> 4;
          unint64_t v31 = (unint64_t)&v26[16 * (v25 >> 2) + (v29 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v32 = 16 * v30;
          unsigned int v33 = &v26[16 * (v25 >> 2)];
          do
          {
            *(_OWORD *)unsigned int v33 = *(_OWORD *)v28;
            v33 += 16;
            *(void *)uint64_t v28 = 0;
            *(void *)(v28 + 8) = 0;
            v28 += 16;
            v32 -= 16;
          }
          while (v32);
          int64x2_t v34 = (int64x2_t)v39;
        }
        long long v35 = v40;
        uint64_t v42 = v38;
        uint64_t v38 = v26;
        *(void *)&long long v39 = &v26[16 * (v25 >> 2)];
        int64x2_t v43 = v34;
        *((void *)&v39 + 1) = v31;
        uint64_t v40 = &v26[16 * v27];
        double v44 = v35;
        std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v42);
        long long v23 = (long long *)*((void *)&v39 + 1);
      }
      else
      {
        if (v9 >= -1) {
          uint64_t v24 = v9 + 1;
        }
        else {
          uint64_t v24 = v9 + 2;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *,std::shared_ptr<turi::sframe_rows> *>((uint64_t)&v42, v23, v23, (uint64_t)&v23[-(v24 >> 1)]);
        *(void *)&long long v39 = v39 - 16 * (v24 >> 1);
        *((void *)&v39 + 1) = v23;
      }
    }
    *(void *)long long v23 = *a3;
    uint64_t v36 = a3[1];
    *((void *)v23 + 1) = v36;
    if (v36)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      long long v23 = (long long *)*((void *)&v39 + 1);
    }
    *((void *)&v39 + 1) = v23 + 1;
    int v4 = (void *)std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__swap_out_circular_buffer(a1, &v38, v4);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v38);
  }
  else if (a2 == (void *)v6)
  {
    long long v22 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((void *)&v22 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = (uint64_t)(a2 + 2);
  }
  else
  {
    std::vector<std::shared_ptr<turi::query_eval::node_info>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    if (v4 <= a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    *int v4 = v13;
    uint64_t v14 = v7 + 16 * v9;
    char v15 = *(std::__shared_weak_count **)(v14 + 8);
    *(void *)(v14 + 8) = v12;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  return v4;
}

void sub_224052970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::vector<std::shared_ptr<turi::fileio::file_ownership_handle>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::reverse_iterator<std::shared_ptr<turi::fileio::file_ownership_handle>*>,std::reverse_iterator<std::shared_ptr<turi::fileio::file_ownership_handle>*>,std::reverse_iterator<std::shared_ptr<turi::fileio::file_ownership_handle>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*,std::shared_ptr<turi::fileio::file_ownership_handle>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  int v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

void turi::sarray_compact<turi::flexible_type>(uint64_t a1, unint64_t a2)
{
  turi::sarray_fast_compact<turi::flexible_type>(a1);
  turi::index_file_information::index_file_information(v15, (const turi::index_file_information *)(a1 + 8));
  uint64_t v4 = v20[1] - v20[0];
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v21, v21[1]);
  long long v22 = (void **)v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  uint64_t v5 = v4 >> 3;
  if (v17 < 0) {
    operator delete(v16);
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * v5;
  if (SHIBYTE(v15[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15[0].__r_.__value_.__l.__data_);
  }
  if (v6 > a2)
  {
    char v7 = (cppipc *)global_logger();
    if (*((int *)v7 + 169) <= 2)
    {
      if (cppipc::must_cancel(v7)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v8 = (file_logger *)global_logger();
      started = file_logger::start_stream(v8, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "sarray_compact", 127, 1);
      uint64_t v10 = pthread_getspecific(*((void *)started + 74));
      if (v10 && *((unsigned char *)v10 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Slow compaction triggered because fast compact did not achieve target", 69);
      }
      char v7 = (cppipc *)pthread_getspecific(*((void *)started + 74));
      if (v7)
      {
        if (*((unsigned char *)v7 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*((void *)v7 + 2) - 24) + 16));
          uint64_t v11 = std::locale::use_facet((const std::locale *)v15, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
          std::locale::~locale((std::locale *)v15);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    unint64_t v12 = turi::thread::cpu_count(v7);
    if (v12 >= a2) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = v12;
    }
    turi::sarray<turi::flexible_type>::clone(a1, v13, (uint64_t *)v15);
  }
}

void sub_224052CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11)
{
}

uint64_t turi::sarray_fast_compact<turi::flexible_type>(uint64_t a1)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  turi::index_file_information::index_file_information(&v65, (const turi::index_file_information *)(a1 + 8));
  uint64_t v1 = (turi::v2_block_impl::block_manager *)turi::index_file_information::index_file_information(&v55, (const turi::index_file_information *)&v65);
  uint64_t v2 = v61;
  uint64_t v3 = v62;
  unsigned int v59 = (char *)__p;
  while (v3 != v2)
  {
    if (SHIBYTE(v3[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v3[-1].__r_.__value_.__l.__data_);
    }
    --v3;
  }
  uint64_t v62 = v2;
  memset(v54, 0, sizeof(v54));
  uint64_t v4 = v70;
  if (v71 != v70)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      instance = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::get_instance(v1);
      uint64_t v10 = (long long *)(v4 + 24 * v5);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v11 = *v10;
        v73.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v11;
      }
      unint64_t v12 = turi::v2_block_impl::block_manager::open_column((uint64_t)instance, (uint64_t)&v73);
      unint64_t v14 = v13;
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      char v15 = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::num_blocks_in_column(instance, v12, v14);
      unint64_t v16 = v68;
      if ((unint64_t)v15 < turi::FAST_COMPACT_BLOCKS_IN_SMALL_SEGMENT)
      {
        uint64_t v17 = v70;
        if (v5 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 3))
        {
          uint64_t v18 = *((void *)v68 + v5);
          uint64_t v19 = v6;
          unint64_t v20 = 1;
          do
          {
            uint64_t v21 = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::get_instance(v15);
            long long v22 = (long long *)(v17 + v19);
            if (*(char *)(v17 + v19 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(v17 + v19), *(void *)(v17 + v19 + 8));
            }
            else
            {
              long long v23 = *v22;
              v73.__r_.__value_.__r.__words[2] = *((void *)v22 + 2);
              *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v23;
            }
            unint64_t v24 = turi::v2_block_impl::block_manager::open_column((uint64_t)v21, (uint64_t)&v73);
            unint64_t v26 = v25;
            if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v73.__r_.__value_.__l.__data_);
            }
            char v15 = (turi::v2_block_impl::block_manager *)turi::v2_block_impl::block_manager::num_blocks_in_column(v21, v24, v26);
            if ((unint64_t)v15 >= 2) {
              break;
            }
            uint64_t v17 = v70;
            v18 += *(void *)((char *)v68 + 8 * v20++ + v7);
            v19 += 24;
          }
          while (v5 + v20 < 0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 3));
          if (v20 > 1)
          {
            uint64_t v41 = (int *)global_logger();
            if (v41[169] <= 2)
            {
              if (cppipc::must_cancel((cppipc *)v41)) {
                log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
              }
              uint64_t v42 = (file_logger *)global_logger();
              started = file_logger::start_stream(v42, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "sarray_fast_compact", 83, 1);
              double v44 = pthread_getspecific(*((void *)started + 74));
              if (v44 && *((unsigned char *)v44 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44 + 2, (uint64_t)"Compacting range of ", 20);
              }
              uint64_t v45 = file_logger::operator<<<unsigned long>((uint64_t)started);
              int64_t v46 = pthread_getspecific(*(void *)(v45 + 592));
              if (v46 && *((unsigned char *)v46 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46 + 2, (uint64_t)" blocks, ", 9);
              }
              uint64_t v47 = file_logger::operator<<<unsigned long>(v45);
              unint64_t v48 = pthread_getspecific(*(void *)(v47 + 592));
              if (v48 && *((unsigned char *)v48 + 280)) {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48 + 2, (uint64_t)" rows", 5);
              }
              uint64_t v49 = pthread_getspecific(*(void *)(v47 + 592));
              if (v49)
              {
                if (*((unsigned char *)v49 + 280))
                {
                  std::ios_base::getloc((const std::ios_base *)((char *)v49 + *(void *)(v49[2] - 24) + 16));
                  uint64_t v50 = std::locale::use_facet((const std::locale *)&v73, MEMORY[0x263F8C108]);
                  ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
                  std::locale::~locale((std::locale *)&v73);
                  std::ostream::put();
                  std::ostream::flush();
                  file_logger::stream_flush((file_logger *)v47);
                  if (*(_DWORD *)(v47 + 600) == 7)
                  {
                    __print_back_trace();
                    exception = __cxa_allocate_exception(8uLL);
                    void *exception = "LOG_FATAL encountered";
                    __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
                  }
                }
              }
            }
            _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v53);
            turi::sarray<turi::flexible_type>::open_for_write(v53);
          }
          unint64_t v16 = v68;
        }
      }
      uint64_t v27 = v16[v5];
      uint64_t v28 = v59;
      if (v59 >= v60)
      {
        uint64_t v30 = (char *)__p;
        uint64_t v31 = (v59 - (unsigned char *)__p) >> 3;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v33 = v60 - (unsigned char *)__p;
        if ((v60 - (unsigned char *)__p) >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          long long v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v60, v34);
          uint64_t v30 = (char *)__p;
          uint64_t v28 = v59;
        }
        else
        {
          long long v35 = 0;
        }
        uint64_t v36 = &v35[8 * v31];
        *(void *)uint64_t v36 = v16[v5];
        uint64_t v29 = v36 + 8;
        while (v28 != v30)
        {
          uint64_t v37 = *((void *)v28 - 1);
          v28 -= 8;
          *((void *)v36 - 1) = v37;
          v36 -= 8;
        }
        std::string __p = v36;
        unsigned int v59 = v29;
        uint64_t v60 = &v35[8 * v34];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        *(void *)unsigned int v59 = v27;
        uint64_t v29 = v28 + 8;
      }
      unsigned int v59 = v29;
      uint64_t v38 = v70 + 24 * v5;
      long long v39 = v62;
      if ((unint64_t)v62 >= v63)
      {
        uint64_t v1 = (turi::v2_block_impl::block_manager *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v61, (long long *)v38);
      }
      else
      {
        if (*(char *)(v38 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v62, *(const std::string::value_type **)v38, *(void *)(v38 + 8));
        }
        else
        {
          long long v40 = *(_OWORD *)v38;
          v62->__r_.__value_.__r.__words[2] = *(void *)(v38 + 16);
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        }
        uint64_t v1 = (turi::v2_block_impl::block_manager *)&v39[1];
      }
      v8 += v27;
      uint64_t v62 = (std::string *)v1;
      ++v5;
      uint64_t v4 = v70;
      v6 += 24;
      v7 += 8;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v71 - v70) >> 3));
  }
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v64, v64[1]);
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  if (__p)
  {
    unsigned int v59 = (char *)__p;
    operator delete(__p);
  }
  if (v57 < 0) {
    operator delete(v56);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v72, v72[1]);
  v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  if (v68)
  {
    unint64_t v69 = v68;
    operator delete(v68);
  }
  if (v67 < 0) {
    operator delete(v66);
  }
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v65.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_224053884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,char a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *__p,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  turi::index_file_information::~index_file_information((turi::index_file_information *)&STACK[0x260]);
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  STACK[0x230] = (unint64_t)&a40;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a64, (void *)a65);
  STACK[0x230] = a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x230]);
  if (__p)
  {
    a59 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&STACK[0x218], (void *)STACK[0x220]);
  a43 = &STACK[0x200];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  if (a75)
  {
    a76 = (uint64_t)a75;
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a67);
  }
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::clone(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!a2) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi6sarrayINS1_13flexible_typeEEENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a3);
  turi::sarray<turi::flexible_type>::open_for_write(*a3);
}

void sub_224053B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  unint64_t v14 = *(std::__shared_weak_count **)(v12 + 8);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"new_sarray_index.segment_files.size()", 37);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "operator()", 91, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  BOOL turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224053D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"new_sarray_index.segment_sizes[0]", 33);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"runlength_in_rows", 17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  long long v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "operator()", 92, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  BOOL turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224054014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_224054220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray<turi::flexible_type>::open_for_read(uint64_t a1, uint64_t a2)
{
  assert_msg(*(unsigned char *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 48) = v4;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 48));
  if (a1 + 8 != a2)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(a1 + 80), *(char **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 104), *(std::string **)(a2 + 96), *(long long **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 128), *(long long **)(a2 + 120), (long long *)(a2 + 128));
  }
  turi::sarray<turi::flexible_type>::keep_array_file_ref((std::__split_buffer<std::string>::pointer)a1);
  *(_WORD *)(a1 + 248) = 1;
  if (!*(_DWORD *)(a1 + 32))
  {
    unint64_t v5 = (int *)global_logger();
    if (v5[169] <= 4)
    {
      if (cppipc::must_cancel((cppipc *)v5)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      unint64_t v6 = (file_logger *)global_logger();
      started = (pthread_key_t *)file_logger::start_stream(v6, 4, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sarray.hpp", "open_for_read", 241, 1);
      uint64_t v8 = pthread_getspecific(started[74]);
      if (v8 && *((unsigned char *)v8 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8 + 2, (uint64_t)"Version 0 file format has been deprecated. ", 43);
      }
      uint64_t v9 = pthread_getspecific(started[74]);
      if (v9 && *((unsigned char *)v9 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9 + 2, (uint64_t)"Operations may not work as expected, or will be slow.", 53);
      }
      uint64_t v10 = pthread_getspecific(started[74]);
      if (v10 && *((unsigned char *)v10 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10 + 2, (uint64_t)"Please re-save the SFrame/SArray to update it to ", 49);
      }
      unint64_t v11 = pthread_getspecific(started[74]);
      if (v11 && *((unsigned char *)v11 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"the latest version which has substantial ", 41);
      }
      uint64_t v12 = pthread_getspecific(started[74]);
      if (v12 && *((unsigned char *)v12 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12 + 2, (uint64_t)"performance optimizations\n", 26);
        file_logger::stream_flush((file_logger *)started);
      }
    }
  }
}

void turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"final_array.size()", 18);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  unint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"column.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "operator()", 116, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  BOOL turi::sarray_fast_compact<turi::flexible_type>(turi::sarray<turi::flexible_type> &)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240545D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::anonymous namespace'::compact_rows<turi::flexible_type>(turi::sarray<turi::flexible_type>&,unsigned long,unsigned long)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", 114);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"read_ok", 7);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    unint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/sframe_data/sframe_compact_impl.hpp", "operator()", 36, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
}

void sub_2240547D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void *turi::sframe_function_output_iterator<turi::flexible_type,std::function<void ()(turi::flexible_type const&)>,std::function<void ()(turi::flexible_type&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(void *a1)
{
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](a1);
}

void sub_2240549CC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

turi::thread_pool *turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(turi::thread_pool *a1, unint64_t a2, void ***a3)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v15 = *MEMORY[0x263EF8340];
  instance = (turi::thread_pool *)turi::thread_pool::get_instance(a1);
  char v7 = (turi::thread *)turi::thread_pool::size(instance);
  uint64_t result = (turi::thread_pool *)turi::thread::get_tls_data(v7);
  if (*((unsigned char *)result + 8)) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (unint64_t)v7 > 1;
  }
  if (v9)
  {
    uint64_t v10 = (turi::thread_pool *)turi::thread_pool::get_instance(result);
    turi::parallel_task_queue::parallel_task_queue((turi::parallel_task_queue *)v14, v10);
    double v11 = (double)(a2 - v5) / (double)(unint64_t)v7;
    unint64_t v12 = (unint64_t)((double)v5 + v11 * (double)1uLL);
    if (v7 == (turi::thread *)1) {
      unint64_t v12 = a2;
    }
    v13[2] = (unint64_t)((double)v5 + v11 * (double)0);
    void v13[3] = v12;
    v13[0] = (uint64_t)boost::function0<void>::assign_to<void turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>(turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1})::stored_vtable
           + 1;
    v13[1] = (uint64_t)a3;
    turi::parallel_task_queue::launch((uint64_t)v14, v13);
  }
  if (a2 > v5)
  {
    do
    {
      uint64_t result = (turi::thread_pool *)turi::sarray<turi::flexible_type>::clone(unsigned long)const::{lambda(unsigned long)#1}::operator()(a3);
      ++v5;
    }
    while (a2 != v5);
  }
  return result;
}

void sub_224054B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  turi::parallel_task_queue::~parallel_task_queue((turi::parallel_task_queue *)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray<turi::flexible_type>::clone(unsigned long)const::{lambda(unsigned long)#1}::operator()(void ***a1)
{
  v9[4] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(***a1 + 32))(v8);
  (*(void (**)(void *__return_ptr))(***a1 + 40))(v7);
  (*(void (**)(void *__return_ptr))(**a1[1] + 32))(v3);
  while (v8[0] != v7[0] || v8[1] != v7[1] || v9[2] != v7[4])
  {
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v9);
    turi::sarray_iterator<turi::flexible_type>::operator++((uint64_t)v8);
  }
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<void ()(turi::flexible_type &&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<void ()(turi::flexible_type const&)>::~__value_func[abi:ne180100](v3);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v7);
  return turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)v8);
}

void sub_224054D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator((uint64_t)va);
  turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(v14 - 72);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_iterator<turi::flexible_type>::operator++(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  if (v2[11] >= (unint64_t)v2[9])
  {
    *(void *)(a1 + 32) = *(void *)(a1 + 40);
    turi::sarray_reader_buffer<turi::flexible_type>::clear(v2);
  }
  else
  {
    uint64_t v3 = turi::sarray_reader_buffer<turi::flexible_type>::next(v2);
    uint64_t v4 = (atomic_ullong *volatile *)(a1 + 16);
    if (v3 != a1 + 16)
    {
      uint64_t v5 = v3;
      switch(*(unsigned char *)(a1 + 28))
      {
        case 2:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v6 = *v4;
            if (!*v4) {
              goto LABEL_30;
            }
            if (*((char *)v6 + 31) < 0) {
              operator delete((void *)v6[1]);
            }
            char v7 = v6;
            uint64_t v8 = 0x1012C404EF22A49;
            goto LABEL_29;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v9 = *v4;
            if (!*v4) {
              goto LABEL_30;
            }
            uint64_t v10 = (void *)v9[1];
            if (v10)
            {
              unint64_t v9[2] = (atomic_ullong)v10;
              operator delete(v10);
            }
            char v7 = v9;
            uint64_t v8 = 0x1080C409938AC02;
            goto LABEL_29;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v11 = *v4;
            if (!*v4) {
              goto LABEL_30;
            }
            uint64_t v16 = (void **)(v11 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v16);
            goto LABEL_21;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v11 = *v4;
            if (!*v4) {
              goto LABEL_30;
            }
            uint64_t v16 = (void **)(v11 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v16);
LABEL_21:
            char v7 = v11;
            uint64_t v8 = 0x1020C405E66F15BLL;
            goto LABEL_29;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v12 = *v4;
            if (!*v4) {
              goto LABEL_30;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v12 + 2);
            char v7 = v12;
            unsigned int v13 = -235920773;
            goto LABEL_28;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (*v4)
            {
              char v7 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v4);
              unsigned int v13 = 2071181815;
LABEL_28:
              uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_29:
              MEMORY[0x22A614FA0](v7, v8);
            }
LABEL_30:
            *uint64_t v4 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v14 = *(atomic_ullong **)v5;
      *(void *)(a1 + 21) = *(void *)(v5 + 5);
      *uint64_t v4 = v14;
      *(unsigned char *)(a1 + 28) = *(unsigned char *)(v5 + 12);
      *(unsigned char *)(v5 + 12) = 0;
    }
    ++*(void *)(a1 + 32);
  }
  return a1;
}

uint64_t turi::sarray_iterator<turi::flexible_type>::~sarray_iterator(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 28))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = *(void **)(a1 + 16);
        if (v5)
        {
          atomic_ullong *volatile v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        if (v7)
        {
          uint64_t v15 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        if (v7)
        {
          uint64_t v15 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void **)(a1 + 16);
        if (v10)
        {
          atomic_ullong *volatile v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          atomic_ullong *volatile v12 = (void *)v10[3];
          if (v12)
          {
            v10[4] = v12;
            operator delete(v12);
          }
          unsigned int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  return a1;
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1} const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000002246D0D89 & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)(0x80000002246D0D89 & 0x7FFFFFFFFFFFFFFFLL)),
            !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1}>(unsigned long,unsigned long,turi::sarray<turi::flexible_type>::clone(unsigned long)::{lambda(unsigned long)#1} const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    uint64_t v2 = result;
    do
    {
      uint64_t result = turi::sarray<turi::flexible_type>::clone(unsigned long)const::{lambda(unsigned long)#1}::operator()(*(void ****)v2);
      ++v1;
    }
    while (v1 < *(void *)(v2 + 16));
  }
  return result;
}

void turi::any::any<std::shared_ptr<turi::sarray<turi::flexible_type>>>()
{
}

void *std::allocate_shared[abi:ne180100]<turi::sarray<turi::flexible_type>,std::allocator<turi::sarray<turi::flexible_type>>,turi::sarray<turi::flexible_type>&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x130uLL);
  uint64_t result = std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::sarray<turi::flexible_type>&,std::allocator<turi::sarray<turi::flexible_type>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_224055394(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<turi::sarray<turi::flexible_type>>::__shared_ptr_emplace[abi:ne180100]<turi::sarray<turi::flexible_type>&,std::allocator<turi::sarray<turi::flexible_type>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D759AA8;
  turi::sarray<turi::flexible_type>::sarray((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_2240553F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_projects>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_projects>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_merge_projects>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_merge_projects::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project1(project2(a)) -> project3(a)");
}

uint64_t turi::query_eval::opt_merge_projects::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *(void *)(*a3)[5];
  if (*(_DWORD *)(v3 + 16) != 4) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  uint64_t v5 = *(void *)turi::query_eval::node_info::p((uint64_t *)v3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  atomic_ullong *volatile v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  uint64_t v7 = *(void *)turi::query_eval::node_info::p(v6, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v8 = turi::query_eval::node_info::num_columns(**(turi::query_eval::node_info ***)(*(void *)(*a3)[5] + 40));
  unint64_t v9 = (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4;
  if (v8 > v9 && (uint64_t)(*(void *)(v7 + 16) - *(void *)(v7 + 8)) >> 4 > v9) {
    return 0;
  }
  uint64_t v60 = 0;
  int v61 = 0;
  unsigned int v59 = 0;
  atomic_ullong *volatile v11 = *(unsigned char **)(v7 + 8);
  atomic_ullong *volatile v12 = *(unsigned char **)(v7 + 16);
  if (v11 == v12)
  {
LABEL_84:
    int v52 = **(uint64_t ***)(*(void *)(*a3)[5] + 40);
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    v58[0] = v54;
    v58[1] = v53;
    if (v53) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
    }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v58, (uint64_t **)&v59);
  }
  while (2)
  {
    uint64_t v13 = 0;
    switch(v11[12])
    {
      case 0:
        uint64_t v13 = *(void *)v11;
        goto LABEL_35;
      case 1:
        uint64_t v13 = (uint64_t)*(double *)v11;
        goto LABEL_35;
      case 2:
        uint64_t v15 = *(void *)v11;
        uint64_t v16 = (char **)(*(void *)v11 + 8);
        __idx[0] = 0;
        long long v17 = (char *)v16;
        if (*(char *)(v15 + 31) < 0) {
          long long v17 = *v16;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v17);
        uint64_t v13 = std::stoll(&__p, __idx, 10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (*(char *)(v15 + 31) < 0) {
          uint64_t v18 = *(void *)(v15 + 16);
        }
        else {
          uint64_t v18 = *(unsigned __int8 *)(v15 + 31);
        }
        if (__idx[0] != v18)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          uint64_t v56 = std::string::append(&v71, " cannot be interpreted as an integer");
          long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_35;
      case 3:
        uint64_t v14 = *(void *)v11;
        memset(&__p, 0, sizeof(__p));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v14 + 8), *(void *)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_34;
      case 4:
        uint64_t v19 = *(void *)v11;
        memset(&__p, 0, sizeof(__p));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
        goto LABEL_34;
      case 5:
        uint64_t v20 = *(void *)v11;
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v20 + 8), *(uint64_t **)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
        goto LABEL_34;
      case 6:
        uint64_t v13 = (uint64_t)(*(void *)v11 << 8) >> 8;
        goto LABEL_35;
      case 7:
        goto LABEL_35;
      case 8:
        uint64_t v21 = *(void *)v11;
        long long v22 = *(atomic_uint **)(*(void *)v11 + 16);
        uint64_t v62 = *(void *)(*(void *)v11 + 8);
        unint64_t v63 = v22;
        if (v22) {
          atomic_fetch_add_explicit(v22 + 2, 1u, memory_order_relaxed);
        }
        long long v23 = *(_OWORD *)(v21 + 24);
        long long v24 = *(_OWORD *)(v21 + 56);
        long long v65 = *(_OWORD *)(v21 + 40);
        long long v66 = v24;
        long long v64 = v23;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count(&v63);
        goto LABEL_34;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v11 + 8);
        turi::flexible_type_fail(0);
        if (v69)
        {
          uint64_t v70 = v69;
          operator delete(v69);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v68 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
LABEL_34:
        uint64_t v13 = 0;
LABEL_35:
        uint64_t v25 = *(void *)(v5 + 8) + 16 * v13;
        uint64_t v26 = 0;
        switch(*(unsigned char *)(v25 + 12))
        {
          case 0:
            uint64_t v26 = *(void *)v25;
            goto LABEL_59;
          case 1:
            uint64_t v26 = (uint64_t)*(double *)v25;
            goto LABEL_59;
          case 2:
            uint64_t v28 = *(void *)v25;
            uint64_t v29 = (char **)(*(void *)v25 + 8);
            __idx[0] = 0;
            uint64_t v30 = (char *)v29;
            if (*(char *)(v28 + 31) < 0) {
              uint64_t v30 = *v29;
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v30);
            uint64_t v26 = std::stoll(&__p, __idx, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (*(char *)(v28 + 31) < 0) {
              uint64_t v31 = *(void *)(v28 + 16);
            }
            else {
              uint64_t v31 = *(unsigned __int8 *)(v28 + 31);
            }
            if (__idx[0] != v31)
            {
              unint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v49 = std::string::append(&v71, " cannot be interpreted as an integer");
              long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
              v49->__r_.__value_.__l.__size_ = 0;
              v49->__r_.__value_.__r.__words[2] = 0;
              v49->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v48, &__p);
              __cxa_throw(v48, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_59;
          case 3:
            uint64_t v27 = *(void *)v25;
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v27 + 8), *(void *)(v27 + 16), (uint64_t)(*(void *)(v27 + 16) - *(void *)(v27 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_58;
          case 4:
            uint64_t v32 = *(void *)v25;
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v32 + 8), *(uint64_t **)(v32 + 16), (uint64_t)(*(void *)(v32 + 16) - *(void *)(v32 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
            goto LABEL_58;
          case 5:
            uint64_t v33 = *(void *)v25;
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v33 + 8), *(uint64_t **)(v33 + 16), (uint64_t)(*(void *)(v33 + 16) - *(void *)(v33 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
            goto LABEL_58;
          case 6:
            uint64_t v26 = (uint64_t)(*(void *)v25 << 8) >> 8;
            goto LABEL_59;
          case 7:
            goto LABEL_59;
          case 8:
            uint64_t v34 = *(void *)v25;
            long long v35 = *(atomic_uint **)(v34 + 16);
            uint64_t v62 = *(void *)(v34 + 8);
            unint64_t v63 = v35;
            if (v35) {
              atomic_fetch_add_explicit(v35 + 2, 1u, memory_order_relaxed);
            }
            long long v36 = *(_OWORD *)(v34 + 24);
            long long v37 = *(_OWORD *)(v34 + 56);
            long long v65 = *(_OWORD *)(v34 + 40);
            long long v66 = v37;
            long long v64 = v36;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v63);
            goto LABEL_58;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v25 + 8);
            turi::flexible_type_fail(0);
            if (v69)
            {
              uint64_t v70 = v69;
              operator delete(v69);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v68 = __p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
LABEL_58:
            uint64_t v26 = 0;
LABEL_59:
            uint64_t v38 = v60;
            if (v60 >= v61)
            {
              long long v40 = (uint64_t *)v59;
              uint64_t v41 = ((char *)v60 - (unsigned char *)v59) >> 3;
              unint64_t v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 61) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v43 = (char *)v61 - (unsigned char *)v59;
              if (((char *)v61 - (unsigned char *)v59) >> 2 > v42) {
                unint64_t v42 = v43 >> 2;
              }
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v44 = v42;
              }
              if (v44)
              {
                uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v61, v44);
                long long v40 = (uint64_t *)v59;
                uint64_t v38 = v60;
              }
              else
              {
                uint64_t v45 = 0;
              }
              int64_t v46 = (uint64_t *)&v45[8 * v41];
              *int64_t v46 = v26;
              long long v39 = v46 + 1;
              while (v38 != v40)
              {
                uint64_t v47 = *--v38;
                *--int64_t v46 = v47;
              }
              unsigned int v59 = v46;
              uint64_t v60 = v39;
              int v61 = (uint64_t *)&v45[8 * v44];
              if (v40) {
                operator delete(v40);
              }
            }
            else
            {
              uint64_t *v60 = v26;
              long long v39 = v38 + 1;
            }
            uint64_t v60 = v39;
            v11 += 16;
            if (v11 == v12) {
              goto LABEL_84;
            }
            continue;
          default:
            goto LABEL_88;
        }
      default:
LABEL_88:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
    return result;
  }
}

void sub_224055C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v36 - 105) < 0)
  {
    operator delete(*(void **)(v36 - 128));
    if ((v35 & 1) == 0)
    {
LABEL_8:
      if (a18) {
        operator delete(a18);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_project_merge>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_project_merge>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_project_merge>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_union_project_merge::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(project1(a), ..., project2(a)) -> union(project3(a...), ...)");
}

uint64_t turi::query_eval::opt_union_project_merge::apply_transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a3 + 40);
  uint64_t v4 = *(void *)(*(void *)a3 + 48);
  if (v3 != v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(*(void *)a3 + 40);
    while (*(_DWORD *)(*(void *)v6 + 16) != 4 || (unint64_t)++v5 <= 1)
    {
      v6 += 16;
      if (v6 == v4) {
        return 0;
      }
    }
    __p[1] = 0;
    v144[0] = 0;
    __p[0] = &__p[1];
LABEL_8:
    if (*(_DWORD *)(*(void *)v3 + 16) != 4) {
      goto LABEL_23;
    }
    uint64_t v7 = *(unint64_t **)(*(void *)v3 + 40);
    unint64_t v9 = *v7;
    unint64_t v8 = (std::__shared_weak_count *)v7[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = __p[1];
    if (!__p[1])
    {
LABEL_16:
      char v12 = 1;
      if (!v8) {
        goto LABEL_18;
      }
LABEL_17:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      goto LABEL_18;
    }
    while (1)
    {
      unint64_t v11 = v10[4];
      if (v9 >= v11)
      {
        if (v11 >= v9)
        {
          char v12 = 0;
          if (v8) {
            goto LABEL_17;
          }
LABEL_18:
          if (v12)
          {
            uint64_t v13 = *(std::__shared_weak_count ***)(*(void *)v3 + 40);
            uint64_t v15 = *v13;
            uint64_t v14 = v13[1];
            uint64_t v148 = v15;
            std::string v149 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::__tree<std::shared_ptr<turi::query_eval::node_info const>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::node_info const>,std::shared_ptr<turi::query_eval::node_info const>>((uint64_t **)__p, (unint64_t *)&v148, (uint64_t)&v148);
            if (v149) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v149);
            }
LABEL_23:
            v3 += 16;
            if (v3 == v4)
            {
              std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)__p, (void *)__p[1]);
              return 0;
            }
            goto LABEL_8;
          }
          std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy((uint64_t)__p, (void *)__p[1]);
          uint64_t v148 = 0;
          std::string v149 = 0;
          unint64_t v150 = 0;
          std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::reserve((uint64_t *)&v148, (uint64_t)(*(void *)(*(void *)a3 + 48) - *(void *)(*(void *)a3 + 40)) >> 4);
          v147[0] = 0;
          v147[1] = 0;
          uint64_t v146 = v147;
          uint64_t v17 = *(void *)(*(void *)a3 + 40);
          uint64_t v132 = *(void *)(*(void *)a3 + 48);
          if (v17 == v132)
          {
LABEL_151:
            uint64_t v140 = 0;
            unint64_t v141 = 0;
            uint64_t v142 = 0;
            std::vector<std::shared_ptr<turi::query_eval::planner_node>>::reserve((uint64_t *)&v140, ((char *)v149 - (char *)v148) >> 6);
            unint64_t v111 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)a3);
            __p[0] = (void *)-1;
            std::vector<unsigned long>::vector(&v138, v111, __p);
            v112 = v148;
            char v113 = v149;
            if (v148 != v149)
            {
              uint64_t v114 = 0;
              do
              {
                shared_weak_owners = (std::__shared_weak_count_vtbl *)v112[1].__shared_weak_owners_;
                long long v116 = v112[2].__vftable;
                if (shared_weak_owners != v116)
                {
                  unint64_t v117 = v138;
                  do
                  {
                    uint64_t v118 = shared_weak_owners->~__shared_weak_count;
                    shared_weak_owners = (std::__shared_weak_count_vtbl *)((char *)shared_weak_owners + 8);
                    *((void *)v117 + (void)v118) = v114++;
                  }
                  while (shared_weak_owners != v116);
                }
                char v119 = (char *)v112->__shared_weak_owners_;
                uint64_t v120 = v112[1].__vftable;
                if (turi::query_eval::node_info::num_columns((turi::query_eval::node_info *)v112->__vftable) != ((char *)v120 - v119) >> 3)
                {
LABEL_162:
                  std::string::size_type v127 = v112->~__shared_weak_count_0;
                  v136[0] = v112->~__shared_weak_count;
                  v136[1] = v127;
                  if (v127) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)v127 + 1, 1uLL, memory_order_relaxed);
                  }
                  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v136, (uint64_t **)&v112->__shared_weak_owners_);
                }
                std::string::size_type v121 = (void *)v112->__shared_weak_owners_;
                unint64_t v122 = ((char *)v112[1].__vftable - (char *)v121) >> 3;
                if (v122 <= 1) {
                  unint64_t v122 = 1;
                }
                unint64_t v123 = v122 - 1;
                long long v124 = v121 + 1;
                while (v123)
                {
                  uint64_t v125 = *v124;
                  uint64_t v126 = *(v124 - 1) + 1;
                  --v123;
                  ++v124;
                  if (v126 != v125) {
                    goto LABEL_162;
                  }
                }
                std::vector<std::shared_ptr<turi::query_eval::planner_node>>::push_back[abi:ne180100]((uint64_t *)&v140, (long long *)v112->__vftable);
                v112 = (std::__shared_weak_count *)((char *)v112 + 64);
              }
              while (v112 != v113);
            }
            if ((char *)v141 - (unsigned char *)v140 == 16)
            {
              uint64_t v128 = *(void **)v140;
              uint64_t v129 = (atomic_ullong *)*((void *)v140 + 1);
              if (v129) {
                atomic_fetch_add_explicit(v129 + 1, 1uLL, memory_order_relaxed);
              }
            }
            else
            {
              turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)&v140, __p);
              uint64_t v128 = __p[0];
              uint64_t v129 = (atomic_ullong *)__p[1];
            }
            uint64_t v130 = *(void *)(a3 + 8);
            v135[4] = *(void *)a3;
            v135[5] = v130;
            if (v130) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v130 + 8), 1uLL, memory_order_relaxed);
            }
            v135[0] = v128;
            v135[1] = v129;
            if (v129) {
              atomic_fetch_add_explicit(v129 + 1, 1uLL, memory_order_relaxed);
            }
            turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v135, (uint64_t **)&v138);
          }
          unint64_t v18 = 0;
          while (2)
          {
            uint64_t v19 = *(turi::query_eval::node_info **)v17;
            uint64_t v20 = *(std::__shared_weak_count **)(v17 + 8);
            uint64_t v138 = *(turi::query_eval::node_info **)v17;
            uint64_t v139 = v20;
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v21 = turi::query_eval::node_info::num_columns(v19) + v18;
            long long v22 = v138;
            uint64_t v133 = v17;
            if (*((_DWORD *)v138 + 4) == 4)
            {
              long long v23 = (unint64_t *)*((void *)v138 + 5);
              unint64_t v25 = *v23;
              long long v24 = (std::__shared_weak_count *)v23[1];
              if (v24) {
                atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v26 = (void *)v147[0];
              if (!v147[0]) {
                goto LABEL_44;
              }
              uint64_t v27 = v147;
              do
              {
                uint64_t v28 = v26;
                uint64_t v29 = v27;
                unint64_t v30 = v26[4];
                uint64_t v31 = v26 + 1;
                if (v30 >= v25)
                {
                  uint64_t v31 = v28;
                  uint64_t v27 = v28;
                }
                uint64_t v26 = (void *)*v31;
              }
              while (v26);
              if (v27 == v147) {
                goto LABEL_44;
              }
              if (v30 < v25) {
                uint64_t v28 = v29;
              }
              if (v25 < v28[4]) {
LABEL_44:
              }
                uint64_t v27 = v147;
              if (v24) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v24);
              }
              if (v27 != v147)
              {
                uint64_t v32 = v27[6];
                uint64_t v33 = v148;
                uint64_t v34 = (uint64_t *)v138;
                std::string::basic_string[abi:ne180100]<0>(__p, "indices");
                uint64_t v35 = *(void *)turi::query_eval::node_info::p(v34, (uint64_t)__p);
                if (SHIBYTE(v144[0]) < 0) {
                  operator delete(__p[0]);
                }
                std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)(&v33->__shared_weak_owners_ + 8 * v32), *((char **)&v33[1].__vftable + 8 * v32), *(unsigned char **)(v35 + 8), *(unsigned char **)(v35 + 16), (uint64_t)(*(void *)(v35 + 16) - *(void *)(v35 + 8)) >> 4);
                if (v18 < v21)
                {
                  uint64_t v36 = (char *)v33 + 64 * v32;
                  long long v39 = (char *)*((void *)v36 + 6);
                  uint64_t v38 = (void **)(v36 + 48);
                  long long v37 = v39;
                  long long v40 = (void **)(v38 - 1);
                  uint64_t v41 = v38 + 1;
                  do
                  {
                    if ((unint64_t)v37 >= *v41)
                    {
                      uint64_t v43 = (char *)*v40;
                      uint64_t v44 = (v37 - (unsigned char *)*v40) >> 3;
                      unint64_t v45 = v44 + 1;
                      if ((unint64_t)(v44 + 1) >> 61) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v46 = *v41 - (void)v43;
                      if (v46 >> 2 > v45) {
                        unint64_t v45 = v46 >> 2;
                      }
                      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v47 = v45;
                      }
                      if (v47)
                      {
                        unint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v38 + 1), v47);
                        long long v37 = (char *)*v38;
                        uint64_t v43 = (char *)*v40;
                      }
                      else
                      {
                        unint64_t v48 = 0;
                      }
                      uint64_t v49 = &v48[8 * v44];
                      *(void *)uint64_t v49 = v18;
                      unint64_t v42 = v49 + 8;
                      while (v37 != v43)
                      {
                        uint64_t v50 = *((void *)v37 - 1);
                        v37 -= 8;
                        *((void *)v49 - 1) = v50;
                        v49 -= 8;
                      }
                      *long long v40 = v49;
                      uint64_t *v38 = v42;
                      void *v41 = &v48[8 * v47];
                      if (v43) {
                        operator delete(v43);
                      }
                    }
                    else
                    {
                      *(void *)long long v37 = v18;
                      unint64_t v42 = v37 + 8;
                    }
                    uint64_t *v38 = v42;
                    ++v18;
                    long long v37 = (char *)v42;
                  }
                  while (v18 != v21);
                }
                goto LABEL_148;
              }
              memset(v145, 0, 32);
              *(_OWORD *)std::string __p = 0u;
              *(_OWORD *)unint64_t v144 = 0u;
              uint64_t v58 = (uint64_t *)v138;
              uint64_t v59 = *((void *)v138 + 5);
              int v61 = *(void **)v59;
              uint64_t v60 = *(atomic_ullong **)(v59 + 8);
              if (v60)
              {
                atomic_fetch_add_explicit(v60 + 1, 1uLL, memory_order_relaxed);
                uint64_t v62 = (std::__shared_weak_count *)__p[1];
                __p[0] = v61;
                __p[1] = v60;
                if (v62)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v62);
                  uint64_t v58 = (uint64_t *)v138;
                }
              }
              else
              {
                __p[0] = v61;
                __p[1] = 0;
              }
              std::string::basic_string[abi:ne180100]<0>(&v140, "indices");
              uint64_t v102 = *(void *)turi::query_eval::node_info::p(v58, (uint64_t)&v140);
              if (SHIBYTE(v142) < 0) {
                operator delete(v140);
              }
              std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t **)v144, *(unsigned char **)(v102 + 8), *(unsigned char **)(v102 + 16), (uint64_t)(*(void *)(v102 + 16) - *(void *)(v102 + 8)) >> 4);
              unint64_t v103 = turi::query_eval::node_info::num_columns(v138);
              std::vector<unsigned long>::resize((uint64_t)&v145[1], v103);
              BOOL v104 = v145[1];
              long long v105 = v145[2];
              while (v104 != v105)
                *v104++ = v18++;
              double v107 = v148;
              uint64_t v106 = v149;
              uint64_t v108 = *((void *)v138 + 5);
              uint64_t v110 = *(void **)v108;
              unint64_t v109 = *(std::__shared_weak_count **)(v108 + 8);
              uint64_t v140 = v110;
              unint64_t v141 = v109;
              if (v109) {
                atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(void *)&long long v137 = &v140;
              std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::node_info const>,std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::node_info const>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::node_info const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::node_info const>&&>,std::tuple<>>(&v146, (unint64_t *)&v140, (uint64_t)&std::piecewise_construct, (_OWORD **)&v137)[6] = (uint64_t *)(((char *)v106 - (char *)v107) >> 6);
              if (v141) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v141);
              }
              unint64_t v72 = v149;
              if ((unint64_t)v149 < v150)
              {
LABEL_141:
                v72->std::__shared_count = *(std::__shared_count *)__p;
                __p[0] = 0;
                __p[1] = 0;
                v72->__shared_weak_owners_ = 0;
                v72[1].__vftable = 0;
                v72[1].__shared_owners_ = 0;
                v72[1].__shared_weak_owners_ = 0;
                *(_OWORD *)&v72->__shared_weak_owners_ = *(_OWORD *)v144;
                v72[1].__shared_owners_ = (uint64_t)v145[0];
                v144[0] = 0;
                v144[1] = 0;
                v145[0] = 0;
                v72[2].__vftable = 0;
                v72[2].__shared_owners_ = 0;
                *(_OWORD *)&v72[1].__shared_weak_owners_ = *(_OWORD *)&v145[1];
                v72[2].__shared_owners_ = (uint64_t)v145[3];
                memset(&v145[1], 0, 24);
                std::string v149 = (std::__shared_weak_count *)((char *)v72 + 64);
                goto LABEL_144;
              }
LABEL_142:
              std::string v149 = (std::__shared_weak_count *)std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__push_back_slow_path<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>((uint64_t *)&v148, (uint64_t)__p);
              if (v145[1])
              {
                v145[2] = v145[1];
                operator delete(v145[1]);
              }
LABEL_144:
              if (v144[0])
              {
                v144[1] = v144[0];
                operator delete(v144[0]);
              }
              if (__p[1]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
              }
            }
            else
            {
              uint64_t v51 = (void *)v147[0];
              if (!v147[0]) {
                goto LABEL_80;
              }
              int v52 = v147;
              do
              {
                uint64_t v53 = v51;
                uint64_t v54 = v52;
                unint64_t v55 = v51[4];
                if (v55 >= (unint64_t)v138) {
                  int v52 = v51;
                }
                else {
                  ++v51;
                }
                uint64_t v51 = (void *)*v51;
              }
              while (v51);
              if (v52 == v147) {
                goto LABEL_80;
              }
              if (v55 < (unint64_t)v138) {
                uint64_t v53 = v54;
              }
              if ((unint64_t)v138 < v53[4])
              {
LABEL_80:
                memset(v145, 0, 32);
                *(_OWORD *)std::string __p = 0u;
                *(_OWORD *)unint64_t v144 = 0u;
                uint64_t v56 = v139;
                if (v139)
                {
                  atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
                  long long v57 = (std::__shared_weak_count *)__p[1];
                  __p[0] = v22;
                  __p[1] = v56;
                  if (v57)
                  {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
                    long long v22 = v138;
                  }
                }
                else
                {
                  __p[0] = v138;
                  __p[1] = 0;
                }
                unint64_t v63 = turi::query_eval::node_info::num_columns(v22);
                std::vector<unsigned long>::resize((uint64_t)v144, v63);
                long long v64 = v144[0];
                long long v65 = v144[1];
                if (v144[0] != v144[1])
                {
                  uint64_t v66 = 0;
                  do
                    *v64++ = v66++;
                  while (v64 != v65);
                }
                unint64_t v67 = turi::query_eval::node_info::num_columns(v138);
                std::vector<unsigned long>::resize((uint64_t)&v145[1], v67);
                std::string::size_type v68 = v145[1];
                unint64_t v69 = v145[2];
                while (v68 != v69)
                  *v68++ = v18++;
                std::string v71 = v148;
                uint64_t v70 = v149;
                uint64_t v140 = &v138;
                std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>(&v146, (unint64_t *)&v138, (uint64_t)&std::piecewise_construct, (uint64_t **)&v140)[6] = (uint64_t *)(((char *)v70 - (char *)v71) >> 6);
                unint64_t v72 = v149;
                if ((unint64_t)v149 < v150) {
                  goto LABEL_141;
                }
                goto LABEL_142;
              }
              unint64_t v73 = 0;
              uint64_t v74 = (char *)v148 + 64 * v52[6];
              std::string v134 = (void **)(v74 + 16);
              uint64_t v75 = (unint64_t **)(v74 + 24);
              uint64_t v76 = v74 + 32;
              unsigned int v77 = (void **)(v74 + 40);
              uint64_t v78 = (char **)(v74 + 48);
              uint64_t v79 = v74 + 56;
              while (v73 < turi::query_eval::node_info::num_columns(v22))
              {
                unint64_t v80 = *v75;
                if ((unint64_t)*v75 >= *v76)
                {
                  double v82 = (unint64_t *)*v134;
                  uint64_t v83 = ((char *)v80 - (unsigned char *)*v134) >> 3;
                  unint64_t v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 61) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v85 = *v76 - (void)v82;
                  if (v85 >> 2 > v84) {
                    unint64_t v84 = v85 >> 2;
                  }
                  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v86 = v84;
                  }
                  if (v86)
                  {
                    uint64_t v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v76, v86);
                    unint64_t v80 = *v75;
                    double v82 = (unint64_t *)*v134;
                  }
                  else
                  {
                    uint64_t v87 = 0;
                  }
                  uint64_t v88 = (unint64_t *)&v87[8 * v83];
                  unint64_t *v88 = v73;
                  double v81 = v88 + 1;
                  while (v80 != v82)
                  {
                    unint64_t v89 = *--v80;
                    *--uint64_t v88 = v89;
                  }
                  *std::string v134 = v88;
                  void *v75 = v81;
                  *uint64_t v76 = &v87[8 * v86];
                  if (v82) {
                    operator delete(v82);
                  }
                }
                else
                {
                  *unint64_t v80 = v73;
                  double v81 = v80 + 1;
                }
                unint64_t v90 = v21;
                void *v75 = v81;
                unint64_t v91 = v73 + v18;
                double v92 = *v78;
                if ((unint64_t)*v78 >= *v79)
                {
                  uint64_t v94 = (char *)*v77;
                  uint64_t v95 = (v92 - (unsigned char *)*v77) >> 3;
                  unint64_t v96 = v95 + 1;
                  if ((unint64_t)(v95 + 1) >> 61) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v97 = *v79 - (void)v94;
                  if (v97 >> 2 > v96) {
                    unint64_t v96 = v97 >> 2;
                  }
                  if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v98 = v96;
                  }
                  if (v98)
                  {
                    unsigned int v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v79, v98);
                    double v92 = *v78;
                    uint64_t v94 = (char *)*v77;
                  }
                  else
                  {
                    unsigned int v99 = 0;
                  }
                  long long v100 = &v99[8 * v95];
                  *(void *)long long v100 = v91;
                  uint64_t v93 = v100 + 8;
                  while (v92 != v94)
                  {
                    uint64_t v101 = *((void *)v92 - 1);
                    v92 -= 8;
                    *((void *)v100 - 1) = v101;
                    v100 -= 8;
                  }
                  double *v77 = v100;
                  *uint64_t v78 = v93;
                  *uint64_t v79 = &v99[8 * v98];
                  if (v94) {
                    operator delete(v94);
                  }
                }
                else
                {
                  *(void *)double v92 = v91;
                  uint64_t v93 = v92 + 8;
                }
                *uint64_t v78 = v93;
                ++v73;
                long long v22 = v138;
                unint64_t v21 = v90;
              }
            }
LABEL_148:
            if (v139) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v139);
            }
            uint64_t v17 = v133 + 16;
            unint64_t v18 = v21;
            if (v133 + 16 == v132) {
              goto LABEL_151;
            }
            continue;
          }
        }
        ++v10;
      }
      uint64_t v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_16;
      }
    }
  }
  return 0;
}

void sub_224056A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,void **a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (__p)
  {
    a28 = __p;
    operator delete(__p);
  }
  std::string __p = &a30;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&__p);
  std::__tree<std::shared_ptr<turi::query_eval::execution_node>>::destroy(v41 - 152, *(void **)(v41 - 144));
  *(void *)(v41 - 152) = v41 - 128;
  std::vector<turi::neural_net::labeled_image>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 152));
  _Unwind_Resume(a1);
}

void **std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 64 * v6;
    std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer(v7);
  }
  return result;
}

void sub_224056C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::shared_ptr<turi::query_eval::node_info const>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::node_info const>,std::shared_ptr<turi::query_eval::node_info const>>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 64);
      a3 -= 64;
      *(_OWORD *)(v7 - 64) = v8;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - 32) = *(void *)(a3 + 32);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 8) = *(void *)(a3 + 56);
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 64;
      *((void *)&v14 + 1) -= 64;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>,std::reverse_iterator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info*>>::operator()[abi:ne180100](uint64_t *a1)
{
  unint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100](v3, v1);
      v1 += 8;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 64;
    std::allocator<turi::neural_net::labeled_image>::destroy[abi:ne180100](v4, (void *)(i - 64));
  }
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, char *a2, unsigned char *a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      uint64_t v19 = v12 - (void)a2;
      if (a5 <= (uint64_t)(v12 - (void)a2) >> 3)
      {
        uint64_t v20 = &a3[16 * a5];
        unint64_t v21 = *(char **)(v9 - 8);
      }
      else
      {
        uint64_t v20 = &a3[16 * (v19 >> 3)];
        std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(a1, v20, a4);
        if (v19 < 1) {
          return v5;
        }
        unint64_t v21 = *(char **)(a1 + 8);
      }
      long long v22 = &v5[8 * a5];
      long long v23 = &v21[-8 * a5];
      long long v24 = v21;
      if ((unint64_t)v23 < v12)
      {
        long long v24 = v21;
        do
        {
          uint64_t v25 = *(void *)v23;
          v23 += 8;
          *(void *)long long v24 = v25;
          v24 += 8;
        }
        while ((unint64_t)v23 < v12);
      }
      *(void *)(a1 + 8) = v24;
      if (v21 != v22) {
        memmove(&v21[-8 * ((v21 - v22) >> 3)], v5, v21 - v22);
      }
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,unsigned long *>((uint64_t)&__p, v7, v20, (uint64_t *)v5);
    }
    else
    {
      long long v13 = *(unsigned char **)a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
      if (v14 >> 61) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = (a2 - v13) >> 3;
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v34 = v9;
      if (v17) {
        unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      uint64_t v26 = (uint64_t *)&v18[8 * v15];
      std::string __p = v18;
      uint64_t v31 = v26;
      uint64_t v32 = v26;
      uint64_t v33 = &v18[8 * v17];
      uint64_t v27 = 8 * a5;
      uint64_t v28 = &v26[a5];
      do
      {
        std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(v34, v26++, v7);
        v7 += 16;
        v27 -= 8;
      }
      while (v27);
      uint64_t v32 = v28;
      uint64_t v5 = std::vector<unsigned long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
      if (v32 != v31) {
        uint64_t v32 = (uint64_t *)((char *)v32 + (((char *)v31 - (char *)v32 + 7) & 0xFFFFFFFFFFFFFFF8));
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_224057194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 == a3)
  {
    uint64_t v6 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    uint64_t v5 = a2;
    uint64_t v6 = *(uint64_t **)(a1 + 8);
    do
    {
      std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(a1 + 16, v6, v5);
      v5 += 16;
      ++v6;
    }
    while (v5 != a3);
  }
  *(void *)(a1 + 8) = v6;
}

void sub_224057254(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::allocator<unsigned long>::construct[abi:ne180100]<unsigned long,turi::flexible_type const&>(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  uint64_t v4 = 0;
  switch(a3[12])
  {
    case 0:
      uint64_t v4 = *(void *)a3;
      goto LABEL_25;
    case 1:
      uint64_t v4 = (uint64_t)*(double *)a3;
      goto LABEL_25;
    case 2:
      uint64_t v6 = *(void *)a3;
      uint64_t v7 = (char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      long long v8 = (char *)v7;
      if (*(char *)(v6 + 31) < 0) {
        long long v8 = *v7;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      uint64_t v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v20[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v9 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 31);
      }
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v17 = std::string::append(&v23, " cannot be interpreted as an integer");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v20[0] = (void *)v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v5 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v10 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      goto LABEL_24;
    case 5:
      uint64_t v11 = *(void *)a3;
      __p[1] = 0;
      v20[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      goto LABEL_24;
    case 6:
      uint64_t v4 = (uint64_t)(*(void *)a3 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v12 = *(void *)a3;
      long long v13 = *(atomic_uint **)(*(void *)a3 + 16);
      __p[0] = *(void **)(*(void *)a3 + 8);
      __p[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
      }
      long long v14 = *(_OWORD *)(v12 + 24);
      long long v15 = *(_OWORD *)(v12 + 56);
      long long v21 = *(_OWORD *)(v12 + 40);
      long long v22 = v15;
      *(_OWORD *)uint64_t v20 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v21 + 1))
      {
        *(void *)&long long v22 = *((void *)&v21 + 1);
        operator delete(*((void **)&v21 + 1));
      }
      if (v20[0])
      {
        v20[1] = v20[0];
        operator delete(v20[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v4 = 0;
LABEL_25:
      *a2 = v4;
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_224057514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

unsigned char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,unsigned long *>(uint64_t a1, unsigned char *a2, unsigned char *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    while (2)
    {
      uint64_t v7 = 0;
      switch(v5[12])
      {
        case 0:
          uint64_t v7 = *(void *)v5;
          goto LABEL_26;
        case 1:
          uint64_t v7 = (uint64_t)*(double *)v5;
          goto LABEL_26;
        case 2:
          uint64_t v9 = *(void *)v5;
          uint64_t v10 = (char **)(*(void *)v5 + 8);
          __idx[0] = 0;
          uint64_t v11 = (char *)v10;
          if (*(char *)(v9 + 31) < 0) {
            uint64_t v11 = *v10;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v11);
          uint64_t v7 = std::stoll(&__p, __idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v9 + 31) < 0) {
            uint64_t v12 = *(void *)(v9 + 16);
          }
          else {
            uint64_t v12 = *(unsigned __int8 *)(v9 + 31);
          }
          if (__idx[0] != v12)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            uint64_t v20 = std::string::append(&v31, " cannot be interpreted as an integer");
            long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &__p);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_26;
        case 3:
          uint64_t v8 = *(void *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v8 + 8), *(void *)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_25;
        case 4:
          uint64_t v13 = *(void *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v13 + 8), *(uint64_t **)(v13 + 16), (uint64_t)(*(void *)(v13 + 16) - *(void *)(v13 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
          goto LABEL_25;
        case 5:
          uint64_t v14 = *(void *)v5;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v14 + 8), *(uint64_t **)(v14 + 16), (uint64_t)(*(void *)(v14 + 16) - *(void *)(v14 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
          goto LABEL_25;
        case 6:
          uint64_t v7 = (uint64_t)(*(void *)v5 << 8) >> 8;
          goto LABEL_26;
        case 7:
          goto LABEL_26;
        case 8:
          uint64_t v15 = *(void *)v5;
          uint64_t v16 = *(atomic_uint **)(*(void *)v5 + 16);
          std::string v23 = v16;
          if (v16) {
            atomic_fetch_add_explicit(v16 + 2, 1u, memory_order_relaxed);
          }
          long long v17 = *(_OWORD *)(v15 + 24);
          long long v18 = *(_OWORD *)(v15 + 56);
          long long v25 = *(_OWORD *)(v15 + 40);
          long long v26 = v18;
          long long v24 = v17;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v23);
          goto LABEL_25;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v5 + 8);
          turi::flexible_type_fail(0);
          if (v29)
          {
            unint64_t v30 = v29;
            operator delete(v29);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v28 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
LABEL_25:
          uint64_t v7 = 0;
LABEL_26:
          *a4++ = v7;
          v5 += 16;
          if (v5 != a3) {
            continue;
          }
          uint64_t v5 = a3;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      break;
    }
  }
  return v5;
}

void sub_22405790C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v24 - 97) < 0)
  {
    operator delete(*(void **)(v24 - 120));
    if ((v23 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::vector<unsigned long>::__assign_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t **a1, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = *a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 3)
  {
    unint64_t v12 = a1[1] - v9;
    if (v12 >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,unsigned long *>((uint64_t)&v16, a2, a3, v9);
      a1[1] = v14;
    }
    else
    {
      uint64_t v13 = &a2[16 * v12];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<turi::flexible_type const*,turi::flexible_type const*,unsigned long *>((uint64_t)&v15, a2, v13, v9);
      std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, v13, a3);
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, v11);
    std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, a2, a3);
  }
}

uint64_t **std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>,std::__map_value_compare<std::shared_ptr<turi::query_eval::node_info const>,std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>,std::less<std::shared_ptr<turi::query_eval::node_info const>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::node_info const>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::node_info const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::node_info const>&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x38uLL);
    unint64_t v12 = *a4;
    v11[2] = **a4;
    *unint64_t v12 = 0;
    v12[1] = 0;
    *((void *)v11 + 6) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__push_back_slow_path<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::mutex>>(v7, v9);
  unint64_t v11 = &v10[64 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[64 * v12];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 5) = 0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  std::string v15[2] = v11 + 64;
  std::vector<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer(v15);
  return v13;
}

void sub_224057D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info,std::allocator<turi::query_eval::opt_union_project_merge::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::input_info> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_empty_append>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_empty_append>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769D98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_empty_append>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_eliminate_empty_append::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "append(source, empty_source) -> source");
}

uint64_t turi::query_eval::opt_eliminate_empty_append::apply_transform(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = turi::query_eval::node_info::length(*(turi::query_eval::node_info **)(*(void *)(*a3 + 40) + 16));
  uint64_t v6 = *a3;
  if (!v5)
  {
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    uint64_t v24 = (uint64_t *)*a3;
    long long v25 = v8;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = *a3;
    }
    unint64_t v9 = **(uint64_t ***)(v6 + 40);
    uint64_t v11 = *v9;
    unint64_t v10 = (std::__shared_weak_count *)v9[1];
    uint64_t v22 = v11;
    int v23 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::optimization_engine::replace_node(a2, &v24, &v22);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    uint64_t v12 = v25;
    if (!v25) {
      return 1;
    }
    goto LABEL_11;
  }
  if (turi::query_eval::node_info::length(**(turi::query_eval::node_info ***)(v6 + 40))) {
    return 0;
  }
  uint64_t v13 = *a3;
  uint64_t v14 = (std::__shared_weak_count *)a3[1];
  uint64_t v20 = (uint64_t *)*a3;
  long long v21 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = *a3;
  }
  char v15 = *(uint64_t **)(*(void *)(v13 + 40) + 16);
  uint64_t v17 = *v15;
  char v16 = (std::__shared_weak_count *)v15[1];
  uint64_t v18 = v17;
  uint64_t v19 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v20, &v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v12 = v21;
  if (v21) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  return 1;
}

void sub_224057F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::query_eval::node_info::length(turi::query_eval::node_info *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  uint64_t v4 = *(void *)this;
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = turi::query_eval::infer_planner_node_length((uint64_t)&v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void sub_224057F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_project_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_project_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_project_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_union_project_exchange::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "partitionable_project(union(a,...)) ?->? union(project1(a), ...)");
}

uint64_t turi::query_eval::opt_union_project_exchange::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (turi::query_eval::node_info **)(*a3)[5];
  uint64_t v5 = *v4;
  if (*((_DWORD *)*v4 + 4) == 11)
  {
    uint64_t v7 = (std::__shared_weak_count *)v4[1];
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v3 = *a3;
    }
    std::string::basic_string[abi:ne180100]<0>(&__x, "indices");
    uint64_t v8 = *(void *)turi::query_eval::node_info::p(v3, (uint64_t)&__x);
    if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__x.__r_.__value_.__l.__data_);
    }
    std::vector<int>::size_type v9 = turi::query_eval::node_info::num_columns(v5);
    LODWORD(__x.__r_.__value_.__l.__data_) = 0;
    std::vector<int>::vector(&v85, v9, (const std::vector<int>::value_type *)&__x);
    unint64_t v10 = *(uint64_t **)(v8 + 8);
    uint64_t v11 = *(uint64_t **)(v8 + 16);
    for (uint64_t i = v85.__begin_; v10 != v11; i[v13] = 1)
    {
      uint64_t v13 = *v10;
      v10 += 2;
    }
    if (i != v85.__end_)
    {
      uint64_t v14 = i;
      while (*v14)
      {
        if (++v14 == v85.__end_) {
          goto LABEL_12;
        }
      }
      unint64_t v16 = turi::query_eval::node_info::num_columns(v5);
      __x.__r_.__value_.__r.__words[0] = -1;
      std::vector<unsigned long>::vector(&v84, v16, &__x);
      std::vector<std::vector<unsigned long>>::vector(v83, (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 4);
      uint64_t v75 = a3;
      unint64_t v17 = (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 4;
      __x.__r_.__value_.__s.__data_[0] = 0;
      std::vector<BOOL>::vector(&v82, v17, (unsigned __int8 *)&__x);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      for (unint64_t j = 0; j < turi::query_eval::node_info::num_columns(v5); ++j)
      {
        if (v85.__begin_[j])
        {
          unint64_t v22 = v83[0] + 24 * v20;
          uint64_t v24 = (void **)(v22 + 8);
          int v23 = *(void **)(v22 + 8);
          long long v26 = (void *)(v22 + 16);
          unint64_t v25 = *(void *)(v22 + 16);
          if ((unint64_t)v23 >= v25)
          {
            std::string::size_type v28 = *(void **)v22;
            uint64_t v29 = ((uint64_t)v23 - *(void *)v22) >> 3;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v31 = v25 - (void)v28;
            if (v31 >> 2 > v30) {
              unint64_t v30 = v31 >> 2;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v26, v32);
              int v23 = *v24;
              std::string::size_type v28 = *(void **)v22;
            }
            else
            {
              uint64_t v33 = 0;
            }
            uint64_t v34 = &v33[8 * v29];
            *(void *)uint64_t v34 = v18;
            uint64_t v27 = v34 + 8;
            while (v23 != v28)
            {
              uint64_t v35 = *--v23;
              *((void *)v34 - 1) = v35;
              v34 -= 8;
            }
            *(void *)unint64_t v22 = v34;
            *uint64_t v24 = v27;
            void *v26 = &v33[8 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            void *v23 = v18;
            uint64_t v27 = v23 + 1;
          }
          *uint64_t v24 = v27;
          *((void *)v84 + j) = j - v19;
        }
        else
        {
          ++v19;
          *(void *)((char *)v82 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
        }
        uint64_t v36 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*((void *)v5 + 5) + 16 * v20));
        BOOL v37 = v18 + 1 == v36;
        if (v18 + 1 == v36) {
          uint64_t v18 = 0;
        }
        else {
          ++v18;
        }
        if (v37) {
          ++v20;
        }
      }
      std::vector<std::shared_ptr<turi::query_eval::planner_node>>::vector(&v80, (uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 4);
      uint64_t v38 = *((void *)v5 + 5);
      if (*((void *)v5 + 6) == v38)
      {
LABEL_60:
        uint64_t v51 = std::remove_if[abi:ne180100]<std::__wrap_iter<std::shared_ptr<turi::query_eval::planner_node> *>,turi::query_eval::opt_union_project_exchange::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::planner_node> const&)#1}>(v80, v81);
        std::vector<std::shared_ptr<turi::query_eval::planner_node>>::resize((uint64_t *)&v80, ((char *)v51 - (char *)v80) >> 4);
        std::vector<unsigned long>::vector(&__p, (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
        uint64_t v52 = *(void *)(v8 + 8);
        if (*(void *)(v8 + 16) != v52)
        {
          uint64_t v53 = 0;
          unint64_t v54 = 0;
          while (2)
          {
            uint64_t v55 = 0;
            switch(*(unsigned char *)(v52 + v53 + 12))
            {
              case 0:
                uint64_t v55 = *(void *)(v52 + v53);
                goto LABEL_86;
              case 1:
                uint64_t v55 = (uint64_t)*(double *)(v52 + v53);
                goto LABEL_86;
              case 2:
                uint64_t v57 = *(void *)(v52 + v53);
                __idx[0] = 0;
                uint64_t v58 = (char *)(v57 + 8);
                if (*(char *)(v57 + 31) < 0) {
                  uint64_t v58 = *(char **)(v57 + 8);
                }
                uint64_t v59 = (const std::string *)std::string::basic_string[abi:ne180100]<0>(&__x, v58);
                uint64_t v55 = std::stoll(v59, __idx, 10);
                if (SHIBYTE(__x.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__x.__r_.__value_.__l.__data_);
                }
                if (*(char *)(v57 + 31) < 0) {
                  uint64_t v60 = *(void *)(v57 + 16);
                }
                else {
                  uint64_t v60 = *(unsigned __int8 *)(v57 + 31);
                }
                if (__idx[0] != v60)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  std::string::size_type v68 = std::string::append(&v95, " cannot be interpreted as an integer");
                  long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
                  __x.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__x.__r_.__value_.__l.__data_ = v69;
                  v68->__r_.__value_.__l.__size_ = 0;
                  v68->__r_.__value_.__r.__words[2] = 0;
                  v68->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, &__x);
                  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_86;
              case 3:
                uint64_t v56 = *(void *)(v52 + v53);
                memset(&__x, 0, sizeof(__x));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__x, *(const void **)(v56 + 8), *(void *)(v56 + 16), (uint64_t)(*(void *)(v56 + 16) - *(void *)(v56 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__x.__r_.__value_.__r.__words[0])
                {
                  __x.__r_.__value_.__l.__size_ = __x.__r_.__value_.__r.__words[0];
                  operator delete(__x.__r_.__value_.__l.__data_);
                }
                goto LABEL_85;
              case 4:
                uint64_t v61 = *(void *)(v52 + v53);
                memset(&__x, 0, sizeof(__x));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__x, *(uint64_t **)(v61 + 8), *(uint64_t **)(v61 + 16), (uint64_t)(*(void *)(v61 + 16) - *(void *)(v61 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&__x;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                goto LABEL_85;
              case 5:
                uint64_t v62 = *(void *)(v52 + v53);
                memset(&__x, 0, sizeof(__x));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__x, *(uint64_t **)(v62 + 8), *(uint64_t **)(v62 + 16), (uint64_t)(*(void *)(v62 + 16) - *(void *)(v62 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&__x;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                goto LABEL_85;
              case 6:
                uint64_t v55 = (uint64_t)(*(void *)(v52 + v53) << 8) >> 8;
                goto LABEL_86;
              case 7:
                goto LABEL_86;
              case 8:
                uint64_t v63 = *(void *)(v52 + v53);
                long long v64 = *(atomic_uint **)(v63 + 16);
                uint64_t v86 = *(void *)(v63 + 8);
                uint64_t v87 = v64;
                if (v64) {
                  atomic_fetch_add_explicit(v64 + 2, 1u, memory_order_relaxed);
                }
                long long v65 = *(_OWORD *)(v63 + 24);
                long long v66 = *(_OWORD *)(v63 + 56);
                long long v89 = *(_OWORD *)(v63 + 40);
                long long v90 = v66;
                long long v88 = v65;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count(&v87);
                goto LABEL_85;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__x, *(void *)(v52 + v53) + 8);
                turi::flexible_type_fail(0);
                if (v93)
                {
                  uint64_t v94 = v93;
                  operator delete(v93);
                }
                if (__x.__r_.__value_.__r.__words[2])
                {
                  std::string::size_type v92 = __x.__r_.__value_.__r.__words[2];
                  operator delete((void *)__x.__r_.__value_.__r.__words[2]);
                }
                if (__x.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__x.__r_.__value_.__l.__size_);
                }
LABEL_85:
                uint64_t v55 = 0;
LABEL_86:
                *((void *)__p + v54++) = *((void *)v84 + v55);
                uint64_t v52 = *(void *)(v8 + 8);
                v53 += 16;
                if (v54 >= (*(void *)(v8 + 16) - v52) >> 4) {
                  break;
                }
                continue;
              default:
                uint64_t result = turi::flexible_type_fail(0);
                __break(1u);
                return result;
            }
            break;
          }
        }
        uint64_t v70 = v80;
        if ((char *)v81 - (char *)v80 == 16)
        {
          std::string v71 = v75[1];
          v77[4] = *v75;
          v77[5] = v71;
          if (v71) {
            atomic_fetch_add_explicit(v71 + 1, 1uLL, memory_order_relaxed);
          }
          uint64_t v73 = *v70;
          uint64_t v72 = v70[1];
          v77[0] = v73;
          v77[1] = v72;
          if (v72) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
          }
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v77, (uint64_t **)&__p);
        }
        uint64_t v74 = v75[1];
        v76[4] = *v75;
        v76[5] = v74;
        if (v74) {
          atomic_fetch_add_explicit(v74 + 1, 1uLL, memory_order_relaxed);
        }
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)&v80, v76);
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v76, (uint64_t **)&__p);
      }
      unint64_t v39 = 0;
      while (1)
      {
        unint64_t v40 = v83[0] + 24 * v39;
        if (*(void *)v40 == *(void *)(v40 + 8))
        {
          uint64_t v44 = &v80[2 * v39];
          unint64_t v45 = (std::__shared_weak_count *)v44[1];
          uint64_t *v44 = 0;
          v44[1] = 0;
          if (!v45) {
            goto LABEL_52;
          }
        }
        else
        {
          if ((*(void *)((char *)v82 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v39))
          {
            uint64_t v41 = *(uint64_t **)(v38 + 16 * v39);
            uint64_t v43 = *v41;
            uint64_t v42 = v41[1];
            v79[0] = v43;
            v79[1] = v42;
            if (v42) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
            }
            turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v79, (uint64_t **)v40);
          }
          uint64_t v46 = *(uint64_t **)(v38 + 16 * v39);
          unint64_t v47 = v80;
          uint64_t v49 = *v46;
          uint64_t v48 = v46[1];
          if (v48) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v50 = &v47[2 * v39];
          unint64_t v45 = (std::__shared_weak_count *)v50[1];
          uint64_t *v50 = v49;
          v50[1] = v48;
          if (!v45) {
            goto LABEL_52;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
LABEL_52:
        ++v39;
        uint64_t v38 = *((void *)v5 + 5);
        if (v39 >= (*((void *)v5 + 6) - v38) >> 4) {
          goto LABEL_60;
        }
      }
    }
LABEL_12:
    if (i)
    {
      v85.__end_ = i;
      operator delete(i);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  return 0;
}

void sub_2240588AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (__p) {
    operator delete(__p);
  }
  *(void *)(v43 - 120) = &a30;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 120));
  if (a33) {
    operator delete(a33);
  }
  *(void *)(v43 - 120) = &a36;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 120));
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::remove_if[abi:ne180100]<std::__wrap_iter<std::shared_ptr<turi::query_eval::planner_node> *>,turi::query_eval::opt_union_project_exchange::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::{lambda(std::shared_ptr<turi::query_eval::planner_node> const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
  while (*v3)
  {
    v3 += 2;
    if (v3 == a2) {
      return a2;
    }
  }
  if (v3 != a2)
  {
    for (uint64_t i = v3 + 2; i != a2; i += 2)
    {
      uint64_t v6 = *i;
      if (*i)
      {
        uint64_t v7 = i[1];
        *uint64_t i = 0;
        i[1] = 0;
        uint64_t v8 = (std::__shared_weak_count *)v3[1];
        uint64_t *v3 = v6;
        v3[1] = v7;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v3 += 2;
      }
    }
  }
  return v3;
}

void std::vector<std::shared_ptr<turi::query_eval::planner_node>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__append(a1, v5);
  }
}

void *std::vector<std::vector<unsigned long>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_224058CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::shared_ptr<turi::query_eval::planner_node>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_224058D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13;
    char v15 = &v13[16 * v10];
    unint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    unint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer(&v14);
  }
}

void sub_224058E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<turi::group_aggregate_value>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_append_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_append_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_append_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_project_append_exchange::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(append(a,b)) -> append(project(a), project(b))");
}

uint64_t turi::query_eval::opt_project_append_exchange::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  if (*(_DWORD *)(*(void *)(*a3)[5] + 16) == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "indices");
    uint64_t v5 = *(void *)turi::query_eval::node_info::p(v3, (uint64_t)v14);
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    uint64_t v6 = *(void *)(v5 + 16) - *(void *)(v5 + 8);
    if (turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*a3)[5]) >= (unint64_t)(v6 >> 4))
    {
      uint64_t v8 = *(unsigned char **)(v5 + 8);
      unint64_t v9 = *(unsigned char **)(v5 + 16);
      v14[0] = 0;
      v14[1] = 0;
      uint64_t v15 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(v14, v8, v9, (v9 - v8) >> 4);
      uint64_t v10 = **(uint64_t ***)(*(void *)(*a3)[5] + 40);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      v13[0] = v12;
      v13[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v13, v14);
    }
  }
  return 0;
}

void sub_2240590F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  int v23 = *(std::__shared_weak_count **)(v21 - 64);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = *(void **)(v21 - 56);
  if (v24)
  {
    *(void *)(v21 - 48) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)1>::make_planner_node(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v14[0] = 0;
  v14[1] = 0;
  v12[1] = 0;
  uint64_t v13 = v14;
  uint64_t v11 = (const void **)v12;
  v12[0] = 0;
  uint64_t v4 = a1[1];
  v18[0] = *a1;
  v18[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[1];
  v18[2] = *a2;
  v18[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v15 = (void **)&v8;
  char v16 = 0;
  uint64_t v8 = operator new(0x20uLL);
  unint64_t v9 = v8;
  uint64_t v10 = v8 + 4;
  unint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((uint64_t)&v10, v18, &v19, v8);
  int v17 = 1;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v17, (uint64_t)&v13, &v11, &v8, a3);
  uint64_t v15 = (void **)&v8;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  for (uint64_t i = 3; i != -1; i -= 2)
  {
    uint64_t v7 = (std::__shared_weak_count *)v18[i];
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v11, v12[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_2240592E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void *);
  uint64_t v16 = va_arg(va2, void);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  uint64_t v7 = 24;
  while (1)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(v5 - 72 + v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    v7 -= 16;
    if (v7 == -8)
    {
      std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v11);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v15);
      _Unwind_Resume(a1);
    }
  }
}

void std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(void *a1, unsigned char *a2, unsigned char *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a4);
    std::vector<unsigned long>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, a2, a3);
  }
}

void sub_2240593A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_singleton_union>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_singleton_union>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D769F78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_eliminate_singleton_union>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_eliminate_singleton_union::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(a) -> a");
}

BOOL turi::query_eval::opt_eliminate_singleton_union::apply_transform(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(uint64_t ***)(*a3 + 40);
  uint64_t v4 = *(void *)(*a3 + 48) - (void)v3;
  if (v4 == 16)
  {
    uint64_t v5 = (std::__shared_weak_count *)a3[1];
    uint64_t v12 = (uint64_t *)*a3;
    uint64_t v13 = v5;
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v3 = *(uint64_t ***)(*a3 + 40);
    }
    uint64_t v6 = *v3;
    uint64_t v8 = *v6;
    uint64_t v7 = (std::__shared_weak_count *)v6[1];
    uint64_t v10 = v8;
    uint64_t v11 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::optimization_engine::replace_node(a2, &v12, &v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  return v4 == 16;
}

void sub_22405950C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_logical_filter_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_logical_filter_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_logical_filter_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_project_logical_filter_exchange::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(logical_filter(a), mask) -> logical_filter(project(a), mask)");
}

uint64_t turi::query_eval::opt_project_logical_filter_exchange::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  if (*(_DWORD *)(*(void *)(*a3)[5] + 16) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "indices");
    uint64_t v5 = *(void *)turi::query_eval::node_info::p(v3, (uint64_t)v14);
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    uint64_t v6 = *(void *)(v5 + 16) - *(void *)(v5 + 8);
    if (turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(*a3)[5]) >= (unint64_t)(v6 >> 4))
    {
      uint64_t v8 = *(unsigned char **)(v5 + 8);
      uint64_t v9 = *(unsigned char **)(v5 + 16);
      v14[0] = 0;
      v14[1] = 0;
      uint64_t v15 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(v14, v8, v9, (v9 - v8) >> 4);
      uint64_t v10 = **(uint64_t ***)(*(void *)(*a3)[5] + 40);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      v13[0] = v12;
      v13[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v13, v14);
    }
  }
  return 0;
}

void sub_2240597B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 64);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  unint64_t v22 = *(void **)(v19 - 56);
  if (v22)
  {
    *(void *)(v19 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  v14[0] = 0;
  v14[1] = 0;
  v12[1] = 0;
  uint64_t v13 = v14;
  uint64_t v11 = (const void **)v12;
  v12[0] = 0;
  uint64_t v4 = a1[1];
  v18[0] = *a1;
  v18[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[1];
  v18[2] = *a2;
  v18[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v15 = (void **)&v8;
  char v16 = 0;
  uint64_t v8 = operator new(0x20uLL);
  uint64_t v9 = v8;
  uint64_t v10 = v8 + 4;
  uint64_t v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((uint64_t)&v10, v18, &v19, v8);
  int v17 = 3;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>(&v17, (uint64_t)&v13, &v11, &v8, a3);
  uint64_t v15 = (void **)&v8;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  for (uint64_t i = 3; i != -1; i -= 2)
  {
    uint64_t v7 = (std::__shared_weak_count *)v18[i];
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&v11, v12[0]);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&v13, v14[0]);
}

void sub_224059990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void *);
  uint64_t v16 = va_arg(va2, void);
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  uint64_t v7 = 24;
  while (1)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(v5 - 72 + v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    v7 -= 16;
    if (v7 == -8)
    {
      std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)va, v11);
      std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)va1, v15);
      _Unwind_Resume(a1);
    }
  }
}

void std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_linear_transform_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A0B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_linear_transform_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A0B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_linear_transform_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_logical_filter_linear_transform_exchange::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "logical_filter(linear_transform(a), b) -> linear_transform(logical_filter(a, b))");
}

BOOL turi::query_eval::opt_logical_filter_transform::transform_applies(uint64_t a1, int a2)
{
  return a2 == 3;
}

uint64_t turi::query_eval::opt_logical_filter_linear_transform_exchange::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t result = turi::query_eval::is_linear_transform(*(void *)(*a3)[5] + 24);
  if (result)
  {
    uint64_t v6 = *(void *)(*a3)[5];
    if (*(void *)(v6 + 72) - *(void *)(v6 + 64) > 0x10uLL || *(_DWORD *)(v6 + 16) == 4)
    {
      return 0;
    }
    else
    {
      uint64_t v7 = *(void *)v6 + 8;
      uint64_t v8 = (const void ***)(*(void *)v6 + 32);
      uint64_t v9 = (void **)(*(void *)v6 + 56);
      LODWORD(v31) = **(_DWORD **)v6;
      std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>((int *)&v31, v7, v8, v9, &v32);
      std::vector<std::shared_ptr<turi::query_eval::planner_node>>::resize((uint64_t *)(v32 + 56), (uint64_t)(*(void *)(**(void **)(*a3)[5] + 64) - *(void *)(**(void **)(*a3)[5] + 56)) >> 4);
      uint64_t v10 = *a3;
      uint64_t v11 = (void *)(*a3)[5];
      uint64_t v12 = (uint64_t *)v11[2];
      uint64_t v14 = *v12;
      uint64_t v13 = (std::__shared_weak_count *)v12[1];
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v10 = *a3;
        uint64_t v11 = (void *)(*a3)[5];
      }
      uint64_t v16 = (uint64_t *)(*(void *)*v11 + 56);
      uint64_t v15 = *v16;
      if (v16[1] != *v16)
      {
        unint64_t v17 = 0;
        uint64_t v18 = 8;
        do
        {
          long long v19 = *(_OWORD *)(v15 + 16 * v17);
          long long v30 = v19;
          if (*((void *)&v19 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = v14;
          uint64_t v29 = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v30, &v28, &v31);
          uint64_t v20 = *(void *)(v32 + 56);
          long long v21 = v31;
          long long v31 = 0uLL;
          unint64_t v22 = *(std::__shared_weak_count **)(v20 + v18);
          *(_OWORD *)(v20 + 16 * v17) = v21;
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          if (*((void *)&v31 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
          }
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          if (*((void *)&v30 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
          }
          ++v17;
          uint64_t v10 = *a3;
          uint64_t v15 = *(void *)(**(void **)(*a3)[5] + 56);
          v18 += 16;
        }
        while (v17 < (*(void *)(**(void **)(*a3)[5] + 64) - v15) >> 4);
      }
      int v23 = (std::__shared_weak_count *)a3[1];
      long long v26 = v10;
      uint64_t v27 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v24 = v32;
      unint64_t v25 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::optimization_engine::replace_node(a2, &v26, &v24);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      return 1;
    }
  }
  return result;
}

void sub_224059CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_expanding_project_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_expanding_project_exchange>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_logical_filter_expanding_project_exchange>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_logical_filter_expanding_project_exchange::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "logical_filter(expanding_project(a), b) -> expanding_project(logical_filter(a, b))");
}

uint64_t turi::query_eval::opt_logical_filter_expanding_project_exchange::apply_transform(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v3 = **(void **)(*a3 + 40);
  if (*(_DWORD *)(v3 + 16) != 4) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  uint64_t v6 = *(void *)turi::query_eval::node_info::p((uint64_t *)v3, (uint64_t)&__p);
  if (v32 < 0) {
    operator delete(__p);
  }
  uint64_t v9 = v6 + 8;
  uint64_t v8 = *(void *)(v6 + 8);
  uint64_t v7 = *(void *)(v9 + 8);
  if ((v7 - v8) >> 4 <= (unint64_t)turi::query_eval::node_info::num_columns(**(turi::query_eval::node_info ***)(**(void **)(*a3 + 40) + 40))) {
    return 0;
  }
  uint64_t v10 = *(void **)(*a3 + 40);
  uint64_t v11 = **(uint64_t ***)(*v10 + 40);
  uint64_t v13 = *v11;
  uint64_t v12 = (std::__shared_weak_count *)v11[1];
  uint64_t v28 = v13;
  uint64_t v29 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = *(void **)(*a3 + 40);
  }
  uint64_t v14 = (uint64_t *)v10[2];
  uint64_t v16 = *v14;
  uint64_t v15 = (std::__shared_weak_count *)v14[1];
  uint64_t v26 = v16;
  uint64_t v27 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v28, &v26, &__p);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v17 = ***(void ***)(*a3 + 40);
  LODWORD(v33) = *(_DWORD *)v17;
  std::allocate_shared[abi:ne180100]<turi::query_eval::planner_node,std::allocator<turi::query_eval::planner_node>,turi::query_eval::planner_node_type &,std::map<std::string,turi::flexible_type> const&,std::map<std::string,turi::any> const&,std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,void>((int *)&v33, v17 + 8, (const void ***)(v17 + 32), (void **)(v17 + 56), &v24);
  uint64_t v33 = __p;
  uint64_t v34 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node> const*,std::shared_ptr<turi::query_eval::planner_node> const*>(v24 + 56, (uint64_t *)&v33, &v35, 1uLL);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v18 = (std::__shared_weak_count *)a3[1];
  unint64_t v22 = (uint64_t *)*a3;
  int v23 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = v24;
  long long v21 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v22, &v20);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  return 1;
}

void sub_22405A028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_identical_logical_filters>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_identical_logical_filters>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A210;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_merge_identical_logical_filters>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_merge_identical_logical_filters::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "logical_filter(b, a), ..., logical_filter(c, a) -> logical_filter(..., a)");
}

uint64_t turi::query_eval::opt_merge_identical_logical_filters::apply_transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)a3 + 40) + 16);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(v3 + 72);
  if (v4 != v5)
  {
    unint64_t v7 = 0;
    do
    {
      if (*(_DWORD *)(*(void *)v4 + 16) == 3 && *(void *)(*(void *)(*(void *)v4 + 40) + 16) == v3) {
        ++v7;
      }
      v4 += 16;
    }
    while (v4 != v5);
    if (v7 > 1)
    {
      std::vector<std::shared_ptr<turi::query_eval::planner_node>>::vector(v47, v7);
      std::vector<std::vector<unsigned long>>::vector(&v46, v7);
      std::vector<std::shared_ptr<turi::query_eval::node_info const>>::vector(v45, v7);
      uint64_t v8 = *(void *)(*(void *)(*(void *)a3 + 40) + 16);
      uint64_t v9 = *(void *)(v8 + 64);
      uint64_t v10 = *(void *)(v8 + 72);
      if (v9 != v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        do
        {
          if (*(_DWORD *)(*(void *)v9 + 16) == 3)
          {
            uint64_t v13 = *(void *)(*(void *)v9 + 40);
            if (*(void *)(v13 + 16) == *(void *)(*(void *)(*(void *)a3 + 40) + 16))
            {
              uint64_t v14 = *(uint64_t **)v13;
              uint64_t v15 = v47[0];
              uint64_t v17 = *v14;
              uint64_t v16 = v14[1];
              if (v16) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v18 = (void *)(v15 + 16 * v12);
              long long v19 = (std::__shared_weak_count *)v18[1];
              *uint64_t v18 = v17;
              v18[1] = v16;
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
              uint64_t v20 = v46;
              unint64_t v21 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)v9);
              std::vector<unsigned long>::resize((uint64_t)&v20[3 * v12], v21);
              unint64_t v22 = &v46[3 * v12];
              int v23 = *v22;
              uint64_t v24 = v22[1];
              if (v23 != v24)
              {
                uint64_t v25 = v11;
                do
                  *v23++ = v25++;
                while (v23 != v24);
              }
              uint64_t v26 = turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)v9);
              uint64_t v27 = v45[0];
              uint64_t v29 = *(turi::query_eval::node_info **)v9;
              uint64_t v28 = *(atomic_ullong **)(v9 + 8);
              if (v28) {
                atomic_fetch_add_explicit(v28 + 1, 1uLL, memory_order_relaxed);
              }
              long long v30 = (turi::query_eval::node_info **)(v27 + 16 * v12);
              long long v31 = (std::__shared_weak_count *)v30[1];
              *long long v30 = v29;
              v30[1] = (turi::query_eval::node_info *)v28;
              if (v31) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v31);
              }
              v11 += v26;
              ++v12;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)11>::make_planner_node((uint64_t)v47, &v43);
      uint64_t v39 = v43;
      unint64_t v40 = v44;
      if (v44) {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v32 = *(uint64_t **)(*(void *)(*(void *)a3 + 40) + 16);
      uint64_t v34 = *v32;
      uint64_t v33 = (std::__shared_weak_count *)v32[1];
      uint64_t v37 = v34;
      uint64_t v38 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)3>::make_planner_node(&v39, &v37, &v41);
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      v36[0] = v41;
      v36[1] = v42;
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v36, v46);
    }
  }
  return 0;
}

void sub_22405A4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void ***a23,std::__shared_weak_count *a24,void **a25)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  a23 = &a25;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  a25 = (void **)(v25 - 136);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a25);
  *(void *)(v25 - 136) = v25 - 112;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 136));
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<turi::query_eval::node_info const>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_22405A5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_all_same_sarrays>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_all_same_sarrays>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_merge_all_same_sarrays>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_merge_all_same_sarrays::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "source_a, ..., source_a -> source_a");
}

BOOL turi::query_eval::opt_merge_all_same_sarrays::transform_applies(uint64_t a1, int a2)
{
  return a2 == 15;
}

uint64_t turi::query_eval::opt_merge_all_same_sarrays::apply_transform(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v488 = *MEMORY[0x263EF8340];
  v472 = 0;
  v473 = 0;
  uint64_t v474 = 0;
  v471[0] = 0;
  v471[1] = 0;
  v470 = v471;
  turi::query_eval::opt_merge_all_same_sarrays::fill_source_sets(a1, a3, (uint64_t)&v470, (uint64_t *)&v472);
  v469[0] = 0;
  v469[1] = 0;
  v468 = v469;
  uint64_t v3 = v472;
  v450 = v473;
  if (v472 == v473) {
    goto LABEL_844;
  }
  do
  {
    uint64_t v4 = *v3;
    int v5 = *((_DWORD *)*v3 + 4);
    switch(v5)
    {
      case 5:
        v465 = (void *)5;
        std::string::basic_string[abi:ne180100]<0>(__idx, "start");
        uint64_t v14 = turi::query_eval::node_info::p(v4, (uint64_t)__idx);
        uint64_t v15 = *v3;
        std::string::basic_string[abi:ne180100]<0>(v461, "begin_index");
        uint64_t v16 = turi::query_eval::node_info::p(v15, (uint64_t)v461);
        *(void *)&long long __src = 0;
        DWORD2(__src) = 0;
        BYTE12(__src) = 0;
        if ((long long *)v14 != &__src)
        {
          uint64_t v17 = *(void *)v14;
          *(void *)((char *)&__src + 5) = *(void *)(v14 + 5);
          *(void *)&long long __src = v17;
          BYTE12(__src) = *(unsigned char *)(v14 + 12);
          BOOL v18 = BYTE12(__src) > 9u || ((1 << SBYTE12(__src)) & 0x33C) == 0;
          if (!v18) {
            atomic_fetch_add((atomic_ullong *volatile)__src, 1uLL);
          }
        }
        switch(*(unsigned char *)(v16 + 12))
        {
          case 0:
            switch(BYTE12(__src))
            {
              case 0:
                uint64_t v19 = __src + *(void *)v16;
                goto LABEL_88;
              case 1:
                double v201 = *(double *)&__src + (double)*(uint64_t *)v16;
                goto LABEL_369;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                size_t v145 = *(double **)(__src + 8);
                uint64_t v146 = *(void *)(__src + 16) - (void)v145;
                if (v146)
                {
                  unint64_t v147 = v146 >> 3;
                  double v148 = (double)*(uint64_t *)v16;
                  if (v147 <= 1) {
                    unint64_t v147 = 1;
                  }
                  do
                  {
                    *size_t v145 = *v145 + v148;
                    ++v145;
                    --v147;
                  }
                  while (v147);
                }
                goto LABEL_413;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 6:
                *(void *)&long long __src = __src & 0xFF00000000000000 | (__src + *(void *)v16) & 0xFFFFFFFFFFFFFFLL;
                goto LABEL_413;
              case 7:
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                unint64_t v153 = (uint64_t *)__src;
                uint64_t v155 = *(uint64_t **)(__src + 24);
                uint64_t v154 = *(uint64_t **)(__src + 32);
                if (v154 == v155) {
                  goto LABEL_413;
                }
                if (!*(void *)(__src + 8)) {
                  goto LABEL_413;
                }
                double v156 = (double)*(uint64_t *)v16;
                uint64_t v157 = 1;
                do
                {
                  uint64_t v158 = *v155++;
                  v157 *= v158;
                }
                while (v155 != v154);
                if (!v157) {
                  goto LABEL_413;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(__src + 8));
                unint64_t v159 = (v153[4] - v153[3]) >> 3;
                size_t v480 = 0;
                std::vector<unsigned long>::vector(&__p, v159, &v480);
                std::string::size_type size = __p.__r_.__value_.__l.__size_;
                uint64_t v120 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                break;
              default:
                goto LABEL_914;
            }
            do
            {
              uint64_t v161 = 0;
              uint64_t v162 = size - (void)v120;
              if (v162)
              {
                unint64_t v163 = v162 >> 3;
                long long v164 = (uint64_t *)v153[6];
                if (v163 <= 1) {
                  unint64_t v163 = 1;
                }
                do
                {
                  uint64_t v166 = *v120++;
                  uint64_t v165 = v166;
                  uint64_t v167 = *v164++;
                  v161 += v167 * v165;
                  --v163;
                }
                while (v163);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v153 + 1);
              *(double *)(*(void *)v153[1] + 8 * (v153[9] + v161)) = *(double *)(*(void *)v153[1]
                                                                                 + 8 * (v153[9] + v161))
                                                                     + v156;
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
              uint64_t v120 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
              uint64_t v168 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
              uint64_t v169 = v168 - 1;
              if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
              {
                uint64_t v170 = v153[3];
                unint64_t v171 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v169) + 1;
                *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v169) = v171;
                if (v171 >= *(void *)(v170 + 8 * v169))
                {
                  unint64_t v172 = (unint64_t *)&v120[v168 - 2];
                  uint64_t v173 = v170 - 16;
                  do
                  {
                    uint64_t v174 = v168 - 1;
                    v172[1] = 0;
                    if (v168 - 1 <= 0) {
                      goto LABEL_337;
                    }
                    unint64_t v175 = *v172 + 1;
                    *v172-- = v175;
                    unint64_t v176 = *(void *)(v173 + 8 * v168--);
                  }
                  while (v175 >= v176);
                  uint64_t v169 = v174 - 1;
                }
                uint64_t v168 = 1;
              }
            }
            while ((v169 & 0x8000000000000000) == 0 && v168);
            goto LABEL_336;
          case 1:
            switch(BYTE12(__src))
            {
              case 0:
                uint64_t v19 = (uint64_t)(*(double *)v16 + (double)(uint64_t)__src);
LABEL_88:
                *(void *)&long long __src = v19;
                goto LABEL_413;
              case 1:
                double v201 = *(double *)v16 + *(double *)&__src;
LABEL_369:
                *(double *)&long long __src = v201;
                goto LABEL_413;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                std::string v149 = *(double **)(__src + 8);
                uint64_t v150 = *(void *)(__src + 16) - (void)v149;
                if (v150)
                {
                  double v151 = *(double *)v16;
                  unint64_t v152 = v150 >> 3;
                  if (v152 <= 1) {
                    unint64_t v152 = 1;
                  }
                  do
                  {
                    *std::string v149 = v151 + *v149;
                    ++v149;
                    --v152;
                  }
                  while (v152);
                }
                goto LABEL_413;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 6:
                unint64_t v202 = vcvtmd_s64_f64(*(double *)v16);
                double v203 = (*(double *)v16 - (double)(uint64_t)floor(*(double *)v16)) * 1000000.0;
                uint64_t v204 = __src;
                uint64_t v205 = __src + v202;
                *(void *)&long long __src = __src & 0xFF00000000000000 | (__src + v202) & 0xFFFFFFFFFFFFFFLL;
                uint64_t v206 = (uint64_t)v203 + SDWORD2(__src);
                if (v206 > 999999)
                {
                  *(void *)&long long __src = (v205 + 1) & 0xFFFFFFFFFFFFFFLL | v204 & 0xFF00000000000000;
                  LODWORD(v206) = v206 - 1000000;
                }
                if (v206 > 0xF423F) {
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                }
                DWORD2(__src) = v206;
                goto LABEL_413;
              case 7:
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                uint64_t v177 = (uint64_t *)__src;
                v179 = *(uint64_t **)(__src + 24);
                v178 = *(uint64_t **)(__src + 32);
                if (v178 == v179) {
                  goto LABEL_413;
                }
                if (!*(void *)(__src + 8)) {
                  goto LABEL_413;
                }
                double v180 = *(double *)v16;
                uint64_t v181 = 1;
                do
                {
                  uint64_t v182 = *v179++;
                  v181 *= v182;
                }
                while (v179 != v178);
                if (!v181) {
                  goto LABEL_413;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(__src + 8));
                unint64_t v183 = (v177[4] - v177[3]) >> 3;
                size_t v480 = 0;
                std::vector<unsigned long>::vector(&__p, v183, &v480);
                std::string::size_type v184 = __p.__r_.__value_.__l.__size_;
                uint64_t v120 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                break;
              default:
                goto LABEL_914;
            }
            do
            {
              uint64_t v185 = 0;
              uint64_t v186 = v184 - (void)v120;
              if (v186)
              {
                unint64_t v187 = v186 >> 3;
                atomic_ullong v188 = (uint64_t *)v177[6];
                if (v187 <= 1) {
                  unint64_t v187 = 1;
                }
                do
                {
                  uint64_t v190 = *v120++;
                  uint64_t v189 = v190;
                  uint64_t v191 = *v188++;
                  v185 += v191 * v189;
                  --v187;
                }
                while (v187);
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v177 + 1);
              *(double *)(*(void *)v177[1] + 8 * (v177[9] + v185)) = v180
                                                                     + *(double *)(*(void *)v177[1]
                                                                                 + 8 * (v177[9] + v185));
              std::string::size_type v184 = __p.__r_.__value_.__l.__size_;
              uint64_t v120 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
              uint64_t v192 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
              uint64_t v193 = v192 - 1;
              if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
              {
                uint64_t v194 = v177[3];
                unint64_t v195 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v193) + 1;
                *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v193) = v195;
                if (v195 >= *(void *)(v194 + 8 * v193))
                {
                  v196 = (unint64_t *)&v120[v192 - 2];
                  uint64_t v197 = v194 - 16;
                  do
                  {
                    uint64_t v198 = v192 - 1;
                    v196[1] = 0;
                    if (v192 - 1 <= 0) {
                      goto LABEL_336;
                    }
                    unint64_t v199 = *v196 + 1;
                    *v196-- = v199;
                    unint64_t v200 = *(void *)(v197 + 8 * v192--);
                  }
                  while (v199 >= v200);
                  uint64_t v193 = v198 - 1;
                }
                uint64_t v192 = 1;
              }
            }
            while ((v193 & 0x8000000000000000) == 0 && v192);
            goto LABEL_336;
          case 2:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_412;
              case 2:
                double v39 = *(double *)v16;
                if (*(void *)__src != 1) {
                  operator new();
                }
                int v40 = *(char *)(*(void *)&v39 + 31);
                if (v40 >= 0) {
                  uint64_t v41 = (const std::string::value_type *)(*(void *)&v39 + 8);
                }
                else {
                  uint64_t v41 = *(const std::string::value_type **)(*(void *)&v39 + 8);
                }
                if (v40 >= 0) {
                  std::string::size_type v42 = *(unsigned __int8 *)(*(void *)&v39 + 31);
                }
                else {
                  std::string::size_type v42 = *(void *)(*(void *)&v39 + 16);
                }
                std::string::append((std::string *)(__src + 8), v41, v42);
                goto LABEL_413;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              default:
                goto LABEL_914;
            }
          case 3:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_412;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                double v104 = *(double *)v16;
                if (*(void *)__src != 1) {
                  operator new();
                }
                uint64_t v105 = __src;
                turi::flexible_type_fail(*(void *)(__src + 16) - *(void *)(__src + 8) == *(void *)(*(void *)&v104 + 16)
                                                                                           - *(void *)(*(void *)&v104 + 8));
                uint64_t v106 = *(double **)(v105 + 8);
                uint64_t v107 = *(void *)(v105 + 16) - (void)v106;
                if (v107)
                {
                  unint64_t v108 = v107 >> 3;
                  unint64_t v109 = *(double **)(*(void *)&v104 + 8);
                  if (v108 <= 1) {
                    unint64_t v108 = 1;
                  }
                  do
                  {
                    double v110 = *v109++;
                    *uint64_t v106 = v110 + *v106;
                    ++v106;
                    --v108;
                  }
                  while (v108);
                }
                goto LABEL_413;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              default:
                goto LABEL_914;
            }
          case 4:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_412;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              default:
                goto LABEL_914;
            }
          case 5:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_412;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              default:
                goto LABEL_914;
            }
          case 6:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_412;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              default:
                goto LABEL_914;
            }
          case 7:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_412;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              default:
                goto LABEL_914;
            }
          case 8:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_412;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 9:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              default:
                goto LABEL_914;
            }
          case 9:
            switch(BYTE12(__src))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_412;
              case 2:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 3:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 4:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 5:
                if (*(void *)__src != 1) {
                  operator new();
                }
                goto LABEL_412;
              case 8:
                if (*(void *)__src != 1) {
                  operator new();
                }
LABEL_412:
                turi::flexible_type_fail(0);
                goto LABEL_413;
              case 9:
                double v111 = *(double *)v16;
                if (*(void *)__src != 1) {
                  operator new();
                }
                uint64_t v112 = __src;
                char v113 = (uint64_t *)(__src + 8);
                if (!turi::flexible_type_impl::ndarray<double>::same_shape(__src + 8, *(void *)&v111 + 8)) {
                  turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                }
                unsigned int v115 = *(uint64_t **)(v112 + 24);
                uint64_t v114 = *(uint64_t **)(v112 + 32);
                if (v114 == v115) {
                  goto LABEL_413;
                }
                if (!*v113) {
                  goto LABEL_413;
                }
                uint64_t v116 = 1;
                do
                {
                  uint64_t v117 = *v115++;
                  v116 *= v117;
                }
                while (v115 != v114);
                if (!v116) {
                  goto LABEL_413;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v113);
                unint64_t v118 = (uint64_t)(*(void *)(v112 + 32) - *(void *)(v112 + 24)) >> 3;
                size_t v480 = 0;
                std::vector<unsigned long>::vector(&__p, v118, &v480);
                std::string::size_type v119 = __p.__r_.__value_.__l.__size_;
                uint64_t v120 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                break;
              default:
                goto LABEL_914;
            }
            break;
          default:
            goto LABEL_914;
        }
        while (1)
        {
          uint64_t v121 = v119 - (void)v120;
          if (v121)
          {
            uint64_t v122 = 0;
            unint64_t v123 = v121 >> 3;
            long long v124 = *(uint64_t **)(*(void *)&v111 + 48);
            if (v123 <= 1) {
              unint64_t v123 = 1;
            }
            uint64_t v125 = v120;
            unint64_t v126 = v123;
            do
            {
              uint64_t v128 = *v125++;
              uint64_t v127 = v128;
              uint64_t v129 = *v124++;
              v122 += v129 * v127;
              --v126;
            }
            while (v126);
            uint64_t v130 = 0;
            double v131 = *(double *)(**(void **)(*(void *)&v111 + 8) + 8 * (*(void *)(*(void *)&v111 + 72) + v122));
            uint64_t v132 = *(uint64_t **)(v112 + 48);
            do
            {
              uint64_t v134 = *v120++;
              uint64_t v133 = v134;
              uint64_t v135 = *v132++;
              v130 += v135 * v133;
              --v123;
            }
            while (v123);
          }
          else
          {
            uint64_t v130 = 0;
            double v131 = *(double *)(**(void **)(*(void *)&v111 + 8) + 8 * *(void *)(*(void *)&v111 + 72));
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v113);
          *(double *)(**(void **)(v112 + 8) + 8 * (*(void *)(v112 + 72) + v130)) = v131
                                                                                     + *(double *)(**(void **)(v112 + 8)
                                                                                                 + 8
                                                                                                 * (*(void *)(v112 + 72)
                                                                                                  + v130));
          std::string::size_type v119 = __p.__r_.__value_.__l.__size_;
          uint64_t v120 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          uint64_t v136 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
          uint64_t v137 = v136 - 1;
          if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
          {
            uint64_t v138 = *(void *)(v112 + 24);
            unint64_t v139 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v137) + 1;
            *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v137) = v139;
            if (v139 >= *(void *)(v138 + 8 * v137))
            {
              uint64_t v140 = (unint64_t *)&v120[v136 - 2];
              uint64_t v141 = v138 - 16;
              do
              {
                uint64_t v142 = v136 - 1;
                v140[1] = 0;
                if (v136 - 1 <= 0) {
                  goto LABEL_336;
                }
                unint64_t v143 = *v140 + 1;
                *v140-- = v143;
                unint64_t v144 = *(void *)(v141 + 8 * v136--);
              }
              while (v143 >= v144);
              uint64_t v137 = v142 - 1;
            }
            uint64_t v136 = 1;
          }
          if (v137 < 0 || !v136)
          {
LABEL_336:
            if (v120)
            {
LABEL_337:
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v120;
              operator delete(v120);
            }
LABEL_413:
            uint64_t v207 = 0;
            switch(BYTE12(__src))
            {
              case 0:
                uint64_t v207 = __src;
                goto LABEL_437;
              case 1:
                uint64_t v207 = (uint64_t)*(double *)&__src;
                goto LABEL_437;
              case 2:
                uint64_t v208 = __src;
                size_t v480 = 0;
                v209 = (char *)(__src + 8);
                if (*(char *)(__src + 31) < 0) {
                  v209 = *(char **)(__src + 8);
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, v209);
                uint64_t v207 = std::stoll(&__p, &v480, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (*(char *)(v208 + 31) < 0) {
                  uint64_t v210 = *(void *)(v208 + 16);
                }
                else {
                  uint64_t v210 = *(unsigned __int8 *)(v208 + 31);
                }
                if (v480 != v210)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v439 = std::string::append(&v479, " cannot be interpreted as an integer");
                  long long v440 = *(_OWORD *)&v439->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v439->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v440;
                  v439->__r_.__value_.__l.__size_ = 0;
                  v439->__r_.__value_.__r.__words[2] = 0;
                  v439->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(exception, &__p);
                  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_437;
              case 3:
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(__src + 8), *(void *)(__src + 16), (uint64_t)(*(void *)(__src + 16) - *(void *)(__src + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_436;
              case 4:
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(__src + 8), *(uint64_t **)(__src + 16), (uint64_t)(*(void *)(__src + 16) - *(void *)(__src + 8)) >> 4);
                turi::flexible_type_fail(0);
                v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
                goto LABEL_436;
              case 5:
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(__src + 8), *(uint64_t **)(__src + 16), (uint64_t)(*(void *)(__src + 16) - *(void *)(__src + 8)) >> 5);
                turi::flexible_type_fail(0);
                v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
                goto LABEL_436;
              case 6:
                uint64_t v207 = (uint64_t)((void)__src << 8) >> 8;
                goto LABEL_437;
              case 7:
                goto LABEL_437;
              case 8:
                uint64_t v211 = __src;
                v212 = *(atomic_uint **)(__src + 16);
                v475[0] = *(void **)(__src + 8);
                v475[1] = v212;
                if (v212) {
                  atomic_fetch_add_explicit(v212 + 2, 1u, memory_order_relaxed);
                }
                long long v213 = *(_OWORD *)(v211 + 24);
                long long v214 = *(_OWORD *)(v211 + 56);
                long long v477 = *(_OWORD *)(v211 + 40);
                long long v478 = v214;
                long long v476 = v213;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((atomic_uint **)&v475[1]);
                goto LABEL_436;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, __src + 8);
                turi::flexible_type_fail(0);
                if (v486)
                {
                  v487 = v486;
                  operator delete(v486);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v484 = (void *)__p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                if (__p.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                }
LABEL_436:
                uint64_t v207 = 0;
LABEL_437:
                uint64_t v466 = v207;
                switch(BYTE12(__src))
                {
                  case 2:
                    if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_469;
                    }
                    v215 = (void *)__src;
                    if (!(void)__src) {
                      goto LABEL_469;
                    }
                    if (*(char *)(__src + 31) < 0) {
                      operator delete(*(void **)(__src + 8));
                    }
                    v216 = v215;
                    uint64_t v217 = 0x1012C404EF22A49;
                    break;
                  case 3:
                    if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_469;
                    }
                    v223 = (void *)__src;
                    if (!(void)__src) {
                      goto LABEL_469;
                    }
                    v224 = *(void **)(__src + 8);
                    if (v224)
                    {
                      *(void *)(__src + 16) = v224;
                      operator delete(v224);
                    }
                    v216 = v223;
                    uint64_t v217 = 0x1080C409938AC02;
                    break;
                  case 4:
                    if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_469;
                    }
                    v218 = (void *)__src;
                    if (!(void)__src) {
                      goto LABEL_469;
                    }
                    __p.__r_.__value_.__r.__words[0] = __src + 8;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    goto LABEL_463;
                  case 5:
                    if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_469;
                    }
                    v218 = (void *)__src;
                    if (!(void)__src) {
                      goto LABEL_469;
                    }
                    __p.__r_.__value_.__r.__words[0] = __src + 8;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_463:
                    v216 = v218;
                    uint64_t v217 = 0x1020C405E66F15BLL;
                    break;
                  case 8:
                    if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      uint64_t v225 = __src;
                      if ((void)__src)
                      {
                        boost::detail::shared_count::~shared_count((atomic_uint **)(__src + 16));
                        MEMORY[0x22A614FA0](v225, 0x1030C40F1F0227BLL);
                      }
                      *(void *)&long long __src = 0;
                    }
                    goto LABEL_469;
                  case 9:
                    if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) != 1) {
                      goto LABEL_469;
                    }
                    v219 = (void *)__src;
                    if (!(void)__src) {
                      goto LABEL_469;
                    }
                    v220 = *(void **)(__src + 48);
                    if (v220)
                    {
                      *(void *)(__src + 56) = v220;
                      operator delete(v220);
                    }
                    v221 = (void *)v219[3];
                    if (v221)
                    {
                      v219[4] = v221;
                      operator delete(v221);
                    }
                    v222 = (std::__shared_weak_count *)v219[2];
                    if (v222) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v222);
                    }
                    v216 = v219;
                    uint64_t v217 = 0x1030C407B73B9F7;
                    break;
                  default:
                    goto LABEL_469;
                }
                MEMORY[0x22A614FA0](v216, v217);
LABEL_469:
                *(void *)&long long __src = 0;
                DWORD2(__src) = 0;
                BYTE12(__src) = 0;
                if (v462 < 0) {
                  operator delete((void *)v461[0]);
                }
                if (SHIBYTE(v464) < 0) {
                  operator delete((void *)__idx[0]);
                }
                v226 = *v3;
                std::string::basic_string[abi:ne180100]<0>(__idx, "start");
                uint64_t v227 = turi::query_eval::node_info::p(v226, (uint64_t)__idx);
                v228 = *v3;
                std::string::basic_string[abi:ne180100]<0>(v461, "end_index");
                uint64_t v229 = turi::query_eval::node_info::p(v228, (uint64_t)v461);
                *(void *)&long long __src = 0;
                DWORD2(__src) = 0;
                BYTE12(__src) = 0;
                if ((long long *)v227 != &__src)
                {
                  uint64_t v230 = *(void *)v227;
                  *(void *)((char *)&__src + 5) = *(void *)(v227 + 5);
                  *(void *)&long long __src = v230;
                  BYTE12(__src) = *(unsigned char *)(v227 + 12);
                  if (BYTE12(__src) <= 9u && ((1 << SBYTE12(__src)) & 0x33C) != 0) {
                    atomic_fetch_add((atomic_ullong *volatile)__src, 1uLL);
                  }
                }
                break;
              default:
                goto LABEL_914;
            }
            switch(*(unsigned char *)(v229 + 12))
            {
              case 0:
                switch(BYTE12(__src))
                {
                  case 0:
                    uint64_t v231 = __src + *(void *)v229;
                    goto LABEL_504;
                  case 1:
                    double v333 = *(double *)&__src + (double)*(uint64_t *)v229;
                    goto LABEL_668;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    v277 = *(double **)(__src + 8);
                    uint64_t v278 = *(void *)(__src + 16) - (void)v277;
                    if (v278)
                    {
                      unint64_t v279 = v278 >> 3;
                      double v280 = (double)*(uint64_t *)v229;
                      if (v279 <= 1) {
                        unint64_t v279 = 1;
                      }
                      do
                      {
                        double *v277 = *v277 + v280;
                        ++v277;
                        --v279;
                      }
                      while (v279);
                    }
                    goto LABEL_712;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 6:
                    *(void *)&long long __src = __src & 0xFF00000000000000 | (__src + *(void *)v229) & 0xFFFFFFFFFFFFFFLL;
                    goto LABEL_712;
                  case 7:
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    v285 = (uint64_t *)__src;
                    v287 = *(uint64_t **)(__src + 24);
                    v286 = *(uint64_t **)(__src + 32);
                    if (v286 == v287) {
                      goto LABEL_712;
                    }
                    if (!*(void *)(__src + 8)) {
                      goto LABEL_712;
                    }
                    double v288 = (double)*(uint64_t *)v229;
                    uint64_t v289 = 1;
                    do
                    {
                      uint64_t v290 = *v287++;
                      v289 *= v290;
                    }
                    while (v287 != v286);
                    if (!v289) {
                      goto LABEL_712;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(__src + 8));
                    unint64_t v291 = (v285[4] - v285[3]) >> 3;
                    size_t v480 = 0;
                    std::vector<unsigned long>::vector(&__p, v291, &v480);
                    std::string::size_type v292 = __p.__r_.__value_.__l.__size_;
                    v252 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                    break;
                  default:
                    goto LABEL_914;
                }
                do
                {
                  uint64_t v293 = 0;
                  uint64_t v294 = v292 - (void)v252;
                  if (v294)
                  {
                    unint64_t v295 = v294 >> 3;
                    v296 = (uint64_t *)v285[6];
                    if (v295 <= 1) {
                      unint64_t v295 = 1;
                    }
                    do
                    {
                      uint64_t v298 = *v252++;
                      uint64_t v297 = v298;
                      uint64_t v299 = *v296++;
                      v293 += v299 * v297;
                      --v295;
                    }
                    while (v295);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v285 + 1);
                  *(double *)(*(void *)v285[1] + 8 * (v285[9] + v293)) = *(double *)(*(void *)v285[1]
                                                                                     + 8 * (v285[9] + v293))
                                                                         + v288;
                  std::string::size_type v292 = __p.__r_.__value_.__l.__size_;
                  v252 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                  uint64_t v300 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                  uint64_t v301 = v300 - 1;
                  if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
                  {
                    uint64_t v302 = v285[3];
                    unint64_t v303 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v301) + 1;
                    *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v301) = v303;
                    if (v303 >= *(void *)(v302 + 8 * v301))
                    {
                      v304 = (unint64_t *)&v252[v300 - 2];
                      uint64_t v305 = v302 - 16;
                      do
                      {
                        uint64_t v306 = v300 - 1;
                        v304[1] = 0;
                        if (v300 - 1 <= 0) {
                          goto LABEL_636;
                        }
                        unint64_t v307 = *v304 + 1;
                        *v304-- = v307;
                        unint64_t v308 = *(void *)(v305 + 8 * v300--);
                      }
                      while (v307 >= v308);
                      uint64_t v301 = v306 - 1;
                    }
                    uint64_t v300 = 1;
                  }
                }
                while ((v301 & 0x8000000000000000) == 0 && v300);
                goto LABEL_635;
              case 1:
                switch(BYTE12(__src))
                {
                  case 0:
                    uint64_t v231 = (uint64_t)(*(double *)v229 + (double)(uint64_t)__src);
LABEL_504:
                    *(void *)&long long __src = v231;
                    goto LABEL_712;
                  case 1:
                    double v333 = *(double *)v229 + *(double *)&__src;
LABEL_668:
                    *(double *)&long long __src = v333;
                    goto LABEL_712;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    v281 = *(double **)(__src + 8);
                    uint64_t v282 = *(void *)(__src + 16) - (void)v281;
                    if (v282)
                    {
                      double v283 = *(double *)v229;
                      unint64_t v284 = v282 >> 3;
                      if (v284 <= 1) {
                        unint64_t v284 = 1;
                      }
                      do
                      {
                        double *v281 = v283 + *v281;
                        ++v281;
                        --v284;
                      }
                      while (v284);
                    }
                    goto LABEL_712;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 6:
                    unint64_t v334 = vcvtmd_s64_f64(*(double *)v229);
                    double v335 = (*(double *)v229 - (double)(uint64_t)floor(*(double *)v229)) * 1000000.0;
                    uint64_t v336 = __src;
                    uint64_t v337 = __src + v334;
                    *(void *)&long long __src = __src & 0xFF00000000000000 | (__src + v334) & 0xFFFFFFFFFFFFFFLL;
                    uint64_t v338 = (uint64_t)v335 + SDWORD2(__src);
                    if (v338 > 999999)
                    {
                      *(void *)&long long __src = (v337 + 1) & 0xFFFFFFFFFFFFFFLL | v336 & 0xFF00000000000000;
                      LODWORD(v338) = v338 - 1000000;
                    }
                    if (v338 > 0xF423F) {
                      turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                    }
                    DWORD2(__src) = v338;
                    goto LABEL_712;
                  case 7:
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    v309 = (uint64_t *)__src;
                    v311 = *(uint64_t **)(__src + 24);
                    v310 = *(uint64_t **)(__src + 32);
                    if (v310 == v311) {
                      goto LABEL_712;
                    }
                    if (!*(void *)(__src + 8)) {
                      goto LABEL_712;
                    }
                    double v312 = *(double *)v229;
                    uint64_t v313 = 1;
                    do
                    {
                      uint64_t v314 = *v311++;
                      v313 *= v314;
                    }
                    while (v311 != v310);
                    if (!v313) {
                      goto LABEL_712;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(__src + 8));
                    unint64_t v315 = (v309[4] - v309[3]) >> 3;
                    size_t v480 = 0;
                    std::vector<unsigned long>::vector(&__p, v315, &v480);
                    std::string::size_type v316 = __p.__r_.__value_.__l.__size_;
                    v252 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                    break;
                  default:
                    goto LABEL_914;
                }
                do
                {
                  uint64_t v317 = 0;
                  uint64_t v318 = v316 - (void)v252;
                  if (v318)
                  {
                    unint64_t v319 = v318 >> 3;
                    v320 = (uint64_t *)v309[6];
                    if (v319 <= 1) {
                      unint64_t v319 = 1;
                    }
                    do
                    {
                      uint64_t v322 = *v252++;
                      uint64_t v321 = v322;
                      uint64_t v323 = *v320++;
                      v317 += v323 * v321;
                      --v319;
                    }
                    while (v319);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v309 + 1);
                  *(double *)(*(void *)v309[1] + 8 * (v309[9] + v317)) = v312
                                                                         + *(double *)(*(void *)v309[1]
                                                                                     + 8 * (v309[9] + v317));
                  std::string::size_type v316 = __p.__r_.__value_.__l.__size_;
                  v252 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                  uint64_t v324 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                  uint64_t v325 = v324 - 1;
                  if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
                  {
                    uint64_t v326 = v309[3];
                    unint64_t v327 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v325) + 1;
                    *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v325) = v327;
                    if (v327 >= *(void *)(v326 + 8 * v325))
                    {
                      v328 = (unint64_t *)&v252[v324 - 2];
                      uint64_t v329 = v326 - 16;
                      do
                      {
                        uint64_t v330 = v324 - 1;
                        v328[1] = 0;
                        if (v324 - 1 <= 0) {
                          goto LABEL_636;
                        }
                        unint64_t v331 = *v328 + 1;
                        *v328-- = v331;
                        unint64_t v332 = *(void *)(v329 + 8 * v324--);
                      }
                      while (v331 >= v332);
                      uint64_t v325 = v330 - 1;
                    }
                    uint64_t v324 = 1;
                  }
                }
                while ((v325 & 0x8000000000000000) == 0 && v324);
                goto LABEL_635;
              case 2:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_711;
                  case 2:
                    double v232 = *(double *)v229;
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    int v233 = *(char *)(*(void *)&v232 + 31);
                    if (v233 >= 0) {
                      v234 = (const std::string::value_type *)(*(void *)&v232 + 8);
                    }
                    else {
                      v234 = *(const std::string::value_type **)(*(void *)&v232 + 8);
                    }
                    if (v233 >= 0) {
                      std::string::size_type v235 = *(unsigned __int8 *)(*(void *)&v232 + 31);
                    }
                    else {
                      std::string::size_type v235 = *(void *)(*(void *)&v232 + 16);
                    }
                    std::string::append((std::string *)(__src + 8), v234, v235);
                    goto LABEL_712;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  default:
                    goto LABEL_914;
                }
              case 3:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_711;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    double v236 = *(double *)v229;
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    uint64_t v237 = __src;
                    turi::flexible_type_fail(*(void *)(__src + 16) - *(void *)(__src + 8) == *(void *)(*(void *)&v236 + 16)
                                                                                               - *(void *)(*(void *)&v236 + 8));
                    v238 = *(double **)(v237 + 8);
                    uint64_t v239 = *(void *)(v237 + 16) - (void)v238;
                    if (v239)
                    {
                      unint64_t v240 = v239 >> 3;
                      v241 = *(double **)(*(void *)&v236 + 8);
                      if (v240 <= 1) {
                        unint64_t v240 = 1;
                      }
                      do
                      {
                        double v242 = *v241++;
                        double *v238 = v242 + *v238;
                        ++v238;
                        --v240;
                      }
                      while (v240);
                    }
                    goto LABEL_712;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  default:
                    goto LABEL_914;
                }
              case 4:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_711;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  default:
                    goto LABEL_914;
                }
              case 5:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_711;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  default:
                    goto LABEL_914;
                }
              case 6:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_711;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  default:
                    goto LABEL_914;
                }
              case 7:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_711;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  default:
                    goto LABEL_914;
                }
              case 8:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_711;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 9:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  default:
                    goto LABEL_914;
                }
              case 9:
                switch(BYTE12(__src))
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_711;
                  case 2:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 3:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 4:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 5:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    goto LABEL_711;
                  case 8:
                    if (*(void *)__src != 1) {
                      operator new();
                    }
LABEL_711:
                    turi::flexible_type_fail(0);
                    goto LABEL_712;
                  case 9:
                    double v243 = *(double *)v229;
                    if (*(void *)__src != 1) {
                      operator new();
                    }
                    uint64_t v244 = __src;
                    v245 = (uint64_t *)(__src + 8);
                    if (!turi::flexible_type_impl::ndarray<double>::same_shape(__src + 8, *(void *)&v243 + 8)) {
                      turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                    }
                    v247 = *(uint64_t **)(v244 + 24);
                    v246 = *(uint64_t **)(v244 + 32);
                    if (v246 == v247) {
                      goto LABEL_712;
                    }
                    if (!*v245) {
                      goto LABEL_712;
                    }
                    uint64_t v248 = 1;
                    do
                    {
                      uint64_t v249 = *v247++;
                      v248 *= v249;
                    }
                    while (v247 != v246);
                    if (!v248) {
                      goto LABEL_712;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v245);
                    unint64_t v250 = (uint64_t)(*(void *)(v244 + 32) - *(void *)(v244 + 24)) >> 3;
                    size_t v480 = 0;
                    std::vector<unsigned long>::vector(&__p, v250, &v480);
                    std::string::size_type v251 = __p.__r_.__value_.__l.__size_;
                    v252 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                    break;
                  default:
                    goto LABEL_914;
                }
                break;
              default:
                goto LABEL_914;
            }
            while (1)
            {
              uint64_t v253 = v251 - (void)v252;
              if (v253)
              {
                uint64_t v254 = 0;
                unint64_t v255 = v253 >> 3;
                v256 = *(uint64_t **)(*(void *)&v243 + 48);
                if (v255 <= 1) {
                  unint64_t v255 = 1;
                }
                v257 = v252;
                unint64_t v258 = v255;
                do
                {
                  uint64_t v260 = *v257++;
                  uint64_t v259 = v260;
                  uint64_t v261 = *v256++;
                  v254 += v261 * v259;
                  --v258;
                }
                while (v258);
                uint64_t v262 = 0;
                double v263 = *(double *)(**(void **)(*(void *)&v243 + 8)
                                 + 8 * (*(void *)(*(void *)&v243 + 72) + v254));
                v264 = *(uint64_t **)(v244 + 48);
                do
                {
                  uint64_t v266 = *v252++;
                  uint64_t v265 = v266;
                  uint64_t v267 = *v264++;
                  v262 += v267 * v265;
                  --v255;
                }
                while (v255);
              }
              else
              {
                uint64_t v262 = 0;
                double v263 = *(double *)(**(void **)(*(void *)&v243 + 8) + 8 * *(void *)(*(void *)&v243 + 72));
              }
              turi::flexible_type_impl::ndarray<double>::ensure_unique(v245);
              *(double *)(**(void **)(v244 + 8) + 8 * (*(void *)(v244 + 72) + v262)) = v263
                                                                                         + *(double *)(**(void **)(v244 + 8) + 8 * (*(void *)(v244 + 72) + v262));
              std::string::size_type v251 = __p.__r_.__value_.__l.__size_;
              v252 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
              uint64_t v268 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
              uint64_t v269 = v268 - 1;
              if ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >= 1)
              {
                uint64_t v270 = *(void *)(v244 + 24);
                unint64_t v271 = *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v269) + 1;
                *(void *)(__p.__r_.__value_.__r.__words[0] + 8 * v269) = v271;
                if (v271 >= *(void *)(v270 + 8 * v269))
                {
                  v272 = (unint64_t *)&v252[v268 - 2];
                  uint64_t v273 = v270 - 16;
                  do
                  {
                    uint64_t v274 = v268 - 1;
                    v272[1] = 0;
                    if (v268 - 1 <= 0) {
                      goto LABEL_635;
                    }
                    unint64_t v275 = *v272 + 1;
                    *v272-- = v275;
                    unint64_t v276 = *(void *)(v273 + 8 * v268--);
                  }
                  while (v275 >= v276);
                  uint64_t v269 = v274 - 1;
                }
                uint64_t v268 = 1;
              }
              if (v269 < 0 || !v268)
              {
LABEL_635:
                if (v252)
                {
LABEL_636:
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v252;
                  operator delete(v252);
                }
LABEL_712:
                uint64_t v339 = 0;
                switch(BYTE12(__src))
                {
                  case 0:
                    uint64_t v339 = __src;
                    goto LABEL_736;
                  case 1:
                    uint64_t v339 = (uint64_t)*(double *)&__src;
                    goto LABEL_736;
                  case 2:
                    uint64_t v340 = __src;
                    size_t v480 = 0;
                    v341 = (char *)(__src + 8);
                    if (*(char *)(__src + 31) < 0) {
                      v341 = *(char **)(__src + 8);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&__p, v341);
                    uint64_t v339 = std::stoll(&__p, &v480, 10);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (*(char *)(v340 + 31) < 0) {
                      uint64_t v342 = *(void *)(v340 + 16);
                    }
                    else {
                      uint64_t v342 = *(unsigned __int8 *)(v340 + 31);
                    }
                    if (v480 != v342)
                    {
                      v371 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::operator+<char>();
                      v372 = std::string::append(&v479, " cannot be interpreted as an integer");
                      long long v373 = *(_OWORD *)&v372->__r_.__value_.__l.__data_;
                      __p.__r_.__value_.__r.__words[2] = v372->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v373;
                      v372->__r_.__value_.__l.__size_ = 0;
                      v372->__r_.__value_.__r.__words[2] = 0;
                      v372->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(v371, &__p);
                      __cxa_throw(v371, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                    }
                    goto LABEL_736;
                  case 3:
                    memset(&__p, 0, sizeof(__p));
                    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(__src + 8), *(void *)(__src + 16), (uint64_t)(*(void *)(__src + 16) - *(void *)(__src + 8)) >> 3);
                    turi::flexible_type_fail(0);
                    if (__p.__r_.__value_.__r.__words[0])
                    {
                      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    goto LABEL_735;
                  case 4:
                    memset(&__p, 0, sizeof(__p));
                    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(__src + 8), *(uint64_t **)(__src + 16), (uint64_t)(*(void *)(__src + 16) - *(void *)(__src + 8)) >> 4);
                    turi::flexible_type_fail(0);
                    v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
                    goto LABEL_735;
                  case 5:
                    memset(&__p, 0, sizeof(__p));
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(__src + 8), *(uint64_t **)(__src + 16), (uint64_t)(*(void *)(__src + 16) - *(void *)(__src + 8)) >> 5);
                    turi::flexible_type_fail(0);
                    v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
                    goto LABEL_735;
                  case 6:
                    uint64_t v339 = (uint64_t)((void)__src << 8) >> 8;
                    goto LABEL_736;
                  case 7:
                    goto LABEL_736;
                  case 8:
                    uint64_t v343 = __src;
                    v344 = *(atomic_uint **)(__src + 16);
                    v475[0] = *(void **)(__src + 8);
                    v475[1] = v344;
                    if (v344) {
                      atomic_fetch_add_explicit(v344 + 2, 1u, memory_order_relaxed);
                    }
                    long long v345 = *(_OWORD *)(v343 + 24);
                    long long v346 = *(_OWORD *)(v343 + 56);
                    long long v477 = *(_OWORD *)(v343 + 40);
                    long long v478 = v346;
                    long long v476 = v345;
                    turi::flexible_type_fail(0);
                    boost::detail::shared_count::~shared_count((atomic_uint **)&v475[1]);
                    goto LABEL_735;
                  case 9:
                    turi::flexible_type_impl::ndarray<double>::ndarray(&__p, __src + 8);
                    turi::flexible_type_fail(0);
                    if (v486)
                    {
                      v487 = v486;
                      operator delete(v486);
                    }
                    if (__p.__r_.__value_.__r.__words[2])
                    {
                      v484 = (void *)__p.__r_.__value_.__r.__words[2];
                      operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                    }
                    if (__p.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                    }
LABEL_735:
                    uint64_t v339 = 0;
LABEL_736:
                    uint64_t v467 = v339;
                    switch(BYTE12(__src))
                    {
                      case 2:
                        if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v347 = (void *)__src;
                          if ((void)__src)
                          {
                            if (*(char *)(__src + 31) < 0) {
                              operator delete(*(void **)(__src + 8));
                            }
                            v348 = v347;
                            uint64_t v349 = 0x1012C404EF22A49;
                            goto LABEL_763;
                          }
                        }
                        break;
                      case 3:
                        if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v355 = (void *)__src;
                          if ((void)__src)
                          {
                            v356 = *(void **)(__src + 8);
                            if (v356)
                            {
                              *(void *)(__src + 16) = v356;
                              operator delete(v356);
                            }
                            v348 = v355;
                            uint64_t v349 = 0x1080C409938AC02;
                            goto LABEL_763;
                          }
                        }
                        break;
                      case 4:
                        if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v350 = (void *)__src;
                          if ((void)__src)
                          {
                            __p.__r_.__value_.__r.__words[0] = __src + 8;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_762;
                          }
                        }
                        break;
                      case 5:
                        if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v350 = (void *)__src;
                          if ((void)__src)
                          {
                            __p.__r_.__value_.__r.__words[0] = __src + 8;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_762:
                            v348 = v350;
                            uint64_t v349 = 0x1020C405E66F15BLL;
                            goto LABEL_763;
                          }
                        }
                        break;
                      case 8:
                        if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          uint64_t v357 = __src;
                          if ((void)__src)
                          {
                            boost::detail::shared_count::~shared_count((atomic_uint **)(__src + 16));
                            MEMORY[0x22A614FA0](v357, 0x1030C40F1F0227BLL);
                          }
                          *(void *)&long long __src = 0;
                        }
                        break;
                      case 9:
                        if (atomic_fetch_add((atomic_ullong *volatile)__src, 0xFFFFFFFFFFFFFFFFLL) == 1)
                        {
                          v351 = (void *)__src;
                          if ((void)__src)
                          {
                            v352 = *(void **)(__src + 48);
                            if (v352)
                            {
                              *(void *)(__src + 56) = v352;
                              operator delete(v352);
                            }
                            v353 = (void *)v351[3];
                            if (v353)
                            {
                              v351[4] = v353;
                              operator delete(v353);
                            }
                            v354 = (std::__shared_weak_count *)v351[2];
                            if (v354) {
                              std::__shared_weak_count::__release_shared[abi:ne180100](v354);
                            }
                            v348 = v351;
                            uint64_t v349 = 0x1030C407B73B9F7;
LABEL_763:
                            MEMORY[0x22A614FA0](v348, v349);
                          }
                        }
                        break;
                      default:
                        break;
                    }
                    *(void *)&long long __src = 0;
                    DWORD2(__src) = 0;
                    BYTE12(__src) = 0;
                    if (v462 < 0) {
                      operator delete((void *)v461[0]);
                    }
                    if (SHIBYTE(v464) < 0) {
                      operator delete((void *)__idx[0]);
                    }
                    v358 = *v3;
                    v359 = (std::__shared_weak_count *)v3[1];
                    if (v359) {
                      atomic_fetch_add_explicit(&v359->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v465;
                    v360 = (uint64_t *)std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__emplace_unique_key_args<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::piecewise_construct_t const&,std::tuple<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id const&>,std::tuple<>>((uint64_t **)&v468, (uint64_t *)&v465, (uint64_t)&std::piecewise_construct, &__p);
                    v361 = (uint64_t **)v360[8];
                    unint64_t v362 = v360[9];
                    if ((unint64_t)v361 >= v362)
                    {
                      uint64_t v364 = v360[7];
                      unint64_t v365 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v361 - v364) >> 3);
                      unint64_t v366 = v365 + 1;
                      if (v365 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v367 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v362 - v364) >> 3);
                      if (2 * v367 > v366) {
                        unint64_t v366 = 2 * v367;
                      }
                      if (v367 >= 0x555555555555555) {
                        unint64_t v368 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v368 = v366;
                      }
                      v485 = v360 + 9;
                      if (v368) {
                        v369 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v360 + 9), v368);
                      }
                      else {
                        v369 = 0;
                      }
                      v370 = (uint64_t **)&v369[3 * v365];
                      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v369;
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v370;
                      v484 = &v369[3 * v368];
                      *v370 = v358;
                      v370[1] = (uint64_t *)v359;
                      if (v359) {
                        atomic_fetch_add_explicit(&v359->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v369[3 * v365 + 2] = 0;
                      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v370 + 3);
                      std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>::__swap_out_circular_buffer(v360 + 7, &__p);
                      v363 = (void *)v360[8];
                      std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      *v361 = v358;
                      v361[1] = (uint64_t *)v359;
                      if (v359) {
                        atomic_fetch_add_explicit(&v359->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v361[2] = 0;
                      v363 = v361 + 3;
                    }
                    v360[8] = (uint64_t)v363;
                    if (v359)
                    {
                      unint64_t v103 = v359;
LABEL_792:
                      std::__shared_weak_count::__release_shared[abi:ne180100](v103);
                    }
                    goto LABEL_793;
                  default:
                    goto LABEL_914;
                }
              }
            }
          }
        }
      case 6:
        std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
        uint64_t v8 = turi::query_eval::node_info::any_p<turi::sframe>(v4, (uint64_t)&__p);
        uint64_t v9 = *(void **)v8;
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v465 = v9;
        uint64_t v11 = *v3;
        std::string::basic_string[abi:ne180100]<0>(__idx, "begin_index");
        uint64_t v12 = (unsigned char *)turi::query_eval::node_info::p(v11, (uint64_t)__idx);
        uint64_t v13 = 0;
        switch(v12[12])
        {
          case 0:
            uint64_t v13 = *(void *)v12;
            goto LABEL_95;
          case 1:
            uint64_t v13 = (uint64_t)*(double *)v12;
            goto LABEL_95;
          case 2:
            uint64_t v35 = *(void *)v12;
            uint64_t v36 = (char **)(*(void *)v12 + 8);
            v461[0] = 0;
            uint64_t v37 = (char *)v36;
            if (*(char *)(v35 + 31) < 0) {
              uint64_t v37 = *v36;
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v37);
            uint64_t v13 = std::stoll(&__p, v461, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (*(char *)(v35 + 31) < 0) {
              uint64_t v38 = *(void *)(v35 + 16);
            }
            else {
              uint64_t v38 = *(unsigned __int8 *)(v35 + 31);
            }
            if (v461[0] != v38)
            {
              v447 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v448 = std::string::append(&v479, " cannot be interpreted as an integer");
              long long v449 = *(_OWORD *)&v448->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v448->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v449;
              v448->__r_.__value_.__l.__size_ = 0;
              v448->__r_.__value_.__r.__words[2] = 0;
              v448->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v447, &__p);
              __cxa_throw(v447, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_95;
          case 3:
            uint64_t v34 = *(void *)v12;
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v34 + 8), *(void *)(v34 + 16), (uint64_t)(*(void *)(v34 + 16) - *(void *)(v34 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_94;
          case 4:
            uint64_t v43 = *(void *)v12;
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v43 + 8), *(uint64_t **)(v43 + 16), (uint64_t)(*(void *)(v43 + 16) - *(void *)(v43 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
            goto LABEL_94;
          case 5:
            uint64_t v44 = *(void *)v12;
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v44 + 8), *(uint64_t **)(v44 + 16), (uint64_t)(*(void *)(v44 + 16) - *(void *)(v44 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
            goto LABEL_94;
          case 6:
            uint64_t v13 = (uint64_t)(*(void *)v12 << 8) >> 8;
            goto LABEL_95;
          case 7:
            goto LABEL_95;
          case 8:
            uint64_t v45 = *(void *)v12;
            uint64_t v46 = *(atomic_uint **)(*(void *)v12 + 16);
            v475[0] = *(void **)(*(void *)v12 + 8);
            v475[1] = v46;
            if (v46) {
              atomic_fetch_add_explicit(v46 + 2, 1u, memory_order_relaxed);
            }
            long long v47 = *(_OWORD *)(v45 + 24);
            long long v48 = *(_OWORD *)(v45 + 56);
            long long v477 = *(_OWORD *)(v45 + 40);
            long long v478 = v48;
            long long v476 = v47;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&v475[1]);
            goto LABEL_94;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v12 + 8);
            turi::flexible_type_fail(0);
            if (v486)
            {
              v487 = v486;
              operator delete(v486);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              v484 = (void *)__p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
LABEL_94:
            uint64_t v13 = 0;
LABEL_95:
            uint64_t v466 = v13;
            if (SHIBYTE(v464) < 0) {
              operator delete((void *)__idx[0]);
            }
            uint64_t v49 = *v3;
            std::string::basic_string[abi:ne180100]<0>(__idx, "end_index");
            uint64_t v50 = (unsigned char *)turi::query_eval::node_info::p(v49, (uint64_t)__idx);
            uint64_t v51 = 0;
            switch(v50[12])
            {
              case 0:
                uint64_t v51 = *(void *)v50;
                goto LABEL_182;
              case 1:
                uint64_t v51 = (uint64_t)*(double *)v50;
                goto LABEL_182;
              case 2:
                uint64_t v80 = *(void *)v50;
                double v81 = (char **)(*(void *)v50 + 8);
                v461[0] = 0;
                double v82 = (char *)v81;
                if (*(char *)(v80 + 31) < 0) {
                  double v82 = *v81;
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, v82);
                uint64_t v51 = std::stoll(&__p, v461, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (*(char *)(v80 + 31) < 0) {
                  uint64_t v83 = *(void *)(v80 + 16);
                }
                else {
                  uint64_t v83 = *(unsigned __int8 *)(v80 + 31);
                }
                if (v461[0] != v83)
                {
                  v444 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v445 = std::string::append(&v479, " cannot be interpreted as an integer");
                  long long v446 = *(_OWORD *)&v445->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v445->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v446;
                  v445->__r_.__value_.__l.__size_ = 0;
                  v445->__r_.__value_.__r.__words[2] = 0;
                  v445->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v444, &__p);
                  __cxa_throw(v444, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_182;
              case 3:
                uint64_t v79 = *(void *)v50;
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v79 + 8), *(void *)(v79 + 16), (uint64_t)(*(void *)(v79 + 16) - *(void *)(v79 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_181;
              case 4:
                uint64_t v84 = *(void *)v50;
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v84 + 8), *(uint64_t **)(v84 + 16), (uint64_t)(*(void *)(v84 + 16) - *(void *)(v84 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
                goto LABEL_181;
              case 5:
                uint64_t v85 = *(void *)v50;
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v85 + 8), *(uint64_t **)(v85 + 16), (uint64_t)(*(void *)(v85 + 16) - *(void *)(v85 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
                goto LABEL_181;
              case 6:
                uint64_t v51 = (uint64_t)(*(void *)v50 << 8) >> 8;
                goto LABEL_182;
              case 7:
                goto LABEL_182;
              case 8:
                uint64_t v86 = *(void *)v50;
                uint64_t v87 = *(atomic_uint **)(*(void *)v50 + 16);
                v475[0] = *(void **)(*(void *)v50 + 8);
                v475[1] = v87;
                if (v87) {
                  atomic_fetch_add_explicit(v87 + 2, 1u, memory_order_relaxed);
                }
                long long v88 = *(_OWORD *)(v86 + 24);
                long long v89 = *(_OWORD *)(v86 + 56);
                long long v477 = *(_OWORD *)(v86 + 40);
                long long v478 = v89;
                long long v476 = v88;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((atomic_uint **)&v475[1]);
                goto LABEL_181;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v50 + 8);
                turi::flexible_type_fail(0);
                if (v486)
                {
                  v487 = v486;
                  operator delete(v486);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v484 = (void *)__p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                if (__p.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                }
LABEL_181:
                uint64_t v51 = 0;
LABEL_182:
                uint64_t v467 = v51;
                if (SHIBYTE(v464) < 0) {
                  operator delete((void *)__idx[0]);
                }
                long long v90 = *v3;
                unint64_t v91 = (std::__shared_weak_count *)v3[1];
                if (v91) {
                  atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v465;
                std::string::size_type v92 = (uint64_t *)std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__emplace_unique_key_args<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::piecewise_construct_t const&,std::tuple<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id const&>,std::tuple<>>((uint64_t **)&v468, (uint64_t *)&v465, (uint64_t)&std::piecewise_construct, &__p);
                uint64_t v93 = (uint64_t **)v92[8];
                unint64_t v94 = v92[9];
                if ((unint64_t)v93 >= v94)
                {
                  uint64_t v96 = v92[7];
                  unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v93 - v96) >> 3);
                  unint64_t v98 = v97 + 1;
                  if (v97 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    std::vector<float>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - v96) >> 3);
                  if (2 * v99 > v98) {
                    unint64_t v98 = 2 * v99;
                  }
                  if (v99 >= 0x555555555555555) {
                    unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v100 = v98;
                  }
                  v485 = v92 + 9;
                  if (v100) {
                    uint64_t v101 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v92 + 9), v100);
                  }
                  else {
                    uint64_t v101 = 0;
                  }
                  uint64_t v102 = (uint64_t **)&v101[3 * v97];
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
                  v484 = &v101[3 * v100];
                  *uint64_t v102 = v90;
                  v102[1] = (uint64_t *)v91;
                  if (v91) {
                    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v101[3 * v97 + 2] = 0;
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v102 + 3);
                  std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>::__swap_out_circular_buffer(v92 + 7, &__p);
                  std::string v95 = (void *)v92[8];
                  std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
                }
                else
                {
                  *uint64_t v93 = v90;
                  v93[1] = (uint64_t *)v91;
                  if (v91) {
                    atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v93[2] = 0;
                  std::string v95 = v93 + 3;
                }
                v92[8] = (uint64_t)v95;
                if (v91) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v91);
                }
                if (!v10) {
                  goto LABEL_793;
                }
                unint64_t v103 = v10;
                break;
              default:
                goto LABEL_914;
            }
            goto LABEL_792;
          default:
            goto LABEL_914;
        }
      case 7:
        std::string::basic_string[abi:ne180100]<0>(&v465, "begin_index");
        uint64_t v6 = (unsigned char *)turi::query_eval::node_info::p(v4, (uint64_t)&v465);
        std::string::size_type v7 = 0;
        switch(v6[12])
        {
          case 0:
            std::string::size_type v7 = *(void *)v6;
            goto LABEL_44;
          case 1:
            std::string::size_type v7 = (uint64_t)*(double *)v6;
            goto LABEL_44;
          case 2:
            uint64_t v21 = *(void *)v6;
            unint64_t v22 = (char **)(*(void *)v6 + 8);
            __idx[0] = 0;
            int v23 = (char *)v22;
            if (*(char *)(v21 + 31) < 0) {
              int v23 = *v22;
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v23);
            std::string::size_type v7 = std::stoll(&__p, __idx, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (*(char *)(v21 + 31) < 0) {
              uint64_t v24 = *(void *)(v21 + 16);
            }
            else {
              uint64_t v24 = *(unsigned __int8 *)(v21 + 31);
            }
            if (__idx[0] != v24)
            {
              v441 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              v442 = std::string::append(&v479, " cannot be interpreted as an integer");
              long long v443 = *(_OWORD *)&v442->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v442->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v443;
              v442->__r_.__value_.__l.__size_ = 0;
              v442->__r_.__value_.__r.__words[2] = 0;
              v442->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v441, &__p);
              __cxa_throw(v441, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_44;
          case 3:
            uint64_t v20 = *(void *)v6;
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v20 + 8), *(void *)(v20 + 16), (uint64_t)(*(void *)(v20 + 16) - *(void *)(v20 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_43;
          case 4:
            uint64_t v25 = *(void *)v6;
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
            goto LABEL_43;
          case 5:
            uint64_t v26 = *(void *)v6;
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v26 + 8), *(uint64_t **)(v26 + 16), (uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
            goto LABEL_43;
          case 6:
            std::string::size_type v7 = (uint64_t)(*(void *)v6 << 8) >> 8;
            goto LABEL_44;
          case 7:
            goto LABEL_44;
          case 8:
            uint64_t v27 = *(void *)v6;
            uint64_t v28 = *(atomic_uint **)(*(void *)v6 + 16);
            v475[0] = *(void **)(*(void *)v6 + 8);
            v475[1] = v28;
            if (v28) {
              atomic_fetch_add_explicit(v28 + 2, 1u, memory_order_relaxed);
            }
            long long v29 = *(_OWORD *)(v27 + 24);
            long long v30 = *(_OWORD *)(v27 + 56);
            long long v477 = *(_OWORD *)(v27 + 40);
            long long v478 = v30;
            long long v476 = v29;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&v475[1]);
            goto LABEL_43;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v6 + 8);
            turi::flexible_type_fail(0);
            if (v486)
            {
              v487 = v486;
              operator delete(v486);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              v484 = (void *)__p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
LABEL_43:
            std::string::size_type v7 = 0;
LABEL_44:
            if (SHIBYTE(v467) < 0) {
              operator delete(v465);
            }
            long long v31 = *v3;
            std::string::basic_string[abi:ne180100]<0>(&v465, "end_index");
            char v32 = (unsigned char *)turi::query_eval::node_info::p(v31, (uint64_t)&v465);
            uint64_t v33 = 0;
            switch(v32[12])
            {
              case 0:
                uint64_t v33 = *(void *)v32;
                goto LABEL_130;
              case 1:
                uint64_t v33 = (uint64_t)*(double *)v32;
                goto LABEL_130;
              case 2:
                uint64_t v53 = *(void *)v32;
                unint64_t v54 = (char **)(*(void *)v32 + 8);
                __idx[0] = 0;
                uint64_t v55 = (char *)v54;
                if (*(char *)(v53 + 31) < 0) {
                  uint64_t v55 = *v54;
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, v55);
                uint64_t v33 = std::stoll(&__p, __idx, 10);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (*(char *)(v53 + 31) < 0) {
                  uint64_t v56 = *(void *)(v53 + 16);
                }
                else {
                  uint64_t v56 = *(unsigned __int8 *)(v53 + 31);
                }
                if (__idx[0] != v56)
                {
                  v435 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::operator+<char>();
                  v436 = std::string::append(&v479, " cannot be interpreted as an integer");
                  long long v437 = *(_OWORD *)&v436->__r_.__value_.__l.__data_;
                  __p.__r_.__value_.__r.__words[2] = v436->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v437;
                  v436->__r_.__value_.__l.__size_ = 0;
                  v436->__r_.__value_.__r.__words[2] = 0;
                  v436->__r_.__value_.__r.__words[0] = 0;
                  std::runtime_error::runtime_error(v435, &__p);
                  __cxa_throw(v435, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                }
                goto LABEL_130;
              case 3:
                uint64_t v52 = *(void *)v32;
                memset(&__p, 0, sizeof(__p));
                std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v52 + 8), *(void *)(v52 + 16), (uint64_t)(*(void *)(v52 + 16) - *(void *)(v52 + 8)) >> 3);
                turi::flexible_type_fail(0);
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                goto LABEL_129;
              case 4:
                uint64_t v57 = *(void *)v32;
                memset(&__p, 0, sizeof(__p));
                std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v57 + 8), *(uint64_t **)(v57 + 16), (uint64_t)(*(void *)(v57 + 16) - *(void *)(v57 + 8)) >> 4);
                turi::flexible_type_fail(0);
                v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
                goto LABEL_129;
              case 5:
                uint64_t v58 = *(void *)v32;
                memset(&__p, 0, sizeof(__p));
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v58 + 8), *(uint64_t **)(v58 + 16), (uint64_t)(*(void *)(v58 + 16) - *(void *)(v58 + 8)) >> 5);
                turi::flexible_type_fail(0);
                v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v479);
                goto LABEL_129;
              case 6:
                uint64_t v33 = (uint64_t)(*(void *)v32 << 8) >> 8;
                goto LABEL_130;
              case 7:
                goto LABEL_130;
              case 8:
                uint64_t v59 = *(void *)v32;
                uint64_t v60 = *(atomic_uint **)(*(void *)v32 + 16);
                v475[0] = *(void **)(*(void *)v32 + 8);
                v475[1] = v60;
                if (v60) {
                  atomic_fetch_add_explicit(v60 + 2, 1u, memory_order_relaxed);
                }
                long long v61 = *(_OWORD *)(v59 + 24);
                long long v62 = *(_OWORD *)(v59 + 56);
                long long v477 = *(_OWORD *)(v59 + 40);
                long long v478 = v62;
                long long v476 = v61;
                turi::flexible_type_fail(0);
                boost::detail::shared_count::~shared_count((atomic_uint **)&v475[1]);
                goto LABEL_129;
              case 9:
                turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v32 + 8);
                turi::flexible_type_fail(0);
                if (v486)
                {
                  v487 = v486;
                  operator delete(v486);
                }
                if (__p.__r_.__value_.__r.__words[2])
                {
                  v484 = (void *)__p.__r_.__value_.__r.__words[2];
                  operator delete((void *)__p.__r_.__value_.__r.__words[2]);
                }
                if (__p.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                }
LABEL_129:
                uint64_t v33 = 0;
LABEL_130:
                if (SHIBYTE(v467) < 0) {
                  operator delete(v465);
                }
                uint64_t v63 = *v3;
                std::string::basic_string[abi:ne180100]<0>(v475, "sframe");
                long long v64 = (const turi::sframe *)turi::query_eval::node_info::any_p<turi::sframe>(v63, (uint64_t)v475);
                turi::sframe::sframe((turi::sframe *)&__p, v64);
                if (SBYTE7(v476) < 0) {
                  operator delete(v475[0]);
                }
                if (v484)
                {
                  for (unint64_t i = 0; i < (unint64_t)v484; ++i)
                  {
                    turi::sframe::select_column((uint64_t)&__p, i, v475);
                    v479.__r_.__value_.__l.__data_ = (std::string::pointer)v475[0];
                    if (v475[1]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v475[1]);
                    }
                    v479.__r_.__value_.__l.__size_ = v7;
                    v479.__r_.__value_.__r.__words[2] = v33;
                    long long v66 = *v3;
                    unint64_t v67 = (std::__shared_weak_count *)v3[1];
                    if (v67) {
                      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    v475[0] = &v479;
                    std::string::size_type v68 = (uint64_t *)std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__emplace_unique_key_args<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::piecewise_construct_t const&,std::tuple<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id const&>,std::tuple<>>((uint64_t **)&v468, (uint64_t *)&v479, (uint64_t)&std::piecewise_construct, (_OWORD **)v475);
                    long long v69 = (uint64_t **)v68[8];
                    unint64_t v70 = v68[9];
                    if ((unint64_t)v69 >= v70)
                    {
                      uint64_t v72 = v68[7];
                      unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v69 - v72) >> 3);
                      unint64_t v74 = v73 + 1;
                      if (v73 + 1 > 0xAAAAAAAAAAAAAAALL) {
                        std::vector<float>::__throw_length_error[abi:ne180100]();
                      }
                      unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v72) >> 3);
                      if (2 * v75 > v74) {
                        unint64_t v74 = 2 * v75;
                      }
                      if (v75 >= 0x555555555555555) {
                        unint64_t v76 = 0xAAAAAAAAAAAAAAALL;
                      }
                      else {
                        unint64_t v76 = v74;
                      }
                      *(void *)&long long v477 = v68 + 9;
                      if (v76) {
                        unsigned int v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v68 + 9), v76);
                      }
                      else {
                        unsigned int v77 = 0;
                      }
                      uint64_t v78 = (uint64_t **)&v77[24 * v73];
                      v475[0] = v77;
                      v475[1] = v78;
                      *((void *)&v476 + 1) = &v77[24 * v76];
                      *uint64_t v78 = v66;
                      v78[1] = (uint64_t *)v67;
                      if (v67) {
                        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      *(void *)&v77[24 * v73 + 16] = i;
                      *(void *)&long long v476 = v78 + 3;
                      std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>::__swap_out_circular_buffer(v68 + 7, v475);
                      std::string v71 = (void *)v68[8];
                      std::__split_buffer<turi::query_eval::execution_node::input_node>::~__split_buffer(v475);
                    }
                    else
                    {
                      *long long v69 = v66;
                      v69[1] = (uint64_t *)v67;
                      if (v67) {
                        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v69[2] = (uint64_t *)i;
                      std::string v71 = v69 + 3;
                    }
                    v68[8] = (uint64_t)v71;
                    if (v67) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
                    }
                  }
                }
                turi::sframe::~sframe((turi::sframe *)&__p);
                goto LABEL_793;
              default:
                goto LABEL_914;
            }
          default:
            break;
        }
LABEL_914:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        return result;
    }
LABEL_793:
    v3 += 2;
  }
  while (v3 != v450);
  v374 = (uint64_t *)v468;
  if (v468 == v469)
  {
LABEL_844:
    char v375 = 0;
    goto LABEL_845;
  }
  char v375 = 0;
  while (1)
  {
    *(_OWORD *)v475 = *((_OWORD *)v374 + 2);
    v376 = (void *)v374[7];
    long long v476 = (unint64_t)v374[6];
    long long v477 = 0uLL;
    std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>::__init_with_size[abi:ne180100]<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>((void *)&v476 + 1, v376, (void *)v374[8], 0xAAAAAAAAAAAAAAABLL * ((v374[8] - (uint64_t)v376) >> 3));
    v378 = (turi::query_eval::node_info **)*((void *)&v476 + 1);
    v377 = (turi::query_eval::node_info **)v477;
    if ((void)v477 - *((void *)&v476 + 1) != 24)
    {
      if (*((void *)&v476 + 1) == (void)v477) {
        goto LABEL_825;
      }
      uint64_t v379 = 0;
      uint64_t v380 = 0;
      do
      {
        int v381 = *((_DWORD *)*v378 + 4);
        if (v381 == 5)
        {
          ++v379;
        }
        else if (v381 == 7 && turi::query_eval::node_info::num_columns(*v378) != 1)
        {
          ++v380;
        }
        v378 += 3;
      }
      while (v378 != v377);
      if (!v379)
      {
        if (v380)
        {
          if (v380 != 1)
          {
            *(_OWORD *)&v479.__r_.__value_.__r.__words[1] = 0uLL;
            v479.__r_.__value_.__r.__words[0] = (std::string::size_type)&v479.__r_.__value_.__l.__size_;
            std::vector<std::vector<unsigned long>>::vector(&v465, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v477 - *((void *)&v476 + 1)) >> 3));
            __idx[0] = 0;
            __idx[1] = 0;
            uint64_t v464 = 0;
            uint64_t v408 = *((void *)&v476 + 1);
            if ((void)v477 != *((void *)&v476 + 1))
            {
              unint64_t v409 = 0;
              do
              {
                uint64_t v410 = *(void *)(v408 + 24 * v409);
                int v411 = *(_DWORD *)(v410 + 16);
                if (v411 == 6)
                {
                  std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
                  v423 = (std::string::size_type *)turi::query_eval::node_info::any_p<turi::sframe>((uint64_t *)v410, (uint64_t)&__p);
                  std::string::size_type v424 = *v423;
                  size_t v425 = v423[1];
                  v461[0] = *v423;
                  v461[1] = v425;
                  if (v425) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v425 + 8), 1uLL, memory_order_relaxed);
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__p.__r_.__value_.__l.__data_);
                    std::string::size_type v424 = v461[0];
                  }
                  v426 = (std::string *)v479.__r_.__value_.__l.__size_;
                  p_std::string::size_type size = &v479.__r_.__value_.__l.__size_;
                  if (!v479.__r_.__value_.__l.__size_) {
                    goto LABEL_897;
                  }
                  v428 = (std::string *)&v479.__r_.__value_.__r.__words[1];
                  do
                  {
                    v429 = v426;
                    v430 = v428;
                    std::string::size_type v431 = v426[1].__r_.__value_.__l.__size_;
                    if (v431 >= v424) {
                      v428 = v426;
                    }
                    else {
                      v426 = (std::string *)((char *)v426 + 8);
                    }
                    v426 = (std::string *)v426->__r_.__value_.__r.__words[0];
                  }
                  while (v426);
                  p_std::string::size_type size = &v479.__r_.__value_.__l.__size_;
                  if (v428 != (std::string *)&v479.__r_.__value_.__r.__words[1]
                    && (v431 >= v424 ? (v432 = v429) : (v432 = v430),
                        p_std::string::size_type size = (std::string::size_type *)v428,
                        v432[1].__r_.__value_.__l.__size_ == v424))
                  {
                    if (v431 >= v424) {
                      v434 = v429;
                    }
                    else {
                      v434 = v430;
                    }
                    std::string::size_type v433 = v434[1].__r_.__value_.__r.__words[2];
                  }
                  else
                  {
LABEL_897:
                    std::string::size_type v433 = v479.__r_.__value_.__r.__words[2];
                    __p.__r_.__value_.__r.__words[0] = v424;
                    __p.__r_.__value_.__l.__size_ = v479.__r_.__value_.__r.__words[2];
                    std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>((uint64_t **)&v479, p_size, (unint64_t *)&__p, &__p);
                    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::push_back[abi:ne180100]((uint64_t *)__idx, (long long *)v461);
                  }
                  *(void *)&long long __src = v433;
                  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)v465 + 24 * v409, (char *)&__src, (uint64_t)&__src + 8, 1uLL);
                  if (v461[1]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v461[1]);
                  }
                }
                else if (v411 == 7)
                {
                  std::string::basic_string[abi:ne180100]<0>(v461, "sframe");
                  v412 = (const turi::sframe *)turi::query_eval::node_info::any_p<turi::sframe>((uint64_t *)v410, (uint64_t)v461);
                  turi::sframe::sframe((turi::sframe *)&__p, v412);
                  if (v462 < 0) {
                    operator delete((void *)v461[0]);
                  }
                  std::vector<unsigned long>::resize((uint64_t)v465 + 24 * v409, (unint64_t)v484);
                  if (v484)
                  {
                    for (unint64_t j = 0; j < (unint64_t)v484; ++j)
                    {
                      turi::sframe::select_column((uint64_t)&__p, j, &__src);
                      v414 = (std::string *)v479.__r_.__value_.__l.__size_;
                      v415 = &v479.__r_.__value_.__l.__size_;
                      if (!v479.__r_.__value_.__l.__size_) {
                        goto LABEL_873;
                      }
                      v416 = (std::string *)&v479.__r_.__value_.__r.__words[1];
                      do
                      {
                        v417 = v414;
                        v418 = v416;
                        unint64_t v419 = v414[1].__r_.__value_.__l.__size_;
                        if (v419 >= (unint64_t)__src) {
                          v416 = v414;
                        }
                        else {
                          v414 = (std::string *)((char *)v414 + 8);
                        }
                        v414 = (std::string *)v414->__r_.__value_.__r.__words[0];
                      }
                      while (v414);
                      v415 = &v479.__r_.__value_.__l.__size_;
                      if (v416 != (std::string *)&v479.__r_.__value_.__r.__words[1]
                        && (v419 >= (unint64_t)__src ? (v420 = v417) : (v420 = v418),
                            v415 = (std::string::size_type *)v416,
                            v420[1].__r_.__value_.__l.__size_ == (void)__src))
                      {
                        if (v419 >= (unint64_t)__src) {
                          v422 = v417;
                        }
                        else {
                          v422 = v418;
                        }
                        std::string::size_type v421 = v422[1].__r_.__value_.__r.__words[2];
                      }
                      else
                      {
LABEL_873:
                        std::string::size_type v421 = v479.__r_.__value_.__r.__words[2];
                        v461[0] = __src;
                        v461[1] = v479.__r_.__value_.__r.__words[2];
                        std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>((uint64_t **)&v479, v415, v461, v461);
                        std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::push_back[abi:ne180100]((uint64_t *)__idx, &__src);
                      }
                      *(void *)(*((void *)v465 + 3 * v409) + 8 * j) = v421;
                      if (*((void *)&__src + 1)) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__src
                      }
                                                                                 + 1));
                    }
                  }
                  turi::sframe::~sframe((turi::sframe *)&__p);
                }
                ++v409;
                uint64_t v408 = *((void *)&v476 + 1);
              }
              while (v409 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v477 - *((void *)&v476 + 1)) >> 3));
            }
            memset(&__p, 0, sizeof(__p));
            turi::sframe::sframe((uint64_t)v481, (uint64_t **)__idx, (const void ***)&__p, 1);
            turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v481);
          }
          uint64_t v383 = *((void *)&v476 + 1);
          uint64_t v384 = v477;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v477 - *((void *)&v476 + 1)) >> 3) >= 2)
          {
            uint64_t v385 = 24;
            unint64_t v386 = 1;
            do
            {
              v387 = *(turi::query_eval::node_info **)(v383 + v385);
              if (*((_DWORD *)v387 + 4) == 7)
              {
                unint64_t v388 = turi::query_eval::node_info::num_columns(v387);
                uint64_t v383 = *((void *)&v476 + 1);
                if (v388 > 1) {
                  goto LABEL_822;
                }
                uint64_t v384 = v477;
              }
              ++v386;
              v385 += 24;
            }
            while (v386 < 0xAAAAAAAAAAAAAAABLL * ((v384 - v383) >> 3));
          }
          unint64_t v386 = 0;
LABEL_822:
          v389 = *(uint64_t **)(v383 + 24 * v386);
          uint64_t v391 = *v389;
          uint64_t v390 = v389[1];
          v452[0] = v391;
          v452[1] = v390;
          if (v390)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v390 + 8), 1uLL, memory_order_relaxed);
            uint64_t v383 = *((void *)&v476 + 1);
          }
          uint64_t v392 = *(void *)(v383 + 24 * v386 + 16);
          v393 = operator new(8uLL);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v393;
          void *v393 = v392;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)(v393 + 1);
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v393 + 1);
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v452, (uint64_t **)&__p);
        }
LABEL_825:
        v394 = (uint64_t **)*((void *)&v476 + 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v477 - *((void *)&v476 + 1)) >> 3) >= 2)
        {
          uint64_t v395 = 0;
          unint64_t v396 = 1;
          do
          {
            v455 = v394[v395 + 3];
            v397 = (std::__shared_weak_count *)v394[v395 + 4];
            v456 = v397;
            if (v397)
            {
              atomic_fetch_add_explicit(&v397->__shared_owners_, 1uLL, memory_order_relaxed);
              v394 = (uint64_t **)*((void *)&v476 + 1);
            }
            v398 = *v394;
            uint64_t v400 = *v398;
            v399 = (std::__shared_weak_count *)v398[1];
            uint64_t v453 = v400;
            v454 = v399;
            if (v399) {
              atomic_fetch_add_explicit(&v399->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            turi::query_eval::optimization_engine::replace_node(a2, &v455, &v453);
            if (v454) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v454);
            }
            if (v456) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v456);
            }
            ++v396;
            v394 = (uint64_t **)*((void *)&v476 + 1);
            v395 += 3;
          }
          while (v396 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v477 - *((void *)&v476 + 1)) >> 3));
        }
        char v375 = 1;
        goto LABEL_837;
      }
      v382 = (uint64_t **)*((void *)&v476 + 1);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v477 - *((void *)&v476 + 1)) >> 3) >= 2) {
        break;
      }
    }
LABEL_837:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v476 + 8;
    std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v401 = (char *)v374[1];
    if (v401)
    {
      do
      {
        v402 = (char **)v401;
        v401 = *(char **)v401;
      }
      while (v401);
    }
    else
    {
      do
      {
        v402 = (char **)v374[2];
        BOOL v18 = *v402 == (char *)v374;
        v374 = (uint64_t *)v402;
      }
      while (!v18);
    }
    v374 = (uint64_t *)v402;
    if (v402 == v469) {
      goto LABEL_845;
    }
  }
  v404 = *(std::__shared_weak_count **)(*((void *)&v476 + 1) + 32);
  v459 = *(uint64_t **)(*((void *)&v476 + 1) + 24);
  v460 = v404;
  if (v404)
  {
    atomic_fetch_add_explicit(&v404->__shared_owners_, 1uLL, memory_order_relaxed);
    v382 = (uint64_t **)*((void *)&v476 + 1);
  }
  v405 = *v382;
  uint64_t v407 = *v405;
  v406 = (std::__shared_weak_count *)v405[1];
  uint64_t v457 = v407;
  v458 = v406;
  if (v406) {
    atomic_fetch_add_explicit(&v406->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::optimization_engine::replace_node(a2, &v459, &v457);
  if (v458) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v458);
  }
  if (v460) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v460);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v476 + 8;
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  char v375 = 1;
LABEL_845:
  std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy((uint64_t)&v468, v469[0]);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&v470, v471[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v472;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v375 & 1;
}

void sub_22405FA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  turi::sframe::~sframe((turi::sframe *)&a66);
  STACK[0x2F0] = (unint64_t)&STACK[0x300];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  STACK[0x2F0] = (unint64_t)&a38;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  a38 = &a41;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a62, (void *)a63);
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy((uint64_t)&a44, (char *)a45);
  std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a47, (void *)a48);
  a62 = &a50;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  _Unwind_Resume(a1);
}

void turi::query_eval::opt_merge_all_same_sarrays::fill_source_sets(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8 = *(void *)a2;
  uint64_t v9 = (void *)(a3 + 8);
  uint64_t v10 = *(void **)(a3 + 8);
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = (void *)(a3 + 8);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= v8;
    if (v12 >= v8) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = v10;
    }
    uint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 == v9 || (uint64_t v9 = v11, v11[4] != v8))
  {
LABEL_12:
    unint64_t v19 = v8;
    std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>((uint64_t **)a3, v9, &v19, (uint64_t *)&v19);
    if (turi::query_eval::is_source_node((unsigned __int8 *)(*(void *)a2 + 24))) {
      std::vector<std::shared_ptr<turi::query_eval::node_info const>>::push_back[abi:ne180100](a4, a2);
    }
    unint64_t v15 = *(void *)a2;
    uint64_t v16 = *(uint64_t **)(*(void *)a2 + 40);
    for (unint64_t i = *(uint64_t **)(v15 + 48); v16 != i; v16 += 2)
    {
      unint64_t v19 = *v16;
      BOOL v18 = (std::__shared_weak_count *)v16[1];
      uint64_t v20 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::opt_merge_all_same_sarrays::fill_source_sets(a1, &v19, a3, a4);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
  }
}

void sub_224060C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__emplace_unique_key_args<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::piecewise_construct_t const&,std::tuple<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__find_equal<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>((uint64_t)a1, &v11, a2);
  std::string::size_type v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    std::string::size_type v7 = operator new(0x50uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v9;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::__find_equal<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>(uint64_t a1, void *a2, uint64_t *a3)
{
  int v5 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v7 = a3[1];
    unint64_t v6 = a3[2];
    uint64_t v8 = *a3;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v4;
        uint64_t v10 = v4[4];
        if (v8 >= v10) {
          break;
        }
LABEL_4:
        uint64_t v4 = (void *)*v9;
        uint64_t result = v9;
        if (!*v9) {
          goto LABEL_20;
        }
      }
      if (v10 >= v8)
      {
        unint64_t v11 = v9[5];
        if (v7 < v11) {
          goto LABEL_4;
        }
        unint64_t v12 = v9[6];
        if (v11 >= v7 && v6 < v12) {
          goto LABEL_4;
        }
        if (v11 >= v7 && (v7 < v11 || v12 >= v6)) {
          goto LABEL_20;
        }
      }
      uint64_t result = v9 + 1;
      uint64_t v4 = (void *)v9[1];
      if (!v4) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v9 = result;
LABEL_20:
  *a2 = v9;
  return result;
}

uint64_t std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,std::reverse_iterator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>,std::reverse_iterator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>,std::reverse_iterator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,std::reverse_iterator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>,std::reverse_iterator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>,std::reverse_iterator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *(void *)(v8 + 16) = a3[2];
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,std::reverse_iterator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,std::reverse_iterator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::execution_node::input_node>,std::reverse_iterator<turi::query_eval::execution_node::input_node*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>::__init_with_size[abi:ne180100]<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_224060F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4[2] = a2[2];
      v4 += 3;
      a2 += 3;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>,turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 24;
  }
}

void std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::__map_value_compare<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>,std::less<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id>,true>,std::allocator<std::__value_type<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_id,std::vector<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out,std::allocator<turi::query_eval::opt_merge_all_same_sarrays::apply_transform(turi::query_eval::optimization_engine *,std::shared_ptr<turi::query_eval::node_info const>)::source_out>>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 56);
    std::vector<turi::query_eval::execution_node::input_node>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_to_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_union_to_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_union_to_generalized_union_project>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_union_to_generalized_union_project::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "union(...) -> gen_union_proj(...)");
}

void turi::query_eval::opt_union_to_generalized_union_project::apply_transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p = 0;
  BOOL v18 = 0;
  unint64_t v19 = 0;
  uint64_t v4 = *(void **)a3;
  if (*(void *)(*(void *)a3 + 48) != *(void *)(*(void *)a3 + 40))
  {
    unint64_t v5 = 0;
    do
    {
      for (unint64_t i = 0; i < turi::query_eval::node_info::num_columns(*(turi::query_eval::node_info **)(v4[5] + 16 * v5)); ++i)
      {
        uint64_t v7 = v18;
        if (v18 >= v19)
        {
          uint64_t v9 = (unint64_t *)__p;
          uint64_t v10 = ((char *)v18 - (unsigned char *)__p) >> 4;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 60) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v12 = (char *)v19 - (unsigned char *)__p;
          if (((char *)v19 - (unsigned char *)__p) >> 3 > v11) {
            unint64_t v11 = v12 >> 3;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::flexible_type>>((uint64_t)&v19, v13);
            uint64_t v9 = (unint64_t *)__p;
            uint64_t v7 = v18;
          }
          else
          {
            long long v14 = 0;
          }
          long long v15 = (unint64_t *)&v14[16 * v10];
          *long long v15 = v5;
          v15[1] = i;
          uint64_t v16 = v15;
          if (v7 != v9)
          {
            do
            {
              *((_OWORD *)v16 - 1) = *((_OWORD *)v7 - 1);
              v16 -= 2;
              v7 -= 2;
            }
            while (v7 != v9);
            uint64_t v9 = (unint64_t *)__p;
          }
          char v8 = v15 + 2;
          std::string __p = v16;
          BOOL v18 = v15 + 2;
          unint64_t v19 = (unint64_t *)&v14[16 * v13];
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          *BOOL v18 = v5;
          v7[1] = i;
          char v8 = v7 + 2;
        }
        BOOL v18 = v8;
        uint64_t v4 = *(void **)a3;
      }
      ++v5;
      uint64_t v4 = *(void **)a3;
    }
    while (v5 < (uint64_t)(*(void *)(*(void *)a3 + 48) - *(void *)(*(void *)a3 + 40)) >> 4);
  }
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node((void *)(*v4 + 56), (uint64_t)&__p);
}

void sub_2240613BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(void *a1, uint64_t a2)
{
  v7[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1] - *a1;
  v7[0] = v2 >> 4;
  if (v2)
  {
    uint64_t v4 = *(void **)a2;
    uint64_t v3 = *(void **)(a2 + 8);
    unint64_t v5 = ((uint64_t)v3 - *(void *)a2) >> 4;
    memset(v6, 0, sizeof(v6));
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::pair<unsigned long,unsigned long> const*>,std::__wrap_iter<std::pair<unsigned long,unsigned long> const*>>((char *)v6, v4, v3, v5);
    std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,0>(v7, "index_map");
  }
  v6[0] = v7;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,std::vector<std::pair<unsigned long,unsigned long>> const&)::{lambda(void)#1}::operator()();
}

void sub_224061538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, char a17)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy((uint64_t)&a14, a15);
  std::pair<std::string const,turi::flexible_type>::~pair(v17 - 64);
  *(void *)(v17 - 64) = &a17;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v17 - 64));
  _Unwind_Resume(a1);
}

void turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,std::vector<std::pair<unsigned long,unsigned long>> const&)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", 131);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"inputs.size()", 13);
  unint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)">=", 2);
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  uint64_t v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)">=", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  unint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/operators/generalized_union_project.hpp", "operator()", 112, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(std::vector<std::shared_ptr<turi::query_eval::planner_node>> const&,std::vector<std::pair<unsigned long,unsigned long>> const&)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224061718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::pair<unsigned long,unsigned long> const*>,std::__wrap_iter<std::pair<unsigned long,unsigned long> const*>>(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)((char *)v7 + 5) = 0;
      void *v7 = 0;
      void *v7 = *a2;
      v7[2] = 0;
      *(void *)((char *)v7 + 21) = 0;
      v7[2] = a2[1];
      v7 += 4;
      a2 += 2;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2240618A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::pair<std::string const,turi::flexible_type>::pair[abi:ne180100]<char const(&)[10],std::vector<std::pair<turi::flexible_type,turi::flexible_type>> &,0>(void *a1, char *a2)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v2[3] = 0;
  *(void *)((char *)v2 + 29) = 0;
  *((unsigned char *)v2 + 36) = 5;
  operator new();
}

void sub_224061CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  MEMORY[0x22A614FA0](v11, 0x1012C404EF22A49);
  switch(*(unsigned char *)(v10 + 36))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v14 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v14 + 31) < 0) {
        operator delete((void *)v14[1]);
      }
      char v15 = v14;
      uint64_t v16 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      BOOL v18 = (void *)v17[1];
      if (v18)
      {
        void v17[2] = (atomic_ullong)v18;
        operator delete(v18);
      }
      char v15 = v17;
      uint64_t v16 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a10);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v19 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a10 = (void **)(v19 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a10);
LABEL_18:
      char v15 = v19;
      uint64_t v16 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v20 + 2);
      char v15 = v20;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      char v15 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v16 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v15, v16);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *(void *)(v10 + 24) = 0;
      *(_DWORD *)(v10 + 32) = 0;
      *(unsigned char *)(v10 + 36) = 0;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_to_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A3F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_to_generalized_union_project>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A3F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_to_generalized_union_project>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_project_to_generalized_union_project::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "project(...) -> gen_union_proj(...)");
}

void turi::query_eval::opt_project_to_generalized_union_project::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  uint64_t v5 = *(void *)turi::query_eval::node_info::p(v4, (uint64_t)&__p);
  if (v17 < 0) {
    operator delete(__p);
  }
  std::vector<std::pair<unsigned long,unsigned long>>::vector(&__p, (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4);
  uint64_t v6 = *(void *)(v5 + 8);
  if (*(void *)(v5 + 16) != v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      LODWORD(v18) = 0;
      std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<int,turi::flexible_type const&,0>(&v13, (int *)&v18, (unsigned char *)(v6 + v7));
      uint64_t v9 = (char *)__p + v7;
      void *v9 = v13;
      v9[1] = v14;
      ++v8;
      uint64_t v6 = *(void *)(v5 + 8);
      v7 += 16;
    }
    while (v8 < (*(void *)(v5 + 16) - v6) >> 4);
  }
  uint64_t v10 = *(uint64_t **)(*a3)[5];
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  v20[0] = v12;
  v20[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = 0;
  atomic_ullong *volatile v14 = 0;
  char v15 = 0;
  BOOL v18 = &v13;
  char v19 = 0;
  unint64_t v13 = operator new(0x10uLL);
  atomic_ullong *volatile v14 = v13;
  char v15 = v13 + 2;
  atomic_ullong *volatile v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::query_eval::planner_node>>,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*,std::shared_ptr<turi::query_eval::planner_node>*>((uint64_t)&v15, v20, &v21, v13);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(&v13, (uint64_t)&__p);
}

void sub_224062220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<unsigned long,unsigned long>::pair[abi:ne180100]<int,turi::flexible_type const&,0>(void *a1, int *a2, unsigned char *a3)
{
  *a1 = *a2;
  uint64_t v4 = 0;
  switch(a3[12])
  {
    case 0:
      uint64_t v4 = *(void *)a3;
      goto LABEL_25;
    case 1:
      uint64_t v4 = (uint64_t)*(double *)a3;
      goto LABEL_25;
    case 2:
      uint64_t v6 = *(void *)a3;
      uint64_t v7 = (char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      unint64_t v8 = (char *)v7;
      if (*(char *)(v6 + 31) < 0) {
        unint64_t v8 = *v7;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      uint64_t v4 = std::stoll((const std::string *)__p, &__idx, 10);
      if (SHIBYTE(v21[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v9 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 31);
      }
      if (__idx != v9)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        BOOL v18 = std::string::append(&v24, " cannot be interpreted as an integer");
        long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v21[0] = (void *)v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_25;
    case 3:
      uint64_t v5 = *(void *)a3;
      __p[1] = 0;
      v21[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_24;
    case 4:
      uint64_t v10 = *(void *)a3;
      __p[1] = 0;
      v21[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v10 + 8), *(uint64_t **)(v10 + 16), (uint64_t)(*(void *)(v10 + 16) - *(void *)(v10 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      goto LABEL_24;
    case 5:
      uint64_t v11 = *(void *)a3;
      __p[1] = 0;
      v21[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v24.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      goto LABEL_24;
    case 6:
      uint64_t v4 = (uint64_t)(*(void *)a3 << 8) >> 8;
      goto LABEL_25;
    case 7:
      goto LABEL_25;
    case 8:
      uint64_t v12 = *(void *)a3;
      unint64_t v13 = *(atomic_uint **)(*(void *)a3 + 16);
      __p[0] = *(void **)(*(void *)a3 + 8);
      __p[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 2, 1u, memory_order_relaxed);
      }
      long long v14 = *(_OWORD *)(v12 + 24);
      long long v15 = *(_OWORD *)(v12 + 56);
      long long v22 = *(_OWORD *)(v12 + 40);
      long long v23 = v15;
      *(_OWORD *)uint64_t v21 = v14;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      goto LABEL_24;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v22 + 1))
      {
        *(void *)&long long v23 = *((void *)&v22 + 1);
        operator delete(*((void **)&v22 + 1));
      }
      if (v21[0])
      {
        v21[1] = v21[0];
        operator delete(v21[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
LABEL_24:
      uint64_t v4 = 0;
LABEL_25:
      a1[1] = v4;
      return a1;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_224062578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v16 - 41) < 0)
  {
    operator delete(*(void **)(v16 - 64));
    if ((v15 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_generalized_union_projects>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A490;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_merge_generalized_union_projects>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A490;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_merge_generalized_union_projects>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_merge_generalized_union_projects::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "gen_union_proj(..., gen_union_proj(...), ...) -> gen_union_proj(...)");
}

uint64_t turi::query_eval::opt_merge_generalized_union_projects::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (*a3)[5];
  uint64_t v5 = (*a3)[6];
  if (v4 == v5) {
    return 0;
  }
  uint64_t v6 = a3;
  while (*(_DWORD *)(*(void *)v4 + 16) != 12)
  {
    v4 += 16;
    if (v4 == v5) {
      return 0;
    }
  }
  memset(v78, 0, sizeof(v78));
  unint64_t v76 = 0;
  std::string::size_type v77 = 0;
  unint64_t v75 = (uint64_t *)&v76;
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
  uint64_t v8 = *(void *)turi::query_eval::node_info::p(v3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v72 = 0;
  unint64_t v73 = 0;
  uint64_t v74 = 0;
  std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>((uint64_t *)&v72, v9, v10, (v10 - v9) >> 5);
  uint64_t v11 = v72;
  uint64_t v12 = v73;
  if (v72 == v73) {
LABEL_107:
  }
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)12>::make_planner_node(v78, (uint64_t)&v72);
  std::string v71 = v6;
  while (1)
  {
    uint64_t v13 = v11[1];
    long long v14 = (std::string::size_type *)((*v6)[5] + 16 * *v11);
    std::string::size_type v16 = *v14;
    int v15 = (std::__shared_weak_count *)v14[1];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(_DWORD *)(v16 + 16) == 12) {
      break;
    }
    long long v22 = v76;
    long long v23 = &v76;
    if (!v76) {
      goto LABEL_28;
    }
    std::string v24 = &v76;
    do
    {
      uint64_t v25 = v22;
      uint64_t v26 = v24;
      std::string::size_type v27 = v22[4];
      if (v27 >= v16) {
        std::string v24 = v22;
      }
      else {
        ++v22;
      }
      long long v22 = (void *)*v22;
    }
    while (v22);
    long long v23 = &v76;
    if (v24 != &v76 && (v27 >= v16 ? (v28 = v25) : (v28 = v26), long long v23 = v24, v28[4] == v16))
    {
      if (v27 < v16) {
        uint64_t v25 = v26;
      }
      std::string::size_type v29 = v25[5];
    }
    else
    {
LABEL_28:
      std::string::size_type v29 = v77;
      std::vector<std::shared_ptr<turi::query_eval::planner_node>>::push_back[abi:ne180100](v78, (long long *)v16);
      __p.__r_.__value_.__r.__words[0] = v16;
      __p.__r_.__value_.__l.__size_ = v29;
      std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>(&v75, v23, (unint64_t *)&__p, &__p);
    }
LABEL_97:
    *uint64_t v11 = v29;
    v11[1] = v13;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    v11 += 2;
    if (v11 == v12) {
      goto LABEL_107;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
  uint64_t v17 = *(void *)turi::query_eval::node_info::p((uint64_t *)v16, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = *(void *)(v17 + 8);
  uint64_t v19 = v18 + 32 * v13;
  atomic_ullong *volatile v20 = v12;
  uint64_t v21 = 0;
  switch(*(unsigned char *)(v19 + 12))
  {
    case 0:
      uint64_t v21 = *(void *)v19;
      goto LABEL_54;
    case 1:
      uint64_t v21 = (uint64_t)*(double *)v19;
      goto LABEL_54;
    case 2:
      uint64_t v31 = *(void *)v19;
      char v32 = (char **)(*(void *)v19 + 8);
      __idx[0] = 0;
      uint64_t v33 = (char *)v32;
      if (*(char *)(v31 + 31) < 0) {
        uint64_t v33 = *v32;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v33);
      uint64_t v21 = std::stoll(&__p, __idx, 10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*(char *)(v31 + 31) < 0) {
        uint64_t v34 = *(void *)(v31 + 16);
      }
      else {
        uint64_t v34 = *(unsigned __int8 *)(v31 + 31);
      }
      if (__idx[0] != v34)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v69 = std::string::append(&v88, " cannot be interpreted as an integer");
        long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      goto LABEL_54;
    case 3:
      uint64_t v30 = *(void *)v19;
      memset(&__p, 0, sizeof(__p));
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v30 + 8), *(void *)(v30 + 16), (uint64_t)(*(void *)(v30 + 16) - *(void *)(v30 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_53;
    case 4:
      uint64_t v35 = *(void *)v19;
      memset(&__p, 0, sizeof(__p));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v35 + 8), *(uint64_t **)(v35 + 16), (uint64_t)(*(void *)(v35 + 16) - *(void *)(v35 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      goto LABEL_53;
    case 5:
      uint64_t v36 = *(void *)v19;
      memset(&__p, 0, sizeof(__p));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v36 + 8), *(uint64_t **)(v36 + 16), (uint64_t)(*(void *)(v36 + 16) - *(void *)(v36 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      goto LABEL_53;
    case 6:
      uint64_t v21 = (uint64_t)(*(void *)v19 << 8) >> 8;
      goto LABEL_54;
    case 7:
      goto LABEL_54;
    case 8:
      uint64_t v37 = *(void *)v19;
      uint64_t v38 = *(atomic_uint **)(v37 + 16);
      uint64_t v79 = *(void *)(v37 + 8);
      uint64_t v80 = v38;
      if (v38) {
        atomic_fetch_add_explicit(v38 + 2, 1u, memory_order_relaxed);
      }
      long long v39 = *(_OWORD *)(v37 + 24);
      long long v40 = *(_OWORD *)(v37 + 56);
      long long v82 = *(_OWORD *)(v37 + 40);
      long long v83 = v40;
      long long v81 = v39;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count(&v80);
      goto LABEL_53;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v19 + 8);
      turi::flexible_type_fail(0);
      if (v86)
      {
        uint64_t v87 = v86;
        operator delete(v86);
      }
      if (__p.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v85 = __p.__r_.__value_.__r.__words[2];
        operator delete((void *)__p.__r_.__value_.__r.__words[2]);
      }
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
LABEL_53:
      uint64_t v21 = 0;
LABEL_54:
      uint64_t v41 = *(void *)(v16 + 40) + 16 * v21;
      uint64_t v43 = *(long long **)v41;
      std::string::size_type v42 = *(std::__shared_weak_count **)(v41 + 8);
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v44 = v76;
      uint64_t v45 = &v76;
      if (!v76) {
        goto LABEL_67;
      }
      uint64_t v46 = &v76;
      do
      {
        long long v47 = v44;
        long long v48 = v46;
        unint64_t v49 = v44[4];
        if (v49 >= (unint64_t)v43) {
          uint64_t v46 = v44;
        }
        else {
          ++v44;
        }
        uint64_t v44 = (void *)*v44;
      }
      while (v44);
      uint64_t v45 = &v76;
      if (v46 != &v76
        && (v49 >= (unint64_t)v43 ? (v50 = v47) : (v50 = v48), uint64_t v45 = v46, (long long *)v50[4] == v43))
      {
        if (v49 < (unint64_t)v43) {
          long long v47 = v48;
        }
        std::string::size_type v29 = v47[5];
      }
      else
      {
LABEL_67:
        std::string::size_type v29 = v77;
        std::vector<std::shared_ptr<turi::query_eval::planner_node>>::push_back[abi:ne180100](v78, v43);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
        __p.__r_.__value_.__l.__size_ = v29;
        std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_hint_unique_key_args<unsigned long,std::pair<unsigned long const,unsigned long>>(&v75, v45, (unint64_t *)&__p, &__p);
      }
      uint64_t v12 = v20;
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      uint64_t v51 = v18 + 32 * v13;
      int v52 = *(unsigned __int8 *)(v51 + 28);
      uint64_t v6 = v71;
      uint64_t v13 = 0;
      uint64_t v53 = (uint64_t *)(v51 + 16);
      switch(v52)
      {
        case 0:
          uint64_t v13 = *v53;
          goto LABEL_97;
        case 1:
          uint64_t v13 = (uint64_t)*(double *)v53;
          goto LABEL_97;
        case 2:
          uint64_t v55 = *v53;
          uint64_t v56 = (char **)(*v53 + 8);
          __idx[0] = 0;
          uint64_t v57 = (char *)v56;
          if (*(char *)(v55 + 31) < 0) {
            uint64_t v57 = *v56;
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, v57);
          uint64_t v13 = std::stoll(&__p, __idx, 10);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*(char *)(v55 + 31) < 0) {
            uint64_t v58 = *(void *)(v55 + 16);
          }
          else {
            uint64_t v58 = *(unsigned __int8 *)(v55 + 31);
          }
          if (__idx[0] != v58)
          {
            long long v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            long long v66 = std::string::append(&v88, " cannot be interpreted as an integer");
            long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v67;
            v66->__r_.__value_.__l.__size_ = 0;
            v66->__r_.__value_.__r.__words[2] = 0;
            v66->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v65, &__p);
            __cxa_throw(v65, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          goto LABEL_97;
        case 3:
          uint64_t v54 = *v53;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v54 + 8), *(void *)(v54 + 16), (uint64_t)(*(void *)(v54 + 16) - *(void *)(v54 + 8)) >> 3);
          turi::flexible_type_fail(0);
          if (__p.__r_.__value_.__r.__words[0])
          {
            __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_96;
        case 4:
          uint64_t v59 = *v53;
          memset(&__p, 0, sizeof(__p));
          std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v59 + 8), *(uint64_t **)(v59 + 16), (uint64_t)(*(void *)(v59 + 16) - *(void *)(v59 + 8)) >> 4);
          turi::flexible_type_fail(0);
          v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
          goto LABEL_96;
        case 5:
          uint64_t v60 = *v53;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v60 + 8), *(uint64_t **)(v60 + 16), (uint64_t)(*(void *)(v60 + 16) - *(void *)(v60 + 8)) >> 5);
          turi::flexible_type_fail(0);
          v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
          goto LABEL_96;
        case 6:
          uint64_t v13 = *v53 << 8 >> 8;
          goto LABEL_97;
        case 7:
          goto LABEL_97;
        case 8:
          uint64_t v61 = *v53;
          long long v62 = *(atomic_uint **)(v61 + 16);
          uint64_t v79 = *(void *)(v61 + 8);
          uint64_t v80 = v62;
          if (v62) {
            atomic_fetch_add_explicit(v62 + 2, 1u, memory_order_relaxed);
          }
          long long v63 = *(_OWORD *)(v61 + 24);
          long long v64 = *(_OWORD *)(v61 + 56);
          long long v82 = *(_OWORD *)(v61 + 40);
          long long v83 = v64;
          long long v81 = v63;
          turi::flexible_type_fail(0);
          boost::detail::shared_count::~shared_count(&v80);
          goto LABEL_96;
        case 9:
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *v53 + 8);
          turi::flexible_type_fail(0);
          if (v86)
          {
            uint64_t v87 = v86;
            operator delete(v86);
          }
          if (__p.__r_.__value_.__r.__words[2])
          {
            std::string::size_type v85 = __p.__r_.__value_.__r.__words[2];
            operator delete((void *)__p.__r_.__value_.__r.__words[2]);
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
LABEL_96:
          uint64_t v13 = 0;
          goto LABEL_97;
        default:
          goto LABEL_108;
      }
    default:
LABEL_108:
      uint64_t result = turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
  return result;
}

void sub_224062FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, boost::detail::shared_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v43 - 105) < 0)
  {
    operator delete(*(void **)(v43 - 128));
    if ((v42 & 1) == 0)
    {
LABEL_8:
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (a18) {
        operator delete(a18);
      }
      std::__tree<std::__value_type<unsigned long long,double>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,double>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,double>>>::destroy((uint64_t)&a21, a22);
      *(void *)(v43 - 128) = &a24;
      std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 128));
      _Unwind_Resume(a1);
    }
  }
  else if (!v42)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v41);
  goto LABEL_8;
}

void sub_224063178()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x224063138);
}

uint64_t *std::vector<std::pair<unsigned long,unsigned long>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    std::vector<turi::flexible_type>::__vallocate[abi:ne180100](result, a4);
    return std::vector<std::pair<unsigned long,unsigned long>>::__construct_at_end<std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>,std::__wrap_iter<std::pair<turi::flexible_type,turi::flexible_type> const*>>(v6, a2, a3);
  }
  return result;
}

void sub_224063230(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_add_direct_source_tags>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::query_eval::opt_project_add_direct_source_tags>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76A530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::query_eval::opt_project_add_direct_source_tags>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *turi::query_eval::opt_project_add_direct_source_tags::description@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "add_source_metadata(gen_union_proj(...))");
}

uint64_t turi::query_eval::opt_project_add_direct_source_tags::apply_transform(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *a3;
  uint64_t v5 = (*a3)[5];
  uint64_t v4 = (*a3)[6];
  if (v5 == v4) {
    return 0;
  }
  uint64_t v7 = v5 + 16;
  while (1)
  {
    int v8 = *(_DWORD *)(*(void *)(v7 - 16) + 16);
    if (v8 == 7) {
      break;
    }
    BOOL v9 = v8 == 6 || v7 == v4;
    v7 += 16;
    if (v9)
    {
      if (v8 != 6) {
        return 0;
      }
      break;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "direct_source_mapping");
  uint64_t v10 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(*v3 + 32, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v11 = *v3 + 40;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 != v10) {
    return 0;
  }
  v88[0] = 0;
  v88[1] = 0;
  uint64_t v87 = v88;
  uint64_t v13 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "index_map");
  uint64_t v14 = *(void *)turi::query_eval::node_info::p(v13, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v86 = 0;
  uint64_t v15 = *(void *)(v14 + 8);
  if (*(void *)(v14 + 16) == v15) {
LABEL_162:
  }
    operator new();
  unint64_t v16 = 0;
  while (2)
  {
    uint64_t v17 = v15 + 32 * v16;
    uint64_t v18 = 0;
    switch(*(unsigned char *)(v17 + 12))
    {
      case 0:
        uint64_t v18 = *(void *)v17;
        goto LABEL_42;
      case 1:
        uint64_t v18 = (uint64_t)*(double *)v17;
        goto LABEL_42;
      case 2:
        uint64_t v20 = *(void *)v17;
        uint64_t v21 = (char **)(*(void *)v17 + 8);
        __idx[0] = 0;
        long long v22 = (char *)v21;
        if (*(char *)(v20 + 31) < 0) {
          long long v22 = *v21;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, v22);
        uint64_t v18 = std::stoll(&__p, __idx, 10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (*(char *)(v20 + 31) < 0) {
          uint64_t v23 = *(void *)(v20 + 16);
        }
        else {
          uint64_t v23 = *(unsigned __int8 *)(v20 + 31);
        }
        if (__idx[0] != v23)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          long long v81 = std::string::append(&v98, " cannot be interpreted as an integer");
          long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(exception, &__p);
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        goto LABEL_42;
      case 3:
        uint64_t v19 = *(void *)v17;
        memset(&__p, 0, sizeof(__p));
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v19 + 8), *(void *)(v19 + 16), (uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 3);
        turi::flexible_type_fail(0);
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_41;
      case 4:
        uint64_t v24 = *(void *)v17;
        memset(&__p, 0, sizeof(__p));
        std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v24 + 8), *(uint64_t **)(v24 + 16), (uint64_t)(*(void *)(v24 + 16) - *(void *)(v24 + 8)) >> 4);
        turi::flexible_type_fail(0);
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
        goto LABEL_41;
      case 5:
        uint64_t v25 = *(void *)v17;
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v25 + 8), *(uint64_t **)(v25 + 16), (uint64_t)(*(void *)(v25 + 16) - *(void *)(v25 + 8)) >> 5);
        turi::flexible_type_fail(0);
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
        goto LABEL_41;
      case 6:
        uint64_t v18 = (uint64_t)(*(void *)v17 << 8) >> 8;
        goto LABEL_42;
      case 7:
        goto LABEL_42;
      case 8:
        uint64_t v26 = *(void *)v17;
        std::string::size_type v27 = *(atomic_uint **)(v26 + 16);
        long long v89 = *(void **)(v26 + 8);
        long long v90 = v27;
        if (v27) {
          atomic_fetch_add_explicit(v27 + 2, 1u, memory_order_relaxed);
        }
        long long v28 = *(_OWORD *)(v26 + 24);
        long long v29 = *(_OWORD *)(v26 + 56);
        long long v92 = *(_OWORD *)(v26 + 40);
        long long v93 = v29;
        long long v91 = v28;
        turi::flexible_type_fail(0);
        boost::detail::shared_count::~shared_count(&v90);
        goto LABEL_41;
      case 9:
        turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *(void *)v17 + 8);
        turi::flexible_type_fail(0);
        if (v96)
        {
          unint64_t v97 = v96;
          operator delete(v96);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v95 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
LABEL_41:
        uint64_t v18 = 0;
LABEL_42:
        unint64_t v30 = *(void *)(v14 + 8) + 32 * v86;
        int v31 = *(unsigned __int8 *)(v30 + 28);
        unint64_t v32 = 0;
        uint64_t v33 = (unint64_t *)(v30 + 16);
        switch(v31)
        {
          case 0:
            unint64_t v32 = *v33;
            goto LABEL_66;
          case 1:
            unint64_t v32 = (uint64_t)*(double *)v33;
            goto LABEL_66;
          case 2:
            unint64_t v35 = *v33;
            uint64_t v36 = (char **)(*v33 + 8);
            __idx[0] = 0;
            uint64_t v37 = (char *)v36;
            if (*(char *)(v35 + 31) < 0) {
              uint64_t v37 = *v36;
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, v37);
            unint64_t v32 = std::stoll(&__p, __idx, 10);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (*(char *)(v35 + 31) < 0) {
              uint64_t v38 = *(void *)(v35 + 16);
            }
            else {
              uint64_t v38 = *(unsigned __int8 *)(v35 + 31);
            }
            if (__idx[0] != v38)
            {
              long long v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v84 = std::string::append(&v98, " cannot be interpreted as an integer");
              long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v85;
              v84->__r_.__value_.__l.__size_ = 0;
              v84->__r_.__value_.__r.__words[2] = 0;
              v84->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v83, &__p);
              __cxa_throw(v83, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            goto LABEL_66;
          case 3:
            unint64_t v34 = *v33;
            memset(&__p, 0, sizeof(__p));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)(v34 + 8), *(void *)(v34 + 16), (uint64_t)(*(void *)(v34 + 16) - *(void *)(v34 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p.__r_.__value_.__r.__words[0])
            {
              __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_65;
          case 4:
            unint64_t v39 = *v33;
            memset(&__p, 0, sizeof(__p));
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v39 + 8), *(uint64_t **)(v39 + 16), (uint64_t)(*(void *)(v39 + 16) - *(void *)(v39 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
            goto LABEL_65;
          case 5:
            unint64_t v40 = *v33;
            memset(&__p, 0, sizeof(__p));
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v40 + 8), *(uint64_t **)(v40 + 16), (uint64_t)(*(void *)(v40 + 16) - *(void *)(v40 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
            goto LABEL_65;
          case 6:
            unint64_t v32 = (uint64_t)(*v33 << 8) >> 8;
            goto LABEL_66;
          case 7:
            goto LABEL_66;
          case 8:
            unint64_t v41 = *v33;
            int v42 = *(atomic_uint **)(v41 + 16);
            long long v89 = *(void **)(v41 + 8);
            long long v90 = v42;
            if (v42) {
              atomic_fetch_add_explicit(v42 + 2, 1u, memory_order_relaxed);
            }
            long long v43 = *(_OWORD *)(v41 + 24);
            long long v44 = *(_OWORD *)(v41 + 56);
            long long v92 = *(_OWORD *)(v41 + 40);
            long long v93 = v44;
            long long v91 = v43;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count(&v90);
            goto LABEL_65;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(&__p, *v33 + 8);
            turi::flexible_type_fail(0);
            if (v96)
            {
              unint64_t v97 = v96;
              operator delete(v96);
            }
            if (__p.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v95 = __p.__r_.__value_.__r.__words[2];
              operator delete((void *)__p.__r_.__value_.__r.__words[2]);
            }
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
LABEL_65:
            unint64_t v32 = 0;
LABEL_66:
            uint64_t v45 = (uint64_t *)((*a3)[5] + 16 * v18);
            uint64_t v46 = *v45;
            long long v47 = (std::__shared_weak_count *)v45[1];
            if (v47) {
              atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v48 = *(_DWORD *)(v46 + 16);
            if (v48 == 6)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "sarray");
              int v52 = (uint64_t *)turi::query_eval::node_info::any_p<turi::sframe>((uint64_t *)v46, (uint64_t)&__p);
              uint64_t v53 = *v52;
              uint64_t v54 = (std::__shared_weak_count *)v52[1];
              if (v54) {
                atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "begin_index");
              uint64_t v55 = turi::query_eval::node_info::p((uint64_t *)v46, (uint64_t)&__p);
              int v56 = 0;
              switch(*(unsigned char *)(v55 + 12))
              {
                case 0:
                  if (*(void *)v55) {
                    goto LABEL_115;
                  }
                  goto LABEL_117;
                case 1:
                  if (*(double *)v55 == 0.0) {
                    goto LABEL_117;
                  }
                  goto LABEL_115;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_81;
                case 6:
                  if ((*(void *)v55 & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(v55 + 8) == 0)
                  {
LABEL_117:
                    std::string::basic_string[abi:ne180100]<0>(&v89, "end_index");
                    uint64_t v64 = turi::query_eval::node_info::p((uint64_t *)v46, (uint64_t)&v89);
                    if (!*(unsigned char *)(v53 + 248)
                      || (v66 = *(char **)(v53 + 80), long long v65 = *(char **)(v53 + 88), v67 = v65 - v66, v65 == v66))
                    {
                      uint64_t v68 = 0;
                    }
                    else
                    {
                      uint64_t v68 = 0;
                      unint64_t v69 = v67 >> 3;
                      if (v69 <= 1) {
                        unint64_t v69 = 1;
                      }
                      do
                      {
                        uint64_t v70 = *(void *)v66;
                        v66 += 8;
                        v68 += v70;
                        --v69;
                      }
                      while (v69);
                    }
                    int v56 = 0;
                    switch(*(unsigned char *)(v64 + 12))
                    {
                      case 0:
                        BOOL v78 = *(void *)v64 == v68;
                        goto LABEL_148;
                      case 1:
                        BOOL v78 = *(double *)v64 == (double)v68;
                        goto LABEL_148;
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 7:
                      case 8:
                      case 9:
                        goto LABEL_151;
                      case 6:
                        BOOL v78 = v68 == (uint64_t)(*(void *)v64 << 8) >> 8 && *(_DWORD *)(v64 + 8) == 0;
LABEL_148:
                        int v56 = v78;
LABEL_151:
                        if (SBYTE7(v91) < 0) {
                          operator delete(v89);
                        }
                        goto LABEL_81;
                      default:
                        goto LABEL_163;
                    }
                  }
LABEL_115:
                  int v56 = 0;
LABEL_81:
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__p.__r_.__value_.__l.__data_);
                    if (!v56) {
                      goto LABEL_89;
                    }
                  }
                  else if (!v56)
                  {
                    goto LABEL_89;
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
                  uint64_t v57 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v87, &v86, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
                  if (v54) {
                    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v58 = (std::__shared_weak_count *)v57[6];
                  v57[5] = v53;
                  v57[6] = (uint64_t)v54;
                  if (v58) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
                  }
LABEL_89:
                  if (v54)
                  {
                    std::string::size_type size = v54;
LABEL_97:
                    std::__shared_weak_count::__release_shared[abi:ne180100](size);
                  }
                  break;
                default:
                  goto LABEL_163;
              }
            }
            else if (v48 == 7)
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "sframe");
              uint64_t v49 = turi::query_eval::node_info::any_p<turi::sframe>((uint64_t *)v46, (uint64_t)&__p);
              turi::sframe::select_column(v49, v32, &v98);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "begin_index");
              uint64_t v50 = turi::query_eval::node_info::p((uint64_t *)v46, (uint64_t)&__p);
              int v51 = 0;
              switch(*(unsigned char *)(v50 + 12))
              {
                case 0:
                  if (*(void *)v50) {
                    goto LABEL_130;
                  }
                  goto LABEL_132;
                case 1:
                  if (*(double *)v50 == 0.0) {
                    goto LABEL_132;
                  }
                  goto LABEL_130;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_73;
                case 6:
                  if ((*(void *)v50 & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(v50 + 8) == 0)
                  {
LABEL_132:
                    std::string::basic_string[abi:ne180100]<0>(&v89, "end_index");
                    uint64_t v72 = turi::query_eval::node_info::p((uint64_t *)v46, (uint64_t)&v89);
                    if (*(unsigned char *)(v98.__r_.__value_.__r.__words[0] + 248)
                      && (unint64_t v73 = *(uint64_t **)(v98.__r_.__value_.__r.__words[0] + 80),
                          (uint64_t v74 = *(void *)(v98.__r_.__value_.__r.__words[0] + 88) - (void)v73) != 0))
                    {
                      uint64_t v75 = 0;
                      unint64_t v76 = v74 >> 3;
                      if (v76 <= 1) {
                        unint64_t v76 = 1;
                      }
                      do
                      {
                        uint64_t v77 = *v73++;
                        v75 += v77;
                        --v76;
                      }
                      while (v76);
                    }
                    else
                    {
                      uint64_t v75 = 0;
                    }
                    int v51 = 0;
                    switch(*(unsigned char *)(v72 + 12))
                    {
                      case 0:
                        BOOL v79 = *(void *)v72 == v75;
                        goto LABEL_157;
                      case 1:
                        BOOL v79 = *(double *)v72 == (double)v75;
                        goto LABEL_157;
                      case 2:
                      case 3:
                      case 4:
                      case 5:
                      case 7:
                      case 8:
                      case 9:
                        goto LABEL_160;
                      case 6:
                        BOOL v79 = v75 == (uint64_t)(*(void *)v72 << 8) >> 8 && *(_DWORD *)(v72 + 8) == 0;
LABEL_157:
                        int v51 = v79;
LABEL_160:
                        if (SBYTE7(v91) < 0) {
                          operator delete(v89);
                        }
                        goto LABEL_73;
                      default:
                        goto LABEL_163;
                    }
                  }
LABEL_130:
                  int v51 = 0;
LABEL_73:
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__p.__r_.__value_.__l.__data_);
                    if (!v51) {
                      goto LABEL_96;
                    }
                  }
                  else if (!v51)
                  {
                    goto LABEL_96;
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
                  uint64_t v60 = std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(&v87, &v86, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
                  long long v61 = *(_OWORD *)&v98.__r_.__value_.__l.__data_;
                  if (v98.__r_.__value_.__l.__size_) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v98.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                  }
                  long long v62 = (std::__shared_weak_count *)v60[6];
                  *(_OWORD *)(v60 + 5) = v61;
                  if (v62) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
                  }
LABEL_96:
                  std::string::size_type size = (std::__shared_weak_count *)v98.__r_.__value_.__l.__size_;
                  if (v98.__r_.__value_.__l.__size_) {
                    goto LABEL_97;
                  }
                  break;
                default:
                  goto LABEL_163;
              }
            }
            if (v47) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            }
            unint64_t v16 = v86 + 1;
            unint64_t v86 = v16;
            uint64_t v15 = *(void *)(v14 + 8);
            if (v16 >= (*(void *)(v14 + 16) - v15) >> 5) {
              goto LABEL_162;
            }
            continue;
          default:
            goto LABEL_163;
        }
      default:
LABEL_163:
        uint64_t result = turi::flexible_type_fail(0);
        __break(1u);
        break;
    }
    return result;
  }
}

void sub_224063EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, boost::detail::shared_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void *turi::any::operator=<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>(void *a1, uint64_t **a2)
{
  uint64_t v4 = *a1;
  if (!v4 {
    || (uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4),
  }
  {
    turi::any::any<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>();
  }
  uint64_t v6 = (uint64_t **)(*a1 + 8);
  if (v6 != a2) {
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__tree_node<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,void *> *,long>>(v6, *a2, a2 + 1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void turi::any::any<std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>()
{
}

void sub_22406445C(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::naive_partial_materialize@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (void *)result;
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)result;
  uint64_t v6 = *(void *)(*(void *)result + 56);
  if (*(void *)(*(void *)result + 64) != v6)
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t result = turi::query_eval::planner_node_type_to_attributes(**(unsigned int **)(v6 + 16 * v8));
      if ((result & 4) == 0)
      {
        long long v9 = *(_OWORD *)(*(void *)(*v3 + 56) + 16 * v8);
        long long v13 = v9;
        if (*((void *)&v9 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        turi::query_eval::naive_partial_materialize(&v14, &v13, a2);
        if (*((void *)&v13 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
        }
        uint64_t v11 = v14;
        uint64_t v12 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        turi::query_eval::execute_node(&v11, a2, (uint64_t)v17);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        turi::sframe::sframe((turi::sframe *)v16, (const turi::sframe *)v17);
        turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v16);
      }
      ++v8;
      uint64_t v5 = *v3;
      uint64_t v6 = *(void *)(*v3 + 56);
    }
    while (v8 < (*(void *)(*v3 + 64) - v6) >> 4);
  }
  uint64_t v10 = v3[1];
  *a3 = v5;
  a3[1] = v10;
  void *v3 = 0;
  v3[1] = 0;
  return result;
}

void sub_22406461C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  turi::sframe::~sframe((turi::sframe *)&a18);
  turi::sframe::~sframe((turi::sframe *)&a55);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::execute_node(int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v94 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 32)) {
    goto LABEL_2;
  }
  uint64_t v7 = *a1;
  int v8 = **a1;
  if (v8 == 6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sarray");
    uint64_t v44 = *(void *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v7 + 8), (const void **)__p);
    if (SHIBYTE(v82) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v45 = *a1;
    std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
    uint64_t v46 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v45 + 2), (const void **)__p);
    int v47 = 0;
    switch(*(unsigned char *)(v46 + 12))
    {
      case 0:
        if (!*(void *)v46) {
          goto LABEL_110;
        }
        goto LABEL_108;
      case 1:
        if (*(double *)v46 == 0.0) {
          goto LABEL_110;
        }
        goto LABEL_108;
      case 2:
      case 3:
      case 4:
      case 5:
      case 7:
      case 8:
      case 9:
        goto LABEL_71;
      case 6:
        if ((*(void *)v46 & 0xFFFFFFFFFFFFFFLL) == 0 && *(_DWORD *)(v46 + 8) == 0)
        {
LABEL_110:
          uint64_t v55 = *a1;
          std::string::basic_string[abi:ne180100]<0>(&v83, "end_index");
          uint64_t v56 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v55 + 2), (const void **)&v83);
          uint64_t v57 = *(void *)(v44 + 8);
          if (*(unsigned char *)(v57 + 248)
            && (uint64_t v58 = *(uint64_t **)(v57 + 80), (v59 = *(void *)(v57 + 88) - (void)v58) != 0))
          {
            uint64_t v60 = 0;
            unint64_t v61 = v59 >> 3;
            if (v61 <= 1) {
              unint64_t v61 = 1;
            }
            do
            {
              uint64_t v62 = *v58++;
              v60 += v62;
              --v61;
            }
            while (v61);
          }
          else
          {
            uint64_t v60 = 0;
          }
          int v47 = 0;
          switch(*(unsigned char *)(v56 + 12))
          {
            case 0:
              BOOL v70 = *(void *)v56 == v60;
              goto LABEL_146;
            case 1:
              BOOL v70 = *(double *)v56 == (double)v60;
              goto LABEL_146;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_149;
            case 6:
              BOOL v70 = v60 == (uint64_t)(*(void *)v56 << 8) >> 8 && *(_DWORD *)(v56 + 8) == 0;
LABEL_146:
              int v47 = v70;
LABEL_149:
              if (SHIBYTE(p_data) < 0) {
                operator delete(v83);
              }
              break;
            default:
              goto LABEL_163;
          }
        }
        else
        {
LABEL_108:
          int v47 = 0;
        }
LABEL_71:
        if (SHIBYTE(v82) < 0) {
          operator delete(__p[0]);
        }
        if (!v47) {
          goto LABEL_2;
        }
        int v48 = *(std::__shared_weak_count **)(v44 + 16);
        long long v89 = *(uint64_t **)(v44 + 8);
        long long v90 = v48;
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __p[0] = 0;
        __p[1] = 0;
        long long v82 = 0;
        long long v83 = (std::string *)__p;
        LOBYTE(v84) = 0;
        __p[0] = operator new(0x10uLL);
        __p[1] = __p[0];
        long long v82 = (char *)__p[0] + 16;
        __p[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>((uint64_t)&v82, &v89, &v91, (void *)__p[0]);
        std::string::basic_string[abi:ne180100]<0>(&v92, "X1");
        long long v83 = 0;
        uint64_t v84 = 0;
        p_data = 0;
        LOBYTE(v75) = 0;
        long long v83 = (std::string *)operator new(0x18uLL);
        uint64_t v84 = v83;
        p_data = (void **)&v83[1].__r_.__value_.__l.__data_;
        uint64_t v84 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v92, &v94, v83);
        turi::sframe::sframe(a3, (uint64_t **)__p, (const void ***)&v83, 1);
        uint64_t v74 = &v83;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
        if (SHIBYTE(v93) < 0) {
          operator delete((void *)v92);
        }
        long long v83 = (std::string *)__p;
        std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
        if (v90) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v90);
        }
        uint64_t v49 = *(unsigned __int8 *)(a2 + 71);
        if ((v49 & 0x80u) != 0) {
          uint64_t v49 = *(void *)(a2 + 56);
        }
        if (v49)
        {
          uint64_t v50 = *(std::string **)(a2 + 72);
          int v51 = *(std::string **)(a2 + 80);
          if (v50 != v51)
          {
            __p[0] = (void *)(0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)v50) >> 3));
            if (LODWORD(__p[0]) == 1)
            {
              turi::sframe::set_column_name(a3, 0, v50);
              if (*(char *)(a2 + 71) < 0) {
                std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
              }
              else {
                std::string v79 = *(std::string *)(a2 + 48);
              }
              turi::sframe::save((turi *)a3, (uint64_t)&v79);
            }
            long long v83 = (std::string *)__p;
            turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_1::operator()();
          }
          std::vector<turi::flex_type_enum>::__throw_out_of_range[abi:ne180100]();
        }
        return;
      default:
LABEL_163:
        turi::flexible_type_fail(0);
        __break(1u);
        return;
    }
  }
  else
  {
    if (v8 != 12)
    {
      if (v8 == 7)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "sframe");
        uint64_t v9 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v7 + 8), (const void **)__p);
        turi::sframe::sframe((turi::sframe *)a3, (const turi::sframe *)(*(void *)v9 + 8));
        if (SHIBYTE(v82) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v10 = *a1;
        std::string::basic_string[abi:ne180100]<0>(__p, "begin_index");
        uint64_t v11 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v10 + 2), (const void **)__p);
        int v12 = 0;
        switch(*(unsigned char *)(v11 + 12))
        {
          case 0:
            if (*(void *)v11) {
              goto LABEL_120;
            }
            goto LABEL_122;
          case 1:
            if (*(double *)v11 == 0.0) {
              goto LABEL_122;
            }
LABEL_120:
            int v12 = 0;
            break;
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
            break;
          case 6:
            int v12 = 0;
            if ((*(void *)v11 & 0xFFFFFFFFFFFFFFLL) == 0 && !*(_DWORD *)(v11 + 8))
            {
LABEL_122:
              long long v63 = *a1;
              std::string::basic_string[abi:ne180100]<0>(&v83, "end_index");
              uint64_t v64 = std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v63 + 2), (const void **)&v83);
              if (*(unsigned char *)(a3 + 288)) {
                uint64_t v65 = *(void *)(a3 + 32);
              }
              else {
                uint64_t v65 = 0;
              }
              int v12 = 0;
              switch(*(unsigned char *)(v64 + 12))
              {
                case 0:
                  BOOL v66 = *(void *)v64 == v65;
                  goto LABEL_155;
                case 1:
                  BOOL v66 = *(double *)v64 == (double)v65;
                  goto LABEL_155;
                case 2:
                case 3:
                case 4:
                case 5:
                case 7:
                case 8:
                case 9:
                  goto LABEL_158;
                case 6:
                  BOOL v66 = v65 == (uint64_t)(*(void *)v64 << 8) >> 8 && *(_DWORD *)(v64 + 8) == 0;
LABEL_155:
                  int v12 = v66;
LABEL_158:
                  if (SHIBYTE(p_data) < 0) {
                    operator delete(v83);
                  }
                  break;
                default:
                  goto LABEL_163;
              }
            }
            break;
          default:
            goto LABEL_163;
        }
        if (SHIBYTE(v82) < 0)
        {
          operator delete(__p[0]);
          if (v12) {
            goto LABEL_15;
          }
        }
        else if (v12)
        {
LABEL_15:
          uint64_t v13 = *(unsigned __int8 *)(a2 + 71);
          char v14 = v13;
          if ((v13 & 0x80u) != 0) {
            uint64_t v13 = *(void *)(a2 + 56);
          }
          if (v13)
          {
            uint64_t v15 = *(void *)(a2 + 72);
            uint64_t v16 = *(void *)(a2 + 80);
            if (v15 == v16)
            {
              uint64_t v17 = *(void ***)(a3 + 24);
            }
            else
            {
              uint64_t v17 = *(void ***)(a3 + 24);
              long long v83 = (std::string *)v17;
              *(void *)&long long v92 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
              if (v17 != (void **)v92)
              {
                __p[0] = &v83;
                __p[1] = &v92;
                turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_0::operator()();
              }
            }
            if (v17)
            {
              uint64_t v52 = 0;
              unint64_t v53 = 0;
              do
              {
                turi::sframe::set_column_name(a3, v53++, (std::string *)(*(void *)(a2 + 72) + v52));
                v52 += 24;
              }
              while (v53 < *(void *)(a3 + 24));
              char v14 = *(unsigned char *)(a2 + 71);
            }
            if (v14 < 0) {
              std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
            }
            else {
              std::string v80 = *(std::string *)(a2 + 48);
            }
            turi::sframe::save((turi *)a3, (uint64_t)&v80);
          }
          return;
        }
        turi::sframe::~sframe((turi::sframe *)a3);
      }
LABEL_2:
      uint64_t v6 = (std::__shared_weak_count *)a1[1];
      std::string v71 = *a1;
      uint64_t v72 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::execute_node_impl((uint64_t *)&v71, (unint64_t *)a2, (turi::sframe *)a3);
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "direct_source_mapping");
    uint64_t v18 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__count_unique<std::string>((uint64_t)(v7 + 8), (const void **)__p);
    if (SHIBYTE(v82) < 0) {
      operator delete(__p[0]);
    }
    if (!v18) {
      goto LABEL_2;
    }
    uint64_t v19 = *a1;
    std::string::basic_string[abi:ne180100]<0>(__p, "direct_source_mapping");
    uint64_t v20 = (void *)std::map<std::string,turi::neural_net::shared_float_array>::at((uint64_t)(v19 + 8), (const void **)__p);
    std::map<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>::map[abi:ne180100]((uint64_t *)&v92, *v20 + 8);
    if (SHIBYTE(v82) < 0) {
      operator delete(__p[0]);
    }
    if (!v93)
    {
      std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)&v92, *((void **)&v92 + 1));
      goto LABEL_2;
    }
    uint64_t v21 = (std::__shared_weak_count *)a1[1];
    uint64_t v77 = *a1;
    BOOL v78 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v22 = turi::query_eval::infer_planner_node_num_output_columns((uint64_t *)&v77);
    if (v78) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
    }
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    unint64_t v76 = 0;
    std::vector<std::shared_ptr<turi::sarray<turi::flexible_type>>>::vector(&v89, v22);
    if (v22)
    {
      for (unint64_t i = 0; i != v22; ++i)
      {
        uint64_t v24 = (void *)*((void *)&v92 + 1);
        if (!*((void *)&v92 + 1)) {
          goto LABEL_43;
        }
        uint64_t v25 = (char *)&v92 + 8;
        do
        {
          uint64_t v26 = v24;
          std::string::size_type v27 = v25;
          unint64_t v28 = v24[4];
          if (v28 >= i) {
            uint64_t v25 = (char *)v24;
          }
          else {
            ++v24;
          }
          uint64_t v24 = (void *)*v24;
        }
        while (v24);
        if (v25 == (char *)&v92 + 8) {
          goto LABEL_43;
        }
        if (v28 < i) {
          uint64_t v26 = v27;
        }
        if (i >= v26[4])
        {
          uint64_t v37 = v89;
          uint64_t v39 = *((void *)v25 + 5);
          uint64_t v38 = *((void *)v25 + 6);
          if (v38) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v40 = &v37[2 * i];
          unint64_t v41 = (std::__shared_weak_count *)v40[1];
          *unint64_t v40 = v39;
          v40[1] = v38;
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
        }
        else
        {
LABEL_43:
          long long v29 = v75;
          if (v75 >= v76)
          {
            int v31 = (char *)v74;
            uint64_t v32 = (v75 - (unsigned char *)v74) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v34 = v76 - (unsigned char *)v74;
            if ((v76 - (unsigned char *)v74) >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v76, v35);
              int v31 = (char *)v74;
              long long v29 = v75;
            }
            else
            {
              uint64_t v36 = 0;
            }
            int v42 = &v36[8 * v32];
            *(void *)int v42 = i;
            unint64_t v30 = v42 + 8;
            while (v29 != v31)
            {
              uint64_t v43 = *((void *)v29 - 1);
              v29 -= 8;
              *((void *)v42 - 1) = v43;
              v42 -= 8;
            }
            uint64_t v74 = v42;
            uint64_t v75 = v30;
            unint64_t v76 = &v36[8 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(void *)uint64_t v75 = i;
            unint64_t v30 = v29 + 8;
          }
          uint64_t v75 = v30;
        }
      }
    }
    if (v74 != v75)
    {
      long long v83 = *(std::string **)a2;
      std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)&v84, a2 + 8);
      int v86 = *(_DWORD *)(a2 + 40);
      if (*(char *)(a2 + 71) < 0) {
        std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
      }
      else {
        std::string v87 = *(std::string *)(a2 + 48);
      }
      memset(&v88, 0, sizeof(v88));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v88, *(long long **)(a2 + 72), *(long long **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
      std::string::size_type v67 = v88.__r_.__value_.__r.__words[0];
      while (size != v67)
      {
        if (*(char *)(size - 1) < 0) {
          operator delete(*(void **)(size - 24));
        }
        size -= 24;
      }
      v88.__r_.__value_.__l.__size_ = v67;
      unint64_t v69 = a1[1];
      v73[0] = *a1;
      v73[1] = v69;
      if (v69) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v69 + 1, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)4>::make_planner_node((uint64_t)v73, (uint64_t **)&v74);
    }
    turi::sframe::sframe(a3, &v89, (const void ***)(a2 + 72), 1);
    __p[0] = &v89;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v74)
    {
      uint64_t v75 = (char *)v74;
      operator delete(v74);
    }
    std::__tree<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::shared_ptr<turi::sarray<turi::flexible_type>>>>>::destroy((uint64_t)&v92, *((void **)&v92 + 1));
  }
}

void sub_224065264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v47 - 217) < 0) {
    operator delete(*(void **)(v47 - 240));
  }
  if (a46 < 0) {
    operator delete(__p);
  }
  turi::sframe::~sframe(v46);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::planner::materialize@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, const turi::sframe *a3@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v6 = (turi::thread *)pthread_mutex_lock(&turi::query_eval::global_query_lock);
  if (!*(void *)a2) {
    *(void *)a2 = turi::thread::cpu_count(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((turi::query_eval::is_source_node((int **)a1) & 1) == 0)
  {
    int v8 = (int *)global_logger();
    if (v8[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v8)) {
        goto LABEL_82;
      }
      uint64_t v9 = (file_logger *)global_logger();
      started = file_logger::start_stream(v9, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "materialize", 251, 1);
      uint64_t v11 = pthread_getspecific(*((void *)started + 74));
      if (v11 && *((unsigned char *)v11 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11 + 2, (uint64_t)"Materializing: ", 15);
      }
      int v12 = *(std::__shared_weak_count **)(a1 + 8);
      uint64_t v56 = *(int **)a1;
      uint64_t v57 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)started, (uint64_t *)&v56);
      char v14 = pthread_getspecific(*(void *)(v13 + 592));
      if (v14)
      {
        if (*((unsigned char *)v14 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(void *)(v14[2] - 24) + 16));
          uint64_t v15 = std::locale::use_facet(v59, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
          std::locale::~locale(v59);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush((file_logger *)v13);
          if (*(_DWORD *)(v13 + 600) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
    }
  }
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 8);
    uint64_t v54 = *(int **)a1;
    uint64_t v55 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::optimization_engine::optimize_planner_graph((uint64_t *)&v54, a2, v59);
    long long v17 = *(_OWORD *)&v59[0].__locale_;
    v59[0].__locale_ = 0;
    v59[1].__locale_ = 0;
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 8);
    *(_OWORD *)a1 = v17;
    if (v18)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if (v59[1].__locale_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59[1].__locale_);
      }
    }
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if ((turi::query_eval::is_source_node((int **)a1) & 1) == 0)
    {
      uint64_t v19 = (int *)global_logger();
      if (v19[169] <= 2)
      {
        if (!cppipc::must_cancel((cppipc *)v19))
        {
          uint64_t v20 = (file_logger *)global_logger();
          uint64_t v21 = file_logger::start_stream(v20, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "materialize", 256, 1);
          unint64_t v22 = pthread_getspecific(*((void *)v21 + 74));
          if (v22 && *((unsigned char *)v22 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22 + 2, (uint64_t)"Optimized As: ", 14);
          }
          uint64_t v23 = *(std::__shared_weak_count **)(a1 + 8);
          uint64_t v52 = *(int **)a1;
          unint64_t v53 = v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v24 = file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)v21, (uint64_t *)&v52);
          uint64_t v25 = pthread_getspecific(*(void *)(v24 + 592));
          if (v25)
          {
            if (*((unsigned char *)v25 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(v25[2] - 24) + 16));
              uint64_t v26 = std::locale::use_facet(v59, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
              std::locale::~locale(v59);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush((file_logger *)v24);
              if (*(_DWORD *)(v24 + 600) == 7)
              {
                __print_back_trace();
                uint64_t v43 = __cxa_allocate_exception(8uLL);
                *uint64_t v43 = "LOG_FATAL encountered";
                __cxa_throw(v43, MEMORY[0x263F8C1D8], 0);
              }
            }
          }
          if (v53) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v53);
          }
          goto LABEL_39;
        }
LABEL_82:
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
    }
  }
LABEL_39:
  unint64_t v28 = *(int **)a1;
  std::string::size_type v27 = *(std::__shared_weak_count **)(a1 + 8);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(unsigned char *)(a2 + 43))
  {
    v59[0] = *(std::locale *)a2;
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)&v59[1], a2 + 8);
    int v60 = *(_DWORD *)(a2 + 40);
    if (*(char *)(a2 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
    }
    else {
      std::string v61 = *(std::string *)(a2 + 48);
    }
    memset(&v62, 0, sizeof(v62));
    long long v29 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v62, *(long long **)(a2 + 72), *(long long **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
    v59[0].__locale_ = (std::locale::__imp *)turi::thread::cpu_count((turi::thread *)v29);
    MEMORY[0x22A614700](&v61, "");
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator=[abi:ne180100](&v59[1].__locale_);
    unint64_t v30 = *(int **)a1;
    int v31 = *(std::__shared_weak_count **)(a1 + 8);
    v50[0] = (unint64_t)v30;
    v50[1] = (unint64_t)v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::partial_materialize(v50, (uint64_t)v59, v51);
    unint64_t v28 = (int *)v51[0];
    uint64_t v32 = v51[1];
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    v51[0] = (void **)&v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v51);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](&v59[1].__locale_);
    std::string::size_type v27 = (std::__shared_weak_count *)v32;
  }
  unint64_t v33 = (int *)global_logger();
  if (v33[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v33)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    uint64_t v34 = (file_logger *)global_logger();
    unint64_t v35 = file_logger::start_stream(v34, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "materialize", 274, 1);
    uint64_t v36 = pthread_getspecific(*((void *)v35 + 74));
    if (v36 && *((unsigned char *)v36 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36 + 2, (uint64_t)"Reduced plan: ", 14);
    }
    int v48 = v28;
    uint64_t v49 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>((uint64_t)v35, (uint64_t *)&v48);
    uint64_t v38 = pthread_getspecific(*(void *)(v37 + 592));
    if (v38)
    {
      if (*((unsigned char *)v38 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(void *)(v38[2] - 24) + 16));
        uint64_t v39 = std::locale::use_facet(v59, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
        std::locale::~locale(v59);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v37);
        if (*(_DWORD *)(v37 + 600) == 7)
        {
          __print_back_trace();
          unint64_t v41 = __cxa_allocate_exception(8uLL);
          void *v41 = "LOG_FATAL encountered";
          __cxa_throw(v41, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
  }
  if (!*(void *)(a2 + 32))
  {
    uint64_t v46 = v28;
    uint64_t v47 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::execute_node(&v46, a2, (uint64_t)a3);
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    turi::sframe::sframe((turi::sframe *)v58, a3);
    turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v58);
  }
  uint64_t v44 = v28;
  uint64_t v45 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::execute_node(&v44, a2, (uint64_t)a3);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return pthread_mutex_unlock(&turi::query_eval::global_query_lock);
}

void sub_224065CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  std::locale::~locale((std::locale *)(v22 - 192));
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  pthread_mutex_unlock(&turi::query_eval::global_query_lock);
  _Unwind_Resume(a1);
}

uint64_t file_logger::operator<<<std::shared_ptr<turi::query_eval::planner_node>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = pthread_getspecific(*(void *)(a1 + 592));
  if (v4 && *((unsigned char *)v4 + 280)) {
    turi::query_eval::operator<<(v4 + 2, a2);
  }
  return a1;
}

void turi::query_eval::partial_materialize(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(unsigned char *)(a2 + 42))
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[1];
    unint64_t v10 = *a1;
    uint64_t v11 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::naive_partial_materialize((uint64_t)&v10, a2, a3);
    uint64_t v4 = v11;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    unint64_t v6 = *a1;
    uint64_t v7 = v5;
    int v8 = v9;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::partial_materialize_impl(&v6, a2, (uint64_t)&v8, (uint64_t)a3);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&v8, v9[0]);
  }
}

void sub_224065F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, void *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t turi::query_eval::planner_node::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>((uint64_t **)(a1 + 8), *(void **)(a2 + 8), (void *)(a2 + 16));
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::any>,std::__tree_node<std::__value_type<std::string,turi::any>,void *> *,long>>((uint64_t **)(a1 + 32), *(long long **)(a2 + 32), (long long *)(a2 + 40));
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<turi::query_eval::planner_node> const*,std::shared_ptr<turi::query_eval::planner_node> const*>(a1 + 56, *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
  }
  uint64_t v5 = *(void *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 88);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void turi::query_eval::planner::materialize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  *a5 = a4;
  uint64_t v7 = (uint64_t)(a5 + 1);
  std::function<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator=(a5 + 1, a3);
  uint64_t v8 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = v8;
  uint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a5;
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)v14, v7);
  int v15 = *((_DWORD *)a5 + 10);
  if (*((char *)a5 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a5[6], a5[7]);
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a5 + 2);
  }
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, (long long *)a5[9], (long long *)a5[10], 0xAAAAAAAAAAAAAAABLL * ((a5[10] - a5[9]) >> 3));
  turi::query_eval::planner::materialize((uint64_t)&v10, (uint64_t)&v13, (const turi::sframe *)v18);
  turi::sframe::~sframe((turi::sframe *)v18);
  int v12 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v14);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_224066168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

void *std::function<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

BOOL turi::query_eval::planner::online_materialization_recommended(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  unint64_t v5 = *a2;
  unint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v3 = turi::query_eval::infer_planner_node_num_dependency_nodes(&v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3 >= turi::query_eval::SFRAME_MAX_LAZY_NODE_SIZE;
}

void sub_224066294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::query_eval::planner::materialize_as_planner_node(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a3;
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a3 + 1));
  int v11 = *((_DWORD *)a3 + 10);
  if (*((char *)a3 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)a3[6], a3[7]);
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a3 + 2);
  }
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, (long long *)a3[9], (long long *)a3[10], 0xAAAAAAAAAAAAAAABLL * ((a3[10] - a3[9]) >> 3));
  turi::query_eval::planner::materialize((uint64_t)&v5, (uint64_t)&v9, (const turi::sframe *)v14);
  uint64_t v7 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  turi::sframe::sframe((turi::sframe *)v8, (const turi::sframe *)v14);
  turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v8);
}

void sub_22406641C(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void turi::query_eval::planner::slice(unint64_t *a1@<X1>, std::string::size_type a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  v29[3] = *MEMORY[0x263EF8340];
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v18 = v19;
  if (!turi::query_eval::is_linear_graph(a1))
  {
    uint64_t v25 = 0;
    memset(&v26[24], 0, 11);
    v26[35] = 1;
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    memset(v29, 0, 24);
    uint64_t v8 = (std::__shared_weak_count *)a1[1];
    v16[0] = *a1;
    v16[1] = (unint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    turi::query_eval::partial_materialize(v16, (uint64_t)&v25, &v17);
    uint64_t v9 = (std::__shared_weak_count *)a1[1];
    *(_OWORD *)a1 = v17;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (!turi::query_eval::is_linear_graph(a1))
    {
      uint64_t v10 = a1[1];
      v15[0] = *a1;
      v15[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      *(_OWORD *)std::string __p = 0u;
      memset(v20, 0, sizeof(v20));
      BYTE11(v21) = 1;
      int v11 = std::string::basic_string[abi:ne180100]<0>(__p, "");
      *((void *)&v23 + 1) = 0;
      long long v24 = 0uLL;
      turi::query_eval::planner::materialize_as_planner_node((uint64_t)v11, v15, (uint64_t *)v20);
    }
    *(void *)&long long v17 = v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    if (v28 < 0) {
      operator delete(v27);
    }
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](v26);
  }
  if (!turi::query_eval::is_linear_graph(a1)) {
    turi::query_eval::planner::slice(std::shared_ptr<turi::query_eval::planner_node> &,unsigned long,unsigned long)::$_0::operator()();
  }
  int v12 = (std::__shared_weak_count *)a1[1];
  unint64_t v13 = *a1;
  char v14 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  turi::query_eval::make_sliced_graph(&v13, a2, a3, (uint64_t)&v18, a4);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&v18, v19[0]);
}

void sub_2240666E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  char v14 = va_arg(va1, void *);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  turi::query_eval::materialize_options::~materialize_options((void **)va1);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  turi::query_eval::materialize_options::~materialize_options((void **)(v10 - 168));
  std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)va, v14);
  _Unwind_Resume(a1);
}

void turi::query_eval::planner::slice(std::shared_ptr<turi::query_eval::planner_node> &,unsigned long,unsigned long)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"is_linear_graph(tip)", 20);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "operator()", 330, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::query_eval::planner::slice(std::shared_ptr<turi::query_eval::planner_node> &,unsigned long,unsigned long)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224066868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

BOOL turi::query_eval::planner::test_equal_length(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  __int16 v5 = turi::query_eval::prove_equal_length((uint64_t)a2, (uint64_t)a3);
  int v6 = HIBYTE(v5);
  if (!(_BYTE)v5)
  {
    char v7 = (std::__shared_weak_count *)a3[1];
    uint64_t v35 = *a3;
    uint64_t v36 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = turi::query_eval::infer_planner_node_length((uint64_t)&v35);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (v8 != -1) {
      goto LABEL_7;
    }
    uint64_t v18 = (int *)global_logger();
    if (v18[169] <= 2)
    {
      if (cppipc::must_cancel((cppipc *)v18)) {
        log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
      }
      uint64_t v19 = (file_logger *)global_logger();
      started = file_logger::start_stream(v19, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "test_equal_length", 341, 1);
      long long v21 = pthread_getspecific(*((void *)started + 74));
      if (v21 && *((unsigned char *)v21 + 280)) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21 + 2, (uint64_t)"Unable to prove equi-length. Materializing RHS", 46);
      }
      uint64_t v22 = pthread_getspecific(*((void *)started + 74));
      if (v22)
      {
        if (*((unsigned char *)v22 + 280))
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(v22[2] - 24) + 16));
          long long v23 = std::locale::use_facet(&v37, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
          std::locale::~locale(&v37);
          std::ostream::put();
          std::ostream::flush();
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            void *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
          }
        }
      }
    }
    long long v24 = (std::__shared_weak_count *)a3[1];
    uint64_t v33 = *a3;
    uint64_t v34 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    memset(v44, 0, sizeof(v44));
    BYTE11(v45) = 1;
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    long long v48 = 0uLL;
    *((void *)&v47 + 1) = 0;
    turi::query_eval::planner::materialize((uint64_t)&v33, (uint64_t)v44, (const turi::sframe *)v49);
    turi::sframe::~sframe((turi::sframe *)v49);
    v37.__locale_ = (std::locale::__imp *)((char *)&v47 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    if (SBYTE7(v47) < 0) {
      operator delete((void *)v46);
    }
    std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100](&v44[1]);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    __int16 v25 = turi::query_eval::prove_equal_length((uint64_t)a2, (uint64_t)a3);
    int v6 = HIBYTE(v25);
    if (!(_BYTE)v25)
    {
LABEL_7:
      uint64_t v9 = (std::__shared_weak_count *)a2[1];
      uint64_t v31 = *a2;
      uint64_t v32 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = turi::query_eval::infer_planner_node_length((uint64_t)&v31);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if (v10 == -1)
      {
        int v11 = (int *)global_logger();
        if (v11[169] <= 2)
        {
          if (cppipc::must_cancel((cppipc *)v11)) {
            log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
          }
          uint64_t v12 = (file_logger *)global_logger();
          unint64_t v13 = file_logger::start_stream(v12, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "test_equal_length", 346, 1);
          char v14 = pthread_getspecific(*((void *)v13 + 74));
          if (v14 && *((unsigned char *)v14 + 280)) {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14 + 2, (uint64_t)"Still unable to prove equi-length. Materializing LHS", 52);
          }
          uint64_t v15 = pthread_getspecific(*((void *)v13 + 74));
          if (v15)
          {
            if (*((unsigned char *)v15 + 280))
            {
              std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(v15[2] - 24) + 16));
              uint64_t v16 = std::locale::use_facet(&v37, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
              std::locale::~locale(&v37);
              std::ostream::put();
              std::ostream::flush();
              file_logger::stream_flush(v13);
              if (*((_DWORD *)v13 + 150) == 7)
              {
                __print_back_trace();
                char v28 = __cxa_allocate_exception(8uLL);
                *char v28 = "LOG_FATAL encountered";
                __cxa_throw(v28, MEMORY[0x263F8C1D8], 0);
              }
            }
          }
        }
        long long v17 = (std::__shared_weak_count *)a2[1];
        uint64_t v29 = *a2;
        unint64_t v30 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        *(_OWORD *)std::string __p = 0u;
        memset(v38, 0, sizeof(v38));
        BYTE11(v39) = 1;
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        *((void *)&v41 + 1) = 0;
        long long v42 = 0uLL;
        turi::query_eval::planner::materialize((uint64_t)&v29, (uint64_t)v38, (const turi::sframe *)v43);
        turi::sframe::~sframe((turi::sframe *)v43);
        v37.__locale_ = (std::locale::__imp *)((char *)&v41 + 8);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
        if (SBYTE7(v41) < 0) {
          operator delete(__p[0]);
        }
        std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::~__value_func[abi:ne180100]((void *)v38 + 1);
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        int v6 = ((unsigned __int16)turi::query_eval::prove_equal_length((uint64_t)a2, (uint64_t)a3) >> 8);
      }
    }
  }
  return v6 != 0;
}

void sub_224066E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::locale::~locale((std::locale *)va);
  _Unwind_Resume(a1);
}

void turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"sf.num_columns()", 16);
  __int16 v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"exec_params.output_column_names.size()", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "operator()", 62, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406707C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", 112);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"1", 1);
  __int16 v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"==", 2);
  int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"exec_params.output_column_names.size()", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"==", 2);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  uint64_t v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/query_engine/planning/planner.cpp", "operator()", 81, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  unint64_t v13 = v16;
  turi::query_eval::execute_node(std::shared_ptr<turi::query_eval::planner_node>,turi::query_eval::materialize_options const&)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406730C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::query_eval::execute_node_impl(uint64_t *a1@<X0>, unint64_t *a2@<X1>, turi::sframe *a3@<X8>)
{
  if (turi::query_eval::is_parallel_slicable((int **)a1) && (uint64_t v6 = *a2) != 0)
  {
    std::vector<std::shared_ptr<turi::query_eval::planner_node>>::vector(v17, *a2);
    uint64_t v7 = 0;
    uint64_t v8 = 1;
    do
    {
      v16[0] = 0;
      v16[1] = 0;
      char v15 = (void **)v16;
      uint64_t v9 = (std::__shared_weak_count *)a1[1];
      uint64_t v12 = *a1;
      unint64_t v13 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      turi::query_eval::make_segmented_graph(&v12, v6, (uint64_t)&v15, (uint64_t)&v14);
      long long v10 = v14;
      long long v14 = 0uLL;
      int v11 = (std::__shared_weak_count *)v17[0][v8];
      *(_OWORD *)&v17[0][2 * v7] = v10;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (*((void *)&v14 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::destroy((uint64_t)&v15, v16[0]);
      ++v7;
      v8 += 2;
    }
    while (v6 != v7);
    turi::query_eval::subplan_executor::run_concat((uint64_t)&v15, v17, (uint64_t)a2, a3);
    char v15 = (void **)v17;
    std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  }
  else
  {
    turi::query_eval::subplan_executor::run(a1, (uint64_t)a2, a3);
  }
}

void sub_224067548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<std::shared_ptr<std::vector<turi::flexible_type>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>> const*,std::shared_ptr<turi::sarray<turi::flexible_type>>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  long long v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    long long v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::shared_ptr<turi::sarray<turi::flexible_type>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::sarray<turi::flexible_type>>>,std::shared_ptr<turi::sarray<turi::flexible_type>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<turi::fileio::file_ownership_handle>>,std::shared_ptr<turi::fileio::file_ownership_handle>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void turi::query_eval::partial_materialize_impl(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v37[37] = *MEMORY[0x263EF8340];
  char v8 = *(void **)(a3 + 8);
  unint64_t v9 = *a1;
  if (!v8)
  {
LABEL_6:
    unint64_t v12 = v9 + 56;
    uint64_t v11 = *(void *)(v9 + 56);
    if (*(void *)(v12 + 8) != v11)
    {
      unint64_t v13 = 0;
      uint64_t v14 = 8;
      do
      {
        long long v15 = *(_OWORD *)(v11 + 16 * v13);
        long long v34 = v15;
        if (*((void *)&v15 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        turi::query_eval::partial_materialize_impl(&v35, &v34, a2, a3);
        uint64_t v16 = *(void *)(*a1 + 56);
        long long v17 = *(std::__shared_weak_count **)(v16 + v14);
        *(_OWORD *)(v16 + 16 * v13) = v35;
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (*((void *)&v34 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
        }
        ++v13;
        uint64_t v11 = *(void *)(*a1 + 56);
        uint64_t v18 = *(void *)(*a1 + 64);
        v14 += 16;
      }
      while (v13 < (v18 - v11) >> 4);
      if (v11 != v18)
      {
        if ((turi::query_eval::consumes_inputs_at_same_rates((int **)a1) & 1) == 0)
        {
          uint64_t v19 = *(uint64_t **)(*a1 + 56);
          if (v19 != *(uint64_t **)(*a1 + 64))
          {
            uint64_t v32 = *v19;
            uint64_t v20 = (std::__shared_weak_count *)v19[1];
            uint64_t v33 = v20;
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            turi::query_eval::optimization_engine::optimize_planner_graph(&v32, a2, &v35);
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            long long v31 = v35;
            if (*((void *)&v35 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            turi::query_eval::execute_node((int **)&v31, a2, (uint64_t)v37);
            turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v37);
          }
        }
        if ((turi::query_eval::is_linear_transform((int **)a1) & 1) == 0
          && !turi::query_eval::is_sublinear_transform((int **)a1))
        {
          std::string::size_type v27 = (std::__shared_weak_count *)a1[1];
          uint64_t v29 = (int *)*a1;
          unint64_t v30 = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          turi::query_eval::optimization_engine::optimize_planner_graph((uint64_t *)&v29, a2, &v35);
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          long long v28 = v35;
          if (*((void *)&v35 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          turi::query_eval::execute_node((int **)&v28, a2, (uint64_t)v36);
          turi::query_eval::operator_impl<(turi::query_eval::planner_node_type)7>::make_planner_node(v36);
        }
      }
    }
    *(void *)&long long v35 = a1;
    long long v21 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35);
    long long v23 = (int *)*a1;
    uint64_t v22 = (uint64_t *)a1[1];
    if (v22) {
      atomic_fetch_add_explicit(v22 + 1, 1uLL, memory_order_relaxed);
    }
    long long v24 = (std::__shared_weak_count *)v21[7];
    v21[6] = (uint64_t *)v23;
    v21[7] = v22;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *a1 = 0;
    a1[1] = 0;
    return;
  }
  while (1)
  {
    unint64_t v10 = v8[4];
    if (v9 >= v10) {
      break;
    }
LABEL_5:
    char v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_6;
    }
  }
  if (v10 < v9)
  {
    ++v8;
    goto LABEL_5;
  }
  *(void *)&long long v35 = a1;
  __int16 v25 = std::__tree<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::__map_value_compare<std::shared_ptr<turi::query_eval::planner_node>,std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>,std::less<std::shared_ptr<turi::query_eval::planner_node>>,true>,std::allocator<std::__value_type<std::shared_ptr<turi::query_eval::planner_node>,std::shared_ptr<turi::query_eval::execution_node>>>>::__emplace_unique_key_args<std::shared_ptr<turi::query_eval::planner_node>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<turi::query_eval::planner_node> const&>,std::tuple<>>((uint64_t **)a3, a1, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35);
  uint64_t v26 = v25[7];
  *(void *)a4 = v25[6];
  *(void *)(a4 + 8) = v26;
  if (v26) {
    atomic_fetch_add_explicit(v26 + 1, 1uLL, memory_order_relaxed);
  }
}

void sub_224067A4C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  turi::sframe::~sframe((turi::sframe *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::flexible_type>,std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      char v8 = (uint64_t *)v6[1];
    }
    else {
      char v8 = v6;
    }
    long long v15 = result;
    uint64_t v16 = v8;
    long long v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,turi::flexible_type &>::operator=[abi:ne180100]<std::string const,turi::flexible_type,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          long long v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v12);
          }
          char v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_multi<std::pair<std::string const,turi::flexible_type> const&>(v5, (std::string *)(a2 + 4));
      unint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_224067C84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,turi::flexible_type &>::operator=[abi:ne180100]<std::string const,turi::flexible_type,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 + 24 != v4)
  {
    switch(*(unsigned char *)(v4 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          if (*((char *)v5 + 31) < 0) {
            operator delete((void *)v5[1]);
          }
          atomic_ullong *volatile v6 = v5;
          uint64_t v7 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          unint64_t v9 = (void *)v8[1];
          if (v9)
          {
            void v8[2] = (atomic_ullong)v9;
            operator delete(v9);
          }
          atomic_ullong *volatile v6 = v8;
          uint64_t v7 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          uint64_t v22 = (void **)(v10 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v22);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          uint64_t v22 = (void **)(v10 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v22);
LABEL_19:
          atomic_ullong *volatile v6 = v10;
          uint64_t v7 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *(atomic_ullong *volatile *)v4;
          if (!*(void *)v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v11 + 2);
          atomic_ullong *volatile v6 = v11;
          unsigned int v12 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v4;
          if (*(void *)v4)
          {
            uint64_t v14 = (void *)v13[6];
            if (v14)
            {
              v13[7] = (atomic_ullong)v14;
              operator delete(v14);
            }
            long long v15 = (void *)v13[3];
            if (v15)
            {
              uint64_t v13[4] = (atomic_ullong)v15;
              operator delete(v15);
            }
            uint64_t v16 = (std::__shared_weak_count *)v13[2];
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            atomic_ullong *volatile v6 = v13;
            unsigned int v12 = 2071181815;
LABEL_32:
            uint64_t v7 = v12 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v6, v7);
          }
LABEL_34:
          *(void *)uint64_t v4 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v17 = *(void *)(a2 + 24);
    *(void *)(v4 + 5) = *(void *)(a2 + 29);
    *(void *)uint64_t v4 = v17;
    LODWORD(v17) = *(unsigned __int8 *)(a2 + 36);
    *(unsigned char *)(v4 + 12) = v17;
    BOOL v18 = v17 > 9;
    int v19 = (1 << v17) & 0x33C;
    if (!v18 && v19 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)v4, 1uLL);
    }
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    unint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__emplace_multi<std::pair<std::string const,turi::flexible_type> const&>(uint64_t **a1, std::string *a2)
{
  std::__tree<std::__value_type<std::string,turi::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::flexible_type>>>::__construct_node<std::pair<std::string const,turi::flexible_type> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_224067FD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,turi::any>,std::__tree_node<std::__value_type<std::string,turi::any>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  atomic_ullong *volatile v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      atomic_ullong *volatile v8 = (uint64_t *)v6[1];
    }
    else {
      atomic_ullong *volatile v8 = v6;
    }
    long long v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          turi::any::operator=(v8 + 7, (void *)v9 + 7);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          atomic_ullong *volatile v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              atomic_ullong *volatile v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v12);
          }
          atomic_ullong *volatile v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_multi<std::pair<std::string const,turi::any> const&>(v5, a2 + 2);
      atomic_ullong *volatile v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          atomic_ullong *volatile v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_22406816C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *turi::any::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a1;
  if (*a2)
  {
    if (!v4) {
      goto LABEL_9;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(*a1);
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
    if (std::type_info::operator==[abi:ne180100](v6, v7))
    {
      (*(void (**)(uint64_t, void))(*(void *)*a1 + 40))(*a1, *a2);
      return a1;
    }
    uint64_t v3 = *a2;
    if (!*a2) {
      uint64_t v8 = 0;
    }
    else {
LABEL_9:
    }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    uint64_t v9 = *a1;
    *a1 = v8;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
  }
  else
  {
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(*a1);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__emplace_multi<std::pair<std::string const,turi::any> const&>(uint64_t **a1, long long *a2)
{
  std::__tree<std::__value_type<std::string,turi::any>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::any>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::any>>>::__construct_node<std::pair<std::string const,turi::any> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_2240683B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,turi::any>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,turi::any>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(unsigned long,std::shared_ptr<turi::sframe_rows> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    atomic_ullong *volatile v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2240686B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void turi::recursive_mutex::~recursive_mutex(pthread_mutex_t *this)
{
}

void turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#1}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", 89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong *volatile v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", "operator()", 105, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240687E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#2}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", 89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong *volatile v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", "operator()", 107, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_2240689E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#3}::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", 89);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"!error", 6);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    atomic_ullong *volatile v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/parallel/mutex.hpp", "operator()", 109, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::recursive_mutex::recursive_mutex(void)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_224068BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::~dir_archive(void **this)
{
  turi::dir_archive::close((turi::dir_archive *)this);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](this + 15);
  std::unique_ptr<turi::dir_archive>::reset[abi:ne180100](this + 14, 0);
  uint64_t v2 = this[11];
  this[11] = 0;
  if (v2) {
    (*(void (**)(void *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = this[10];
  this[10] = 0;
  if (v3) {
    (*(void (**)(void *))(*(void *)v3 + 8))(v3);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 4), this[5]);
  uint64_t v4 = this + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_224068DBC(void *a1)
{
}

void **turi::dir_archive::close(turi::dir_archive *this)
{
  if (*((void *)this + 10))
  {
    if (*((char *)this + 79) >= 0) {
      size_t v2 = *((unsigned __int8 *)this + 79);
    }
    else {
      size_t v2 = *((void *)this + 8);
    }
    uint64_t v3 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v2 + 1);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v3 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if (v2)
    {
      if (*((char *)this + 79) >= 0) {
        uint64_t v4 = (char *)this + 56;
      }
      else {
        uint64_t v4 = (char *)*((void *)this + 7);
      }
      memmove(v3, v4, v2);
    }
    *(_WORD *)((char *)&v3->__r_.__value_.__l.__data_ + v2) = 47;
    atomic_ullong *volatile v5 = std::string::append(&v16, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
    std::string __p = *v5;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
  }
  uint64_t v6 = (_DWORD *)*((void *)this + 11);
  if (v6)
  {
    boost::iostreams::detail::execute_all<boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::member_close_operation<boost::iostreams::detail::linked_streambuf<char,std::char_traits<char>>>,boost::iostreams::detail::reset_operation<boost::iostreams::detail::optional<boost::iostreams::detail::concept_adapter<turi::fileio_impl::general_fstream_source>>>,boost::iostreams::detail::clear_flags_operation<int>>(v6 + 4, 8, v6 + 4, 16, (turi::fileio_impl::general_fstream_source *)(v6 + 22), v6 + 46);
    uint64_t v7 = *((void *)this + 11);
    *((void *)this + 11) = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  MEMORY[0x22A614700]((char *)this + 56, "");
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = 0xFFFFFFFFFFFFFFFFLL;
  v16.__r_.__value_.__r.__words[2] = 0;
  uint64_t v17 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = &v19;
  *(void *)this = -1;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)this + 8));
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v16.__r_.__value_.__r.__words[1];
  uint64_t v9 = (char *)this + 40;
  uint64_t v8 = (void *)*((void *)this + 5);
  *((void *)this + 3) = v17;
  uint64_t v17 = 0;
  *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = 0uLL;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, v8);
  atomic_ullong *volatile v10 = v19;
  *((void *)this + 4) = v18;
  *((void *)this + 5) = v10;
  uint64_t v11 = v20;
  *((void *)this + 6) = v20;
  if (v11)
  {
    uint64_t v10[2] = v9;
    atomic_ullong *volatile v10 = 0;
    uint64_t v18 = &v19;
    int v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    *((void *)this + 4) = v9;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v18, v10);
  p_std::string::size_type size = &v16.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  *((void *)this + 12) = 0;
  uint64_t v12 = *((void *)this + 18);
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 48))(v12);
    std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((void *)this + 15);
  }
  long long v15 = (void **)*((void *)this + 14);
  uint64_t v14 = (void ***)((char *)this + 112);
  uint64_t result = v15;
  if (v15)
  {
    turi::dir_archive::close((turi::dir_archive *)result);
    return std::unique_ptr<turi::dir_archive>::reset[abi:ne180100](v14, 0);
  }
  return result;
}

void sub_22406906C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void turi::dir_archive_impl::archive_index_information::~archive_index_information(turi::dir_archive_impl::archive_index_information *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  size_t v2 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void turi::check_directory_writable(uint64_t a1, int a2)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __s = *(std::string *)a1;
  }
  turi::fileio::get_protocol(&__s, (std::string::size_type)v12);
  BOOL is_writable_protocol = turi::fileio::is_writable_protocol((uint64_t *)v12);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (!is_writable_protocol)
  {
    uint64_t v8 = (long long *)a1;
    turi::check_directory_writable(std::string,BOOL)::$_0::operator()(&v8);
  }
  turi::fileio::get_file_status(a1, (uint64_t)&v8);
  int v5 = (int)v8;
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v5 == 2)
  {
    turi::fileio::get_directory_listing(a1, &v8);
    BOOL has_existing_archive = turi::dir_archive::directory_has_existing_archive(&v8);
    if ((has_existing_archive & a2) == 1) {
      turi::check_directory_writable(std::string,BOOL)::$_2::operator()();
    }
    if (has_existing_archive)
    {
      if ((a2 & 1) == 0)
      {
        if (*(char *)(a1 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
        }
        else {
          std::string v7 = *(std::string *)a1;
        }
        turi::dir_archive::delete_archive((uint64_t)&v7);
      }
    }
    else if (__p != v8)
    {
      turi::check_directory_writable(std::string,BOOL)::$_3::operator()();
    }
    uint64_t v14 = &v8;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  }
  else if (v5 == 1)
  {
    uint64_t v8 = (long long *)a1;
    turi::check_directory_writable(std::string,BOOL)::$_1::operator()(&v8);
  }
}

void sub_224069260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  *(void *)(v25 - 40) = &a16;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 40));
  _Unwind_Resume(a1);
}

BOOL turi::dir_archive::directory_has_existing_archive(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  uint64_t v2 = *a1 + 32;
  do
  {
    if (*(char *)(v2 - 9) < 0)
    {
      std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(v2 - 32), *(void *)(v2 - 24));
    }
    else
    {
      long long v3 = *(_OWORD *)(v2 - 32);
      v11.__r_.__value_.__r.__words[2] = *(void *)(v2 - 16);
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v3;
    }
    int v12 = *(_DWORD *)(v2 - 8);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v11;
    }
    turi::fileio::get_filename((uint64_t)&__p, &__s1);
    size_t v4 = strlen((const char *)turi::DIR_ARCHIVE_INI_FILE);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v4 == __s1.__r_.__value_.__l.__size_)
      {
        if (v4 == -1) {
LABEL_30:
        }
          std::string::__throw_out_of_range[abi:ne180100]();
        uint64_t v6 = (void *)__s1.__r_.__value_.__r.__words[0];
        BOOL v5 = memcmp(__s1.__r_.__value_.__l.__data_, (const void *)turi::DIR_ARCHIVE_INI_FILE, v4) == 0;
      }
      else
      {
        BOOL v5 = 0;
        uint64_t v6 = (void *)__s1.__r_.__value_.__r.__words[0];
      }
      operator delete(v6);
    }
    else if (v4 == HIBYTE(__s1.__r_.__value_.__r.__words[2]))
    {
      if (v4 == -1) {
        goto LABEL_30;
      }
      BOOL v5 = memcmp(&__s1, (const void *)turi::DIR_ARCHIVE_INI_FILE, v4) == 0;
    }
    else
    {
      BOOL v5 = 0;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    char v7 = v2 == v1 || v5;
    v2 += 32;
  }
  while ((v7 & 1) == 0);
  return v5;
}

void sub_224069450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::dir_archive::delete_archive(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  turi::fileio::convert_to_generic(a1, &v11);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v2 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  size_t v3 = HIBYTE(v2);
  if ((v3 & 0x80u) == 0) {
    size_t v4 = v3;
  }
  else {
    size_t v4 = *(void *)(a1 + 8);
  }
  BOOL v5 = &v11;
  std::string::basic_string[abi:ne180100]((uint64_t)&v11, v4 + 1);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    BOOL v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if (v4)
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v6 = (const void *)a1;
    }
    else {
      uint64_t v6 = *(const void **)a1;
    }
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  char v7 = std::string::append(&v11, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  std::string::size_type v10 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
}

void sub_224069788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, char *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a2)
  {
    a30 = &a11;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
    std::__tree<std::__value_type<std::string,MPSRNNMatrixId>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSRNNMatrixId>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSRNNMatrixId>>>::destroy((uint64_t)&a14, a15);
    turi::dir_archive_impl::archive_index_information::~archive_index_information((turi::dir_archive_impl::archive_index_information *)&a23);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x22406974CLL);
  }
  _Unwind_Resume(exception_object);
}

void turi::dir_archive::init_for_write(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  turi::fileio::convert_to_generic(a2, &v13);
  size_t v3 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)size_t v3 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(void *)(a1 + 72) = *((void *)&v13.__r_.__value_.__l + 2);
  turi::fileio::create_directory_or_throw(a1 + 56);
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = 0xFFFFFFFFFFFFFFFFLL;
  v13.__r_.__value_.__r.__words[2] = 0;
  uint64_t v14 = 0;
  std::string v16 = 0;
  uint64_t v17 = 0;
  long long v15 = &v16;
  *(void *)a1 = -1;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v13.__r_.__value_.__r.__words[1];
  *(void *)(a1 + 24) = v14;
  uint64_t v14 = 0;
  *(_OWORD *)&v13.__r_.__value_.__r.__words[1] = 0uLL;
  uint64_t v4 = a1 + 40;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 32, *(void **)(a1 + 40));
  BOOL v5 = v16;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = v17;
  *(void *)(a1 + 48) = v17;
  if (v6)
  {
    v5[2] = v4;
    BOOL v5 = 0;
    long long v15 = &v16;
    std::string v16 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v4;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v15, v5);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13.__r_.__value_.__l.__size_;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  *(void *)a1 = 1;
  if (*(char *)(a1 + 79) >= 0) {
    size_t v7 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    size_t v7 = *(void *)(a1 + 64);
  }
  long long v8 = &v13;
  std::string::basic_string[abi:ne180100]((uint64_t)&v13, v7 + 1);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*(char *)(a1 + 79) >= 0) {
      uint64_t v9 = (const void *)(a1 + 56);
    }
    else {
      uint64_t v9 = *(const void **)(a1 + 56);
    }
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 47;
  std::string::size_type v10 = std::string::append(&v13, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  std::string __p = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
}

void sub_224069E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, uint64_t a14, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a19, std::__split_buffer<std::string> *a20)
{
  MEMORY[0x22A614FA0](v20, 0x10B3C405FC8E1FCLL, a3, a4, a5, a6, __p);
  _Unwind_Resume(a1);
}

void turi::anonymous namespace'::write_index_file(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v2 = (int *)global_logger();
  if (v2[169] <= 2)
  {
    if (cppipc::must_cancel((cppipc *)v2)) {
      log_stream_dispatch<true>::exec(int,char const*,char const*,int,BOOL)::{lambda(void)#1}::operator()();
    }
    size_t v3 = (file_logger *)global_logger();
    started = file_logger::start_stream(v3, 2, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "write_index_file", 80, 1);
    BOOL v5 = pthread_getspecific(*((void *)started + 74));
    if (v5 && *((unsigned char *)v5 + 280)) {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5 + 2, (uint64_t)"Writing to index file ", 22);
    }
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v13 = *(std::string *)a1;
    }
    turi::sanitize_url((__n128 *)&v13, &__p);
    uint64_t v6 = file_logger::operator<<<std::string>((uint64_t)started, (uint64_t)&__p);
    size_t v7 = pthread_getspecific(*(void *)(v6 + 592));
    if (v7)
    {
      if (*((unsigned char *)v7 + 280))
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(v7[2] - 24) + 16));
        long long v8 = std::locale::use_facet(&v16, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
        std::locale::~locale(&v16);
        std::ostream::put();
        std::ostream::flush();
        file_logger::stream_flush((file_logger *)v6);
        if (*(_DWORD *)(v6 + 600) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          void *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
        }
      }
    }
    if (v15 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  operator new();
}

void sub_22406A628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  __n128 __p = &a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void turi::dir_archive::init_for_read(uint64_t a1, const std::string *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  turi::fileio::convert_to_generic((uint64_t)a2, &v13);
  uint64_t v4 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  *(void *)(a1 + 72) = *((void *)&v13.__r_.__value_.__l + 2);
  std::string::operator=((std::string *)(a1 + 56), a2);
  if (*(char *)(a1 + 79) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 79);
  }
  else {
    size_t v5 = *(void *)(a1 + 64);
  }
  uint64_t v6 = &v12;
  std::string::basic_string[abi:ne180100]((uint64_t)&v12, v5 + 1);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 79) >= 0) {
      size_t v7 = (const void *)(a1 + 56);
    }
    else {
      size_t v7 = *(const void **)(a1 + 56);
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
  long long v8 = std::string::append(&v12, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  std::string::size_type v11 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
}

void sub_22406AC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  a26 = &a10;
  std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

void turi::anonymous namespace'::read_index_file(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v6 = *(std::string *)a1;
  }
  turi::general_ifstream::general_ifstream(v7, (uint64_t)&v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if ((v7[1].__r_.__value_.__s.__data_[*(void *)(v7[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) == 0)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    operator new();
  }
  __p[0] = (void *)a1;
}

void sub_22406B280(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::runtime_error a29)
{
}

void sub_22406B294(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x22406B360);
}

void sub_22406B2A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  MEMORY[0x22A614FA0](v44, 0x1020C402FC1992ELL);
  if (a44 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x22406B358);
}

void sub_22406B2DC()
{
}

void sub_22406B2E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x22406B360);
}

void sub_22406B2FC()
{
}

void sub_22406B30C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    JUMPOUT(0x22406B334);
  }
  JUMPOUT(0x22406B338);
}

void turi::dir_archive::open_directory_for_write(uint64_t a1, uint64_t a2, int a3)
{
  if (*(void *)(a1 + 88)) {
    turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_0::operator()();
  }
  if (*(void *)(a1 + 80)) {
    turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_1::operator()();
  }
  turi::fileio::convert_to_generic(a2, &v14);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  uint64_t v6 = 0;
  *(std::string *)a2 = v14;
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (char *)a2;
  }
  else {
    uint64_t v8 = *(char **)a2;
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if (v7 < 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  while (-v9 != v6 && v6 != -1)
  {
    int v10 = v8[v9 - 1 + v6];
    int v11 = asc_224681862[v6--];
    if (v10 != v11) {
      goto LABEL_15;
    }
  }
  if (v6 == -1)
  {
    std::string::basic_string(&v14, (const std::string *)a2, 0, v9 - 1, (std::allocator<char> *)&v15);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    char v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    *(void *)(a2 + 16) = *((void *)&v14.__r_.__value_.__l + 2);
    if ((v12 & 0x80) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_15:
    if ((v7 & 0x80) == 0)
    {
LABEL_16:
      std::string __p = *(std::string *)a2;
      goto LABEL_21;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
LABEL_21:
  turi::check_directory_writable((uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  turi::dir_archive::init_for_write(a1, a2);
}

void turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_in == nullptr", 23);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 224, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406B5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  unint64_t v2 = (void *)std::ostream::operator<<();
  uint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_out == nullptr", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 225, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::dir_archive::open_directory_for_write(std::string,BOOL)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406B7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::get_directory_metadata(uint64_t a1)
{
  turi::fileio::convert_to_generic(a1, &v20);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  uint64_t v2 = 0;
  *(std::string *)a1 = v20;
  int v3 = *(char *)(a1 + 23);
  size_t v4 = *(void *)(a1 + 8);
  if (v3 >= 0) {
    uint64_t v5 = (void *)a1;
  }
  else {
    uint64_t v5 = *(void **)a1;
  }
  size_t v6 = *(unsigned __int8 *)(a1 + 23);
  if (v3 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = (uint64_t)v5 + v7 - 1;
  while (-v7 != v2 && v2 != -1)
  {
    int v9 = *(unsigned __int8 *)(v8 + v2);
    int v10 = asc_224681862[v2--];
    if (v9 != v10) {
      goto LABEL_18;
    }
  }
  if (v2 == -1)
  {
    std::string::basic_string(&v20, (const std::string *)a1, 0, v7 - 1, (std::allocator<char> *)&v17);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(_OWORD *)a1 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
    unint64_t v11 = v20.__r_.__value_.__r.__words[2];
    *(void *)(a1 + 16) = *((void *)&v20.__r_.__value_.__l + 2);
    size_t v6 = HIBYTE(v11);
    size_t v4 = *(void *)(a1 + 8);
    LOBYTE(v3) = v6;
  }
LABEL_18:
  if ((v3 & 0x80u) == 0) {
    size_t v12 = v6;
  }
  else {
    size_t v12 = v4;
  }
  std::string v13 = &v17;
  std::string::basic_string[abi:ne180100]((uint64_t)&v17, v12 + 1);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if (v12)
  {
    if (*(char *)(a1 + 23) >= 0) {
      std::string v14 = (const void *)a1;
    }
    else {
      std::string v14 = *(const void **)a1;
    }
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 47;
  char v15 = std::string::append(&v17, (const std::string::value_type *)turi::DIR_ARCHIVE_INI_FILE);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v19 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
}

void sub_22406BB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
}

void turi::dir_archive::open_directory_for_read(uint64_t a1, uint64_t a2)
{
  turi::fileio::convert_to_generic(a2, &v12);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(std::string *)a2 = v12;
  if (*(void *)(a1 + 88)) {
    turi::dir_archive::open_directory_for_read(std::string)::$_0::operator()();
  }
  uint64_t v4 = *(void *)(a1 + 80);
  if (v4) {
    turi::dir_archive::open_directory_for_read(std::string)::$_1::operator()();
  }
  int v5 = *(char *)(a2 + 23);
  BOOL v6 = v5 < 0;
  uint64_t v7 = *(void *)a2;
  if (v5 >= 0) {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if (v6) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  uint64_t v9 = v8 + v7 - 1;
  while (-v8 != v4 && v4 != -1)
  {
    int v10 = *(unsigned __int8 *)(v9 + v4);
    int v11 = asc_224681862[v4--];
    if (v10 != v11) {
      goto LABEL_18;
    }
  }
  if (v4 == -1)
  {
    std::string::basic_string(&v12, (const std::string *)a2, 0, v8 - 1, (std::allocator<char> *)&v13);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v12;
  }
LABEL_18:
  turi::dir_archive::init_for_read(a1, (const std::string *)a2);
}

void turi::dir_archive::open_directory_for_read(std::string)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_in == nullptr", 23);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 260, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::dir_archive::open_directory_for_read(std::string)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406BD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::open_directory_for_read(std::string)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_out == nullptr", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 261, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::dir_archive::open_directory_for_read(std::string)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406BF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::get_next_random_number(turi *this)
{
  {
    turi::random::generator::generator((turi::random::generator *)&turi::get_next_random_number(void)::gen);
    __cxa_atexit((void (*)(void *))turi::random::generator::~generator, &turi::get_next_random_number(void)::gen, &dword_223D44000);
  }
  if ((turi::get_next_random_number(void)::initialized & 1) == 0)
  {
    turi::random::generator::nondet_seed((turi::random::generator *)&turi::get_next_random_number(void)::gen);
    turi::get_next_random_number(void)::initialized = 1;
  }
  pthread_mutex_lock((pthread_mutex_t *)&qword_268083940[1]);
  uint64_t v1 = boost::random::detail::generate_uniform_int<boost::random::rand48,unsigned long>(qword_268083940, 0, -1);
  pthread_mutex_unlock((pthread_mutex_t *)&qword_268083940[1]);
  return v1;
}

void sub_22406C160(_Unwind_Exception *a1)
{
}

void turi::random::generator::~generator(turi::random::generator *this)
{
}

uint64_t turi::dir_archive::get_next_write_prefix@<X0>(turi::dir_archive *this@<X0>, unsigned __int8 *a2@<X8>)
{
  do
  {
    int v3 = this;
    this = (turi::dir_archive *)*((void *)this + 14);
  }
  while (this);
  if (!*((void *)v3 + 10)) {
    turi::dir_archive::get_next_write_prefix(void)::$_0::operator()();
  }
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  uint64_t v27 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  do
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v30);
    int v6 = *((char *)v3 + 79);
    if (v6 >= 0) {
      uint64_t v7 = (uint64_t)v3 + 56;
    }
    else {
      uint64_t v7 = *((void *)v3 + 7);
    }
    if (v6 >= 0) {
      uint64_t v8 = *((unsigned __int8 *)v3 + 79);
    }
    else {
      uint64_t v8 = *((void *)v3 + 8);
    }
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v7, v8);
    int v10 = (turi *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"/m_", 3);
    *(_DWORD *)((char *)v10 + *(void *)(*(void *)v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v10
                                                                                  + *(void *)(*(void *)v10 - 24)
                                                                                  + 8) & 0xFFFFFFB5 | 8;
    turi::get_next_random_number(v10);
    std::ostream::operator<<();
    std::stringbuf::str();
    if ((char)a2[23] < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v28;
    *((void *)a2 + 2) = v29;
    turi::fileio::get_directory_listing((uint64_t)v3 + 56, &v28);
    int v11 = (unsigned __int8 *)v28;
    if ((void)v28 == *((void *)&v28 + 1))
    {
LABEL_31:
      char v23 = 1;
      goto LABEL_33;
    }
    int v12 = (char)a2[23];
    BOOL v13 = v12 < 0;
    std::string v14 = *(unsigned __int8 **)a2;
    if (v12 >= 0) {
      std::string v14 = a2;
    }
    uint64_t v15 = a2[23];
    if (v13) {
      uint64_t v15 = *((void *)a2 + 1);
    }
    while (1)
    {
      long long v16 = *(unsigned __int8 **)v11;
      uint64_t v17 = *((void *)v11 + 1);
      if ((v11[23] & 0x80u) == 0)
      {
        long long v16 = v11;
        uint64_t v17 = v11[23];
      }
      if (v17) {
        BOOL v18 = v15 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      std::string::size_type v19 = v14;
      if (!v18)
      {
        uint64_t v20 = v17 - 1;
        uint64_t v21 = v15 - 1;
        std::string::size_type v19 = v14;
        while (*v16 == *v19)
        {
          ++v19;
          if (v20)
          {
            ++v16;
            uint64_t v22 = v21--;
            --v20;
            if (v22) {
              continue;
            }
          }
          goto LABEL_24;
        }
        goto LABEL_25;
      }
LABEL_24:
      if (v19 == &v14[v15]) {
        break;
      }
LABEL_25:
      v11 += 32;
      if (v11 == *((unsigned __int8 **)&v28 + 1)) {
        goto LABEL_31;
      }
    }
    char v23 = 0;
LABEL_33:
    long long v34 = (void **)&v28;
    std::vector<std::pair<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v34);
    v30[0] = v27;
    *(void *)((char *)v30 + *(void *)(v27 - 24)) = v4;
    v31[0] = v5;
    v31[1] = MEMORY[0x263F8C318] + 16;
    if (v32 < 0) {
      operator delete((void *)v31[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22A614E30](&v33);
  }
  while ((v23 & 1) == 0);
  long long v24 = (uint64_t *)((char *)v3 + 8);
  unint64_t v25 = *((void *)v3 + 2);
  if (v25 >= *((void *)v3 + 3))
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v24, (long long *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v24, (long long *)a2);
    uint64_t result = v25 + 24;
  }
  *((void *)v3 + 2) = result;
  return result;
}

void turi::dir_archive::get_next_write_prefix(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  int v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_out != nullptr", 24);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 289, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::dir_archive::get_next_write_prefix(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406C61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::get_next_read_prefix(turi::dir_archive *this@<X0>, std::string *a2@<X8>)
{
  do
  {
    uint64_t v2 = this;
    this = (turi::dir_archive *)*((void *)this + 14);
  }
  while (this);
  if (!*((void *)v2 + 11)) {
    turi::dir_archive::get_next_read_prefix(void)::$_0::operator()();
  }
  unint64_t v3 = *((void *)v2 + 12);
  uint64_t v4 = *((void *)v2 + 1);
  if (v3 >= 0xAAAAAAAAAAAAAAABLL * ((*((void *)v2 + 2) - v4) >> 3)) {
    turi::dir_archive::get_next_read_prefix(void)::$_1::operator()();
  }
  *((void *)v2 + 12) = v3 + 1;
  uint64_t v5 = (long long *)(v4 + 24 * v3);
  if (*((char *)v5 + 23) < 0)
  {
    char v7 = *(const std::string::value_type **)v5;
    std::string::size_type v8 = *((void *)v5 + 1);
    std::string::__init_copy_ctor_external(a2, v7, v8);
  }
  else
  {
    long long v6 = *v5;
    a2->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
}

void turi::dir_archive::get_next_read_prefix(void)::$_0::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Check failed (", 14);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_objects_in != nullptr", 23);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v4);
  if (*((int *)global_logger() + 169) <= 6)
  {
    uint64_t v5 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 322, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v5, (uint64_t)&__p);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  turi::dir_archive::get_next_read_prefix(void)::$_0::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406C8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

void turi::dir_archive::get_next_read_prefix(void)::$_1::operator()()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v0 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Assertion failed: (", 19);
  uint64_t v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)":", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  unint64_t v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"): ", 3);
  uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"m_read_prefix_index", 19);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"<", 1);
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"m_index_info.prefixes.size()", 28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"  [", 3);
  char v7 = (void *)std::ostream::operator<<();
  LOBYTE(v13) = 32;
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v13, 1);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"<", 1);
  LOBYTE(v13) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
  int v10 = (void *)std::ostream::operator<<();
  int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"]", 1);
  std::endl[abi:ne180100]<char,std::char_traits<char>>(v11);
  if (*((int *)global_logger() + 169) <= 6)
  {
    int v12 = log_stream_dispatch<true>::exec((cppipc *)6, "/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/core/storage/serialization/dir_archive.cpp", "operator()", 323, 1);
    std::stringbuf::str();
    file_logger::operator<<<std::string>((uint64_t)v12, (uint64_t)&__p);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  __print_back_trace();
  BOOL v13 = v16;
  turi::dir_archive::get_next_read_prefix(void)::$_1::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_22406CB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a18 = MEMORY[0x263F8C318] + 16;
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x22A614E30](&a34);
  _Unwind_Resume(a1);
}

uint64_t turi::dir_archive::get_input_stream(turi::dir_archive *this)
{
  do
  {
    uint64_t v1 = this;
    this = (turi::dir_archive *)*((void *)this + 14);
  }
  while (this);
  return *((void *)v1 + 11);
}

uint64_t turi::dir_archive::get_output_stream(turi::dir_archive *this)
{
  do
  {
    uint64_t v1 = this;
    this = (turi::dir_archive *)*((void *)this + 14);
  }
  while (this);
  return *((void *)v1 + 10);
}

void **std::unique_ptr<turi::dir_archive>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    turi::dir_archive::~dir_archive(result);
    JUMPOUT(0x22A614FA0);
  }
  return result;
}

void turi::dir_archive::set_metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v7 = *(std::string *)a2;
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    turi::dir_archive::set_metadata(v4, &v7, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::size_type v8 = (long long *)a2;
    uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)a2, (uint64_t)&std::piecewise_construct, &v8);
    std::string::operator=((std::string *)(v5 + 7), (const std::string *)a3);
  }
}

void sub_22406CDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::dir_archive::get_metadata(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v4 = *(void *)(a1 + 112);
  if (v4)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint64_t metadata = turi::dir_archive::get_metadata(v4, &__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v6 = std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::find<std::string>(a1 + 32, (const void **)a2);
    if (a1 + 40 == v6)
    {
      return 0;
    }
    else
    {
      std::string::operator=(a3, (const std::string *)(v6 + 56));
      return 1;
    }
  }
  return metadata;
}

void sub_22406CEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void turi::ini::write_dictionary_section<std::string>(uint64_t a1, const void **a2, void *a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  std::string v7 = &v23;
  std::string::basic_string[abi:ne180100]((uint64_t)&v23, v6 + 1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string v7 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v8 = a2;
    }
    else {
      std::string::size_type v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 46;
  int v11 = (void *)*a3;
  uint64_t v9 = a3 + 1;
  int v10 = v11;
  if (v11 != v9)
  {
    do
    {
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v22, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
      }
      else {
        std::string v22 = v23;
      }
      int v12 = *((char *)v10 + 55);
      if (v12 >= 0) {
        BOOL v13 = (const std::string::value_type *)(v10 + 4);
      }
      else {
        BOOL v13 = (const std::string::value_type *)v10[4];
      }
      if (v12 >= 0) {
        std::string::size_type v14 = *((unsigned __int8 *)v10 + 55);
      }
      else {
        std::string::size_type v14 = v10[5];
      }
      std::string::append(&v22, v13, v14);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v22;
      }
      char v20 = 46;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v21 = p_p;
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>(a1, (uint64_t)&__p, (uint64_t)(v10 + 7));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      long long v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          long long v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          int v10 = v17;
        }
        while (!v18);
      }
      int v10 = v17;
    }
    while (v17 != v9);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_22406D090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::ini::write_sequence_section<std::string>(uint64_t result, const void **a2, void *a3)
{
  uint64_t v24 = result;
  if (a3[1] != *a3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v22 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v23 = *MEMORY[0x263F8C2B8];
    uint64_t v21 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    do
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
      uint64_t v7 = v32[0];
      std::string::size_type v8 = (char *)v32 + *(void *)(v32[0] - 24);
      if (*((_DWORD *)v8 + 36) == -1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(v32[0] - 24)));
        uint64_t v9 = std::locale::use_facet((const std::locale *)&v29, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 32);
        std::locale::~locale((std::locale *)&v29);
        uint64_t v7 = v32[0];
      }
      *((_DWORD *)v8 + 36) = 48;
      *(void *)((char *)v33 + *(void *)(v7 - 24)) = 4;
      std::ostream::operator<<();
      if (*((char *)a2 + 23) >= 0) {
        size_t v10 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v10 = (size_t)a2[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v27, v10 + 1);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = &v27;
      }
      else {
        int v11 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      if (v10)
      {
        if (*((char *)a2 + 23) >= 0) {
          int v12 = a2;
        }
        else {
          int v12 = *a2;
        }
        memmove(v11, v12, v10);
      }
      *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 46;
      std::stringbuf::str();
      if ((v26 & 0x80u) == 0) {
        BOOL v13 = __p;
      }
      else {
        BOOL v13 = (void **)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v14 = v26;
      }
      else {
        std::string::size_type v14 = (std::string::size_type)__p[1];
      }
      char v15 = std::string::append(&v27, (const std::string::value_type *)v13, v14);
      uint64_t v17 = (std::string::value_type *)v15->__r_.__value_.__r.__words[0];
      std::string::size_type size = v15->__r_.__value_.__l.__size_;
      v28[0] = v15->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v15->__r_.__value_.__r.__words[2] + 3);
      int v18 = SHIBYTE(v15->__r_.__value_.__r.__words[2]);
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (v18 < 0)
      {
        std::string::__init_copy_ctor_external(&v29, v17, size);
        char v20 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
        std::string::size_type v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      else
      {
        v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        v29.__r_.__value_.__l.__size_ = size;
        LODWORD(v29.__r_.__value_.__r.__words[2]) = v28[0];
        *(_DWORD *)((char *)&v29.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v28 + 3);
        *((unsigned char *)&v29.__r_.__value_.__s + 23) = v18;
        std::string::size_type v19 = (std::string *)v17;
        char v20 = v18;
      }
      char v30 = 46;
      if (v20 >= 0) {
        std::string::size_type v19 = &v29;
      }
      long long v31 = v19;
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>(v24, (uint64_t)&v29, *a3 + v5);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v29.__r_.__value_.__l.__data_);
        if (v18 < 0) {
LABEL_38:
        }
          operator delete(v17);
      }
      else if (v18 < 0)
      {
        goto LABEL_38;
      }
      if ((char)v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      v32[0] = v23;
      *(void *)((char *)v32 + *(void *)(v23 - 24)) = v22;
      v32[2] = v21;
      v33[0] = MEMORY[0x263F8C318] + 16;
      if (v34 < 0) {
        operator delete((void *)v33[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      uint64_t result = MEMORY[0x22A614E30](&v35);
      ++v6;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3));
  }
  return result;
}

void sub_22406D4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,std::locale a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  operator delete(v36);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void boost::property_tree::ini_parser::write_ini<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "ptree has data on root");
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)v7, (uint64_t)v6, &v5, 0);
    v7[0] = &unk_26D76AB48;
    boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)v7, (uint64_t)"void boost::property_tree::ini_parser::write_ini(std::basic_ostream<typename Ptree::key_type::value_type> &, const Ptree &, int) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 279);
  }
  boost::property_tree::ini_parser::detail::check_dupes<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a2);
  boost::property_tree::ini_parser::detail::write_keys<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2, 0);
  boost::property_tree::ini_parser::detail::write_sections<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2);
}

void sub_22406D624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>(uint64_t a1, uint64_t a2, uint64_t a3, const std::locale *a4)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(a1, a2, (uint64_t *)&v12);
  unint64_t v6 = v12;
  if (!v12)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    operator new();
  }
  std::locale::locale(&v11, a4);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>(v6, a3, &v11);
  std::locale::~locale(&v11);
  return (uint64_t)v12;
}

void sub_22406D778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    BOOL v6 = *(char *)(a2 + 23) < 0;
  }
  else
  {
    BOOL v6 = 0;
    std::string __p = *(std::string *)a2;
  }
  char v10 = *(unsigned char *)(a2 + 24);
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v6) {
    uint64_t v8 = *(const std::string::value_type **)a2;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)a2;
  }
  std::locale v11 = (char *)p_p + *(void *)(a2 + 32) - (void)v8;
  *a3 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_22406D894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<unsigned long,boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>>(std::string *a1, uint64_t a2, const std::locale *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>::put_value(a3, (uint64_t)v14);
  if (!v14[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "conversion of type \"");
    uint64_t v4 = std::string::append(&v10, (const std::string::value_type *)(*(void *)(MEMORY[0x263F8C270] + 8) & 0x7FFFFFFFFFFFFFFFLL));
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    BOOL v6 = std::string::append(&v11, "\" to data failed");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = 0;
    uint64_t v8 = boost::property_tree::ptree_bad_data::ptree_bad_data<boost::any>(&v13, &v12, &v9);
    boost::exception_detail::throw_exception_<boost::property_tree::ptree_bad_data>(v8, (uint64_t)"void boost::property_tree::basic_ptree<std::string, std::string>::put_value(const Type &, Translator) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>, Type = unsigned long, Translator = boost::property_tree::stream_translator<char, std::char_traits<char>, std::allocator<char>, unsigned long>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/detail/ptree_implementation.hpp", 828);
  }
  std::string::operator=(a1, &v15);
  if (v14[0])
  {
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_22406D9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  boost::property_tree::ptree_bad_data::~ptree_bad_data((std::runtime_error *)(v28 - 80));
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(unsigned char *)(v28 - 56))
  {
    if (*(char *)(v28 - 25) < 0) {
      operator delete(*(void **)(v28 - 48));
    }
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_child(uint64_t a1, uint64_t *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)*a2, a2[1]);
    BOOL v6 = *((char *)a2 + 23) < 0;
  }
  else
  {
    BOOL v6 = 0;
    std::string v13 = *(std::string *)a2;
  }
  char v14 = *((unsigned char *)a2 + 24);
  long long v7 = &v13;
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if (v6) {
    uint64_t v8 = (uint64_t *)*a2;
  }
  else {
    uint64_t v8 = a2;
  }
  std::string v15 = (char *)v7 + a2[4] - (void)v8;
  uint64_t v9 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(a1, (uint64_t)&v13);
  boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)&v13, &v12);
  std::string v10 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(void *)(v9 + 24) + 16, (const void **)&v12.__r_.__value_.__l.__data_);
  if (*(const void ***)(*(void *)(v9 + 24) + 8) != v10) {
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::operator=((uint64_t)(v10 + 3), (uint64_t)a3);
  }
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&__p, (long long *)&v12, a3);
}

void sub_22406DBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(void *)a2;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (*(void *)(a2 + 32) != v4 + v3)
  {
    boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)a2, &__p);
    BOOL v6 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(void *)(a1 + 24) + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if (*(const void ***)(*(void *)(a1 + 24) + 8) == v6) {
      a1 = 0;
    }
    else {
      a1 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(v6 + 3, a2);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_22406DCE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)a1[4];
  if (*((char *)a1 + 23) < 0)
  {
    BOOL v6 = (uint64_t *)*a1;
    uint64_t v5 = a1[1];
  }
  else
  {
    uint64_t v5 = *((unsigned __int8 *)a1 + 23);
    BOOL v6 = a1;
  }
  long long v7 = (char *)v6 + v5;
  uint64_t v8 = (char *)memchr((void *)a1[4], *((char *)a1 + 24), (char *)v6 + v5 - v4);
  if (v8) {
    long long v7 = v8;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v11, v4, v7, v7 - v4);
  a1[4] = (uint64_t)v7;
  if (*((char *)a1 + 23) < 0)
  {
    std::string v10 = (uint64_t *)*a1;
    uint64_t v9 = a1[1];
  }
  else
  {
    uint64_t v9 = *((unsigned __int8 *)a1 + 23);
    std::string v10 = a1;
  }
  if (v7 != (char *)v10 + v9) {
    a1[4] = (uint64_t)(v7 + 1);
  }
  char v12 = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v11;
  }
  char v12 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = __p;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_22406DE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 && a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void boost::exception_detail::throw_exception_<boost::property_tree::ptree_bad_path>(const std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::error_info_injector((uint64_t)v7, a1);
  v7[5] = a2;
  void v7[6] = a3;
  int v8 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>((uint64_t)v7);
}

void sub_22406DEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(std::runtime_error *a1, const void **a2, uint64_t a3)
{
  boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(a2, a3, &v4);
  std::runtime_error::runtime_error(a1, &v4);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26D76A788;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26D76A760;
  boost::any::any<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>();
}

void sub_22406DFA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::runtime_error::~runtime_error(v15);
  _Unwind_Resume(a1);
}

void boost::property_tree::ptree_bad_path::~ptree_bad_path(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26D76A760;
  uint64_t v2 = this[1].__vftable;
  if (v2) {
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  }
  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26D76A760;
  uint64_t v2 = this[1].__vftable;
  if (v2) {
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  }
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x22A614FA0);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  std::runtime_error::runtime_error(&v5, (const std::runtime_error *)a1);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_26D76A760;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v6 = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  long long v7 = &unk_26D754388;
  uint64_t v8 = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v9 = *(_OWORD *)(a1 + 40);
  int v10 = *(_DWORD *)(a1 + 56);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_26D76A718;
  long long v7 = &unk_26D76A740;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone_impl((uint64_t)exception, (uint64_t)&v5);
}

void sub_22406E1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  std::runtime_error::~runtime_error(&a9);
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = &unk_26D7542E8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_26D76A760;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = &unk_26D754388;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)a1 = &unk_26D76A678;
  *(void *)(a1 + 24) = &unk_26D76A6B0;
  *(void *)(a1 + 64) = &unk_26D76A6E8;
  uint64_t v12 = 0;
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 40))(&v11);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v12, v11);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
    uint64_t v9 = v12;
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 32), v9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v12);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  long long v6;

  *(void *)(a1 + 64) = &unk_26D7542E8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_26D76A760;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_26D754388;
  *(void *)(a1 + 32) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  uint64_t v6 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)a1 = &unk_26D76A678;
  *(void *)(a1 + 24) = &unk_26D76A6B0;
  *(void *)(a1 + 64) = &unk_26D76A6E8;
  return a1;
}

void sub_22406E3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  *(void *)a1 = &unk_26D76A760;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone()
{
}

void sub_22406E584(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C4095DD773DLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone_impl((uint64_t)exception, a1);
}

void sub_22406E5F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::~clone_impl(uint64_t a1)
{
}

{
  uint64_t vars8;

  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1 - 24);
  JUMPOUT(0x22A614FA0);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>>::~clone_impl(void *a1)
{
}

{
  uint64_t vars8;

  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector((uint64_t)a1 + *(void *)(*a1 - 40));
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector(a1 - 24);
  JUMPOUT(0x22A614FA0);
}

void sub_22406E940(_Unwind_Exception *a1)
{
  boost::property_tree::ptree_bad_path::~ptree_bad_path(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::error_info_injector(uint64_t a1, const std::runtime_error *a2)
{
  std::runtime_error::runtime_error((std::runtime_error *)a1, a2)->__vftable = (std::runtime_error_vtbl *)&unk_26D76A760;
  uint64_t v4 = (uint64_t)a2[1].__vftable;
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_26D76A718;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = &unk_26D76A740;
  return a1;
}

void sub_22406EA24(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  long long v7 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v6 + 2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = *a1;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, " (");
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v11 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string v13 = std::string::append(&v16, ")");
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_22406EB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::any::any<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>()
{
}

void sub_22406EC40(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::holder(uint64_t a1, long long *a2)
{
  *(void *)a1 = &unk_26D76A7B0;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *uint64_t v4 = v5;
  }
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 24);
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v4 = *(_OWORD **)v4;
  }
  *(void *)(a1 + 40) = v4;
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = (const std::string::value_type *)a2;
  }
  else {
    size_t v6 = *(const std::string::value_type **)a2;
  }
  *(void *)(a1 + 40) = (char *)v4 + *((void *)a2 + 4) - (void)v6;
  return a1;
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::~holder(uint64_t a1)
{
  *(void *)a1 = &unk_26D76A7B0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::~holder(uint64_t a1)
{
  *(void *)a1 = &unk_26D76A7B0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  JUMPOUT(0x22A614FA0);
}

void *boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::type()
{
}

void boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::clone()
{
}

void sub_22406EE28(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

const void **boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 - 8);
  unint64_t v3 = *(void *)(v2 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v3)
  {
    uint64_t v5 = a1 + 1;
    size_t v6 = *(const void ***)(a1 - 8);
    do
    {
      while (1)
      {
        long long v7 = (const void **)(v3 - 56);
        if (std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 - 56), a2)) {
          break;
        }
        unint64_t v3 = *(void *)(v3 + 8);
        size_t v6 = v7;
        if (!v3) {
          goto LABEL_7;
        }
      }
      unint64_t v3 = *(void *)(v3 + 16);
    }
    while (v3);
    long long v7 = v6;
LABEL_7:
    if (v7 != (const void **)v2 && !std::less<std::string>::operator()[abi:ne180100](v5, a2, v7)) {
      return v7;
    }
  }
  return (const void **)v2;
}

uint64_t boost::property_tree::stream_translator<char,std::char_traits<char>,std::allocator<char>,unsigned long>::put_value@<X0>(const std::locale *a1@<X0>, uint64_t a2@<X8>)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  uint64_t v4 = (std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24));
  std::ios_base::getloc(v4);
  std::ios_base::imbue(v4, a1);
  std::locale::~locale((std::locale *)&v8);
  rdbuf = (std::locale *)v4->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, a1);
    size_t v6 = rdbuf + 1;
    std::locale::locale(&v14, v6);
    std::locale::operator=(v6, a1);
    std::locale::~locale(&v14);
  }
  std::locale::~locale(&v10);
  std::ostream::operator<<();
  if ((*((unsigned char *)&v11[4] + *(void *)(v11[0] - 24)) & 5) != 0)
  {
    *(unsigned char *)a2 = 0;
  }
  else
  {
    std::stringbuf::str();
    *(_OWORD *)(a2 + 8) = v8;
    *(void *)(a2 + 24) = v9;
    *(unsigned char *)a2 = 1;
  }
  v11[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v11[1] = MEMORY[0x263F8C318] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x22A614E30](&v13);
}

void sub_22406F11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, char a13)
{
}

void boost::exception_detail::throw_exception_<boost::property_tree::ptree_bad_data>(const std::runtime_error *a1, uint64_t a2, uint64_t a3, int a4)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::error_info_injector((uint64_t)v7, a1);
  v7[5] = a2;
  void v7[6] = a3;
  int v8 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>((uint64_t)v7);
}

void sub_22406F188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::runtime_error *boost::property_tree::ptree_bad_data::ptree_bad_data<boost::any>(std::runtime_error *a1, const std::string *a2, uint64_t *a3)
{
  std::runtime_error::runtime_error(a1, a2)->__vftable = (std::runtime_error_vtbl *)&unk_26D76A990;
  uint64_t v5 = *a3;
  if (*a3) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  a1[1].__vftable = (std::runtime_error_vtbl *)v5;
  return a1;
}

void sub_22406F214(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::ptree_bad_data::~ptree_bad_data(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26D76A990;
  uint64_t v2 = this[1].__vftable;
  if (v2) {
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  }
  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26D76A990;
  uint64_t v2 = this[1].__vftable;
  if (v2) {
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  }
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x22A614FA0);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  std::runtime_error::runtime_error(&v5, (const std::runtime_error *)a1);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_26D76A990;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v6 = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  long long v7 = &unk_26D754388;
  uint64_t v8 = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v9 = *(_OWORD *)(a1 + 40);
  int v10 = *(_DWORD *)(a1 + 56);
  v5.__vftable = (std::runtime_error_vtbl *)&unk_26D76A948;
  long long v7 = &unk_26D76A970;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone_impl((uint64_t)exception, (uint64_t)&v5);
}

void sub_22406F3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  std::runtime_error::~runtime_error(&a9);
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = &unk_26D7542E8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_26D76A990;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = &unk_26D754388;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(void *)a1 = &unk_26D76A8A8;
  *(void *)(a1 + 24) = &unk_26D76A8E0;
  *(void *)(a1 + 64) = &unk_26D76A918;
  uint64_t v12 = 0;
  uint64_t v8 = *(void *)(a2 + 32);
  if (v8)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 40))(&v11);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v12, v11);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
    uint64_t v9 = v12;
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 32), v9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v12);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  long long v6;

  *(void *)(a1 + 64) = &unk_26D7542E8;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2)->__vftable = (std::runtime_error_vtbl *)&unk_26D76A990;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_26D754388;
  *(void *)(a1 + 32) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  uint64_t v6 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(void *)a1 = &unk_26D76A8A8;
  *(void *)(a1 + 24) = &unk_26D76A8E0;
  *(void *)(a1 + 64) = &unk_26D76A918;
  return a1;
}

void sub_22406F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  *(void *)a1 = &unk_26D76A990;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1);
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone()
{
}

void sub_22406F7D8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F1C4095DD773DLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x48uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone_impl((uint64_t)exception, a1);
}

void sub_22406F844(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::~clone_impl(uint64_t a1)
{
}

{
  uint64_t vars8;

  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1 - 24);
  JUMPOUT(0x22A614FA0);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>>::~clone_impl(void *a1)
{
}

{
  uint64_t vars8;

  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector((uint64_t)a1 + *(void *)(*a1 - 40));
  JUMPOUT(0x22A614FA0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector(a1 - 24);
  JUMPOUT(0x22A614FA0);
}

void sub_22406FB94(_Unwind_Exception *a1)
{
  boost::property_tree::ptree_bad_data::~ptree_bad_data(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::error_info_injector(uint64_t a1, const std::runtime_error *a2)
{
  std::runtime_error::runtime_error((std::runtime_error *)a1, a2)->__vftable = (std::runtime_error_vtbl *)&unk_26D76A990;
  uint64_t v4 = (uint64_t)a2[1].__vftable;
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_26D76A948;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = &unk_26D76A970;
  return a1;
}

void sub_22406FC78(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned char **)(a2 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v8 = *(void *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = (unsigned char *)(*(void *)a2 + v5);
    size_t v7 = v6 - v4;
  }
  else
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v6 = (unsigned char *)(a2 + v5);
    size_t v7 = a2 + v5 - (void)v4;
    uint64_t v8 = a2;
  }
  uint64_t v9 = memchr(v4, *(char *)(a2 + 24), v7);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10 != (void *)(v8 + v5))
  {
    boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)a2, &v13);
    uint64_t v11 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(void *)(a1 + 24) + 16, (const void **)&v13.__r_.__value_.__l.__data_);
    if (*(const void ***)(*(void *)(a1 + 24) + 8) == v11) {
      operator new();
    }
    a1 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(v11 + 3, a2);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_22406FE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a13);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a9);
  if (*(char *)(v13 - 49) < 0) {
    operator delete(*(void **)(v13 - 72));
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::operator=(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v2, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v2 = *(std::string *)a2;
  }
  operator new();
}

void sub_22406FF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x22A614FA0](v14, 0x1020C402FC1992ELL);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  operator new();
}

void sub_224070040(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x60uLL);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = 0;
  unint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 8);
  v11[1] = v5;
  void v11[3] = v5;
  if (v5)
  {
    if (v5 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v7 = operator new(16 * v5);
  }
  else
  {
    size_t v7 = 0;
  }
  v11[4] = v7;
  v11[5] = 0;
  v11[6] = v6;
  v11[7] = v4;
  char v12 = 0;
  uint64_t v8 = *(void *)(v6 + 88);
  if (v8) {
    uint64_t v9 = (long long *)(v8 - 80);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 != (long long *)v6) {
    boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::clone((uint64_t)v11, v9);
  }
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::copy_(a1 + 16, a2 + 16, v11);
  char v12 = 1;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map((uint64_t)v11);
  return a1;
}

void sub_224070174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map((uint64_t)va);
  operator delete(*(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

void boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::clone(uint64_t a1, long long *a2)
{
  uint64_t v3 = (long long **)(*(void *)(a1 + 32) + 16 * *(void *)(a1 + 40));
  void *v3 = a2;
  uint64_t v4 = (std::string *)operator new(0x60uLL);
  v3[1] = (long long *)v4;
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](v4, a2);
}

void sub_224070230(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(*(void **)(*(void *)(v1 + 32) + 16 * *(void *)(v1 + 40) + 8));
  __cxa_rethrow();
}

void sub_22407024C(_Unwind_Exception *a1)
{
}

unint64_t boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::copy_(unint64_t result, uint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = *(void *)(result - 8);
  unint64_t v5 = a3[5];
  do
  {
    uint64_t v6 = *(void *)(v3 + 88);
    if (v6) {
      unint64_t v3 = v6 - 80;
    }
    else {
      unint64_t v3 = 0;
    }
    size_t v7 = a3 + 7;
    if (a3[6] != v3)
    {
      uint64_t v8 = (void *)a3[4];
      if (v5)
      {
        unint64_t v9 = v5;
        do
        {
          unint64_t v10 = v9 >> 1;
          uint64_t v11 = &v8[2 * (v9 >> 1)];
          unint64_t v13 = *v11;
          char v12 = v11 + 2;
          v9 += ~(v9 >> 1);
          if (v13 < v3) {
            uint64_t v8 = v12;
          }
          else {
            unint64_t v9 = v10;
          }
        }
        while (v9);
      }
      size_t v7 = v8 + 1;
    }
    uint64_t v14 = *v7;
    *(void *)(v4 + 88) = v14 + 80;
    *(void *)(v14 + 80) = v4 + 80;
    uint64_t v4 = v14;
  }
  while (v3 != *(void *)(a2 - 8));
  return boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(result, a2, a3);
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  operator new();
}

void sub_2240703A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = 0;
      long long v4 = result;
      do
      {
        char v5 = v2;
        unint64_t v6 = v4[2];
        if (v6 < *v4)
        {
          unint64_t v7 = v4[3];
          uint64_t v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8) {
              break;
            }
            unint64_t v9 = *(unint64_t *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 >= v9)
            {
              unint64_t v10 = (unint64_t *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          unint64_t v10 = result;
LABEL_10:
          unint64_t *v10 = v6;
          v10[1] = v7;
        }
        uint64_t v2 = v5 + 2;
        v3 += 16;
        long long v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(long long *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 < *(void *)a1)
  {
    if (v4 < v3)
    {
      long long v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    long long v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2) {
      return 1;
    }
    long long v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(void *)a1) {
      return 1;
    }
    long long v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  long long v2 = *(_OWORD *)a1;
  unint64_t v3 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    long long v6 = a1 + 2;
    do
    {
      unint64_t v4 = v6;
      if (v6 >= a2) {
        break;
      }
      v6 += 2;
    }
    while (v3 >= *v4);
  }
  else
  {
    unint64_t v4 = a1;
    do
    {
      unint64_t v5 = v4[2];
      v4 += 2;
    }
    while (v3 >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      unint64_t v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v7);
  }
  while (v4 < a2)
  {
    long long v11 = *(_OWORD *)v4;
    *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      unint64_t v8 = v4[2];
      v4 += 2;
    }
    while (v3 >= v8);
    do
    {
      unint64_t v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v9);
  }
  if (v4 - 2 != a1) {
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  }
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

long long *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(long long *a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a1;
  unint64_t v4 = *(void *)a1;
  do
    unint64_t v5 = *(void *)&a1[++v2];
  while (v5 < v4);
  long long v6 = &a1[v2];
  unint64_t v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      unint64_t v9 = *((void *)a2-- - 2);
    }
    while (v9 >= v4);
  }
  else
  {
    do
      unint64_t v8 = *((void *)a2-- - 2);
    while (v8 >= v4);
  }
  if (v6 < a2)
  {
    unint64_t v10 = &a1[v2];
    long long v11 = a2;
    do
    {
      long long v12 = *v10;
      long long *v10 = *v11;
      *long long v11 = v12;
      do
        unint64_t v13 = *((void *)v10++ + 2);
      while (v13 < v4);
      do
        unint64_t v14 = *((void *)v11-- - 2);
      while (v14 >= v4);
    }
    while (v10 < v11);
    unint64_t v7 = v10 - 1;
  }
  if (v7 != a1) {
    *a1 = *v7;
  }
  long long *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *long long v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          unint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(long long *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(long long *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(void *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    long long v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          long long v15 = *(_OWORD *)v14;
          *(_OWORD *)uint64_t v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v16 = (unint64_t)v8 >> 4;
      do
      {
        uint64_t v17 = 0;
        long long v30 = *(_OWORD *)a1;
        int v18 = a1;
        do
        {
          char v19 = &v18[2 * v17 + 2];
          uint64_t v20 = (2 * v17) | 1;
          uint64_t v21 = 2 * v17 + 2;
          if (v21 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            uint64_t v20 = v21;
          }
          *(_OWORD *)int v18 = *(_OWORD *)v19;
          int v18 = v19;
          uint64_t v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)char v19 = v30;
        }
        else
        {
          *(_OWORD *)char v19 = *(_OWORD *)v6;
          *(_OWORD *)long long v6 = v30;
          uint64_t v22 = (char *)v19 - (char *)a1 + 16;
          if (v22 >= 17)
          {
            unint64_t v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            uint64_t v24 = &a1[2 * v23];
            unint64_t v25 = *v19;
            if (*v24 < *v19)
            {
              unint64_t v26 = v19[1];
              do
              {
                std::string v27 = v19;
                char v19 = v24;
                *(_OWORD *)std::string v27 = *(_OWORD *)v24;
                if (!v23) {
                  break;
                }
                unint64_t v23 = (v23 - 1) >> 1;
                uint64_t v24 = &a1[2 * v23];
              }
              while (*v24 < v25);
              unint64_t *v19 = v25;
              v19[1] = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 >= a3)
      {
        unint64_t v10 = *v8;
      }
      else
      {
        unint64_t v10 = *v8;
        if (*v8 < v8[2])
        {
          unint64_t v10 = v8[2];
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *a4;
      if (v10 >= *a4)
      {
        unint64_t v12 = a4[1];
        do
        {
          unint64_t v13 = a4;
          a4 = v8;
          *(_OWORD *)unint64_t v13 = *(_OWORD *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (unint64_t *)(result + 16 * v14);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            unint64_t v15 = *v8;
            uint64_t v7 = v14;
          }
          else
          {
            unint64_t v15 = *v8;
            if (*v8 >= v8[2])
            {
              uint64_t v7 = v14;
            }
            else
            {
              unint64_t v15 = v8[2];
              v8 += 2;
            }
          }
        }
        while (v15 >= v11);
        *a4 = v11;
        a4[1] = v12;
      }
    }
  }
  return result;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(unint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a2 - 8);
  unint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(result - 8);
  uint64_t v6 = (unint64_t *)(v5 + 56);
  if (v4 > 1)
  {
    *uint64_t v6 = *v6 & 0xFFFFFFFFFFFFFFFELL | *(void *)(v3 + 56) & 1;
    uint64_t v7 = *(void *)(v3 + 56);
    unint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v9 = (v7 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v10 = v4 & 1;
    if (v9) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = v8;
    }
    uint64_t v12 = a3[6];
    if (v12 == v11)
    {
      char v19 = a3 + 7;
    }
    else
    {
      unint64_t v13 = (void *)a3[4];
      unint64_t v14 = a3[5];
      while (v14)
      {
        unint64_t v15 = v14 >> 1;
        uint64_t v16 = &v13[2 * (v14 >> 1)];
        unint64_t v18 = *v16;
        uint64_t v17 = v16 + 2;
        v14 += ~(v14 >> 1);
        if (v18 < v11) {
          unint64_t v13 = v17;
        }
        else {
          unint64_t v14 = v15;
        }
      }
      char v19 = v13 + 1;
    }
    *uint64_t v6 = v10 | (*v19 + 56);
    uint64_t v20 = *(void *)(v3 + 64);
    unint64_t v21 = v20 - 56;
    if (!v20) {
      unint64_t v21 = 0;
    }
    if (v12 == v21)
    {
      unint64_t v28 = a3 + 7;
    }
    else
    {
      uint64_t v22 = (void *)a3[4];
      unint64_t v23 = a3[5];
      while (v23)
      {
        unint64_t v24 = v23 >> 1;
        unint64_t v25 = &v22[2 * (v23 >> 1)];
        unint64_t v27 = *v25;
        unint64_t v26 = v25 + 2;
        v23 += ~(v23 >> 1);
        if (v27 < v21) {
          uint64_t v22 = v26;
        }
        else {
          unint64_t v23 = v24;
        }
      }
      unint64_t v28 = v22 + 1;
    }
    *(void *)(v5 + 64) = *v28 + 56;
    uint64_t v29 = *(void *)(*(void *)(a2 - 8) + 72);
    if (v29) {
      unint64_t v30 = v29 - 56;
    }
    else {
      unint64_t v30 = 0;
    }
    if (a3[6] == v30)
    {
      uint64_t v38 = a3 + 7;
      uint64_t v32 = a3[5];
    }
    else
    {
      long long v31 = (void *)a3[4];
      uint64_t v32 = a3[5];
      if (v32)
      {
        unint64_t v33 = a3[5];
        do
        {
          unint64_t v34 = v33 >> 1;
          uint64_t v35 = &v31[2 * (v33 >> 1)];
          unint64_t v37 = *v35;
          uint64_t v36 = v35 + 2;
          v33 += ~(v33 >> 1);
          if (v37 < v30) {
            long long v31 = v36;
          }
          else {
            unint64_t v33 = v34;
          }
        }
        while (v33);
      }
      uint64_t v38 = v31 + 1;
    }
    *(void *)(*(void *)(result - 8) + 72) = *v38 + 56;
    if (v32)
    {
      long long v39 = (void *)a3[4];
      unint64_t v40 = &v39[2 * v32];
      do
      {
        uint64_t v42 = *v39;
        long long v41 = (void *)v39[1];
        uint64_t v43 = (void *)(*v39 + 56);
        uint64_t v44 = v41 + 7;
        uint64_t v45 = *v43 & 1;
        __n128 result = v41[7] & 0xFFFFFFFFFFFFFFFELL | v45;
        v41[7] = result;
        unint64_t v46 = *v43 & 0xFFFFFFFFFFFFFFFELL;
        if (v46)
        {
          long long v47 = a3 + 7;
          if (a3[6] != v46 - 56)
          {
            long long v48 = (void *)a3[4];
            unint64_t v49 = a3[5];
            while (v49)
            {
              unint64_t v50 = v49 >> 1;
              int v51 = &v48[2 * (v49 >> 1)];
              unint64_t v53 = *v51;
              uint64_t v52 = v51 + 2;
              v49 += ~(v49 >> 1);
              if (v53 < v46 - 56) {
                long long v48 = v52;
              }
              else {
                unint64_t v49 = v50;
              }
            }
            long long v47 = v48 + 1;
          }
          __n128 result = *v47;
          void *v44 = v45 | (result + 56);
          if (*(void **)(v46 + 8) == v43)
          {
            *(void *)(result + 64) = v44;
          }
          else if (*(void **)(v46 + 16) == v43)
          {
            *(void *)(result + 72) = v44;
          }
        }
        else
        {
          void *v44 = v45;
        }
        if (!*(void *)(v42 + 64)) {
          v41[8] = 0;
        }
        if (!*(void *)(v42 + 72)) {
          v41[9] = 0;
        }
        v39 += 2;
      }
      while (v39 != v40);
    }
  }
  else
  {
    *(void *)(v5 + 56) = 0;
    *(void *)(v5 + 64) = v6;
    *(void *)(*(void *)(result - 8) + 72) = *(void *)(result - 8) + 56;
  }
  return result;
}

uint64_t boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64) && *(void *)(a1 + 40))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    do
    {
      boost::detail::allocator::destroy<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(*(void *)(*(void *)(a1 + 32) + v3));
      operator delete(*(void **)(*(void *)(a1 + 32) + v3));
      ++v2;
      v3 += 16;
    }
    while (v2 < *(void *)(a1 + 40));
  }
  if (*(void *)(a1 + 24)) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void boost::detail::allocator::destroy<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(uint64_t a1)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

std::string *boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(uint64_t a1, uint64_t a2, long long *a3)
{
  __n128 result = boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_<boost::multi_index::detail::lvalue_tag>(a1 - 16, a3);
  if (v6)
  {
    if (*(void *)(a1 - 8) != a2)
    {
      *(void *)(result[3].__r_.__value_.__l.__size_ + 8) = *((void *)&result[3].__r_.__value_.__l + 2);
      *(void *)result[3].__r_.__value_.__r.__words[2] = result[3].__r_.__value_.__l.__size_;
      std::string::size_type v8 = *(void *)(a2 + 80);
      uint64_t v7 = (void *)(a2 + 80);
      result[3].__r_.__value_.__l.__size_ = v8;
      result[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
      void *v7 = (char *)result + 80;
      *(void *)(result[3].__r_.__value_.__l.__size_ + 8) = (char *)result + 80;
    }
  }
  return result;
}

std::string *boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, long long *a2)
{
  unint64_t v4 = 0;
  __n128 result = (std::string *)boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert_<boost::multi_index::detail::lvalue_tag>(a1 + 16, a2, &v4);
  if (result == v4) {
    ++*(void *)(a1 + 24);
  }
  return result;
}

uint64_t boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, long long *a2, std::string **a3)
{
  uint64_t result = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(a1, a2, a3);
  if ((std::string *)result == *a3)
  {
    char v6 = *(void **)(a1 - 8);
    uint64_t v7 = v6[10];
    v6 += 10;
    *(void *)(result + 80) = v7;
    *(void *)(result + 88) = v6;
    *char v6 = result + 80;
    *(void *)(*(void *)(result + 80) + 8) = result + 80;
  }
  return result;
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, long long *a2, std::string **a3)
{
  int v8 = 0;
  if (boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(a1, (const void **)a2, (uint64_t)&v8))boost::multi_index::detail::index_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_(a1, a2, a3); {
  if (v9)
  }
    return v9 - 56;
  else {
    return 0;
  }
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(a1 - 8);
  unint64_t v5 = *(void *)(v4 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v5)
  {
    uint64_t v7 = a1 + 1;
    do
    {
      unint64_t v4 = v5 - 56;
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v5 - 56));
      if (v8) {
        uint64_t v9 = 64;
      }
      else {
        uint64_t v9 = 72;
      }
      unint64_t v5 = *(void *)(v4 + v9);
    }
    while (v5);
    LODWORD(v5) = !v8;
  }
  *(_DWORD *)a3 = v5;
  *(void *)(a3 + 8) = v4 + 56;
  return 1;
}

void boost::multi_index::detail::index_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_(uint64_t a1, long long *a2, std::string **a3)
{
  unint64_t v5 = (std::string *)operator new(0x60uLL);
  *a3 = v5;
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](v5, a2);
}

void sub_224071670(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(*v1);
  __cxa_rethrow();
}

void sub_224071684(_Unwind_Exception *a1)
{
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(unint64_t a1, int a2, unint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    a3[2] = a1;
    unint64_t v4 = a4 + 2;
    unint64_t v5 = (unint64_t *)a4[2];
  }
  else
  {
    a3[1] = a1;
    if (a3 == a4)
    {
      *a3 = *a3 & 1 | a1;
      unint64_t v4 = a3 + 2;
LABEL_8:
      *unint64_t v4 = a1;
      goto LABEL_9;
    }
    unint64_t v4 = a4 + 1;
    unint64_t v5 = (unint64_t *)a4[1];
  }
  if (v5 == a3) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v6 = *(void *)a1 & 1 | (unint64_t)a3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v6;
  return boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance((unint64_t *)a1, a4);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = result;
  unint64_t v3 = *result & 0xFFFFFFFFFFFFFFFELL;
  *uint64_t result = v3;
  unint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((unint64_t *)v4 != result)
  {
    unint64_t v5 = (unint64_t *)(*result & 0xFFFFFFFFFFFFFFFELL);
    for (unint64_t i = *v5; (*v5 & 1) == 0; unint64_t i = *v5)
    {
      BOOL v8 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (v8 == v5)
      {
        BOOL v8 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 16);
        if (!v8 || (*(unsigned char *)v8 & 1) != 0)
        {
          if (v2 == (unint64_t *)v5[2])
          {
            boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v5, a2);
            unint64_t v10 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
            unint64_t v2 = v5;
          }
          else
          {
            unint64_t v10 = v5;
            unint64_t v5 = v2;
          }
          *v10 |= 1uLL;
          *(void *)(*(void *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
          uint64_t result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right((unint64_t *)(*(void *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL), a2);
          goto LABEL_17;
        }
      }
      else if (!v8 || (*(unsigned char *)v8 & 1) != 0)
      {
        if (v2 == (unint64_t *)v5[1])
        {
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v5, a2);
          uint64_t v9 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
          unint64_t v2 = v5;
        }
        else
        {
          uint64_t v9 = v5;
          unint64_t v5 = v2;
        }
        *v9 |= 1uLL;
        *(void *)(*(void *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        uint64_t result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left((unint64_t *)(*(void *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL), a2);
        goto LABEL_17;
      }
      unint64_t *v5 = i | 1;
      *v8 |= 1uLL;
      *(void *)(*(void *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      unint64_t v2 = (unint64_t *)(*(void *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
LABEL_17:
      unint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFFELL;
      if (v2 == (unint64_t *)v4) {
        goto LABEL_20;
      }
      unint64_t v5 = (unint64_t *)(*v2 & 0xFFFFFFFFFFFFFFFELL);
    }
    unint64_t v2 = (unint64_t *)v4;
LABEL_20:
    unint64_t v3 = *v2;
  }
  unint64_t *v2 = v3 | 1;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = result[2];
  result[2] = *(void *)(v2 + 8);
  unint64_t v3 = *(unint64_t **)(v2 + 8);
  if (v3) {
    unint64_t *v3 = *v3 & 1 | (unint64_t)result;
  }
  *(void *)unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(void *)v2 & 1;
  if ((unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    *a2 = *a2 & 1 | v2;
    uint64_t v4 = *result;
  }
  else
  {
    uint64_t v4 = *result;
    unint64_t v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 8) == result) {
      *(void *)(v5 + 8) = v2;
    }
    else {
      *(void *)(v5 + 16) = v2;
    }
  }
  *(void *)(v2 + 8) = result;
  *uint64_t result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = result[1];
  result[1] = *(void *)(v2 + 16);
  unint64_t v3 = *(unint64_t **)(v2 + 16);
  if (v3) {
    unint64_t *v3 = *v3 & 1 | (unint64_t)result;
  }
  *(void *)unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(void *)v2 & 1;
  if ((unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    *a2 = *a2 & 1 | v2;
    uint64_t v4 = *result;
  }
  else
  {
    uint64_t v4 = *result;
    unint64_t v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 16) == result) {
      *(void *)(v5 + 16) = v2;
    }
    else {
      *(void *)(v5 + 8) = v2;
    }
  }
  *(void *)(v2 + 16) = result;
  *uint64_t result = v4 & 1 | v2;
  return result;
}

std::string *boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(a1, a2, (uint64_t *)&v5);
  if (!v5) {
    operator new();
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(v5, a3);
  return v5;
}

void sub_224071AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(std::string *this, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  std::string::operator=(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_224071BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector((uint64_t)v7, a1);
  v7[11] = a2;
  v7[12] = a3;
  int v8 = a4;
  boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>((uint64_t)v7);
}

void sub_224071C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  a17 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v17 + 80));
  boost::property_tree::file_parser_error::~file_parser_error(&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::ini_parser::detail::check_dupes<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (*(void *)(v1 + 24) >= 2uLL)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = v3 ? (unsigned __int8 *)(v3 - 56) : 0;
    v14[0] = v4 + 56;
    uint64_t result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)v14);
    uint64_t v5 = v14[0] ? v14[0] - 56 : 0;
    if (v5 != v2)
    {
      do
      {
        uint64_t v6 = v4[23];
        if ((v6 & 0x80u) == 0) {
          uint64_t v7 = v4[23];
        }
        else {
          uint64_t v7 = *((void *)v4 + 1);
        }
        uint64_t v8 = *(unsigned __int8 *)(v5 + 23);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(v5 + 8);
        }
        if (v7 == v8)
        {
          if (v9 >= 0) {
            unint64_t v10 = (unsigned __int8 *)v5;
          }
          else {
            unint64_t v10 = *(unsigned __int8 **)v5;
          }
          if ((v6 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v4, v10, *((void *)v4 + 1)))
            {
LABEL_29:
              std::string::basic_string[abi:ne180100]<0>(v13, "duplicate key");
              std::string::basic_string[abi:ne180100]<0>(&v12, "");
              boost::property_tree::file_parser_error::file_parser_error((uint64_t)v14, (uint64_t)v13, &v12, 0);
              v14[0] = &unk_26D76AB48;
              boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)v14, (uint64_t)"void boost::property_tree::ini_parser::detail::check_dupes(const Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 191);
            }
          }
          else
          {
            if (!v4[23]) {
              goto LABEL_29;
            }
            while (*v4 == *v10)
            {
              ++v4;
              ++v10;
              if (!--v6) {
                goto LABEL_29;
              }
            }
          }
        }
        v14[0] = v5 + 56;
        uint64_t result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)v14);
        uint64_t v4 = (unsigned __int8 *)v5;
        if (v14[0]) {
          uint64_t v11 = v14[0] - 56;
        }
        else {
          uint64_t v11 = 0;
        }
        uint64_t v5 = v11;
      }
      while (v11 != v2);
    }
  }
  return result;
}

void sub_224071DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::ini_parser::detail::write_sections<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t v3 = *(void *)(v2 + 88);
  if (v3) {
    uint64_t v4 = v3 - 80;
  }
  else {
    uint64_t v4 = 0;
  }
  while (v4 != v2)
  {
    if (*(void *)(*(void *)(v4 + 48) + 24))
    {
      boost::property_tree::ini_parser::detail::check_dupes<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v4 + 24);
      if (*(char *)(v4 + 47) < 0)
      {
        if (*(void *)(v4 + 32))
        {
LABEL_22:
          std::string::basic_string[abi:ne180100]<0>(v14, "mixed data and children");
          std::string::basic_string[abi:ne180100]<0>(&v13, "");
          boost::property_tree::file_parser_error::file_parser_error((uint64_t)v15, (uint64_t)v14, &v13, 0);
          v15[0] = &unk_26D76AB48;
          boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)v15, (uint64_t)"void boost::property_tree::ini_parser::detail::write_sections(std::basic_ostream<typename Ptree::key_type::value_type> &, const Ptree &) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 244);
        }
      }
      else if (*(unsigned char *)(v4 + 47))
      {
        goto LABEL_22;
      }
      LOBYTE(v15[0]) = 91;
      uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v15, 1);
      int v7 = *(char *)(v4 + 23);
      if (v7 >= 0) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = *(void *)v4;
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v9 = *(void *)(v4 + 8);
      }
      unint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      LOBYTE(v15[0]) = 93;
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v15, 1);
      LOBYTE(v15[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v15, 1);
      boost::property_tree::ini_parser::detail::write_keys<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, v4 + 24, 1);
    }
    uint64_t v12 = *(void *)(v4 + 88);
    if (v12) {
      uint64_t v4 = v12 - 80;
    }
    else {
      uint64_t v4 = 0;
    }
  }
}

void sub_224071FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x78uLL);
  boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector((uint64_t)v3, a1);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl((uint64_t)exception, (uint64_t)v3);
}

void sub_224072078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  a17 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v19 + 80));
  boost::property_tree::file_parser_error::~file_parser_error(&a9);
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(a1);
}

void boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 72) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 72) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 112) = &unk_26D7542E8;
  uint64_t v4 = (void *)boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector(a1, a2);
  *uint64_t v4 = &unk_26D76AA60;
  v4[9] = &unk_26D76AA98;
  v4[14] = &unk_26D76AAD0;
  uint64_t v9 = 0;
  uint64_t v5 = *(void *)(a2 + 80);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 40))(&v8);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v9, v8);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v8);
    uint64_t v6 = v9;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 80), v6);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
  return a1;
}

void sub_22407224C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D76AB70;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    std::runtime_error v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  uint64_t v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)a1 = &unk_26D76AB48;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = &unk_26D754388;
  *(void *)(a1 + 80) = v8;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  long long v9 = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v9;
  *(void *)a1 = &unk_26D76AB00;
  *(void *)(a1 + 72) = &unk_26D76AB28;
  return a1;
}

{
  std::runtime_error *v4;
  std::runtime_error v5;
  std::string *v6;
  long long v7;
  uint64_t v8;

  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D76AB70;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    std::runtime_error v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  uint64_t v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(void *)a1 = &unk_26D76AB00;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = &unk_26D76AB28;
  return a1;
}

void sub_2240723E0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 72) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
  JUMPOUT(0x22A614FA0);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone()
{
}

void sub_2240724E8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x10F3C4066575A4CLL);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x78uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_224072554(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 9);
  *a1 = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error(v1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(uint64_t a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone()
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::rethrow(void *a1)
{
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 9) = &unk_26D754388;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 10);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::~clone_impl((uint64_t)a1 + *(void *)(*a1 - 40));
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::~error_info_injector(uint64_t a1)
{
}

void boost::property_tree::ini_parser::ini_parser_error::~ini_parser_error(std::runtime_error *this)
{
  boost::property_tree::file_parser_error::~file_parser_error(this);
  JUMPOUT(0x22A614FA0);
}

void boost::property_tree::file_parser_error::~file_parser_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26D76AB70;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0) {
    operator delete((void *)this[2].__imp_.__imp_);
  }
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::runtime_error::~runtime_error(this);
}

void *boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 112) = &unk_26D7542E8;
  uint64_t result = (void *)boost::exception_detail::error_info_injector<boost::property_tree::ini_parser::ini_parser_error>::error_info_injector(a1, a2);
  *uint64_t result = &unk_26D76AA60;
  result[9] = &unk_26D76AA98;
  result[14] = &unk_26D76AAD0;
  return result;
}

void sub_22407293C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::file_parser_error::file_parser_error(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  boost::property_tree::file_parser_error::format_what(a2, (const char *)a3, a4);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v12);
  *(void *)a1 = &unk_26D76A788;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26D76AB70;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    *(void *)(a1 + 32) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v8;
  }
  long long v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 56) = *((void *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(void *)(a1 + 64) = a4;
  return a1;
}

void sub_224072A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v16);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v15);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::file_parser_error::format_what(uint64_t a1, const char *a2, uint64_t a3)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a2[23] < 0)
  {
    if (*((void *)a2 + 1)) {
      a2 = *(const char **)a2;
    }
    else {
      a2 = "<unspecified file>";
    }
  }
  else if (!a2[23])
  {
    a2 = "<unspecified file>";
  }
  size_t v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v6);
  if (a3)
  {
    char v18 = 40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v18, 1);
    long long v7 = (void *)std::ostream::operator<<();
    char v18 = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v18, 1);
  }
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
  int v9 = *(char *)(a1 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *(void *)a1;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x263F8C2B8];
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x22A614E30](&v17);
}

void sub_224072CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment(uint64_t result)
{
  uint64_t v1 = *(void **)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    do
    {
      *(void *)uint64_t result = v2;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = (void *)(*v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v1 == (void *)v3[2])
    {
      do
      {
        std::runtime_error v5 = v3;
        *(void *)uint64_t result = v3;
        uint64_t v3 = (void *)(*v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v5 == (void *)v3[2]);
      uint64_t v4 = (void *)v5[2];
    }
    else
    {
      uint64_t v4 = 0;
    }
    if (v4 != v3) {
      *(void *)uint64_t result = v3;
    }
  }
  return result;
}

void boost::property_tree::ini_parser::detail::write_keys<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t v4 = *(void *)(v3 + 88);
  if (v4) {
    uint64_t v5 = v4 - 80;
  }
  else {
    uint64_t v5 = 0;
  }
  while (v5 != v3)
  {
    if (*(void *)(*(void *)(v5 + 48) + 24))
    {
      if (a3)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "ptree is too deep");
        std::string::basic_string[abi:ne180100]<0>(&v17, "");
        boost::property_tree::file_parser_error::file_parser_error((uint64_t)__p, (uint64_t)v18, &v17, 0);
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D76AB48;
        boost::exception_detail::throw_exception_<boost::property_tree::ini_parser::ini_parser_error>((uint64_t)__p, (uint64_t)"void boost::property_tree::ini_parser::detail::write_keys(std::basic_ostream<typename Ptree::key_type::value_type> &, const Ptree &, BOOL) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/TuriCore/turicreate_oss/src/external/boost/boost_1_68_0/boost/property_tree/ini_parser.hpp", 210);
      }
    }
    else
    {
      int v8 = *(char *)(v5 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v5;
      }
      else {
        uint64_t v9 = *(void *)v5;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v5 + 8);
      }
      uint64_t v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v9, v10);
      __p[0].__r_.__value_.__s.__data_[0] = 61;
      uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)__p, 1);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v5 + 24, __p);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v13 = __p;
      }
      else {
        long long v13 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
      }
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, size);
      LOBYTE(v18[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, 1);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    uint64_t v16 = *(void *)(v5 + 88);
    if (v16) {
      uint64_t v5 = v16 - 80;
    }
    else {
      uint64_t v5 = 0;
    }
  }
}

void sub_224072EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = __p;
  }
}

void sub_224073014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(uint64_t a1)
{
  uint64_t v2 = boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~multi_index_container(*(void *)(a1 + 24));
  MEMORY[0x22A614FA0](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~multi_index_container(uint64_t a1)
{
  return a1;
}

void boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::delete_all_nodes_(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 - 8);
  uint64_t v2 = v1[11];
  if (v2) {
    uint64_t v3 = (void *)(v2 - 80);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3 != v1)
  {
    do
    {
      uint64_t v5 = v3[11];
      if (v5) {
        size_t v6 = (void *)(v5 - 80);
      }
      else {
        size_t v6 = 0;
      }
      boost::detail::allocator::destroy<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>(v3);
      operator delete(v3);
      uint64_t v3 = v6;
    }
    while (v6 != *(void **)(a1 - 8));
  }
}

void boost::property_tree::ini_parser::read_ini<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 59);
  std::locale::~locale(v6);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v3 = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 35);
  std::locale::~locale(v6);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v4 = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 91);
  std::locale::~locale(v6);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v5 = std::locale::use_facet(v6, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 93);
  std::locale::~locale(v6);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  operator new();
}

void sub_224073B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::locale a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,std::locale a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 169) < 0) {
    operator delete(*(void **)(v47 - 192));
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v47 - 160);
  _Unwind_Resume(a1);
}

std::runtime_error *boost::property_tree::ini_parser::ini_parser_error::ini_parser_error(std::runtime_error *a1, uint64_t a2)
{
  uint64_t v4 = std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26D76AB70;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v4[1], *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    std::runtime_error v5 = *(std::runtime_error *)(a2 + 16);
    v4[2].__vftable = *(std::runtime_error_vtbl **)(a2 + 32);
    v4[1] = v5;
  }
  p_imp = (std::string *)&a1[2].__imp_;
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(p_imp, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    a1[3].__imp_.__imp_ = *(const char **)(a2 + 56);
    *(_OWORD *)&p_imp->__r_.__value_.__l.__data_ = v7;
  }
  a1[4].__vftable = *(std::runtime_error_vtbl **)(a2 + 64);
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26D76AB48;
  return a1;
}

void sub_224073F40(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void turi::ini::read_dictionary_section<std::string>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = a3 + 8;
  if (boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(*(void *)(a1 + 24) + 16, (const void **)a2, *(void *)(a1 + 24) + 17))
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v14 = *(std::string *)a2;
    }
    __p.__r_.__value_.__s.__data_[0] = 46;
    size_t v6 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    uint64_t child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(a1, (uint64_t)&v14);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = *(void *)(*(void *)(child + 24) + 8);
    uint64_t v9 = *(void *)(v8 + 88);
    if (v9) {
      uint64_t v10 = (long long *)(v9 - 80);
    }
    else {
      uint64_t v10 = 0;
    }
    while (v10 != (long long *)v8)
    {
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>((uint64_t)v10 + 24, &v13);
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v11 = *v10;
        v14.__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v11;
      }
      std::string __p = v13;
      memset(&v13, 0, sizeof(v13));
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>((uint64_t **)a3, (const void **)&v14.__r_.__value_.__l.__data_, (uint64_t)&v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      uint64_t v12 = *((void *)v10 + 11);
      if (v12) {
        uint64_t v10 = (long long *)(v12 - 80);
      }
      else {
        uint64_t v10 = 0;
      }
    }
  }
}

void sub_2240740F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, *(void **)(v21 + 8));
  _Unwind_Resume(a1);
}

void turi::ini::read_sequence_section<std::string>(uint64_t a1@<X0>, uint64_t a2@<X1>, std::vector<std::string>::size_type a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  if (a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v19 = *(std::string *)a2;
    }
    char v20 = 46;
    long long v7 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v7 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    uint64_t v21 = v7;
    uint64_t child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(a1, (uint64_t)&v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    std::vector<std::string>::resize(a4, a3);
    uint64_t v9 = *(void *)(*(void *)(child + 24) + 8);
    uint64_t v10 = *(void *)(v9 + 88);
    uint64_t v11 = v10 ? v10 - 80 : 0;
    if (v11 != v9)
    {
      uint64_t v12 = 0;
      do
      {
        if (*(char *)(v11 + 23) < 0)
        {
          if (!*(void *)(v11 + 8))
          {
LABEL_22:
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v11 + 24, &__str);
            memset(&v19, 0, sizeof(v19));
            std::string::operator=(&v19, &__str);
            uint64_t v15 = (uint64_t)&a4->__begin_[v12];
            if (*(char *)(v15 + 23) < 0) {
              operator delete(*(void **)v15);
            }
            long long v16 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
            *(void *)(v15 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v15 = v16;
            *((unsigned char *)&v19.__r_.__value_.__s + 23) = 0;
            v19.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            ++v12;
            goto LABEL_27;
          }
        }
        else if (!*(unsigned char *)(v11 + 23))
        {
          goto LABEL_22;
        }
        LODWORD(v12) = std::stoi((const std::string *)v11, 0, 10);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)a4->__end_ - (char *)a4->__begin_) >> 3) <= (int)v12)
        {
          v19.__r_.__value_.__r.__words[0] = v11;
          turi::ini::read_sequence_section<std::string>(boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,std::string,unsigned long)::{lambda(void)#1}::operator()((const std::string::value_type ***)&v19);
        }
        boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(v11 + 24, &__str);
        memset(&v19, 0, sizeof(v19));
        std::string::operator=(&v19, &__str);
        uint64_t v12 = (int)v12;
        uint64_t v13 = (uint64_t)&a4->__begin_[(int)v12];
        if (*(char *)(v13 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        long long v14 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
        *(void *)(v13 + 16) = *((void *)&v19.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v13 = v14;
        *((unsigned char *)&v19.__r_.__value_.__s + 23) = 0;
        v19.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
LABEL_27:
        uint64_t v17 = *(void *)(v11 + 88);
        if (v17) {
          uint64_t v11 = v17 - 80;
        }
        else {
          uint64_t v11 = 0;
        }
      }
      while (v11 != v9);
    }
  }
}

void sub_224074388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void boost::property_tree::detail::trim<std::string>(std::locale *this@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    long long v7 = (char *)a2;
  }
  else {
    long long v7 = *(char **)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8)
  {
    uint64_t v9 = (std::locale::id *)MEMORY[0x263F8C108];
    uint64_t v10 = v8;
    uint64_t v11 = v7;
    while (1)
    {
      int v12 = *v11;
      uint64_t v13 = std::locale::use_facet(this, v9);
      if (v12 < 0 || (*((_DWORD *)&v13[1].~facet + v12) & 0x4000) == 0) {
        break;
      }
      ++v11;
      if (!--v10) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    uint64_t v11 = v7;
  }
  if (v11 == &v7[v8])
  {
LABEL_25:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      uint64_t v16 = v14;
      int v17 = v7[v8 - 1 + v14];
      char v18 = std::locale::use_facet(this, v15);
      if (v17 < 0) {
        break;
      }
      uint64_t v14 = v16 - 1;
    }
    while ((*((_DWORD *)&v18[1].~facet + v17) & 0x4000) != 0);
    int v19 = *(char *)(a2 + 23);
    char v20 = *(const std::string::value_type **)a2;
    if (v19 >= 0) {
      uint64_t v21 = (char *)a2;
    }
    else {
      uint64_t v21 = *(char **)a2;
    }
    if (v16 || v11 != v21)
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(a3, v11, &v7[v8 + v16], &v7[v8 + v16] - v11);
    }
    else if (v19 < 0)
    {
      std::string::size_type v22 = *(void *)(a2 + 8);
      std::string::__init_copy_ctor_external(a3, v20, v22);
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
  }
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x22A6148B0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    long long v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_2240746FC(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x2240746BCLL);
  }
  __cxa_rethrow();
}

void sub_224074778(_Unwind_Exception *a1)
{
}

void boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::pop_back(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 - 8) + 80);
  if (v1) {
    uint64_t v2 = (unint64_t *)(v1 - 80);
  }
  else {
    uint64_t v2 = 0;
  }
  --*(void *)(a1 + 8);
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::erase_(a1, v2);
  operator delete(v2);
}

void boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::erase_(uint64_t a1, unint64_t *a2)
{
  *(void *)(a2[10] + 8) = a2[11];
  *(void *)a2[11] = a2[10];
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance_for_erase(a2 + 7, (unint64_t *)(*(void *)(a1 - 8) + 56), (unint64_t *)(*(void *)(a1 - 8) + 64), (unint64_t *)(*(void *)(a1 - 8) + 72));
  boost::detail::allocator::destroy<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>((uint64_t)a2);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance_for_erase(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6 = (unint64_t *)a1[1];
  long long v7 = a1 + 2;
  uint64_t v8 = (unint64_t **)(a1 + 2);
  if (!v6 || (v9 = (void *)*v7, uint64_t v8 = (unint64_t **)(a1 + 1), !*v7))
  {
    char v11 = *v8;
LABEL_9:
    unint64_t v12 = *a1 & 0xFFFFFFFFFFFFFFFELL;
    if (v11) {
      *char v11 = *v11 & 1 | v12;
    }
    if ((unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL) == a1)
    {
      *a2 = *a2 & 1 | (unint64_t)v11;
    }
    else
    {
      unint64_t v13 = *a1 & 0xFFFFFFFFFFFFFFFELL;
      if (*(unint64_t **)(v13 + 8) == a1) {
        *(void *)(v13 + 8) = v11;
      }
      else {
        *(void *)(v13 + 16) = v11;
      }
    }
    if ((unint64_t *)*a3 == a1)
    {
      if (*v7)
      {
        uint64_t v14 = v11;
        do
        {
          unint64_t v15 = (unint64_t)v14;
          uint64_t v14 = (void *)v14[1];
        }
        while (v14);
      }
      else
      {
        unint64_t v15 = *a1 & 0xFFFFFFFFFFFFFFFELL;
      }
      *a3 = v15;
    }
    if ((unint64_t *)*a4 == a1)
    {
      if (a1[1])
      {
        uint64_t v16 = v11;
        do
        {
          unint64_t v17 = (unint64_t)v16;
          uint64_t v16 = (void *)v16[2];
        }
        while (v16);
      }
      else
      {
        unint64_t v17 = *a1 & 0xFFFFFFFFFFFFFFFELL;
      }
      *a4 = v17;
    }
    goto LABEL_37;
  }
  do
  {
    unint64_t v10 = (unint64_t)v9;
    int v9 = (void *)v9[1];
  }
  while (v9);
  char v11 = *(unint64_t **)(v10 + 16);
  if ((unint64_t *)v10 == a1) {
    goto LABEL_9;
  }
  *uint64_t v6 = *v6 & 1 | v10;
  *(void *)(v10 + 8) = v6;
  unint64_t v12 = v10;
  if (v10 != *v7)
  {
    unint64_t v12 = *(void *)v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v11) {
      *char v11 = *v11 & 1 | v12;
    }
    *(void *)((*(void *)v10 & 0xFFFFFFFFFFFFFFFELL) + 8) = v11;
    *(void *)(v10 + 16) = *v7;
    *(void *)void *v7 = *(void *)*v7 & 1 | v10;
  }
  if ((unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL) == a1)
  {
    *a2 = *a2 & 1 | v10;
    unint64_t v18 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    unint64_t v18 = *a1 & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v18 + 8) == a1) {
      *(void *)(v18 + 8) = v10;
    }
    else {
      *(void *)(v18 + 16) = v10;
    }
  }
  uint64_t v19 = *(void *)v10;
  *(void *)unint64_t v10 = *(void *)v10 & 1 | v18;
  *(void *)unint64_t v10 = *a1 & 1 | v18;
  *a1 = *a1 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
LABEL_37:
  if ((*(unsigned char *)a1 & 1) == 0) {
    return a1;
  }
  if (v11 == (unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL)) {
    goto LABEL_73;
  }
  while (1)
  {
    char v20 = (unint64_t *)v12;
    if (v11)
    {
      unint64_t v21 = *v11;
      if ((*v11 & 1) == 0) {
        goto LABEL_75;
      }
    }
    std::string::size_type v22 = (unint64_t *)v20[1];
    if (v11 != v22)
    {
      if ((*v22 & 1) == 0)
      {
        *v22 |= 1uLL;
        *v20 &= ~1uLL;
        boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v20, a2);
        std::string::size_type v22 = (unint64_t *)v20[1];
      }
      unint64_t v23 = (unsigned char *)v22[2];
      if (!v23 || (*v23 & 1) != 0)
      {
        unint64_t v24 = (unsigned char *)v22[1];
        if (v24 && (*v24 & 1) == 0) {
          goto LABEL_58;
        }
        goto LABEL_55;
      }
      unint64_t v24 = (unsigned char *)v22[1];
      if (v24)
      {
LABEL_58:
        if ((*v24 & 1) == 0)
        {
LABEL_62:
          unint64_t *v22 = *v22 & 0xFFFFFFFFFFFFFFFELL | *v20 & 1;
          *v20 |= 1uLL;
          if (v24) {
            *(void *)v24 |= 1uLL;
          }
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v20, a2);
          goto LABEL_73;
        }
        if (!v23)
        {
LABEL_61:
          *v22 &= ~1uLL;
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v22, a2);
          std::string::size_type v22 = (unint64_t *)v20[1];
          unint64_t v24 = (unsigned char *)v22[1];
          goto LABEL_62;
        }
      }
      *(void *)v23 |= 1uLL;
      goto LABEL_61;
    }
    std::string::size_type v22 = (unint64_t *)v20[2];
    if ((*v22 & 1) == 0)
    {
      *v22 |= 1uLL;
      *v20 &= ~1uLL;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v20, a2);
      std::string::size_type v22 = (unint64_t *)v20[2];
    }
    unint64_t v25 = (unsigned char *)v22[1];
    if (v25)
    {
      if ((*v25 & 1) == 0) {
        break;
      }
    }
    unint64_t v26 = (unsigned char *)v22[2];
    if (v26 && (*v26 & 1) == 0) {
      goto LABEL_66;
    }
LABEL_55:
    *v22 &= ~1uLL;
    unint64_t v12 = *v20 & 0xFFFFFFFFFFFFFFFELL;
    char v11 = v20;
    if (v20 == (unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFFELL)) {
      goto LABEL_74;
    }
  }
  unint64_t v26 = (unsigned char *)v22[2];
  if (!v26) {
    goto LABEL_68;
  }
LABEL_66:
  if (*v26)
  {
    if (v25) {
LABEL_68:
    }
      *(void *)v25 |= 1uLL;
    *v22 &= ~1uLL;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v22, a2);
    std::string::size_type v22 = (unint64_t *)v20[2];
    unint64_t v26 = (unsigned char *)v22[2];
  }
  unint64_t *v22 = *v22 & 0xFFFFFFFFFFFFFFFELL | *v20 & 1;
  *v20 |= 1uLL;
  if (v26) {
    *(void *)v26 |= 1uLL;
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v20, a2);
LABEL_73:
  char v20 = v11;
  if (v11)
  {
LABEL_74:
    unint64_t v21 = *v20;
    char v11 = v20;
LABEL_75:
    *char v11 = v21 | 1;
  }
  return a1;
}

void std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
  }
  operator new();
}

void sub_224074D00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    BOOL v4 = *(char *)(a2 + 23) < 0;
  }
  else
  {
    BOOL v4 = 0;
    std::string v11 = *(std::string *)a2;
  }
  char v12 = *(unsigned char *)(a2 + 24);
  std::runtime_error v5 = &v11;
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::runtime_error v5 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if (v4) {
    uint64_t v6 = *(void *)a2;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v13 = (char *)v5 + *(void *)(a2 + 32) - v6;
  uint64_t v7 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(a1, (uint64_t)&v11);
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "No such node");
    boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(&v10, v9, a2);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_224074E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::runtime_error a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::equal_range<std::string,std::less<std::string>>(a1, a2, a3);
  if (v3 == v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = 0;
  do
  {
    ++v6;
    unint64_t v8 = v3 + 56;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v8);
    if (v8) {
      unint64_t v3 = v8 - 56;
    }
    else {
      unint64_t v3 = 0;
    }
  }
  while (v3 != v5);
  return v6;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::equal_range<std::string,std::less<std::string>>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 - 8);
  unint64_t v4 = *(void *)(v3 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v4) {
    return v3;
  }
  while (1)
  {
    unint64_t v7 = v4;
    while (1)
    {
      unint64_t v8 = v7 - 56;
      if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v7 - 56), a2)) {
        break;
      }
      unint64_t v7 = *(void *)(v7 + 16);
      if (!v7) {
        return v3;
      }
    }
    BOOL v9 = std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)(v7 - 56));
    unint64_t v4 = *(void *)(v7 + 8);
    if (!v9) {
      break;
    }
    unint64_t v3 = v7 - 56;
    if (!v4) {
      return v8;
    }
  }
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v11 = v4 - 56;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v4 - 56), a2)) {
          break;
        }
        unint64_t v4 = *(void *)(v4 + 16);
        if (!v4) {
          goto LABEL_17;
        }
      }
      unint64_t v4 = *(void *)(v4 + 8);
      unint64_t v8 = v11;
    }
    while (v4);
  }
  else
  {
LABEL_17:
    unint64_t v11 = v8;
  }
  uint64_t v12 = *(void *)(v7 + 16);
  if (!v12) {
    return v11;
  }
  do
  {
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)(v12 - 56)))
    {
      uint64_t v12 = *(void *)(v12 + 16);
      if (!v12) {
        return v11;
      }
    }
    uint64_t v12 = *(void *)(v12 + 8);
  }
  while (v12);
  return v11;
}

void **turi::dir_archive::init_for_read(std::string const&)::$_1::operator()(void **result, uint64_t a2)
{
  uint64_t v2 = 0;
  v19[19] = *MEMORY[0x263EF8340];
  uint64_t v3 = **result + 32 * a2;
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (const std::string::value_type *)(**result + 32 * a2);
  }
  else {
    uint64_t v5 = *(const std::string::value_type **)v3;
  }
  uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  if (v4 < 0) {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  while (-v6 != v2 && v2 != -5)
  {
    int v7 = v5[v6 - 1 + v2];
    int v8 = aSidx[v2-- + 4];
    if (v7 != v8) {
      goto LABEL_11;
    }
  }
  if (v2 == -5)
  {
LABEL_17:
    if (v4 < 0)
    {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)v3, *(void *)(v3 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v3;
      v15.__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v14;
    }
    turi::general_ifstream::general_ifstream(&v16, (uint64_t)&v15);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    std::istream::read();
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D758EF8;
    v19[0] = &unk_26D758F20;
    if (v18 < 0) {
      operator delete(v17);
    }
    std::istream::~istream();
    boost::iostreams::stream_buffer<turi::fileio_impl::general_fstream_source,std::char_traits<char>,std::allocator<char>,boost::iostreams::input_seekable>::~stream_buffer((uint64_t)&v16.__r_.__value_.__r.__words[2]);
    return (void **)MEMORY[0x22A614E30](v19);
  }
LABEL_11:
  uint64_t v9 = 0;
  uint64_t v10 = (uint64_t)&v5[v6 - 1];
  uint64_t v11 = -v6;
  while (v11 != v9 && v9 != -10)
  {
    int v12 = *(unsigned __int8 *)(v10 + v9);
    int v13 = aFrameIdx[v9-- + 9];
    if (v12 != v13) {
      return result;
    }
  }
  if (v9 == -10) {
    goto LABEL_17;
  }
  return result;
}

void sub_224075220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x2240751F0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::dir_archive::init_for_read(std::string const&)::$_1>(unsigned long,unsigned long,turi::dir_archive::init_for_read(std::string const&)::$_1 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_11dir_archive13init_for_readERKNSt3__112basic_stringIc"
                                        "NS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_11dir_archive13init_for_readERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_1EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

void **boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::dir_archive::init_for_read(std::string const&)::$_1>(unsigned long,unsigned long,turi::dir_archive::init_for_read(std::string const&)::$_1 const&)::{lambda(void)#1},void>::invoke(void **result)
{
  unint64_t v1 = (unint64_t)result[1];
  if (v1 < (unint64_t)result[2])
  {
    uint64_t v2 = result;
    do
      uint64_t result = turi::dir_archive::init_for_read(std::string const&)::$_1::operator()((void **)*v2, v1++);
    while (v1 < (unint64_t)v2[2]);
  }
  return result;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::insert_iterator<std::set<std::string>>,0>@<X0>(uint64_t result@<X0>, const void **a2@<X1>, const void **a3@<X2>, const void **a4@<X3>, const void ***a5@<X8>)
{
  long long v5 = (const void **)result;
  int v8 = a3;
  uint64_t v9 = a4;
  if ((const void **)result != a2)
  {
    do
    {
      uint64_t result = std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)&v8, v5);
      v5 += 3;
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    long long v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      long long v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      long long v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t turi::dir_archive::delete_archive(std::string)::$_0::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void **)(result + 8);
  uint64_t v4 = **(void **)result;
  uint64_t v5 = v4 + 32 * a2;
  uint64_t v6 = v3[1];
  if (!v6)
  {
    uint64_t v9 = (void *)*v3;
LABEL_22:
    int v7 = v3 + 1;
    goto LABEL_25;
  }
  int v7 = v3 + 1;
  do
  {
    uint64_t result = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v3 + 2), (const void **)(v6 + 32), (const void **)v5);
    int v8 = (uint64_t *)(v6 + 8);
    if (!result)
    {
      int v8 = (uint64_t *)v6;
      int v7 = (void *)v6;
    }
    uint64_t v6 = *v8;
  }
  while (*v8);
  uint64_t v9 = (void *)*v3;
  if (v7 == v3 + 1) {
    goto LABEL_22;
  }
  uint64_t v10 = *(unsigned __int8 **)v5;
  if (*(char *)(v5 + 23) < 0)
  {
    uint64_t v11 = *(void *)(v5 + 8);
  }
  else
  {
    uint64_t v10 = (unsigned __int8 *)v5;
    uint64_t v11 = *(unsigned __int8 *)(v5 + 23);
  }
  int v12 = (unsigned __int8 *)v7[4];
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    int v12 = (unsigned __int8 *)(v7 + 4);
  }
  uint64_t v14 = v7[5];
  if (v13 >= 0) {
    uint64_t v14 = *((unsigned __int8 *)v7 + 55);
  }
  if (v11 && v14)
  {
    uint64_t v15 = v14 - 1;
    uint64_t v16 = v11 - 1;
    unint64_t v17 = v12;
    while (*v10 == *v17)
    {
      ++v17;
      if (v16)
      {
        ++v10;
        uint64_t v18 = v15--;
        --v16;
        if (v18) {
          continue;
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v17 = v12;
LABEL_24:
    if (v17 == &v12[v14]) {
      return turi::fileio::delete_path(v5, *(_DWORD *)(v4 + 32 * a2 + 24));
    }
  }
LABEL_25:
  if (v7 == v9) {
    return result;
  }
  uint64_t v19 = (void *)*v7;
  if (*v7)
  {
    do
    {
      char v20 = v19;
      uint64_t v19 = (void *)v19[1];
    }
    while (v19);
  }
  else
  {
    do
    {
      char v20 = (void *)v7[2];
      BOOL v28 = *v20 == (void)v7;
      int v7 = v20;
    }
    while (v28);
  }
  unint64_t v21 = *(unsigned __int8 **)v5;
  uint64_t v22 = *(void *)(v5 + 8);
  if (*(char *)(v5 + 23) >= 0)
  {
    unint64_t v21 = (unsigned __int8 *)v5;
    uint64_t v22 = *(unsigned __int8 *)(v5 + 23);
  }
  unint64_t v25 = (unsigned __int8 *)v20[4];
  unint64_t v24 = (unsigned __int8 *)(v20 + 4);
  unint64_t v23 = v25;
  int v26 = (char)v24[23];
  if (v26 >= 0) {
    unint64_t v23 = v24;
  }
  uint64_t v27 = *((void *)v24 + 1);
  if (v26 >= 0) {
    uint64_t v27 = v26;
  }
  if (v22) {
    BOOL v28 = v27 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28)
  {
    uint64_t v29 = v27 - 1;
    uint64_t v30 = v22 - 1;
    long long v31 = v23;
    while (*v21 == *v31)
    {
      ++v31;
      if (v30)
      {
        ++v21;
        uint64_t v32 = v29--;
        --v30;
        if (v32) {
          continue;
        }
      }
      goto LABEL_42;
    }
    return result;
  }
  long long v31 = v23;
LABEL_42:
  if (v31 == &v23[v27]) {
    return turi::fileio::delete_path(v5, *(_DWORD *)(v4 + 32 * a2 + 24));
  }
  return result;
}

void sub_2240756B0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t boost::detail::function::functor_manager<void turi::parallel_for<turi::dir_archive::delete_archive(std::string)::$_0>(unsigned long,unsigned long,turi::dir_archive::delete_archive(std::string)::$_0 const&)::{lambda(void)#1}>::manage(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  uint64_t v4 = result;
  if (a3 > 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
      {
LABEL_2:
        *(_WORD *)(a2 + 8) = 0;
        return result;
      }
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"ZN4turi12parallel_forIZNS_11dir_archive14delete_archiveENSt3__112basic_stringIcN"
                                        "S2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"ZN4turi12parallel_forIZNS_11dir_archive14delete_archiveENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3$_0EEvmmRKT_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = v4;
      }
      else
      {
        *(void *)a2 = 0;
      }
    }
  }
  else
  {
    long long v5 = *(_OWORD *)result;
    *(void *)(a2 + 16) = *(void *)(result + 16);
    *(_OWORD *)a2 = v5;
  }
  return result;
}

uint64_t boost::detail::function::void_function_obj_invoker0<void turi::parallel_for<turi::dir_archive::delete_archive(std::string)::$_0>(unsigned long,unsigned long,turi::dir_archive::delete_archive(std::string)::$_0 const&)::{lambda(void)#1},void>::invoke(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 8);
  if (v1 < *(void *)(result + 16))
  {
    uint64_t v2 = (uint64_t *)result;
    do
      uint64_t result = turi::dir_archive::delete_archive(std::string)::$_0::operator()(*v2, v1++);
    while (v1 < v2[2]);
  }
  return result;
}

void std::vector<std::pair<std::string,turi::fileio::file_status>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::pair<std::string,unsigned long>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t OUTLINED_FUNCTION_5_2(uint64_t a1, ...)
{
  va_start(va, a1);
  return turi::error::io_error::io_error(v1, va);
}

__n128 OUTLINED_FUNCTION_9_3(__n128 *a1)
{
  __n128 result = *a1;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  a1->n128_u64[0] = 0;
  return result;
}

turi::csv_line_tokenizer *turi::csv_line_tokenizer::csv_line_tokenizer(turi::csv_line_tokenizer *this)
{
  *(_DWORD *)this = 22806784;
  uint64_t v2 = (void *)((char *)this + 32);
  std::string::basic_string[abi:ne180100]<0>((void *)this + 1, ",");
  std::string::basic_string[abi:ne180100]<0>(v2, "\n");
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 14) = 570425635;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *((_OWORD *)this + 11) = 0u;
  *((unsigned char *)this + 168) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_WORD *)this + 140) = 0;
  *((void *)this + 32) = -1;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *(_DWORD *)((char *)this + 283) = 16777472;
  std::string::resize((std::string *)((char *)this + 176), 0x400uLL, 0);
  return this;
}

void sub_224075944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 272);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (*(char *)(v2 + 255) < 0) {
    operator delete(*(void **)(v2 + 232));
  }
  if (*(char *)(v2 + 231) < 0) {
    operator delete(*(void **)(v2 + 208));
  }
  if (*(char *)(v2 + 199) < 0) {
    operator delete(*v7);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::csv_line_tokenizer::tokenize_line(unsigned __int8 *a1, char *i, size_t a3, uint64_t *a4)
{
  uint64_t v93 = *MEMORY[0x263EF8340];
  std::vector<std::string>::__clear[abi:ne180100](a4);
  v88[0] = (std::vector<std::string> *)a4;
  v88[1] = (std::vector<std::string> *)a1;
  if (!*((void *)a1 + 33)) {
    assert_msg(0, v8);
  }
  std::string v87 = i;
  if ((char)a1[31] < 0)
  {
    uint64_t v9 = (unsigned __int8 *)*((void *)a1 + 1);
    int64_t v10 = *((void *)a1 + 2);
  }
  else
  {
    uint64_t v9 = a1 + 8;
    int64_t v10 = a1[31];
  }
  *((void *)a1 + 32) = -1;
  *((void *)a1 + 25) = 0;
  if (a1[280])
  {
    turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(v88, (unsigned __int8 *)i, a3);
    return 1;
  }
  int v86 = (std::vector<std::string> *)a4;
  if (!a3) {
    return 1;
  }
  int v12 = 0;
  int v13 = 0;
  char v14 = 0;
  unint64_t v15 = (unint64_t)&i[a3];
  uint64_t v16 = a1 + 176;
  uint64_t p_end_cap = (uint64_t)&v86->__end_cap_;
  do
  {
    if (!a1[284] || *i != a1[282]) {
      goto LABEL_16;
    }
    if (!a1[283])
    {
      if (v10 > (uint64_t)(v15 - i)) {
        goto LABEL_16;
      }
      if (v10)
      {
        uint64_t v31 = 0;
        while (i[v31] == v9[v31])
        {
          if (v10 == ++v31) {
            goto LABEL_13;
          }
        }
LABEL_16:
        int v18 = 0;
        goto LABEL_19;
      }
    }
LABEL_13:
    if ((char)a1[31] < 0) {
      uint64_t v17 = *((void *)a1 + 2);
    }
    else {
      uint64_t v17 = a1[31];
    }
    unint64_t i = &i[v17 - 1];
    int v18 = 1;
LABEL_19:
    std::string v87 = i + 1;
    unsigned int v19 = *i;
    if (v12 == 2)
    {
      if ((a1[59] != v19) | v13 & 1)
      {
        unint64_t v23 = *((void *)a1 + 25);
        if ((char)a1[199] < 0) {
          unint64_t v24 = *((void *)a1 + 23);
        }
        else {
          unint64_t v24 = a1[199];
        }
        if (v23 >= v24)
        {
          std::string::resize((std::string *)(a1 + 176), 2 * v24, 0);
          unint64_t v23 = *((void *)a1 + 25);
        }
        *((void *)a1 + 25) = v23 + 1;
        uint64_t v32 = a1 + 176;
        if ((char)a1[199] < 0) {
          uint64_t v32 = *(unsigned __int8 **)v16;
        }
        v32[v23] = v19;
        if (a1[1]) {
          goto LABEL_106;
        }
        goto LABEL_108;
      }
      if (a1[58] && (unint64_t)(i + 2) < v15)
      {
        unint64_t v27 = *((void *)a1 + 25);
        if (i[1] == v19)
        {
          if ((char)a1[199] < 0) {
            unint64_t v28 = *((void *)a1 + 23);
          }
          else {
            unint64_t v28 = a1[199];
          }
          if (v27 >= v28)
          {
            std::string::resize((std::string *)(a1 + 176), 2 * v28, 0);
            unint64_t v27 = *((void *)a1 + 25);
          }
          *((void *)a1 + 25) = v27 + 1;
          int v51 = a1 + 176;
          if ((char)a1[199] < 0) {
            int v51 = *(unsigned __int8 **)v16;
          }
          v51[v27] = v19;
          unint64_t v52 = *((void *)a1 + 25);
          if ((char)a1[199] < 0) {
            unint64_t v53 = *((void *)a1 + 23);
          }
          else {
            unint64_t v53 = a1[199];
          }
          if (v52 >= v53)
          {
            std::string::resize((std::string *)(a1 + 176), 2 * v53, 0);
            unint64_t v52 = *((void *)a1 + 25);
          }
          *((void *)a1 + 25) = v52 + 1;
          uint64_t v54 = a1 + 176;
          if ((char)a1[199] < 0) {
            uint64_t v54 = *(unsigned __int8 **)v16;
          }
          v54[v52] = v19;
          if (a1[1]) {
            BOOL v50 = a1[2] == v19;
          }
          else {
            BOOL v50 = 0;
          }
          ++v87;
          goto LABEL_125;
        }
      }
      else
      {
        unint64_t v27 = *((void *)a1 + 25);
      }
      if ((char)a1[199] < 0) {
        unint64_t v30 = *((void *)a1 + 23);
      }
      else {
        unint64_t v30 = a1[199];
      }
      if (v27 >= v30)
      {
LABEL_71:
        std::string::resize((std::string *)(a1 + 176), 2 * v30, 0);
        unint64_t v27 = *((void *)a1 + 25);
      }
LABEL_72:
      *((void *)a1 + 25) = v27 + 1;
      unint64_t v34 = a1 + 176;
      if ((char)a1[199] < 0) {
        unint64_t v34 = *(unsigned __int8 **)v16;
      }
      v34[v27] = v19;
      if (!a1[1]) {
        goto LABEL_174;
      }
      goto LABEL_172;
    }
    if (v12 == 1)
    {
      if (v18)
      {
        uint64_t v22 = a1 + 176;
        if ((char)a1[199] < 0) {
          uint64_t v22 = *(unsigned __int8 **)v16;
        }
        turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(v88, v22, *((void *)a1 + 25));
        int v12 = 0;
        *((void *)a1 + 25) = 0;
        goto LABEL_129;
      }
      if (a1[57] && a1[56] == v19)
      {
        unint64_t v25 = a1 + 176;
        if ((char)a1[199] < 0) {
          unint64_t v25 = *(unsigned __int8 **)v16;
        }
        turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(v88, v25, *((void *)a1 + 25));
        int v26 = 0;
        int v12 = 0;
        *((void *)a1 + 25) = 0;
        goto LABEL_130;
      }
      unint64_t v27 = *((void *)a1 + 25);
      if ((char)a1[199] < 0) {
        unint64_t v30 = *((void *)a1 + 23);
      }
      else {
        unint64_t v30 = a1[199];
      }
      if (v27 >= v30) {
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a1[59] != v19)
    {
      if (v19 != 9)
      {
        int v29 = (v19 & 0x80000000) != 0
            ? __maskrune(*i, 0x4000uLL)
            : *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v19 + 60) & 0x4000;
        if (v29 && a1[3])
        {
          int v12 = 0;
          int v26 = 1;
          goto LABEL_130;
        }
      }
      if (!v18)
      {
        if (!a1[57] || a1[56] != v19)
        {
          if ((v19 & 0xFFFFFFDF) == 0x5B)
          {
            long long v39 = v87;
            unint64_t v40 = v87 - 1;
            std::string v87 = v40;
            turi::flexible_type_parser::general_flexible_type_parse(*((turi::flexible_type_parser **)a1 + 33), (const char **)&v87, v15 - (void)v40, (uint64_t)v92);
            std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v92);
            if (v87 != v40)
            {
              std::string::basic_string[abi:ne180100](__p, v40, v87 - v40);
              std::vector<std::string>::pointer end = v86->__end_;
              value = v86->__end_cap_.__value_;
              if (end >= value)
              {
                unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v86->__begin_) >> 3);
                unint64_t v57 = v56 + 1;
                if (v56 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v86->__begin_) >> 3);
                if (2 * v58 > v57) {
                  unint64_t v57 = 2 * v58;
                }
                if (v58 >= 0x555555555555555) {
                  unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v59 = v57;
                }
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v86->__end_cap_;
                if (v59) {
                  int v60 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(p_end_cap, v59);
                }
                else {
                  int v60 = 0;
                }
                std::string v61 = v60 + v56;
                __v.__first_ = v60;
                __v.__begin_ = v61;
                __v.__end_cap_.__value_ = &v60[v59];
                long long v62 = *(_OWORD *)__p;
                v61->__r_.__value_.__r.__words[2] = v90;
                *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v62;
                __p[1] = 0;
                std::string::size_type v90 = 0;
                __p[0] = 0;
                __v.__end_ = v61 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(v86, &__v);
                uint64_t v63 = v86->__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__v);
                int v64 = SHIBYTE(v90);
                v86->__end_ = v63;
                if (v64 < 0) {
                  operator delete(__p[0]);
                }
              }
              else
              {
                long long v43 = *(_OWORD *)__p;
                end->__r_.__value_.__r.__words[2] = v90;
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v43;
                v86->__end_ = end + 1;
              }
              for (unint64_t i = v87; (unint64_t)i < v15; v87 = i)
              {
                unsigned int v65 = *i;
                if ((v65 & 0x80000000) != 0)
                {
                  int v66 = __maskrune(v65, 0x4000uLL);
                  unint64_t i = v87;
                  if (!v66) {
                    break;
                  }
                }
                else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v65 + 60) & 0x4000) == 0)
                {
                  break;
                }
                ++i;
              }
              if (i == (char *)v15) {
                return 1;
              }
              if (a1[284] && *i == a1[282])
              {
                if (a1[283]) {
                  goto LABEL_153;
                }
                if (v10 <= (uint64_t)(v15 - i))
                {
                  if (!v10)
                  {
LABEL_153:
                    if ((char)a1[31] < 0) {
                      uint64_t v67 = *((void *)a1 + 2);
                    }
                    else {
                      uint64_t v67 = a1[31];
                    }
                    int v12 = 0;
                    i += v67;
                    std::string v87 = i;
                    char v14 = 1;
                    continue;
                  }
                  int64_t v72 = v10;
                  unint64_t v73 = v9;
                  uint64_t v74 = i;
                  while (*v74 == *v73)
                  {
                    ++v74;
                    ++v73;
                    if (!--v72) {
                      goto LABEL_153;
                    }
                  }
                }
              }
              if (a1[281])
              {
                char v14 = 0;
                int v12 = 0;
                continue;
              }
              std::vector<std::string>::pointer v68 = v86->__end_;
              p_data = (void **)&v68[-1].__r_.__value_.__l.__data_;
              if (SHIBYTE(v68[-1].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(*p_data);
              }
              v86->__end_ = (std::vector<std::string>::pointer)p_data;
            }
            std::string v87 = v39;
          }
          unint64_t v21 = *((void *)a1 + 25);
          if ((char)a1[199] < 0) {
            unint64_t v70 = *((void *)a1 + 23);
          }
          else {
            unint64_t v70 = a1[199];
          }
          if (v21 < v70) {
            goto LABEL_168;
          }
          std::string::resize((std::string *)(a1 + 176), 2 * v70, 0);
          goto LABEL_167;
        }
        int v26 = 0;
        char v14 = 0;
        int v12 = 0;
LABEL_130:
        BOOL v50 = v13;
        goto LABEL_176;
      }
      *((void *)a1 + 25) = 0;
      uint64_t v35 = v86;
      unint64_t v37 = v86->__end_;
      uint64_t v36 = v86->__end_cap_.__value_;
      if (v37 >= v36)
      {
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v86->__begin_) >> 3);
        unint64_t v45 = v44 + 1;
        if (v44 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (char *)v86->__begin_) >> 3);
        if (2 * v46 > v45) {
          unint64_t v45 = 2 * v46;
        }
        if (v46 >= 0x555555555555555) {
          unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v47 = v45;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v86->__end_cap_;
        if (v47) {
          long long v48 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(p_end_cap, v47);
        }
        else {
          long long v48 = 0;
        }
        uint64_t v55 = v48 + v44;
        __v.__first_ = v48;
        __v.__begin_ = v55;
        __v.__end_cap_.__value_ = &v48[v47];
        v55->__r_.__value_.__r.__words[0] = 0;
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        __v.__end_ = v55 + 1;
        uint64_t v35 = v86;
        std::vector<std::string>::__swap_out_circular_buffer(v86, &__v);
        std::vector<std::string>::pointer v38 = v86->__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        v37->__r_.__value_.__r.__words[0] = 0;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::pointer v38 = v37 + 1;
        v86->__end_ = v37 + 1;
      }
      int v12 = 0;
      v35->__end_ = v38;
      *((void *)a1 + 25) = 0;
LABEL_129:
      int v26 = 1;
      char v14 = 1;
      goto LABEL_130;
    }
    int v20 = *a1;
    *((void *)a1 + 25) = 0;
    if (!v20)
    {
      if ((a1[199] & 0x80) != 0)
      {
        if (*((void *)a1 + 23)) {
          goto LABEL_65;
        }
      }
      else if (a1[199])
      {
LABEL_65:
        uint64_t v33 = 0;
LABEL_102:
        *((void *)a1 + 25) = v33 + 1;
        unint64_t v49 = a1 + 176;
        if ((char)a1[199] < 0) {
          unint64_t v49 = *(unsigned __int8 **)v16;
        }
        v49[v33] = v19;
        if (a1[1])
        {
          char v14 = 0;
LABEL_106:
          BOOL v50 = a1[2] == v19;
LABEL_125:
          int v12 = 2;
          int v26 = 1;
          goto LABEL_176;
        }
        char v14 = 0;
LABEL_108:
        BOOL v50 = 0;
        goto LABEL_125;
      }
      std::string::resize((std::string *)(a1 + 176), 0, 0);
      uint64_t v33 = *((void *)a1 + 25);
      goto LABEL_102;
    }
    if ((a1[199] & 0x80) != 0)
    {
      if (*((void *)a1 + 23)) {
        goto LABEL_25;
      }
LABEL_77:
      std::string::resize((std::string *)(a1 + 176), 0, 0);
LABEL_167:
      unint64_t v21 = *((void *)a1 + 25);
      goto LABEL_168;
    }
    if (!a1[199]) {
      goto LABEL_77;
    }
LABEL_25:
    unint64_t v21 = 0;
LABEL_168:
    *((void *)a1 + 25) = v21 + 1;
    std::string v71 = a1 + 176;
    if ((char)a1[199] < 0) {
      std::string v71 = *(unsigned __int8 **)v16;
    }
    v71[v21] = v19;
    if (!a1[1])
    {
      char v14 = 0;
LABEL_174:
      BOOL v50 = 0;
      goto LABEL_175;
    }
    char v14 = 0;
LABEL_172:
    BOOL v50 = a1[2] == v19;
LABEL_175:
    int v26 = 1;
    int v12 = 1;
LABEL_176:
    int v13 = (v13 ^ 1) & v50;
    unint64_t i = v87;
    if (!v26) {
      break;
    }
  }
  while (i != (char *)v15);
  if (v12)
  {
    if ((char)a1[199] < 0) {
      uint64_t v16 = *(unsigned __int8 **)v16;
    }
    turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(v88, v16, *((void *)a1 + 25));
  }
  else if (v14)
  {
    uint64_t v75 = v86;
    uint64_t v77 = v86->__end_;
    unint64_t v76 = v86->__end_cap_.__value_;
    if (v77 >= v76)
    {
      unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (char *)v86->__begin_) >> 3);
      unint64_t v80 = v79 + 1;
      if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (char *)v86->__begin_) >> 3);
      if (2 * v81 > v80) {
        unint64_t v80 = 2 * v81;
      }
      if (v81 >= 0x555555555555555) {
        unint64_t v82 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v82 = v80;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v86->__end_cap_;
      if (v82)
      {
        long long v83 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(p_end_cap, v82);
        uint64_t v75 = v86;
      }
      else
      {
        long long v83 = 0;
      }
      uint64_t v84 = v83 + v79;
      __v.__first_ = v83;
      __v.__begin_ = v84;
      __v.__end_cap_.__value_ = &v83[v82];
      v84->__r_.__value_.__r.__words[0] = 0;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      __v.__end_ = v84 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v75, &__v);
      BOOL v78 = v75->__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v77->__r_.__value_.__r.__words[0] = 0;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      BOOL v78 = v77 + 1;
      v86->__end_ = v77 + 1;
    }
    v75->__end_ = v78;
  }
  return 1;
}

void sub_22407641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, std::__split_buffer<std::string> *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__pa, uint64_t a19, uint64_t a20,uint64_t a21)
{
}

unint64_t turi::csv_line_tokenizer::tokenize_line(unsigned __int8 *a1, char *a2, size_t a3, unint64_t *a4, char a5, void *a6)
{
  v129[19] = *MEMORY[0x263EF8340];
  char v116 = a5;
  unint64_t v114 = 0;
  unsigned int v115 = a6;
  unint64_t v113 = (uint64_t)(a4[1] - *a4) >> 4;
  if (a6) {
    unint64_t v113 = (uint64_t)(a6[1] - *a6) >> 3;
  }
  if ((char)a1[255] < 0)
  {
    **((unsigned char **)a1 + 29) = 0;
    *((void *)a1 + 30) = 0;
  }
  else
  {
    a1[232] = 0;
    a1[255] = 0;
  }
  v112[0] = &v114;
  v112[1] = &v113;
  v112[2] = (unint64_t *)a1;
  v112[3] = (unint64_t *)&v115;
  v112[4] = a4;
  v112[5] = (unint64_t *)&v116;
  if (!*((void *)a1 + 33)) {
    assert_msg(0, a2);
  }
  v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  if ((char)a1[31] < 0)
  {
    int v7 = (unsigned __int8 *)*((void *)a1 + 1);
    int64_t v8 = *((void *)a1 + 2);
  }
  else
  {
    int v7 = a1 + 8;
    int64_t v8 = a1[31];
  }
  *((void *)a1 + 32) = -1;
  *((void *)a1 + 25) = 0;
  if (a1[280])
  {
    turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v112, a2, a3, a2, a3);
    goto LABEL_12;
  }
  if (a3)
  {
    int v11 = 0;
    int v12 = 0;
    char v104 = 0;
    unint64_t v13 = (unint64_t)a2;
    unint64_t v14 = (unint64_t)&a2[a3];
    unint64_t v15 = (char *)(a1 + 176);
    char v102 = 1;
    unint64_t i = a2;
    while (1)
    {
      if (a1[284] && *i == a1[282])
      {
        if (a1[283]) {
          goto LABEL_19;
        }
        if (v8 <= (uint64_t)(v14 - i))
        {
          if (!v8)
          {
LABEL_19:
            if ((char)a1[31] < 0) {
              uint64_t v17 = *((void *)a1 + 2);
            }
            else {
              uint64_t v17 = a1[31];
            }
            unint64_t v19 = (unint64_t)&i[v17 - 1];
            int v18 = 1;
            goto LABEL_25;
          }
          uint64_t v33 = 0;
          while (i[v33] == v7[v33])
          {
            if (v8 == ++v33) {
              goto LABEL_19;
            }
          }
        }
      }
      int v18 = 0;
      unint64_t v19 = (unint64_t)i;
LABEL_25:
      int v20 = (unsigned __int8 *)(v19 + 1);
      v111.__r_.__value_.__r.__words[0] = v19 + 1;
      unsigned int v21 = *(char *)v19;
      if (v11 == 2)
      {
        if ((a1[59] != v21) | v12 & 1)
        {
          unint64_t v25 = *((void *)a1 + 25);
          if ((char)a1[199] < 0) {
            unint64_t v26 = *((void *)a1 + 23);
          }
          else {
            unint64_t v26 = a1[199];
          }
          if (v25 >= v26)
          {
            std::string::resize((std::string *)(a1 + 176), 2 * v26, 0);
            unint64_t v25 = *((void *)a1 + 25);
          }
          *((void *)a1 + 25) = v25 + 1;
          unint64_t v34 = (char *)(a1 + 176);
          if ((char)a1[199] < 0) {
            unint64_t v34 = *(char **)v15;
          }
          v34[v25] = v21;
          if (a1[1]) {
            BOOL v35 = a1[2] == v21;
          }
          else {
            BOOL v35 = 0;
          }
LABEL_136:
          int v11 = 2;
          int v28 = 1;
          goto LABEL_171;
        }
        if (a1[58] && v19 + 2 < v14)
        {
          unint64_t v29 = *((void *)a1 + 25);
          if (*v20 == v21)
          {
            if ((char)a1[199] < 0) {
              unint64_t v30 = *((void *)a1 + 23);
            }
            else {
              unint64_t v30 = a1[199];
            }
            if (v29 >= v30)
            {
              std::string::resize((std::string *)(a1 + 176), 2 * v30, 0);
              unint64_t v29 = *((void *)a1 + 25);
            }
            *((void *)a1 + 25) = v29 + 1;
            long long v43 = a1 + 176;
            if ((char)a1[199] < 0) {
              long long v43 = *(unsigned __int8 **)v15;
            }
            v43[v29] = v21;
            unint64_t v44 = *((void *)a1 + 25);
            if ((char)a1[199] < 0) {
              unint64_t v45 = *((void *)a1 + 23);
            }
            else {
              unint64_t v45 = a1[199];
            }
            if (v44 >= v45)
            {
              std::string::resize((std::string *)(a1 + 176), 2 * v45, 0);
              unint64_t v44 = *((void *)a1 + 25);
            }
            *((void *)a1 + 25) = v44 + 1;
            unint64_t v46 = a1 + 176;
            if ((char)a1[199] < 0) {
              unint64_t v46 = *(unsigned __int8 **)v15;
            }
            v46[v44] = v21;
            if (a1[1]) {
              BOOL v35 = a1[2] == v21;
            }
            else {
              BOOL v35 = 0;
            }
            ++v111.__r_.__value_.__r.__words[0];
            goto LABEL_136;
          }
        }
        else
        {
          unint64_t v29 = *((void *)a1 + 25);
        }
        if ((char)a1[199] < 0) {
          unint64_t v32 = *((void *)a1 + 23);
        }
        else {
          unint64_t v32 = a1[199];
        }
        if (v29 >= v32) {
          goto LABEL_81;
        }
        goto LABEL_82;
      }
      if (v11 == 1)
      {
        if (v18)
        {
          unint64_t v24 = (char *)(a1 + 176);
          if ((char)a1[199] < 0) {
            unint64_t v24 = *(char **)v15;
          }
          if (turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v112, v24, *((void *)a1 + 25), (char *)v13, (size_t)&v20[~v13]))
          {
LABEL_98:
            unint64_t v13 = 0;
            int v11 = 0;
            *((void *)a1 + 25) = 0;
            int v28 = 1;
            char v104 = 1;
            goto LABEL_111;
          }
LABEL_56:
          char v102 = 0;
          int v28 = 0;
          int v11 = 1;
          goto LABEL_111;
        }
        if (a1[57] && a1[56] == v21)
        {
          unint64_t v27 = (char *)(a1 + 176);
          if ((char)a1[199] < 0) {
            unint64_t v27 = *(char **)v15;
          }
          if (turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v112, v27, *((void *)a1 + 25), (char *)v13, (size_t)&v20[~v13]))
          {
            unint64_t v13 = 0;
            int v28 = 0;
            int v11 = 0;
            *((void *)a1 + 25) = 0;
            goto LABEL_111;
          }
          goto LABEL_56;
        }
        unint64_t v29 = *((void *)a1 + 25);
        if ((char)a1[199] < 0) {
          unint64_t v32 = *((void *)a1 + 23);
        }
        else {
          unint64_t v32 = a1[199];
        }
        if (v29 >= v32)
        {
LABEL_81:
          std::string::resize((std::string *)(a1 + 176), 2 * v32, 0);
          unint64_t v29 = *((void *)a1 + 25);
        }
LABEL_82:
        *((void *)a1 + 25) = v29 + 1;
        unint64_t v37 = (char *)(a1 + 176);
        if ((char)a1[199] < 0) {
          unint64_t v37 = *(char **)v15;
        }
        v37[v29] = v21;
        if (a1[1]) {
          BOOL v35 = a1[2] == v21;
        }
        else {
          BOOL v35 = 0;
        }
        int v28 = 1;
        goto LABEL_170;
      }
      if (a1[59] == v21)
      {
        int v22 = *a1;
        *((void *)a1 + 25) = 0;
        if (v22)
        {
          if ((a1[199] & 0x80) != 0)
          {
            if (*((void *)a1 + 23)) {
              goto LABEL_31;
            }
          }
          else if (a1[199])
          {
LABEL_31:
            unint64_t v23 = 0;
            goto LABEL_164;
          }
          std::string::resize((std::string *)(a1 + 176), 0, 0);
          goto LABEL_163;
        }
        if ((a1[199] & 0x80) != 0)
        {
          if (!*((void *)a1 + 23)) {
            goto LABEL_113;
          }
LABEL_74:
          uint64_t v36 = 0;
        }
        else
        {
          if (a1[199]) {
            goto LABEL_74;
          }
LABEL_113:
          std::string::resize((std::string *)(a1 + 176), 0, 0);
          uint64_t v36 = *((void *)a1 + 25);
        }
        *((void *)a1 + 25) = v36 + 1;
        uint64_t v42 = (char *)(a1 + 176);
        if ((char)a1[199] < 0) {
          uint64_t v42 = *(char **)v15;
        }
        v42[v36] = v21;
        char v104 = 0;
        if (a1[1]) {
          BOOL v35 = a1[2] == v21;
        }
        else {
          BOOL v35 = 0;
        }
        int v11 = 2;
        int v28 = 1;
        unint64_t v13 = v19;
        goto LABEL_171;
      }
      if (v21 != 9)
      {
        int v31 = (v21 & 0x80000000) != 0
            ? __maskrune(*(char *)v19, 0x4000uLL)
            : *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v21 + 60) & 0x4000;
        if (v31 && a1[3])
        {
          int v11 = 0;
          int v28 = 1;
          goto LABEL_110;
        }
      }
      if (v18)
      {
        *((void *)a1 + 25) = 0;
        std::vector<std::string>::pointer v38 = (char *)(a1 + 176);
        if ((char)a1[199] < 0) {
          std::vector<std::string>::pointer v38 = *(char **)v15;
        }
        if (turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v112, v38, 0, (char *)v19, v111.__r_.__value_.__r.__words[0] + ~v19))
        {
          goto LABEL_98;
        }
        char v102 = 0;
        int v28 = 0;
        int v11 = 0;
        char v104 = 1;
LABEL_110:
        unint64_t v13 = v19;
LABEL_111:
        BOOL v35 = v12;
LABEL_171:
        int v12 = (v12 ^ 1) & v35;
        unint64_t i = (char *)v111.__r_.__value_.__r.__words[0];
        unint64_t v19 = v13;
        if (!v28) {
          goto LABEL_181;
        }
        goto LABEL_172;
      }
      if (a1[57] && a1[56] == v21)
      {
        int v28 = 0;
        char v104 = 0;
        int v11 = 0;
        goto LABEL_110;
      }
      if ((v21 & 0xFFFFFFDF) != 0x5B) {
        goto LABEL_158;
      }
      std::string::size_type v105 = v111.__r_.__value_.__r.__words[0];
      std::string::pointer v39 = (std::string::pointer)--v111.__r_.__value_.__r.__words[0];
      unint64_t v40 = v114;
      if (v114 >= v113) {
        goto LABEL_157;
      }
      if (v115 && (unint64_t v40 = *(void *)(*v115 + 8 * v114), v40 == -1))
      {
        turi::flexible_type_parser::general_flexible_type_parse(*((turi::flexible_type_parser **)a1 + 33), (const char **)&v111.__r_.__value_.__l.__data_, v14 - (void)v39, (uint64_t)&__str);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__str);
        if (v111.__r_.__value_.__l.__data_ == v39) {
          goto LABEL_157;
        }
      }
      else
      {
        long long v41 = (turi::flexible_type *)(*a4 + 16 * v40);
        if (*((unsigned char *)v41 + 12) == 2)
        {
          turi::flexible_type_parser::general_flexible_type_parse(*((turi::flexible_type_parser **)a1 + 33), (const char **)&v111.__r_.__value_.__l.__data_, v14 - (void)v39, (uint64_t)v121);
          std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v121);
          if (v111.__r_.__value_.__l.__data_ != v39)
          {
            std::string::basic_string[abi:ne180100](&__p, v39, v111.__r_.__value_.__r.__words[0] - (void)v39);
            turi::flexible_type::operator=<std::string>(*a4 + 16 * v40);
          }
          goto LABEL_157;
        }
        if (!turi::csv_line_tokenizer::parse_as((turi::csv_line_tokenizer *)a1, &v111.__r_.__value_.__l.__data_, v14 - (void)v39, v39, v14 - (void)v39, v41, 0))goto LABEL_157; {
      }
        }
      ++v114;
      for (unint64_t i = (char *)v111.__r_.__value_.__r.__words[0];
            (unint64_t)i < v14;
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)i)
      {
        unsigned int v47 = *i;
        if ((v47 & 0x80000000) != 0)
        {
          int v48 = __maskrune(v47, 0x4000uLL);
          unint64_t i = (char *)v111.__r_.__value_.__r.__words[0];
          if (!v48) {
            break;
          }
        }
        else if ((*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v47 + 60) & 0x4000) == 0)
        {
          break;
        }
        ++i;
      }
      if (i == (char *)v14)
      {
        if ((v102 & 1) == 0) {
          goto LABEL_191;
        }
        break;
      }
      if (a1[284] && *i == a1[282])
      {
        if (a1[283]) {
          goto LABEL_151;
        }
        if (v8 <= (uint64_t)(v14 - i))
        {
          if (!v8)
          {
LABEL_151:
            if ((char)a1[31] < 0) {
              uint64_t v49 = *((void *)a1 + 2);
            }
            else {
              uint64_t v49 = a1[31];
            }
            int v11 = 0;
            i += v49;
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)i;
            char v104 = 1;
            goto LABEL_172;
          }
          int64_t v52 = v8;
          unint64_t v53 = v7;
          uint64_t v54 = i;
          while (*v54 == *v53)
          {
            ++v54;
            ++v53;
            if (!--v52) {
              goto LABEL_151;
            }
          }
        }
      }
      if (!a1[281])
      {
        --v114;
LABEL_157:
        v111.__r_.__value_.__r.__words[0] = v105;
LABEL_158:
        unint64_t v23 = *((void *)a1 + 25);
        if ((char)a1[199] < 0) {
          unint64_t v50 = *((void *)a1 + 23);
        }
        else {
          unint64_t v50 = a1[199];
        }
        if (v23 >= v50)
        {
          std::string::resize((std::string *)(a1 + 176), 2 * v50, 0);
LABEL_163:
          unint64_t v23 = *((void *)a1 + 25);
        }
LABEL_164:
        *((void *)a1 + 25) = v23 + 1;
        int v51 = (char *)(a1 + 176);
        if ((char)a1[199] < 0) {
          int v51 = *(char **)v15;
        }
        v51[v23] = v21;
        char v104 = 0;
        if (a1[1]) {
          BOOL v35 = a1[2] == v21;
        }
        else {
          BOOL v35 = 0;
        }
        int v28 = 1;
        unint64_t v13 = v19;
LABEL_170:
        int v11 = 1;
        goto LABEL_171;
      }
      char v104 = 0;
      int v11 = 0;
LABEL_172:
      unint64_t v13 = v19;
      if (i == (char *)v14)
      {
LABEL_181:
        if (v102)
        {
          if (v11)
          {
            if ((char)a1[199] < 0) {
              unint64_t v15 = *(char **)v15;
            }
            BOOL v55 = turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v112, v15, *((void *)a1 + 25), (char *)v19, (size_t)&i[-v19]);
          }
          else
          {
            if ((v104 & 1) == 0) {
              break;
            }
            BOOL v55 = turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(v112, 0, 0, 0, 0);
          }
          if (v55) {
            break;
          }
          unint64_t v14 = v111.__r_.__value_.__r.__words[0];
        }
        else
        {
          unint64_t v14 = (unint64_t)i;
        }
LABEL_191:
        int v10 = 0;
        *((void *)a1 + 32) = v14 - (void)a2;
        goto LABEL_192;
      }
    }
  }
LABEL_12:
  unint64_t result = v114;
  if (v114 < (uint64_t)(a4[1] - *a4) >> 4)
  {
    int v10 = 1;
LABEL_192:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v121);
    signed __int8 v56 = a1[255];
    if (v56 < 0) {
      uint64_t v57 = *((void *)a1 + 30);
    }
    else {
      uint64_t v57 = a1[255];
    }
    int v100 = v10;
    if (v57)
    {
      if (v56 >= 0) {
        uint64_t v58 = (uint64_t)(a1 + 232);
      }
      else {
        uint64_t v58 = *((void *)a1 + 29);
      }
      if (v56 >= 0) {
        uint64_t v59 = a1[255];
      }
      else {
        uint64_t v59 = *((void *)a1 + 30);
      }
      int v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, v58, v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\n", 1);
    }
    size_t v61 = *((void *)a1 + 32);
    if ((v61 & 0x8000000000000000) == 0 && v61 <= a3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Parse failed at token ending at: \n", 34);
      std::string::basic_string[abi:ne180100](&__str, a2, a3);
      std::string::size_type v62 = *((void *)a1 + 32);
      textcolor(1, 1, &v110);
      uint64_t v63 = std::string::append(&v110, "^");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      reset_color(&v119);
      if ((v120 & 0x80u) == 0) {
        unsigned int v65 = (const std::string::value_type *)&v119;
      }
      else {
        unsigned int v65 = (const std::string::value_type *)v119;
      }
      if ((v120 & 0x80u) == 0) {
        std::string::size_type v66 = v120;
      }
      else {
        std::string::size_type v66 = *((void *)&v119 + 1);
      }
      uint64_t v67 = std::string::append(&v111, v65, v66);
      long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::insert(&__str, v62, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((char)v120 < 0) {
        operator delete((void *)v119);
      }
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >= 0x101)
      {
        uint64_t v71 = *((void *)a1 + 32);
        uint64_t v72 = 60;
        if (v71 > 60) {
          uint64_t v72 = *((void *)a1 + 32);
        }
        int64_t v73 = v71 + 60;
        if (v73 >= (uint64_t)a3) {
          int64_t v73 = a3;
        }
        std::string::basic_string(&__p, &__str, v72 - 60, v73 - (v72 - 60), (std::allocator<char> *)&v111);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = __p;
      }
      uint64_t v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"\t", 1);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v76 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v76 = __str.__r_.__value_.__l.__size_;
      }
      uint64_t v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)p_str, v76);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"\n", 1);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Successfully parsed ", 20);
    BOOL v78 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" tokens: \n", 10);
    if (v114)
    {
      uint64_t v79 = 0;
      unint64_t v80 = 0;
      std::string::size_type v107 = *MEMORY[0x263F8C2B8];
      std::string::size_type v101 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      std::string::size_type v103 = *(void *)(MEMORY[0x263F8C2B8] + 64);
      do
      {
        unint64_t v81 = (turi::flexible_type_impl *)(*a4 + v79);
        switch(*((unsigned char *)v81 + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_253;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__str);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_253:
            __str.__r_.__value_.__r.__words[0] = v107;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + *(void *)(v107 - 24)) = v103;
            __str.__r_.__value_.__r.__words[2] = v101;
            uint64_t v126 = MEMORY[0x263F8C318] + 16;
            if (v128 < 0) {
              operator delete(v127);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x22A614E30](v129);
            break;
          case 2:
            uint64_t v82 = *(void *)v81;
            if (*(char *)(*(void *)v81 + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v82 + 8), *(void *)(v82 + 16));
            }
            else
            {
              long long v83 = *(_OWORD *)(v82 + 8);
              __p.__r_.__value_.__r.__words[2] = *(void *)(v82 + 24);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v83;
            }
            break;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__str, (void *)(*(void *)v81 + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__str, (uint64_t *)(*(void *)v81 + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__str, (void *)(*(void *)v81 + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(v81, &__p);
            break;
          case 7:
            memset(&__p, 0, sizeof(__p));
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__str, (void *)(*(void *)v81 + 8));
            break;
          default:
            turi::flexible_type_fail(0);
            __break(1u);
            return result;
        }
        std::string::size_type v84 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v84 = __p.__r_.__value_.__l.__size_;
        }
        if (v84 >= 0x16)
        {
          std::string::basic_string(&v111, &__p, 0, 0xAuLL, (std::allocator<char> *)&v110);
          long long v85 = std::string::append(&v111, " ... ");
          long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v86;
          v85->__r_.__value_.__l.__size_ = 0;
          v85->__r_.__value_.__r.__words[2] = 0;
          v85->__r_.__value_.__r.__words[0] = 0;
          std::string::size_type v87 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v87 = __p.__r_.__value_.__l.__size_;
          }
          std::string::basic_string(&v110, &__p, v87 - 10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v118);
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v88 = &v110;
          }
          else {
            std::string v88 = (std::string *)v110.__r_.__value_.__r.__words[0];
          }
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v89 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v89 = v110.__r_.__value_.__l.__size_;
          }
          std::string::size_type v90 = std::string::append(&__str, (const std::string::value_type *)v88, v89);
          std::string::size_type v91 = v90->__r_.__value_.__r.__words[0];
          *(void *)&long long v119 = v90->__r_.__value_.__l.__size_;
          *(void *)((char *)&v119 + 7) = *(std::string::size_type *)((char *)&v90->__r_.__value_.__r.__words[1] + 7);
          char v92 = HIBYTE(v90->__r_.__value_.__r.__words[2]);
          v90->__r_.__value_.__l.__size_ = 0;
          v90->__r_.__value_.__r.__words[2] = 0;
          v90->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = v91;
          __p.__r_.__value_.__l.__size_ = v119;
          *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&v119 + 7);
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = v92;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v110.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v111.__r_.__value_.__l.__data_);
          }
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"\t", 1);
        uint64_t v93 = (void *)std::ostream::operator<<();
        long long v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)": ", 2);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v95 = &__p;
        }
        else {
          std::string::size_type v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v96 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v96 = __p.__r_.__value_.__l.__size_;
        }
        unint64_t v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"\n", 1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v80;
        v79 += 16;
      }
      while (v80 < v114);
    }
    std::stringbuf::str();
    std::string v98 = (void **)(a1 + 208);
    if ((char)a1[231] < 0) {
      operator delete(*v98);
    }
    *(_OWORD *)std::string v98 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((void *)a1 + 28) = *((void *)&__str.__r_.__value_.__l + 2);
    v121[0] = *MEMORY[0x263F8C2B8];
    uint64_t v99 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v121 + *(void *)(v121[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v122[0] = v99;
    v122[1] = MEMORY[0x263F8C318] + 16;
    if (v123 < 0) {
      operator delete((void *)v122[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x22A614E30](&v124);
    if (v100) {
      return v114;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_224077674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::csv_line_tokenizer::check_substitutions(turi::csv_line_tokenizer *this, char *__src, size_t __len, turi::flexible_type *a4)
{
  if (!__src) {
    return 0;
  }
  if (*((void *)this + 8) == *((void *)this + 9))
  {
LABEL_19:
    if (*((void *)this + 14))
    {
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      unint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>((void *)this + 11, (unsigned __int8 *)__p);
      uint64_t v16 = v15;
      if (v37 < 0)
      {
        operator delete(__p[0]);
        if (v16)
        {
LABEL_22:
          uint64_t v17 = MEMORY[0x263EF8318];
          do
          {
            size_t v18 = __len;
            if (!__len) {
              break;
            }
            unsigned int v19 = __src[__len - 1];
            int v20 = (v19 & 0x80000000) != 0 ? __maskrune(v19, 0x4000uLL) : *(_DWORD *)(v17 + 4 * v19 + 60) & 0x4000;
            --__len;
          }
          while (v20);
          if (!*((unsigned char *)a4 + 12))
          {
            *((_DWORD *)a4 + 2) = 0;
            *((unsigned char *)a4 + 12) = 0;
            uint64_t result = 1;
            *(void *)a4 = 1;
            return result;
          }
          if (*((unsigned char *)a4 + 12) == 1)
          {
            *((_DWORD *)a4 + 2) = 0;
            uint64_t result = 1;
            *((unsigned char *)a4 + 12) = 1;
            *(void *)a4 = 0x3FF0000000000000;
            return result;
          }
LABEL_33:
          if (*((void *)this + 19))
          {
            std::string::basic_string[abi:ne180100](__p, __src, v18);
            int v22 = std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::find<std::string>((void *)this + 16, (unsigned __int8 *)__p);
            unint64_t v23 = v22;
            if (v37 < 0)
            {
              operator delete(__p[0]);
              if (!v23) {
                return 0;
              }
            }
            else if (!v22)
            {
              return 0;
            }
            unint64_t v24 = __src - 1;
            uint64_t v25 = MEMORY[0x263EF8318];
            do
            {
              if (!v18) {
                break;
              }
              unsigned int v26 = v24[v18];
              int v27 = (v26 & 0x80000000) != 0 ? __maskrune(v26, 0x4000uLL) : *(_DWORD *)(v25 + 4 * v26 + 60) & 0x4000;
              --v18;
            }
            while (v27);
            if (*((unsigned char *)a4 + 12) == 1)
            {
              *((_DWORD *)a4 + 2) = 0;
              uint64_t result = 1;
              *((unsigned char *)a4 + 12) = 1;
              *(void *)a4 = 0;
              return result;
            }
            if (!*((unsigned char *)a4 + 12))
            {
              *(void *)((char *)a4 + 5) = 0;
              *(void *)a4 = 0;
              return 1;
            }
          }
          return 0;
        }
      }
      else if (v15)
      {
        goto LABEL_22;
      }
    }
    size_t v18 = __len;
    goto LABEL_33;
  }
  uint64_t v8 = MEMORY[0x263EF8318];
  do
  {
    size_t v9 = __len;
    if (!__len) {
      break;
    }
    unsigned int v10 = __src[__len - 1];
    int v11 = (v10 & 0x80000000) != 0 ? __maskrune(v10, 0x4000uLL) : *(_DWORD *)(v8 + 4 * v10 + 60) & 0x4000;
    --__len;
  }
  while (v11);
  uint64_t v12 = *((void *)this + 8);
  uint64_t v13 = *((void *)this + 9);
  while (1)
  {
    if (v12 == v13)
    {
      __len = v9;
      goto LABEL_19;
    }
    if (*(char *)(v12 + 23) < 0) {
      break;
    }
    unint64_t v14 = (const char *)v12;
    if (*(unsigned __int8 *)(v12 + 23) == v9) {
      goto LABEL_16;
    }
LABEL_17:
    v12 += 24;
  }
  if (*(void *)(v12 + 8) != v9) {
    goto LABEL_17;
  }
  unint64_t v14 = *(const char **)v12;
LABEL_16:
  if (strncmp(__src, v14, v9)) {
    goto LABEL_17;
  }
  switch(*((unsigned char *)a4 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v28 = *(void *)a4;
        if (!*(void *)a4) {
          goto LABEL_76;
        }
        if (*(char *)(v28 + 31) < 0) {
          operator delete(*(void **)(v28 + 8));
        }
        unint64_t v29 = (void *)v28;
        uint64_t v30 = 0x1012C404EF22A49;
        goto LABEL_75;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v31 = *(void **)a4;
        if (!*(void *)a4) {
          goto LABEL_76;
        }
        unint64_t v32 = (void *)v31[1];
        if (v32)
        {
          v31[2] = v32;
          operator delete(v32);
        }
        unint64_t v29 = v31;
        uint64_t v30 = 0x1080C409938AC02;
        goto LABEL_75;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v33 = *(void **)a4;
        if (!*(void *)a4) {
          goto LABEL_76;
        }
        __p[0] = v33 + 1;
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_67;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v33 = *(void **)a4;
        if (!*(void *)a4) {
          goto LABEL_76;
        }
        __p[0] = v33 + 1;
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_67:
        unint64_t v29 = v33;
        uint64_t v30 = 0x1020C405E66F15BLL;
        goto LABEL_75;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v34 = *(void *)a4;
        if (!*(void *)a4) {
          goto LABEL_76;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v34 + 16));
        unint64_t v29 = (void *)v34;
        unsigned int v35 = -235920773;
        goto LABEL_74;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a4, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        if (*(void *)a4)
        {
          unint64_t v29 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)a4);
          unsigned int v35 = 2071181815;
LABEL_74:
          uint64_t v30 = v35 | 0x1030C4000000000;
LABEL_75:
          MEMORY[0x22A614FA0](v29, v30);
        }
LABEL_76:
        *(void *)a4 = 0;
      }
      break;
    default:
      break;
  }
  *(void *)a4 = 0;
  *((_DWORD *)a4 + 2) = 0;
  *((unsigned char *)a4 + 12) = 7;
  return 1;
}

void sub_224077BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL turi::csv_line_tokenizer::parse_as(turi::csv_line_tokenizer *this, char **a2, size_t a3, char *a4, size_t a5, turi::flexible_type *a6, int a7)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  if (a4 && *((unsigned char *)this + 168) && (turi::csv_line_tokenizer::check_substitutions(this, a4, a5, a6) & 1) != 0
    || !*((unsigned char *)this + 168) && (turi::csv_line_tokenizer::check_substitutions(this, *a2, a3, a6) & 1) != 0)
  {
    return 1;
  }
  unsigned __int8 v62 = 0;
  int v13 = *((unsigned __int8 *)a6 + 12);
  uint64_t v14 = MEMORY[0x263EF8318];
  if (!a7)
  {
LABEL_13:
    uint64_t v12 = 0;
    switch(*((unsigned char *)a6 + 12))
    {
      case 0:
        turi::flexible_type_parser::int_parse((const char **)a2, a3, (uint64_t)&__dst);
        goto LABEL_36;
      case 1:
        turi::flexible_type_parser::double_parse((const char **)a2, a3, (uint64_t)&__dst);
        goto LABEL_36;
      case 2:
        goto LABEL_15;
      case 3:
        turi::flexible_type_parser::vector_parse(*((turi::flexible_type_parser **)this + 33), (const char **)a2, a3, (void **)&__dst);
        goto LABEL_36;
      case 4:
        turi::flexible_type_parser::recursive_parse(*((turi::flexible_type_parser **)this + 33), (const char **)a2, a3, (void **)&__dst);
        goto LABEL_36;
      case 5:
        turi::flexible_type_parser::dict_parse(*((turi::flexible_type_parser **)this + 33), (const char **)a2, a3, (void **)&__dst);
LABEL_36:
        *(void *)&long long v63 = a6;
        *((void *)&v63 + 1) = &v62;
        std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v63, (uint64_t *)&__dst);
        std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__dst);
        goto LABEL_70;
      case 7:
        goto LABEL_26;
      default:
        return v12;
    }
  }
  if (v13 == 2)
  {
    do
    {
LABEL_15:
      uint64_t v16 = *a2;
      if (!a3)
      {
        size_t v19 = 0;
        goto LABEL_38;
      }
      unsigned int v17 = v16[a3 - 1];
      if ((v17 & 0x80000000) != 0) {
        int v18 = __maskrune(v17, 0x4000uLL);
      }
      else {
        int v18 = *(_DWORD *)(v14 + 4 * v17 + 60) & 0x4000;
      }
      --a3;
    }
    while (v18);
    size_t v19 = a3 + 1;
    uint64_t v16 = *a2;
    if (a3 + 1 < 2)
    {
      size_t v19 = 1;
    }
    else
    {
      int v20 = *v16;
      if (v20 == *((unsigned __int8 *)this + 59) && v16[a3] == v20)
      {
        std::string::basic_string[abi:ne180100](&__dst, v16 + 1, a3 - 1);
        switch(*((unsigned char *)a6 + 12))
        {
          case 2:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 3:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 4:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 5:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 8:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 9:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          default:
            break;
        }
        uint64_t v57 = *(void *)a6 + 8;
        if (*(char *)(*(void *)a6 + 31) < 0) {
          operator delete(*(void **)v57);
        }
        long long v58 = __dst;
        *(void *)(v57 + 16) = v65;
        *(_OWORD *)uint64_t v57 = v58;
        unsigned __int8 v62 = 1;
        switch(*((unsigned char *)a6 + 12))
        {
          case 2:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 3:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 4:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 5:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 8:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          case 9:
            if (**(void **)a6 != 1) {
              operator new();
            }
            return result;
          default:
            break;
        }
        turi::unescape_string((std::string *)(*(void *)a6 + 8), *((unsigned __int8 *)this + 1), *((unsigned char *)this + 2), *((unsigned char *)this + 59), *((unsigned __int8 *)this + 58));
        goto LABEL_70;
      }
    }
LABEL_38:
    std::string::basic_string[abi:ne180100](&__dst, v16, v19);
    switch(*((unsigned char *)a6 + 12))
    {
      case 2:
        if (**(void **)a6 != 1) {
          operator new();
        }
        return result;
      case 3:
        if (**(void **)a6 != 1) {
          operator new();
        }
        return result;
      case 4:
        if (**(void **)a6 != 1) {
          operator new();
        }
        return result;
      case 5:
        if (**(void **)a6 != 1) {
          operator new();
        }
        return result;
      case 8:
        if (**(void **)a6 != 1) {
          operator new();
        }
        return result;
      case 9:
        if (**(void **)a6 != 1) {
          operator new();
        }
        return result;
      default:
        break;
    }
    uint64_t v32 = *(void *)a6 + 8;
    if (*(char *)(*(void *)a6 + 31) < 0) {
      operator delete(*(void **)v32);
    }
    long long v33 = __dst;
    *(void *)(v32 + 16) = v65;
    *(_OWORD *)uint64_t v32 = v33;
    unsigned __int8 v62 = 1;
    goto LABEL_70;
  }
  if (v13 != 7)
  {
    int v15 = **a2;
    if (v15 == *((unsigned __int8 *)this + 59) && (*a2)[a3 - 1] == v15) {
      operator new();
    }
    goto LABEL_13;
  }
LABEL_26:
  turi::flexible_type_parser::general_flexible_type_parse(*((turi::flexible_type_parser **)this + 33), (const char **)a2, a3, (uint64_t)&__dst);
  *(void *)&long long v63 = a6;
  *((void *)&v63 + 1) = &v62;
  std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((uint64_t **)&v63, (uint64_t *)&__dst);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__dst);
  if (!a7 || !v62 || *((unsigned char *)a6 + 12) != 2) {
    goto LABEL_70;
  }
  uint64_t v21 = *(void *)a6;
  if (*(char *)(*(void *)a6 + 31) < 0)
  {
    int v22 = *(char **)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
  }
  else
  {
    int v22 = (char *)(v21 + 8);
    uint64_t v23 = *(unsigned __int8 *)(*(void *)a6 + 31);
  }
  size_t v61 = v22;
  uint64_t v24 = v23 << 32;
  do
  {
    uint64_t v25 = v23;
    uint64_t v26 = v24;
    if (!v23) {
      break;
    }
    unsigned int v27 = v61[v23 - 1];
    int v28 = (v27 & 0x80000000) != 0 ? __maskrune(v27, 0x4000uLL) : *(_DWORD *)(v14 + 4 * v27 + 60) & 0x4000;
    uint64_t v24 = v26 - 0x100000000;
    uint64_t v23 = v25 - 1;
  }
  while (v28);
  *(void *)((char *)&v63 + 5) = 0x700000000000000;
  *(void *)&long long v63 = 0;
  char v60 = 0;
  turi::flexible_type_parser::non_string_flexible_type_parse(*((turi::flexible_type_parser **)this + 33), (const char **)&v61, v25, (char **)&__dst);
  v59[0] = (uint64_t *)&v63;
  v59[1] = (uint64_t *)&v60;
  std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>(v59, (uint64_t *)&__dst);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)&__dst);
  if (v60 && &v63 != (long long *)a6 && v61 - v22 == v26 >> 32)
  {
    switch(*((unsigned char *)a6 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v29 = *(void *)a6;
          if (!*(void *)a6) {
            goto LABEL_114;
          }
          if (*(char *)(v29 + 31) < 0) {
            operator delete(*(void **)(v29 + 8));
          }
          uint64_t v30 = (void *)v29;
          uint64_t v31 = 0x1012C404EF22A49;
          goto LABEL_113;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          long long v43 = *(void **)a6;
          if (!*(void *)a6) {
            goto LABEL_114;
          }
          unint64_t v44 = (void *)v43[1];
          if (v44)
          {
            v43[2] = v44;
            operator delete(v44);
          }
          uint64_t v30 = v43;
          uint64_t v31 = 0x1080C409938AC02;
          goto LABEL_113;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v45 = *(void **)a6;
          if (!*(void *)a6) {
            goto LABEL_114;
          }
          *(void *)&long long __dst = v45 + 1;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
          goto LABEL_105;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          unint64_t v45 = *(void **)a6;
          if (!*(void *)a6) {
            goto LABEL_114;
          }
          *(void *)&long long __dst = v45 + 1;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
LABEL_105:
          uint64_t v30 = v45;
          uint64_t v31 = 0x1020C405E66F15BLL;
          goto LABEL_113;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          uint64_t v46 = *(void *)a6;
          if (!*(void *)a6) {
            goto LABEL_114;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v46 + 16));
          uint64_t v30 = (void *)v46;
          unsigned int v47 = -235920773;
          goto LABEL_112;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a6, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          if (*(void *)a6)
          {
            uint64_t v30 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)a6);
            unsigned int v47 = 2071181815;
LABEL_112:
            uint64_t v31 = v47 | 0x1030C4000000000;
LABEL_113:
            MEMORY[0x22A614FA0](v30, v31);
          }
LABEL_114:
          *(void *)a6 = 0;
        }
        break;
      default:
        break;
    }
    *(void *)((char *)a6 + 5) = *(void *)((char *)&v63 + 5);
    *(void *)a6 = v63;
    unsigned int v48 = BYTE12(v63);
    *((unsigned char *)a6 + 12) = BYTE12(v63);
    if (v48 > 9 || ((1 << v48) & 0x33C) == 0) {
      goto LABEL_119;
    }
    atomic_fetch_add(*(atomic_ullong *volatile *)a6, 1uLL);
  }
  unsigned int v48 = BYTE12(v63);
LABEL_119:
  switch(v48)
  {
    case 2u:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v49 = (void *)v63;
        if ((void)v63)
        {
          if (*(char *)(v63 + 31) < 0) {
            operator delete(*(void **)(v63 + 8));
          }
          unint64_t v50 = v49;
          uint64_t v51 = 0x1012C404EF22A49;
          goto LABEL_144;
        }
      }
      break;
    case 3u:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int64_t v52 = (void *)v63;
        if ((void)v63)
        {
          unint64_t v53 = *(void **)(v63 + 8);
          if (v53)
          {
            *(void *)(v63 + 16) = v53;
            operator delete(v53);
          }
          unint64_t v50 = v52;
          uint64_t v51 = 0x1080C409938AC02;
          goto LABEL_144;
        }
      }
      break;
    case 4u:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v54 = (void *)v63;
        if ((void)v63)
        {
          *(void *)&long long __dst = v63 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
          goto LABEL_136;
        }
      }
      break;
    case 5u:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v54 = (void *)v63;
        if ((void)v63)
        {
          *(void *)&long long __dst = v63 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
LABEL_136:
          unint64_t v50 = v54;
          uint64_t v51 = 0x1020C405E66F15BLL;
          goto LABEL_144;
        }
      }
      break;
    case 8u:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v55 = (void *)v63;
        if ((void)v63)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v63 + 16));
          unint64_t v50 = v55;
          unsigned int v56 = -235920773;
          goto LABEL_143;
        }
      }
      break;
    case 9u:
      if (atomic_fetch_add((atomic_ullong *volatile)v63, 0xFFFFFFFFFFFFFFFFLL) == 1 && (void)v63)
      {
        unint64_t v50 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v63);
        unsigned int v56 = 2071181815;
LABEL_143:
        uint64_t v51 = v56 | 0x1030C4000000000;
LABEL_144:
        MEMORY[0x22A614FA0](v50, v51);
      }
      break;
    default:
      break;
  }
LABEL_70:
  uint64_t v34 = *((void *)this + 8);
  uint64_t v35 = *((void *)this + 9);
  int v36 = v62;
  if (v34 == v35 || !v62) {
    return v36 != 0;
  }
  if (*((unsigned char *)a6 + 12) != 2) {
    goto LABEL_91;
  }
  char v37 = *(atomic_ullong **)a6;
  if (*(char *)(*(void *)a6 + 31) < 0)
  {
    std::vector<std::string>::pointer v38 = (const char *)v37[1];
    size_t v39 = v37[2];
  }
  else
  {
    std::vector<std::string>::pointer v38 = (const char *)(v37 + 1);
    size_t v39 = *(unsigned __int8 *)(*(void *)a6 + 31);
  }
  while (*(char *)(v34 + 23) < 0)
  {
    if (*(void *)(v34 + 8) == v39)
    {
      unint64_t v40 = *(const char **)v34;
      goto LABEL_81;
    }
LABEL_82:
    v34 += 24;
    if (v34 == v35) {
      return v36 != 0;
    }
  }
  unint64_t v40 = (const char *)v34;
  if (v39 != *(unsigned __int8 *)(v34 + 23)) {
    goto LABEL_82;
  }
LABEL_81:
  if (strncmp(v38, v40, v39)) {
    goto LABEL_82;
  }
  if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v41 = *(void *)a6;
    if (*(void *)a6)
    {
      if (*(char *)(v41 + 31) < 0) {
        operator delete(*(void **)(v41 + 8));
      }
      MEMORY[0x22A614FA0](v41, 0x1012C404EF22A49);
    }
    *(void *)a6 = 0;
  }
  *(void *)a6 = 0;
  *((_DWORD *)a6 + 2) = 0;
  *((unsigned char *)a6 + 12) = 7;
LABEL_91:
  int v36 = 1;
  return v36 != 0;
}

void sub_224078E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, int a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  MEMORY[0x22A614FA0](v24, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

uint64_t **std::tuple<turi::flexible_type &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1 != a2)
  {
    switch(*((unsigned char *)v4 + 12))
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v5 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          if (*((char *)v5 + 31) < 0) {
            operator delete((void *)v5[1]);
          }
          atomic_ullong *volatile v6 = v5;
          uint64_t v7 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v8 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          size_t v9 = (void *)v8[1];
          if (v9)
          {
            void v8[2] = (atomic_ullong)v9;
            operator delete(v9);
          }
          atomic_ullong *volatile v6 = v8;
          uint64_t v7 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          size_t v19 = (void **)(v10 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v19);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          size_t v19 = (void **)(v10 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v19);
LABEL_19:
          atomic_ullong *volatile v6 = v10;
          uint64_t v7 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v11 + 2);
          atomic_ullong *volatile v6 = v11;
          unsigned int v12 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = (atomic_ullong *volatile)*v4;
          if (*v4)
          {
            uint64_t v14 = (void *)v13[6];
            if (v14)
            {
              v13[7] = (atomic_ullong)v14;
              operator delete(v14);
            }
            int v15 = (void *)v13[3];
            if (v15)
            {
              uint64_t v13[4] = (atomic_ullong)v15;
              operator delete(v15);
            }
            uint64_t v16 = (std::__shared_weak_count *)v13[2];
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            atomic_ullong *volatile v6 = v13;
            unsigned int v12 = 2071181815;
LABEL_32:
            uint64_t v7 = v12 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v6, v7);
          }
LABEL_34:
          *uint64_t v4 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v17 = *a2;
    *(uint64_t *)((char *)v4 + 5) = *(uint64_t *)((char *)a2 + 5);
    *uint64_t v4 = v17;
    *((unsigned char *)v4 + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
  }
  *(unsigned char *)a1[1] = *((unsigned char *)a2 + 16);
  return a1;
}

uint64_t turi::csv_line_tokenizer::get_last_parse_error_diagnosis(turi::csv_line_tokenizer *this)
{
  return (uint64_t)this + 208;
}

void turi::csv_line_tokenizer::init(turi::csv_line_tokenizer *this)
{
}

void sub_2240796CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x22A614FA0](v20, 0x1020C404B39E143);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::flexible_type_parser>::reset[abi:ne180100]<turi::flexible_type_parser,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<turi::flexible_type_parser>::shared_ptr[abi:ne180100]<turi::flexible_type_parser,void>(&v2, a2);
}

void turi::csv_line_tokenizer::tokenize_line(char const*,unsigned long,std::vector<std::string> &)::$_0::operator()(std::vector<std::string> **a1, unsigned __int8 *__src, size_t a3)
{
  size_t v25 = a3;
  uint64_t v26 = __src;
  if (!a3)
  {
    atomic_ullong *volatile v10 = *a1;
    std::vector<std::string>::pointer end = (*a1)->__end_;
    uint64_t p_end_cap = (std::allocator<std::string> *)&(*a1)->__end_cap_;
    unint64_t value = (unint64_t)(*a1)->__end_cap_.__value_;
    if ((unint64_t)end >= value)
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v10->__begin_) >> 3);
      unint64_t v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(value - (unint64_t)v10->__begin_) >> 3);
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v20;
      }
      __v.__end_cap_.__value_ = p_end_cap;
      if (v22) {
        uint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)p_end_cap, v22);
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v23 + v19;
      __v.__first_ = v23;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v23[v22];
      v24->__r_.__value_.__r.__words[0] = 0;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      __v.__end_ = v24 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(v10, &__v);
      uint64_t v14 = v10->__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      end->__r_.__value_.__r.__words[0] = 0;
      end->__r_.__value_.__l.__size_ = 0;
      end->__r_.__value_.__r.__words[2] = 0;
      uint64_t v14 = end + 1;
      v10->__end_ = end + 1;
    }
    v10->__end_ = v14;
    return;
  }
  size_t v4 = a3;
  atomic_ullong *volatile v5 = __src;
  atomic_ullong *volatile v6 = a1[1];
  uint64_t v7 = MEMORY[0x263EF8318];
  while (1)
  {
    unsigned int v8 = (char)v5[v4 - 1];
    if ((v8 & 0x80000000) != 0) {
      break;
    }
    if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000) == 0) {
      goto LABEL_11;
    }
LABEL_7:
    if (!--v4)
    {
      size_t v9 = 0;
      goto LABEL_12;
    }
  }
  if (__maskrune(v8, 0x4000uLL)) {
    goto LABEL_7;
  }
LABEL_11:
  size_t v9 = v4;
LABEL_12:
  size_t v25 = v4;
  int v15 = BYTE3(v6[2].__end_);
  if (*v5 == v15)
  {
    ++v5;
    size_t v25 = --v9;
    uint64_t v26 = v5;
  }
  if (v9 && v5[v9 - 1] == v15) {
    size_t v25 = --v9;
  }
  uint64_t v16 = (uint64_t *)*a1;
  unint64_t v17 = v16[1];
  if (v17 >= v16[2])
  {
    uint64_t v18 = std::vector<std::string>::__emplace_back_slow_path<char *&,unsigned long &>(v16, &v26, &v25);
  }
  else
  {
    std::string::basic_string[abi:ne180100]((void *)v16[1], v5, v9);
    uint64_t v18 = v17 + 24;
    v16[1] = v17 + 24;
  }
  v16[1] = v18;
}

void sub_224079968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__split_buffer<std::string> *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char *&,unsigned long &>(uint64_t *a1, void **a2, size_t *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v11) {
    unsigned int v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v9, v11);
  }
  else {
    unsigned int v12 = 0;
  }
  __v.__first_ = v12;
  __v.__begin_ = v12 + v5;
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = &v12[v11];
  std::string::basic_string[abi:ne180100](__v.__begin_->__r_.__value_.__r.__words, *a2, *a3);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_224079A84(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

BOOL turi::csv_line_tokenizer::tokenize_line(char *,unsigned long,std::vector<turi::flexible_type> &,BOOL,std::vector<unsigned long> const*)::$_0::operator()(unint64_t **a1, char *__src, size_t a3, char *a4, size_t a5)
{
  size_t v5 = a3;
  unint64_t v6 = __src;
  v75[2] = *MEMORY[0x263EF8340];
  int64_t v73 = __src;
  uint64_t v7 = (uint64_t *)a1[2];
  unsigned int v8 = *a1;
  unint64_t v9 = **a1;
  if (v9 < *a1[1])
  {
    uint64_t v13 = (void *)*a1[3];
    if (v13)
    {
      unint64_t v14 = *(void *)(*v13 + 8 * v9);
      if (v14 == -1)
      {
LABEL_120:
        *unsigned int v8 = v9 + 1;
        return 1;
      }
      if (a3) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v14 = **a1;
      if (a3)
      {
LABEL_5:
        int v15 = v73;
        uint64_t v16 = MEMORY[0x263EF8318];
        while (1)
        {
          unsigned int v17 = *v6;
          int v18 = (v17 & 0x80000000) != 0 ? __maskrune(v17, 0x4000uLL) : *(_DWORD *)(v16 + 4 * v17 + 60) & 0x4000;
          if (!v18 || v5 == 0) {
            break;
          }
          int v15 = ++v6;
          --v5;
        }
        int64_t v73 = v15;
        if (!turi::csv_line_tokenizer::parse_as((turi::csv_line_tokenizer *)v7, &v73, v5, a4, a5, (turi::flexible_type *)(*a1[4] + 16 * v14), 1))
        {
          std::string::basic_string[abi:ne180100](&__dst, v6, v5);
          uint64_t v24 = std::string::insert(&__dst, 0, "Unable to interpret \"");
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          uint64_t v26 = std::string::append(&__p, "\" as a ");
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v72.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          unint64_t v28 = *(char *)(*a1[4] + 16 * v14 + 12);
          if (v28 > 9) {
            uint64_t v29 = "undefined";
          }
          else {
            uint64_t v29 = off_2646D6E40[v28];
          }
          unint64_t v53 = std::string::append(&v72, v29);
          std::string::size_type v54 = v53->__r_.__value_.__r.__words[0];
          v75[0] = v53->__r_.__value_.__l.__size_;
          *(void *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7);
          char v55 = HIBYTE(v53->__r_.__value_.__r.__words[2]);
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if (*((char *)v7 + 255) < 0) {
            operator delete((void *)v7[29]);
          }
          uint64_t v56 = v75[0];
          v7[29] = v54;
          v7[30] = v56;
          *(uint64_t *)((char *)v7 + 247) = *(void *)((char *)v75 + 7);
          *((unsigned char *)v7 + 255) = v55;
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v72.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          uint64_t v42 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_65:
          operator delete(v42);
          return 0;
        }
        goto LABEL_119;
      }
    }
    uint64_t v30 = (uint64_t *)a1[5];
    uint64_t v31 = (void **)(*a1[4] + 16 * v14);
    int v32 = *((unsigned __int8 *)v31 + 12);
    if (*(unsigned char *)v30) {
      BOOL v33 = v32 == 2;
    }
    else {
      BOOL v33 = 1;
    }
    if (v33)
    {
      if (*(unsigned char *)v30) {
        BOOL v34 = v32 == 2;
      }
      else {
        BOOL v34 = 0;
      }
      if (!v34)
      {
        uint64_t v35 = 0;
        switch(*((unsigned char *)v31 + 12))
        {
          case 2:
            goto LABEL_73;
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            uint64_t v35 = 0x1900000000000000;
            goto LABEL_74;
          case 8:
            operator new();
          case 9:
            operator new();
          default:
LABEL_74:
            long long v58 = (uint64_t *)(*a1[4] + 16 * v14);
            switch(*((unsigned char *)v58 + 12))
            {
              case 2:
                if (atomic_fetch_add((atomic_ullong *volatile)*v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v59 = (atomic_ullong *volatile)*v58;
                  if (!*v58) {
                    goto LABEL_117;
                  }
                  if (*((char *)v59 + 31) < 0) {
                    operator delete((void *)v59[1]);
                  }
                  char v60 = v59;
                  uint64_t v61 = 0x1012C404EF22A49;
                  goto LABEL_116;
                }
                break;
              case 3:
                if (atomic_fetch_add((atomic_ullong *volatile)*v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v65 = (atomic_ullong *volatile)*v58;
                  if (!*v58) {
                    goto LABEL_117;
                  }
                  uint64_t v66 = (void *)v65[1];
                  if (v66)
                  {
                    v65[2] = (atomic_ullong)v66;
                    operator delete(v66);
                  }
                  char v60 = v65;
                  uint64_t v61 = 0x1080C409938AC02;
                  goto LABEL_116;
                }
                break;
              case 4:
                if (atomic_fetch_add((atomic_ullong *volatile)*v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v67 = (atomic_ullong *volatile)*v58;
                  if (!*v58) {
                    goto LABEL_117;
                  }
                  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)(v67 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
                  goto LABEL_108;
                }
                break;
              case 5:
                if (atomic_fetch_add((atomic_ullong *volatile)*v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v67 = (atomic_ullong *volatile)*v58;
                  if (!*v58) {
                    goto LABEL_117;
                  }
                  v72.__r_.__value_.__r.__words[0] = (std::string::size_type)(v67 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
LABEL_108:
                  char v60 = v67;
                  uint64_t v61 = 0x1020C405E66F15BLL;
                  goto LABEL_116;
                }
                break;
              case 8:
                if (atomic_fetch_add((atomic_ullong *volatile)*v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v68 = (atomic_ullong *volatile)*v58;
                  if (!*v58) {
                    goto LABEL_117;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v68 + 2);
                  char v60 = v68;
                  unsigned int v69 = -235920773;
                  goto LABEL_115;
                }
                break;
              case 9:
                if (atomic_fetch_add((atomic_ullong *volatile)*v58, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  if (*v58)
                  {
                    char v60 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)*v58);
                    unsigned int v69 = 2071181815;
LABEL_115:
                    uint64_t v61 = v69 | 0x1030C4000000000;
LABEL_116:
                    MEMORY[0x22A614FA0](v60, v61);
                  }
LABEL_117:
                  *long long v58 = 0;
                }
                break;
              default:
                break;
            }
            *long long v58 = v35;
            *((_DWORD *)v58 + 2) = 0;
            *((unsigned char *)v58 + 12) = v32;
            break;
        }
        goto LABEL_119;
      }
      if (!*((unsigned char *)v7 + 285)) {
LABEL_73:
      }
        operator new();
      if (atomic_fetch_add(*v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v57 = *v31;
        if (*v31)
        {
          if (*((char *)v57 + 31) < 0) {
            operator delete((void *)v57[1]);
          }
          uint64_t v51 = v57;
          uint64_t v52 = 0x1012C404EF22A49;
LABEL_94:
          MEMORY[0x22A614FA0](v51, v52);
        }
LABEL_95:
        *uint64_t v31 = 0;
      }
    }
    else
    {
      switch(*((unsigned char *)v31 + 12))
      {
        case 3:
          if (atomic_fetch_add(*v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v49 = *v31;
            if (!*v31) {
              goto LABEL_95;
            }
            unint64_t v50 = (void *)v49[1];
            if (v50)
            {
              void v49[2] = (atomic_ullong)v50;
              operator delete(v50);
            }
            uint64_t v51 = v49;
            uint64_t v52 = 0x1080C409938AC02;
            goto LABEL_94;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v62 = *v31;
            if (!*v31) {
              goto LABEL_95;
            }
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)(v62 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
            goto LABEL_86;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v62 = *v31;
            if (!*v31) {
              goto LABEL_95;
            }
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)(v62 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
LABEL_86:
            uint64_t v51 = v62;
            uint64_t v52 = 0x1020C405E66F15BLL;
            goto LABEL_94;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v63 = *v31;
            if (!*v31) {
              goto LABEL_95;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v63 + 2);
            uint64_t v51 = v63;
            unsigned int v64 = -235920773;
            goto LABEL_93;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v31, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            if (!*v31) {
              goto LABEL_95;
            }
            uint64_t v51 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*v31);
            unsigned int v64 = 2071181815;
LABEL_93:
            uint64_t v52 = v64 | 0x1030C4000000000;
            goto LABEL_94;
          }
          break;
        default:
          break;
      }
    }
    *uint64_t v31 = 0;
    *((_DWORD *)v31 + 2) = 0;
    *((unsigned char *)v31 + 12) = 7;
LABEL_119:
    unsigned int v8 = *a1;
    unint64_t v9 = **a1;
    goto LABEL_120;
  }
  if (!*((unsigned char *)v7 + 281))
  {
    std::string::basic_string[abi:ne180100](&__p, __src, a3);
    int v36 = std::string::insert(&__p, 0, "Unexpected characters after last column. \"");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    std::vector<std::string>::pointer v38 = std::string::append(&v72, "\"");
    std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
    char v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)v7 + 255) < 0) {
      operator delete((void *)v7[29]);
    }
    std::string::size_type v41 = __dst.__r_.__value_.__r.__words[0];
    v7[29] = v39;
    v7[30] = v41;
    *(uint64_t *)((char *)v7 + 247) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
    *((unsigned char *)v7 + 255) = v40;
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v42 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_65;
  }
  if (!a3) {
    return 1;
  }
  BOOL v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = MEMORY[0x263EF8318];
  while (1)
  {
    unsigned int v23 = v6[v21];
    if ((v23 & 0x80000000) != 0) {
      break;
    }
    if ((*(_DWORD *)(v22 + 4 * v23 + 60) & 0x4000) == 0) {
      goto LABEL_44;
    }
LABEL_21:
    BOOL v20 = ++v21 >= v5;
    if (v5 == v21) {
      return 1;
    }
  }
  if (__maskrune(v23, 0x4000uLL)) {
    goto LABEL_21;
  }
LABEL_44:
  std::string::basic_string[abi:ne180100](&__p, v6, v5);
  long long v43 = std::string::insert(&__p, 0, "Unexpected characters after last column. \"");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  unint64_t v45 = std::string::append(&v72, "\"");
  std::string::size_type v46 = v45->__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
  char v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
  v45->__r_.__value_.__l.__size_ = 0;
  v45->__r_.__value_.__r.__words[2] = 0;
  v45->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)v7 + 255) < 0) {
    operator delete((void *)v7[29]);
  }
  std::string::size_type v48 = __dst.__r_.__value_.__r.__words[0];
  v7[29] = v46;
  v7[30] = v48;
  *(uint64_t *)((char *)v7 + 247) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7);
  *((unsigned char *)v7 + 255) = v47;
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_22407A370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a2)
  {
    MEMORY[0x22A614FA0](v28, 0x1030C407B73B9F7);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    size_t v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_22407A4F0(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<turi::flexible_type_parser>::shared_ptr[abi:ne180100]<turi::flexible_type_parser,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22407A574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<turi::flexible_type_parser>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<turi::flexible_type_parser *,std::shared_ptr<turi::flexible_type_parser>::__shared_ptr_default_delete<turi::flexible_type_parser,turi::flexible_type_parser>,std::allocator<turi::flexible_type_parser>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<turi::flexible_type_parser *,std::shared_ptr<turi::flexible_type_parser>::__shared_ptr_default_delete<turi::flexible_type_parser,turi::flexible_type_parser>,std::allocator<turi::flexible_type_parser>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<turi::flexible_type_parser>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    JUMPOUT(0x22A614FA0);
  }
}

void *turi::csv_writer::write_verbatim(uint64_t a1, void *a2, void *a3)
{
  void v8[2] = *MEMORY[0x263EF8340];
  if (a3[1] != *a3) {
    turi::flexible_type::flexible_type<std::string>((uint64_t)v8);
  }
  int v4 = *(char *)(a1 + 55);
  if (v4 >= 0) {
    uint64_t v5 = a1 + 32;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 40);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v5, v6);
}

void sub_22407A934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_ullong *volatile a10, int a11, char a12)
{
  switch(a12)
  {
    case 2:
      turi::gl_sarray::clip(&a10);
      break;
    case 3:
      turi::gl_sarray::clip(&a10);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    case 8:
      turi::gl_sarray::clip(&a10);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void turi::csv_writer::csv_print(uint64_t a1, void *a2, turi::flexible_type_impl *this, char a4)
{
  switch(*((unsigned char *)this + 12))
  {
    case 0:
    case 1:
      if (*(_DWORD *)(a1 + 60) == 1)
      {
        v51[0].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 27);
        uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v51, 1);
        switch(*((unsigned char *)this + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_92;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_92:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v51);
            break;
          case 2:
            uint64_t v37 = *(void *)this;
            if (*(char *)(*(void *)this + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v37 + 8), *(void *)(v37 + 16));
            }
            else
            {
              long long v38 = *(_OWORD *)(v37 + 8);
              __p.__r_.__value_.__r.__words[2] = *(void *)(v37 + 24);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v38;
            }
            break;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (uint64_t *)(*(void *)this + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(this, &__p);
            break;
          case 7:
            memset(&__p, 0, sizeof(__p));
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        goto LABEL_172;
      }
      if (*((unsigned char *)this + 12) == 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
        std::ostream::operator<<();
        std::stringbuf::str();
      }
      else
      {
        if (*((unsigned char *)this + 12)) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
        std::ostream::operator<<();
        std::stringbuf::str();
      }
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v32 = &__p;
      }
      else {
        int v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v32, v33);
      goto LABEL_173;
    case 2:
      int v9 = *(_DWORD *)(a1 + 60);
      uint64_t v10 = *(void *)this;
      uint64_t v11 = *(void *)this + 8;
      if (v9 == 1)
      {
        std::string::value_type v12 = *(unsigned char *)(a1 + 24);
        char v13 = *(unsigned char *)(a1 + 25);
        int v14 = *(char *)(a1 + 27);
        int v15 = (std::string *)(a1 + 144);
        uint64_t v16 = (void *)(a1 + 168);
        int v17 = *(unsigned __int8 *)(a1 + 26);
        goto LABEL_13;
      }
      if (*(char *)(v10 + 31) < 0)
      {
        long long v25 = *(unsigned __int8 **)(v10 + 8);
        uint64_t v26 = *(void *)(v10 + 16);
        if (v26) {
          goto LABEL_35;
        }
      }
      else
      {
        long long v25 = (unsigned __int8 *)(*(void *)this + 8);
        uint64_t v26 = *(unsigned __int8 *)(v10 + 31);
        if (*(unsigned char *)(v10 + 31))
        {
LABEL_35:
          LOBYTE(v27) = 0;
          LOBYTE(v28) = 0;
          while (1)
          {
            int v29 = *v25;
            if ((v27 & 1) != 0
              || (v29 - 8) < 6 && ((0x27u >> (v29 - 8)) & 1) != 0
              || v29 == *(unsigned __int8 *)(a1 + 24))
            {
LABEL_52:
              LODWORD(v27) = 1;
LABEL_53:
              if (v28) {
                goto LABEL_54;
              }
              goto LABEL_56;
            }
            if (*(char *)(a1 + 55) < 0)
            {
              if (!*(void *)(a1 + 40)) {
                goto LABEL_46;
              }
              uint64_t v30 = *(unsigned __int8 **)(a1 + 32);
            }
            else
            {
              uint64_t v30 = (unsigned __int8 *)(a1 + 32);
              if (!*(unsigned char *)(a1 + 55)) {
                goto LABEL_46;
              }
            }
            if (v29 == *v30) {
              goto LABEL_52;
            }
LABEL_46:
            if (*(char *)(a1 + 23) < 0)
            {
              uint64_t v27 = *(void *)(a1 + 8);
              if (!v27) {
                goto LABEL_53;
              }
              uint64_t v31 = *(unsigned __int8 **)a1;
            }
            else
            {
              uint64_t v31 = (unsigned __int8 *)a1;
              if (!*(unsigned char *)(a1 + 23)) {
                goto LABEL_55;
              }
            }
            if (v29 == *v31) {
              goto LABEL_52;
            }
LABEL_55:
            LODWORD(v27) = 0;
            if (v28)
            {
LABEL_54:
              BOOL v28 = 1;
              goto LABEL_57;
            }
LABEL_56:
            BOOL v28 = v29 == *(unsigned __int8 *)(a1 + 27);
LABEL_57:
            if ((v27 & v28) == 1)
            {
              BOOL v28 = 1;
              LODWORD(v27) = 1;
              if ((a4 & 1) == 0) {
                goto LABEL_89;
              }
LABEL_115:
              if (((v28 | v27) & 1) == 0) {
                goto LABEL_119;
              }
              if (((v27 | !v28) & 1) == 0 && *(unsigned char *)(a1 + 26))
              {
                std::string::value_type v12 = *(unsigned char *)(a1 + 24);
                int v14 = *(char *)(a1 + 27);
                int v15 = (std::string *)(a1 + 144);
                uint64_t v16 = (void *)(a1 + 168);
                int v18 = (uint64_t *)(*(void *)this + 8);
                char v13 = 0;
                int v19 = 0;
                int v17 = 1;
                goto LABEL_14;
              }
              int v41 = *(unsigned __int8 *)(a1 + 25);
              char v42 = *(unsigned char *)(a1 + 27);
              int v15 = (std::string *)(a1 + 144);
              uint64_t v16 = (void *)(a1 + 168);
              int v43 = *(unsigned __int8 *)(a1 + 26);
              if (v9 == 3)
              {
                int v17 = v43 != 0;
                char v13 = v41 != 0;
                std::string::value_type v12 = *(unsigned char *)(a1 + 24);
                int v14 = v42;
                int v18 = (uint64_t *)v11;
                int v19 = 0;
LABEL_14:
                turi::escape_string(v18, v12, v13, v14, v19, v17, v15, v16);
LABEL_119:
                std::ostream::write();
                return;
              }
              int v17 = v43 != 0;
              char v13 = v41 != 0;
              std::string::value_type v12 = *(unsigned char *)(a1 + 24);
              int v14 = v42;
LABEL_13:
              int v18 = (uint64_t *)v11;
              int v19 = 1;
              goto LABEL_14;
            }
            ++v25;
            if (!--v26) {
              goto LABEL_86;
            }
          }
        }
      }
      BOOL v28 = 0;
      LODWORD(v27) = 0;
LABEL_86:
      if (a4) {
        goto LABEL_115;
      }
LABEL_89:
      if ((*(unsigned char *)(v10 + 31) & 0x80) != 0) {
        uint64_t v36 = *(void *)(v10 + 16);
      }
      else {
        uint64_t v36 = *(unsigned __int8 *)(v10 + 31);
      }
      if (v36) {
        goto LABEL_115;
      }
      v51[0].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 27);
      uint64_t v22 = v51;
      BOOL v20 = a2;
      uint64_t v23 = 1;
LABEL_22:
      uint64_t v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
      v51[0].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v51, 1);
      return;
    case 3:
    case 6:
      if (*(_DWORD *)(a1 + 60) == 3)
      {
        switch(*((unsigned char *)this + 12))
        {
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)this + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(void *)this + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)this + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(this, v51);
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if ((v51[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v34 = v51;
        }
        else {
          BOOL v34 = (std::string *)v51[0].__r_.__value_.__r.__words[0];
        }
        if ((v51[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(v51[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = v51[0].__r_.__value_.__l.__size_;
        }
        goto LABEL_137;
      }
      v51[0].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 27);
      uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v51, 1);
      switch(*((unsigned char *)this + 12))
      {
        case 0:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
          std::ostream::operator<<();
          std::stringbuf::str();
          goto LABEL_103;
        case 1:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
          std::ostream::operator<<();
          std::stringbuf::str();
LABEL_103:
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v51);
          break;
        case 2:
          uint64_t v39 = *(void *)this;
          if (*(char *)(*(void *)this + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v39 + 8), *(void *)(v39 + 16));
          }
          else
          {
            long long v40 = *(_OWORD *)(v39 + 8);
            __p.__r_.__value_.__r.__words[2] = *(void *)(v39 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
          }
          break;
        case 3:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
          break;
        case 4:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (uint64_t *)(*(void *)this + 8));
          break;
        case 5:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
          break;
        case 6:
          turi::flexible_type_impl::get_string_visitor::operator()(this, &__p);
          break;
        case 7:
          memset(&__p, 0, sizeof(__p));
          break;
        case 8:
          turi::flexible_type_impl::get_string_visitor::operator()();
          break;
        case 9:
          turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      goto LABEL_172;
    case 4:
    case 5:
      int v8 = *(char *)(a1 + 111);
      if (*(_DWORD *)(a1 + 60) == 3)
      {
        if (v8 < 0)
        {
          **(unsigned char **)(a1 + 88) = 0;
          *(void *)(a1 + 96) = 0;
        }
        else
        {
          *(unsigned char *)(a1 + 88) = 0;
          *(unsigned char *)(a1 + 111) = 0;
        }
        turi::csv_writer::csv_print_internal(a1, (std::string *)(a1 + 88), (unsigned __int8 *)this);
      }
      else
      {
        if (v8 < 0)
        {
          **(unsigned char **)(a1 + 88) = 0;
          *(void *)(a1 + 96) = 0;
        }
        else
        {
          *(unsigned char *)(a1 + 88) = 0;
          *(unsigned char *)(a1 + 111) = 0;
        }
        turi::csv_writer::csv_print_internal(a1, (std::string *)(a1 + 88), (unsigned __int8 *)this);
        turi::escape_string((uint64_t *)(a1 + 88), *(unsigned char *)(a1 + 24), *(unsigned char *)(a1 + 25), *(char *)(a1 + 27), 1, *(unsigned __int8 *)(a1 + 26), (std::string *)(a1 + 112), (void *)(a1 + 136));
      }
      goto LABEL_119;
    case 7:
      if (*(_DWORD *)(a1 + 60) != 1) {
        goto LABEL_119;
      }
      v51[0].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 27);
      BOOL v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v51, 1);
      int v21 = *(char *)(a1 + 87);
      if (v21 >= 0) {
        uint64_t v22 = (std::string *)(a1 + 64);
      }
      else {
        uint64_t v22 = *(std::string **)(a1 + 64);
      }
      if (v21 >= 0) {
        uint64_t v23 = *(unsigned __int8 *)(a1 + 87);
      }
      else {
        uint64_t v23 = *(void *)(a1 + 72);
      }
      goto LABEL_22;
    default:
      if (*(_DWORD *)(a1 + 60) == 3)
      {
        switch(*((unsigned char *)this + 12))
        {
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)this + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (uint64_t *)(*(void *)this + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)this + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(this, v51);
            break;
          case 7:
            memset(v51, 0, 24);
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)&__p, (void *)(*(void *)this + 8));
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if ((v51[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v34 = v51;
        }
        else {
          BOOL v34 = (std::string *)v51[0].__r_.__value_.__r.__words[0];
        }
        if ((v51[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(v51[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = v51[0].__r_.__value_.__l.__size_;
        }
LABEL_137:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v34, v35);
        if (SHIBYTE(v51[0].__r_.__value_.__r.__words[2]) < 0)
        {
          long long v44 = (void *)v51[0].__r_.__value_.__r.__words[0];
LABEL_175:
          operator delete(v44);
        }
      }
      else
      {
        v51[0].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 27);
        uint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v51, 1);
        switch(*((unsigned char *)this + 12))
        {
          case 0:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
            std::ostream::operator<<();
            std::stringbuf::str();
            goto LABEL_141;
          case 1:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v51);
            std::ostream::operator<<();
            std::stringbuf::str();
LABEL_141:
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v51);
            break;
          case 2:
            uint64_t v45 = *(void *)this;
            if (*(char *)(*(void *)this + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v45 + 8), *(void *)(v45 + 16));
            }
            else
            {
              long long v46 = *(_OWORD *)(v45 + 8);
              __p.__r_.__value_.__r.__words[2] = *(void *)(v45 + 24);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
            }
            break;
          case 3:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
            break;
          case 4:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (uint64_t *)(*(void *)this + 8));
            break;
          case 5:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
            break;
          case 6:
            turi::flexible_type_impl::get_string_visitor::operator()(this, &__p);
            break;
          case 7:
            memset(&__p, 0, sizeof(__p));
            break;
          case 8:
            turi::flexible_type_impl::get_string_visitor::operator()();
            break;
          case 9:
            turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v51, (void *)(*(void *)this + 8));
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
LABEL_172:
        atomic_ullong *volatile v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)p_p, size);
        v51[0].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a1 + 27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v51, 1);
LABEL_173:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v44 = (void *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_175;
        }
      }
      return;
  }
}

void sub_22407B5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void turi::csv_writer::csv_print_internal(uint64_t a1, std::string *a2, unsigned __int8 *a3)
{
  v48[19] = *MEMORY[0x263EF8340];
  int v5 = a3[12];
  switch(a3[12])
  {
    case 0u:
    case 1u:
      if (v5 == 1)
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__dst);
        std::ostream::operator<<();
        std::stringbuf::str();
      }
      else
      {
        if (a3[12]) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__dst);
        std::ostream::operator<<();
        std::stringbuf::str();
      }
      __dst.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B8];
      std::string::size_type v36 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                                + *(void *)(__dst.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      __dst.__r_.__value_.__r.__words[2] = v36;
      uint64_t v45 = MEMORY[0x263F8C318] + 16;
      if (v47 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](v48);
      if ((v43 & 0x80u) == 0) {
        uint64_t v37 = (const std::string::value_type *)v42;
      }
      else {
        uint64_t v37 = (const std::string::value_type *)v42[0];
      }
      if ((v43 & 0x80u) == 0) {
        std::string::size_type v38 = v43;
      }
      else {
        std::string::size_type v38 = (std::string::size_type)v42[1];
      }
      std::string::append(a2, v37, v38);
      if ((char)v43 < 0)
      {
        uint64_t v39 = v42[0];
        goto LABEL_97;
      }
      return;
    case 2u:
      uint64_t v23 = (void *)(a1 + 144);
      turi::escape_string((uint64_t *)(*(void *)a3 + 8), *(unsigned char *)(a1 + 24), *(unsigned char *)(a1 + 25), *(char *)(a1 + 27), 1, 0, (std::string *)(a1 + 144), (void *)(a1 + 168));
      if (*(char *)(a1 + 167) < 0) {
        uint64_t v23 = (void *)*v23;
      }
      std::string::basic_string[abi:ne180100](&__dst, v23, *(void *)(a1 + 168));
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      goto LABEL_51;
    case 3u:
      std::string::push_back(a2, 91);
      uint64_t v7 = *(void *)(*(void *)a3 + 8);
      if (*(void *)(*(void *)a3 + 16) != v7)
      {
        uint64_t v8 = 0;
        unint64_t v9 = 0;
        do
        {
          turi::flexible_type::flexible_type<double>((uint64_t)&__dst, (void *)(v7 + v8));
          turi::csv_writer::csv_print_internal(a1, a2, &__dst);
          switch(__dst.__r_.__value_.__s.__data_[12])
          {
            case 2:
              if (atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v10 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  if (*(char *)(__dst.__r_.__value_.__r.__words[0] + 31) < 0) {
                    operator delete(*(void **)(__dst.__r_.__value_.__r.__words[0] + 8));
                  }
                  uint64_t v11 = (void *)v10;
                  uint64_t v12 = 0x1012C404EF22A49;
                  goto LABEL_38;
                }
              }
              break;
            case 3:
              if (atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v19 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  BOOL v20 = *(void **)(__dst.__r_.__value_.__r.__words[0] + 8);
                  if (v20)
                  {
                    *(void *)(__dst.__r_.__value_.__r.__words[0] + 16) = v20;
                    operator delete(v20);
                  }
                  uint64_t v11 = (void *)v19;
                  uint64_t v12 = 0x1080C409938AC02;
                  goto LABEL_38;
                }
              }
              break;
            case 4:
              if (atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v13 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  v42[0] = (void **)(__dst.__r_.__value_.__r.__words[0] + 8);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v42);
                  goto LABEL_33;
                }
              }
              break;
            case 5:
              if (atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v13 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  v42[0] = (void **)(__dst.__r_.__value_.__r.__words[0] + 8);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v42);
LABEL_33:
                  uint64_t v11 = (void *)v13;
                  uint64_t v12 = 0x1020C405E66F15BLL;
                  goto LABEL_38;
                }
              }
              break;
            case 8:
              if (atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                std::string::size_type v21 = __dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  boost::detail::shared_count::~shared_count((atomic_uint **)(__dst.__r_.__value_.__r.__words[0] + 16));
                  uint64_t v11 = (void *)v21;
                  unsigned int v18 = -235920773;
                  goto LABEL_37;
                }
              }
              break;
            case 9:
              if (atomic_fetch_add((atomic_ullong *volatile)__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFFFFFFFFFLL) == 1)
              {
                int v14 = (void *)__dst.__r_.__value_.__r.__words[0];
                if (__dst.__r_.__value_.__r.__words[0])
                {
                  int v15 = *(void **)(__dst.__r_.__value_.__r.__words[0] + 48);
                  if (v15)
                  {
                    *(void *)(__dst.__r_.__value_.__r.__words[0] + 56) = v15;
                    operator delete(v15);
                  }
                  uint64_t v16 = (void *)v14[3];
                  if (v16)
                  {
                    void v14[4] = v16;
                    operator delete(v16);
                  }
                  int v17 = (std::__shared_weak_count *)v14[2];
                  if (v17) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                  }
                  uint64_t v11 = v14;
                  unsigned int v18 = 2071181815;
LABEL_37:
                  uint64_t v12 = v18 | 0x1030C4000000000;
LABEL_38:
                  MEMORY[0x22A614FA0](v11, v12);
                }
              }
              break;
            default:
              break;
          }
          ++v9;
          uint64_t v7 = *(void *)(*(void *)a3 + 8);
          uint64_t v22 = *(void *)(*(void *)a3 + 16) - v7;
          if (v9 < v22 >> 3)
          {
            std::string::push_back(a2, 44);
            uint64_t v7 = *(void *)(*(void *)a3 + 8);
            uint64_t v22 = *(void *)(*(void *)a3 + 16) - v7;
          }
          v8 += 8;
        }
        while (v9 < v22 >> 3);
      }
      std::string::push_back(a2, 93);
      return;
    case 4u:
      std::string::push_back(a2, 91);
      uint64_t v26 = *(void *)(*(void *)a3 + 8);
      if (*(void *)(*(void *)a3 + 16) != v26)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        do
        {
          turi::csv_writer::csv_print_internal(a1, a2, v26 + v27);
          ++v28;
          uint64_t v26 = *(void *)(*(void *)a3 + 8);
          uint64_t v29 = *(void *)(*(void *)a3 + 16) - v26;
          if (v28 < v29 >> 4)
          {
            std::string::push_back(a2, 44);
            uint64_t v26 = *(void *)(*(void *)a3 + 8);
            uint64_t v29 = *(void *)(*(void *)a3 + 16) - v26;
          }
          v27 += 16;
        }
        while (v28 < v29 >> 4);
      }
      uint64_t v30 = a2;
      std::string::value_type v31 = 93;
      goto LABEL_70;
    case 5u:
      std::string::push_back(a2, 123);
      uint64_t v32 = *(void *)(*(void *)a3 + 8);
      if (*(void *)(*(void *)a3 + 16) != v32)
      {
        uint64_t v33 = 0;
        unint64_t v34 = 0;
        do
        {
          turi::csv_writer::csv_print_internal(a1, a2, v32 + v33);
          std::string::push_back(a2, 58);
          turi::csv_writer::csv_print_internal(a1, a2, *(void *)(*(void *)a3 + 8) + v33 + 16);
          ++v34;
          uint64_t v32 = *(void *)(*(void *)a3 + 8);
          uint64_t v35 = *(void *)(*(void *)a3 + 16) - v32;
          if (v34 < v35 >> 5)
          {
            std::string::push_back(a2, 44);
            uint64_t v32 = *(void *)(*(void *)a3 + 8);
            uint64_t v35 = *(void *)(*(void *)a3 + 16) - v32;
          }
          v33 += 32;
        }
        while (v34 < v35 >> 5);
      }
      uint64_t v30 = a2;
      std::string::value_type v31 = 125;
LABEL_70:
      std::string::push_back(v30, v31);
      return;
    case 6u:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)a3, &__dst);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
LABEL_51:
      std::string::append(a2, (const std::string::value_type *)p_dst, size);
      goto LABEL_95;
    case 7u:
      return;
    default:
      if (v5 == 8)
      {
        turi::flexible_type_impl::get_string_visitor::operator()();
      }
      else
      {
        if (v5 != 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v42, (void *)(*(void *)a3 + 8));
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v40 = &__dst;
      }
      else {
        long long v40 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v41 = __dst.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v40, v41);
LABEL_95:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v39 = (void **)__dst.__r_.__value_.__r.__words[0];
LABEL_97:
        operator delete(v39);
      }
      return;
  }
}

void sub_22407BE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, int a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *turi::csv_writer::write(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1] - *a3;
  if (v6)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      turi::csv_writer::csv_print(a1, a2, (turi::flexible_type_impl *)(v5 + v8), (unint64_t)v6 > 0x10);
      ++v9;
      uint64_t v5 = *a3;
      uint64_t v6 = a3[1] - *a3;
      if (v9 < v6 >> 4)
      {
        int v10 = *(char *)(a1 + 23);
        if (v10 >= 0) {
          uint64_t v11 = a1;
        }
        else {
          uint64_t v11 = *(void *)a1;
        }
        if (v10 >= 0) {
          uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          uint64_t v12 = *(void *)(a1 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v11, v12);
        uint64_t v5 = *a3;
        uint64_t v6 = a3[1] - *a3;
      }
      v8 += 16;
    }
    while (v9 < v6 >> 4);
  }
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v14 = a1 + 32;
  uint64_t v13 = v15;
  int v16 = *(char *)(v14 + 23);
  if (v16 >= 0) {
    uint64_t v17 = v14;
  }
  else {
    uint64_t v17 = v13;
  }
  if (v16 >= 0) {
    uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v18 = *(void *)(v14 + 8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v17, v18);
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<turi::flexible_type>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<turi::flexible_type>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<turi::flexible_type>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_22407C15C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<turi::flexible_type>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t boost::detail::lcast_put_unsigned<std::char_traits<char>,unsigned long,char>::convert(uint64_t a1)
{
  MEMORY[0x22A614D20](&v28);
  long long v2 = std::locale::classic();
  if (std::locale::operator==(&v28, v2))
  {
    unint64_t v3 = *(void *)a1;
    do
    {
      uint64_t v4 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v4 - 1;
      *(unsigned char *)(v4 - 1) = *(_DWORD *)(a1 + 20)
                         + v3
                         - 10 * (((v3 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
      unint64_t v5 = *(void *)a1;
      unint64_t v3 = *(void *)a1 / 0xAuLL;
      *(void *)a1 = v3;
    }
    while (v5 > 9);
    uint64_t v6 = *(void *)(a1 + 8);
    goto LABEL_28;
  }
  uint64_t v7 = std::locale::use_facet(&v28, MEMORY[0x263F8C150]);
  ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
  if ((char)v27 < 0)
  {
    unint64_t v8 = v26;
    if (!v26) {
      goto LABEL_24;
    }
    p_p = (char *)__p;
  }
  else
  {
    unint64_t v8 = v27;
    if (!v27) {
      goto LABEL_24;
    }
    p_p = (char *)&__p;
  }
  if (*p_p > 0)
  {
    char v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
    uint64_t v11 = 0;
    uint64_t v12 = __p;
    if ((v27 & 0x80u) == 0) {
      uint64_t v12 = &__p;
    }
    uint64_t v13 = (uint64_t *)(a1 + 8);
    LOBYTE(v14) = *v12;
    char v15 = *v12;
    do
    {
      if (!v15)
      {
        if (++v11 < v8)
        {
          int v16 = (v27 & 0x80u) == 0 ? &__p : (void **)__p;
          int v14 = *((char *)v16 + v11);
          if (v14 < 1) {
            LOBYTE(v14) = 127;
          }
        }
        uint64_t v17 = (unsigned char *)(*v13 - 1);
        *uint64_t v13 = (uint64_t)v17;
        *uint64_t v17 = v10;
        char v15 = v14;
      }
      --v15;
      unint64_t v19 = *(void *)a1;
      uint64_t v18 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v18 - 1;
      *(unsigned char *)(v18 - 1) = *(_DWORD *)(a1 + 20)
                          + v19
                          - 10 * (((v19 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
      unint64_t v20 = *(void *)a1;
      *(void *)a1 /= 0xAuLL;
    }
    while (v20 > 9);
    goto LABEL_26;
  }
LABEL_24:
  uint64_t v13 = (uint64_t *)(a1 + 8);
  unint64_t v21 = *(void *)a1;
  do
  {
    uint64_t v22 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v22 - 1;
    *(unsigned char *)(v22 - 1) = *(_DWORD *)(a1 + 20)
                        + v21
                        - 10 * (((v21 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
    unint64_t v23 = *(void *)a1;
    unint64_t v21 = *(void *)a1 / 0xAuLL;
    *(void *)a1 = v21;
  }
  while (v23 > 9);
LABEL_26:
  uint64_t v6 = *v13;
  if ((char)v27 < 0) {
    operator delete(__p);
  }
LABEL_28:
  std::locale::~locale(&v28);
  return v6;
}

void sub_22407C3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

void turi::get_builtin_group_aggregator(std::string *a1@<X0>, void *a2@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  int v4 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if (size != 16
      || (*(void *)a1->__r_.__value_.__l.__data_ == 0x69746C6975625F5FLL
        ? (BOOL v8 = *(void *)(a1->__r_.__value_.__r.__words[0] + 8) == 0x5F5F6D75735F5F6ELL)
        : (BOOL v8 = 0),
          !v8))
    {
      if (size == 24)
      {
        if (*(void *)a1->__r_.__value_.__l.__data_ == 0x69746C6975625F5FLL
          && *(void *)(a1->__r_.__value_.__r.__words[0] + 8) == 0x6F746365765F5F6ELL
          && *(void *)(a1->__r_.__value_.__r.__words[0] + 16) == 0x5F5F6D75735F5F72)
        {
          goto LABEL_83;
        }
        std::string::size_type size = a1->__r_.__value_.__l.__size_;
      }
      if (size == 16)
      {
        if (*(void *)a1->__r_.__value_.__l.__data_ == 0x69746C6975625F5FLL
          && *(void *)(a1->__r_.__value_.__r.__words[0] + 8) == 0x5F5F78616D5F5F6ELL)
        {
          goto LABEL_86;
        }
        std::string::size_type size = a1->__r_.__value_.__l.__size_;
        if (size == 16)
        {
          if (*(void *)a1->__r_.__value_.__l.__data_ == 0x69746C6975625F5FLL
            && *(void *)(a1->__r_.__value_.__r.__words[0] + 8) == 0x5F5F6E696D5F5F6ELL)
          {
            goto LABEL_92;
          }
          if ((v4 & 0x80) == 0) {
            goto LABEL_77;
          }
        }
      }
      if (size != 19) {
        goto LABEL_77;
      }
      if (*(void *)a1->__r_.__value_.__l.__data_ != 0x69746C6975625F5FLL
        || *(void *)(a1->__r_.__value_.__r.__words[0] + 8) != 0x696D6772615F5F6ELL
        || *(void *)(a1->__r_.__value_.__r.__words[0] + 11) != 0x5F5F6E696D677261)
      {
        if (a1->__r_.__value_.__l.__size_ != 19) {
          goto LABEL_77;
        }
        char v15 = (std::string::__raw *)a1->__r_.__value_.__r.__words[0];
        goto LABEL_56;
      }
LABEL_85:
      unint64_t v26 = operator new(0x40uLL);
      v26[1] = 0;
      v26[2] = 0;
      void *v26 = &unk_26D76B020;
      unsigned __int8 v27 = v26 + 3;
      v26[6] = 0;
      v26[7] = 0;
      v26[3] = &unk_26D76B070;
      v26[4] = 0;
      v26[5] = 0;
      *((unsigned char *)v26 + 56) = 0;
LABEL_95:
      *a2 = v27;
      a2[1] = v26;
      return;
    }
LABEL_84:
    unint64_t v26 = operator new(0x30uLL);
    v26[1] = 0;
    v26[2] = 0;
    void *v26 = &unk_26D76AC50;
    unsigned __int8 v27 = v26 + 3;
    std::locale v28 = &unk_26D76ACA0;
    goto LABEL_93;
  }
  if (v4 == 16)
  {
    if (a1->__r_.__value_.__r.__words[0] != 0x69746C6975625F5FLL
      || a1->__r_.__value_.__l.__size_ != 0x5F5F6D75735F5F6ELL)
    {
      if (a1->__r_.__value_.__r.__words[0] != 0x69746C6975625F5FLL
        || a1->__r_.__value_.__l.__size_ != 0x5F5F78616D5F5F6ELL)
      {
        if (a1->__r_.__value_.__r.__words[0] != 0x69746C6975625F5FLL
          || a1->__r_.__value_.__l.__size_ != 0x5F5F6E696D5F5F6ELL)
        {
          goto LABEL_77;
        }
LABEL_92:
        unint64_t v26 = operator new(0x38uLL);
        v26[1] = 0;
        v26[2] = 0;
        void *v26 = &unk_26D76AF30;
        unsigned __int8 v27 = v26 + 3;
        v26[6] = 0;
        std::locale v28 = &unk_26D76AF80;
        goto LABEL_93;
      }
LABEL_86:
      unint64_t v26 = operator new(0x38uLL);
      v26[1] = 0;
      v26[2] = 0;
      void *v26 = &unk_26D76AE40;
      unsigned __int8 v27 = v26 + 3;
      v26[6] = 0;
      std::locale v28 = &unk_26D76AE90;
      goto LABEL_93;
    }
    goto LABEL_84;
  }
  if (v4 != 19)
  {
    if (v4 != 24) {
      goto LABEL_77;
    }
    BOOL v5 = a1->__r_.__value_.__r.__words[0] == 0x69746C6975625F5FLL
      && a1->__r_.__value_.__l.__size_ == 0x6F746365765F5F6ELL;
    if (!v5 || a1->__r_.__value_.__r.__words[2] != 0x5F5F6D75735F5F72) {
      goto LABEL_77;
    }
LABEL_83:
    uint64_t v29 = operator new(0x38uLL);
    v29[1] = 0;
    v29[2] = 0;
    *uint64_t v29 = &unk_26D76AD50;
    std::allocator<turi::groupby_operators::vector_sum>::construct[abi:ne180100]<turi::groupby_operators::vector_sum>((uint64_t)v43, (uint64_t)(v29 + 3));
  }
  if (a1->__r_.__value_.__r.__words[0] == 0x69746C6975625F5FLL
    && a1->__r_.__value_.__l.__size_ == 0x696D6772615F5F6ELL
    && *(std::string::size_type *)((char *)&a1->__r_.__value_.__r.__words[1] + 3) == 0x5F5F6E696D677261)
  {
    goto LABEL_85;
  }
  char v15 = (std::string::__raw *)a1;
LABEL_56:
  std::string::size_type v18 = v15->__words[0];
  std::string::size_type v19 = v15->__words[1];
  uint64_t v20 = *(std::string::size_type *)((char *)&v15->__words[1] + 3);
  if (v18 == 0x69746C6975625F5FLL && v19 == 0x616D6772615F5F6ELL && v20 == 0x5F5F78616D677261)
  {
    _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators6argmaxEJEvEENS_10shared_ptrIT_EEDpOT0_(v43);
LABEL_89:
    *(_OWORD *)a2 = v43[0];
    return;
  }
LABEL_77:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__count__"))
  {
    unint64_t v26 = operator new(0x28uLL);
    v26[1] = 0;
    v26[2] = 0;
    void *v26 = &unk_26D76B200;
    unsigned __int8 v27 = v26 + 3;
    std::locale v28 = &unk_26D76B250;
LABEL_94:
    v26[3] = v28;
    v26[4] = 0;
    goto LABEL_95;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__nonnull__count__"))
  {
    unint64_t v26 = operator new(0x28uLL);
    v26[1] = 0;
    v26[2] = 0;
    void *v26 = &unk_26D76B2F0;
    unsigned __int8 v27 = v26 + 3;
    std::locale v28 = &unk_26D76B340;
    goto LABEL_94;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__avg__"))
  {
    unint64_t v26 = operator new(0x30uLL);
    v26[1] = 0;
    v26[2] = 0;
    void *v26 = &unk_26D76B3E0;
    unsigned __int8 v27 = v26 + 3;
    std::locale v28 = &unk_26D76B430;
LABEL_93:
    v26[5] = 0;
    goto LABEL_94;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__vector__avg__")) {
    _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators14vector_averageEJEvEENS_10shared_ptrIT_EEDpOT0_();
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__var__"))
  {
    unint64_t v26 = operator new(0x38uLL);
    v26[1] = 0;
    v26[2] = 0;
    void *v26 = &unk_26D76B5C0;
    unsigned __int8 v27 = v26 + 3;
    v26[3] = &unk_26D76B610;
    v26[4] = 0;
    v26[5] = 0;
    v26[6] = 0;
    goto LABEL_95;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__stdv__"))
  {
    unint64_t v26 = operator new(0x38uLL);
    v26[1] = 0;
    v26[2] = 0;
    void *v26 = &unk_26D76B6B0;
    unsigned __int8 v27 = v26 + 3;
    std::locale v28 = &unk_26D76B700;
    v26[5] = 0;
    v26[6] = 0;
    goto LABEL_94;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, "__builtin__select_one__"))
  {
    _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators10select_oneEJEvEENS_10shared_ptrIT_EEDpOT0_(v43);
    goto LABEL_89;
  }
  if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__concat__dict__"))
  {
    _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators8zip_dictEJEvEENS_10shared_ptrIT_EEDpOT0_(v43);
    goto LABEL_89;
  }
  if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__concat__list__"))
  {
    _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators8zip_listEJEvEENS_10shared_ptrIT_EEDpOT0_(v43);
    goto LABEL_89;
  }
  if (!boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__quantile__"))
  {
    if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__count__distinct__"))
    {
      _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators14count_distinctEJEvEENS_10shared_ptrIT_EEDpOT0_(v43);
    }
    else if (boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__distinct__"))
    {
      _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators8distinctEJEvEENS_10shared_ptrIT_EEDpOT0_(v43);
    }
    else
    {
      if (!boost::algorithm::starts_with<std::string,char [26]>((unsigned __int8 *)a1, "__builtin__freq_count__"))
      {
        *(void *)&v43[0] = a1;
        turi::get_builtin_group_aggregator(std::string const&)::$_2::operator()();
      }
      _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators15frequency_countEJEvEENS_10shared_ptrIT_EEDpOT0_(v43);
    }
    goto LABEL_89;
  }
  std::string::basic_string(&v48, a1, 0x15uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v43);
  uint64_t v45 = 0;
  long long v46 = 0;
  uint64_t v47 = 0;
  char v44 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  memset(v49, 0, sizeof(v49));
  int v50 = 1065353216;
  memset(v39, 0, sizeof(v39));
  int v40 = 1065353216;
  memset(v37, 0, sizeof(v37));
  int v38 = 1065353216;
  ((void (*)(_OWORD *, void **, uint64_t, uint64_t, _OWORD *, _OWORD *, _OWORD *, void))turi::flexible_type_parser::flexible_type_parser)(v43, __p, 1, 92, v49, v39, v37, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v37);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v39);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v49);
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v30 = v48.__r_.__value_.__l.__size_;
    std::string::value_type v31 = (std::string *)v48.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type v30 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    std::string::value_type v31 = &v48;
  }
  *(void *)&v37[0] = v31;
  turi::flexible_type_parser::vector_parse((turi::flexible_type_parser *)v43, (const char **)v37, v30, (void **)v49);
  *(void *)&v39[0] = &v45;
  *((void *)&v39[0] + 1) = &v44;
  std::tuple<std::vector<double> &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>((void ***)v39, (int *)v49, v32);
  std::pair<turi::flexible_type,BOOL>::~pair((uint64_t)v49);
  if (!v44)
  {
    *(void *)&v49[0] = a1;
    turi::get_builtin_group_aggregator(std::string const&)::$_0::operator()();
  }
  uint64_t v33 = (double *)v45;
  if (v45 != v46)
  {
    do
    {
      if (*v33 < 0.0 || *v33 > 1.0) {
        turi::get_builtin_group_aggregator(std::string const&)::$_1::operator()();
      }
      ++v33;
    }
    while (v33 != (double *)v46);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4turi17groupby_operators8quantileENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v49);
  uint64_t v35 = *(void *)&v49[0];
  if ((char **)(*(void *)&v49[0] + 8) != &v45)
  {
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((char *)(*(void *)&v49[0] + 8), v45, (uint64_t)v46, (v46 - v45) >> 3);
    uint64_t v35 = *(void *)&v49[0];
  }
  uint64_t v36 = *((void *)&v49[0] + 1);
  *a2 = v35;
  a2[1] = v36;
  turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0::~$_0((uint64_t)v43);
  if (v45)
  {
    long long v46 = v45;
    operator delete(v45);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
}

void sub_22407CD14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  std::locale v28 = *(std::__shared_weak_count **)(v26 - 72);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  turi::style_transfer::ResNet16ModelTrainer::AsCheckpointPublisher(void)::$_0::~$_0((uint64_t)&a26);
  uint64_t v29 = *(void **)(v26 - 128);
  if (v29)
  {
    *(void *)(v26 - 120) = v29;
    operator delete(v29);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void *_ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators6argmaxEJEvEENS_10shared_ptrIT_EEDpOT0_@<X0>(void *a1@<X8>)
{
  BOOL result = operator new(0x40uLL);
  result[1] = 0;
  result[2] = 0;
  *BOOL result = &unk_26D76B110;
  result[6] = 0;
  result[7] = 0;
  result[3] = &unk_26D76B160;
  result[4] = 0;
  result[5] = 0;
  *((unsigned char *)result + 56) = 0;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators14vector_averageEJEvEENS_10shared_ptrIT_EEDpOT0_()
{
  v0 = operator new(0x40uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_26D76B4D0;
  std::allocator<turi::groupby_operators::vector_average>::construct[abi:ne180100]<turi::groupby_operators::vector_average>((uint64_t)&v1, (uint64_t)(v0 + 3));
}

void *_ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators10select_oneEJEvEENS_10shared_ptrIT_EEDpOT0_@<X0>(void *a1@<X8>)
{
  BOOL result = operator new(0x38uLL);
  result[1] = 0;
  result[2] = 0;
  *BOOL result = &unk_26D76B7A0;
  result[5] = 0;
  result[6] = 0;
  result[3] = &unk_26D76B7F0;
  result[4] = 0;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

BOOL boost::algorithm::starts_with<std::string,char [26]>(unsigned __int8 *a1, char *__s)
{
  int v3 = (char)a1[23];
  if (v3 >= 0) {
    size_t v4 = a1;
  }
  else {
    size_t v4 = *(unsigned __int8 **)a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  size_t v6 = strlen(__s);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  BOOL v8 = __s;
  if (v7) {
    return v8 == &__s[v6];
  }
  size_t v10 = v6 - 1;
  uint64_t v11 = v5 - 1;
  BOOL v8 = __s;
  while (*v4 == *v8)
  {
    ++v8;
    if (v11)
    {
      ++v4;
      size_t v12 = v10--;
      --v11;
      if (v12) {
        continue;
      }
    }
    return v8 == &__s[v6];
  }
  return 0;
}

void *_ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators8zip_dictEJEvEENS_10shared_ptrIT_EEDpOT0_@<X0>(void *a1@<X8>)
{
  BOOL result = operator new(0x40uLL);
  result[1] = 0;
  result[2] = 0;
  *BOOL result = &unk_26D76B890;
  result[6] = 0;
  result[7] = 0;
  result[5] = 0;
  result[3] = &unk_26D76B8E0;
  result[4] = result + 5;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void *_ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators8zip_listEJEvEENS_10shared_ptrIT_EEDpOT0_@<X0>(void *a1@<X8>)
{
  BOOL result = operator new(0x40uLL);
  result[1] = 0;
  result[2] = 0;
  *BOOL result = &unk_26D76B980;
  result[6] = 0;
  result[7] = 0;
  result[3] = &unk_26D76B9D0;
  result[4] = 0;
  result[5] = 0;
  *((unsigned char *)result + 56) = 0;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void ***std::tuple<std::vector<double> &,BOOL &>::operator=[abi:ne180100]<turi::flexible_type,BOOL,0>(void ***a1, int *a2, double a3)
{
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      uint64_t v5 = *(void *)a2;
      size_t v6 = (double *)operator new(8uLL);
      double v7 = (double)v5;
      goto LABEL_19;
    case 1:
      uint64_t v20 = *(void *)a2;
      unint64_t v21 = operator new(8uLL);
      *(void *)&long long v95 = v21;
      *unint64_t v21 = v20;
      uint64_t v22 = (double *)(v21 + 1);
      goto LABEL_20;
    case 2:
      uint64_t v15 = *(void *)a2;
      if (*(char *)(*(void *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v15 + 8), *(void *)(v15 + 16));
      }
      else
      {
        long long v16 = *(_OWORD *)(v15 + 8);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v15 + 24);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
      }
      turi::flexible_type_fail(0);
      long long v95 = 0uLL;
      std::string::size_type v96 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_90;
    case 3:
      uint64_t v17 = *(void *)a2;
      std::string::size_type v96 = 0;
      long long v95 = 0uLL;
      std::string::size_type v18 = *(const void **)(v17 + 8);
      uint64_t v19 = *(void *)(v17 + 16);
      goto LABEL_14;
    case 4:
      uint64_t v8 = *(void *)a2;
      memset(&__p, 0, sizeof(__p));
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&__p, *(uint64_t **)(v8 + 8), *(uint64_t **)(v8 + 16), (uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4);
      turi::flexible_type_fail(0);
      long long v95 = 0uLL;
      std::string::size_type v96 = 0;
      p_p = &__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      goto LABEL_90;
    case 5:
      uint64_t v23 = *(void *)a2;
      memset(&__p, 0, sizeof(__p));
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(&__p, *(uint64_t **)(v23 + 8), *(uint64_t **)(v23 + 16), (uint64_t)(*(void *)(v23 + 16) - *(void *)(v23 + 8)) >> 5);
      turi::flexible_type_fail(0);
      long long v95 = 0uLL;
      std::string::size_type v96 = 0;
      p_p = &__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      goto LABEL_90;
    case 6:
      uint64_t v24 = *(void *)a2;
      int v25 = a2[2];
      size_t v6 = (double *)operator new(8uLL);
      double v7 = (double)v25 / 1000000.0 + (double)(v24 << 8 >> 8);
LABEL_19:
      *(void *)&long long v95 = v6;
      *size_t v6 = v7;
      uint64_t v22 = v6 + 1;
LABEL_20:
      *((void *)&v95 + 1) = v22;
      std::string::size_type v96 = v22;
      goto LABEL_90;
    case 7:
      long long v95 = 0uLL;
      std::string::size_type v96 = 0;
      goto LABEL_90;
    case 8:
      turi::flexible_type_impl::get_vec_visitor::operator()((uint64_t *)(*(void *)a2 + 8), (double **)&v95, *(unint64_t *)&a3);
      goto LABEL_90;
    case 9:
      uint64_t v9 = *(void *)a2;
      size_t v10 = (void *)(*(void *)a2 + 8);
      if (*(void *)(*(void *)a2 + 72)) {
        goto LABEL_30;
      }
      size_t v12 = *(uint64_t **)(v9 + 24);
      uint64_t v11 = *(uint64_t **)(v9 + 32);
      uint64_t v13 = *(void **)(v9 + 8);
      if (v11 == v12 || v13 == 0)
      {
        uint64_t v26 = 0;
      }
      else
      {
        uint64_t v26 = 1;
        do
        {
          uint64_t v27 = *v12++;
          v26 *= v27;
        }
        while (v12 != v11);
      }
      if (v26 != (uint64_t)(v13[1] - *v13) >> 3
        || turi::flexible_type_impl::ndarray<double>::last_index((void *)(*(void *)a2 + 8)) != (uint64_t)(*(void *)(*v10 + 8) - *(void *)*v10) >> 3)
      {
LABEL_30:
        if (!turi::flexible_type_impl::ndarray<double>::is_valid(v10)) {
          turi::flexible_type_impl::ndarray<double>::compact(void)const::{lambda(void)#1}::operator()();
        }
        if (turi::flexible_type_impl::ndarray<double>::is_full(v10))
        {
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, (uint64_t)v10);
        }
        else
        {
          long long v95 = 0uLL;
          std::string::size_type v96 = 0;
          p_p = 0;
          uint64_t v93 = 0;
          uint64_t v94 = 0;
          std::string::size_type v89 = 0;
          std::string::size_type v90 = 0;
          uint64_t v91 = 0;
          turi::flexible_type_impl::ndarray<double>::ndarray(&__p, (uint64_t)&v95, (uint64_t)&p_p, (uint64_t)&v89, 0);
          if (v89)
          {
            std::string::size_type v90 = v89;
            operator delete(v89);
          }
          if (p_p)
          {
            uint64_t v93 = (uint64_t *)p_p;
            operator delete(p_p);
          }
          if ((void)v95)
          {
            *((void *)&v95 + 1) = v95;
            operator delete((void *)v95);
          }
          v88[3] = 0;
          if (&__p != (std::string *)(v9 + 8)) {
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&__p.__r_.__value_.__s.__data_[16], *(char **)(v9 + 24), *(void *)(v9 + 32), (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 3);
          }
          std::string::size_type v30 = *(uint64_t **)(v9 + 24);
          uint64_t v29 = *(uint64_t **)(v9 + 32);
          if (v29 == v30 || !*v10)
          {
            unint64_t v31 = 0;
          }
          else
          {
            unint64_t v31 = 1;
            do
            {
              uint64_t v32 = *v30++;
              v31 *= v32;
            }
            while (v30 != v29);
          }
          std::vector<double>::resize((uint64_t)__p.__r_.__value_.__l.__data_, v31);
          std::vector<unsigned long>::resize((uint64_t)v88, (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 3);
          if (v87 != __p.__r_.__value_.__r.__words[2]
            && *(void *)(__p.__r_.__value_.__r.__words[0] + 8) != *(void *)__p.__r_.__value_.__l.__data_)
          {
            std::vector<std::pair<unsigned long,unsigned long>>::vector(&v95, (uint64_t)(*(void *)(v9 + 56) - *(void *)(v9 + 48)) >> 3);
            uint64_t v33 = *(void *)(v9 + 48);
            uint64_t v34 = *(void *)(v9 + 56);
            uint64_t v35 = (unint64_t *)v95;
            uint64_t v36 = v34 - v33;
            if (v34 != v33)
            {
              uint64_t v37 = 0;
              unint64_t v38 = v36 >> 3;
              if (v38 <= 1) {
                unint64_t v38 = 1;
              }
              uint64_t v39 = (void *)(v95 + 8);
              do
              {
                *(v39 - 1) = *(void *)(v33 + 8 * v37);
                *uint64_t v39 = v37++;
                v39 += 2;
              }
              while (v38 != v37);
            }
            std::sort[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<std::pair<unsigned long,unsigned long> *>>>(*((uint64_t *)&v95 + 1), *((unint64_t **)&v95 + 1), (uint64_t)v35, v35);
            uint64_t v40 = v95;
            std::string::size_type v41 = v88[0];
            *((void *)v88[0] + *(void *)(v95 + 8)) = 1;
            uint64_t v42 = *(void *)(v9 + 56) - *(void *)(v9 + 48);
            if ((unint64_t)v42 >= 9)
            {
              unint64_t v43 = v42 >> 3;
              std::string::size_type v44 = __p.__r_.__value_.__r.__words[2];
              if (v43 <= 2) {
                unint64_t v43 = 2;
              }
              uint64_t v45 = (uint64_t *)(v40 + 24);
              unint64_t v46 = v43 - 1;
              do
              {
                uint64_t v47 = *(void *)(v44 + 8 * *(v45 - 2)) * v41[*(v45 - 2)];
                uint64_t v48 = *v45;
                v45 += 2;
                v41[v48] = v47;
                --v46;
              }
              while (v46);
            }
            unint64_t v49 = (uint64_t)(*(void *)(v9 + 32) - *(void *)(v9 + 24)) >> 3;
            std::string::size_type v89 = 0;
            std::vector<unsigned long>::vector(&p_p, v49, &v89);
            int v50 = (uint64_t *)p_p;
            uint64_t v51 = v93;
            uint64_t v52 = (char *)v93 - (unsigned char *)p_p;
            unint64_t v53 = ((char *)v93 - (unsigned char *)p_p) >> 3;
            unint64_t v54 = v53 - 1;
            if (v53 <= 1) {
              uint64_t v55 = 1;
            }
            else {
              uint64_t v55 = ((char *)v93 - (unsigned char *)p_p) >> 3;
            }
            uint64_t v56 = (uint64_t *)v88[0];
            uint64_t v57 = *(void *)__p.__r_.__value_.__l.__data_;
            do
            {
              if (v51 == v50)
              {
                uint64_t v65 = 0;
                uint64_t v66 = *(void *)(**(void **)(v9 + 8) + 8 * *(void *)(v9 + 72));
              }
              else
              {
                uint64_t v58 = 0;
                atomic_ullong *volatile v59 = *(uint64_t **)(v9 + 48);
                char v60 = v50;
                uint64_t v61 = v55;
                do
                {
                  uint64_t v63 = *v60++;
                  uint64_t v62 = v63;
                  uint64_t v64 = *v59++;
                  v58 += v64 * v62;
                  --v61;
                }
                while (v61);
                uint64_t v65 = 0;
                uint64_t v66 = *(void *)(**(void **)(v9 + 8) + 8 * (*(void *)(v9 + 72) + v58));
                atomic_ullong *volatile v67 = v50;
                atomic_ullong *volatile v68 = v56;
                uint64_t v69 = v55;
                do
                {
                  uint64_t v71 = *v67++;
                  uint64_t v70 = v71;
                  uint64_t v72 = *v68++;
                  v65 += v72 * v70;
                  --v69;
                }
                while (v69);
              }
              *(void *)(v57 + 8 * v65) = v66;
              uint64_t v73 = v53;
              unint64_t v74 = v53 - 1;
              if (v52 >= 1)
              {
                uint64_t v75 = *(void *)(v9 + 24);
                unint64_t v76 = v50[v54] + 1;
                v50[v54] = v76;
                if (v76 >= *(void *)(v75 + 8 * v54))
                {
                  uint64_t v77 = v75 - 16;
                  unint64_t v78 = v53;
                  uint64_t v79 = (unint64_t *)((char *)v50 + (v52 & 0xFFFFFFFFFFFFFFF8) - 16);
                  do
                  {
                    unint64_t v80 = v78 - 1;
                    v79[1] = 0;
                    if ((uint64_t)(v78 - 1) <= 0) {
                      goto LABEL_80;
                    }
                    unint64_t v81 = *v79 + 1;
                    *v79-- = v81;
                    unint64_t v82 = *(void *)(v77 + 8 * v78--);
                  }
                  while (v81 >= v82);
                  unint64_t v74 = v80 - 1;
                  uint64_t v73 = 1;
                }
                else
                {
                  uint64_t v73 = 1;
                  unint64_t v74 = v53 - 1;
                }
              }
            }
            while ((v74 & 0x8000000000000000) == 0 && v73);
            if (v50)
            {
LABEL_80:
              uint64_t v93 = v50;
              operator delete(v50);
            }
            if ((void)v95)
            {
              *((void *)&v95 + 1) = v95;
              operator delete((void *)v95);
            }
          }
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)&__p);
        if (!turi::flexible_type_impl::ndarray<double>::is_full(&__p)) {
          turi::flexible_type_impl::ndarray<double>::elements(void)::{lambda(void)#1}::operator()();
        }
        std::string::size_type v96 = 0;
        long long v95 = 0uLL;
        std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v95, *(const void **)__p.__r_.__value_.__l.__data_, *(void *)(__p.__r_.__value_.__r.__words[0] + 8), (uint64_t)(*(void *)(__p.__r_.__value_.__r.__words[0] + 8) - *(void *)__p.__r_.__value_.__l.__data_) >> 3);
        if (v88[0])
        {
          v88[1] = v88[0];
          operator delete(v88[0]);
        }
        if (__p.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v87 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        goto LABEL_90;
      }
      if (!turi::flexible_type_impl::ndarray<double>::is_full(v10)) {
        turi::flexible_type_impl::ndarray<double>::elements(void)const::{lambda(void)#1}::operator()();
      }
      uint64_t v28 = *v10;
      long long v95 = 0uLL;
      std::string::size_type v96 = 0;
      std::string::size_type v18 = *(const void **)v28;
      uint64_t v19 = *(void *)(v28 + 8);
LABEL_14:
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v95, v18, v19, (v19 - (uint64_t)v18) >> 3);
LABEL_90:
      long long v83 = *a1;
      std::string::size_type v84 = **a1;
      if (v84)
      {
        v83[1] = v84;
        operator delete(v84);
        *long long v83 = 0;
        v83[1] = 0;
        v83[2] = 0;
      }
      *(_OWORD *)long long v83 = v95;
      v83[2] = v96;
      *(unsigned char *)a1[1] = *((unsigned char *)a2 + 16);
      return a1;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
}

void sub_22407D7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v27 = *(void **)(v25 - 80);
  if (v27)
  {
    *(void *)(v25 - 72) = v27;
    operator delete(v27);
  }
  turi::flexible_type_impl::ndarray<double>::~ndarray(&a9);
  _Unwind_Resume(a1);
}

double _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators14count_distinctEJEvEENS_10shared_ptrIT_EEDpOT0_@<D0>(void *a1@<X8>)
{
  long long v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26D76BB60;
  v2[8] = 0;
  v2[3] = &unk_26D76BBB0;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_DWORD *)v2 + 16) = 1065353216;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

double _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators8distinctEJEvEENS_10shared_ptrIT_EEDpOT0_@<D0>(void *a1@<X8>)
{
  long long v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26D76BC50;
  v2[8] = 0;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_DWORD *)v2 + 16) = 1065353216;
  v2[3] = &unk_26D76BCA0;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

double _ZNSt3__111make_sharedB8ne180100IN4turi17groupby_operators15frequency_countEJEvEENS_10shared_ptrIT_EEDpOT0_@<D0>(void *a1@<X8>)
{
  long long v2 = operator new(0x48uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26D76BD40;
  v2[8] = 0;
  v2[3] = &unk_26D76BD90;
  double result = 0.0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_DWORD *)v2 + 16) = 1065353216;
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<turi::groupby_operators::sum>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76AC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::sum>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76AC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::sum>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::sum::new_instance(turi::groupby_operators::sum *this)
{
}

uint64_t turi::group_aggregate_value::add_element(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 16))(a1, *a2);
}

void turi::groupby_operators::sum::add_element_simple(turi::groupby_operators::sum *this, const turi::flexible_type *a2)
{
  if (*((unsigned char *)a2 + 12) != 7)
  {
    long long v2 = (char *)this + 8;
    switch(*((unsigned char *)a2 + 12))
    {
      case 0:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
            uint64_t v3 = *(void *)v2 + *(void *)a2;
            goto LABEL_35;
          case 1:
            double v71 = *(double *)v2 + (double)*(uint64_t *)a2;
            goto LABEL_192;
          case 2:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 3:
            if (**(void **)v2 != 1) {
              operator new();
            }
            atomic_ullong *volatile v67 = *(double **)(*(void *)v2 + 8);
            uint64_t v68 = *(void *)(*(void *)v2 + 16) - (void)v67;
            if (v68)
            {
              unint64_t v69 = v68 >> 3;
              double v70 = (double)*(uint64_t *)a2;
              if (v69 <= 1) {
                unint64_t v69 = 1;
              }
              do
              {
                double *v67 = *v67 + v70;
                ++v67;
                --v69;
              }
              while (v69);
            }
            return;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 6:
            *(void *)long long v2 = *(void *)v2 & 0xFF00000000000000 | (*(void *)v2 + *(void *)a2) & 0xFFFFFFFFFFFFFFLL;
            return;
          case 7:
            goto LABEL_205;
          case 8:
            goto LABEL_39;
          case 9:
            if (**(void **)v2 != 1) {
              operator new();
            }
            uint64_t v72 = *(uint64_t **)v2;
            unint64_t v74 = *(uint64_t **)(*(void *)v2 + 24);
            uint64_t v73 = *(uint64_t **)(*(void *)v2 + 32);
            if (v73 == v74) {
              return;
            }
            if (!v72[1]) {
              return;
            }
            double v75 = (double)*(uint64_t *)a2;
            uint64_t v76 = 1;
            do
            {
              uint64_t v77 = *v74++;
              v76 *= v77;
            }
            while (v74 != v73);
            if (!v76) {
              return;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v72 + 1);
            unint64_t v78 = (v72[4] - v72[3]) >> 3;
            uint64_t v111 = 0;
            std::vector<unsigned long>::vector(&v112, v78, &v111);
            uint64_t v17 = v112;
            uint64_t v79 = v113;
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        while (2)
        {
          uint64_t v80 = 0;
          uint64_t v81 = v79 - v17;
          if (v81)
          {
            unint64_t v82 = v81 >> 3;
            long long v83 = (uint64_t *)v72[6];
            if (v82 <= 1) {
              unint64_t v82 = 1;
            }
            do
            {
              uint64_t v85 = *(void *)v17;
              v17 += 8;
              uint64_t v84 = v85;
              uint64_t v86 = *v83++;
              v80 += v86 * v84;
              --v82;
            }
            while (v82);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v72 + 1);
          *(double *)(*(void *)v72[1] + 8 * (v72[9] + v80)) = *(double *)(*(void *)v72[1] + 8 * (v72[9] + v80))
                                                              + v75;
          uint64_t v17 = v112;
          uint64_t v79 = v113;
          uint64_t v87 = (v113 - v112) >> 3;
          uint64_t v88 = v87 - 1;
          if (v113 - v112 < 1) {
            goto LABEL_150;
          }
          uint64_t v89 = v72[3];
          unint64_t v90 = *(void *)&v112[8 * v88] + 1;
          *(void *)&v112[8 * v88] = v90;
          if (v90 < *(void *)(v89 + 8 * v88))
          {
LABEL_149:
            uint64_t v87 = 1;
LABEL_150:
            if (v88 < 0 || !v87) {
              goto LABEL_152;
            }
            continue;
          }
          break;
        }
        uint64_t v91 = (unint64_t *)&v17[8 * v87 - 16];
        uint64_t v92 = v89 - 16;
        while (1)
        {
          uint64_t v93 = v87 - 1;
          v91[1] = 0;
          if (v87 - 1 <= 0) {
            goto LABEL_153;
          }
          unint64_t v94 = *v91 + 1;
          *v91-- = v94;
          unint64_t v95 = *(void *)(v92 + 8 * v87--);
          if (v94 < v95)
          {
            uint64_t v88 = v93 - 1;
            goto LABEL_149;
          }
        }
      case 1:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
            uint64_t v3 = (uint64_t)(*(double *)a2 + (double)*(uint64_t *)v2);
LABEL_35:
            *(void *)long long v2 = v3;
            return;
          case 1:
            double v71 = *(double *)a2 + *(double *)v2;
LABEL_192:
            *(double *)long long v2 = v71;
            return;
          case 2:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 3:
            if (**(void **)v2 != 1) {
              operator new();
            }
            std::string::size_type v96 = *(double **)(*(void *)v2 + 8);
            uint64_t v97 = *(void *)(*(void *)v2 + 16) - (void)v96;
            if (v97)
            {
              double v98 = *(double *)a2;
              unint64_t v99 = v97 >> 3;
              if (v99 <= 1) {
                unint64_t v99 = 1;
              }
              do
              {
                *std::string::size_type v96 = v98 + *v96;
                ++v96;
                --v99;
              }
              while (v99);
            }
            return;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 6:
            double v107 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
            uint64_t v108 = *((void *)this + 1);
            uint64_t v109 = v108 + vcvtmd_s64_f64(*(double *)a2);
            *((void *)this + 1) = v108 & 0xFF00000000000000 | v109 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v110 = (uint64_t)v107 + *((int *)this + 4);
            if (v110 >= 1000000)
            {
              *(void *)long long v2 = (v109 + 1) & 0xFFFFFFFFFFFFFFLL | v108 & 0xFF00000000000000;
              LODWORD(v110) = v110 - 1000000;
            }
            if (v110 >= 0xF4240) {
              turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
            }
            *((_DWORD *)this + 4) = v110;
            return;
          case 7:
            goto LABEL_205;
          case 8:
            goto LABEL_39;
          case 9:
            if (**(void **)v2 != 1) {
              operator new();
            }
            unint64_t v43 = *(uint64_t **)v2;
            uint64_t v45 = *(uint64_t **)(*(void *)v2 + 24);
            std::string::size_type v44 = *(uint64_t **)(*(void *)v2 + 32);
            if (v44 == v45) {
              return;
            }
            if (!v43[1]) {
              return;
            }
            double v46 = *(double *)a2;
            uint64_t v47 = 1;
            do
            {
              uint64_t v48 = *v45++;
              v47 *= v48;
            }
            while (v45 != v44);
            if (!v47) {
              return;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v43 + 1);
            unint64_t v49 = (v43[4] - v43[3]) >> 3;
            uint64_t v111 = 0;
            std::vector<unsigned long>::vector(&v112, v49, &v111);
            uint64_t v17 = v112;
            int v50 = v113;
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        while (2)
        {
          uint64_t v51 = 0;
          uint64_t v52 = v50 - v17;
          if (v52)
          {
            unint64_t v53 = v52 >> 3;
            unint64_t v54 = (uint64_t *)v43[6];
            if (v53 <= 1) {
              unint64_t v53 = 1;
            }
            do
            {
              uint64_t v56 = *(void *)v17;
              v17 += 8;
              uint64_t v55 = v56;
              uint64_t v57 = *v54++;
              v51 += v57 * v55;
              --v53;
            }
            while (v53);
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v43 + 1);
          *(double *)(*(void *)v43[1] + 8 * (v43[9] + v51)) = v46
                                                              + *(double *)(*(void *)v43[1] + 8 * (v43[9] + v51));
          uint64_t v17 = v112;
          int v50 = v113;
          uint64_t v58 = (v113 - v112) >> 3;
          uint64_t v59 = v58 - 1;
          if (v113 - v112 < 1) {
            goto LABEL_108;
          }
          uint64_t v60 = v43[3];
          unint64_t v61 = *(void *)&v112[8 * v59] + 1;
          *(void *)&v112[8 * v59] = v61;
          if (v61 < *(void *)(v60 + 8 * v59))
          {
LABEL_107:
            uint64_t v58 = 1;
LABEL_108:
            if (v59 < 0 || !v58) {
              goto LABEL_152;
            }
            continue;
          }
          break;
        }
        uint64_t v62 = (unint64_t *)&v17[8 * v58 - 16];
        uint64_t v63 = v60 - 16;
        while (1)
        {
          uint64_t v64 = v58 - 1;
          v62[1] = 0;
          if (v58 - 1 <= 0) {
            goto LABEL_153;
          }
          unint64_t v65 = *v62 + 1;
          *v62-- = v65;
          unint64_t v66 = *(void *)(v63 + 8 * v58--);
          if (v65 < v66)
          {
            uint64_t v59 = v64 - 1;
            goto LABEL_107;
          }
        }
      case 2:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_205;
          case 2:
            double v4 = *(double *)a2;
            if (**(void **)v2 != 1) {
              operator new();
            }
            uint64_t v5 = (std::string *)(*(void *)v2 + 8);
            int v6 = *(char *)(*(void *)&v4 + 31);
            if (v6 >= 0) {
              double v7 = (const std::string::value_type *)(*(void *)&v4 + 8);
            }
            else {
              double v7 = *(const std::string::value_type **)(*(void *)&v4 + 8);
            }
            if (v6 >= 0) {
              std::string::size_type v8 = *(unsigned __int8 *)(*(void *)&v4 + 31);
            }
            else {
              std::string::size_type v8 = *(void *)(*(void *)&v4 + 16);
            }
            std::string::append(v5, v7, v8);
            return;
          case 3:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 8:
            goto LABEL_39;
          case 9:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 3:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_205;
          case 2:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 3:
            double v100 = *(double *)a2;
            if (**(void **)v2 != 1) {
              operator new();
            }
            uint64_t v101 = *(void *)v2;
            turi::flexible_type_fail(*(void *)(*(void *)v2 + 16) - *(void *)(*(void *)v2 + 8) == *(void *)(*(void *)&v100 + 16) - *(void *)(*(void *)&v100 + 8));
            char v102 = *(double **)(v101 + 8);
            uint64_t v103 = *(void *)(v101 + 16) - (void)v102;
            if (v103)
            {
              unint64_t v104 = v103 >> 3;
              std::string::size_type v105 = *(double **)(*(void *)&v100 + 8);
              if (v104 <= 1) {
                unint64_t v104 = 1;
              }
              do
              {
                double v106 = *v105++;
                *char v102 = v106 + *v102;
                ++v102;
                --v104;
              }
              while (v104);
            }
            return;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 8:
            goto LABEL_39;
          case 9:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 4:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_205;
          case 2:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 3:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 8:
            goto LABEL_39;
          case 9:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 5:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_205;
          case 2:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 3:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 8:
            goto LABEL_39;
          case 9:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 6:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_205;
          case 2:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 3:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 8:
            goto LABEL_39;
          case 9:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 8:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_205;
          case 2:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 3:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 8:
            goto LABEL_39;
          case 9:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
      case 9:
        switch(*((unsigned char *)this + 20))
        {
          case 0:
          case 1:
          case 6:
          case 7:
            goto LABEL_205;
          case 2:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 3:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_205;
          case 4:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 5:
            if (**(void **)v2 != 1) {
              operator new();
            }
            goto LABEL_207;
          case 8:
LABEL_39:
            if (**(void **)v2 != 1) {
              operator new();
            }
LABEL_205:
LABEL_207:
            turi::flexible_type_fail(0);
            return;
          case 9:
            double v9 = *(double *)a2;
            if (**(void **)v2 != 1) {
              operator new();
            }
            uint64_t v10 = *(void *)v2;
            uint64_t v11 = (uint64_t *)(*(void *)v2 + 8);
            if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v11, *(void *)&v9 + 8)) {
              turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
            }
            uint64_t v13 = *(uint64_t **)(v10 + 24);
            size_t v12 = *(uint64_t **)(v10 + 32);
            if (v12 == v13) {
              return;
            }
            if (!*v11) {
              return;
            }
            uint64_t v14 = 1;
            do
            {
              uint64_t v15 = *v13++;
              v14 *= v15;
            }
            while (v13 != v12);
            if (!v14) {
              return;
            }
            turi::flexible_type_impl::ndarray<double>::ensure_unique(v11);
            unint64_t v16 = (uint64_t)(*(void *)(v10 + 32) - *(void *)(v10 + 24)) >> 3;
            uint64_t v111 = 0;
            std::vector<unsigned long>::vector(&v112, v16, &v111);
            uint64_t v17 = v112;
            std::string::size_type v18 = v113;
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        return;
      default:
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
    }
    do
    {
      uint64_t v19 = v18 - v17;
      if (v19)
      {
        uint64_t v20 = 0;
        unint64_t v21 = v19 >> 3;
        uint64_t v22 = *(uint64_t **)(*(void *)&v9 + 48);
        if (v21 <= 1) {
          unint64_t v21 = 1;
        }
        uint64_t v23 = (uint64_t *)v17;
        unint64_t v24 = v21;
        do
        {
          uint64_t v26 = *v23++;
          uint64_t v25 = v26;
          uint64_t v27 = *v22++;
          v20 += v27 * v25;
          --v24;
        }
        while (v24);
        uint64_t v28 = 0;
        double v29 = *(double *)(**(void **)(*(void *)&v9 + 8) + 8 * (*(void *)(*(void *)&v9 + 72) + v20));
        std::string::size_type v30 = *(uint64_t **)(v10 + 48);
        do
        {
          uint64_t v32 = *(void *)v17;
          v17 += 8;
          uint64_t v31 = v32;
          uint64_t v33 = *v30++;
          v28 += v33 * v31;
          --v21;
        }
        while (v21);
      }
      else
      {
        uint64_t v28 = 0;
        double v29 = *(double *)(**(void **)(*(void *)&v9 + 8) + 8 * *(void *)(*(void *)&v9 + 72));
      }
      turi::flexible_type_impl::ndarray<double>::ensure_unique(v11);
      *(double *)(**(void **)(v10 + 8) + 8 * (*(void *)(v10 + 72) + v28)) = v29
                                                                              + *(double *)(**(void **)(v10 + 8)
                                                                                          + 8
                                                                                          * (*(void *)(v10 + 72) + v28));
      uint64_t v17 = v112;
      std::string::size_type v18 = v113;
      uint64_t v34 = (v113 - v112) >> 3;
      uint64_t v35 = v34 - 1;
      if (v113 - v112 >= 1)
      {
        uint64_t v36 = *(void *)(v10 + 24);
        unint64_t v37 = *(void *)&v112[8 * v35] + 1;
        *(void *)&v112[8 * v35] = v37;
        if (v37 >= *(void *)(v36 + 8 * v35))
        {
          unint64_t v38 = (unint64_t *)&v17[8 * v34 - 16];
          uint64_t v39 = v36 - 16;
          while (1)
          {
            uint64_t v40 = v34 - 1;
            v38[1] = 0;
            if (v34 - 1 <= 0) {
              goto LABEL_153;
            }
            unint64_t v41 = *v38 + 1;
            *v38-- = v41;
            unint64_t v42 = *(void *)(v39 + 8 * v34--);
            if (v41 < v42)
            {
              uint64_t v35 = v40 - 1;
              break;
            }
          }
        }
        uint64_t v34 = 1;
      }
    }
    while ((v35 & 0x8000000000000000) == 0 && v34);
LABEL_152:
    if (!v17) {
      return;
    }
LABEL_153:
    unint64_t v113 = v17;
    operator delete(v17);
  }
}

void sub_22407F148(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_22407F274(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x22407F26CLL);
}

void turi::groupby_operators::sum::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  double v4 = (uint64_t **)(a1 + 8);
  switch(*((unsigned char *)v3 + 20))
  {
    case 0:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
          uint64_t v5 = (uint64_t)*v4 + *((void *)v3 + 1);
          goto LABEL_31;
        case 1:
          double v97 = *(double *)v4 + (double)*((uint64_t *)v3 + 1);
          goto LABEL_164;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          uint64_t v45 = (double *)(*v4)[1];
          uint64_t v46 = (*v4)[2] - (void)v45;
          if (v46)
          {
            unint64_t v47 = v46 >> 3;
            double v48 = (double)*((uint64_t *)v3 + 1);
            if (v47 <= 1) {
              unint64_t v47 = 1;
            }
            do
            {
              double *v45 = *v45 + v48;
              ++v45;
              --v47;
            }
            while (v47);
          }
          return;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 6:
          *double v4 = (uint64_t *)((unint64_t)*v4 & 0xFF00000000000000 | ((unint64_t)*v4 + *((void *)v3 + 1)) & 0xFFFFFFFFFFFFFFLL);
          return;
        case 7:
          goto LABEL_215;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          unint64_t v49 = *v4;
          uint64_t v51 = (uint64_t *)(*v4)[3];
          int v50 = (uint64_t *)(*v4)[4];
          if (v50 == v51) {
            return;
          }
          if (!v49[1]) {
            return;
          }
          double v52 = (double)*((uint64_t *)v3 + 1);
          uint64_t v53 = 1;
          do
          {
            uint64_t v54 = *v51++;
            v53 *= v54;
          }
          while (v51 != v50);
          if (!v53) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v49 + 1);
          unint64_t v55 = (v49[4] - v49[3]) >> 3;
          uint64_t v113 = 0;
          std::vector<unsigned long>::vector(&v114, v55, &v113);
          uint64_t v19 = v114;
          uint64_t v56 = v115;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        uint64_t v57 = 0;
        uint64_t v58 = v56 - v19;
        if (v58)
        {
          unint64_t v59 = v58 >> 3;
          uint64_t v60 = (uint64_t *)v49[6];
          if (v59 <= 1) {
            unint64_t v59 = 1;
          }
          do
          {
            uint64_t v62 = *(void *)v19;
            v19 += 8;
            uint64_t v61 = v62;
            uint64_t v63 = *v60++;
            v57 += v63 * v61;
            --v59;
          }
          while (v59);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v49 + 1);
        *(double *)(*(void *)v49[1] + 8 * (v49[9] + v57)) = *(double *)(*(void *)v49[1] + 8 * (v49[9] + v57)) + v52;
        uint64_t v19 = v114;
        uint64_t v56 = v115;
        uint64_t v64 = (v115 - v114) >> 3;
        uint64_t v65 = v64 - 1;
        if (v115 - v114 < 1) {
          goto LABEL_111;
        }
        uint64_t v66 = v49[3];
        unint64_t v67 = *(void *)&v114[8 * v65] + 1;
        *(void *)&v114[8 * v65] = v67;
        if (v67 < *(void *)(v66 + 8 * v65))
        {
LABEL_110:
          uint64_t v64 = 1;
LABEL_111:
          if (v65 < 0 || !v64) {
            goto LABEL_135;
          }
          continue;
        }
        break;
      }
      uint64_t v68 = (unint64_t *)&v19[8 * v64 - 16];
      uint64_t v69 = v66 - 16;
      while (1)
      {
        uint64_t v70 = v64 - 1;
        v68[1] = 0;
        if (v64 - 1 <= 0) {
          goto LABEL_136;
        }
        unint64_t v71 = *v68 + 1;
        *v68-- = v71;
        unint64_t v72 = *(void *)(v69 + 8 * v64--);
        if (v71 < v72)
        {
          uint64_t v65 = v70 - 1;
          goto LABEL_110;
        }
      }
    case 1:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
          uint64_t v5 = (uint64_t)(*((double *)v3 + 1) + (double)(uint64_t)*v4);
LABEL_31:
          *double v4 = (uint64_t *)v5;
          return;
        case 1:
          double v97 = *((double *)v3 + 1) + *(double *)v4;
LABEL_164:
          *(double *)double v4 = v97;
          return;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          std::string::size_type v105 = (double *)(*v4)[1];
          uint64_t v106 = (*v4)[2] - (void)v105;
          if (v106)
          {
            double v107 = *((double *)v3 + 1);
            unint64_t v108 = v106 >> 3;
            if (v108 <= 1) {
              unint64_t v108 = 1;
            }
            do
            {
              double *v105 = v107 + *v105;
              ++v105;
              --v108;
            }
            while (v108);
          }
          return;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 6:
          double v109 = *((double *)v3 + 1);
          uint64_t v110 = *(void *)(a1 + 8);
          uint64_t v111 = v110 + vcvtmd_s64_f64(v109);
          *(void *)(a1 + 8) = v110 & 0xFF00000000000000 | v111 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v112 = (uint64_t)((v109 - (double)(uint64_t)floor(v109)) * 1000000.0) + *(int *)(a1 + 16);
          if (v112 >= 1000000)
          {
            *double v4 = (uint64_t *)((v111 + 1) & 0xFFFFFFFFFFFFFFLL | v110 & 0xFF00000000000000);
            LODWORD(v112) = v112 - 1000000;
          }
          if (v112 >= 0xF4240) {
            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
          }
          *(_DWORD *)(a1 + 16) = v112;
          return;
        case 7:
          goto LABEL_215;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          uint64_t v73 = *v4;
          double v75 = (uint64_t *)(*v4)[3];
          unint64_t v74 = (uint64_t *)(*v4)[4];
          if (v74 == v75) {
            return;
          }
          if (!v73[1]) {
            return;
          }
          double v76 = *((double *)v3 + 1);
          uint64_t v77 = 1;
          do
          {
            uint64_t v78 = *v75++;
            v77 *= v78;
          }
          while (v75 != v74);
          if (!v77) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v73 + 1);
          unint64_t v79 = (v73[4] - v73[3]) >> 3;
          uint64_t v113 = 0;
          std::vector<unsigned long>::vector(&v114, v79, &v113);
          uint64_t v19 = v114;
          uint64_t v80 = v115;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (2)
      {
        uint64_t v81 = 0;
        uint64_t v82 = v80 - v19;
        if (v82)
        {
          unint64_t v83 = v82 >> 3;
          uint64_t v84 = (uint64_t *)v73[6];
          if (v83 <= 1) {
            unint64_t v83 = 1;
          }
          do
          {
            uint64_t v86 = *(void *)v19;
            v19 += 8;
            uint64_t v85 = v86;
            uint64_t v87 = *v84++;
            v81 += v87 * v85;
            --v83;
          }
          while (v83);
        }
        turi::flexible_type_impl::ndarray<double>::ensure_unique(v73 + 1);
        *(double *)(*(void *)v73[1] + 8 * (v73[9] + v81)) = v76 + *(double *)(*(void *)v73[1] + 8 * (v73[9] + v81));
        uint64_t v19 = v114;
        uint64_t v80 = v115;
        uint64_t v88 = (v115 - v114) >> 3;
        uint64_t v89 = v88 - 1;
        if (v115 - v114 < 1) {
          goto LABEL_133;
        }
        uint64_t v90 = v73[3];
        unint64_t v91 = *(void *)&v114[8 * v89] + 1;
        *(void *)&v114[8 * v89] = v91;
        if (v91 < *(void *)(v90 + 8 * v89))
        {
LABEL_132:
          uint64_t v88 = 1;
LABEL_133:
          if (v89 < 0 || !v88) {
            goto LABEL_135;
          }
          continue;
        }
        break;
      }
      uint64_t v92 = (unint64_t *)&v19[8 * v88 - 16];
      uint64_t v93 = v90 - 16;
      while (1)
      {
        uint64_t v94 = v88 - 1;
        v92[1] = 0;
        if (v88 - 1 <= 0) {
          goto LABEL_136;
        }
        unint64_t v95 = *v92 + 1;
        *v92-- = v95;
        unint64_t v96 = *(void *)(v93 + 8 * v88--);
        if (v95 < v96)
        {
          uint64_t v89 = v94 - 1;
          goto LABEL_132;
        }
      }
    case 2:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_215;
        case 2:
          uint64_t v6 = *((void *)v3 + 1);
          if (**v4 != 1) {
            operator new();
          }
          double v7 = (std::string *)(*v4 + 1);
          int v8 = *(char *)(v6 + 31);
          if (v8 >= 0) {
            double v9 = (const std::string::value_type *)(v6 + 8);
          }
          else {
            double v9 = *(const std::string::value_type **)(v6 + 8);
          }
          if (v8 >= 0) {
            std::string::size_type v10 = *(unsigned __int8 *)(v6 + 31);
          }
          else {
            std::string::size_type v10 = *(void *)(v6 + 16);
          }
          std::string::append(v7, v9, v10);
          return;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 3:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_215;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          uint64_t v98 = *((void *)v3 + 1);
          if (**v4 != 1) {
            operator new();
          }
          unint64_t v99 = *v4;
          turi::flexible_type_fail((*v4)[2] - (*v4)[1] == *(void *)(v98 + 16) - *(void *)(v98 + 8));
          double v100 = (double *)v99[1];
          uint64_t v101 = v99[2] - (void)v100;
          if (v101)
          {
            unint64_t v102 = v101 >> 3;
            uint64_t v103 = *(double **)(v98 + 8);
            if (v102 <= 1) {
              unint64_t v102 = 1;
            }
            do
            {
              double v104 = *v103++;
              double *v100 = v104 + *v100;
              ++v100;
              --v102;
            }
            while (v102);
          }
          return;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 4:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_215;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 5:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_215;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 6:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_215;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_215;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 8:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_215;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 8:
          goto LABEL_41;
        case 9:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 9:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 0:
        case 1:
        case 6:
        case 7:
          goto LABEL_215;
        case 2:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 3:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_215;
        case 4:
          if (**v4 != 1) {
            operator new();
          }
          goto LABEL_220;
        case 5:
          if (**v4 != 1) {
            operator new();
          }
LABEL_220:
          turi::flexible_type_fail(0);
          return;
        case 8:
LABEL_41:
          if (**v4 != 1) {
            operator new();
          }
LABEL_215:
          turi::flexible_type_fail(0);
          return;
        case 9:
          uint64_t v11 = *((void *)v3 + 1);
          if (**v4 != 1) {
            operator new();
          }
          size_t v12 = *v4;
          uint64_t v13 = *v4 + 1;
          if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v13, v11 + 8)) {
            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
          }
          uint64_t v15 = (uint64_t *)v12[3];
          uint64_t v14 = (uint64_t *)v12[4];
          if (v14 == v15) {
            return;
          }
          if (!*v13) {
            return;
          }
          uint64_t v16 = 1;
          do
          {
            uint64_t v17 = *v15++;
            v16 *= v17;
          }
          while (v15 != v14);
          if (!v16) {
            return;
          }
          turi::flexible_type_impl::ndarray<double>::ensure_unique(v13);
          unint64_t v18 = (v12[4] - v12[3]) >> 3;
          uint64_t v113 = 0;
          std::vector<unsigned long>::vector(&v114, v18, &v113);
          uint64_t v19 = v114;
          uint64_t v20 = v115;
          break;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    uint64_t v21 = v20 - v19;
    if (v21)
    {
      uint64_t v22 = 0;
      unint64_t v23 = v21 >> 3;
      unint64_t v24 = *(uint64_t **)(v11 + 48);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      uint64_t v25 = (uint64_t *)v19;
      unint64_t v26 = v23;
      do
      {
        uint64_t v28 = *v25++;
        uint64_t v27 = v28;
        uint64_t v29 = *v24++;
        v22 += v29 * v27;
        --v26;
      }
      while (v26);
      uint64_t v30 = 0;
      double v31 = *(double *)(**(void **)(v11 + 8) + 8 * (*(void *)(v11 + 72) + v22));
      uint64_t v32 = (uint64_t *)v12[6];
      do
      {
        uint64_t v34 = *(void *)v19;
        v19 += 8;
        uint64_t v33 = v34;
        uint64_t v35 = *v32++;
        v30 += v35 * v33;
        --v23;
      }
      while (v23);
    }
    else
    {
      uint64_t v30 = 0;
      double v31 = *(double *)(**(void **)(v11 + 8) + 8 * *(void *)(v11 + 72));
    }
    turi::flexible_type_impl::ndarray<double>::ensure_unique(v13);
    *(double *)(*(void *)v12[1] + 8 * (v12[9] + v30)) = v31 + *(double *)(*(void *)v12[1] + 8 * (v12[9] + v30));
    uint64_t v19 = v114;
    uint64_t v20 = v115;
    uint64_t v36 = (v115 - v114) >> 3;
    uint64_t v37 = v36 - 1;
    if (v115 - v114 >= 1)
    {
      uint64_t v38 = v12[3];
      unint64_t v39 = *(void *)&v114[8 * v37] + 1;
      *(void *)&v114[8 * v37] = v39;
      if (v39 >= *(void *)(v38 + 8 * v37))
      {
        uint64_t v40 = (unint64_t *)&v19[8 * v36 - 16];
        uint64_t v41 = v38 - 16;
        while (1)
        {
          uint64_t v42 = v36 - 1;
          v40[1] = 0;
          if (v36 - 1 <= 0) {
            goto LABEL_136;
          }
          unint64_t v43 = *v40 + 1;
          *v40-- = v43;
          unint64_t v44 = *(void *)(v41 + 8 * v36--);
          if (v43 < v44)
          {
            uint64_t v37 = v42 - 1;
            break;
          }
        }
      }
      uint64_t v36 = 1;
    }
  }
  while ((v37 & 0x8000000000000000) == 0 && v36);
LABEL_135:
  if (!v19) {
    return;
  }
LABEL_136:
  unsigned int v115 = v19;
  operator delete(v19);
}

void sub_224080BC0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void sub_224080D00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x224080CF8);
}

BOOL turi::groupby_operators::sum::support_type(uint64_t a1, unsigned int a2)
{
  return a2 < 2;
}

uint64_t turi::group_aggregate_value::set_input_types(uint64_t a1, char **a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 112))(a1, **a2);
}

void *turi::groupby_operators::sum::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Sum");
}

void turi::groupby_operators::sum::save(turi::groupby_operators::sum *this, turi::oarchive *a2)
{
}

void turi::groupby_operators::sum::load(turi::groupby_operators::sum *this, turi::iarchive *a2)
{
}

void turi::groupby_operators::sum::~sum(turi::groupby_operators::sum *this)
{
  turi::groupby_operators::sum::~sum(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void **v14;

  *(void *)this = &unk_26D76ACA0;
  switch(*((unsigned char *)this + 20))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        long long v2 = *((void *)this + 1);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          double v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = (void *)*((void *)this + 1);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          double v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v7 = *((void *)this + 1);
        if (v7)
        {
          uint64_t v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v7 = *((void *)this + 1);
        if (v7)
        {
          uint64_t v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = (void *)v7;
          double v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v8 = *((void *)this + 1);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          double v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        std::string::size_type v10 = (void *)*((void *)this + 1);
        if (v10)
        {
          uint64_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          size_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          double v9 = 2071181815;
LABEL_31:
          double v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
}

void turi::group_aggregate_value::print(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 64))(v24);
  if ((v25 & 0x80u) == 0) {
    double v4 = v24;
  }
  else {
    double v4 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    uint64_t v5 = v25;
  }
  else {
    uint64_t v5 = (uint64_t)v24[1];
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
  double v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(value = ", 9);
  (*(void (**)(atomic_ullong **__return_ptr, uint64_t))(*(void *)a1 + 40))(&v30, a1);
  switch(v31)
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_16;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_16:
      v27[0] = *(void ***)MEMORY[0x263F8C2B8];
      double v9 = *(void ***)(MEMORY[0x263F8C2B8] + 72);
      *(void ***)((char *)v27 + (unint64_t)*(v27[0] - 3)) = *(void ***)(MEMORY[0x263F8C2B8] + 64);
      v27[2] = v9;
      v27[3] = (void **)(MEMORY[0x263F8C318] + 16);
      if (v28 < 0) {
        operator delete(v27[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v29);
      goto LABEL_23;
    case 2:
      if (*((char *)v30 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v30[1], v30[2]);
      }
      else
      {
        long long v8 = *(_OWORD *)(v30 + 1);
        v26.__r_.__value_.__r.__words[2] = v30[3];
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
      }
      goto LABEL_23;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v27, v30 + 1);
      goto LABEL_23;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v27, v30 + 1);
      goto LABEL_23;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v27, v30 + 1);
      goto LABEL_23;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v30, &v26);
      goto LABEL_23;
    case 7:
      memset(&v26, 0, sizeof(v26));
      goto LABEL_23;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_23;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v27, v30 + 1);
LABEL_23:
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = &v26;
      }
      else {
        std::string::size_type v10 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v10, size);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)")", 1);
      switch(v31)
      {
        case 2:
          if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            size_t v12 = v30;
            if (v30)
            {
              if (*((char *)v30 + 31) < 0) {
                operator delete((void *)v30[1]);
              }
              uint64_t v13 = v12;
              uint64_t v14 = 0x1012C404EF22A49;
              goto LABEL_62;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v21 = v30;
            if (v30)
            {
              uint64_t v22 = (void *)v30[1];
              if (v22)
              {
                void v30[2] = (atomic_ullong)v22;
                operator delete(v22);
              }
              uint64_t v13 = v21;
              uint64_t v14 = 0x1080C409938AC02;
              goto LABEL_62;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v15 = v30;
            if (v30)
            {
              v27[0] = (void **)(v30 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v27);
              goto LABEL_57;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v15 = v30;
            if (v30)
            {
              v27[0] = (void **)(v30 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v27);
LABEL_57:
              uint64_t v13 = v15;
              uint64_t v14 = 0x1020C405E66F15BLL;
              goto LABEL_62;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unint64_t v23 = v30;
            if (v30)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v30 + 2);
              uint64_t v13 = v23;
              unsigned int v20 = -235920773;
              goto LABEL_61;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v30, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t v16 = v30;
            if (v30)
            {
              uint64_t v17 = (void *)v30[6];
              if (v17)
              {
                v30[7] = (atomic_ullong)v17;
                operator delete(v17);
              }
              unint64_t v18 = (void *)v16[3];
              if (v18)
              {
                v16[4] = (atomic_ullong)v18;
                operator delete(v18);
              }
              uint64_t v19 = (std::__shared_weak_count *)v16[2];
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
              uint64_t v13 = v16;
              unsigned int v20 = 2071181815;
LABEL_61:
              uint64_t v14 = v20 | 0x1030C4000000000;
LABEL_62:
              MEMORY[0x22A614FA0](v13, v14);
            }
          }
          break;
        default:
          break;
      }
      if ((char)v25 < 0) {
        operator delete(v24[0]);
      }
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_224081504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  switch(*(unsigned char *)(v22 - 76))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v24 = *(void *)(v22 - 88);
      if (!v24) {
        goto LABEL_27;
      }
      if (*(char *)(v24 + 31) < 0) {
        operator delete(*(void **)(v24 + 8));
      }
      unsigned __int8 v25 = (void *)v24;
      uint64_t v26 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v29 = *(void **)(v22 - 88);
      if (!v29) {
        goto LABEL_27;
      }
      uint64_t v30 = (void *)v29[1];
      if (v30)
      {
        v29[2] = v30;
        operator delete(v30);
      }
      unsigned __int8 v25 = v29;
      uint64_t v26 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v27 = *(void **)(v22 - 88);
      if (!v27) {
        goto LABEL_27;
      }
      *(void *)(v22 - 96) = v27 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v27 = *(void **)(v22 - 88);
      if (!v27) {
        goto LABEL_27;
      }
      *(void *)(v22 - 96) = v27 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 96));
LABEL_21:
      unsigned __int8 v25 = v27;
      uint64_t v26 = 0x1020C405E66F15BLL;
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 88), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v31 = *(void *)(v22 - 88);
        if (v31)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v31 + 16));
          MEMORY[0x22A614FA0](v31, 0x1030C40F1F0227BLL);
        }
        *(void *)(v22 - 88) = 0;
      }
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 88), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      char v28 = *(void **)(v22 - 88);
      if (!v28) {
        goto LABEL_27;
      }
      unsigned __int8 v25 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v28);
      uint64_t v26 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_27;
  }
  MEMORY[0x22A614FA0](v25, v26);
LABEL_27:
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_operators::sum::set_input_type(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v4 = *(void *)(a1 + 8);
        if (!v4) {
          goto LABEL_33;
        }
        if (*(char *)(v4 + 31) < 0) {
          operator delete(*(void **)(v4 + 8));
        }
        uint64_t v5 = (void *)v4;
        uint64_t v6 = 0x1012C404EF22A49;
        goto LABEL_32;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        double v7 = *(void **)(a1 + 8);
        if (!v7) {
          goto LABEL_33;
        }
        long long v8 = (void *)v7[1];
        if (v8)
        {
          v7[2] = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
        uint64_t v6 = 0x1080C409938AC02;
        goto LABEL_32;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        uint64_t v17 = (void **)(v9 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
        goto LABEL_18;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        uint64_t v17 = (void **)(v9 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_18:
        uint64_t v5 = (void *)v9;
        uint64_t v6 = 0x1020C405E66F15BLL;
        goto LABEL_32;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        if (!v10) {
          goto LABEL_33;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v10 + 16));
        uint64_t v5 = (void *)v10;
        unsigned int v11 = -235920773;
        goto LABEL_31;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v12 = *(void **)(a1 + 8);
        if (v12)
        {
          uint64_t v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = v14;
            operator delete(v14);
          }
          uint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v5, v6);
        }
LABEL_33:
        *(void *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      operator new();
    case 6:
      *(void *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      return a2;
  }
  return a2;
}

void sub_224081A78(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::vector_sum>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76AD50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::vector_sum>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76AD50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::vector_sum>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void std::allocator<turi::groupby_operators::vector_sum>::construct[abi:ne180100]<turi::groupby_operators::vector_sum>(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = &unk_26D76ADA0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 13) = 0;
  *(unsigned char *)(a2 + 20) = 3;
  operator new();
}

void turi::groupby_operators::vector_sum::new_instance(turi::groupby_operators::vector_sum *this)
{
}

void turi::groupby_operators::vector_sum::add_element_simple(turi::groupby_operators::vector_sum *this, const turi::flexible_type *a2)
{
  if (!*((unsigned char *)this + 24) && *((unsigned char *)a2 + 12) != 7)
  {
    if (*((unsigned char *)this + 25))
    {
      uint64_t v4 = 1;
      switch(*((unsigned char *)a2 + 12))
      {
        case 3:
          uint64_t v5 = (void *)(*(void *)a2 + 8);
          uint64_t v6 = (void *)(*(void *)a2 + 16);
          char v7 = 3;
          goto LABEL_15;
        case 4:
          uint64_t v5 = (void *)(*(void *)a2 + 8);
          uint64_t v6 = (void *)(*(void *)a2 + 16);
          char v7 = 4;
          goto LABEL_15;
        case 5:
          uint64_t v5 = (void *)(*(void *)a2 + 8);
          uint64_t v6 = (void *)(*(void *)a2 + 16);
          char v7 = 5;
LABEL_15:
          uint64_t v4 = (uint64_t)(*v6 - *v5) >> v7;
          break;
        case 9:
          uint64_t v19 = *(uint64_t **)(*(void *)a2 + 24);
          unint64_t v18 = *(uint64_t **)(*(void *)a2 + 32);
          if (v18 == v19)
          {
            uint64_t v4 = 0;
          }
          else
          {
            uint64_t v4 = *(void *)(*(void *)a2 + 8);
            if (v4)
            {
              uint64_t v4 = 1;
              do
              {
                uint64_t v20 = *v19++;
                v4 *= v20;
              }
              while (v19 != v18);
            }
          }
          break;
        default:
          break;
      }
      size_t v12 = (char *)this + 8;
      uint64_t v13 = 1;
      switch(*((unsigned char *)this + 20))
      {
        case 3:
          uint64_t v14 = (void *)(*(void *)v12 + 8);
          uint64_t v15 = (void *)(*(void *)v12 + 16);
          char v16 = 3;
          goto LABEL_20;
        case 4:
          uint64_t v14 = (void *)(*(void *)v12 + 8);
          uint64_t v15 = (void *)(*(void *)v12 + 16);
          char v16 = 4;
          goto LABEL_20;
        case 5:
          uint64_t v14 = (void *)(*(void *)v12 + 8);
          uint64_t v15 = (void *)(*(void *)v12 + 16);
          char v16 = 5;
LABEL_20:
          uint64_t v13 = (uint64_t)(*v15 - *v14) >> v16;
          break;
        case 9:
          uint64_t v22 = *(uint64_t **)(*(void *)v12 + 24);
          uint64_t v21 = *(uint64_t **)(*(void *)v12 + 32);
          if (v21 == v22)
          {
            uint64_t v13 = 0;
          }
          else
          {
            uint64_t v13 = *(void *)(*(void *)v12 + 8);
            if (v13)
            {
              uint64_t v13 = 1;
              do
              {
                uint64_t v23 = *v22++;
                v13 *= v23;
              }
              while (v22 != v21);
            }
          }
          break;
        default:
          break;
      }
      if (v4 == v13)
      {
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
                uint64_t v17 = *(void *)v12 + *(void *)a2;
                goto LABEL_90;
              case 1:
                double v91 = *(double *)v12 + (double)*(uint64_t *)a2;
                goto LABEL_199;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                unint64_t v59 = *(double **)(*(void *)v12 + 8);
                uint64_t v60 = *(void *)(*(void *)v12 + 16) - (void)v59;
                if (v60)
                {
                  unint64_t v61 = v60 >> 3;
                  double v62 = (double)*(uint64_t *)a2;
                  if (v61 <= 1) {
                    unint64_t v61 = 1;
                  }
                  do
                  {
                    *unint64_t v59 = *v59 + v62;
                    ++v59;
                    --v61;
                  }
                  while (v61);
                }
                return;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 6:
                *(void *)size_t v12 = *(void *)v12 & 0xFF00000000000000 | (*(void *)v12 + *(void *)a2) & 0xFFFFFFFFFFFFFFLL;
                return;
              case 7:
                goto LABEL_250;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                uint64_t v63 = *(uint64_t **)v12;
                uint64_t v65 = *(uint64_t **)(*(void *)v12 + 24);
                uint64_t v64 = *(uint64_t **)(*(void *)v12 + 32);
                if (v64 == v65) {
                  return;
                }
                if (!v63[1]) {
                  return;
                }
                double v66 = (double)*(uint64_t *)a2;
                uint64_t v67 = 1;
                do
                {
                  uint64_t v68 = *v65++;
                  v67 *= v68;
                }
                while (v65 != v64);
                if (!v67) {
                  return;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v63 + 1);
                unint64_t v69 = (v63[4] - v63[3]) >> 3;
                uint64_t v107 = 0;
                std::vector<unsigned long>::vector(&__p, v69, &v107);
                do
                {
                  uint64_t v70 = (uint64_t *)__p;
                  uint64_t v71 = 0;
                  if (v109 != __p)
                  {
                    unint64_t v72 = (v109 - (unsigned char *)__p) >> 3;
                    uint64_t v73 = (uint64_t *)v63[6];
                    if (v72 <= 1) {
                      unint64_t v72 = 1;
                    }
                    do
                    {
                      uint64_t v75 = *v70++;
                      uint64_t v74 = v75;
                      uint64_t v76 = *v73++;
                      v71 += v76 * v74;
                      --v72;
                    }
                    while (v72);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v63 + 1);
                  *(double *)(*(void *)v63[1] + 8 * (v63[9] + v71)) = *(double *)(*(void *)v63[1]
                                                                                  + 8 * (v63[9] + v71))
                                                                      + v66;
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v63 + 1), (uint64_t *)&__p));
                break;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            return;
          case 1:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
                uint64_t v17 = (uint64_t)(*(double *)a2 + (double)*(uint64_t *)v12);
LABEL_90:
                *(void *)size_t v12 = v17;
                return;
              case 1:
                double v91 = *(double *)a2 + *(double *)v12;
LABEL_199:
                *(double *)size_t v12 = v91;
                return;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                unint64_t v99 = *(double **)(*(void *)v12 + 8);
                uint64_t v100 = *(void *)(*(void *)v12 + 16) - (void)v99;
                if (v100)
                {
                  double v101 = *(double *)a2;
                  unint64_t v102 = v100 >> 3;
                  if (v102 <= 1) {
                    unint64_t v102 = 1;
                  }
                  do
                  {
                    double *v99 = v101 + *v99;
                    ++v99;
                    --v102;
                  }
                  while (v102);
                }
                return;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 6:
                double v103 = (*(double *)a2 - (double)(uint64_t)floor(*(double *)a2)) * 1000000.0;
                uint64_t v104 = *((void *)this + 1);
                uint64_t v105 = v104 + vcvtmd_s64_f64(*(double *)a2);
                *((void *)this + 1) = v104 & 0xFF00000000000000 | v105 & 0xFFFFFFFFFFFFFFLL;
                uint64_t v106 = (uint64_t)v103 + *((int *)this + 4);
                if (v106 >= 1000000)
                {
                  *(void *)size_t v12 = (v105 + 1) & 0xFFFFFFFFFFFFFFLL | v104 & 0xFF00000000000000;
                  LODWORD(v106) = v106 - 1000000;
                }
                if (v106 >= 0xF4240) {
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                }
                *((_DWORD *)this + 4) = v106;
                return;
              case 7:
                goto LABEL_250;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                uint64_t v77 = *(uint64_t **)v12;
                unint64_t v79 = *(uint64_t **)(*(void *)v12 + 24);
                uint64_t v78 = *(uint64_t **)(*(void *)v12 + 32);
                if (v78 == v79) {
                  return;
                }
                if (!v77[1]) {
                  return;
                }
                double v80 = *(double *)a2;
                uint64_t v81 = 1;
                do
                {
                  uint64_t v82 = *v79++;
                  v81 *= v82;
                }
                while (v79 != v78);
                if (!v81) {
                  return;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v77 + 1);
                unint64_t v83 = (v77[4] - v77[3]) >> 3;
                uint64_t v107 = 0;
                std::vector<unsigned long>::vector(&__p, v83, &v107);
                do
                {
                  uint64_t v84 = (uint64_t *)__p;
                  uint64_t v85 = 0;
                  if (v109 != __p)
                  {
                    unint64_t v86 = (v109 - (unsigned char *)__p) >> 3;
                    uint64_t v87 = (uint64_t *)v77[6];
                    if (v86 <= 1) {
                      unint64_t v86 = 1;
                    }
                    do
                    {
                      uint64_t v89 = *v84++;
                      uint64_t v88 = v89;
                      uint64_t v90 = *v87++;
                      v85 += v90 * v88;
                      --v86;
                    }
                    while (v86);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v77 + 1);
                  *(double *)(*(void *)v77[1] + 8 * (v77[9] + v85)) = v80
                                                                      + *(double *)(*(void *)v77[1]
                                                                                  + 8 * (v77[9] + v85));
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v77 + 1), (uint64_t *)&__p));
                break;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            return;
          case 2:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_250;
              case 2:
                uint64_t v31 = *(void *)a2;
                if (**(void **)v12 != 1) {
                  operator new();
                }
                uint64_t v32 = (std::string *)(*(void *)v12 + 8);
                int v33 = *(char *)(v31 + 31);
                if (v33 >= 0) {
                  uint64_t v34 = (const std::string::value_type *)(v31 + 8);
                }
                else {
                  uint64_t v34 = *(const std::string::value_type **)(v31 + 8);
                }
                if (v33 >= 0) {
                  std::string::size_type v35 = *(unsigned __int8 *)(v31 + 31);
                }
                else {
                  std::string::size_type v35 = *(void *)(v31 + 16);
                }
                std::string::append(v32, v34, v35);
                return;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 3:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_250;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                uint64_t v92 = *(void *)a2;
                if (**(void **)v12 != 1) {
                  operator new();
                }
                uint64_t v93 = *(void *)v12;
                turi::flexible_type_fail(*(void *)(*(void *)v12 + 16) - *(void *)(*(void *)v12 + 8) == *(void *)(v92 + 16) - *(void *)(v92 + 8));
                uint64_t v94 = *(double **)(v93 + 8);
                uint64_t v95 = *(void *)(v93 + 16) - (void)v94;
                if (v95)
                {
                  unint64_t v96 = v95 >> 3;
                  double v97 = *(double **)(v92 + 8);
                  if (v96 <= 1) {
                    unint64_t v96 = 1;
                  }
                  do
                  {
                    double v98 = *v97++;
                    *uint64_t v94 = v98 + *v94;
                    ++v94;
                    --v96;
                  }
                  while (v96);
                }
                return;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 4:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_250;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 5:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_250;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 6:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_250;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 7:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_250;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 8:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_250;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 8:
                goto LABEL_100;
              case 9:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
          case 9:
            switch(*((unsigned char *)this + 20))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_250;
              case 2:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 3:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_250;
              case 4:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 5:
                if (**(void **)v12 != 1) {
                  operator new();
                }
                goto LABEL_252;
              case 8:
LABEL_100:
                if (**(void **)v12 != 1) {
                  operator new();
                }
LABEL_250:
LABEL_252:
                turi::flexible_type_fail(0);
                return;
              case 9:
                uint64_t v36 = *(void *)a2;
                if (**(void **)v12 != 1) {
                  operator new();
                }
                uint64_t v37 = *(void *)v12;
                uint64_t v38 = (uint64_t *)(*(void *)v12 + 8);
                if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v38, v36 + 8)) {
                  turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                }
                uint64_t v40 = *(uint64_t **)(v37 + 24);
                unint64_t v39 = *(uint64_t **)(v37 + 32);
                if (v39 == v40) {
                  return;
                }
                if (!*v38) {
                  return;
                }
                uint64_t v41 = 1;
                do
                {
                  uint64_t v42 = *v40++;
                  v41 *= v42;
                }
                while (v40 != v39);
                if (!v41) {
                  return;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v38);
                unint64_t v43 = (uint64_t)(*(void *)(v37 + 32) - *(void *)(v37 + 24)) >> 3;
                uint64_t v107 = 0;
                std::vector<unsigned long>::vector(&__p, v43, &v107);
                do
                {
                  unint64_t v44 = (uint64_t *)__p;
                  if (v109 == __p)
                  {
                    uint64_t v53 = 0;
                    double v54 = *(double *)(**(void **)(v36 + 8) + 8 * *(void *)(v36 + 72));
                  }
                  else
                  {
                    uint64_t v45 = 0;
                    unint64_t v46 = (v109 - (unsigned char *)__p) >> 3;
                    unint64_t v47 = *(uint64_t **)(v36 + 48);
                    if (v46 <= 1) {
                      unint64_t v46 = 1;
                    }
                    double v48 = (uint64_t *)__p;
                    unint64_t v49 = v46;
                    do
                    {
                      uint64_t v51 = *v48++;
                      uint64_t v50 = v51;
                      uint64_t v52 = *v47++;
                      v45 += v52 * v50;
                      --v49;
                    }
                    while (v49);
                    uint64_t v53 = 0;
                    double v54 = *(double *)(**(void **)(v36 + 8) + 8 * (*(void *)(v36 + 72) + v45));
                    unint64_t v55 = *(uint64_t **)(v37 + 48);
                    do
                    {
                      uint64_t v57 = *v44++;
                      uint64_t v56 = v57;
                      uint64_t v58 = *v55++;
                      v53 += v58 * v56;
                      --v46;
                    }
                    while (v46);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v38);
                  *(double *)(**(void **)(v37 + 8) + 8 * (*(void *)(v37 + 72) + v53)) = v54
                                                                                          + *(double *)(**(void **)(v37 + 8) + 8 * (*(void *)(v37 + 72) + v53));
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v38, (uint64_t *)&__p));
                break;
              default:
                turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
            }
            return;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (__p)
        {
          double v109 = __p;
          operator delete(__p);
        }
      }
      else
      {
        *((unsigned char *)this + 24) = 1;
      }
    }
    else
    {
      long long v8 = (atomic_ullong *volatile *)((char *)this + 8);
      if ((turi::groupby_operators::vector_sum *)((char *)this + 8) != a2)
      {
        switch(*((unsigned char *)this + 20))
        {
          case 2:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v9 = *v8;
              if (!*v8) {
                goto LABEL_58;
              }
              if (*((char *)v9 + 31) < 0) {
                operator delete((void *)v9[1]);
              }
              uint64_t v10 = v9;
              uint64_t v11 = 0x1012C404EF22A49;
              goto LABEL_57;
            }
            break;
          case 3:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v26 = *v8;
              if (!*v8) {
                goto LABEL_58;
              }
              uint64_t v27 = (void *)v26[1];
              if (v27)
              {
                v26[2] = (atomic_ullong)v27;
                operator delete(v27);
              }
              uint64_t v10 = v26;
              uint64_t v11 = 0x1080C409938AC02;
              goto LABEL_57;
            }
            break;
          case 4:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *v8;
              if (!*v8) {
                goto LABEL_58;
              }
              std::string __p = v24 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_52;
            }
            break;
          case 5:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *v8;
              if (!*v8) {
                goto LABEL_58;
              }
              std::string __p = v24 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_52:
              uint64_t v10 = v24;
              uint64_t v11 = 0x1020C405E66F15BLL;
              goto LABEL_57;
            }
            break;
          case 8:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v28 = *v8;
              if (!*v8) {
                goto LABEL_58;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v28 + 2);
              uint64_t v10 = v28;
              unsigned int v25 = -235920773;
              goto LABEL_56;
            }
            break;
          case 9:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              if (*v8)
              {
                uint64_t v10 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v8);
                unsigned int v25 = 2071181815;
LABEL_56:
                uint64_t v11 = v25 | 0x1030C4000000000;
LABEL_57:
                MEMORY[0x22A614FA0](v10, v11);
              }
LABEL_58:
              *long long v8 = 0;
            }
            break;
          default:
            break;
        }
        uint64_t v29 = *(atomic_ullong **)a2;
        *(void *)((char *)this + 13) = *(void *)((char *)a2 + 5);
        *long long v8 = v29;
        unsigned int v30 = *((unsigned __int8 *)a2 + 12);
        *((unsigned char *)this + 20) = v30;
        if (v30 <= 9 && ((1 << v30) & 0x33C) != 0) {
          atomic_fetch_add(*v8, 1uLL);
        }
      }
      *((unsigned char *)this + 25) = 1;
    }
  }
}

void sub_22408388C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x22A614FA0](v11, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::vector_sum::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  if (!*((unsigned char *)v3 + 24) && !*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a1 + 25))
    {
      if (*((unsigned char *)v3 + 25))
      {
        uint64_t v4 = (uint64_t **)(a1 + 8);
        uint64_t v5 = 1;
        switch(*(unsigned char *)(a1 + 20))
        {
          case 3:
            uint64_t v6 = *v4 + 1;
            char v7 = *v4 + 2;
            char v8 = 3;
            goto LABEL_14;
          case 4:
            uint64_t v6 = *v4 + 1;
            char v7 = *v4 + 2;
            char v8 = 4;
            goto LABEL_14;
          case 5:
            uint64_t v6 = *v4 + 1;
            char v7 = *v4 + 2;
            char v8 = 5;
LABEL_14:
            uint64_t v5 = (uint64_t)(*v7 - *v6) >> v8;
            break;
          case 9:
            unint64_t v18 = (uint64_t *)(*v4)[3];
            uint64_t v17 = (uint64_t *)(*v4)[4];
            if (v17 == v18)
            {
              uint64_t v5 = 0;
            }
            else
            {
              uint64_t v5 = (*v4)[1];
              if (v5)
              {
                uint64_t v5 = 1;
                do
                {
                  uint64_t v19 = *v18++;
                  v5 *= v19;
                }
                while (v18 != v17);
              }
            }
            break;
          default:
            break;
        }
        uint64_t v9 = 1;
        switch(*((unsigned char *)v3 + 20))
        {
          case 3:
            uint64_t v10 = *((void *)v3 + 1);
            uint64_t v11 = (void *)(v10 + 8);
            size_t v12 = (void *)(v10 + 16);
            char v13 = 3;
            goto LABEL_19;
          case 4:
            uint64_t v15 = *((void *)v3 + 1);
            uint64_t v11 = (void *)(v15 + 8);
            size_t v12 = (void *)(v15 + 16);
            char v13 = 4;
            goto LABEL_19;
          case 5:
            uint64_t v14 = *((void *)v3 + 1);
            uint64_t v11 = (void *)(v14 + 8);
            size_t v12 = (void *)(v14 + 16);
            char v13 = 5;
LABEL_19:
            uint64_t v9 = (uint64_t)(*v12 - *v11) >> v13;
            break;
          case 9:
            uint64_t v20 = (void *)*((void *)v3 + 1);
            uint64_t v22 = (uint64_t *)v20[3];
            uint64_t v21 = (uint64_t *)v20[4];
            if (v21 == v22)
            {
              uint64_t v9 = 0;
            }
            else
            {
              uint64_t v9 = v20[1];
              if (v9)
              {
                uint64_t v9 = 1;
                do
                {
                  uint64_t v23 = *v22++;
                  v9 *= v23;
                }
                while (v22 != v21);
              }
            }
            break;
          default:
            break;
        }
        if (v5 == v9)
        {
          switch(*((unsigned char *)v3 + 20))
          {
            case 0:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                  uint64_t v16 = (uint64_t)*v4 + *((void *)v3 + 1);
                  goto LABEL_63;
                case 1:
                  double v84 = *(double *)v4 + (double)*((uint64_t *)v3 + 1);
                  goto LABEL_172;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  uint64_t v52 = (double *)(*v4)[1];
                  uint64_t v53 = (*v4)[2] - (void)v52;
                  if (v53)
                  {
                    unint64_t v54 = v53 >> 3;
                    double v55 = (double)*((uint64_t *)v3 + 1);
                    if (v54 <= 1) {
                      unint64_t v54 = 1;
                    }
                    do
                    {
                      *uint64_t v52 = *v52 + v55;
                      ++v52;
                      --v54;
                    }
                    while (v54);
                  }
                  return;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 6:
                  *uint64_t v4 = (uint64_t *)((unint64_t)*v4 & 0xFF00000000000000 | ((unint64_t)*v4
                                                                                  + *((void *)v3 + 1)) & 0xFFFFFFFFFFFFFFLL);
                  return;
                case 7:
                  goto LABEL_223;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  uint64_t v56 = *v4;
                  uint64_t v58 = (uint64_t *)(*v4)[3];
                  uint64_t v57 = (uint64_t *)(*v4)[4];
                  if (v57 == v58) {
                    return;
                  }
                  if (!v56[1]) {
                    return;
                  }
                  double v59 = (double)*((uint64_t *)v3 + 1);
                  uint64_t v60 = 1;
                  do
                  {
                    uint64_t v61 = *v58++;
                    v60 *= v61;
                  }
                  while (v58 != v57);
                  if (!v60) {
                    return;
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v56 + 1);
                  unint64_t v62 = (v56[4] - v56[3]) >> 3;
                  uint64_t v100 = 0;
                  std::vector<unsigned long>::vector(&__p, v62, &v100);
                  do
                  {
                    uint64_t v63 = (uint64_t *)__p;
                    uint64_t v64 = 0;
                    if (v102 != __p)
                    {
                      unint64_t v65 = (v102 - (unsigned char *)__p) >> 3;
                      double v66 = (uint64_t *)v56[6];
                      if (v65 <= 1) {
                        unint64_t v65 = 1;
                      }
                      do
                      {
                        uint64_t v68 = *v63++;
                        uint64_t v67 = v68;
                        uint64_t v69 = *v66++;
                        v64 += v69 * v67;
                        --v65;
                      }
                      while (v65);
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v56 + 1);
                    *(double *)(*(void *)v56[1] + 8 * (v56[9] + v64)) = *(double *)(*(void *)v56[1]
                                                                                    + 8 * (v56[9] + v64))
                                                                        + v59;
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v56 + 1), (uint64_t *)&__p));
                  break;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              return;
            case 1:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                  uint64_t v16 = (uint64_t)(*((double *)v3 + 1) + (double)(uint64_t)*v4);
LABEL_63:
                  *uint64_t v4 = (uint64_t *)v16;
                  return;
                case 1:
                  double v84 = *((double *)v3 + 1) + *(double *)v4;
LABEL_172:
                  *(double *)uint64_t v4 = v84;
                  return;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  uint64_t v92 = (double *)(*v4)[1];
                  uint64_t v93 = (*v4)[2] - (void)v92;
                  if (v93)
                  {
                    double v94 = *((double *)v3 + 1);
                    unint64_t v95 = v93 >> 3;
                    if (v95 <= 1) {
                      unint64_t v95 = 1;
                    }
                    do
                    {
                      *uint64_t v92 = v94 + *v92;
                      ++v92;
                      --v95;
                    }
                    while (v95);
                  }
                  return;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 6:
                  double v96 = *((double *)v3 + 1);
                  uint64_t v97 = *(void *)(a1 + 8);
                  uint64_t v98 = v97 + vcvtmd_s64_f64(v96);
                  *(void *)(a1 + 8) = v97 & 0xFF00000000000000 | v98 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v99 = (uint64_t)((v96 - (double)(uint64_t)floor(v96)) * 1000000.0) + *(int *)(a1 + 16);
                  if (v99 >= 1000000)
                  {
                    *uint64_t v4 = (uint64_t *)((v98 + 1) & 0xFFFFFFFFFFFFFFLL | v97 & 0xFF00000000000000);
                    LODWORD(v99) = v99 - 1000000;
                  }
                  if (v99 >= 0xF4240) {
                    turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                  }
                  *(_DWORD *)(a1 + 16) = v99;
                  return;
                case 7:
                  goto LABEL_223;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  uint64_t v70 = *v4;
                  unint64_t v72 = (uint64_t *)(*v4)[3];
                  uint64_t v71 = (uint64_t *)(*v4)[4];
                  if (v71 == v72) {
                    return;
                  }
                  if (!v70[1]) {
                    return;
                  }
                  double v73 = *((double *)v3 + 1);
                  uint64_t v74 = 1;
                  do
                  {
                    uint64_t v75 = *v72++;
                    v74 *= v75;
                  }
                  while (v72 != v71);
                  if (!v74) {
                    return;
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v70 + 1);
                  unint64_t v76 = (v70[4] - v70[3]) >> 3;
                  uint64_t v100 = 0;
                  std::vector<unsigned long>::vector(&__p, v76, &v100);
                  do
                  {
                    uint64_t v77 = (uint64_t *)__p;
                    uint64_t v78 = 0;
                    if (v102 != __p)
                    {
                      unint64_t v79 = (v102 - (unsigned char *)__p) >> 3;
                      double v80 = (uint64_t *)v70[6];
                      if (v79 <= 1) {
                        unint64_t v79 = 1;
                      }
                      do
                      {
                        uint64_t v82 = *v77++;
                        uint64_t v81 = v82;
                        uint64_t v83 = *v80++;
                        v78 += v83 * v81;
                        --v79;
                      }
                      while (v79);
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v70 + 1);
                    *(double *)(*(void *)v70[1] + 8 * (v70[9] + v78)) = v73
                                                                        + *(double *)(*(void *)v70[1]
                                                                                    + 8 * (v70[9] + v78));
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v70 + 1), (uint64_t *)&__p));
                  break;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              return;
            case 2:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_223;
                case 2:
                  uint64_t v24 = *((void *)v3 + 1);
                  if (**v4 != 1) {
                    operator new();
                  }
                  unsigned int v25 = (std::string *)(*v4 + 1);
                  int v26 = *(char *)(v24 + 31);
                  if (v26 >= 0) {
                    uint64_t v27 = (const std::string::value_type *)(v24 + 8);
                  }
                  else {
                    uint64_t v27 = *(const std::string::value_type **)(v24 + 8);
                  }
                  if (v26 >= 0) {
                    std::string::size_type v28 = *(unsigned __int8 *)(v24 + 31);
                  }
                  else {
                    std::string::size_type v28 = *(void *)(v24 + 16);
                  }
                  std::string::append(v25, v27, v28);
                  return;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 3:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_223;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  uint64_t v85 = *((void *)v3 + 1);
                  if (**v4 != 1) {
                    operator new();
                  }
                  unint64_t v86 = *v4;
                  turi::flexible_type_fail((*v4)[2] - (*v4)[1] == *(void *)(v85 + 16) - *(void *)(v85 + 8));
                  uint64_t v87 = (double *)v86[1];
                  uint64_t v88 = v86[2] - (void)v87;
                  if (v88)
                  {
                    unint64_t v89 = v88 >> 3;
                    uint64_t v90 = *(double **)(v85 + 8);
                    if (v89 <= 1) {
                      unint64_t v89 = 1;
                    }
                    do
                    {
                      double v91 = *v90++;
                      *uint64_t v87 = v91 + *v87;
                      ++v87;
                      --v89;
                    }
                    while (v89);
                  }
                  return;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 4:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_223;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 5:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_223;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 6:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_223;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 7:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_223;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 8:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_223;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 8:
                  goto LABEL_73;
                case 9:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
            case 9:
              switch(*(unsigned char *)(a1 + 20))
              {
                case 0:
                case 1:
                case 6:
                case 7:
                  goto LABEL_223;
                case 2:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 3:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_223;
                case 4:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 5:
                  if (**v4 != 1) {
                    operator new();
                  }
                  goto LABEL_225;
                case 8:
LABEL_73:
                  if (**v4 != 1) {
                    operator new();
                  }
LABEL_223:
LABEL_225:
                  turi::flexible_type_fail(0);
                  return;
                case 9:
                  uint64_t v29 = *((void *)v3 + 1);
                  if (**v4 != 1) {
                    operator new();
                  }
                  unsigned int v30 = *v4;
                  uint64_t v31 = *v4 + 1;
                  if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v31, v29 + 8)) {
                    turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                  }
                  int v33 = (uint64_t *)v30[3];
                  uint64_t v32 = (uint64_t *)v30[4];
                  if (v32 == v33) {
                    return;
                  }
                  if (!*v31) {
                    return;
                  }
                  uint64_t v34 = 1;
                  do
                  {
                    uint64_t v35 = *v33++;
                    v34 *= v35;
                  }
                  while (v33 != v32);
                  if (!v34) {
                    return;
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v31);
                  unint64_t v36 = (v30[4] - v30[3]) >> 3;
                  uint64_t v100 = 0;
                  std::vector<unsigned long>::vector(&__p, v36, &v100);
                  do
                  {
                    uint64_t v37 = (uint64_t *)__p;
                    if (v102 == __p)
                    {
                      uint64_t v46 = 0;
                      double v47 = *(double *)(**(void **)(v29 + 8) + 8 * *(void *)(v29 + 72));
                    }
                    else
                    {
                      uint64_t v38 = 0;
                      unint64_t v39 = (v102 - (unsigned char *)__p) >> 3;
                      uint64_t v40 = *(uint64_t **)(v29 + 48);
                      if (v39 <= 1) {
                        unint64_t v39 = 1;
                      }
                      uint64_t v41 = (uint64_t *)__p;
                      unint64_t v42 = v39;
                      do
                      {
                        uint64_t v44 = *v41++;
                        uint64_t v43 = v44;
                        uint64_t v45 = *v40++;
                        v38 += v45 * v43;
                        --v42;
                      }
                      while (v42);
                      uint64_t v46 = 0;
                      double v47 = *(double *)(**(void **)(v29 + 8) + 8 * (*(void *)(v29 + 72) + v38));
                      double v48 = (uint64_t *)v30[6];
                      do
                      {
                        uint64_t v50 = *v37++;
                        uint64_t v49 = v50;
                        uint64_t v51 = *v48++;
                        v46 += v51 * v49;
                        --v39;
                      }
                      while (v39);
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique(v31);
                    *(double *)(*(void *)v30[1] + 8 * (v30[9] + v46)) = v47
                                                                        + *(double *)(*(void *)v30[1]
                                                                                    + 8 * (v30[9] + v46));
                  }
                  while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v31, (uint64_t *)&__p));
                  break;
                default:
                  turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
              }
              return;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (__p)
          {
            unint64_t v102 = __p;
            operator delete(__p);
          }
        }
        else
        {
          *(unsigned char *)(a1 + 24) = 1;
        }
      }
    }
    else
    {
      turi::groupby_operators::vector_sum::operator=(a1, (uint64_t)v3);
    }
  }
}

void sub_224085428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x22A614FA0](v11, 0x1020C405E66F15BLL);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_operators::vector_sum::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(this + 24))
  {
    *(void *)(a2 + 5) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 12) = 7;
  }
  else
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 0;
    if (this + 8 != a2)
    {
      *(void *)(a2 + 5) = *(void *)(this + 13);
      *(void *)a2 = *(void *)(this + 8);
      int v2 = *(unsigned __int8 *)(this + 20);
      *(unsigned char *)(a2 + 12) = v2;
      switch(v2)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
          break;
        default:
          return this;
      }
    }
  }
  return this;
}

BOOL turi::groupby_operators::vector_sum::support_type(uint64_t a1, int a2)
{
  return a2 == 3 || a2 == 9;
}

void *turi::groupby_operators::vector_sum::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Vector Sum");
}

unsigned char *turi::groupby_operators::vector_sum::save(turi::groupby_operators::vector_sum *this, turi::oarchive *a2)
{
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v4)
    {
      size_t v9 = 2 * v4 + 2;
      *((void *)a2 + 5) = v9;
      uint64_t v10 = (void *)*((void *)a2 + 2);
      if (v10)
      {
        uint64_t v5 = (unsigned char *)*v10;
        size_t v11 = v10[1] - *v10;
        BOOL v12 = v9 >= v11;
        std::vector<char>::size_type v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v13);
          uint64_t v5 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v12)
        {
          v10[1] = &v5[v9];
        }
      }
      else
      {
        uint64_t v5 = malloc_type_realloc(*((void **)a2 + 3), v9, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      uint64_t v5 = (unsigned char *)*((void *)a2 + 3);
    }
    v5[(*((void *)a2 + 4))++] = *((unsigned char *)this + 25);
  }
  uint64_t v6 = (char *)this + 24;
  if (*(void *)a2)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v8 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v8)
    {
      size_t v14 = 2 * v8 + 2;
      *((void *)a2 + 5) = v14;
      uint64_t v15 = (uint64_t *)*((void *)a2 + 2);
      if (v15)
      {
        double result = (unsigned char *)*v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v18);
          double result = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v17)
        {
          v15[1] = (uint64_t)&result[v14];
        }
      }
      else
      {
        double result = malloc_type_realloc(*((void **)a2 + 3), v14, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = result;
    }
    else
    {
      double result = (unsigned char *)*((void *)a2 + 3);
    }
    result[(*((void *)a2 + 4))++] = *v6;
  }
  return result;
}

void turi::groupby_operators::vector_sum::load(turi::groupby_operators::vector_sum *this, turi::iarchive *a2)
{
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (unint64_t *)this + 1);
  uint64_t v4 = *((void *)a2 + 2);
  if (v4) {
    *((unsigned char *)this + 25) = *(unsigned char *)(v4 + (*((void *)a2 + 3))++);
  }
  else {
    std::istream::read();
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (v5)
  {
    *((unsigned char *)this + 24) = *(unsigned char *)(v5 + (*((void *)a2 + 3))++);
  }
  else
  {
    std::istream::read();
  }
}

void turi::groupby_operators::vector_sum::~vector_sum(turi::groupby_operators::vector_sum *this)
{
  turi::groupby_operators::vector_sum::~vector_sum(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void **v14;

  *(void *)this = &unk_26D76ADA0;
  switch(*((unsigned char *)this + 20))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v2 = *((void *)this + 1);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = (void *)*((void *)this + 1);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v7 = *((void *)this + 1);
        if (v7)
        {
          size_t v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v7 = *((void *)this + 1);
        if (v7)
        {
          size_t v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v8 = *((void *)this + 1);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          size_t v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = (void *)*((void *)this + 1);
        if (v10)
        {
          size_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          BOOL v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          std::vector<char>::size_type v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          size_t v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
}

uint64_t turi::groupby_operators::vector_sum::set_input_type(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v4 = *(void *)(a1 + 8);
        if (!v4) {
          goto LABEL_33;
        }
        if (*(char *)(v4 + 31) < 0) {
          operator delete(*(void **)(v4 + 8));
        }
        uint64_t v5 = (void *)v4;
        uint64_t v6 = 0x1012C404EF22A49;
        goto LABEL_32;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        char v7 = *(void **)(a1 + 8);
        if (!v7) {
          goto LABEL_33;
        }
        unint64_t v8 = (void *)v7[1];
        if (v8)
        {
          v7[2] = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
        uint64_t v6 = 0x1080C409938AC02;
        goto LABEL_32;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        BOOL v17 = (void **)(v9 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
        goto LABEL_18;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        BOOL v17 = (void **)(v9 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_18:
        uint64_t v5 = (void *)v9;
        uint64_t v6 = 0x1020C405E66F15BLL;
        goto LABEL_32;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        if (!v10) {
          goto LABEL_33;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v10 + 16));
        uint64_t v5 = (void *)v10;
        unsigned int v11 = -235920773;
        goto LABEL_31;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v12 = *(void **)(a1 + 8);
        if (v12)
        {
          std::vector<char>::size_type v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = v13;
            operator delete(v13);
          }
          size_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = v14;
            operator delete(v14);
          }
          uint64_t v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v5, v6);
        }
LABEL_33:
        *(void *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      operator new();
    case 6:
      *(void *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      return a2;
  }
  return a2;
}

void sub_224085DDC(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_operators::vector_sum::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = (atomic_ullong *volatile *)(a1 + 8);
    uint64_t v5 = (atomic_ullong **)(a2 + 8);
    switch(*(unsigned char *)(a1 + 20))
    {
      case 2:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v6 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          if (*((char *)v6 + 31) < 0) {
            operator delete((void *)v6[1]);
          }
          atomic_ullong *volatile v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            unint64_t v9[2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          atomic_ullong *volatile v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          uint64_t v23 = (void **)(v11 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          uint64_t v23 = (void **)(v11 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v23);
LABEL_19:
          atomic_ullong *volatile v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v12 + 2);
          atomic_ullong *volatile v7 = v12;
          unsigned int v13 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v14 = *v4;
          if (*v4)
          {
            uint64_t v15 = (void *)v14[6];
            if (v15)
            {
              v14[7] = (atomic_ullong)v15;
              operator delete(v15);
            }
            size_t v16 = (void *)v14[3];
            if (v16)
            {
              void v14[4] = (atomic_ullong)v16;
              operator delete(v16);
            }
            BOOL v17 = (std::__shared_weak_count *)v14[2];
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            atomic_ullong *volatile v7 = v14;
            unsigned int v13 = 2071181815;
LABEL_32:
            uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v7, v8);
          }
LABEL_34:
          *uint64_t v4 = 0;
        }
        break;
      default:
        break;
    }
    std::vector<char>::size_type v18 = *v5;
    *(void *)(a1 + 13) = *(void *)(a2 + 13);
    *uint64_t v4 = v18;
    LODWORD(v18) = *(unsigned __int8 *)(a2 + 20);
    *(unsigned char *)(a1 + 20) = (_BYTE)v18;
    BOOL v19 = v18 > 9;
    int v20 = (1 << (char)v18) & 0x33C;
    if (!v19 && v20 != 0) {
      atomic_fetch_add(*v4, 1uLL);
    }
  }
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void std::__shared_ptr_emplace<turi::groupby_operators::max>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76AE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::max>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76AE40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::max>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::max::new_instance(turi::groupby_operators::max *this)
{
}

uint64_t turi::groupby_operators::max::add_element_simple(uint64_t this, const turi::flexible_type *a2, __n128 a3)
{
  if (*((unsigned char *)a2 + 12) != 7)
  {
    uint64_t v4 = this;
    uint64_t v5 = (const turi::flexible_type *)(this + 8);
    if (*(unsigned char *)(this + 24))
    {
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          switch(*(unsigned char *)(this + 20))
          {
            case 0:
              BOOL v6 = *(void *)v5 < *(void *)a2;
              goto LABEL_47;
            case 1:
              double v30 = *(double *)v5;
              double v31 = (double)*(uint64_t *)a2;
              goto LABEL_85;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              BOOL v10 = *(void *)a2 <= (uint64_t)(*(void *)v5 << 8) >> 8;
              goto LABEL_93;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*(unsigned char *)(this + 20))
          {
            case 0:
              BOOL v10 = *(double *)a2 <= (double)*(uint64_t *)v5;
              goto LABEL_93;
            case 1:
              double v30 = *(double *)v5;
              double v31 = *(double *)a2;
LABEL_85:
              BOOL v32 = v30 < v31;
              goto LABEL_87;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              BOOL v32 = (double)*(int *)(this + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(this + 8) << 8) >> 8) < *(double *)a2;
LABEL_87:
              if (v32 && v5 != a2) {
                goto LABEL_102;
              }
              return this;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v11 = *(unsigned __int8 *)(this + 20);
          if (v11 - 3 < 7 || v11 < 2) {
            return turi::flexible_type_fail(0);
          }
          if (v11 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          this = std::string::compare[abi:ne180100]((const void **)(*(void *)v5 + 8), (unsigned char *)(*(void *)a2 + 8));
          if ((this & 0x80000000) == 0) {
            return this;
          }
          goto LABEL_101;
        case 3:
          unsigned int v13 = *(unsigned __int8 *)(this + 20);
          if (v13 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v13 != 3) {
            return turi::flexible_type_fail(0);
          }
          atomic_ullong *volatile v14 = *(double **)(*(void *)v5 + 8);
          uint64_t v15 = *(double **)(*(void *)a2 + 8);
          unint64_t v16 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v15) >> 3;
          unint64_t v17 = (uint64_t)(*(void *)(*(void *)v5 + 16) - (void)v14) >> 3;
          if (*(double **)(*(void *)v5 + 16) == v14) {
            goto LABEL_34;
          }
          if (v17 <= 1) {
            uint64_t v18 = 1;
          }
          else {
            uint64_t v18 = (uint64_t)(*(void *)(*(void *)v5 + 16) - (void)v14) >> 3;
          }
          uint64_t v19 = (uint64_t)(*(void *)(*(void *)a2 + 16) - (void)v15) >> 3;
          break;
        case 4:
          unsigned int v20 = *(unsigned __int8 *)(this + 20);
          if (v20 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v20 != 4) {
            return turi::flexible_type_fail(0);
          }
          this = turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v45, (uint64_t *)(*(void *)v5 + 8), (void *)(*(void *)a2 + 8));
          if (this) {
            BOOL v21 = v5 == a2;
          }
          else {
            BOOL v21 = 1;
          }
          if (!v21) {
            goto LABEL_102;
          }
          return this;
        case 5:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 6:
          switch(*(unsigned char *)(this + 20))
          {
            case 0:
              BOOL v6 = *(void *)v5 < (uint64_t)(*(void *)a2 << 8) >> 8;
LABEL_47:
              if (v6 && v5 != a2) {
                goto LABEL_102;
              }
              return this;
            case 1:
              BOOL v10 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8) <= *(double *)v5;
LABEL_93:
              if (!v10 && v5 != a2) {
                goto LABEL_102;
              }
              return this;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              uint64_t v35 = (uint64_t)(*(void *)v5 << 8) >> 8;
              if (v35 < (uint64_t)(*(void *)a2 << 8) >> 8
                || v35 == (uint64_t)(*(void *)a2 << 8) >> 8 && *(_DWORD *)(this + 16) < *((_DWORD *)a2 + 2))
              {
                goto LABEL_101;
              }
              return this;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 8:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 9:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v19 && *v14 <= *v15)
      {
        if (*v14 < *v15) {
          goto LABEL_101;
        }
        --v19;
        ++v14;
        ++v15;
        if (!--v18)
        {
LABEL_34:
          if (v17 >= v16) {
            return this;
          }
LABEL_101:
          if (v5 != a2)
          {
LABEL_102:
            switch(*(unsigned char *)(v4 + 20))
            {
              case 2:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  double v36 = *(double *)v5;
                  if (!*(void *)v5) {
                    goto LABEL_128;
                  }
                  if (*(char *)(*(void *)&v36 + 31) < 0) {
                    operator delete(*(void **)(*(void *)&v36 + 8));
                  }
                  double v37 = v36;
                  uint64_t v38 = 0x1012C404EF22A49;
                  goto LABEL_127;
                }
                break;
              case 3:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v39 = *(atomic_ullong *volatile *)v5;
                  if (!*(void *)v5) {
                    goto LABEL_128;
                  }
                  uint64_t v40 = (void *)v39[1];
                  if (v40)
                  {
                    _OWORD v39[2] = (atomic_ullong)v40;
                    operator delete(v40);
                  }
                  double v37 = *(double *)&v39;
                  uint64_t v38 = 0x1080C409938AC02;
                  goto LABEL_127;
                }
                break;
              case 4:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)v5;
                  if (!*(void *)v5) {
                    goto LABEL_128;
                  }
                  uint64_t v45 = (void **)(v41 + 1);
                  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
                  goto LABEL_119;
                }
                break;
              case 5:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v41 = *(atomic_ullong *volatile *)v5;
                  if (!*(void *)v5) {
                    goto LABEL_128;
                  }
                  uint64_t v45 = (void **)(v41 + 1);
                  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v45);
LABEL_119:
                  double v37 = *(double *)&v41;
                  uint64_t v38 = 0x1020C405E66F15BLL;
                  goto LABEL_127;
                }
                break;
              case 8:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  atomic_ullong *volatile v42 = *(atomic_ullong *volatile *)v5;
                  if (!*(void *)v5) {
                    goto LABEL_128;
                  }
                  boost::detail::shared_count::~shared_count((atomic_uint **)v42 + 2);
                  double v37 = *(double *)&v42;
                  unsigned int v43 = -235920773;
                  goto LABEL_126;
                }
                break;
              case 9:
                if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
                {
                  this = *(void *)v5;
                  if (*(void *)v5)
                  {
                    double v37 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)this));
                    unsigned int v43 = 2071181815;
LABEL_126:
                    uint64_t v38 = v43 | 0x1030C4000000000;
LABEL_127:
                    this = MEMORY[0x22A614FA0](*(void *)&v37, v38);
                  }
LABEL_128:
                  *(void *)uint64_t v5 = 0;
                }
                break;
              default:
                break;
            }
            double v44 = *(double *)a2;
            *(void *)((char *)v5 + 5) = *(void *)((char *)a2 + 5);
            *(double *)uint64_t v5 = v44;
            LODWORD(v44) = *((unsigned __int8 *)a2 + 12);
            *(unsigned char *)(v4 + 20) = LOBYTE(v44);
            switch(LODWORD(v44))
            {
              case 2:
              case 3:
              case 4:
              case 5:
              case 8:
              case 9:
                atomic_fetch_add(*(atomic_ullong *volatile *)v5, 1uLL);
                break;
              default:
                return this;
            }
          }
          return this;
        }
      }
    }
    else
    {
      if (v5 != a2)
      {
        switch(*(unsigned char *)(this + 20))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)v5;
              if (!*(void *)v5) {
                goto LABEL_76;
              }
              if (*((char *)v7 + 31) < 0) {
                operator delete((void *)v7[1]);
              }
              uint64_t v8 = v7;
              uint64_t v9 = 0x1012C404EF22A49;
              goto LABEL_75;
            }
            break;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v23 = *(atomic_ullong *volatile *)v5;
              if (!*(void *)v5) {
                goto LABEL_76;
              }
              uint64_t v24 = (void *)v23[1];
              if (v24)
              {
                v23[2] = (atomic_ullong)v24;
                operator delete(v24);
              }
              uint64_t v8 = v23;
              uint64_t v9 = 0x1080C409938AC02;
              goto LABEL_75;
            }
            break;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v25 = *(atomic_ullong *volatile *)v5;
              if (!*(void *)v5) {
                goto LABEL_76;
              }
              uint64_t v45 = (void **)(v25 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v45);
              goto LABEL_67;
            }
            break;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v25 = *(atomic_ullong *volatile *)v5;
              if (!*(void *)v5) {
                goto LABEL_76;
              }
              uint64_t v45 = (void **)(v25 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v45);
LABEL_67:
              uint64_t v8 = v25;
              uint64_t v9 = 0x1020C405E66F15BLL;
              goto LABEL_75;
            }
            break;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v26 = *(atomic_ullong *volatile *)v5;
              if (!*(void *)v5) {
                goto LABEL_76;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v26 + 2);
              uint64_t v8 = v26;
              unsigned int v27 = -235920773;
              goto LABEL_74;
            }
            break;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              this = *(void *)v5;
              if (*(void *)v5)
              {
                uint64_t v8 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)this);
                unsigned int v27 = 2071181815;
LABEL_74:
                uint64_t v9 = v27 | 0x1030C4000000000;
LABEL_75:
                this = MEMORY[0x22A614FA0](v8, v9);
              }
LABEL_76:
              *(void *)uint64_t v5 = 0;
            }
            break;
          default:
            break;
        }
        double v28 = *(double *)a2;
        *(void *)((char *)v5 + 5) = *(void *)((char *)a2 + 5);
        *(double *)uint64_t v5 = v28;
        unsigned int v29 = *((unsigned __int8 *)a2 + 12);
        *(unsigned char *)(v4 + 20) = v29;
        if (v29 <= 9 && ((1 << v29) & 0x33C) != 0) {
          atomic_fetch_add(*(atomic_ullong *volatile *)v5, 1uLL);
        }
      }
      *(unsigned char *)(v4 + 24) = 1;
    }
  }
  return this;
}

uint64_t turi::groupby_operators::max::combine(uint64_t a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 24))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      BOOL v6 = (atomic_ullong *volatile *)(a1 + 8);
      atomic_ullong *volatile v7 = (atomic_ullong **)(result + 8);
      switch(*(unsigned char *)(result + 20))
      {
        case 0:
          switch(*(unsigned char *)(a1 + 20))
          {
            case 0:
              if (result == a1) {
                return result;
              }
              uint64_t v8 = *(void *)(a1 + 8);
              uint64_t v9 = *(void *)(result + 8);
              goto LABEL_91;
            case 1:
              if (result == a1) {
                return result;
              }
              double v34 = *(double *)(a1 + 8);
              double v35 = (double)*(uint64_t *)(result + 8);
              goto LABEL_95;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (result == a1) {
                return result;
              }
              uint64_t v9 = *(void *)(result + 8);
              uint64_t v8 = (uint64_t)(*(void *)(a1 + 8) << 8) >> 8;
LABEL_91:
              if (v8 >= v9) {
                return result;
              }
              goto LABEL_109;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*(unsigned char *)(a1 + 20))
          {
            case 0:
              if (result == a1 || *(double *)(result + 8) <= (double)*(uint64_t *)(a1 + 8)) {
                return result;
              }
              goto LABEL_109;
            case 1:
              if (result == a1) {
                return result;
              }
              double v34 = *(double *)(a1 + 8);
              double v35 = *(double *)(result + 8);
LABEL_95:
              if (v34 >= v35) {
                return result;
              }
              goto LABEL_109;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (result == a1
                || (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8) >= *(double *)(result + 8))
              {
                return result;
              }
              goto LABEL_109;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v15 = *(unsigned __int8 *)(a1 + 20);
          if (v15 - 3 < 7 || v15 < 2) {
            return turi::flexible_type_fail(0);
          }
          if (v15 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t result = std::string::compare[abi:ne180100]((const void **)(*(void *)(a1 + 8) + 8), (unsigned char *)(*(void *)(result + 8) + 8));
          if (v5 == a1 || (result & 0x80000000) == 0) {
            return result;
          }
          goto LABEL_109;
        case 3:
          unsigned int v17 = *(unsigned __int8 *)(a1 + 20);
          if (v17 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v17 != 3) {
            return turi::flexible_type_fail(0);
          }
          uint64_t v18 = (double *)*((void *)*v6 + 1);
          uint64_t v19 = (double *)(*v7)[1];
          unint64_t v20 = ((*v7)[2] - (uint64_t)v19) >> 3;
          unint64_t v21 = (uint64_t)(*((void *)*v6 + 2) - (void)v18) >> 3;
          if (*((double **)*v6 + 2) == v18) {
            goto LABEL_39;
          }
          if (v21 <= 1) {
            uint64_t v22 = 1;
          }
          else {
            uint64_t v22 = (uint64_t)(*((void *)*v6 + 2) - (void)v18) >> 3;
          }
          uint64_t v23 = ((*v7)[2] - (uint64_t)v19) >> 3;
          break;
        case 4:
          unsigned int v24 = *(unsigned __int8 *)(a1 + 20);
          if (v24 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v24 != 4) {
            return turi::flexible_type_fail(0);
          }
          uint64_t result = turi::flexible_type_impl::lt_operator::operator()(v4, (uint64_t)&v46, (uint64_t *)(*(void *)(a1 + 8) + 8), (void *)(*(void *)(result + 8) + 8));
          if (v5 == a1 || (result & 1) == 0) {
            return result;
          }
          goto LABEL_109;
        case 5:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 6:
          switch(*(unsigned char *)(a1 + 20))
          {
            case 0:
              if (result == a1 || (uint64_t)(*(void *)(result + 8) << 8) >> 8 <= *(void *)(a1 + 8)) {
                return result;
              }
              goto LABEL_109;
            case 1:
              if (result == a1
                || (double)*(int *)(result + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(result + 8) << 8) >> 8) <= *(double *)(a1 + 8))
              {
                return result;
              }
              goto LABEL_109;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              uint64_t v36 = (uint64_t)*v6 << 8 >> 8;
              if (v36 < (uint64_t)((void)*v7 << 8) >> 8) {
                goto LABEL_104;
              }
              if (v36 == (uint64_t)((void)*v7 << 8) >> 8
                && result != a1
                && *(_DWORD *)(a1 + 16) < *(_DWORD *)(result + 16))
              {
                goto LABEL_109;
              }
              return result;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 8:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 9:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (1)
      {
        if (!v23 || *v18 > *v19) {
          return result;
        }
        if (*v18 < *v19) {
          break;
        }
        --v23;
        ++v18;
        ++v19;
        if (!--v22)
        {
LABEL_39:
          if (result == a1 || v21 >= v20) {
            return result;
          }
          goto LABEL_109;
        }
      }
LABEL_104:
      if (result == a1) {
        return result;
      }
LABEL_109:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 2:
          if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v37 = *v6;
            if (!*v6) {
              goto LABEL_135;
            }
            if (*((char *)v37 + 31) < 0) {
              operator delete((void *)v37[1]);
            }
            uint64_t v38 = v37;
            uint64_t v39 = 0x1012C404EF22A49;
            goto LABEL_134;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v40 = *v6;
            if (!*v6) {
              goto LABEL_135;
            }
            atomic_ullong *volatile v41 = (void *)v40[1];
            if (v41)
            {
              v40[2] = (atomic_ullong)v41;
              operator delete(v41);
            }
            uint64_t v38 = v40;
            uint64_t v39 = 0x1080C409938AC02;
            goto LABEL_134;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v42 = *v6;
            if (!*v6) {
              goto LABEL_135;
            }
            uint64_t v46 = (void **)(v42 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
            goto LABEL_126;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v42 = *v6;
            if (!*v6) {
              goto LABEL_135;
            }
            uint64_t v46 = (void **)(v42 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_126:
            uint64_t v38 = v42;
            uint64_t v39 = 0x1020C405E66F15BLL;
            goto LABEL_134;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v43 = *v6;
            if (!*v6) {
              goto LABEL_135;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v43 + 2);
            uint64_t v38 = v43;
            unsigned int v44 = -235920773;
            goto LABEL_133;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v6, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t result = (uint64_t)*v6;
            if (*v6)
            {
              uint64_t v38 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)result);
              unsigned int v44 = 2071181815;
LABEL_133:
              uint64_t v39 = v44 | 0x1030C4000000000;
LABEL_134:
              uint64_t result = MEMORY[0x22A614FA0](v38, v39);
            }
LABEL_135:
            *BOOL v6 = 0;
          }
          break;
        default:
          break;
      }
      uint64_t v45 = *v7;
      *(void *)(a1 + 13) = *(void *)(v5 + 13);
      *BOOL v6 = v45;
      LODWORD(v45) = *(unsigned __int8 *)(v5 + 20);
      *(unsigned char *)(a1 + 20) = (_BYTE)v45;
      switch((int)v45)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*v6, 1uLL);
          break;
        default:
          return result;
      }
      return result;
    }
    if (result != a1)
    {
      BOOL v10 = (atomic_ullong **)(result + 8);
      unsigned int v11 = (atomic_ullong *volatile *)(a1 + 8);
      switch(*(unsigned char *)(a1 + 20))
      {
        case 2:
          if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v12 = *v11;
            if (!*v11) {
              goto LABEL_79;
            }
            if (*((char *)v12 + 31) < 0) {
              operator delete((void *)v12[1]);
            }
            unsigned int v13 = v12;
            uint64_t v14 = 0x1012C404EF22A49;
            goto LABEL_78;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v25 = *v11;
            if (!*v11) {
              goto LABEL_79;
            }
            atomic_ullong *volatile v26 = (void *)v25[1];
            if (v26)
            {
              void v25[2] = (atomic_ullong)v26;
              operator delete(v26);
            }
            unsigned int v13 = v25;
            uint64_t v14 = 0x1080C409938AC02;
            goto LABEL_78;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = *v11;
            if (!*v11) {
              goto LABEL_79;
            }
            uint64_t v46 = (void **)(v27 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v46);
            goto LABEL_70;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v27 = *v11;
            if (!*v11) {
              goto LABEL_79;
            }
            uint64_t v46 = (void **)(v27 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v46);
LABEL_70:
            unsigned int v13 = v27;
            uint64_t v14 = 0x1020C405E66F15BLL;
            goto LABEL_78;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v28 = *v11;
            if (!*v11) {
              goto LABEL_79;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v28 + 2);
            unsigned int v13 = v28;
            unsigned int v29 = -235920773;
            goto LABEL_77;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v11, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t result = (uint64_t)*v11;
            if (*v11)
            {
              unsigned int v13 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)result);
              unsigned int v29 = 2071181815;
LABEL_77:
              uint64_t v14 = v29 | 0x1030C4000000000;
LABEL_78:
              uint64_t result = MEMORY[0x22A614FA0](v13, v14);
            }
LABEL_79:
            *unsigned int v11 = 0;
          }
          break;
        default:
          break;
      }
      double v30 = *v10;
      *(void *)(a1 + 13) = *(void *)(v5 + 13);
      *unsigned int v11 = v30;
      LODWORD(v30) = *(unsigned __int8 *)(v5 + 20);
      *(unsigned char *)(a1 + 20) = (_BYTE)v30;
      BOOL v31 = v30 > 9;
      int v32 = (1 << (char)v30) & 0x33C;
      if (!v31 && v32 != 0) {
        atomic_fetch_add(*v11, 1uLL);
      }
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t turi::groupby_operators::max::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(this + 24))
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 0;
    if (this + 8 == a2) {
      return this;
    }
    *(void *)(a2 + 5) = *(void *)(this + 13);
    *(void *)a2 = *(void *)(this + 8);
    unsigned int v2 = *(unsigned __int8 *)(this + 20);
  }
  else
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 0;
    if ((uint64_t *)a2 == &turi::FLEX_UNDEFINED) {
      return this;
    }
    *(void *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(void *)a2 = turi::FLEX_UNDEFINED;
    unsigned int v2 = byte_268083A6C;
  }
  *(unsigned char *)(a2 + 12) = v2;
  BOOL v3 = v2 > 9;
  int v4 = (1 << v2) & 0x33C;
  if (!v3 && v4 != 0) {
    atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
  }
  return this;
}

BOOL turi::groupby_operators::max::support_type(uint64_t a1, unsigned int a2)
{
  return a2 < 2 || a2 == 6;
}

void *turi::groupby_operators::max::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Max");
}

unsigned char *turi::groupby_operators::max::save(turi::groupby_operators::max *this, turi::oarchive *a2)
{
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
  int v4 = (char *)this + 24;
  if (*(void *)a2)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v6 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v6)
    {
      size_t v7 = 2 * v6 + 2;
      *((void *)a2 + 5) = v7;
      uint64_t v8 = (uint64_t *)*((void *)a2 + 2);
      if (v8)
      {
        uint64_t result = (unsigned char *)*v8;
        size_t v9 = v8[1] - *v8;
        BOOL v10 = v7 >= v9;
        std::vector<char>::size_type v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
          uint64_t result = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v10)
        {
          v8[1] = (uint64_t)&result[v7];
        }
      }
      else
      {
        uint64_t result = malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = result;
    }
    else
    {
      uint64_t result = (unsigned char *)*((void *)a2 + 3);
    }
    result[(*((void *)a2 + 4))++] = *v4;
  }
  return result;
}

void turi::groupby_operators::max::load(turi::groupby_operators::max *this, turi::iarchive *a2)
{
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (unint64_t *)this + 1);
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    *((unsigned char *)this + 24) = *(unsigned char *)(v4 + (*((void *)a2 + 3))++);
  }
  else
  {
    std::istream::read();
  }
}

void turi::groupby_operators::max::~max(turi::groupby_operators::max *this)
{
  turi::groupby_operators::max::~max(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void **v14;

  *(void *)this = &unk_26D76AE90;
  switch(*((unsigned char *)this + 20))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v2 = *((void *)this + 1);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          BOOL v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = (void *)*((void *)this + 1);
        if (v5)
        {
          unint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          BOOL v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v7 = *((void *)this + 1);
        if (v7)
        {
          uint64_t v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v7 = *((void *)this + 1);
        if (v7)
        {
          uint64_t v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          BOOL v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *((void *)this + 1);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          BOOL v3 = (void *)v8;
          size_t v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v10 = (void *)*((void *)this + 1);
        if (v10)
        {
          std::vector<char>::size_type v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          atomic_ullong *volatile v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          unsigned int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          BOOL v3 = v10;
          size_t v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
}

uint64_t turi::groupby_operators::max::set_input_type(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v4 = *(void *)(a1 + 8);
        if (!v4) {
          goto LABEL_33;
        }
        if (*(char *)(v4 + 31) < 0) {
          operator delete(*(void **)(v4 + 8));
        }
        uint64_t v5 = (void *)v4;
        uint64_t v6 = 0x1012C404EF22A49;
        goto LABEL_32;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v7 = *(void **)(a1 + 8);
        if (!v7) {
          goto LABEL_33;
        }
        uint64_t v8 = (void *)v7[1];
        if (v8)
        {
          v7[2] = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
        uint64_t v6 = 0x1080C409938AC02;
        goto LABEL_32;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        unsigned int v17 = (void **)(v9 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
        goto LABEL_18;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        unsigned int v17 = (void **)(v9 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_18:
        uint64_t v5 = (void *)v9;
        uint64_t v6 = 0x1020C405E66F15BLL;
        goto LABEL_32;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        if (!v10) {
          goto LABEL_33;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v10 + 16));
        uint64_t v5 = (void *)v10;
        unsigned int v11 = -235920773;
        goto LABEL_31;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v12 = *(void **)(a1 + 8);
        if (v12)
        {
          unsigned int v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = v14;
            operator delete(v14);
          }
          unsigned int v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v5, v6);
        }
LABEL_33:
        *(void *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      operator new();
    case 6:
      *(void *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      return a2;
  }
  return a2;
}

void sub_224087A98(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::min>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76AF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::min>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76AF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::min>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::min::new_instance(turi::groupby_operators::min *this)
{
}

uint64_t turi::groupby_operators::min::add_element_simple(uint64_t this, atomic_ullong *volatile *a2, __n128 a3)
{
  if (*((unsigned char *)a2 + 12) != 7)
  {
    uint64_t v4 = this;
    if (*(unsigned char *)(this + 24))
    {
      uint64_t v5 = (atomic_ullong *volatile *)(this + 8);
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          switch(*(unsigned char *)(this + 20))
          {
            case 0:
              BOOL v6 = (uint64_t)*v5 <= (uint64_t)*a2;
              goto LABEL_84;
            case 1:
              double v28 = *(double *)v5;
              double v29 = (double)*(uint64_t *)a2;
              goto LABEL_82;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if ((uint64_t)*a2 < (uint64_t)*v5 << 8 >> 8 && v5 != a2) {
                goto LABEL_99;
              }
              return this;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*(unsigned char *)(this + 20))
          {
            case 0:
              BOOL v10 = *(double *)a2 < (double)*(uint64_t *)v5;
              goto LABEL_90;
            case 1:
              double v28 = *(double *)v5;
              double v29 = *(double *)a2;
LABEL_82:
              BOOL v6 = v28 <= v29;
              goto LABEL_84;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              BOOL v6 = (double)*(int *)(this + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(this + 8) << 8) >> 8) <= *(double *)a2;
              goto LABEL_84;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v11 = *(unsigned __int8 *)(this + 20);
          if (v11 - 3 < 7 || v11 < 2) {
            return turi::flexible_type_fail(0);
          }
          if (v11 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          this = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)*a2 + 1, (void *)*v5 + 1);
          goto LABEL_38;
        case 3:
          unsigned int v13 = *(unsigned __int8 *)(this + 20);
          if (v13 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v13 != 3) {
            return turi::flexible_type_fail(0);
          }
          uint64_t v14 = (double *)*((void *)*v5 + 1);
          unsigned int v15 = (double *)*((void *)*a2 + 1);
          unint64_t v16 = (uint64_t)(*((void *)*a2 + 2) - (void)v15) >> 3;
          unint64_t v17 = (uint64_t)(*((void *)*v5 + 2) - (void)v14) >> 3;
          if (*((double **)*v5 + 2) == v14) {
            goto LABEL_33;
          }
          if (v17 <= 1) {
            uint64_t v18 = 1;
          }
          else {
            uint64_t v18 = (uint64_t)(*((void *)*v5 + 2) - (void)v14) >> 3;
          }
          uint64_t v19 = (uint64_t)(*((void *)*a2 + 2) - (void)v15) >> 3;
          break;
        case 4:
          unsigned int v20 = *(unsigned __int8 *)(this + 20);
          if (v20 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v20 != 4) {
            return turi::flexible_type_fail(0);
          }
          this = turi::flexible_type_impl::gt_operator::operator()(a3, (uint64_t)&v43, (uint64_t *)*v5 + 1, (void *)*a2 + 1);
LABEL_38:
          if (this) {
            BOOL v21 = v5 == a2;
          }
          else {
            BOOL v21 = 1;
          }
          if (!v21) {
            goto LABEL_99;
          }
          return this;
        case 5:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 6:
          switch(*(unsigned char *)(this + 20))
          {
            case 0:
              BOOL v6 = (uint64_t)*v5 <= (uint64_t)*a2 << 8 >> 8;
LABEL_84:
              if (!v6 && v5 != a2) {
                goto LABEL_99;
              }
              return this;
            case 1:
              BOOL v10 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)*a2 << 8 >> 8) < *(double *)v5;
LABEL_90:
              if (v10 && v5 != a2) {
                goto LABEL_99;
              }
              return this;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              uint64_t v33 = (uint64_t)*v5 << 8 >> 8;
              if (v33 > (uint64_t)*a2 << 8 >> 8
                || v33 == (uint64_t)*a2 << 8 >> 8 && *(_DWORD *)(this + 16) > *((_DWORD *)a2 + 2))
              {
                goto LABEL_98;
              }
              return this;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 8:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 9:
          if (*(unsigned __int8 *)(this + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v19 && *v14 <= *v15)
      {
        if (*v14 < *v15) {
          return this;
        }
        --v19;
        ++v14;
        ++v15;
        if (!--v18)
        {
LABEL_33:
          if (v17 <= v16) {
            return this;
          }
          break;
        }
      }
LABEL_98:
      if (v5 != a2)
      {
LABEL_99:
        switch(*(unsigned char *)(v4 + 20))
        {
          case 2:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v34 = *v5;
              if (!*v5) {
                goto LABEL_125;
              }
              if (*((char *)v34 + 31) < 0) {
                operator delete((void *)v34[1]);
              }
              double v35 = v34;
              uint64_t v36 = 0x1012C404EF22A49;
              goto LABEL_124;
            }
            break;
          case 3:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v37 = *v5;
              if (!*v5) {
                goto LABEL_125;
              }
              uint64_t v38 = (void *)v37[1];
              if (v38)
              {
                _OWORD v37[2] = (atomic_ullong)v38;
                operator delete(v38);
              }
              double v35 = v37;
              uint64_t v36 = 0x1080C409938AC02;
              goto LABEL_124;
            }
            break;
          case 4:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v39 = *v5;
              if (!*v5) {
                goto LABEL_125;
              }
              atomic_ullong *volatile v43 = (void **)(v39 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
              goto LABEL_116;
            }
            break;
          case 5:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v39 = *v5;
              if (!*v5) {
                goto LABEL_125;
              }
              atomic_ullong *volatile v43 = (void **)(v39 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_116:
              double v35 = v39;
              uint64_t v36 = 0x1020C405E66F15BLL;
              goto LABEL_124;
            }
            break;
          case 8:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v40 = *v5;
              if (!*v5) {
                goto LABEL_125;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v40 + 2);
              double v35 = v40;
              unsigned int v41 = -235920773;
              goto LABEL_123;
            }
            break;
          case 9:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              this = (uint64_t)*v5;
              if (*v5)
              {
                double v35 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)this);
                unsigned int v41 = 2071181815;
LABEL_123:
                uint64_t v36 = v41 | 0x1030C4000000000;
LABEL_124:
                this = MEMORY[0x22A614FA0](v35, v36);
              }
LABEL_125:
              atomic_ullong *volatile *v5 = 0;
            }
            break;
          default:
            break;
        }
        atomic_ullong *volatile v42 = *a2;
        *(atomic_ullong **)(v4 + 13) = *(atomic_ullong *volatile *)((char *)a2 + 5);
        atomic_ullong *volatile *v5 = v42;
        LODWORD(v42) = *((unsigned __int8 *)a2 + 12);
        *(unsigned char *)(v4 + 20) = (_BYTE)v42;
        switch((int)v42)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
            goto LABEL_73;
          default:
            return this;
        }
      }
    }
    else
    {
      *(unsigned char *)(this + 24) = 1;
      uint64_t v5 = (atomic_ullong *volatile *)(this + 8);
      if ((atomic_ullong *volatile *)(this + 8) != a2)
      {
        switch(*(unsigned char *)(this + 20))
        {
          case 2:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v7 = *v5;
              if (!*v5) {
                goto LABEL_71;
              }
              if (*((char *)v7 + 31) < 0) {
                operator delete((void *)v7[1]);
              }
              uint64_t v8 = v7;
              uint64_t v9 = 0x1012C404EF22A49;
              goto LABEL_70;
            }
            break;
          case 3:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v22 = *v5;
              if (!*v5) {
                goto LABEL_71;
              }
              uint64_t v23 = (void *)v22[1];
              if (v23)
              {
                v22[2] = (atomic_ullong)v23;
                operator delete(v23);
              }
              uint64_t v8 = v22;
              uint64_t v9 = 0x1080C409938AC02;
              goto LABEL_70;
            }
            break;
          case 4:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *v5;
              if (!*v5) {
                goto LABEL_71;
              }
              atomic_ullong *volatile v43 = (void **)(v24 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v43);
              goto LABEL_62;
            }
            break;
          case 5:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *v5;
              if (!*v5) {
                goto LABEL_71;
              }
              atomic_ullong *volatile v43 = (void **)(v24 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v43);
LABEL_62:
              uint64_t v8 = v24;
              uint64_t v9 = 0x1020C405E66F15BLL;
              goto LABEL_70;
            }
            break;
          case 8:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v25 = *v5;
              if (!*v5) {
                goto LABEL_71;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v25 + 2);
              uint64_t v8 = v25;
              unsigned int v26 = -235920773;
              goto LABEL_69;
            }
            break;
          case 9:
            if (atomic_fetch_add(*v5, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              this = (uint64_t)*v5;
              if (*v5)
              {
                uint64_t v8 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)this);
                unsigned int v26 = 2071181815;
LABEL_69:
                uint64_t v9 = v26 | 0x1030C4000000000;
LABEL_70:
                this = MEMORY[0x22A614FA0](v8, v9);
              }
LABEL_71:
              atomic_ullong *volatile *v5 = 0;
            }
            break;
          default:
            break;
        }
        atomic_ullong *volatile v27 = *a2;
        *(atomic_ullong **)(v4 + 13) = *(atomic_ullong *volatile *)((char *)a2 + 5);
        atomic_ullong *volatile *v5 = v27;
        LODWORD(v27) = *((unsigned __int8 *)a2 + 12);
        *(unsigned char *)(v4 + 20) = (_BYTE)v27;
        switch((int)v27)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
LABEL_73:
            atomic_fetch_add(*v5, 1uLL);
            break;
          default:
            return this;
        }
      }
    }
  }
  return this;
}

uint64_t turi::groupby_operators::min::combine(uint64_t a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v5 = result;
  if (*(unsigned char *)(result + 24))
  {
    BOOL v6 = (atomic_ullong **)(result + 8);
    if (*(unsigned char *)(a1 + 24))
    {
      atomic_ullong *volatile v7 = (atomic_ullong *volatile *)(a1 + 8);
      switch(*(unsigned char *)(result + 20))
      {
        case 0:
          switch(*(unsigned char *)(a1 + 20))
          {
            case 0:
              if (result == a1) {
                return result;
              }
              uint64_t v8 = *(void *)(a1 + 8);
              uint64_t v9 = *(void *)(result + 8);
              goto LABEL_86;
            case 1:
              if (result == a1) {
                return result;
              }
              double v29 = *(double *)(a1 + 8);
              double v30 = (double)*(uint64_t *)(result + 8);
              goto LABEL_90;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (result == a1) {
                return result;
              }
              uint64_t v9 = *(void *)(result + 8);
              uint64_t v8 = (uint64_t)(*(void *)(a1 + 8) << 8) >> 8;
LABEL_86:
              if (v8 <= v9) {
                return result;
              }
              goto LABEL_100;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*(unsigned char *)(a1 + 20))
          {
            case 0:
              if (result == a1 || *(double *)(result + 8) >= (double)*(uint64_t *)(a1 + 8)) {
                return result;
              }
              goto LABEL_100;
            case 1:
              if (result == a1) {
                return result;
              }
              double v29 = *(double *)(a1 + 8);
              double v30 = *(double *)(result + 8);
LABEL_90:
              if (v29 <= v30) {
                return result;
              }
              goto LABEL_100;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              if (result == a1
                || (double)*(int *)(a1 + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(a1 + 8) << 8) >> 8) <= *(double *)(result + 8))
              {
                return result;
              }
              goto LABEL_100;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v13 = *(unsigned __int8 *)(a1 + 20);
          if (v13 - 3 < 7 || v13 < 2) {
            return turi::flexible_type_fail(0);
          }
          if (v13 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          uint64_t result = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*(void *)(result + 8) + 8), (void *)(*(void *)(a1 + 8) + 8));
          goto LABEL_43;
        case 3:
          unsigned int v15 = *(unsigned __int8 *)(a1 + 20);
          if (v15 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v15 != 3) {
            return turi::flexible_type_fail(0);
          }
          unint64_t v16 = (double *)*((void *)*v7 + 1);
          unint64_t v17 = (double *)(*v6)[1];
          unint64_t v18 = ((*v6)[2] - (uint64_t)v17) >> 3;
          unint64_t v19 = (uint64_t)(*((void *)*v7 + 2) - (void)v16) >> 3;
          if (*((double **)*v7 + 2) == v16) {
            goto LABEL_37;
          }
          if (v19 <= 1) {
            uint64_t v20 = 1;
          }
          else {
            uint64_t v20 = (uint64_t)(*((void *)*v7 + 2) - (void)v16) >> 3;
          }
          uint64_t v21 = ((*v6)[2] - (uint64_t)v17) >> 3;
          break;
        case 4:
          unsigned int v22 = *(unsigned __int8 *)(a1 + 20);
          if (v22 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v22 != 4) {
            return turi::flexible_type_fail(0);
          }
          uint64_t result = turi::flexible_type_impl::gt_operator::operator()(v4, (uint64_t)&v41, (uint64_t *)(*(void *)(a1 + 8) + 8), (void *)(*(void *)(result + 8) + 8));
LABEL_43:
          if (v5 == a1 || (result & 1) == 0) {
            return result;
          }
          goto LABEL_100;
        case 5:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 6:
          switch(*(unsigned char *)(a1 + 20))
          {
            case 0:
              if (result == a1 || (uint64_t)(*(void *)(result + 8) << 8) >> 8 >= *(void *)(a1 + 8)) {
                return result;
              }
              goto LABEL_100;
            case 1:
              if (result == a1
                || (double)*(int *)(result + 16) / 1000000.0 + (double)((uint64_t)(*(void *)(result + 8) << 8) >> 8) >= *(double *)(a1 + 8))
              {
                return result;
              }
              goto LABEL_100;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              return turi::flexible_type_fail(0);
            case 6:
              uint64_t v31 = (uint64_t)*v7 << 8 >> 8;
              if (v31 > (uint64_t)((void)*v6 << 8) >> 8) {
                goto LABEL_99;
              }
              if (v31 != (uint64_t)((void)*v6 << 8) >> 8
                || result == a1
                || *(_DWORD *)(a1 + 16) <= *(_DWORD *)(result + 16))
              {
                return result;
              }
              goto LABEL_100;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 8:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        case 9:
          if (*(unsigned __int8 *)(a1 + 20) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          return turi::flexible_type_fail(0);
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      do
      {
        if (!v21 || *v16 > *v17)
        {
LABEL_99:
          if (result == a1) {
            return result;
          }
          goto LABEL_100;
        }
        if (*v16 < *v17) {
          return result;
        }
        --v21;
        ++v16;
        ++v17;
        --v20;
      }
      while (v20);
LABEL_37:
      if (result == a1 || v19 <= v18) {
        return result;
      }
LABEL_100:
      switch(*(unsigned char *)(a1 + 20))
      {
        case 2:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v32 = *v7;
            if (!*v7) {
              goto LABEL_126;
            }
            if (*((char *)v32 + 31) < 0) {
              operator delete((void *)v32[1]);
            }
            uint64_t v33 = v32;
            uint64_t v34 = 0x1012C404EF22A49;
            goto LABEL_125;
          }
          break;
        case 3:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v35 = *v7;
            if (!*v7) {
              goto LABEL_126;
            }
            uint64_t v36 = (void *)v35[1];
            if (v36)
            {
              uint64_t v35[2] = (atomic_ullong)v36;
              operator delete(v36);
            }
            uint64_t v33 = v35;
            uint64_t v34 = 0x1080C409938AC02;
            goto LABEL_125;
          }
          break;
        case 4:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v37 = *v7;
            if (!*v7) {
              goto LABEL_126;
            }
            unsigned int v41 = (void **)(v37 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
            goto LABEL_117;
          }
          break;
        case 5:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v37 = *v7;
            if (!*v7) {
              goto LABEL_126;
            }
            unsigned int v41 = (void **)(v37 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_117:
            uint64_t v33 = v37;
            uint64_t v34 = 0x1020C405E66F15BLL;
            goto LABEL_125;
          }
          break;
        case 8:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v38 = *v7;
            if (!*v7) {
              goto LABEL_126;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v38 + 2);
            uint64_t v33 = v38;
            unsigned int v39 = -235920773;
            goto LABEL_124;
          }
          break;
        case 9:
          if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            uint64_t result = (uint64_t)*v7;
            if (*v7)
            {
              uint64_t v33 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)result);
              unsigned int v39 = 2071181815;
LABEL_124:
              uint64_t v34 = v39 | 0x1030C4000000000;
LABEL_125:
              uint64_t result = MEMORY[0x22A614FA0](v33, v34);
            }
LABEL_126:
            atomic_ullong *volatile *v7 = 0;
          }
          break;
        default:
          break;
      }
      atomic_ullong *volatile v40 = *v6;
      *(void *)(a1 + 13) = *(void *)(v5 + 13);
      atomic_ullong *volatile *v7 = v40;
      LODWORD(v40) = *(unsigned __int8 *)(v5 + 20);
      *(unsigned char *)(a1 + 20) = (_BYTE)v40;
      switch((int)v40)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          goto LABEL_80;
        default:
          return result;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 24) = 1;
      if (result != a1)
      {
        atomic_ullong *volatile v7 = (atomic_ullong *volatile *)(a1 + 8);
        switch(*(unsigned char *)(a1 + 20))
        {
          case 2:
            if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v10 = *v7;
              if (!*v7) {
                goto LABEL_78;
              }
              if (*((char *)v10 + 31) < 0) {
                operator delete((void *)v10[1]);
              }
              unsigned int v11 = v10;
              uint64_t v12 = 0x1012C404EF22A49;
              goto LABEL_77;
            }
            break;
          case 3:
            if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v23 = *v7;
              if (!*v7) {
                goto LABEL_78;
              }
              atomic_ullong *volatile v24 = (void *)v23[1];
              if (v24)
              {
                v23[2] = (atomic_ullong)v24;
                operator delete(v24);
              }
              unsigned int v11 = v23;
              uint64_t v12 = 0x1080C409938AC02;
              goto LABEL_77;
            }
            break;
          case 4:
            if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v25 = *v7;
              if (!*v7) {
                goto LABEL_78;
              }
              unsigned int v41 = (void **)(v25 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v41);
              goto LABEL_69;
            }
            break;
          case 5:
            if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v25 = *v7;
              if (!*v7) {
                goto LABEL_78;
              }
              unsigned int v41 = (void **)(v25 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v41);
LABEL_69:
              unsigned int v11 = v25;
              uint64_t v12 = 0x1020C405E66F15BLL;
              goto LABEL_77;
            }
            break;
          case 8:
            if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v26 = *v7;
              if (!*v7) {
                goto LABEL_78;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v26 + 2);
              unsigned int v11 = v26;
              unsigned int v27 = -235920773;
              goto LABEL_76;
            }
            break;
          case 9:
            if (atomic_fetch_add(*v7, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t result = (uint64_t)*v7;
              if (*v7)
              {
                unsigned int v11 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)result);
                unsigned int v27 = 2071181815;
LABEL_76:
                uint64_t v12 = v27 | 0x1030C4000000000;
LABEL_77:
                uint64_t result = MEMORY[0x22A614FA0](v11, v12);
              }
LABEL_78:
              atomic_ullong *volatile *v7 = 0;
            }
            break;
          default:
            break;
        }
        double v28 = *v6;
        *(void *)(a1 + 13) = *(void *)(v5 + 13);
        atomic_ullong *volatile *v7 = v28;
        LODWORD(v28) = *(unsigned __int8 *)(v5 + 20);
        *(unsigned char *)(a1 + 20) = (_BYTE)v28;
        switch((int)v28)
        {
          case 2:
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
LABEL_80:
            atomic_fetch_add(*v7, 1uLL);
            break;
          default:
            return result;
        }
      }
    }
  }
  return result;
}

void *turi::groupby_operators::min::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Min");
}

void turi::groupby_operators::min::~min(turi::groupby_operators::min *this)
{
  turi::groupby_operators::min::~min(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void **v14;

  *(void *)this = &unk_26D76AF80;
  switch(*((unsigned char *)this + 20))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unsigned int v2 = *((void *)this + 1);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          BOOL v3 = (void *)v2;
          __n128 v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = (void *)*((void *)this + 1);
        if (v5)
        {
          BOOL v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          BOOL v3 = v5;
          __n128 v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *((void *)this + 1);
        if (v7)
        {
          uint64_t v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *((void *)this + 1);
        if (v7)
        {
          uint64_t v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          BOOL v3 = (void *)v7;
          __n128 v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v8 = *((void *)this + 1);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          BOOL v3 = (void *)v8;
          uint64_t v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = (void *)*((void *)this + 1);
        if (v10)
        {
          unsigned int v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          unsigned int v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          BOOL v3 = v10;
          uint64_t v9 = 2071181815;
LABEL_31:
          __n128 v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
}

uint64_t turi::groupby_operators::min::set_input_type(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v4 = *(void *)(a1 + 8);
        if (!v4) {
          goto LABEL_33;
        }
        if (*(char *)(v4 + 31) < 0) {
          operator delete(*(void **)(v4 + 8));
        }
        uint64_t v5 = (void *)v4;
        uint64_t v6 = 0x1012C404EF22A49;
        goto LABEL_32;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(void **)(a1 + 8);
        if (!v7) {
          goto LABEL_33;
        }
        uint64_t v8 = (void *)v7[1];
        if (v8)
        {
          v7[2] = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
        uint64_t v6 = 0x1080C409938AC02;
        goto LABEL_32;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        unint64_t v17 = (void **)(v9 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
        goto LABEL_18;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        unint64_t v17 = (void **)(v9 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_18:
        uint64_t v5 = (void *)v9;
        uint64_t v6 = 0x1020C405E66F15BLL;
        goto LABEL_32;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        if (!v10) {
          goto LABEL_33;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v10 + 16));
        uint64_t v5 = (void *)v10;
        unsigned int v11 = -235920773;
        goto LABEL_31;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = *(void **)(a1 + 8);
        if (v12)
        {
          unsigned int v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = v13;
            operator delete(v13);
          }
          uint64_t v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = v14;
            operator delete(v14);
          }
          unsigned int v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v5, v6);
        }
LABEL_33:
        *(void *)(a1 + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      operator new();
    case 6:
      *(void *)(a1 + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      return a2;
  }
  return a2;
}

void sub_2240892F8(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::argmin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::argmin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::argmin>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::argmin::new_instance(turi::groupby_operators::argmin *this)
{
}

void turi::groupby_operators::argmin::add_element(uint64_t a1, uint64_t **a2, __n128 a3)
{
  uint64_t v4 = *a2;
  if (*((unsigned char *)v4 + 12) != 7)
  {
    uint64_t v6 = (uint64_t **)(a1 + 8);
    if (*(unsigned char *)(a1 + 32))
    {
      atomic_ullong *volatile v7 = *v6;
      switch(*((unsigned char *)v4 + 12))
      {
        case 0:
          switch(*((unsigned char *)v7 + 12))
          {
            case 0:
              if (v6 == a2) {
                return;
              }
              uint64_t v8 = *v7;
              double v9 = *(double *)v4;
              goto LABEL_56;
            case 1:
              if (v6 == a2) {
                return;
              }
              double v22 = *(double *)v7;
              double v23 = (double)*v4;
              goto LABEL_60;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_50;
            case 6:
              if (v6 == a2) {
                return;
              }
              double v9 = *(double *)v4;
              uint64_t v8 = *v7 << 8 >> 8;
LABEL_56:
              if (v8 <= *(uint64_t *)&v9) {
                return;
              }
              goto LABEL_70;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*((unsigned char *)v7 + 12))
          {
            case 0:
              if (v6 == a2 || *(double *)v4 >= (double)*v7) {
                return;
              }
              goto LABEL_70;
            case 1:
              if (v6 == a2) {
                return;
              }
              double v22 = *(double *)v7;
              double v23 = *(double *)v4;
LABEL_60:
              if (v22 <= v23) {
                return;
              }
              goto LABEL_70;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_50;
            case 6:
              if (v6 == a2 || (double)*((int *)v7 + 2) / 1000000.0 + (double)(*v7 << 8 >> 8) <= *(double *)v4) {
                return;
              }
              goto LABEL_70;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v10 = *((unsigned __int8 *)v7 + 12);
          if (v10 - 3 < 7 || v10 < 2) {
            goto LABEL_50;
          }
          if (v10 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          BOOL v12 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*v4 + 8), (void *)(*v7 + 8));
          goto LABEL_38;
        case 3:
          unsigned int v13 = *((unsigned __int8 *)v7 + 12);
          if (v13 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v13 != 3) {
            goto LABEL_50;
          }
          uint64_t v15 = *v7 + 8;
          uint64_t v14 = *(double **)v15;
          unint64_t v16 = *(double **)(*v4 + 8);
          unint64_t v17 = (uint64_t)(*(void *)(*v4 + 16) - (void)v16) >> 3;
          unint64_t v18 = (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3;
          if (*(void *)(v15 + 8) == *(void *)v15) {
            goto LABEL_32;
          }
          if (v18 <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = v18;
          }
          uint64_t v20 = (uint64_t)(*(void *)(*v4 + 16) - (void)v16) >> 3;
          break;
        case 4:
          unsigned int v21 = *((unsigned __int8 *)v7 + 12);
          if (v21 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v21 != 4) {
            goto LABEL_50;
          }
          BOOL v12 = turi::flexible_type_impl::gt_operator::operator()(a3, (uint64_t)&v25, (uint64_t *)(*v7 + 8), (void *)(*v4 + 8));
LABEL_38:
          if (v6 == a2 || !v12) {
            return;
          }
          goto LABEL_70;
        case 5:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_50;
        case 6:
          switch(*((unsigned char *)v7 + 12))
          {
            case 0:
              if (v6 == a2 || *v4 << 8 >> 8 >= *v7) {
                return;
              }
              goto LABEL_70;
            case 1:
              if (v6 == a2 || (double)*((int *)v4 + 2) / 1000000.0 + (double)(*v4 << 8 >> 8) >= *(double *)v7) {
                return;
              }
              goto LABEL_70;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_50;
            case 6:
              uint64_t v24 = *v7 << 8 >> 8;
              if (v24 > *v4 << 8 >> 8) {
                goto LABEL_69;
              }
              if (v24 != *v4 << 8 >> 8 || v6 == a2 || *((_DWORD *)v7 + 2) <= *((_DWORD *)v4 + 2)) {
                return;
              }
              goto LABEL_70;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 8:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_50;
        case 9:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_50:
          turi::flexible_type_fail(0);
          return;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v20 && *v14 <= *v16)
      {
        if (*v14 < *v16) {
          return;
        }
        --v20;
        ++v14;
        ++v16;
        if (!--v19)
        {
LABEL_32:
          if (v6 == a2 || v18 <= v17) {
            return;
          }
LABEL_70:
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v6, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
          return;
        }
      }
LABEL_69:
      if (v6 == a2) {
        return;
      }
      goto LABEL_70;
    }
    if (v6 != a2) {
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v4, a2[1], ((char *)a2[1] - (char *)v4) >> 4);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void turi::groupby_operators::argmin::add_element_simple()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "argmin does not support add_element_simple with one value";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void turi::groupby_operators::argmin::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v5 = v3;
  if (*((unsigned char *)v3 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t v6 = v3[1];
      uint64_t v7 = *(void *)(a1 + 8);
      switch(*((unsigned char *)v6 + 12))
      {
        case 0:
          switch(*(unsigned char *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1) {
                return;
              }
              uint64_t v8 = *(void *)v7;
              double v9 = *(double *)v6;
              goto LABEL_59;
            case 1:
              if (v3 == (uint64_t **)a1) {
                return;
              }
              double v23 = *(double *)v7;
              double v24 = (double)*v6;
              goto LABEL_63;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_53;
            case 6:
              if (v3 == (uint64_t **)a1) {
                return;
              }
              double v9 = *(double *)v6;
              uint64_t v8 = (uint64_t)(*(void *)v7 << 8) >> 8;
LABEL_59:
              if (v8 <= *(uint64_t *)&v9) {
                return;
              }
              goto LABEL_73;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*(unsigned char *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1 || *(double *)v6 >= (double)*(uint64_t *)v7) {
                return;
              }
              goto LABEL_73;
            case 1:
              if (v3 == (uint64_t **)a1) {
                return;
              }
              double v23 = *(double *)v7;
              double v24 = *(double *)v6;
LABEL_63:
              if (v23 <= v24) {
                return;
              }
              goto LABEL_73;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_53;
            case 6:
              if (v3 == (uint64_t **)a1
                || (double)*(int *)(v7 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v7 << 8) >> 8) <= *(double *)v6)
              {
                return;
              }
              goto LABEL_73;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v10 = *(unsigned __int8 *)(v7 + 12);
          if (v10 - 3 < 7 || v10 < 2) {
            goto LABEL_53;
          }
          if (v10 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          BOOL v12 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(*v6 + 8), (void *)(*(void *)v7 + 8));
          goto LABEL_39;
        case 3:
          unsigned int v13 = *(unsigned __int8 *)(v7 + 12);
          if (v13 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v13 != 3) {
            goto LABEL_53;
          }
          double v14 = *(double *)v6;
          uint64_t v15 = *(double **)(*(void *)v7 + 8);
          unint64_t v16 = *(double **)(*(void *)v7 + 16);
          unint64_t v17 = *(double **)(*(void *)&v14 + 8);
          unint64_t v18 = (uint64_t)(*(void *)(*(void *)&v14 + 16) - (void)v17) >> 3;
          unint64_t v19 = v16 - v15;
          if (v16 == v15) {
            goto LABEL_33;
          }
          if (v19 <= 1) {
            uint64_t v20 = 1;
          }
          else {
            uint64_t v20 = v16 - v15;
          }
          unint64_t v21 = v18;
          break;
        case 4:
          unsigned int v22 = *(unsigned __int8 *)(v7 + 12);
          if (v22 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v22 != 4) {
            goto LABEL_53;
          }
          BOOL v12 = turi::flexible_type_impl::gt_operator::operator()(v4, (uint64_t)&v26, (uint64_t *)(*(void *)v7 + 8), (void *)(*v6 + 8));
LABEL_39:
          if (v5 == (uint64_t **)a1 || !v12) {
            return;
          }
          goto LABEL_73;
        case 5:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_53;
        case 6:
          switch(*(unsigned char *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1 || *v6 << 8 >> 8 >= *(void *)v7) {
                return;
              }
              goto LABEL_73;
            case 1:
              if (v3 == (uint64_t **)a1
                || (double)*((int *)v6 + 2) / 1000000.0 + (double)(*v6 << 8 >> 8) >= *(double *)v7)
              {
                return;
              }
              goto LABEL_73;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_53;
            case 6:
              uint64_t v25 = (uint64_t)(*(void *)v7 << 8) >> 8;
              if (v25 > *v6 << 8 >> 8) {
                goto LABEL_72;
              }
              if (v25 != *v6 << 8 >> 8 || v3 == (uint64_t **)a1 || *(_DWORD *)(v7 + 8) <= *((_DWORD *)v6 + 2)) {
                return;
              }
              goto LABEL_73;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_53;
        case 8:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_53;
        case 9:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_53:
          turi::flexible_type_fail(0);
          return;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (v21 && *v15 <= *v17)
      {
        if (*v15 < *v17) {
          return;
        }
        --v21;
        ++v15;
        ++v17;
        if (!--v20)
        {
LABEL_33:
          if (v3 == (uint64_t **)a1 || v19 <= v18) {
            return;
          }
LABEL_73:
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v5[1], v5[2], ((char *)v5[2] - (char *)v5[1]) >> 4);
          return;
        }
      }
LABEL_72:
      if (v3 == (uint64_t **)a1) {
        return;
      }
      goto LABEL_73;
    }
    if (v3 != (uint64_t **)a1) {
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v3[1], v3[2], ((char *)v3[2] - (char *)v3[1]) >> 4);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
}

uint64_t turi::groupby_operators::argmin::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  if (v2 == *(void *)(this + 16))
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 0;
    if ((uint64_t *)a2 == &turi::FLEX_UNDEFINED) {
      return this;
    }
    *(void *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(void *)a2 = turi::FLEX_UNDEFINED;
    unsigned int v4 = byte_268083A6C;
  }
  else
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 12) = 0;
    if (v2 + 16 == a2) {
      return this;
    }
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(a2 + 5) = *(void *)(v2 + 21);
    *(void *)a2 = v3;
    unsigned int v4 = *(unsigned __int8 *)(v2 + 28);
  }
  *(unsigned char *)(a2 + 12) = v4;
  BOOL v5 = v4 > 9;
  int v6 = (1 << v4) & 0x33C;
  if (!v5 && v6 != 0) {
    atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
  }
  return this;
}

uint64_t turi::groupby_operators::argmin::set_input_types(uint64_t a1, uint64_t a2)
{
  return *(char *)(*(void *)a2 + 1);
}

void *turi::groupby_operators::argmin::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "argmin");
}

unsigned char *turi::groupby_operators::argmin::save(turi::groupby_operators::argmin *this, turi::oarchive *a2)
{
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 1);
  unsigned int v4 = (char *)this + 32;
  if (*(void *)a2)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v6 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v6)
    {
      size_t v7 = 2 * v6 + 2;
      *((void *)a2 + 5) = v7;
      uint64_t v8 = (uint64_t *)*((void *)a2 + 2);
      if (v8)
      {
        uint64_t result = (unsigned char *)*v8;
        size_t v9 = v8[1] - *v8;
        BOOL v10 = v7 >= v9;
        std::vector<char>::size_type v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
          uint64_t result = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v10)
        {
          v8[1] = (uint64_t)&result[v7];
        }
      }
      else
      {
        uint64_t result = malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = result;
    }
    else
    {
      uint64_t result = (unsigned char *)*((void *)a2 + 3);
    }
    result[(*((void *)a2 + 4))++] = *v4;
  }
  return result;
}

void turi::groupby_operators::argmin::load(turi::groupby_operators::argmin *this, turi::iarchive *a2)
{
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)this + 1);
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    *((unsigned char *)this + 32) = *(unsigned char *)(v4 + (*((void *)a2 + 3))++);
  }
  else
  {
    std::istream::read();
  }
}

void turi::groupby_operators::argmin::~argmin(turi::groupby_operators::argmin *this)
{
  *(void *)this = &unk_26D76B070;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26D76B070;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C407F0BD61ELL);
}

void turi::groupby_operators::argmin::set_input_type()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "set_input_type is not supported for argmin";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void std::__shared_ptr_emplace<turi::groupby_operators::argmax>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::argmax>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B110;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::argmax>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::argmax::new_instance(turi::groupby_operators::argmax *this)
{
}

void turi::groupby_operators::argmax::add_element(uint64_t a1, uint64_t **a2, __n128 a3)
{
  uint64_t v4 = *a2;
  if (*((unsigned char *)v4 + 12) != 7)
  {
    unint64_t v6 = (uint64_t **)(a1 + 8);
    if (*(unsigned char *)(a1 + 32))
    {
      size_t v7 = *v6;
      switch(*((unsigned char *)v4 + 12))
      {
        case 0:
          switch(*((unsigned char *)v7 + 12))
          {
            case 0:
              if (v6 == a2) {
                return;
              }
              uint64_t v8 = *v7;
              double v9 = *(double *)v4;
              goto LABEL_57;
            case 1:
              if (v6 == a2) {
                return;
              }
              double v23 = *(double *)v7;
              double v24 = (double)*v4;
              goto LABEL_61;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_51;
            case 6:
              if (v6 == a2) {
                return;
              }
              double v9 = *(double *)v4;
              uint64_t v8 = *v7 << 8 >> 8;
LABEL_57:
              if (v8 >= *(uint64_t *)&v9) {
                return;
              }
              goto LABEL_75;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*((unsigned char *)v7 + 12))
          {
            case 0:
              if (v6 == a2 || *(double *)v4 <= (double)*v7) {
                return;
              }
              goto LABEL_75;
            case 1:
              if (v6 == a2) {
                return;
              }
              double v23 = *(double *)v7;
              double v24 = *(double *)v4;
LABEL_61:
              if (v23 >= v24) {
                return;
              }
              goto LABEL_75;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_51;
            case 6:
              if (v6 == a2 || (double)*((int *)v7 + 2) / 1000000.0 + (double)(*v7 << 8 >> 8) >= *(double *)v4) {
                return;
              }
              goto LABEL_75;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v10 = *((unsigned __int8 *)v7 + 12);
          if (v10 - 3 < 7 || v10 < 2) {
            goto LABEL_51;
          }
          if (v10 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          int v12 = std::string::compare[abi:ne180100]((const void **)(*v7 + 8), (unsigned char *)(*v4 + 8));
          if (v6 == a2 || (v12 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_75;
        case 3:
          unsigned int v13 = *((unsigned __int8 *)v7 + 12);
          if (v13 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v13 != 3) {
            goto LABEL_51;
          }
          uint64_t v15 = *v7 + 8;
          double v14 = *(double **)v15;
          unint64_t v16 = *(double **)(*v4 + 8);
          unint64_t v17 = (uint64_t)(*(void *)(*v4 + 16) - (void)v16) >> 3;
          unint64_t v18 = (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3;
          if (*(void *)(v15 + 8) == *(void *)v15) {
            goto LABEL_34;
          }
          if (v18 <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = v18;
          }
          uint64_t v20 = (uint64_t)(*(void *)(*v4 + 16) - (void)v16) >> 3;
          break;
        case 4:
          unsigned int v21 = *((unsigned __int8 *)v7 + 12);
          if (v21 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v21 != 4) {
            goto LABEL_51;
          }
          BOOL v22 = turi::flexible_type_impl::lt_operator::operator()(a3, (uint64_t)&v26, (uint64_t *)(*v7 + 8), (void *)(*v4 + 8));
          if (v6 == a2 || !v22) {
            return;
          }
          goto LABEL_75;
        case 5:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_51;
        case 6:
          switch(*((unsigned char *)v7 + 12))
          {
            case 0:
              if (v6 == a2 || *v4 << 8 >> 8 <= *v7) {
                return;
              }
              goto LABEL_75;
            case 1:
              if (v6 == a2 || (double)*((int *)v4 + 2) / 1000000.0 + (double)(*v4 << 8 >> 8) <= *(double *)v7) {
                return;
              }
              goto LABEL_75;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_51;
            case 6:
              uint64_t v25 = *v7 << 8 >> 8;
              if (v25 < *v4 << 8 >> 8) {
                goto LABEL_70;
              }
              if (v25 == *v4 << 8 >> 8 && v6 != a2 && *((_DWORD *)v7 + 2) < *((_DWORD *)v4 + 2)) {
                goto LABEL_75;
              }
              return;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 8:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_51;
        case 9:
          if (*((unsigned __int8 *)v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_51:
          turi::flexible_type_fail(0);
          return;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (1)
      {
        if (!v20 || *v14 > *v16) {
          return;
        }
        if (*v14 < *v16) {
          break;
        }
        --v20;
        ++v14;
        ++v16;
        if (!--v19)
        {
LABEL_34:
          if (v6 == a2 || v18 >= v17) {
            return;
          }
LABEL_75:
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>((uint64_t)v6, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
          return;
        }
      }
LABEL_70:
      if (v6 == a2) {
        return;
      }
      goto LABEL_75;
    }
    if (v6 != a2) {
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v4, a2[1], ((char *)a2[1] - (char *)v4) >> 4);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void turi::groupby_operators::argmax::add_element_simple()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "argmax does not support add_element_simple with one value";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void turi::groupby_operators::argmax::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  BOOL v5 = v3;
  if (*((unsigned char *)v3 + 32))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      unint64_t v6 = v3[1];
      uint64_t v7 = *(void *)(a1 + 8);
      switch(*((unsigned char *)v6 + 12))
      {
        case 0:
          switch(*(unsigned char *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1) {
                return;
              }
              uint64_t v8 = *(void *)v7;
              double v9 = *(double *)v6;
              goto LABEL_60;
            case 1:
              if (v3 == (uint64_t **)a1) {
                return;
              }
              double v24 = *(double *)v7;
              double v25 = (double)*v6;
              goto LABEL_64;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_54;
            case 6:
              if (v3 == (uint64_t **)a1) {
                return;
              }
              double v9 = *(double *)v6;
              uint64_t v8 = (uint64_t)(*(void *)v7 << 8) >> 8;
LABEL_60:
              if (v8 >= *(uint64_t *)&v9) {
                return;
              }
              goto LABEL_78;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 1:
          switch(*(unsigned char *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1 || *(double *)v6 <= (double)*(uint64_t *)v7) {
                return;
              }
              goto LABEL_78;
            case 1:
              if (v3 == (uint64_t **)a1) {
                return;
              }
              double v24 = *(double *)v7;
              double v25 = *(double *)v6;
LABEL_64:
              if (v24 >= v25) {
                return;
              }
              goto LABEL_78;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_54;
            case 6:
              if (v3 == (uint64_t **)a1
                || (double)*(int *)(v7 + 8) / 1000000.0 + (double)((uint64_t)(*(void *)v7 << 8) >> 8) >= *(double *)v6)
              {
                return;
              }
              goto LABEL_78;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 2:
          unsigned int v10 = *(unsigned __int8 *)(v7 + 12);
          if (v10 - 3 < 7 || v10 < 2) {
            goto LABEL_54;
          }
          if (v10 != 2) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          int v12 = std::string::compare[abi:ne180100]((const void **)(*(void *)v7 + 8), (unsigned char *)(*v6 + 8));
          if (v5 == (uint64_t **)a1 || (v12 & 0x80000000) == 0) {
            return;
          }
          goto LABEL_78;
        case 3:
          unsigned int v13 = *(unsigned __int8 *)(v7 + 12);
          if (v13 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v13 != 3) {
            goto LABEL_54;
          }
          double v14 = *(double *)v6;
          uint64_t v15 = *(double **)(*(void *)v7 + 8);
          unint64_t v16 = *(double **)(*(void *)v7 + 16);
          unint64_t v17 = *(double **)(*(void *)&v14 + 8);
          unint64_t v18 = (uint64_t)(*(void *)(*(void *)&v14 + 16) - (void)v17) >> 3;
          unint64_t v19 = v16 - v15;
          if (v16 == v15) {
            goto LABEL_35;
          }
          if (v19 <= 1) {
            uint64_t v20 = 1;
          }
          else {
            uint64_t v20 = v16 - v15;
          }
          unint64_t v21 = v18;
          break;
        case 4:
          unsigned int v22 = *(unsigned __int8 *)(v7 + 12);
          if (v22 > 9) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          if (v22 != 4) {
            goto LABEL_54;
          }
          BOOL v23 = turi::flexible_type_impl::lt_operator::operator()(v4, (uint64_t)&v27, (uint64_t *)(*(void *)v7 + 8), (void *)(*v6 + 8));
          if (v5 == (uint64_t **)a1 || !v23) {
            return;
          }
          goto LABEL_78;
        case 5:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_54;
        case 6:
          switch(*(unsigned char *)(v7 + 12))
          {
            case 0:
              if (v3 == (uint64_t **)a1 || *v6 << 8 >> 8 <= *(void *)v7) {
                return;
              }
              goto LABEL_78;
            case 1:
              if (v3 == (uint64_t **)a1
                || (double)*((int *)v6 + 2) / 1000000.0 + (double)(*v6 << 8 >> 8) <= *(double *)v7)
              {
                return;
              }
              goto LABEL_78;
            case 2:
            case 3:
            case 4:
            case 5:
            case 7:
            case 8:
            case 9:
              goto LABEL_54;
            case 6:
              uint64_t v26 = (uint64_t)(*(void *)v7 << 8) >> 8;
              if (v26 < *v6 << 8 >> 8) {
                goto LABEL_73;
              }
              if (v26 == *v6 << 8 >> 8 && v3 != (uint64_t **)a1 && *(_DWORD *)(v7 + 8) < *((_DWORD *)v6 + 2)) {
                goto LABEL_78;
              }
              return;
            default:
              turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
        case 7:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_54;
        case 8:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
          goto LABEL_54;
        case 9:
          if (*(unsigned __int8 *)(v7 + 12) >= 0xAu) {
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
          }
LABEL_54:
          turi::flexible_type_fail(0);
          return;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      while (1)
      {
        if (!v21 || *v15 > *v17) {
          return;
        }
        if (*v15 < *v17) {
          break;
        }
        --v21;
        ++v15;
        ++v17;
        if (!--v20)
        {
LABEL_35:
          if (v3 == (uint64_t **)a1 || v19 >= v18) {
            return;
          }
LABEL_78:
          std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v5[1], v5[2], ((char *)v5[2] - (char *)v5[1]) >> 4);
          return;
        }
      }
LABEL_73:
      if (v3 == (uint64_t **)a1) {
        return;
      }
      goto LABEL_78;
    }
    if (v3 != (uint64_t **)a1) {
      std::vector<turi::flexible_type>::__assign_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(a1 + 8, v3[1], v3[2], ((char *)v3[2] - (char *)v3[1]) >> 4);
    }
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void *turi::groupby_operators::argmax::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "argmax");
}

void turi::groupby_operators::argmax::~argmax(turi::groupby_operators::argmax *this)
{
  *(void *)this = &unk_26D76B160;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26D76B160;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C407F0BD61ELL);
}

void turi::groupby_operators::argmax::set_input_type()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "set_input_type is not supported for argmax";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void std::__shared_ptr_emplace<turi::groupby_operators::count>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::count>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B200;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::count>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::count::new_instance(turi::groupby_operators::count *this)
{
}

uint64_t turi::groupby_operators::count::add_element_simple(uint64_t result)
{
  return result;
}

void *turi::groupby_operators::count::combine(uint64_t a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 8) += result[1];
  return result;
}

void *turi::groupby_operators::count::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Count");
}

char *turi::groupby_operators::count::save(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  if (*(void *)a2)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v5)
    {
      size_t v6 = 2 * v5 + 16;
      *(void *)(a2 + 40) = v6;
      uint64_t v7 = *(char ***)(a2 + 16);
      if (v7)
      {
        uint64_t result = *v7;
        size_t v8 = v7[1] - *v7;
        BOOL v9 = v6 >= v8;
        std::vector<char>::size_type v10 = v6 - v8;
        if (v10 != 0 && v9)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v10);
          uint64_t result = **(char ***)(a2 + 16);
        }
        else if (!v9)
        {
          v7[1] = &result[v6];
        }
      }
      else
      {
        uint64_t result = (char *)malloc_type_realloc(*(void **)(a2 + 24), v6, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = result;
    }
    else
    {
      uint64_t result = *(char **)(a2 + 24);
    }
    *(void *)&result[*(void *)(a2 + 32)] = *v2;
    *(void *)(a2 + 32) += 8;
  }
  return result;
}

uint64_t turi::groupby_operators::count::load(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return std::istream::read();
  }
  *(void *)(result + ++*(void *)(result + 8) = *(void *)(v2 + *(void *)(a2 + 24));
  *(void *)(a2 + 24) += 8;
  return result;
}

void turi::groupby_operators::count::set_input_type()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "set_input_type is not supported for count";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void std::__shared_ptr_emplace<turi::groupby_operators::non_null_count>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B2F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::non_null_count>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B2F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::non_null_count>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::non_null_count::new_instance(turi::groupby_operators::non_null_count *this)
{
}

uint64_t turi::groupby_operators::non_null_count::add_element_simple(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 12) != 7) {
    ++*(void *)(result + 8);
  }
  return result;
}

void *turi::groupby_operators::non_null_count::combine(uint64_t a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  *(void *)(a1 + 8) += result[1];
  return result;
}

void std::__shared_ptr_emplace<turi::groupby_operators::average>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::average>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::average>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::average::new_instance(turi::groupby_operators::average *this)
{
}

void turi::groupby_operators::average::add_element_simple(turi::groupby_operators::average *this, const turi::flexible_type *a2)
{
  switch(byte_268083A6C)
  {
    case 0:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == turi::FLEX_UNDEFINED) {
            return;
          }
          goto LABEL_81;
        case 1:
          double v60 = *(double *)a2;
          uint64_t v61 = turi::FLEX_UNDEFINED;
          goto LABEL_120;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2)) {
            return;
          }
          goto LABEL_81;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          double v60 = *(double *)&turi::FLEX_UNDEFINED;
          uint64_t v61 = *(void *)a2;
LABEL_120:
          double v80 = (double)v61;
          goto LABEL_121;
        case 1:
          double v60 = *(double *)a2;
          double v80 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_121:
          if (v60 != v80) {
            goto LABEL_81;
          }
          return;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          double v79 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_125;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v44 = *((unsigned __int8 *)a2 + 12);
      if (v44 - 3 < 7 || v44 < 2) {
        goto LABEL_81;
      }
      if (v44 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v46 = *(double *)a2;
      char v47 = *(unsigned char *)(*(void *)a2 + 31);
      size_t v48 = v47 < 0 ? *(void *)(*(void *)&v46 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
      uint64_t v81 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(void *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v48 != v81) {
        goto LABEL_81;
      }
      uint64_t v82 = (unsigned __int8 *)(*(void *)&v46 + 8);
      if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
        uint64_t v82 = *(unsigned __int8 **)v82;
      }
      uint64_t v83 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        uint64_t v83 = *(unsigned __int8 **)v83;
      }
      if (v47 < 0)
      {
        if (memcmp(v82, v83, v48)) {
          goto LABEL_81;
        }
      }
      else
      {
        if (!v48) {
          return;
        }
        do
        {
          if (*v82 != *v83) {
            goto LABEL_81;
          }
          ++v82;
          ++v83;
          --v48;
        }
        while (v48);
      }
      return;
    case 3:
      unsigned int v49 = *((unsigned __int8 *)a2 + 12);
      if (v49 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v49 == 3)
      {
        uint64_t v50 = *(double **)(*(void *)a2 + 8);
        uint64_t v51 = *(double **)(*(void *)a2 + 16);
        unint64_t v52 = v51 - v50;
        uint64_t v53 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v52 == (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v53) >> 3)
        {
          if (v51 == v50) {
            return;
          }
          uint64_t v54 = v52 <= 1 ? 1 : v51 - v50;
          if (*v50 == *v53)
          {
            uint64_t v55 = 1;
            do
            {
              unint64_t v56 = v55;
              if (v54 == v55) {
                break;
              }
              double v57 = v50[v55];
              double v58 = v53[v55++];
            }
            while (v57 == v58);
            if (v56 >= v52) {
              return;
            }
          }
        }
      }
      goto LABEL_81;
    case 4:
      unsigned int v4 = *((unsigned __int8 *)a2 + 12);
      if (v4 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v4 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(void *)a2 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        return;
      }
      goto LABEL_81;
    case 5:
      unsigned int v62 = *((unsigned __int8 *)a2 + 12);
      if (v62 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v62 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t **)(*(void *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        return;
      }
      goto LABEL_81;
    case 6:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268083A68) {
            return;
          }
          goto LABEL_81;
        case 1:
          double v79 = vabdd_f64(*(double *)a2, (double)dword_268083A68 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_125:
          if (v79 < 0.0000005) {
            return;
          }
          goto LABEL_81;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_268083A68)
          {
            return;
          }
          goto LABEL_81;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v59 = *((unsigned __int8 *)a2 + 12);
      if (v59 < 7 || v59 - 8 < 2) {
        goto LABEL_81;
      }
      if (v59 != 7) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    case 8:
      unsigned int v63 = *((unsigned __int8 *)a2 + 12);
      if (v63 >= 8 && v63 != 9)
      {
        if (v63 != 8) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (turi::image_type::operator==(*(void *)a2 + 8, turi::FLEX_UNDEFINED + 8)) {
          return;
        }
      }
      goto LABEL_81;
    case 9:
      unsigned int v5 = *((unsigned __int8 *)a2 + 12);
      if (v5 < 9) {
        goto LABEL_81;
      }
      if (v5 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v6 = turi::FLEX_UNDEFINED;
      uint64_t v7 = *(void **)a2;
      if (turi::FLEX_UNDEFINED == *(void *)a2) {
        return;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v7 + 1), turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_81;
      }
      BOOL v9 = (char *)v7[3];
      size_t v8 = (char *)v7[4];
      uint64_t v10 = v8 - v9;
      if (v8 == v9) {
        return;
      }
      if (!v7[1]) {
        return;
      }
      uint64_t v11 = 1;
      do
      {
        uint64_t v12 = *(void *)v9;
        v9 += 8;
        v11 *= v12;
      }
      while (v9 != v8);
      if (!v11) {
        return;
      }
      v91.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::vector(__p, v10 >> 3, &v91);
      unsigned int v13 = (uint64_t *)__p[0];
      double v14 = (uint64_t *)__p[1];
      uint64_t v15 = **(void **)(v6 + 8);
      int64_t v16 = (char *)__p[1] - (char *)__p[0];
      unint64_t v17 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      unint64_t v18 = v17 - 1;
      if (v17 <= 1) {
        int64_t v19 = 1;
      }
      else {
        int64_t v19 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (v14 == v13)
    {
      uint64_t v27 = 0;
      double v28 = *(double *)(*(void *)v7[1] + 8 * v7[9]);
    }
    else
    {
      uint64_t v20 = 0;
      unint64_t v21 = (uint64_t *)v7[6];
      unsigned int v22 = v13;
      int64_t v23 = v19;
      do
      {
        uint64_t v25 = *v22++;
        uint64_t v24 = v25;
        uint64_t v26 = *v21++;
        v20 += v26 * v24;
        --v23;
      }
      while (v23);
      uint64_t v27 = 0;
      double v28 = *(double *)(*(void *)v7[1] + 8 * (v7[9] + v20));
      double v29 = *(uint64_t **)(v6 + 48);
      double v30 = v13;
      int64_t v31 = v19;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
    }
    double v35 = *(double *)(v15 + 8 * (*(void *)(v6 + 72) + v27));
    if (v28 != v35) {
      break;
    }
    uint64_t v36 = v17;
    uint64_t v37 = v17 - 1;
    if (v16 >= 1)
    {
      uint64_t v38 = v7[3];
      unint64_t v39 = v13[v18] + 1;
      v13[v18] = v39;
      unint64_t v40 = (v16 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v37 = v17 - 1;
      if (v39 >= *(void *)(v38 + 8 * v18))
      {
        while (1)
        {
          *(uint64_t *)((char *)v13 + v40 + ++*(void *)(result + 8) = 0;
          if (v37 <= 0) {
            break;
          }
          --v37;
          unint64_t v41 = *(uint64_t *)((char *)v13 + v40) + 1;
          *(uint64_t *)((char *)v13 + v40) = v41;
          unint64_t v42 = *(void *)(v38 + v40);
          v40 -= 8;
          if (v41 < v42)
          {
            uint64_t v36 = 1;
            goto LABEL_36;
          }
        }
        __p[1] = v13;
        operator delete(v13);
        return;
      }
      uint64_t v36 = 1;
      uint64_t v37 = v17 - 1;
    }
LABEL_36:
    ;
  }
  while ((v37 & 0x8000000000000000) == 0 && v36);
  if (v13)
  {
    __p[1] = v13;
    double v43 = v35;
    operator delete(v13);
    if (v28 == v43) {
      return;
    }
  }
  else if (v28 == v35)
  {
    return;
  }
LABEL_81:
  ++*((void *)this + 2);
  double v65 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v65 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v65 = *(double *)a2;
      break;
    case 2:
      double v67 = *(double *)a2;
      uint64_t v68 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      uint64_t v69 = (char *)v68;
      if (*(char *)(*(void *)&v67 + 31) < 0) {
        uint64_t v69 = *v68;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v69);
      double v70 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v88[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(*(void *)&v67 + 31) < 0) {
        uint64_t v71 = *(void *)(*(void *)&v67 + 16);
      }
      else {
        uint64_t v71 = *(unsigned __int8 *)(*(void *)&v67 + 31);
      }
      if (__idx != v71)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v85 = std::string::append(&v91, " cannot be interpreted as a float");
        long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v88[0] = (void *)v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v78 = v70;
      double v65 = v78;
      break;
    case 3:
      double v66 = *(double *)a2;
      __p[1] = 0;
      v88[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(void *)&v66 + 8), *(void *)(*(void *)&v66 + 16), (uint64_t)(*(void *)(*(void *)&v66 + 16) - *(void *)(*(void *)&v66 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      double v72 = *(double *)a2;
      __p[1] = 0;
      v88[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(void *)&v72 + 8), *(uint64_t **)(*(void *)&v72 + 16), (uint64_t)(*(void *)(*(void *)&v72 + 16) - *(void *)(*(void *)&v72 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      break;
    case 5:
      double v73 = *(double *)a2;
      __p[1] = 0;
      v88[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(void *)&v73 + 8), *(uint64_t **)(*(void *)&v73 + 16), (uint64_t)(*(void *)(*(void *)&v73 + 16) - *(void *)(*(void *)&v73 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v91.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
      break;
    case 6:
      double v65 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      double v74 = *(double *)a2;
      uint64_t v75 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v75;
      if (v75) {
        atomic_fetch_add_explicit(v75 + 2, 1u, memory_order_relaxed);
      }
      long long v76 = *(_OWORD *)(*(void *)&v74 + 24);
      long long v77 = *(_OWORD *)(*(void *)&v74 + 56);
      long long v89 = *(_OWORD *)(*(void *)&v74 + 40);
      long long v90 = v77;
      *(_OWORD *)uint64_t v88 = v76;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v89 + 1))
      {
        *(void *)&long long v90 = *((void *)&v89 + 1);
        operator delete(*((void **)&v89 + 1));
      }
      if (v88[0])
      {
        v88[1] = v88[0];
        operator delete(v88[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  *((double *)this + 1) = *((double *)this + 1)
                        + (v65 - *((double *)this + 1)) / (double)*((unint64_t *)this + 2);
}

void sub_22408BD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

double turi::groupby_operators::average::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *((void *)v3 + 2);
  unint64_t v7 = v6 + v5;
  if (v6 + v5)
  {
    double result = (v3[1] * (double)v6 + *(double *)(a1 + 8) * (double)v5) / (double)v7;
    *(double *)(a1 + ++*(void *)(result + 8) = result;
    *(void *)(a1 + 16) = v7;
  }
  return result;
}

uint64_t turi::groupby_operators::average::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(this + 16)) {
    return turi::flexible_type::flexible_type<double>(a2, (void *)(this + 8));
  }
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + ++*(void *)(result + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  if ((uint64_t *)a2 != &turi::FLEX_UNDEFINED)
  {
    *(void *)(a2 + 5) = *(uint64_t *)((char *)&turi::FLEX_UNDEFINED + 5);
    *(void *)a2 = turi::FLEX_UNDEFINED;
    int v2 = byte_268083A6C;
    *(unsigned char *)(a2 + 12) = byte_268083A6C;
    switch(v2)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
        break;
      default:
        return this;
    }
  }
  return this;
}

void *turi::groupby_operators::average::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Avg");
}

char *turi::groupby_operators::average::save(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)(a1 + 8);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v5)
    {
      size_t v10 = 2 * v5 + 16;
      *(void *)(a2 + 40) = v10;
      uint64_t v11 = *(char ***)(a2 + 16);
      if (v11)
      {
        unint64_t v6 = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v14);
          unint64_t v6 = **(char ***)(a2 + 16);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v6;
    }
    else
    {
      unint64_t v6 = *(char **)(a2 + 24);
    }
    *(void *)&v6[*(void *)(a2 + 32)] = *v4;
    *(void *)(a2 + 32) += 8;
  }
  unint64_t v7 = (void *)(a1 + 16);
  if (*(void *)a2)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v9 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v9)
    {
      size_t v15 = 2 * v9 + 16;
      *(void *)(a2 + 40) = v15;
      int64_t v16 = *(char ***)(a2 + 16);
      if (v16)
      {
        double result = *v16;
        size_t v17 = v16[1] - *v16;
        BOOL v18 = v15 >= v17;
        std::vector<char>::size_type v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v19);
          double result = **(char ***)(a2 + 16);
        }
        else if (!v18)
        {
          v16[1] = &result[v15];
        }
      }
      else
      {
        double result = (char *)malloc_type_realloc(*(void **)(a2 + 24), v15, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = result;
    }
    else
    {
      double result = *(char **)(a2 + 24);
    }
    *(void *)&result[*(void *)(a2 + 32)] = *v7;
    *(void *)(a2 + 32) += 8;
  }
  return result;
}

uint64_t turi::groupby_operators::average::load(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    *(void *)(result + ++*(void *)(result + 8) = *(void *)(v4 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    double result = std::istream::read();
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    *(void *)(v3 + 16) = *(void *)(v5 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    return std::istream::read();
  }
  return result;
}

void turi::groupby_operators::average::~average(turi::groupby_operators::average *this)
{
}

void std::__shared_ptr_emplace<turi::groupby_operators::vector_average>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B4D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::vector_average>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B4D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::vector_average>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void std::allocator<turi::groupby_operators::vector_average>::construct[abi:ne180100]<turi::groupby_operators::vector_average>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)a2 = &unk_26D76B520;
  *(_OWORD *)(a2 + ++*(void *)(result + 8) = 0u;
  *(void *)(a2 + 13) = 0;
  *(unsigned char *)(a2 + 20) = 3;
  operator new();
}

void turi::groupby_operators::vector_average::new_instance(turi::groupby_operators::vector_average *this)
{
}

void turi::groupby_operators::vector_average::add_element_simple(turi::groupby_operators::vector_average *this, atomic_ullong **a2)
{
  uint64_t v272 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 25) && *((unsigned char *)a2 + 12) != 7)
  {
    if (*((unsigned char *)this + 24))
    {
      uint64_t v4 = 1;
      switch(*((unsigned char *)a2 + 12))
      {
        case 3:
          uint64_t v5 = *a2 + 1;
          unint64_t v6 = *a2 + 2;
          char v7 = 3;
          goto LABEL_15;
        case 4:
          uint64_t v5 = *a2 + 1;
          unint64_t v6 = *a2 + 2;
          char v7 = 4;
          goto LABEL_15;
        case 5:
          uint64_t v5 = *a2 + 1;
          unint64_t v6 = *a2 + 2;
          char v7 = 5;
LABEL_15:
          uint64_t v4 = (uint64_t)(*v6 - *v5) >> v7;
          break;
        case 9:
          std::vector<char>::size_type v19 = (uint64_t *)(*a2)[3];
          BOOL v18 = (uint64_t *)(*a2)[4];
          if (v18 == v19)
          {
            uint64_t v4 = 0;
          }
          else
          {
            uint64_t v4 = (*a2)[1];
            if (v4)
            {
              uint64_t v4 = 1;
              do
              {
                uint64_t v20 = *v19++;
                v4 *= v20;
              }
              while (v19 != v18);
            }
          }
          break;
        default:
          break;
      }
      size_t v12 = (double *)((char *)this + 8);
      uint64_t v13 = 1;
      switch(*((unsigned char *)this + 20))
      {
        case 3:
          std::vector<char>::size_type v14 = (void *)(*(void *)v12 + 8);
          size_t v15 = (void *)(*(void *)v12 + 16);
          char v16 = 3;
          goto LABEL_20;
        case 4:
          std::vector<char>::size_type v14 = (void *)(*(void *)v12 + 8);
          size_t v15 = (void *)(*(void *)v12 + 16);
          char v16 = 4;
          goto LABEL_20;
        case 5:
          std::vector<char>::size_type v14 = (void *)(*(void *)v12 + 8);
          size_t v15 = (void *)(*(void *)v12 + 16);
          char v16 = 5;
LABEL_20:
          uint64_t v13 = (uint64_t)(*v15 - *v14) >> v16;
          break;
        case 9:
          unsigned int v22 = *(uint64_t **)(*(void *)v12 + 24);
          unint64_t v21 = *(uint64_t **)(*(void *)v12 + 32);
          if (v21 == v22)
          {
            uint64_t v13 = 0;
          }
          else
          {
            uint64_t v13 = *(void *)(*(void *)v12 + 8);
            if (v13)
            {
              uint64_t v13 = 1;
              do
              {
                uint64_t v23 = *v22++;
                v13 *= v23;
              }
              while (v22 != v21);
            }
          }
          break;
        default:
          break;
      }
      if (v4 == v13)
      {
        ++*((void *)this + 4);
        memset(v268, 0, 13);
        if (v268 != a2)
        {
          *(atomic_ullong **)((char *)v268 + 5) = *(atomic_ullong **)((char *)a2 + 5);
          v268[0] = *a2;
          BYTE4(v268[1]) = *((unsigned char *)a2 + 12);
          if (BYTE4(v268[1]) <= 9u && ((1 << SBYTE4(v268[1])) & 0x33C) != 0) {
            atomic_fetch_add(v268[0], 1uLL);
          }
        }
        switch(*((unsigned char *)this + 20))
        {
          case 0:
            switch(BYTE4(v268[1]))
            {
              case 0:
                size_t v17 = (atomic_ullong *)((char *)v268[0] - *(void *)v12);
                goto LABEL_85;
              case 1:
                double v97 = (double)*(uint64_t *)v12;
                goto LABEL_222;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                uint64_t v61 = (double *)v268[0][1];
                uint64_t v62 = v268[0][2] - (void)v61;
                if (v62)
                {
                  unint64_t v63 = v62 >> 3;
                  double v64 = (double)*(uint64_t *)v12;
                  if (v63 <= 1) {
                    unint64_t v63 = 1;
                  }
                  do
                  {
                    *uint64_t v61 = *v61 - v64;
                    ++v61;
                    --v63;
                  }
                  while (v63);
                }
                goto LABEL_266;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 6:
                v268[0] = (atomic_ullong *)((unint64_t)v268[0] & 0xFF00000000000000 | ((unint64_t)v268[0]
                                                                                              - *(void *)v12) & 0xFFFFFFFFFFFFFFLL);
                goto LABEL_266;
              case 7:
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                uint64_t v69 = v268[0];
                uint64_t v71 = (uint64_t *)v268[0][3];
                atomic_ullong v70 = v268[0][4];
                if ((uint64_t *)v70 == v71) {
                  goto LABEL_266;
                }
                if (!v268[0][1]) {
                  goto LABEL_266;
                }
                double v72 = (double)*(uint64_t *)v12;
                uint64_t v73 = 1;
                do
                {
                  uint64_t v74 = *v71++;
                  v73 *= v74;
                }
                while (v71 != (uint64_t *)v70);
                if (!v73) {
                  goto LABEL_266;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v268[0] + 1);
                unint64_t v75 = (v69[4] - v69[3]) >> 3;
                uint64_t v267 = 0;
                std::vector<unsigned long>::vector(&__p, v75, &v267);
                do
                {
                  long long v76 = (uint64_t *)__p;
                  uint64_t v77 = 0;
                  if (v266 != __p)
                  {
                    unint64_t v78 = (v266 - (unsigned char *)__p) >> 3;
                    double v79 = (uint64_t *)v69[6];
                    if (v78 <= 1) {
                      unint64_t v78 = 1;
                    }
                    do
                    {
                      uint64_t v81 = *v76++;
                      uint64_t v80 = v81;
                      uint64_t v82 = *v79++;
                      v77 += v82 * v80;
                      --v78;
                    }
                    while (v78);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v69 + 1);
                  *(double *)(*(void *)v69[1] + 8 * (v69[9] + v77)) = *(double *)(*(void *)v69[1]
                                                                                  + 8 * (v69[9] + v77))
                                                                      - v72;
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v69 + 1), (uint64_t *)&__p));
                break;
              default:
                goto LABEL_834;
            }
            goto LABEL_189;
          case 1:
            switch(BYTE4(v268[1]))
            {
              case 0:
                size_t v17 = (atomic_ullong *)(uint64_t)((double)(uint64_t)v268[0] - *v12);
LABEL_85:
                v268[0] = v17;
                goto LABEL_266;
              case 1:
                double v97 = *v12;
LABEL_222:
                *(double *)uint64_t v268 = *(double *)v268 - v97;
                goto LABEL_266;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                double v65 = (double *)v268[0][1];
                uint64_t v66 = v268[0][2] - (void)v65;
                if (v66)
                {
                  double v67 = *v12;
                  unint64_t v68 = v66 >> 3;
                  if (v68 <= 1) {
                    unint64_t v68 = 1;
                  }
                  do
                  {
                    *double v65 = *v65 - v67;
                    ++v65;
                    --v68;
                  }
                  while (v68);
                }
                goto LABEL_266;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 6:
                unint64_t v98 = vcvtmd_s64_f64(*v12);
                uint64_t v99 = (uint64_t)((*v12 - (double)(uint64_t)floor(*v12)) * 1000000.0);
                unint64_t v100 = (unint64_t)v268[0];
                double v101 = (char *)v268[0] - v98;
                v268[0] = (atomic_ullong *)((unint64_t)v268[0] & 0xFF00000000000000 | ((unint64_t)v268[0]
                                                                                              - v98) & 0xFFFFFFFFFFFFFFLL);
                unsigned int v102 = LODWORD(v268[1]) - v99;
                if (SLODWORD(v268[1]) - v99 < 0)
                {
                  v268[0] = (atomic_ullong *)((unint64_t)(v101 - 1) & 0xFFFFFFFFFFFFFFLL | v100 & 0xFF00000000000000);
                  v102 += 1000000;
                }
                if (v102 > 0xF423F) {
                  turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                }
                LODWORD(v268[1]) = v102;
                goto LABEL_266;
              case 7:
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                uint64_t v83 = v268[0];
                uint64_t v85 = (uint64_t *)v268[0][3];
                atomic_ullong v84 = v268[0][4];
                if ((uint64_t *)v84 == v85) {
                  goto LABEL_266;
                }
                if (!v268[0][1]) {
                  goto LABEL_266;
                }
                double v86 = *v12;
                uint64_t v87 = 1;
                do
                {
                  uint64_t v88 = *v85++;
                  v87 *= v88;
                }
                while (v85 != (uint64_t *)v84);
                if (!v87) {
                  goto LABEL_266;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v268[0] + 1);
                unint64_t v89 = (v83[4] - v83[3]) >> 3;
                uint64_t v267 = 0;
                std::vector<unsigned long>::vector(&__p, v89, &v267);
                do
                {
                  long long v90 = (uint64_t *)__p;
                  uint64_t v91 = 0;
                  if (v266 != __p)
                  {
                    unint64_t v92 = (v266 - (unsigned char *)__p) >> 3;
                    uint64_t v93 = (uint64_t *)v83[6];
                    if (v92 <= 1) {
                      unint64_t v92 = 1;
                    }
                    do
                    {
                      uint64_t v95 = *v90++;
                      uint64_t v94 = v95;
                      uint64_t v96 = *v93++;
                      v91 += v96 * v94;
                      --v92;
                    }
                    while (v92);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v83 + 1);
                  *(double *)(*(void *)v83[1] + 8 * (v83[9] + v91)) = *(double *)(*(void *)v83[1]
                                                                                  + 8 * (v83[9] + v91))
                                                                      - v86;
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v83 + 1), (uint64_t *)&__p));
                break;
              default:
                goto LABEL_834;
            }
            goto LABEL_189;
          case 2:
            switch(BYTE4(v268[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_265;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              default:
                goto LABEL_834;
            }
          case 3:
            switch(BYTE4(v268[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_265;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                double v31 = *v12;
                if (*v268[0] != 1) {
                  operator new();
                }
                uint64_t v32 = v268[0];
                turi::flexible_type_fail(v268[0][2] - v268[0][1] == *(void *)(*(void *)&v31 + 16)
                                                                  - *(void *)(*(void *)&v31 + 8));
                uint64_t v33 = (double *)v32[1];
                uint64_t v34 = v32[2] - (void)v33;
                if (v34)
                {
                  unint64_t v35 = v34 >> 3;
                  uint64_t v36 = *(double **)(*(void *)&v31 + 8);
                  if (v35 <= 1) {
                    unint64_t v35 = 1;
                  }
                  do
                  {
                    double v37 = *v36++;
                    *uint64_t v33 = *v33 - v37;
                    ++v33;
                    --v35;
                  }
                  while (v35);
                }
                goto LABEL_266;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              default:
                goto LABEL_834;
            }
          case 4:
            switch(BYTE4(v268[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_265;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              default:
                goto LABEL_834;
            }
          case 5:
            switch(BYTE4(v268[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_265;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              default:
                goto LABEL_834;
            }
          case 6:
            switch(BYTE4(v268[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_265;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              default:
                goto LABEL_834;
            }
          case 7:
            switch(BYTE4(v268[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_265;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              default:
                goto LABEL_834;
            }
          case 8:
            switch(BYTE4(v268[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_265;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 9:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              default:
                goto LABEL_834;
            }
          case 9:
            switch(BYTE4(v268[1]))
            {
              case 0:
              case 1:
              case 6:
              case 7:
                goto LABEL_265;
              case 2:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 3:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 4:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 5:
                if (*v268[0] != 1) {
                  operator new();
                }
                goto LABEL_265;
              case 8:
                if (*v268[0] != 1) {
                  operator new();
                }
LABEL_265:
                turi::flexible_type_fail(0);
                goto LABEL_266;
              case 9:
                double v38 = *v12;
                if (*v268[0] != 1) {
                  operator new();
                }
                unint64_t v39 = v268[0];
                unint64_t v40 = v268[0] + 1;
                if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v268[0] + 1), *(void *)&v38 + 8)) {
                  turi::flexible_type_impl::ndarray<double>::operator-=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                }
                unint64_t v42 = (uint64_t *)v39[3];
                unint64_t v41 = (uint64_t *)v39[4];
                if (v41 == v42) {
                  goto LABEL_266;
                }
                if (!*v40) {
                  goto LABEL_266;
                }
                uint64_t v43 = 1;
                do
                {
                  uint64_t v44 = *v42++;
                  v43 *= v44;
                }
                while (v42 != v41);
                if (!v43) {
                  goto LABEL_266;
                }
                turi::flexible_type_impl::ndarray<double>::ensure_unique(v40);
                unint64_t v45 = (v39[4] - v39[3]) >> 3;
                uint64_t v267 = 0;
                std::vector<unsigned long>::vector(&__p, v45, &v267);
                do
                {
                  double v46 = (uint64_t *)__p;
                  if (v266 == __p)
                  {
                    uint64_t v55 = 0;
                    double v56 = *(double *)(**(void **)(*(void *)&v38 + 8) + 8 * *(void *)(*(void *)&v38 + 72));
                  }
                  else
                  {
                    uint64_t v47 = 0;
                    unint64_t v48 = (v266 - (unsigned char *)__p) >> 3;
                    unsigned int v49 = *(uint64_t **)(*(void *)&v38 + 48);
                    if (v48 <= 1) {
                      unint64_t v48 = 1;
                    }
                    uint64_t v50 = (uint64_t *)__p;
                    unint64_t v51 = v48;
                    do
                    {
                      uint64_t v53 = *v50++;
                      uint64_t v52 = v53;
                      uint64_t v54 = *v49++;
                      v47 += v54 * v52;
                      --v51;
                    }
                    while (v51);
                    uint64_t v55 = 0;
                    double v56 = *(double *)(**(void **)(*(void *)&v38 + 8)
                                    + 8 * (*(void *)(*(void *)&v38 + 72) + v47));
                    double v57 = (uint64_t *)v39[6];
                    do
                    {
                      uint64_t v59 = *v46++;
                      uint64_t v58 = v59;
                      uint64_t v60 = *v57++;
                      v55 += v60 * v58;
                      --v48;
                    }
                    while (v48);
                  }
                  turi::flexible_type_impl::ndarray<double>::ensure_unique(v40);
                  *(double *)(*(void *)v39[1] + 8 * (v39[9] + v55)) = *(double *)(*(void *)v39[1]
                                                                                  + 8 * (v39[9] + v55))
                                                                      - v56;
                }
                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v40, (uint64_t *)&__p));
                break;
              default:
                goto LABEL_834;
            }
LABEL_189:
            if (__p)
            {
              uint64_t v266 = __p;
              operator delete(__p);
            }
LABEL_266:
            double v263 = (double)*((unint64_t *)this + 4);
            double v269 = 0.0;
            int v270 = 0;
            char v271 = 0;
            turi::flexible_type::operator=<double>((uint64_t)&v269, &v263);
            double v103 = *(double *)v268;
            int v104 = BYTE4(v268[1]);
            if (BYTE4(v268[1]) <= 9u && ((1 << SBYTE4(v268[1])) & 0x33C) != 0) {
              atomic_fetch_add(v268[0], 1uLL);
            }
            switch(v271)
            {
              case 0:
                switch(v104)
                {
                  case 0:
                    *(uint64_t *)&v103 /= *(uint64_t *)&v269;
LABEL_326:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                        unint64_t v114 = *(void *)v12 + *(void *)&v103;
                        goto LABEL_385;
                      case 1:
                        double v134 = (double)*(uint64_t *)&v103;
                        goto LABEL_618;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        char v118 = *(double **)(*(void *)v12 + 8);
                        uint64_t v119 = *(void *)(*(void *)v12 + 16) - (void)v118;
                        if (!v119) {
                          goto LABEL_687;
                        }
                        unint64_t v120 = v119 >> 3;
                        if (v120 <= 1) {
                          unint64_t v120 = 1;
                        }
                        do
                        {
                          double *v118 = *v118 + (double)*(uint64_t *)&v103;
                          ++v118;
                          --v120;
                        }
                        while (v120);
                        goto LABEL_578;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 6:
                        unint64_t v114 = *(void *)v12 & 0xFF00000000000000 | (*(void *)v12 + *(void *)&v103) & 0xFFFFFFFFFFFFFFLL;
                        goto LABEL_385;
                      case 7:
                        goto LABEL_393;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        uint64_t v121 = *(uint64_t **)v12;
                        char v123 = *(uint64_t **)(*(void *)v12 + 24);
                        uint64_t v122 = *(uint64_t **)(*(void *)v12 + 32);
                        if (v122 == v123 || !v121[1]) {
                          goto LABEL_687;
                        }
                        uint64_t v124 = 1;
                        do
                        {
                          uint64_t v125 = *v123++;
                          v124 *= v125;
                        }
                        while (v123 != v122);
                        if (!v124) {
                          goto LABEL_578;
                        }
                        turi::flexible_type_impl::ndarray<double>::ensure_unique(v121 + 1);
                        unint64_t v126 = (v121[4] - v121[3]) >> 3;
                        uint64_t v264 = 0;
                        std::vector<unsigned long>::vector(&__p, v126, &v264);
                        do
                        {
                          uint64_t v127 = (uint64_t *)__p;
                          uint64_t v128 = 0;
                          if (v266 != __p)
                          {
                            unint64_t v129 = (v266 - (unsigned char *)__p) >> 3;
                            uint64_t v130 = (uint64_t *)v121[6];
                            if (v129 <= 1) {
                              unint64_t v129 = 1;
                            }
                            do
                            {
                              uint64_t v132 = *v127++;
                              uint64_t v131 = v132;
                              uint64_t v133 = *v130++;
                              v128 += v133 * v131;
                              --v129;
                            }
                            while (v129);
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique(v121 + 1);
                          *(double *)(*(void *)v121[1] + 8 * (v121[9] + v128)) = *(double *)(*(void *)v121[1]
                                                                                             + 8 * (v121[9] + v128))
                                                                                 + (double)*(uint64_t *)&v103;
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v121 + 1), (uint64_t *)&__p));
                        break;
                      default:
                        goto LABEL_835;
                    }
LABEL_576:
                    if (__p)
                    {
                      uint64_t v266 = __p;
                      operator delete(__p);
                    }
LABEL_578:
                    switch(v104)
                    {
                      case 2:
                        goto LABEL_624;
                      case 3:
                        goto LABEL_644;
                      case 4:
                        goto LABEL_586;
                      case 5:
                        goto LABEL_664;
                      case 8:
                        goto LABEL_680;
                      case 9:
                        goto LABEL_610;
                      default:
                        goto LABEL_687;
                    }
                    goto LABEL_687;
                  case 1:
                    double v138 = (double)*(uint64_t *)&v269;
                    goto LABEL_464;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    *(double *)&uint64_t v136 = v103;
                    unint64_t v255 = *(double **)(*(void *)&v103 + 8);
                    uint64_t v256 = *(void *)(*(void *)&v103 + 16) - (void)v255;
                    if (v256)
                    {
                      unint64_t v257 = v256 >> 3;
                      double v258 = (double)*(uint64_t *)&v269;
                      if (v257 <= 1) {
                        unint64_t v257 = 1;
                      }
                      do
                      {
                        *unint64_t v255 = *v255 / v258;
                        ++v255;
                        --v257;
                      }
                      while (v257);
                    }
                    goto LABEL_815;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    *(double *)&uint64_t v136 = v103;
                    uint64_t v230 = *(uint64_t **)(*(void *)&v103 + 24);
                    uint64_t v229 = *(uint64_t **)(*(void *)&v103 + 32);
                    if (v229 == v230) {
                      goto LABEL_815;
                    }
                    if (!*(void *)(*(void *)&v103 + 8)) {
                      goto LABEL_815;
                    }
                    double v231 = (double)*(uint64_t *)&v269;
                    uint64_t v232 = 1;
                    do
                    {
                      uint64_t v233 = *v230++;
                      v232 *= v233;
                    }
                    while (v230 != v229);
                    if (!v232) {
                      goto LABEL_815;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v103 + 8));
                    unint64_t v234 = (uint64_t)(*(void *)(*(void *)&v103 + 32) - *(void *)(*(void *)&v103 + 24)) >> 3;
                    uint64_t v264 = 0;
                    std::vector<unsigned long>::vector(&__p, v234, &v264);
                    do
                    {
                      std::string::size_type v235 = (uint64_t *)__p;
                      uint64_t v236 = 0;
                      if (v266 != __p)
                      {
                        unint64_t v237 = (v266 - (unsigned char *)__p) >> 3;
                        v238 = (uint64_t *)v136[6];
                        if (v237 <= 1) {
                          unint64_t v237 = 1;
                        }
                        do
                        {
                          uint64_t v240 = *v235++;
                          uint64_t v239 = v240;
                          uint64_t v241 = *v238++;
                          v236 += v241 * v239;
                          --v237;
                        }
                        while (v237);
                      }
                      turi::flexible_type_impl::ndarray<double>::ensure_unique(v136 + 1);
                      *(double *)(*(void *)v136[1] + 8 * (v136[9] + v236)) = *(double *)(*(void *)v136[1]
                                                                                         + 8 * (v136[9] + v236))
                                                                             / v231;
                    }
                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v136 + 1), (uint64_t *)&__p));
                    break;
                  default:
                    goto LABEL_835;
                }
                goto LABEL_782;
              case 1:
                switch(v104)
                {
                  case 0:
                    *(void *)&double v103 = (uint64_t)((double)*(uint64_t *)&v103 / v269);
                    goto LABEL_299;
                  case 1:
                    double v138 = v269;
LABEL_464:
                    double v103 = v103 / v138;
                    goto LABEL_299;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    *(double *)&uint64_t v136 = v103;
                    uint64_t v259 = *(double **)(*(void *)&v103 + 8);
                    uint64_t v260 = *(void *)(*(void *)&v103 + 16) - (void)v259;
                    if (v260)
                    {
                      double v261 = v269;
                      unint64_t v262 = v260 >> 3;
                      if (v262 <= 1) {
                        unint64_t v262 = 1;
                      }
                      do
                      {
                        *uint64_t v259 = *v259 / v261;
                        ++v259;
                        --v262;
                      }
                      while (v262);
                    }
                    goto LABEL_815;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    *(double *)&uint64_t v136 = v103;
                    double v243 = *(uint64_t **)(*(void *)&v103 + 24);
                    double v242 = *(uint64_t **)(*(void *)&v103 + 32);
                    if (v242 == v243) {
                      goto LABEL_815;
                    }
                    if (!*(void *)(*(void *)&v103 + 8)) {
                      goto LABEL_815;
                    }
                    double v244 = v269;
                    uint64_t v245 = 1;
                    do
                    {
                      uint64_t v246 = *v243++;
                      v245 *= v246;
                    }
                    while (v243 != v242);
                    if (!v245) {
                      goto LABEL_815;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v103 + 8));
                    unint64_t v247 = (uint64_t)(*(void *)(*(void *)&v103 + 32) - *(void *)(*(void *)&v103 + 24)) >> 3;
                    uint64_t v264 = 0;
                    std::vector<unsigned long>::vector(&__p, v247, &v264);
                    do
                    {
                      uint64_t v248 = (uint64_t *)__p;
                      uint64_t v249 = 0;
                      if (v266 != __p)
                      {
                        unint64_t v250 = (v266 - (unsigned char *)__p) >> 3;
                        std::string::size_type v251 = (uint64_t *)v136[6];
                        if (v250 <= 1) {
                          unint64_t v250 = 1;
                        }
                        do
                        {
                          uint64_t v253 = *v248++;
                          uint64_t v252 = v253;
                          uint64_t v254 = *v251++;
                          v249 += v254 * v252;
                          --v250;
                        }
                        while (v250);
                      }
                      turi::flexible_type_impl::ndarray<double>::ensure_unique(v136 + 1);
                      *(double *)(*(void *)v136[1] + 8 * (v136[9] + v249)) = *(double *)(*(void *)v136[1]
                                                                                         + 8 * (v136[9] + v249))
                                                                             / v244;
                    }
                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v136 + 1), (uint64_t *)&__p));
                    break;
                  default:
                    goto LABEL_835;
                }
LABEL_782:
                if (__p)
                {
                  uint64_t v266 = __p;
                  operator delete(__p);
                }
LABEL_815:
                double v103 = *(double *)&v136;
LABEL_299:
                switch(v271)
                {
                  case 2:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v106 = v269;
                      if (v269 != 0.0)
                      {
                        if (*(char *)(*(void *)&v269 + 31) < 0) {
                          operator delete(*(void **)(*(void *)&v269 + 8));
                        }
                        double v107 = v106;
                        uint64_t v108 = 0x1012C404EF22A49;
                        goto LABEL_324;
                      }
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v111 = v269;
                      if (v269 != 0.0)
                      {
                        uint64_t v112 = *(void **)(*(void *)&v269 + 8);
                        if (v112)
                        {
                          *(void *)(*(void *)&v269 + 16) = v112;
                          operator delete(v112);
                        }
                        double v107 = v111;
                        uint64_t v108 = 0x1080C409938AC02;
                        goto LABEL_324;
                      }
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v109 = v269;
                      if (v269 != 0.0)
                      {
                        std::string __p = (void *)(*(void *)&v269 + 8);
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        goto LABEL_319;
                      }
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v109 = v269;
                      if (v269 != 0.0)
                      {
                        std::string __p = (void *)(*(void *)&v269 + 8);
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_319:
                        double v107 = v109;
                        uint64_t v108 = 0x1020C405E66F15BLL;
                        goto LABEL_324;
                      }
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v269, 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v113 = v269;
                      if (v269 != 0.0)
                      {
                        boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v269 + 16));
                        double v107 = v113;
                        unsigned int v110 = -235920773;
                        goto LABEL_323;
                      }
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v269, 0xFFFFFFFFFFFFFFFFLL) == 1 && v269 != 0.0)
                    {
                      double v107 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v269));
                      unsigned int v110 = 2071181815;
LABEL_323:
                      uint64_t v108 = v110 | 0x1030C4000000000;
LABEL_324:
                      MEMORY[0x22A614FA0](*(void *)&v107, v108);
                    }
                    break;
                  default:
                    break;
                }
                switch(v104)
                {
                  case 0:
                    goto LABEL_326;
                  case 1:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                        unint64_t v114 = (uint64_t)(v103 + (double)*(uint64_t *)v12);
LABEL_385:
                        *(void *)size_t v12 = v114;
                        goto LABEL_687;
                      case 1:
                        double v134 = v103;
LABEL_618:
                        *size_t v12 = *v12 + v134;
                        goto LABEL_687;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        uint64_t v167 = *(double **)(*(void *)v12 + 8);
                        uint64_t v168 = *(void *)(*(void *)v12 + 16) - (void)v167;
                        if (!v168) {
                          goto LABEL_687;
                        }
                        unint64_t v169 = v168 >> 3;
                        if (v169 <= 1) {
                          unint64_t v169 = 1;
                        }
                        do
                        {
                          *uint64_t v167 = *v167 + v103;
                          ++v167;
                          --v169;
                        }
                        while (v169);
                        goto LABEL_578;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 6:
                        uint64_t v184 = *((void *)this + 1);
                        uint64_t v185 = v184 + vcvtmd_s64_f64(v103);
                        *((void *)this + 1) = v184 & 0xFF00000000000000 | v185 & 0xFFFFFFFFFFFFFFLL;
                        uint64_t v186 = (uint64_t)((v103 - (double)(uint64_t)floor(v103)) * 1000000.0) + *((int *)this + 4);
                        if (v186 > 999999)
                        {
                          *(void *)size_t v12 = (v185 + 1) & 0xFFFFFFFFFFFFFFLL | v184 & 0xFF00000000000000;
                          LODWORD(v186) = v186 - 1000000;
                        }
                        if (v186 > 0xF423F) {
                          turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                        }
                        *((_DWORD *)this + 4) = v186;
                        goto LABEL_687;
                      case 7:
                        goto LABEL_393;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        uint64_t v170 = *(uint64_t **)v12;
                        unint64_t v172 = *(uint64_t **)(*(void *)v12 + 24);
                        unint64_t v171 = *(uint64_t **)(*(void *)v12 + 32);
                        if (v171 == v172 || !v170[1]) {
                          goto LABEL_687;
                        }
                        uint64_t v173 = 1;
                        do
                        {
                          uint64_t v174 = *v172++;
                          v173 *= v174;
                        }
                        while (v172 != v171);
                        if (!v173) {
                          goto LABEL_578;
                        }
                        turi::flexible_type_impl::ndarray<double>::ensure_unique(v170 + 1);
                        unint64_t v175 = (v170[4] - v170[3]) >> 3;
                        uint64_t v264 = 0;
                        std::vector<unsigned long>::vector(&__p, v175, &v264);
                        do
                        {
                          unint64_t v176 = (uint64_t *)__p;
                          uint64_t v177 = 0;
                          if (v266 != __p)
                          {
                            unint64_t v178 = (v266 - (unsigned char *)__p) >> 3;
                            v179 = (uint64_t *)v170[6];
                            if (v178 <= 1) {
                              unint64_t v178 = 1;
                            }
                            do
                            {
                              uint64_t v181 = *v176++;
                              uint64_t v180 = v181;
                              uint64_t v182 = *v179++;
                              v177 += v182 * v180;
                              --v178;
                            }
                            while (v178);
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique(v170 + 1);
                          *(double *)(*(void *)v170[1] + 8 * (v170[9] + v177)) = *(double *)(*(void *)v170[1]
                                                                                             + 8 * (v170[9] + v177))
                                                                                 + v103;
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v170 + 1), (uint64_t *)&__p));
                        break;
                      default:
                        goto LABEL_835;
                    }
                    goto LABEL_576;
                  case 2:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_623;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        int v115 = *(char *)(*(void *)&v103 + 31);
                        if (v115 >= 0) {
                          char v116 = (const std::string::value_type *)(*(void *)&v103 + 8);
                        }
                        else {
                          char v116 = *(const std::string::value_type **)(*(void *)&v103 + 8);
                        }
                        if (v115 >= 0) {
                          std::string::size_type v117 = *(unsigned __int8 *)(*(void *)&v103 + 31);
                        }
                        else {
                          std::string::size_type v117 = *(void *)(*(void *)&v103 + 16);
                        }
                        std::string::append((std::string *)(*(void *)v12 + 8), v116, v117);
                        goto LABEL_624;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_623;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_623;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_623;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_623;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
LABEL_623:
                        turi::flexible_type_fail(0);
LABEL_624:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v103, 0xFFFFFFFFFFFFFFFFLL) != 1
                          || *(void *)&v103 == 0)
                        {
                          goto LABEL_687;
                        }
                        if (*(char *)(*(void *)&v103 + 31) < 0) {
                          operator delete(*(void **)(*(void *)&v103 + 8));
                        }
                        double v188 = v103;
                        uint64_t v191 = 0x1012C404EF22A49;
                        break;
                      default:
                        goto LABEL_835;
                    }
                    break;
                  case 3:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_643;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_643;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        double v139 = *v12;
                        turi::flexible_type_fail(*(void *)(*(void *)v12 + 16) - *(void *)(*(void *)v12 + 8) == *(void *)(*(void *)&v103 + 16) - *(void *)(*(void *)&v103 + 8));
                        uint64_t v140 = *(double **)(*(void *)&v139 + 8);
                        uint64_t v141 = *(void *)(*(void *)&v139 + 16) - (void)v140;
                        if (!v141) {
                          goto LABEL_644;
                        }
                        unint64_t v142 = v141 >> 3;
                        unint64_t v143 = *(double **)(*(void *)&v103 + 8);
                        if (v142 <= 1) {
                          unint64_t v142 = 1;
                        }
                        do
                        {
                          double v144 = *v143++;
                          *uint64_t v140 = v144 + *v140;
                          ++v140;
                          --v142;
                        }
                        while (v142);
                        goto LABEL_578;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_643;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_643;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_643;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
LABEL_643:
                        turi::flexible_type_fail(0);
LABEL_644:
                        if (atomic_fetch_add(*(atomic_ullong *volatile *)&v103, 0xFFFFFFFFFFFFFFFFLL) != 1
                          || *(void *)&v103 == 0)
                        {
                          goto LABEL_687;
                        }
                        uint64_t v193 = *(void **)(*(void *)&v103 + 8);
                        if (v193)
                        {
                          *(void *)(*(void *)&v103 + 16) = v193;
                          operator delete(v193);
                        }
                        double v188 = v103;
                        uint64_t v191 = 0x1080C409938AC02;
                        break;
                      default:
                        goto LABEL_835;
                    }
                    break;
                  case 4:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        break;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      default:
                        goto LABEL_835;
                    }
                    turi::flexible_type_fail(0);
LABEL_586:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v103, 0xFFFFFFFFFFFFFFFFLL) != 1
                      || *(void *)&v103 == 0)
                    {
                      goto LABEL_687;
                    }
                    std::string __p = (void *)(*(void *)&v103 + 8);
                    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                    goto LABEL_669;
                  case 5:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        break;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      default:
                        goto LABEL_835;
                    }
                    turi::flexible_type_fail(0);
LABEL_664:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v103, 0xFFFFFFFFFFFFFFFFLL) != 1
                      || *(void *)&v103 == 0)
                    {
                      goto LABEL_687;
                    }
                    std::string __p = (void *)(*(void *)&v103 + 8);
                    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_669:
                    double v188 = v103;
                    uint64_t v191 = 0x1020C405E66F15BLL;
                    break;
                  case 6:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_393;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_393;
                      default:
                        goto LABEL_835;
                    }
                  case 7:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        break;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      default:
                        goto LABEL_835;
                    }
LABEL_393:
                    turi::flexible_type_fail(0);
                    goto LABEL_687;
                  case 8:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        break;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        return;
                      default:
                        goto LABEL_835;
                    }
                    turi::flexible_type_fail(0);
LABEL_680:
                    if (atomic_fetch_add(*(atomic_ullong *volatile *)&v103, 0xFFFFFFFFFFFFFFFFLL) != 1
                      || *(void *)&v103 == 0)
                    {
                      goto LABEL_687;
                    }
                    boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v103 + 16));
                    double v188 = v103;
                    unsigned int v189 = -235920773;
LABEL_685:
                    uint64_t v191 = v189 | 0x1030C4000000000;
                    break;
                  case 9:
                    switch(*((unsigned char *)this + 20))
                    {
                      case 0:
                      case 1:
                      case 6:
                      case 7:
                        goto LABEL_609;
                      case 2:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_609;
                      case 3:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_609;
                      case 4:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_609;
                      case 5:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        goto LABEL_609;
                      case 8:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
LABEL_609:
                        turi::flexible_type_fail(0);
                        goto LABEL_610;
                      case 9:
                        if (**(void **)v12 != 1) {
                          operator new();
                        }
                        double v145 = *v12;
                        uint64_t v146 = (uint64_t *)(*(void *)v12 + 8);
                        if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)v146, *(void *)&v103 + 8)) {
                          turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                        }
                        double v148 = *(uint64_t **)(*(void *)&v145 + 24);
                        unint64_t v147 = *(uint64_t **)(*(void *)&v145 + 32);
                        if (v147 == v148 || !*v146)
                        {
LABEL_610:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v103, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && *(void *)&v103 != 0)
                          {
                            double v188 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v103));
                            unsigned int v189 = 2071181815;
                            goto LABEL_685;
                          }
                          goto LABEL_687;
                        }
                        uint64_t v149 = 1;
                        do
                        {
                          uint64_t v150 = *v148++;
                          v149 *= v150;
                        }
                        while (v148 != v147);
                        if (!v149) {
                          goto LABEL_578;
                        }
                        turi::flexible_type_impl::ndarray<double>::ensure_unique(v146);
                        unint64_t v151 = (uint64_t)(*(void *)(*(void *)&v145 + 32) - *(void *)(*(void *)&v145 + 24)) >> 3;
                        uint64_t v264 = 0;
                        std::vector<unsigned long>::vector(&__p, v151, &v264);
                        do
                        {
                          unint64_t v152 = (uint64_t *)__p;
                          if (v266 == __p)
                          {
                            uint64_t v161 = 0;
                            double v162 = *(double *)(**(void **)(*(void *)&v103 + 8)
                                             + 8 * *(void *)(*(void *)&v103 + 72));
                          }
                          else
                          {
                            uint64_t v153 = 0;
                            unint64_t v154 = (v266 - (unsigned char *)__p) >> 3;
                            uint64_t v155 = *(uint64_t **)(*(void *)&v103 + 48);
                            if (v154 <= 1) {
                              unint64_t v154 = 1;
                            }
                            double v156 = (uint64_t *)__p;
                            unint64_t v157 = v154;
                            do
                            {
                              uint64_t v159 = *v156++;
                              uint64_t v158 = v159;
                              uint64_t v160 = *v155++;
                              v153 += v160 * v158;
                              --v157;
                            }
                            while (v157);
                            uint64_t v161 = 0;
                            double v162 = *(double *)(**(void **)(*(void *)&v103 + 8)
                                             + 8 * (*(void *)(*(void *)&v103 + 72) + v153));
                            unint64_t v163 = *(uint64_t **)(*(void *)&v145 + 48);
                            do
                            {
                              uint64_t v165 = *v152++;
                              uint64_t v164 = v165;
                              uint64_t v166 = *v163++;
                              v161 += v166 * v164;
                              --v154;
                            }
                            while (v154);
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique(v146);
                          *(double *)(**(void **)(*(void *)&v145 + 8)
                                    + 8 * (*(void *)(*(void *)&v145 + 72) + v161)) = v162
                                                                                         + *(double *)(**(void **)(*(void *)&v145 + 8) + 8 * (*(void *)(*(void *)&v145 + 72) + v161));
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)v146, (uint64_t *)&__p));
                        break;
                      default:
                        goto LABEL_835;
                    }
                    goto LABEL_576;
                  default:
                    goto LABEL_835;
                }
                MEMORY[0x22A614FA0](*(void *)&v188, v191);
LABEL_687:
                switch(BYTE4(v268[1]))
                {
                  case 2:
                    if (atomic_fetch_add(v268[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      v196 = v268[0];
                      if (v268[0])
                      {
                        if (*((char *)v268[0] + 31) < 0) {
                          operator delete(*((void **)v268[0] + 1));
                        }
                        uint64_t v197 = v196;
                        uint64_t v198 = 0x1012C404EF22A49;
                        goto LABEL_712;
                      }
                    }
                    break;
                  case 3:
                    if (atomic_fetch_add(v268[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v201 = v268[0];
                      if (v268[0])
                      {
                        unint64_t v202 = (void *)v268[0][1];
                        if (v202)
                        {
                          v268[0][2] = (atomic_ullong)v202;
                          operator delete(v202);
                        }
                        uint64_t v197 = v201;
                        uint64_t v198 = 0x1080C409938AC02;
                        goto LABEL_712;
                      }
                    }
                    break;
                  case 4:
                    if (atomic_fetch_add(v268[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      unint64_t v199 = v268[0];
                      if (v268[0])
                      {
                        std::string __p = v268[0] + 1;
                        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                        goto LABEL_707;
                      }
                    }
                    break;
                  case 5:
                    if (atomic_fetch_add(v268[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      unint64_t v199 = v268[0];
                      if (v268[0])
                      {
                        std::string __p = v268[0] + 1;
                        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_707:
                        uint64_t v197 = v199;
                        uint64_t v198 = 0x1020C405E66F15BLL;
                        goto LABEL_712;
                      }
                    }
                    break;
                  case 8:
                    if (atomic_fetch_add(v268[0], 0xFFFFFFFFFFFFFFFFLL) == 1)
                    {
                      double v203 = v268[0];
                      if (v268[0])
                      {
                        boost::detail::shared_count::~shared_count((atomic_uint **)v268[0] + 2);
                        uint64_t v197 = v203;
                        unsigned int v200 = -235920773;
                        goto LABEL_711;
                      }
                    }
                    break;
                  case 9:
                    if (atomic_fetch_add(v268[0], 0xFFFFFFFFFFFFFFFFLL) == 1 && v268[0])
                    {
                      uint64_t v197 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v268[0]);
                      unsigned int v200 = 2071181815;
LABEL_711:
                      uint64_t v198 = v200 | 0x1030C4000000000;
LABEL_712:
                      MEMORY[0x22A614FA0](v197, v198);
                    }
                    break;
                  default:
                    return;
                }
                return;
              case 2:
                switch(v104)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  default:
                    goto LABEL_835;
                }
              case 3:
                switch(v104)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    double v135 = v269;
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    *(double *)&uint64_t v136 = v103;
                    turi::flexible_type_fail(v136[2] - v136[1] == *(void *)(*(void *)&v269 + 16)
                                                                - *(void *)(*(void *)&v269 + 8));
                    uint64_t v204 = *(double **)(*(void *)&v103 + 8);
                    uint64_t v205 = *(void *)(*(void *)&v103 + 16) - (void)v204;
                    if (v205)
                    {
                      unint64_t v206 = v205 >> 3;
                      uint64_t v207 = *(double **)(*(void *)&v135 + 8);
                      if (v206 <= 1) {
                        unint64_t v206 = 1;
                      }
                      do
                      {
                        double v208 = *v207++;
                        *uint64_t v204 = *v204 / v208;
                        ++v204;
                        --v206;
                      }
                      while (v206);
                    }
                    goto LABEL_815;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  default:
                    goto LABEL_835;
                }
              case 4:
                switch(v104)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  default:
                    goto LABEL_835;
                }
              case 5:
                switch(v104)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  default:
                    goto LABEL_835;
                }
              case 6:
                switch(v104)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  default:
                    goto LABEL_835;
                }
              case 7:
                switch(v104)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  default:
                    goto LABEL_835;
                }
              case 8:
                switch(v104)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 9:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  default:
                    goto LABEL_835;
                }
              case 9:
                switch(v104)
                {
                  case 0:
                  case 1:
                  case 6:
                  case 7:
                    goto LABEL_298;
                  case 2:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 3:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 4:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 5:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    goto LABEL_298;
                  case 8:
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
LABEL_298:
                    turi::flexible_type_fail(0);
                    goto LABEL_299;
                  case 9:
                    double v137 = v269;
                    if (**(void **)&v103 != 1) {
                      operator new();
                    }
                    *(double *)&uint64_t v136 = v103;
                    if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(void *)&v103 + 8, *(void *)&v269 + 8)) {
                      turi::flexible_type_impl::ndarray<double>::operator/=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                    }
                    uint64_t v210 = *(uint64_t **)(*(void *)&v103 + 24);
                    v209 = *(uint64_t **)(*(void *)&v103 + 32);
                    if (v209 == v210) {
                      goto LABEL_815;
                    }
                    if (!*(void *)(*(void *)&v103 + 8)) {
                      goto LABEL_815;
                    }
                    uint64_t v211 = 1;
                    do
                    {
                      uint64_t v212 = *v210++;
                      v211 *= v212;
                    }
                    while (v210 != v209);
                    if (!v211) {
                      goto LABEL_815;
                    }
                    turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v103 + 8));
                    unint64_t v213 = (uint64_t)(*(void *)(*(void *)&v103 + 32) - *(void *)(*(void *)&v103 + 24)) >> 3;
                    uint64_t v264 = 0;
                    std::vector<unsigned long>::vector(&__p, v213, &v264);
                    do
                    {
                      long long v214 = (uint64_t *)__p;
                      if (v266 == __p)
                      {
                        uint64_t v223 = 0;
                        double v224 = *(double *)(**(void **)(*(void *)&v137 + 8)
                                         + 8 * *(void *)(*(void *)&v137 + 72));
                      }
                      else
                      {
                        uint64_t v215 = 0;
                        unint64_t v216 = (v266 - (unsigned char *)__p) >> 3;
                        uint64_t v217 = *(uint64_t **)(*(void *)&v137 + 48);
                        if (v216 <= 1) {
                          unint64_t v216 = 1;
                        }
                        v218 = (uint64_t *)__p;
                        unint64_t v219 = v216;
                        do
                        {
                          uint64_t v221 = *v218++;
                          uint64_t v220 = v221;
                          uint64_t v222 = *v217++;
                          v215 += v222 * v220;
                          --v219;
                        }
                        while (v219);
                        uint64_t v223 = 0;
                        double v224 = *(double *)(**(void **)(*(void *)&v137 + 8)
                                         + 8 * (*(void *)(*(void *)&v137 + 72) + v215));
                        uint64_t v225 = (uint64_t *)v136[6];
                        do
                        {
                          uint64_t v227 = *v214++;
                          uint64_t v226 = v227;
                          uint64_t v228 = *v225++;
                          v223 += v228 * v226;
                          --v216;
                        }
                        while (v216);
                      }
                      turi::flexible_type_impl::ndarray<double>::ensure_unique(v136 + 1);
                      *(double *)(*(void *)v136[1] + 8 * (v136[9] + v223)) = *(double *)(*(void *)v136[1]
                                                                                         + 8 * (v136[9] + v223))
                                                                             / v224;
                    }
                    while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>((uint64_t)(v136 + 1), (uint64_t *)&__p));
                    goto LABEL_782;
                  default:
                    goto LABEL_835;
                }
              default:
LABEL_835:
                turi::flexible_type_fail(0);
                goto LABEL_838;
            }
          default:
LABEL_834:
            turi::flexible_type_fail(0);
LABEL_838:
            __break(1u);
            break;
        }
      }
      else
      {
        *((unsigned char *)this + 25) = 1;
      }
    }
    else
    {
      ++*((void *)this + 4);
      size_t v8 = (atomic_ullong *volatile *)((char *)this + 8);
      if ((atomic_ullong **)((char *)this + 8) != a2)
      {
        switch(*((unsigned char *)this + 20))
        {
          case 2:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v9 = *v8;
              if (!*v8) {
                goto LABEL_62;
              }
              if (*((char *)v9 + 31) < 0) {
                operator delete((void *)v9[1]);
              }
              size_t v10 = v9;
              uint64_t v11 = 0x1012C404EF22A49;
              goto LABEL_61;
            }
            break;
          case 3:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v26 = *v8;
              if (!*v8) {
                goto LABEL_62;
              }
              uint64_t v27 = (void *)v26[1];
              if (v27)
              {
                v26[2] = (atomic_ullong)v27;
                operator delete(v27);
              }
              size_t v10 = v26;
              uint64_t v11 = 0x1080C409938AC02;
              goto LABEL_61;
            }
            break;
          case 4:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *v8;
              if (!*v8) {
                goto LABEL_62;
              }
              std::string __p = v24 + 1;
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
              goto LABEL_56;
            }
            break;
          case 5:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v24 = *v8;
              if (!*v8) {
                goto LABEL_62;
              }
              std::string __p = v24 + 1;
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_56:
              size_t v10 = v24;
              uint64_t v11 = 0x1020C405E66F15BLL;
              goto LABEL_61;
            }
            break;
          case 8:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              atomic_ullong *volatile v28 = *v8;
              if (!*v8) {
                goto LABEL_62;
              }
              boost::detail::shared_count::~shared_count((atomic_uint **)v28 + 2);
              size_t v10 = v28;
              unsigned int v25 = -235920773;
              goto LABEL_60;
            }
            break;
          case 9:
            if (atomic_fetch_add(*v8, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              if (*v8)
              {
                size_t v10 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v8);
                unsigned int v25 = 2071181815;
LABEL_60:
                uint64_t v11 = v25 | 0x1030C4000000000;
LABEL_61:
                MEMORY[0x22A614FA0](v10, v11);
              }
LABEL_62:
              *size_t v8 = 0;
            }
            break;
          default:
            break;
        }
        double v29 = *a2;
        *(void *)((char *)this + 13) = *(atomic_ullong **)((char *)a2 + 5);
        *size_t v8 = v29;
        unsigned int v30 = *((unsigned __int8 *)a2 + 12);
        *((unsigned char *)this + 20) = v30;
        if (v30 <= 9 && ((1 << v30) & 0x33C) != 0) {
          atomic_fetch_add(*v8, 1uLL);
        }
      }
      *((unsigned char *)this + 24) = 1;
    }
  }
}

void sub_224092C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18, uint64_t a19, int a20,char a21)
{
  MEMORY[0x22A614FA0](v22, 0x1020C405E66F15BLL);
  if (atomic_fetch_add((atomic_ullong *volatile)v21, 0xFFFFFFFFFFFFFFFFLL) == 1 && v21 != 0)
  {
    boost::detail::shared_count::~shared_count((atomic_uint **)(v21 + 16));
    MEMORY[0x22A614FA0](v21, 0x1030C40F1F0227BLL);
  }
  switch(a18)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v25 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      if (*(char *)(a16 + 31) < 0) {
        operator delete(*(void **)(a16 + 8));
      }
      atomic_ullong *volatile v26 = (void *)v25;
      uint64_t v27 = 0x1012C404EF22A49;
      goto LABEL_31;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v30 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      double v31 = *(void **)(a16 + 8);
      if (v31)
      {
        *(void *)(a16 + 16) = v31;
        operator delete(v31);
      }
      atomic_ullong *volatile v26 = (void *)v30;
      uint64_t v27 = 0x1080C409938AC02;
      goto LABEL_31;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v32 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      a15 = a16 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
      goto LABEL_30;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v32 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      a15 = a16 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
LABEL_30:
      atomic_ullong *volatile v26 = (void *)v32;
      uint64_t v27 = 0x1020C405E66F15BLL;
      goto LABEL_31;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_32;
      }
      uint64_t v28 = a16;
      if (!a16) {
        goto LABEL_32;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(a16 + 16));
      atomic_ullong *volatile v26 = (void *)v28;
      unsigned int v29 = -235920773;
      goto LABEL_23;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)a16, 0xFFFFFFFFFFFFFFFFLL) != 1 || !a16) {
        goto LABEL_32;
      }
      atomic_ullong *volatile v26 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)a16);
      unsigned int v29 = 2071181815;
LABEL_23:
      uint64_t v27 = v29 | 0x1030C4000000000;
LABEL_31:
      MEMORY[0x22A614FA0](v26, v27);
LABEL_32:
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_32;
  }
}

void turi::groupby_operators::vector_average::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = v3;
  if (!*((unsigned char *)v3 + 25) && !*(unsigned char *)(a1 + 25))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*((unsigned char *)v3 + 24))
      {
        unsigned int v5 = *(unsigned __int8 *)(a1 + 20);
        uint64_t v6 = 1;
        switch(*(unsigned char *)(a1 + 20))
        {
          case 3:
            uint64_t v7 = *(void *)(a1 + 8);
            size_t v8 = (void *)(v7 + 8);
            atomic_ullong *volatile v9 = (void *)(v7 + 16);
            char v10 = 3;
            goto LABEL_14;
          case 4:
            uint64_t v12 = *(void *)(a1 + 8);
            size_t v8 = (void *)(v12 + 8);
            atomic_ullong *volatile v9 = (void *)(v12 + 16);
            char v10 = 4;
            goto LABEL_14;
          case 5:
            uint64_t v11 = *(void *)(a1 + 8);
            size_t v8 = (void *)(v11 + 8);
            atomic_ullong *volatile v9 = (void *)(v11 + 16);
            char v10 = 5;
LABEL_14:
            uint64_t v6 = (uint64_t)(*v9 - *v8) >> v10;
            break;
          case 9:
            atomic_ullong *volatile v24 = *(void **)(a1 + 8);
            atomic_ullong *volatile v26 = (uint64_t *)v24[3];
            uint64_t v25 = (uint64_t *)v24[4];
            if (v25 == v26)
            {
              uint64_t v6 = 0;
            }
            else
            {
              uint64_t v6 = v24[1];
              if (v6)
              {
                uint64_t v6 = 1;
                do
                {
                  uint64_t v27 = *v26++;
                  v6 *= v27;
                }
                while (v26 != v25);
              }
            }
            break;
          default:
            break;
        }
        uint64_t v13 = 1;
        switch(*((unsigned char *)v3 + 20))
        {
          case 3:
            uint64_t v14 = *((void *)v3 + 1);
            size_t v15 = (void *)(v14 + 8);
            char v16 = (void *)(v14 + 16);
            char v17 = 3;
            goto LABEL_19;
          case 4:
            uint64_t v19 = *((void *)v3 + 1);
            size_t v15 = (void *)(v19 + 8);
            char v16 = (void *)(v19 + 16);
            char v17 = 4;
            goto LABEL_19;
          case 5:
            uint64_t v18 = *((void *)v3 + 1);
            size_t v15 = (void *)(v18 + 8);
            char v16 = (void *)(v18 + 16);
            char v17 = 5;
LABEL_19:
            uint64_t v13 = (uint64_t)(*v16 - *v15) >> v17;
            break;
          case 9:
            uint64_t v28 = (void *)*((void *)v3 + 1);
            uint64_t v30 = (uint64_t *)v28[3];
            unsigned int v29 = (uint64_t *)v28[4];
            if (v29 == v30)
            {
              uint64_t v13 = 0;
            }
            else
            {
              uint64_t v13 = v28[1];
              if (v13)
              {
                uint64_t v13 = 1;
                do
                {
                  uint64_t v31 = *v30++;
                  v13 *= v31;
                }
                while (v30 != v29);
              }
            }
            break;
          default:
            break;
        }
        if (v6 == v13)
        {
          double v20 = *(double *)(a1 + 8);
          uint64_t v21 = *(void *)(a1 + 32);
          unsigned int v22 = *(_DWORD *)(a1 + 16);
          double v23 = v20;
          switch(*(unsigned char *)(a1 + 20))
          {
            case 0:
LABEL_23:
              *(void *)&double v23 = *(void *)&v20 * v21;
              goto LABEL_72;
            case 1:
LABEL_35:
              double v23 = v20 * (double)v21;
              goto LABEL_72;
            case 2:
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
              atomic_fetch_add(*(atomic_ullong *volatile *)&v20, 1uLL);
              double v23 = v20;
              switch(v5)
              {
                case 0u:
                  goto LABEL_23;
                case 1u:
                  goto LABEL_35;
                case 2u:
                  if (**(void **)&v20 != 1) {
                    operator new();
                  }
                  return;
                case 3u:
                  if (**(void **)&v20 != 1) {
                    operator new();
                  }
                  double v23 = v20;
                  uint64_t v44 = *(double **)(*(void *)&v20 + 8);
                  uint64_t v45 = *(void *)(*(void *)&v20 + 16) - (void)v44;
                  if (v45)
                  {
                    unint64_t v46 = v45 >> 3;
                    if (v46 <= 1) {
                      unint64_t v46 = 1;
                    }
                    do
                    {
                      double *v44 = *v44 * (double)v21;
                      ++v44;
                      --v46;
                    }
                    while (v46);
                  }
                  goto LABEL_72;
                case 4u:
                  if (**(void **)&v20 != 1) {
                    operator new();
                  }
                  return;
                case 5u:
                  if (**(void **)&v20 != 1) {
                    operator new();
                  }
                  return;
                case 6u:
                case 7u:
                  goto LABEL_71;
                case 8u:
                  if (**(void **)&v20 != 1) {
                    operator new();
                  }
                  return;
                case 9u:
                  if (**(void **)&v20 != 1) {
                    operator new();
                  }
                  double v23 = v20;
                  uint64_t v33 = *(uint64_t **)(*(void *)&v20 + 24);
                  uint64_t v32 = *(uint64_t **)(*(void *)&v20 + 32);
                  if (v32 != v33)
                  {
                    if (*(void *)(*(void *)&v20 + 8))
                    {
                      uint64_t v34 = 1;
                      do
                      {
                        uint64_t v35 = *v33++;
                        v34 *= v35;
                      }
                      while (v33 != v32);
                      if (v34)
                      {
                        turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v20 + 8));
                        unint64_t v36 = (uint64_t)(*(void *)(*(void *)&v20 + 32) - *(void *)(*(void *)&v20 + 24)) >> 3;
                        uint64_t v175 = 0;
                        std::vector<unsigned long>::vector(&__p, v36, &v175);
                        do
                        {
                          double v37 = (uint64_t *)__p;
                          uint64_t v38 = 0;
                          if (v177 != __p)
                          {
                            unint64_t v39 = (v177 - (unsigned char *)__p) >> 3;
                            unint64_t v40 = *(uint64_t **)(*(void *)&v23 + 48);
                            if (v39 <= 1) {
                              unint64_t v39 = 1;
                            }
                            do
                            {
                              uint64_t v42 = *v37++;
                              uint64_t v41 = v42;
                              uint64_t v43 = *v40++;
                              v38 += v43 * v41;
                              --v39;
                            }
                            while (v39);
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v23 + 8));
                          *(double *)(**(void **)(*(void *)&v23 + 8)
                                    + 8 * (*(void *)(*(void *)&v23 + 72) + v38)) = *(double *)(**(void **)(*(void *)&v23 + 8) + 8 * (*(void *)(*(void *)&v23 + 72) + v38))
                                                                                       * (double)v21;
                        }
                        while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(void *)&v23 + 8, (uint64_t *)&__p));
                        if (__p)
                        {
                          uint64_t v177 = __p;
                          operator delete(__p);
                        }
                      }
                    }
                  }
                  goto LABEL_72;
                default:
                  goto LABEL_521;
              }
              double v23 = v20;
              goto LABEL_71;
            case 6:
            case 7:
LABEL_71:
              turi::flexible_type_fail(0);
LABEL_72:
              double v47 = v4[1];
              int v48 = *((unsigned __int8 *)v4 + 20);
              uint64_t v49 = *((void *)v4 + 4);
              double v50 = v47;
              switch(*((unsigned char *)v4 + 20))
              {
                case 0:
LABEL_74:
                  *(void *)&double v50 = *(void *)&v47 * v49;
                  goto LABEL_110;
                case 1:
LABEL_75:
                  double v50 = v47 * (double)v49;
                  goto LABEL_110;
                case 2:
                case 3:
                case 4:
                case 5:
                case 8:
                case 9:
                  atomic_fetch_add(*(atomic_ullong *volatile *)&v47, 1uLL);
                  double v50 = v47;
                  switch(v48)
                  {
                    case 0:
                      goto LABEL_74;
                    case 1:
                      goto LABEL_75;
                    case 2:
                      if (**(void **)&v47 != 1) {
                        operator new();
                      }
                      goto LABEL_87;
                    case 3:
                      if (**(void **)&v47 != 1) {
                        operator new();
                      }
                      double v50 = v47;
                      unint64_t v63 = *(double **)(*(void *)&v47 + 8);
                      uint64_t v64 = *(void *)(*(void *)&v47 + 16) - (void)v63;
                      if (v64)
                      {
                        unint64_t v65 = v64 >> 3;
                        if (v65 <= 1) {
                          unint64_t v65 = 1;
                        }
                        do
                        {
                          *unint64_t v63 = *v63 * (double)v49;
                          ++v63;
                          --v65;
                        }
                        while (v65);
                      }
                      goto LABEL_110;
                    case 4:
                      if (**(void **)&v47 != 1) {
                        operator new();
                      }
                      goto LABEL_87;
                    case 5:
                      if (**(void **)&v47 != 1) {
                        operator new();
                      }
                      goto LABEL_87;
                    case 6:
                    case 7:
                      goto LABEL_109;
                    case 8:
                      if (**(void **)&v47 != 1) {
                        operator new();
                      }
LABEL_87:
                      double v50 = v47;
                      goto LABEL_109;
                    case 9:
                      if (**(void **)&v47 != 1) {
                        operator new();
                      }
                      double v50 = v47;
                      uint64_t v52 = *(uint64_t **)(*(void *)&v47 + 24);
                      unint64_t v51 = *(uint64_t **)(*(void *)&v47 + 32);
                      if (v51 != v52)
                      {
                        if (*(void *)(*(void *)&v47 + 8))
                        {
                          uint64_t v53 = 1;
                          do
                          {
                            uint64_t v54 = *v52++;
                            v53 *= v54;
                          }
                          while (v52 != v51);
                          if (v53)
                          {
                            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v47 + 8));
                            unint64_t v55 = (uint64_t)(*(void *)(*(void *)&v47 + 32) - *(void *)(*(void *)&v47 + 24)) >> 3;
                            uint64_t v175 = 0;
                            std::vector<unsigned long>::vector(&__p, v55, &v175);
                            do
                            {
                              double v56 = (uint64_t *)__p;
                              uint64_t v57 = 0;
                              if (v177 != __p)
                              {
                                unint64_t v58 = (v177 - (unsigned char *)__p) >> 3;
                                uint64_t v59 = *(uint64_t **)(*(void *)&v50 + 48);
                                if (v58 <= 1) {
                                  unint64_t v58 = 1;
                                }
                                do
                                {
                                  uint64_t v61 = *v56++;
                                  uint64_t v60 = v61;
                                  uint64_t v62 = *v59++;
                                  v57 += v62 * v60;
                                  --v58;
                                }
                                while (v58);
                              }
                              turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v50 + 8));
                              *(double *)(**(void **)(*(void *)&v50 + 8)
                                        + 8 * (*(void *)(*(void *)&v50 + 72) + v57)) = *(double *)(**(void **)(*(void *)&v50 + 8) + 8 * (*(void *)(*(void *)&v50 + 72) + v57))
                                                                                           * (double)v49;
                            }
                            while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(void *)&v50 + 8, (uint64_t *)&__p));
                            if (__p)
                            {
                              uint64_t v177 = __p;
                              operator delete(__p);
                            }
                          }
                        }
                      }
                      goto LABEL_110;
                    default:
                      goto LABEL_522;
                  }
                case 6:
                case 7:
LABEL_109:
                  turi::flexible_type_fail(0);
LABEL_110:
                  if (v5 <= 9 && ((1 << v5) & 0x33C) != 0) {
                    atomic_fetch_add(*(atomic_ullong *volatile *)&v23, 1uLL);
                  }
                  switch(v48)
                  {
                    case 0:
                      switch(v5)
                      {
                        case 0u:
                          int64_t v66 = *(void *)&v50 + *(void *)&v23;
                          goto LABEL_154;
                        case 1u:
                          double v124 = v23 + (double)*(uint64_t *)&v50;
                          goto LABEL_315;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          uint64_t v125 = *(double **)(*(void *)&v23 + 8);
                          uint64_t v126 = *(void *)(*(void *)&v23 + 16) - (void)v125;
                          if (!v126) {
                            goto LABEL_380;
                          }
                          unint64_t v127 = v126 >> 3;
                          if (v127 <= 1) {
                            unint64_t v127 = 1;
                          }
                          do
                          {
                            *uint64_t v125 = *v125 + (double)*(uint64_t *)&v50;
                            ++v125;
                            --v127;
                          }
                          while (v127);
                          goto LABEL_295;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 6u:
                          int64_t v66 = *(void *)&v23 & 0xFF00000000000000 | (*(void *)&v50 + *(void *)&v23) & 0xFFFFFFFFFFFFFFLL;
                          goto LABEL_154;
                        case 7u:
                          goto LABEL_153;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          double v101 = *(uint64_t **)(*(void *)&v23 + 24);
                          unint64_t v100 = *(uint64_t **)(*(void *)&v23 + 32);
                          if (v100 == v101 || !*(void *)(*(void *)&v23 + 8)) {
                            goto LABEL_380;
                          }
                          uint64_t v102 = 1;
                          do
                          {
                            uint64_t v103 = *v101++;
                            v102 *= v103;
                          }
                          while (v101 != v100);
                          if (!v102) {
                            goto LABEL_295;
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v23 + 8));
                          unint64_t v104 = (uint64_t)(*(void *)(*(void *)&v23 + 32) - *(void *)(*(void *)&v23 + 24)) >> 3;
                          uint64_t v175 = 0;
                          std::vector<unsigned long>::vector(&__p, v104, &v175);
                          do
                          {
                            uint64_t v105 = (uint64_t *)__p;
                            uint64_t v106 = 0;
                            if (v177 != __p)
                            {
                              unint64_t v107 = (v177 - (unsigned char *)__p) >> 3;
                              uint64_t v108 = *(uint64_t **)(*(void *)&v23 + 48);
                              if (v107 <= 1) {
                                unint64_t v107 = 1;
                              }
                              do
                              {
                                uint64_t v110 = *v105++;
                                uint64_t v109 = v110;
                                uint64_t v111 = *v108++;
                                v106 += v111 * v109;
                                --v107;
                              }
                              while (v107);
                            }
                            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v23 + 8));
                            *(double *)(**(void **)(*(void *)&v23 + 8)
                                      + 8 * (*(void *)(*(void *)&v23 + 72) + v106)) = *(double *)(**(void **)(*(void *)&v23 + 8) + 8 * (*(void *)(*(void *)&v23 + 72) + v106))
                                                                                          + (double)*(uint64_t *)&v50;
                          }
                          while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(void *)&v23 + 8, (uint64_t *)&__p));
                          break;
                        default:
                          goto LABEL_522;
                      }
                      goto LABEL_259;
                    case 1:
                      switch(v5)
                      {
                        case 0u:
                          int64_t v66 = (uint64_t)(v50 + (double)*(uint64_t *)&v23);
                          goto LABEL_154;
                        case 1u:
                          double v124 = v50 + v23;
LABEL_315:
                          *(double *)&int64_t v66 = v124;
                          goto LABEL_154;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          double v97 = *(double **)(*(void *)&v23 + 8);
                          uint64_t v98 = *(void *)(*(void *)&v23 + 16) - (void)v97;
                          if (!v98) {
                            goto LABEL_380;
                          }
                          unint64_t v99 = v98 >> 3;
                          if (v99 <= 1) {
                            unint64_t v99 = 1;
                          }
                          do
                          {
                            *double v97 = *v97 + v50;
                            ++v97;
                            --v99;
                          }
                          while (v99);
                          goto LABEL_295;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 6u:
                          unint64_t v128 = *(void *)&v23 + vcvtmd_s64_f64(v50);
                          uint64_t v129 = (uint64_t)((v50 - (double)(uint64_t)floor(v50)) * 1000000.0) + (int)v22;
                          if (v129 > 999999) {
                            ++v128;
                          }
                          int64_t v66 = *(void *)&v23 & 0xFF00000000000000 | v128 & 0xFFFFFFFFFFFFFFLL;
                          if (v129 <= 999999) {
                            unsigned int v22 = v129;
                          }
                          else {
                            unsigned int v22 = v129 - 1000000;
                          }
                          if (v22 >= 0xF4240) {
                            turi::flex_date_time::set_microsecond(int)::{lambda(void)#1}::operator()();
                          }
                          goto LABEL_154;
                        case 7u:
                          goto LABEL_153;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          double v113 = *(uint64_t **)(*(void *)&v23 + 24);
                          uint64_t v112 = *(uint64_t **)(*(void *)&v23 + 32);
                          if (v112 == v113 || !*(void *)(*(void *)&v23 + 8)) {
                            goto LABEL_380;
                          }
                          uint64_t v114 = 1;
                          do
                          {
                            uint64_t v115 = *v113++;
                            v114 *= v115;
                          }
                          while (v113 != v112);
                          if (!v114) {
                            goto LABEL_295;
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v23 + 8));
                          unint64_t v116 = (uint64_t)(*(void *)(*(void *)&v23 + 32) - *(void *)(*(void *)&v23 + 24)) >> 3;
                          uint64_t v175 = 0;
                          std::vector<unsigned long>::vector(&__p, v116, &v175);
                          do
                          {
                            std::string::size_type v117 = (uint64_t *)__p;
                            uint64_t v118 = 0;
                            if (v177 != __p)
                            {
                              unint64_t v119 = (v177 - (unsigned char *)__p) >> 3;
                              unint64_t v120 = *(uint64_t **)(*(void *)&v23 + 48);
                              if (v119 <= 1) {
                                unint64_t v119 = 1;
                              }
                              do
                              {
                                uint64_t v122 = *v117++;
                                uint64_t v121 = v122;
                                uint64_t v123 = *v120++;
                                v118 += v123 * v121;
                                --v119;
                              }
                              while (v119);
                            }
                            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v23 + 8));
                            *(double *)(**(void **)(*(void *)&v23 + 8)
                                      + 8 * (*(void *)(*(void *)&v23 + 72) + v118)) = *(double *)(**(void **)(*(void *)&v23 + 8) + 8 * (*(void *)(*(void *)&v23 + 72) + v118))
                                                                                          + v50;
                          }
                          while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(void *)&v23 + 8, (uint64_t *)&__p));
                          break;
                        default:
                          goto LABEL_522;
                      }
                      goto LABEL_259;
                    case 2:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_153;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          int v67 = *(char *)(*(void *)&v50 + 31);
                          if (v67 >= 0) {
                            unint64_t v68 = (const std::string::value_type *)(*(void *)&v50 + 8);
                          }
                          else {
                            unint64_t v68 = *(const std::string::value_type **)(*(void *)&v50 + 8);
                          }
                          if (v67 >= 0) {
                            std::string::size_type v69 = *(unsigned __int8 *)(*(void *)&v50 + 31);
                          }
                          else {
                            std::string::size_type v69 = *(void *)(*(void *)&v50 + 16);
                          }
                          std::string::append((std::string *)(*(void *)&v23 + 8), v68, v69);
                          goto LABEL_380;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        default:
                          goto LABEL_522;
                      }
                    case 3:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_153;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          turi::flexible_type_fail(*(void *)(*(void *)&v23 + 16)
                                                 - *(void *)(*(void *)&v23 + 8) == *(void *)(*(void *)&v50 + 16)
                                                                                       - *(void *)(*(void *)&v50 + 8));
                          double v72 = *(double **)(*(void *)&v23 + 8);
                          uint64_t v73 = *(void *)(*(void *)&v23 + 16) - (void)v72;
                          if (!v73) {
                            goto LABEL_380;
                          }
                          unint64_t v74 = v73 >> 3;
                          unint64_t v75 = *(double **)(*(void *)&v50 + 8);
                          if (v74 <= 1) {
                            unint64_t v74 = 1;
                          }
                          do
                          {
                            double v76 = *v75++;
                            double *v72 = v76 + *v72;
                            ++v72;
                            --v74;
                          }
                          while (v74);
                          break;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        default:
                          goto LABEL_522;
                      }
                      goto LABEL_295;
                    case 4:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_153;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        default:
                          goto LABEL_522;
                      }
                    case 5:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_153;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        default:
                          goto LABEL_522;
                      }
                    case 6:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_153;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        default:
                          goto LABEL_522;
                      }
                    case 7:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_153;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        default:
                          goto LABEL_522;
                      }
                    case 8:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
                          goto LABEL_153;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        default:
                          goto LABEL_522;
                      }
                    case 9:
                      switch(v5)
                      {
                        case 0u:
                        case 1u:
                        case 6u:
                        case 7u:
LABEL_153:
                          *(double *)&int64_t v66 = v23;
                          turi::flexible_type_fail(0);
LABEL_154:
                          uint64_t v70 = *((void *)v4 + 4) + *(void *)(a1 + 32);
                          unsigned int v174 = v22;
                          unsigned __int8 v173 = v5;
                          goto LABEL_155;
                        case 2u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 3u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 4u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 5u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          goto LABEL_379;
                        case 8u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
LABEL_379:
                          turi::flexible_type_fail(0);
                          goto LABEL_380;
                        case 9u:
                          *(double *)&int64_t v66 = v23;
                          if (**(void **)&v23 != 1) {
                            operator new();
                          }
                          if (!turi::flexible_type_impl::ndarray<double>::same_shape(*(void *)&v23 + 8, *(void *)&v50 + 8)) {
                            turi::flexible_type_impl::ndarray<double>::operator+=(turi::flexible_type_impl::ndarray<double> const&)::{lambda(void)#1}::operator()();
                          }
                          unint64_t v78 = *(uint64_t **)(*(void *)&v23 + 24);
                          uint64_t v77 = *(uint64_t **)(*(void *)&v23 + 32);
                          if (v77 == v78 || !*(void *)(*(void *)&v23 + 8))
                          {
LABEL_380:
                            uint64_t v70 = *((void *)v4 + 4) + *(void *)(a1 + 32);
                            unsigned int v174 = v22;
                            unsigned __int8 v173 = v5;
                            goto LABEL_381;
                          }
                          uint64_t v79 = 1;
                          do
                          {
                            uint64_t v80 = *v78++;
                            v79 *= v80;
                          }
                          while (v78 != v77);
                          if (!v79) {
                            goto LABEL_295;
                          }
                          turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v23 + 8));
                          unint64_t v81 = (uint64_t)(*(void *)(*(void *)&v23 + 32) - *(void *)(*(void *)&v23 + 24)) >> 3;
                          uint64_t v175 = 0;
                          std::vector<unsigned long>::vector(&__p, v81, &v175);
                          do
                          {
                            uint64_t v82 = (uint64_t *)__p;
                            if (v177 == __p)
                            {
                              uint64_t v91 = 0;
                              double v92 = *(double *)(**(void **)(*(void *)&v50 + 8)
                                              + 8 * *(void *)(*(void *)&v50 + 72));
                            }
                            else
                            {
                              uint64_t v83 = 0;
                              unint64_t v84 = (v177 - (unsigned char *)__p) >> 3;
                              uint64_t v85 = *(uint64_t **)(*(void *)&v50 + 48);
                              if (v84 <= 1) {
                                unint64_t v84 = 1;
                              }
                              double v86 = (uint64_t *)__p;
                              unint64_t v87 = v84;
                              do
                              {
                                uint64_t v89 = *v86++;
                                uint64_t v88 = v89;
                                uint64_t v90 = *v85++;
                                v83 += v90 * v88;
                                --v87;
                              }
                              while (v87);
                              uint64_t v91 = 0;
                              double v92 = *(double *)(**(void **)(*(void *)&v50 + 8)
                                              + 8 * (*(void *)(*(void *)&v50 + 72) + v83));
                              uint64_t v93 = *(uint64_t **)(*(void *)&v23 + 48);
                              do
                              {
                                uint64_t v95 = *v82++;
                                uint64_t v94 = v95;
                                uint64_t v96 = *v93++;
                                v91 += v96 * v94;
                                --v84;
                              }
                              while (v84);
                            }
                            turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(*(void *)&v23 + 8));
                            *(double *)(**(void **)(*(void *)&v23 + 8)
                                      + 8 * (*(void *)(*(void *)&v23 + 72) + v91)) = v92
                                                                                         + *(double *)(**(void **)(*(void *)&v23 + 8) + 8 * (*(void *)(*(void *)&v23 + 72) + v91));
                          }
                          while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(*(void *)&v23 + 8, (uint64_t *)&__p));
                          break;
                        default:
                          goto LABEL_522;
                      }
LABEL_259:
                      if (__p)
                      {
                        uint64_t v177 = __p;
                        operator delete(__p);
                      }
LABEL_295:
                      uint64_t v70 = *((void *)v4 + 4) + *(void *)(a1 + 32);
                      unsigned int v174 = v22;
                      unsigned __int8 v173 = v5;
                      if (v5 > 9)
                      {
LABEL_155:
                        unsigned int v71 = v5;
                      }
                      else
                      {
                        unsigned int v71 = v5;
                        if (((1 << v5) & 0x33C) != 0)
                        {
LABEL_381:
                          atomic_fetch_add((atomic_ullong *volatile)v66, 1uLL);
                          unsigned int v71 = v173;
                        }
                      }
                      double v130 = *(double *)&v66;
                      switch(v71)
                      {
                        case 0u:
                          *(void *)&double v130 = v66 / v70;
                          break;
                        case 1u:
                          double v130 = *(double *)&v66 / (double)v70;
                          break;
                        case 2u:
                          double v130 = *(double *)&v66;
                          if (*(void *)v66 != 1) {
                            operator new();
                          }
                          goto LABEL_415;
                        case 3u:
                          double v130 = *(double *)&v66;
                          if (*(void *)v66 != 1) {
                            operator new();
                          }
                          double v144 = *(double **)(v66 + 8);
                          uint64_t v145 = *(void *)(v66 + 16) - (void)v144;
                          if (v145)
                          {
                            unint64_t v146 = v145 >> 3;
                            if (v146 <= 1) {
                              unint64_t v146 = 1;
                            }
                            do
                            {
                              *double v144 = *v144 / (double)v70;
                              ++v144;
                              --v146;
                            }
                            while (v146);
                          }
                          break;
                        case 4u:
                          double v130 = *(double *)&v66;
                          if (*(void *)v66 != 1) {
                            operator new();
                          }
                          goto LABEL_415;
                        case 5u:
                          double v130 = *(double *)&v66;
                          if (*(void *)v66 != 1) {
                            operator new();
                          }
                          goto LABEL_415;
                        case 6u:
                        case 7u:
                          goto LABEL_415;
                        case 8u:
                          double v130 = *(double *)&v66;
                          if (*(void *)v66 != 1) {
                            operator new();
                          }
LABEL_415:
                          turi::flexible_type_fail(0);
                          break;
                        case 9u:
                          double v130 = *(double *)&v66;
                          if (*(void *)v66 != 1) {
                            operator new();
                          }
                          uint64_t v132 = *(uint64_t **)(v66 + 24);
                          uint64_t v131 = *(uint64_t **)(v66 + 32);
                          if (v131 != v132)
                          {
                            if (*(void *)(v66 + 8))
                            {
                              double v133 = (double)v70;
                              uint64_t v134 = 1;
                              do
                              {
                                uint64_t v135 = *v132++;
                                v134 *= v135;
                              }
                              while (v132 != v131);
                              if (v134)
                              {
                                turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v66 + 8));
                                unint64_t v136 = (uint64_t)(*(void *)(v66 + 32) - *(void *)(v66 + 24)) >> 3;
                                uint64_t v175 = 0;
                                std::vector<unsigned long>::vector(&__p, v136, &v175);
                                do
                                {
                                  double v137 = (uint64_t *)__p;
                                  uint64_t v138 = 0;
                                  if (v177 != __p)
                                  {
                                    unint64_t v139 = (v177 - (unsigned char *)__p) >> 3;
                                    uint64_t v140 = *(uint64_t **)(v66 + 48);
                                    if (v139 <= 1) {
                                      unint64_t v139 = 1;
                                    }
                                    do
                                    {
                                      uint64_t v142 = *v137++;
                                      uint64_t v141 = v142;
                                      uint64_t v143 = *v140++;
                                      v138 += v143 * v141;
                                      --v139;
                                    }
                                    while (v139);
                                  }
                                  turi::flexible_type_impl::ndarray<double>::ensure_unique((uint64_t *)(v66 + 8));
                                  *(double *)(**(void **)(v66 + 8) + 8 * (*(void *)(v66 + 72) + v138)) = *(double *)(**(void **)(v66 + 8) + 8 * (*(void *)(v66 + 72) + v138)) / v133;
                                }
                                while (turi::flexible_type_impl::ndarray<double>::increment_index<unsigned long>(v66 + 8, (uint64_t *)&__p));
                                if (__p)
                                {
                                  uint64_t v177 = __p;
                                  operator delete(__p);
                                }
                              }
                            }
                          }
                          break;
                        default:
                          goto LABEL_522;
                      }
                      switch(*(unsigned char *)(a1 + 20))
                      {
                        case 2:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            uint64_t v147 = *(void *)(a1 + 8);
                            if (!v147) {
                              goto LABEL_442;
                            }
                            if (*(char *)(v147 + 31) < 0) {
                              operator delete(*(void **)(v147 + 8));
                            }
                            double v148 = (void *)v147;
                            uint64_t v149 = 0x1012C404EF22A49;
                            goto LABEL_441;
                          }
                          break;
                        case 3:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            uint64_t v153 = *(void **)(a1 + 8);
                            if (!v153) {
                              goto LABEL_442;
                            }
                            unint64_t v154 = (void *)v153[1];
                            if (v154)
                            {
                              v153[2] = v154;
                              operator delete(v154);
                            }
                            double v148 = v153;
                            uint64_t v149 = 0x1080C409938AC02;
                            goto LABEL_441;
                          }
                          break;
                        case 4:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            uint64_t v150 = *(void **)(a1 + 8);
                            if (!v150) {
                              goto LABEL_442;
                            }
                            std::string __p = v150 + 1;
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_436;
                          }
                          break;
                        case 5:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            uint64_t v150 = *(void **)(a1 + 8);
                            if (!v150) {
                              goto LABEL_442;
                            }
                            std::string __p = v150 + 1;
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_436:
                            double v148 = v150;
                            uint64_t v149 = 0x1020C405E66F15BLL;
                            goto LABEL_441;
                          }
                          break;
                        case 8:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            uint64_t v155 = *(void *)(a1 + 8);
                            if (!v155) {
                              goto LABEL_442;
                            }
                            boost::detail::shared_count::~shared_count((atomic_uint **)(v155 + 16));
                            double v148 = (void *)v155;
                            unsigned int v152 = -235920773;
                            goto LABEL_440;
                          }
                          break;
                        case 9:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
                          {
                            unint64_t v151 = *(void **)(a1 + 8);
                            if (v151)
                            {
                              double v148 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v151);
                              unsigned int v152 = 2071181815;
LABEL_440:
                              uint64_t v149 = v152 | 0x1030C4000000000;
LABEL_441:
                              MEMORY[0x22A614FA0](v148, v149);
                            }
LABEL_442:
                            *(void *)(a1 + ++*(void *)(result + 8) = 0;
                          }
                          break;
                        default:
                          break;
                      }
                      *(double *)(a1 + ++*(void *)(result + 8) = v130;
                      *(_DWORD *)(a1 + 16) = v174;
                      *(unsigned char *)(a1 + 20) = v173;
                      unsigned int v156 = v5 - 2;
                      switch(v156)
                      {
                        case 0u:
                          unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v66, 0xFFFFFFFFFFFFFFFFLL);
                          if (*(double *)&v66 != 0.0 && add == 1)
                          {
                            uint64_t v158 = 0x1012C404EF22A49;
                            if ((*(char *)(v66 + 31) & 0x80000000) == 0) {
                              goto LABEL_465;
                            }
                            uint64_t v159 = *(void **)(v66 + 8);
                            goto LABEL_458;
                          }
                          break;
                        case 1u:
                          unint64_t v162 = atomic_fetch_add((atomic_ullong *volatile)v66, 0xFFFFFFFFFFFFFFFFLL);
                          if (*(double *)&v66 != 0.0 && v162 == 1)
                          {
                            uint64_t v158 = 0x1080C409938AC02;
                            uint64_t v159 = *(void **)(v66 + 8);
                            if (v159)
                            {
                              *(void *)(v66 + 16) = v159;
LABEL_458:
                              operator delete(v159);
                            }
                            goto LABEL_465;
                          }
                          break;
                        case 2u:
                          unint64_t v160 = atomic_fetch_add((atomic_ullong *volatile)v66, 0xFFFFFFFFFFFFFFFFLL);
                          if (*(double *)&v66 != 0.0 && v160 == 1)
                          {
                            uint64_t v158 = 0x1020C405E66F15BLL;
                            std::string __p = (void *)(v66 + 8);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_465;
                          }
                          break;
                        case 3u:
                          unint64_t v163 = atomic_fetch_add((atomic_ullong *volatile)v66, 0xFFFFFFFFFFFFFFFFLL);
                          if (*(double *)&v66 != 0.0 && v163 == 1)
                          {
                            uint64_t v158 = 0x1020C405E66F15BLL;
                            std::string __p = (void *)(v66 + 8);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_465;
                          }
                          break;
                        case 6u:
                          unint64_t v164 = atomic_fetch_add((atomic_ullong *volatile)v66, 0xFFFFFFFFFFFFFFFFLL);
                          if (*(double *)&v66 != 0.0 && v164 == 1)
                          {
                            uint64_t v158 = 0x1030C40F1F0227BLL;
                            boost::detail::shared_count::~shared_count((atomic_uint **)(v66 + 16));
                            goto LABEL_465;
                          }
                          break;
                        case 7u:
                          unint64_t v161 = atomic_fetch_add((atomic_ullong *volatile)v66, 0xFFFFFFFFFFFFFFFFLL);
                          if (*(double *)&v66 != 0.0 && v161 == 1)
                          {
                            uint64_t v158 = 0x1030C407B73B9F7;
                            std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v66);
LABEL_465:
                            MEMORY[0x22A614FA0](v66, v158);
                          }
                          break;
                        default:
                          break;
                      }
                      switch(v48)
                      {
                        case 2:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v50 != 0.0)
                          {
                            if (*(char *)(*(void *)&v50 + 31) < 0) {
                              operator delete(*(void **)(*(void *)&v50 + 8));
                            }
                            double v165 = v50;
                            uint64_t v166 = 0x1012C404EF22A49;
                            goto LABEL_491;
                          }
                          break;
                        case 3:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v50 != 0.0)
                          {
                            uint64_t v168 = *(void **)(*(void *)&v50 + 8);
                            if (v168)
                            {
                              *(void *)(*(void *)&v50 + 16) = v168;
                              operator delete(v168);
                            }
                            double v165 = v50;
                            uint64_t v166 = 0x1080C409938AC02;
                            goto LABEL_491;
                          }
                          break;
                        case 4:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v50 != 0.0)
                          {
                            std::string __p = (void *)(*(void *)&v50 + 8);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_486;
                          }
                          break;
                        case 5:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v50 != 0.0)
                          {
                            std::string __p = (void *)(*(void *)&v50 + 8);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_486:
                            double v165 = v50;
                            uint64_t v166 = 0x1020C405E66F15BLL;
                            goto LABEL_491;
                          }
                          break;
                        case 8:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v50 != 0.0)
                          {
                            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v50 + 16));
                            double v165 = v50;
                            unsigned int v167 = -235920773;
                            goto LABEL_490;
                          }
                          break;
                        case 9:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v50, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v50 != 0.0)
                          {
                            double v165 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v50));
                            unsigned int v167 = 2071181815;
LABEL_490:
                            uint64_t v166 = v167 | 0x1030C4000000000;
LABEL_491:
                            MEMORY[0x22A614FA0](*(void *)&v165, v166);
                          }
                          break;
                        default:
                          break;
                      }
                      switch(v156)
                      {
                        case 0u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v23, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v23 != 0.0)
                          {
                            if (*(char *)(*(void *)&v23 + 31) < 0) {
                              operator delete(*(void **)(*(void *)&v23 + 8));
                            }
                            double v169 = v23;
                            uint64_t v170 = 0x1012C404EF22A49;
                            goto LABEL_517;
                          }
                          break;
                        case 1u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v23, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v23 != 0.0)
                          {
                            unint64_t v172 = *(void **)(*(void *)&v23 + 8);
                            if (v172)
                            {
                              *(void *)(*(void *)&v23 + 16) = v172;
                              operator delete(v172);
                            }
                            double v169 = v23;
                            uint64_t v170 = 0x1080C409938AC02;
                            goto LABEL_517;
                          }
                          break;
                        case 2u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v23, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v23 != 0.0)
                          {
                            std::string __p = (void *)(*(void *)&v23 + 8);
                            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                            goto LABEL_512;
                          }
                          break;
                        case 3u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v23, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v23 != 0.0)
                          {
                            std::string __p = (void *)(*(void *)&v23 + 8);
                            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_512:
                            double v169 = v23;
                            uint64_t v170 = 0x1020C405E66F15BLL;
                            goto LABEL_517;
                          }
                          break;
                        case 6u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v23, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v23 != 0.0)
                          {
                            boost::detail::shared_count::~shared_count((atomic_uint **)(*(void *)&v23 + 16));
                            double v169 = v23;
                            unsigned int v171 = -235920773;
                            goto LABEL_516;
                          }
                          break;
                        case 7u:
                          if (atomic_fetch_add(*(atomic_ullong *volatile *)&v23, 0xFFFFFFFFFFFFFFFFLL) == 1
                            && v23 != 0.0)
                          {
                            double v169 = COERCE_DOUBLE(std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)&v23));
                            unsigned int v171 = 2071181815;
LABEL_516:
                            uint64_t v170 = v171 | 0x1030C4000000000;
LABEL_517:
                            MEMORY[0x22A614FA0](*(void *)&v169, v170);
                          }
                          break;
                        default:
                          break;
                      }
                      *(void *)(a1 + 32) += *((void *)v4 + 4);
                      return;
                    default:
                      goto LABEL_522;
                  }
                default:
LABEL_522:
                  turi::flexible_type_fail(0);
                  break;
              }
              break;
            default:
LABEL_521:
              turi::flexible_type_fail(0);
              break;
          }
          __break(1u);
        }
        else
        {
          *(unsigned char *)(a1 + 25) = 1;
        }
      }
    }
    else
    {
      turi::groupby_operators::vector_average::operator=(a1, (uint64_t)v3);
    }
  }
}

void sub_224097EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, int a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  MEMORY[0x22A614FA0](v21, 0x1020C405E66F15BLL);
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)v17, 0xFFFFFFFFFFFFFFFFLL);
  if (v17 && add == 1)
  {
    a17 = v17 + 8;
    std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
    MEMORY[0x22A614FA0](v17, 0x1020C405E66F15BLL);
  }
  switch(v20)
  {
    case 2:
      if (atomic_fetch_add((atomic_ullong *volatile)v19, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v19) {
        goto LABEL_30;
      }
      if (*(char *)(v19 + 31) < 0) {
        operator delete(*(void **)(v19 + 8));
      }
      atomic_ullong *volatile v24 = (void *)v19;
      uint64_t v25 = 0x1012C404EF22A49;
      goto LABEL_29;
    case 3:
      if (atomic_fetch_add((atomic_ullong *volatile)v19, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v19) {
        goto LABEL_30;
      }
      uint64_t v27 = *(void **)(v19 + 8);
      if (v27)
      {
        *(void *)(v19 + 16) = v27;
        operator delete(v27);
      }
      atomic_ullong *volatile v24 = (void *)v19;
      uint64_t v25 = 0x1080C409938AC02;
      goto LABEL_29;
    case 4:
      if (atomic_fetch_add((atomic_ullong *volatile)v19, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v19) {
        goto LABEL_30;
      }
      a17 = v19 + 8;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
      goto LABEL_24;
    case 5:
      if (atomic_fetch_add((atomic_ullong *volatile)v19, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v19) {
        goto LABEL_30;
      }
      a17 = v19 + 8;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_24:
      atomic_ullong *volatile v24 = (void *)v19;
      uint64_t v25 = 0x1020C405E66F15BLL;
      goto LABEL_29;
    case 8:
      if (atomic_fetch_add((atomic_ullong *volatile)v19, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v19) {
        goto LABEL_30;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)(v19 + 16));
      atomic_ullong *volatile v24 = (void *)v19;
      unsigned int v26 = -235920773;
      goto LABEL_28;
    case 9:
      if (atomic_fetch_add((atomic_ullong *volatile)v19, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v19) {
        goto LABEL_30;
      }
      atomic_ullong *volatile v24 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v19);
      unsigned int v26 = 2071181815;
LABEL_28:
      uint64_t v25 = v26 | 0x1030C4000000000;
LABEL_29:
      MEMORY[0x22A614FA0](v24, v25);
LABEL_30:
      switch(v18)
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)v17, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v17) {
            goto LABEL_56;
          }
          if (*(char *)(v17 + 31) < 0) {
            operator delete(*(void **)(v17 + 8));
          }
          uint64_t v28 = (void *)v17;
          uint64_t v29 = 0x1012C404EF22A49;
          goto LABEL_55;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)v17, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v17) {
            goto LABEL_56;
          }
          uint64_t v31 = *(void **)(v17 + 8);
          if (v31)
          {
            *(void *)(v17 + 16) = v31;
            operator delete(v31);
          }
          uint64_t v28 = (void *)v17;
          uint64_t v29 = 0x1080C409938AC02;
          goto LABEL_55;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)v17, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v17) {
            goto LABEL_56;
          }
          a17 = v17 + 8;
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
          goto LABEL_50;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)v17, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v17) {
            goto LABEL_56;
          }
          a17 = v17 + 8;
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
LABEL_50:
          uint64_t v28 = (void *)v17;
          uint64_t v29 = 0x1020C405E66F15BLL;
          goto LABEL_55;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)v17, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v17) {
            goto LABEL_56;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)(v17 + 16));
          uint64_t v28 = (void *)v17;
          unsigned int v30 = -235920773;
          goto LABEL_54;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)v17, 0xFFFFFFFFFFFFFFFFLL) != 1 || !v17) {
            goto LABEL_56;
          }
          uint64_t v28 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair((void *)v17);
          unsigned int v30 = 2071181815;
LABEL_54:
          uint64_t v29 = v30 | 0x1030C4000000000;
LABEL_55:
          MEMORY[0x22A614FA0](v28, v29);
LABEL_56:
          _Unwind_Resume(a1);
          return;
        default:
          goto LABEL_56;
      }
    default:
      goto LABEL_30;
  }
}

uint64_t turi::groupby_operators::vector_average::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(this + 25))
  {
    *(void *)(a2 + 5) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 12) = 7;
  }
  else
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + ++*(void *)(result + 8) = 0;
    *(unsigned char *)(a2 + 12) = 0;
    if (this + 8 != a2)
    {
      *(void *)(a2 + 5) = *(void *)(this + 13);
      *(void *)a2 = *(void *)(this + 8);
      int v2 = *(unsigned __int8 *)(this + 20);
      *(unsigned char *)(a2 + 12) = v2;
      switch(v2)
      {
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
          atomic_fetch_add(*(atomic_ullong *volatile *)a2, 1uLL);
          break;
        default:
          return this;
      }
    }
  }
  return this;
}

void *turi::groupby_operators::vector_average::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Vector Avg");
}

unsigned char *turi::groupby_operators::vector_average::save(turi::groupby_operators::vector_average *this, turi::oarchive *a2)
{
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 8 > v4)
    {
      size_t v11 = 2 * v4 + 16;
      *((void *)a2 + 5) = v11;
      uint64_t v12 = (char **)*((void *)a2 + 2);
      if (v12)
      {
        unsigned int v5 = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v15);
          unsigned int v5 = (char *)**((void **)a2 + 2);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        unsigned int v5 = (char *)malloc_type_realloc(*((void **)a2 + 3), v11, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v5;
    }
    else
    {
      unsigned int v5 = (char *)*((void *)a2 + 3);
    }
    *(void *)&v5[*((void *)a2 + 4)] = *((void *)this + 4);
    *((void *)a2 + 4) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v6 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v6)
    {
      size_t v16 = 2 * v6 + 2;
      *((void *)a2 + 5) = v16;
      uint64_t v17 = (void *)*((void *)a2 + 2);
      if (v17)
      {
        uint64_t v7 = (unsigned char *)*v17;
        size_t v18 = v17[1] - *v17;
        BOOL v19 = v16 >= v18;
        std::vector<char>::size_type v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v20);
          uint64_t v7 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        uint64_t v7 = malloc_type_realloc(*((void **)a2 + 3), v16, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v7;
    }
    else
    {
      uint64_t v7 = (unsigned char *)*((void *)a2 + 3);
    }
    v7[(*((void *)a2 + 4))++] = *((unsigned char *)this + 24);
  }
  size_t v8 = (char *)this + 25;
  if (*(void *)a2)
  {
    return (unsigned char *)std::ostream::write();
  }
  else
  {
    unint64_t v10 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v10)
    {
      size_t v21 = 2 * v10 + 2;
      *((void *)a2 + 5) = v21;
      unsigned int v22 = (uint64_t *)*((void *)a2 + 2);
      if (v22)
      {
        double result = (unsigned char *)*v22;
        size_t v23 = v22[1] - *v22;
        BOOL v24 = v21 >= v23;
        std::vector<char>::size_type v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v25);
          double result = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v24)
        {
          v22[1] = (uint64_t)&result[v21];
        }
      }
      else
      {
        double result = malloc_type_realloc(*((void **)a2 + 3), v21, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = result;
    }
    else
    {
      double result = (unsigned char *)*((void *)a2 + 3);
    }
    result[(*((void *)a2 + 4))++] = *v8;
  }
  return result;
}

void turi::groupby_operators::vector_average::load(turi::groupby_operators::vector_average *this, turi::iarchive *a2)
{
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (unint64_t *)this + 1);
  uint64_t v4 = *((void *)a2 + 2);
  if (v4)
  {
    *((void *)this + 4) = *(void *)(v4 + *((void *)a2 + 3));
    *((void *)a2 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (v5) {
    *((unsigned char *)this + 24) = *(unsigned char *)(v5 + (*((void *)a2 + 3))++);
  }
  else {
    std::istream::read();
  }
  uint64_t v6 = *((void *)a2 + 2);
  if (v6)
  {
    *((unsigned char *)this + 25) = *(unsigned char *)(v6 + (*((void *)a2 + 3))++);
  }
  else
  {
    std::istream::read();
  }
}

void turi::groupby_operators::vector_average::~vector_average(turi::groupby_operators::vector_average *this)
{
  turi::groupby_operators::vector_average::~vector_average(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void **v14;

  *(void *)this = &unk_26D76B520;
  switch(*((unsigned char *)this + 20))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        int v2 = *((void *)this + 1);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          uint64_t v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v5 = (void *)*((void *)this + 1);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          uint64_t v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 1);
        if (v7)
        {
          BOOL v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *((void *)this + 1);
        if (v7)
        {
          BOOL v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          uint64_t v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v8 = *((void *)this + 1);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          uint64_t v3 = (void *)v8;
          atomic_ullong *volatile v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v10 = (void *)*((void *)this + 1);
        if (v10)
        {
          size_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          size_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          uint64_t v3 = v10;
          atomic_ullong *volatile v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
}

uint64_t turi::groupby_operators::vector_average::set_input_type(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 20))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v4 = *(void *)(a1 + 8);
        if (!v4) {
          goto LABEL_33;
        }
        if (*(char *)(v4 + 31) < 0) {
          operator delete(*(void **)(v4 + 8));
        }
        uint64_t v5 = (void *)v4;
        uint64_t v6 = 0x1012C404EF22A49;
        goto LABEL_32;
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v7 = *(void **)(a1 + 8);
        if (!v7) {
          goto LABEL_33;
        }
        size_t v8 = (void *)v7[1];
        if (v8)
        {
          v7[2] = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
        uint64_t v6 = 0x1080C409938AC02;
        goto LABEL_32;
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        uint64_t v17 = (void **)(v9 + 8);
        std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
        goto LABEL_18;
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          goto LABEL_33;
        }
        uint64_t v17 = (void **)(v9 + 8);
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_18:
        uint64_t v5 = (void *)v9;
        uint64_t v6 = 0x1020C405E66F15BLL;
        goto LABEL_32;
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        if (!v10) {
          goto LABEL_33;
        }
        boost::detail::shared_count::~shared_count((atomic_uint **)(v10 + 16));
        uint64_t v5 = (void *)v10;
        unsigned int v11 = -235920773;
        goto LABEL_31;
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v12 = *(void **)(a1 + 8);
        if (v12)
        {
          size_t v13 = (void *)v12[6];
          if (v13)
          {
            v12[7] = v13;
            operator delete(v13);
          }
          BOOL v14 = (void *)v12[3];
          if (v14)
          {
            v12[4] = v14;
            operator delete(v14);
          }
          std::vector<char>::size_type v15 = (std::__shared_weak_count *)v12[2];
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v5 = v12;
          unsigned int v11 = 2071181815;
LABEL_31:
          uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v5, v6);
        }
LABEL_33:
        *(void *)(a1 + ++*(void *)(result + 8) = 0;
      }
      break;
    default:
      break;
  }
  *(void *)(a1 + ++*(void *)(result + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = a2;
  switch((int)a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      operator new();
    case 6:
      *(void *)(a1 + ++*(void *)(result + 8) = 0x1900000000000000;
      *(_DWORD *)(a1 + 16) = 0;
      break;
    case 8:
      operator new();
    case 9:
      operator new();
    default:
      return a2;
  }
  return a2;
}

void sub_2240995D0(_Unwind_Exception *a1)
{
  MEMORY[0x22A614FA0](v1, 0x1030C407B73B9F7);
  _Unwind_Resume(a1);
}

uint64_t turi::groupby_operators::vector_average::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = (atomic_ullong *volatile *)(a1 + 8);
    uint64_t v5 = (atomic_ullong **)(a2 + 8);
    switch(*(unsigned char *)(a1 + 20))
    {
      case 2:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v6 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          if (*((char *)v6 + 31) < 0) {
            operator delete((void *)v6[1]);
          }
          atomic_ullong *volatile v7 = v6;
          uint64_t v8 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            unint64_t v9[2] = (atomic_ullong)v10;
            operator delete(v10);
          }
          atomic_ullong *volatile v7 = v9;
          uint64_t v8 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          size_t v23 = (void **)(v11 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v23);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          size_t v23 = (void **)(v11 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v23);
LABEL_19:
          atomic_ullong *volatile v7 = v11;
          uint64_t v8 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *v4;
          if (!*v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v12 + 2);
          atomic_ullong *volatile v7 = v12;
          unsigned int v13 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v14 = *v4;
          if (*v4)
          {
            std::vector<char>::size_type v15 = (void *)v14[6];
            if (v15)
            {
              v14[7] = (atomic_ullong)v15;
              operator delete(v15);
            }
            size_t v16 = (void *)v14[3];
            if (v16)
            {
              void v14[4] = (atomic_ullong)v16;
              operator delete(v16);
            }
            uint64_t v17 = (std::__shared_weak_count *)v14[2];
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            atomic_ullong *volatile v7 = v14;
            unsigned int v13 = 2071181815;
LABEL_32:
            uint64_t v8 = v13 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v7, v8);
          }
LABEL_34:
          *uint64_t v4 = 0;
        }
        break;
      default:
        break;
    }
    size_t v18 = *v5;
    *(void *)(a1 + 13) = *(void *)(a2 + 13);
    *uint64_t v4 = v18;
    LODWORD(v1++*(void *)(result + 8) = *(unsigned __int8 *)(a2 + 20);
    *(unsigned char *)(a1 + 20) = (_BYTE)v18;
    BOOL v19 = v18 > 9;
    int v20 = (1 << (char)v18) & 0x33C;
    if (!v19 && v20 != 0) {
      atomic_fetch_add(*v4, 1uLL);
    }
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void std::__shared_ptr_emplace<turi::groupby_operators::variance>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B5C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::variance>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B5C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::variance>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::variance::new_instance(turi::groupby_operators::variance *this)
{
}

void turi::groupby_operators::variance::add_element_simple(turi::groupby_operators::variance *this, const turi::flexible_type *a2)
{
  switch(byte_268083A6C)
  {
    case 0:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == turi::FLEX_UNDEFINED) {
            return;
          }
          goto LABEL_82;
        case 1:
          double v59 = *(double *)a2;
          uint64_t v60 = turi::FLEX_UNDEFINED;
          goto LABEL_147;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_82;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2)) {
            return;
          }
          goto LABEL_82;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          double v59 = *(double *)&turi::FLEX_UNDEFINED;
          uint64_t v60 = *(void *)a2;
LABEL_147:
          double v94 = (double)v60;
          goto LABEL_148;
        case 1:
          double v59 = *(double *)a2;
          double v94 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_148:
          if (v59 != v94) {
            goto LABEL_82;
          }
          return;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_82;
        case 6:
          double v93 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_152;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v43 = *((unsigned __int8 *)a2 + 12);
      if (v43 - 3 < 7 || v43 < 2) {
        goto LABEL_82;
      }
      if (v43 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v45 = *(double *)a2;
      char v46 = *(unsigned char *)(*(void *)a2 + 31);
      size_t v47 = v46 < 0 ? *(void *)(*(void *)&v45 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
      uint64_t v95 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(void *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v47 != v95) {
        goto LABEL_82;
      }
      uint64_t v96 = (unsigned __int8 *)(*(void *)&v45 + 8);
      if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
        uint64_t v96 = *(unsigned __int8 **)v96;
      }
      double v97 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        double v97 = *(unsigned __int8 **)v97;
      }
      if (v46 < 0)
      {
        if (memcmp(v96, v97, v47)) {
          goto LABEL_82;
        }
      }
      else
      {
        if (!v47) {
          return;
        }
        do
        {
          if (*v96 != *v97) {
            goto LABEL_82;
          }
          ++v96;
          ++v97;
          --v47;
        }
        while (v47);
      }
      return;
    case 3:
      unsigned int v48 = *((unsigned __int8 *)a2 + 12);
      if (v48 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v48 == 3)
      {
        uint64_t v49 = *(double **)(*(void *)a2 + 8);
        double v50 = *(double **)(*(void *)a2 + 16);
        unint64_t v51 = v50 - v49;
        uint64_t v52 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v51 == (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v52) >> 3)
        {
          if (v50 == v49) {
            return;
          }
          uint64_t v53 = v51 <= 1 ? 1 : v50 - v49;
          if (*v49 == *v52)
          {
            uint64_t v54 = 1;
            do
            {
              unint64_t v55 = v54;
              if (v53 == v54) {
                break;
              }
              double v56 = v49[v54];
              double v57 = v52[v54++];
            }
            while (v56 == v57);
            if (v55 >= v51) {
              return;
            }
          }
        }
      }
      goto LABEL_82;
    case 4:
      unsigned int v4 = *((unsigned __int8 *)a2 + 12);
      if (v4 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v4 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(void *)a2 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        return;
      }
      goto LABEL_82;
    case 5:
      unsigned int v61 = *((unsigned __int8 *)a2 + 12);
      if (v61 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v61 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t **)(*(void *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        return;
      }
      goto LABEL_82;
    case 6:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268083A68) {
            return;
          }
          goto LABEL_82;
        case 1:
          double v93 = vabdd_f64(*(double *)a2, (double)dword_268083A68 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_152:
          if (v93 < 0.0000005) {
            return;
          }
          goto LABEL_82;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_82;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_268083A68)
          {
            return;
          }
          goto LABEL_82;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v58 = *((unsigned __int8 *)a2 + 12);
      if (v58 < 7 || v58 - 8 < 2) {
        goto LABEL_82;
      }
      if (v58 != 7) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    case 8:
      unsigned int v62 = *((unsigned __int8 *)a2 + 12);
      if (v62 >= 8 && v62 != 9)
      {
        if (v62 != 8) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (turi::image_type::operator==(*(void *)a2 + 8, turi::FLEX_UNDEFINED + 8)) {
          return;
        }
      }
      goto LABEL_82;
    case 9:
      unsigned int v5 = *((unsigned __int8 *)a2 + 12);
      if (v5 < 9) {
        goto LABEL_82;
      }
      if (v5 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v6 = turi::FLEX_UNDEFINED;
      atomic_ullong *volatile v7 = *(void **)a2;
      if (turi::FLEX_UNDEFINED == *(void *)a2) {
        return;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v7 + 1), turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_82;
      }
      atomic_ullong *volatile v9 = (char *)v7[3];
      uint64_t v8 = (char *)v7[4];
      uint64_t v10 = v8 - v9;
      if (v8 == v9) {
        return;
      }
      if (!v7[1]) {
        return;
      }
      uint64_t v11 = 1;
      do
      {
        uint64_t v12 = *(void *)v9;
        v9 += 8;
        v11 *= v12;
      }
      while (v9 != v8);
      if (!v11) {
        return;
      }
      v108.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::vector(__p, v10 >> 3, &v108);
      unsigned int v13 = (uint64_t *)__p[0];
      atomic_ullong *volatile v14 = (uint64_t *)__p[1];
      uint64_t v15 = **(void **)(v6 + 8);
      int64_t v16 = (char *)__p[1] - (char *)__p[0];
      unint64_t v17 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      unint64_t v18 = v17 - 1;
      if (v17 <= 1) {
        int64_t v19 = 1;
      }
      else {
        int64_t v19 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  while (1)
  {
    if (v14 == v13)
    {
      uint64_t v27 = 0;
      double v28 = *(double *)(*(void *)v7[1] + 8 * v7[9]);
    }
    else
    {
      uint64_t v20 = 0;
      size_t v21 = (uint64_t *)v7[6];
      unsigned int v22 = v13;
      int64_t v23 = v19;
      do
      {
        uint64_t v25 = *v22++;
        uint64_t v24 = v25;
        uint64_t v26 = *v21++;
        v20 += v26 * v24;
        --v23;
      }
      while (v23);
      uint64_t v27 = 0;
      double v28 = *(double *)(*(void *)v7[1] + 8 * (v7[9] + v20));
      uint64_t v29 = *(uint64_t **)(v6 + 48);
      unsigned int v30 = v13;
      int64_t v31 = v19;
      do
      {
        uint64_t v33 = *v30++;
        uint64_t v32 = v33;
        uint64_t v34 = *v29++;
        v27 += v34 * v32;
        --v31;
      }
      while (v31);
    }
    double v35 = *(double *)(v15 + 8 * (*(void *)(v6 + 72) + v27));
    if (v28 != v35)
    {
LABEL_38:
      if (v13)
      {
        __p[1] = v13;
        operator delete(v13);
      }
      if (v28 != v35)
      {
LABEL_82:
        ++*((void *)this + 1);
        double v64 = 0.0;
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            double v64 = (double)*(uint64_t *)a2;
            break;
          case 1:
            double v64 = *(double *)a2;
            break;
          case 2:
            double v66 = *(double *)a2;
            int v67 = (char **)(*(void *)a2 + 8);
            size_t __idx = 0;
            unint64_t v68 = (char *)v67;
            if (*(char *)(*(void *)&v66 + 31) < 0) {
              unint64_t v68 = *v67;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v68);
            double v69 = std::stod((const std::string *)__p, &__idx);
            if (SHIBYTE(v105[0]) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(*(void *)&v66 + 31) < 0) {
              uint64_t v70 = *(void *)(*(void *)&v66 + 16);
            }
            else {
              uint64_t v70 = *(unsigned __int8 *)(*(void *)&v66 + 31);
            }
            if (__idx != v70)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              unint64_t v99 = std::string::append(&v108, " cannot be interpreted as a float");
              long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
              v105[0] = (void *)v99->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v100;
              v99->__r_.__value_.__l.__size_ = 0;
              v99->__r_.__value_.__r.__words[2] = 0;
              v99->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)__p);
              __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            float v77 = v69;
            double v64 = v77;
            break;
          case 3:
            double v65 = *(double *)a2;
            __p[1] = 0;
            v105[0] = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(void *)&v65 + 8), *(void *)(*(void *)&v65 + 16), (uint64_t)(*(void *)(*(void *)&v65 + 16) - *(void *)(*(void *)&v65 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            break;
          case 4:
            double v71 = *(double *)a2;
            __p[1] = 0;
            v105[0] = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(void *)&v71 + 8), *(uint64_t **)(*(void *)&v71 + 16), (uint64_t)(*(void *)(*(void *)&v71 + 16) - *(void *)(*(void *)&v71 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v108.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
            break;
          case 5:
            double v72 = *(double *)a2;
            __p[1] = 0;
            v105[0] = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(void *)&v72 + 8), *(uint64_t **)(*(void *)&v72 + 16), (uint64_t)(*(void *)(*(void *)&v72 + 16) - *(void *)(*(void *)&v72 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v108.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
            break;
          case 6:
            double v64 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
            break;
          case 7:
            break;
          case 8:
            double v73 = *(double *)a2;
            unint64_t v74 = *(atomic_uint **)(*(void *)a2 + 16);
            __p[0] = *(void **)(*(void *)a2 + 8);
            __p[1] = v74;
            if (v74) {
              atomic_fetch_add_explicit(v74 + 2, 1u, memory_order_relaxed);
            }
            long long v75 = *(_OWORD *)(*(void *)&v73 + 24);
            long long v76 = *(_OWORD *)(*(void *)&v73 + 56);
            long long v106 = *(_OWORD *)(*(void *)&v73 + 40);
            long long v107 = v76;
            *(_OWORD *)uint64_t v105 = v75;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            break;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v106 + 1))
            {
              *(void *)&long long v107 = *((void *)&v106 + 1);
              operator delete(*((void **)&v106 + 1));
            }
            if (v105[0])
            {
              v105[1] = v105[0];
              operator delete(v105[0]);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        double v78 = *((double *)this + 2);
        double v79 = v64 - v78;
        *((double *)this + 2) = v78 + (v64 - v78) / (double)*((unint64_t *)this + 1);
        double v80 = 0.0;
        switch(*((unsigned char *)a2 + 12))
        {
          case 0:
            double v80 = (double)*(uint64_t *)a2;
            break;
          case 1:
            double v80 = *(double *)a2;
            break;
          case 2:
            double v82 = *(double *)a2;
            size_t __idx = 0;
            uint64_t v83 = (char *)(*(void *)&v82 + 8);
            if (*(char *)(*(void *)&v82 + 31) < 0) {
              uint64_t v83 = *(char **)(*(void *)&v82 + 8);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, v83);
            double v84 = std::stod((const std::string *)__p, &__idx);
            if (SHIBYTE(v105[0]) < 0) {
              operator delete(__p[0]);
            }
            if (*(char *)(*(void *)&v82 + 31) < 0) {
              uint64_t v85 = *(void *)(*(void *)&v82 + 16);
            }
            else {
              uint64_t v85 = *(unsigned __int8 *)(*(void *)&v82 + 31);
            }
            if (__idx != v85)
            {
              double v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::operator+<char>();
              uint64_t v102 = std::string::append(&v108, " cannot be interpreted as a float");
              long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
              v105[0] = (void *)v102->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v103;
              v102->__r_.__value_.__l.__size_ = 0;
              v102->__r_.__value_.__r.__words[2] = 0;
              v102->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v101, (const std::string *)__p);
              __cxa_throw(v101, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            float v92 = v84;
            double v80 = v92;
            break;
          case 3:
            double v81 = *(double *)a2;
            __p[1] = 0;
            v105[0] = 0;
            __p[0] = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(void *)&v81 + 8), *(void *)(*(void *)&v81 + 16), (uint64_t)(*(void *)(*(void *)&v81 + 16) - *(void *)(*(void *)&v81 + 8)) >> 3);
            turi::flexible_type_fail(0);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            break;
          case 4:
            double v86 = *(double *)a2;
            __p[1] = 0;
            v105[0] = 0;
            __p[0] = 0;
            std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(void *)&v86 + 8), *(uint64_t **)(*(void *)&v86 + 16), (uint64_t)(*(void *)(*(void *)&v86 + 16) - *(void *)(*(void *)&v86 + 8)) >> 4);
            turi::flexible_type_fail(0);
            v108.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
            break;
          case 5:
            double v87 = *(double *)a2;
            __p[1] = 0;
            v105[0] = 0;
            __p[0] = 0;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(void *)&v87 + 8), *(uint64_t **)(*(void *)&v87 + 16), (uint64_t)(*(void *)(*(void *)&v87 + 16) - *(void *)(*(void *)&v87 + 8)) >> 5);
            turi::flexible_type_fail(0);
            v108.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
            break;
          case 6:
            double v80 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
            break;
          case 7:
            break;
          case 8:
            double v88 = *(double *)a2;
            uint64_t v89 = *(atomic_uint **)(*(void *)a2 + 16);
            __p[0] = *(void **)(*(void *)a2 + 8);
            __p[1] = v89;
            if (v89) {
              atomic_fetch_add_explicit(v89 + 2, 1u, memory_order_relaxed);
            }
            long long v90 = *(_OWORD *)(*(void *)&v88 + 24);
            long long v91 = *(_OWORD *)(*(void *)&v88 + 56);
            long long v106 = *(_OWORD *)(*(void *)&v88 + 40);
            long long v107 = v91;
            *(_OWORD *)uint64_t v105 = v90;
            turi::flexible_type_fail(0);
            boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
            break;
          case 9:
            turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
            turi::flexible_type_fail(0);
            if (*((void *)&v106 + 1))
            {
              *(void *)&long long v107 = *((void *)&v106 + 1);
              operator delete(*((void **)&v106 + 1));
            }
            if (v105[0])
            {
              v105[1] = v105[0];
              operator delete(v105[0]);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
            break;
          default:
            turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        *((double *)this + 3) = *((double *)this + 3) + v79 * (v80 - *((double *)this + 2));
      }
      return;
    }
    uint64_t v36 = v17;
    uint64_t v37 = v17 - 1;
    if (v16 >= 1) {
      break;
    }
LABEL_36:
    if (v37 < 0 || !v36) {
      goto LABEL_38;
    }
  }
  uint64_t v38 = v7[3];
  unint64_t v39 = v13[v18] + 1;
  v13[v18] = v39;
  unint64_t v40 = (v16 & 0xFFFFFFFFFFFFFFF8) - 16;
  uint64_t v37 = v17 - 1;
  if (v39 < *(void *)(v38 + 8 * v18))
  {
    uint64_t v36 = 1;
    uint64_t v37 = v17 - 1;
    goto LABEL_36;
  }
  while (1)
  {
    *(uint64_t *)((char *)v13 + v40 + ++*(void *)(result + 8) = 0;
    if (v37 <= 0) {
      break;
    }
    --v37;
    unint64_t v41 = *(uint64_t *)((char *)v13 + v40) + 1;
    *(uint64_t *)((char *)v13 + v40) = v41;
    unint64_t v42 = *(void *)(v38 + v40);
    v40 -= 8;
    if (v41 < v42)
    {
      uint64_t v36 = 1;
      goto LABEL_36;
    }
  }
  __p[1] = v13;
  operator delete(v13);
}

void sub_22409A794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void *turi::groupby_operators::variance::combine(uint64_t a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  unint64_t v4 = *((void *)result + 1);
  if (v4)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    double v6 = *((double *)result + 2);
    if (v5)
    {
      double v7 = *(double *)(a1 + 16);
      double v8 = v6 - v7;
      double v9 = (double)v4;
      double v10 = v6 * (double)v4 + v7 * (double)v5;
      unint64_t v11 = v5 + v4;
      double v12 = *(double *)(a1 + 24) + *((double *)result + 3) + v8 * v8 * v9 * (double)v5 / (double)v11;
      *(double *)(a1 + 16) = v10 / (double)v11;
      *(double *)(a1 + 24) = v12;
      *(void *)(a1 + ++*(void *)(result + 8) = v11;
    }
    else
    {
      *(void *)(a1 + ++*(void *)(result + 8) = v4;
      uint64_t v13 = *((void *)result + 3);
      *(double *)(a1 + 16) = v6;
      *(void *)(a1 + 24) = v13;
    }
  }
  return result;
}

uint64_t turi::groupby_operators::variance::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(this + 8);
  double v3 = 0.0;
  if (v2 >= 2) {
    double v3 = *(double *)(this + 24) / (double)v2;
  }
  *(_DWORD *)(a2 + ++*(void *)(result + 8) = 0;
  *(unsigned char *)(a2 + 12) = 1;
  *(double *)a2 = v3;
  return this;
}

void *turi::groupby_operators::variance::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Var");
}

char *turi::groupby_operators::variance::save(void *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 1;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v5)
    {
      size_t v12 = 2 * v5 + 16;
      *(void *)(a2 + 40) = v12;
      uint64_t v13 = *(char ***)(a2 + 16);
      if (v13)
      {
        double v6 = *v13;
        size_t v14 = v13[1] - *v13;
        BOOL v15 = v12 >= v14;
        std::vector<char>::size_type v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v16);
          double v6 = **(char ***)(a2 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        double v6 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v12, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v6;
    }
    else
    {
      double v6 = *(char **)(a2 + 24);
    }
    *(void *)&v6[*(void *)(a2 + 32)] = *v4;
    *(void *)(a2 + 32) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v7)
    {
      size_t v17 = 2 * v7 + 16;
      *(void *)(a2 + 40) = v17;
      unint64_t v18 = *(char ***)(a2 + 16);
      if (v18)
      {
        double v8 = *v18;
        size_t v19 = v18[1] - *v18;
        BOOL v20 = v17 >= v19;
        std::vector<char>::size_type v21 = v17 - v19;
        if (v21 != 0 && v20)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v21);
          double v8 = **(char ***)(a2 + 16);
        }
        else if (!v20)
        {
          v18[1] = &v8[v17];
        }
      }
      else
      {
        double v8 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v17, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v8;
    }
    else
    {
      double v8 = *(char **)(a2 + 24);
    }
    *(void *)&v8[*(void *)(a2 + 32)] = a1[2];
    *(void *)(a2 + 32) += 8;
  }
  double v9 = a1 + 3;
  if (*(void *)a2)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v11 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v11)
    {
      size_t v22 = 2 * v11 + 16;
      *(void *)(a2 + 40) = v22;
      int64_t v23 = *(char ***)(a2 + 16);
      if (v23)
      {
        double result = *v23;
        size_t v24 = v23[1] - *v23;
        BOOL v25 = v22 >= v24;
        std::vector<char>::size_type v26 = v22 - v24;
        if (v26 != 0 && v25)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v26);
          double result = **(char ***)(a2 + 16);
        }
        else if (!v25)
        {
          v23[1] = &result[v22];
        }
      }
      else
      {
        double result = (char *)malloc_type_realloc(*(void **)(a2 + 24), v22, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = result;
    }
    else
    {
      double result = *(char **)(a2 + 24);
    }
    *(void *)&result[*(void *)(a2 + 32)] = *v9;
    *(void *)(a2 + 32) += 8;
  }
  return result;
}

uint64_t turi::groupby_operators::variance::load(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    *(void *)(result + ++*(void *)(result + 8) = *(void *)(v4 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    double result = std::istream::read();
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    *(void *)(v3 + 16) = *(void *)(v5 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    double result = std::istream::read();
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    *(void *)(v3 + 24) = *(void *)(v6 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    return std::istream::read();
  }
  return result;
}

void turi::groupby_operators::variance::~variance(turi::groupby_operators::variance *this)
{
}

void turi::groupby_operators::variance::print(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 64))(v31);
  if ((v32 & 0x80u) == 0) {
    uint64_t v4 = v31;
  }
  else {
    uint64_t v4 = (void **)v31[0];
  }
  if ((v32 & 0x80u) == 0) {
    uint64_t v5 = v32;
  }
  else {
    uint64_t v5 = (uint64_t)v31[1];
  }
  uint64_t v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
  unint64_t v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
  double v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"value = ", 8);
  (*(void (**)(atomic_ullong **__return_ptr, uint64_t))(*(void *)a1 + 40))(&v37, a1);
  switch(v38)
  {
    case 0:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_16;
    case 1:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
      std::ostream::operator<<();
      std::stringbuf::str();
LABEL_16:
      v34[0] = *(void ***)MEMORY[0x263F8C2B8];
      double v10 = *(void ***)(MEMORY[0x263F8C2B8] + 72);
      *(void ***)((char *)v34 + (unint64_t)*(v34[0] - 3)) = *(void ***)(MEMORY[0x263F8C2B8] + 64);
      v34[2] = v10;
      v34[3] = (void **)(MEMORY[0x263F8C318] + 16);
      if (v35 < 0) {
        operator delete(v34[11]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x22A614E30](&v36);
      goto LABEL_23;
    case 2:
      if (*((char *)v37 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v37[1], v37[2]);
      }
      else
      {
        long long v9 = *(_OWORD *)(v37 + 1);
        v33.__r_.__value_.__r.__words[2] = v37[3];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v9;
      }
      goto LABEL_23;
    case 3:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v34, v37 + 1);
      goto LABEL_23;
    case 4:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v34, v37 + 1);
      goto LABEL_23;
    case 5:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v34, v37 + 1);
      goto LABEL_23;
    case 6:
      turi::flexible_type_impl::get_string_visitor::operator()((turi::flexible_type_impl *)&v37, &v33);
      goto LABEL_23;
    case 7:
      memset(&v33, 0, sizeof(v33));
      goto LABEL_23;
    case 8:
      turi::flexible_type_impl::get_string_visitor::operator()();
      goto LABEL_23;
    case 9:
      turi::flexible_type_impl::get_string_visitor::operator()((uint64_t)v34, v37 + 1);
LABEL_23:
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &v33;
      }
      else {
        unint64_t v11 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v11, size);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"count = ", 8);
      size_t v14 = (void *)std::ostream::operator<<();
      BOOL v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"mean = ", 7);
      std::vector<char>::size_type v16 = (void *)std::ostream::operator<<();
      size_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"M2 = ", 5);
      unint64_t v18 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)")", 1);
      switch(v38)
      {
        case 2:
          if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            size_t v19 = v37;
            if (v37)
            {
              if (*((char *)v37 + 31) < 0) {
                operator delete((void *)v37[1]);
              }
              BOOL v20 = v19;
              uint64_t v21 = 0x1012C404EF22A49;
              goto LABEL_62;
            }
          }
          break;
        case 3:
          if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int v28 = v37;
            if (v37)
            {
              uint64_t v29 = (void *)v37[1];
              if (v29)
              {
                _OWORD v37[2] = (atomic_ullong)v29;
                operator delete(v29);
              }
              BOOL v20 = v28;
              uint64_t v21 = 0x1080C409938AC02;
              goto LABEL_62;
            }
          }
          break;
        case 4:
          if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            size_t v22 = v37;
            if (v37)
            {
              v34[0] = (void **)(v37 + 1);
              std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](v34);
              goto LABEL_57;
            }
          }
          break;
        case 5:
          if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            size_t v22 = v37;
            if (v37)
            {
              v34[0] = (void **)(v37 + 1);
              std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](v34);
LABEL_57:
              BOOL v20 = v22;
              uint64_t v21 = 0x1020C405E66F15BLL;
              goto LABEL_62;
            }
          }
          break;
        case 8:
          if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            unsigned int v30 = v37;
            if (v37)
            {
              boost::detail::shared_count::~shared_count((atomic_uint **)v37 + 2);
              BOOL v20 = v30;
              unsigned int v27 = -235920773;
              goto LABEL_61;
            }
          }
          break;
        case 9:
          if (atomic_fetch_add(v37, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            int64_t v23 = v37;
            if (v37)
            {
              size_t v24 = (void *)v37[6];
              if (v24)
              {
                v37[7] = (atomic_ullong)v24;
                operator delete(v24);
              }
              BOOL v25 = (void *)v23[3];
              if (v25)
              {
                v23[4] = (atomic_ullong)v25;
                operator delete(v25);
              }
              std::vector<char>::size_type v26 = (std::__shared_weak_count *)v23[2];
              if (v26) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v26);
              }
              BOOL v20 = v23;
              unsigned int v27 = 2071181815;
LABEL_61:
              uint64_t v21 = v27 | 0x1030C4000000000;
LABEL_62:
              MEMORY[0x22A614FA0](v20, v21);
            }
          }
          break;
        default:
          break;
      }
      if ((char)v32 < 0) {
        operator delete(v31[0]);
      }
      break;
    default:
      turi::flexible_type_fail(0);
      __break(1u);
      break;
  }
}

void sub_22409B3F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a22);
  switch(*(unsigned char *)(v22 - 92))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v24 = *(void *)(v22 - 104);
      if (!v24) {
        goto LABEL_27;
      }
      if (*(char *)(v24 + 31) < 0) {
        operator delete(*(void **)(v24 + 8));
      }
      BOOL v25 = (void *)v24;
      uint64_t v26 = 0x1012C404EF22A49;
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      uint64_t v29 = *(void **)(v22 - 104);
      if (!v29) {
        goto LABEL_27;
      }
      unsigned int v30 = (void *)v29[1];
      if (v30)
      {
        v29[2] = v30;
        operator delete(v30);
      }
      BOOL v25 = v29;
      uint64_t v26 = 0x1080C409938AC02;
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unsigned int v27 = *(void **)(v22 - 104);
      if (!v27) {
        goto LABEL_27;
      }
      *(void *)(v22 - 112) = v27 + 1;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 112));
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      unsigned int v27 = *(void **)(v22 - 104);
      if (!v27) {
        goto LABEL_27;
      }
      *(void *)(v22 - 112) = v27 + 1;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 112));
LABEL_21:
      BOOL v25 = v27;
      uint64_t v26 = 0x1020C405E66F15BLL;
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 104), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v31 = *(void *)(v22 - 104);
        if (v31)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v31 + 16));
          MEMORY[0x22A614FA0](v31, 0x1030C40F1F0227BLL);
        }
        *(void *)(v22 - 104) = 0;
      }
      goto LABEL_27;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)(v22 - 104), 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_27;
      }
      int v28 = *(void **)(v22 - 104);
      if (!v28) {
        goto LABEL_27;
      }
      BOOL v25 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(v28);
      uint64_t v26 = 0x1030C407B73B9F7;
      break;
    default:
      goto LABEL_27;
  }
  MEMORY[0x22A614FA0](v25, v26);
LABEL_27:
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::stdv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B6B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::stdv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B6B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::stdv>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::stdv::new_instance(turi::groupby_operators::stdv *this)
{
}

double turi::groupby_operators::stdv::emit@<D0>(turi::groupby_operators::stdv *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *((void *)this + 1);
  double v3 = 0.0;
  if (v2 >= 2) {
    double v3 = *((double *)this + 3) / (double)v2;
  }
  double result = sqrt(v3);
  *(_DWORD *)(a2 + ++*(void *)(result + 8) = 0;
  *(unsigned char *)(a2 + 12) = 1;
  *(double *)a2 = result;
  return result;
}

void *turi::groupby_operators::stdv::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Stdv");
}

void std::__shared_ptr_emplace<turi::groupby_operators::select_one>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B7A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::select_one>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B7A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::select_one>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::select_one::new_instance(turi::groupby_operators::select_one *this)
{
}

atomic_ullong *turi::groupby_operators::select_one::add_element_simple(atomic_ullong *volatile this, atomic_ullong *volatile a2)
{
  if (!*((unsigned char *)this + 24))
  {
    atomic_ullong *volatile v3 = this;
    atomic_ullong *volatile v4 = this + 1;
    if (this + 1 != a2)
    {
      switch(*((unsigned char *)this + 20))
      {
        case 2:
          if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v5 = (atomic_ullong *volatile)*v4;
            if (!*v4) {
              goto LABEL_29;
            }
            if (*((char *)v5 + 31) < 0) {
              operator delete((void *)v5[1]);
            }
            uint64_t v6 = v5;
            uint64_t v7 = 0x1012C404EF22A49;
            goto LABEL_28;
          }
          break;
        case 3:
          if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v8 = (atomic_ullong *volatile)*v4;
            if (!*v4) {
              goto LABEL_29;
            }
            long long v9 = (void *)v8[1];
            if (v9)
            {
              void v8[2] = (atomic_ullong)v9;
              operator delete(v9);
            }
            uint64_t v6 = v8;
            uint64_t v7 = 0x1080C409938AC02;
            goto LABEL_28;
          }
          break;
        case 4:
          if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v10 = (atomic_ullong *volatile)*v4;
            if (!*v4) {
              goto LABEL_29;
            }
            size_t v17 = (void **)(v10 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v17);
            goto LABEL_20;
          }
          break;
        case 5:
          if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v10 = (atomic_ullong *volatile)*v4;
            if (!*v4) {
              goto LABEL_29;
            }
            size_t v17 = (void **)(v10 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v17);
LABEL_20:
            uint64_t v6 = v10;
            uint64_t v7 = 0x1020C405E66F15BLL;
            goto LABEL_28;
          }
          break;
        case 8:
          if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            atomic_ullong *volatile v11 = (atomic_ullong *volatile)*v4;
            if (!*v4) {
              goto LABEL_29;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v11 + 2);
            uint64_t v6 = v11;
            unsigned int v12 = -235920773;
            goto LABEL_27;
          }
          break;
        case 9:
          if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
          {
            this = (atomic_ullong *volatile)*v4;
            if (*v4)
            {
              uint64_t v6 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(this);
              unsigned int v12 = 2071181815;
LABEL_27:
              uint64_t v7 = v12 | 0x1030C4000000000;
LABEL_28:
              this = (atomic_ullong *volatile)MEMORY[0x22A614FA0](v6, v7);
            }
LABEL_29:
            *atomic_ullong *volatile v4 = 0;
          }
          break;
        default:
          break;
      }
      atomic_ullong v13 = *a2;
      *(atomic_ullong *volatile)((char *)v4 + 5) = *(atomic_ullong *volatile)((char *)a2 + 5);
      *atomic_ullong *volatile v4 = v13;
      LODWORD(v13) = *((unsigned __int8 *)a2 + 12);
      *((unsigned char *)v3 + 20) = v13;
      BOOL v14 = v13 > 9;
      int v15 = (1 << v13) & 0x33C;
      if (!v14 && v15 != 0) {
        atomic_fetch_add((atomic_ullong *volatile)*v4, 1uLL);
      }
    }
    *((unsigned char *)v3 + 24) = 1;
  }
  return this;
}

void *turi::groupby_operators::select_one::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Select One");
}

void turi::groupby_operators::select_one::save(turi::groupby_operators::select_one *this, turi::oarchive *a2)
{
  atomic_ullong *volatile v4 = (char *)this + 24;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v5)
    {
      size_t v7 = 2 * v5 + 2;
      *((void *)a2 + 5) = v7;
      atomic_ullong *volatile v8 = (void *)*((void *)a2 + 2);
      if (v8)
      {
        uint64_t v6 = (unsigned char *)*v8;
        size_t v9 = v8[1] - *v8;
        BOOL v10 = v7 >= v9;
        std::vector<char>::size_type v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v11);
          uint64_t v6 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v10)
        {
          v8[1] = &v6[v7];
        }
      }
      else
      {
        uint64_t v6 = malloc_type_realloc(*((void **)a2 + 3), v7, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v6;
    }
    else
    {
      uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    }
    v6[(*((void *)a2 + 4))++] = *v4;
  }
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec((uint64_t)a2, (uint64_t *)this + 1);
}

void turi::groupby_operators::select_one::load(turi::groupby_operators::select_one *this, turi::iarchive *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (v4) {
    *((unsigned char *)this + 24) = *(unsigned char *)(v4 + (*((void *)a2 + 3))++);
  }
  else {
    std::istream::read();
  }
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a2, (unint64_t *)this + 1);
}

void turi::groupby_operators::select_one::~select_one(turi::groupby_operators::select_one *this)
{
  turi::groupby_operators::select_one::~select_one(this);
  JUMPOUT(0x22A614FA0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  void **v14;

  *(void *)this = &unk_26D76B7F0;
  switch(*((unsigned char *)this + 20))
  {
    case 2:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v2 = *((void *)this + 1);
        if (v2)
        {
          if (*(char *)(v2 + 31) < 0) {
            operator delete(*(void **)(v2 + 8));
          }
          atomic_ullong *volatile v3 = (void *)v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        unint64_t v5 = (void *)*((void *)this + 1);
        if (v5)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v7 = *((void *)this + 1);
        if (v7)
        {
          BOOL v14 = (void **)(v7 + 8);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v14);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        size_t v7 = *((void *)this + 1);
        if (v7)
        {
          BOOL v14 = (void **)(v7 + 8);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v14);
LABEL_18:
          atomic_ullong *volatile v3 = (void *)v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *((void *)this + 1);
        if (v8)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)(v8 + 16));
          atomic_ullong *volatile v3 = (void *)v8;
          size_t v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*((atomic_ullong *volatile *)this + 1), 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        BOOL v10 = (void *)*((void *)this + 1);
        if (v10)
        {
          std::vector<char>::size_type v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = v11;
            operator delete(v11);
          }
          unsigned int v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = v12;
            operator delete(v12);
          }
          atomic_ullong v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          size_t v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((unsigned char *)this + 20) = 0;
}

uint64_t turi::groupby_operators::select_one::set_input_type(uint64_t a1, uint64_t a2)
{
  return a2;
}

void std::__shared_ptr_emplace<turi::groupby_operators::zip_dict>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::zip_dict>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B890;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::zip_dict>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::zip_dict::new_instance(turi::groupby_operators::zip_dict *this)
{
}

uint64_t turi::groupby_operators::zip_dict::add_element(uint64_t result, uint64_t *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a2;
  if (*(unsigned char *)(v2 + 12) == 7)
  {
    *(unsigned char *)(result + 32) = 1;
  }
  else
  {
    atomic_ullong *volatile v3 = (uint64_t **)(result + 8);
    std::pair<turi::flexible_type,turi::flexible_type>::pair[abi:ne180100]<true,0>((uint64_t)v5, (uint64_t *)v2, v2 + 16);
    std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,turi::flexible_type>>(v3, (uint64_t)v5, (uint64_t)v5, v4);
    return std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v5);
  }
  return result;
}

void sub_22409C034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::zip_dict::add_element_simple()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "zip_dict does not support add_element_simple with one value";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void turi::groupby_operators::zip_dict::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  unint64_t v5 = v3;
  std::map<turi::flexible_type,turi::flexible_type>::map[abi:ne180100]((uint64_t *)&v8, (uint64_t)(v3 + 8), v4);
  char v10 = v5[32];
  char v7 = *(unsigned char *)(a1 + 32) | v10;
  *(unsigned char *)(a1 + 32) = v7;
  if (!v7) {
    std::map<turi::flexible_type,turi::flexible_type>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>((uint64_t *)(a1 + 8), v8, &v9, v6);
  }
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy((uint64_t)&v8, v9);
}

void sub_22409C174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::zip_dict::emit(turi::groupby_operators::zip_dict *this@<X0>, uint64_t a2@<X8>)
{
  if (*((unsigned char *)this + 32))
  {
    if (!*((void *)this + 3))
    {
      long long v3 = 0uLL;
      uint64_t v4 = 0;
      *(void *)(a2 + 5) = 0;
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 12) = 5;
      operator new();
    }
  }
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::insert<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,0>((uint64_t)&v3, 0, *((void **)this + 1), (void *)this + 2);
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 5;
  operator new();
}

void sub_22409C91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  MEMORY[0x22A614FA0](v13, 0x1020C405E66F15BLL);
  switch(*((unsigned char *)v12 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v15 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v15 + 31) < 0) {
        operator delete((void *)v15[1]);
      }
      std::vector<char>::size_type v16 = v15;
      uint64_t v17 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v18 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      size_t v19 = (void *)v18[1];
      if (v19)
      {
        uint64_t v18[2] = (atomic_ullong)v19;
        operator delete(v19);
      }
      std::vector<char>::size_type v16 = v18;
      uint64_t v17 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a12 = (void **)(v20 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      a12 = (void **)(v20 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
LABEL_18:
      std::vector<char>::size_type v16 = v20;
      uint64_t v17 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v21 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
      std::vector<char>::size_type v16 = v21;
      unsigned int v22 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      std::vector<char>::size_type v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v22 = 2071181815;
LABEL_25:
      uint64_t v17 = v22 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v16, v17);
LABEL_27:
      *uint64_t v12 = 0;
LABEL_28:
      *uint64_t v12 = 0;
      *((_DWORD *)v12 + 2) = 0;
      *((unsigned char *)v12 + 12) = 0;
      a12 = (void **)&a9;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void *turi::groupby_operators::zip_dict::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Dict");
}

void turi::groupby_operators::zip_dict::save(turi::groupby_operators::zip_dict *this, turi::oarchive *a2)
{
  uint64_t v4 = (char *)this + 32;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v5)
    {
      size_t v9 = 2 * v5 + 2;
      *((void *)a2 + 5) = v9;
      char v10 = (void *)*((void *)a2 + 2);
      if (v10)
      {
        __n128 v6 = (unsigned char *)*v10;
        size_t v11 = v10[1] - *v10;
        BOOL v12 = v9 >= v11;
        std::vector<char>::size_type v13 = v9 - v11;
        if (v13 != 0 && v12)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v13);
          __n128 v6 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v12)
        {
          v10[1] = &v6[v9];
        }
      }
      else
      {
        __n128 v6 = malloc_type_realloc(*((void **)a2 + 3), v9, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v6;
    }
    else
    {
      __n128 v6 = (unsigned char *)*((void *)a2 + 3);
    }
    v6[(*((void *)a2 + 4))++] = *v4;
  }
  char v7 = (void *)*((void *)this + 1);
  uint64_t v8 = *((void *)this + 3);
  turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>((uint64_t)a2, v7, (void *)this + 2, v8);
}

turi::iarchive *turi::groupby_operators::zip_dict::load(turi::groupby_operators::zip_dict *this, turi::iarchive *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (v4) {
    *((unsigned char *)this + 32) = *(unsigned char *)(v4 + (*((void *)a2 + 3))++);
  }
  else {
    std::istream::read();
  }
  __n128 v6 = (void *)*((void *)this + 2);
  unint64_t v5 = (void *)((char *)this + 16);
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy((uint64_t)(v5 - 1), v6);
  *(v5 - 1) = v5;
  void *v5 = 0;
  v5[1] = 0;
  return turi::deserialize_iterator<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,std::insert_iterator<std::map<turi::flexible_type,turi::flexible_type>>>(a2, (uint64_t)(v5 - 1), (uint64_t)v5);
}

void turi::groupby_operators::zip_dict::~zip_dict(turi::groupby_operators::zip_dict *this)
{
  *(void *)this = &unk_26D76B8E0;
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D76B8E0;
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
  JUMPOUT(0x22A614FA0);
}

void turi::groupby_operators::zip_dict::set_input_type()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "set_input_type is not supported for zip_dict";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void *std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type,turi::flexible_type>>(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  __n128 v6 = (void **)std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>((uint64_t)a1, &v12, a2, a4);
  char v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    char v7 = operator new(0x40uLL);
    v10[1] = a1 + 1;
    *(void *)((char *)v7 + 37) = *(void *)(a3 + 5);
    v7[4] = *(void *)a3;
    *((unsigned char *)v7 + 44) = *(unsigned char *)(a3 + 12);
    *(unsigned char *)(a3 + 12) = 0;
    *(void *)((char *)v7 + 53) = *(void *)(a3 + 21);
    void v7[6] = *(void *)(a3 + 16);
    *((unsigned char *)v7 + 60) = *(unsigned char *)(a3 + 28);
    *(unsigned char *)(a3 + 2++*(void *)(result + 8) = 0;
    char v11 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v12, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *std::map<turi::flexible_type,turi::flexible_type>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(uint64_t *result, void *a2, void *a3, __n128 a4)
{
  if (a2 != a3)
  {
    unint64_t v5 = a2;
    __n128 v6 = (uint64_t **)result;
    char v7 = result + 1;
    do
    {
      double result = std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type> const&>(v6, v7, (uint64_t)(v5 + 4), v5 + 4, a4);
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          size_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          size_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          unint64_t v5 = v9;
        }
        while (!v10);
      }
      unint64_t v5 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t *std::map<turi::flexible_type,turi::flexible_type>::map[abi:ne180100](uint64_t *a1, uint64_t a2, __n128 a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<turi::flexible_type,turi::flexible_type>::insert[abi:ne180100]<std::__map_iterator<std::__tree_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8), a3);
  return a1;
}

void sub_22409D104(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type> const&>(uint64_t **a1, void *a2, uint64_t a3, uint64_t *a4, __n128 a5)
{
  char v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v14, &v13, a3, a5);
  uint64_t v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    size_t v9 = (uint64_t **)v7;
    uint64_t v8 = (uint64_t *)operator new(0x40uLL);
    v11[1] = a1 + 1;
    std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v8 + 4), a4);
    char v12 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v9, v8);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100](uint64_t result, uint64_t *a2)
{
  *(void *)double result = 0;
  *(_DWORD *)(result + ++*(void *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = 0;
  if (a2 == (uint64_t *)result)
  {
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(unsigned char *)(result + 2++*(void *)(result + 8) = 0;
  }
  else
  {
    uint64_t v2 = *a2;
    *(void *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)double result = v2;
    LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(result + 12) = v2;
    BOOL v3 = v2 > 9;
    int v4 = (1 << v2) & 0x33C;
    if (!v3 && v4 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
    }
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(unsigned char *)(result + 2++*(void *)(result + 8) = 0;
    uint64_t v6 = a2[2];
    *(void *)(result + 21) = *(uint64_t *)((char *)a2 + 21);
    *(void *)(result + 16) = v6;
    LODWORD(v6) = *((unsigned __int8 *)a2 + 28);
    *(unsigned char *)(result + 2++*(void *)(result + 8) = v6;
    switch((int)v6)
    {
      case 2:
      case 3:
      case 4:
      case 5:
      case 8:
      case 9:
        atomic_fetch_add(*(atomic_ullong *volatile *)(result + 16), 1uLL);
        break;
      default:
        return result;
    }
  }
  return result;
}

{
  uint64_t v2;
  BOOL v3;
  int v4;
  uint64_t v6;

  *(void *)double result = 0;
  *(_DWORD *)(result + ++*(void *)(result + 8) = 0;
  *(unsigned char *)(result + 12) = 0;
  uint64_t v2 = *a2;
  *(void *)(result + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)double result = v2;
  LODWORD(v2) = *((unsigned __int8 *)a2 + 12);
  *(unsigned char *)(result + 12) = v2;
  BOOL v3 = v2 > 9;
  int v4 = (1 << v2) & 0x33C;
  if (!v3 && v4 != 0) {
    atomic_fetch_add(*(atomic_ullong *volatile *)result, 1uLL);
  }
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 2++*(void *)(result + 8) = 0;
  uint64_t v6 = a2[2];
  *(void *)(result + 21) = *(uint64_t *)((char *)a2 + 21);
  *(void *)(result + 16) = v6;
  *(unsigned char *)(result + 2++*(void *)(result + 8) = *((unsigned char *)a2 + 28);
  *((unsigned char *)a2 + 2++*(void *)(result + 8) = 0;
  return result;
}

void std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::destroy(a1, a2[1]);
    std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::insert<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,0>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3 == a4)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = a3;
    do
    {
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          char v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          char v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          unint64_t v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      unint64_t v5 = v7;
    }
    while (v7 != a4);
  }
  return std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__insert_with_size[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(a1, a2, a3, a4, v4);
}

uint64_t *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__insert_with_size[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(uint64_t a1, uint64_t *a2, void *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v10 = a1 + 16;
    uint64_t v9 = *(void *)(a1 + 16);
    unint64_t v11 = *(void *)(a1 + 8);
    if (a5 <= (uint64_t)(v9 - v11) >> 5)
    {
      atomic_ullong *volatile v21 = a3;
      std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(&v21, a5);
      uint64_t v19 = *(void *)(a1 + 8) - (void)v5;
      if (v19 >> 5 >= a5 {
        || (atomic_ullong *volatile v21 = a3,
      }
            std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(&v21, v19 >> 5), *(void *)(a1 + ++*(void *)(result + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::pair<turi::flexible_type,turi::flexible_type>*>(v10, v21, a4, *(void *)(a1 + 8)), v19 >= 1))
      {
        std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__move_range(a1, (uint64_t)v5, v11, (uint64_t)&v5[4 * a5]);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::pair<turi::flexible_type,turi::flexible_type> *>((uint64_t)&v26, a3, v21, (uint64_t)v5);
      }
    }
    else
    {
      char v12 = *(uint64_t **)a1;
      unint64_t v13 = a5 + ((uint64_t)(v11 - *(void *)a1) >> 5);
      if (v13 >> 59) {
        std::vector<float>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = ((char *)a2 - (char *)v12) >> 5;
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 4 > v13) {
        unint64_t v13 = v15 >> 4;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v13;
      }
      uint64_t v25 = a1 + 16;
      if (v16) {
        uint64_t v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>>(a1 + 16, v16);
      }
      else {
        uint64_t v17 = 0;
      }
      atomic_ullong *volatile v21 = v17;
      unsigned int v22 = &v17[4 * v14];
      int64_t v23 = v22;
      uint64_t v24 = &v17[4 * v16];
      std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::__construct_at_end_with_size<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>((uint64_t)&v21, a3, a5);
      unint64_t v5 = std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__swap_out_circular_buffer((uint64_t **)a1, &v21, v5);
      std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::~__split_buffer((uint64_t)&v21);
    }
  }
  return v5;
}

void sub_22409D508(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + ++*(void *)(result + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::pair<turi::flexible_type,turi::flexible_type>>::__construct_at_end_with_size<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 16);
  if (a3)
  {
    uint64_t v6 = result + 32 * a3;
    do
    {
      uint64_t v7 = std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(result, a2 + 4);
      BOOL v8 = (void *)a2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)a2[2];
          BOOL v10 = *v9 == (void)a2;
          a2 = v9;
        }
        while (!v10);
      }
      uint64_t result = v7 + 32;
      a2 = v9;
    }
    while (result != v6);
    uint64_t result = v6;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

void **std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v7 = *result;
    do
    {
      BOOL v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          uint64_t v4 = v8;
          BOOL v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          uint64_t v7 = v4;
        }
        while (v5);
      }
      uint64_t v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      BOOL v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          BOOL v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  *uint64_t result = v4;
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<turi::flexible_type,turi::flexible_type>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::pair<turi::flexible_type,turi::flexible_type>*>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t result = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]<turi::flexible_type,turi::flexible_type,0>(result, v6 + 4);
      BOOL v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t result = v7 + 32;
      uint64_t v6 = v9;
    }
    while (v9 != a3);
  }
  return result;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>,std::pair<turi::flexible_type,turi::flexible_type> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  BOOL v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]<turi::flexible_type const,turi::flexible_type,(void *)0>(a4, v5 + 4);
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          BOOL v5 = v8;
        }
        while (!v9);
      }
      a4 += 32;
      BOOL v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100]<turi::flexible_type const,turi::flexible_type,(void *)0>(uint64_t a1, uint64_t *a2)
{
  if (a2 != (uint64_t *)a1)
  {
    switch(*(unsigned char *)(a1 + 12))
    {
      case 2:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v4 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          if (*((char *)v4 + 31) < 0) {
            operator delete((void *)v4[1]);
          }
          atomic_ullong *volatile v5 = v4;
          uint64_t v6 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          BOOL v8 = (void *)v7[1];
          if (v8)
          {
            v7[2] = (atomic_ullong)v8;
            operator delete(v8);
          }
          atomic_ullong *volatile v5 = v7;
          uint64_t v6 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v36 = (void **)(v9 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v9 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          uint64_t v36 = (void **)(v9 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_19:
          atomic_ullong *volatile v5 = v9;
          uint64_t v6 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
          if (!*(void *)a1) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v10 + 2);
          atomic_ullong *volatile v5 = v10;
          unsigned int v11 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)a1;
          if (*(void *)a1)
          {
            unint64_t v13 = (void *)v12[6];
            if (v13)
            {
              v12[7] = (atomic_ullong)v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)v12[3];
            if (v14)
            {
              v12[4] = (atomic_ullong)v14;
              operator delete(v14);
            }
            uint64_t v15 = (std::__shared_weak_count *)v12[2];
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            atomic_ullong *volatile v5 = v12;
            unsigned int v11 = 2071181815;
LABEL_32:
            uint64_t v6 = v11 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v5, v6);
          }
LABEL_34:
          *(void *)a1 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v16 = *a2;
    *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)a1 = v16;
    LODWORD(v16) = *((unsigned __int8 *)a2 + 12);
    *(unsigned char *)(a1 + 12) = v16;
    BOOL v17 = v16 > 9;
    int v18 = (1 << v16) & 0x33C;
    if (!v17 && v18 != 0) {
      atomic_fetch_add(*(atomic_ullong *volatile *)a1, 1uLL);
    }
  }
  if (a2 != (uint64_t *)a1)
  {
    atomic_ullong *volatile v20 = (atomic_ullong *volatile *)(a1 + 16);
    switch(*(unsigned char *)(a1 + 28))
    {
      case 2:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v21 = *v20;
          if (!*v20) {
            goto LABEL_73;
          }
          if (*((char *)v21 + 31) < 0) {
            operator delete((void *)v21[1]);
          }
          atomic_ullong *volatile v22 = v21;
          uint64_t v23 = 0x1012C404EF22A49;
          goto LABEL_72;
        }
        break;
      case 3:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v24 = *v20;
          if (!*v20) {
            goto LABEL_73;
          }
          uint64_t v25 = (void *)v24[1];
          if (v25)
          {
            v24[2] = (atomic_ullong)v25;
            operator delete(v25);
          }
          atomic_ullong *volatile v22 = v24;
          uint64_t v23 = 0x1080C409938AC02;
          goto LABEL_72;
        }
        break;
      case 4:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v26 = *v20;
          if (!*v20) {
            goto LABEL_73;
          }
          uint64_t v36 = (void **)(v26 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v36);
          goto LABEL_58;
        }
        break;
      case 5:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v26 = *v20;
          if (!*v20) {
            goto LABEL_73;
          }
          uint64_t v36 = (void **)(v26 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v36);
LABEL_58:
          atomic_ullong *volatile v22 = v26;
          uint64_t v23 = 0x1020C405E66F15BLL;
          goto LABEL_72;
        }
        break;
      case 8:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v27 = *v20;
          if (!*v20) {
            goto LABEL_73;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v27 + 2);
          atomic_ullong *volatile v22 = v27;
          unsigned int v28 = -235920773;
          goto LABEL_71;
        }
        break;
      case 9:
        if (atomic_fetch_add(*v20, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v29 = *v20;
          if (*v20)
          {
            unsigned int v30 = (void *)v29[6];
            if (v30)
            {
              v29[7] = (atomic_ullong)v30;
              operator delete(v30);
            }
            uint64_t v31 = (void *)v29[3];
            if (v31)
            {
              void v29[4] = (atomic_ullong)v31;
              operator delete(v31);
            }
            unsigned __int8 v32 = (std::__shared_weak_count *)v29[2];
            if (v32) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
            }
            atomic_ullong *volatile v22 = v29;
            unsigned int v28 = 2071181815;
LABEL_71:
            uint64_t v23 = v28 | 0x1030C4000000000;
LABEL_72:
            MEMORY[0x22A614FA0](v22, v23);
          }
LABEL_73:
          *atomic_ullong *volatile v20 = 0;
        }
        break;
      default:
        break;
    }
    std::string v33 = (atomic_ullong *)a2[2];
    *(void *)(a1 + 21) = *(uint64_t *)((char *)a2 + 21);
    *atomic_ullong *volatile v20 = v33;
    unsigned int v34 = *((unsigned __int8 *)a2 + 28);
    *(unsigned char *)(a1 + 2++*(void *)(result + 8) = v34;
    if (v34 <= 9 && ((1 << v34) & 0x33C) != 0) {
      atomic_fetch_add(*v20, 1uLL);
    }
  }
  return a1;
}

void turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *> *,long>>>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v8)
    {
      size_t v14 = 2 * v8 + 16;
      *(void *)(a1 + 40) = v14;
      uint64_t v15 = *(char ***)(a1 + 16);
      if (v15)
      {
        atomic_ullong *volatile v9 = *v15;
        size_t v16 = v15[1] - *v15;
        BOOL v17 = v14 >= v16;
        std::vector<char>::size_type v18 = v14 - v16;
        if (v18 != 0 && v17)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v18);
          atomic_ullong *volatile v9 = **(char ***)(a1 + 16);
        }
        else if (!v17)
        {
          v15[1] = &v9[v14];
        }
      }
      else
      {
        atomic_ullong *volatile v9 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v14, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v9;
    }
    else
    {
      atomic_ullong *volatile v9 = *(char **)(a1 + 24);
    }
    *(void *)&v9[*(void *)(a1 + 32)] = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2 + 4);
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2 + 6);
      unsigned int v11 = (void *)a2[1];
      if (v11)
      {
        do
        {
          atomic_ullong *volatile v12 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          atomic_ullong *volatile v12 = (void *)a2[2];
          BOOL v13 = *v12 == (void)a2;
          a2 = v12;
        }
        while (!v13);
      }
      ++v10;
      a2 = v12;
    }
    while (v12 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
}

turi::iarchive *turi::deserialize_iterator<turi::iarchive,std::pair<turi::flexible_type,turi::flexible_type>,std::insert_iterator<std::map<turi::flexible_type,turi::flexible_type>>>(turi::iarchive *result, uint64_t a2, uint64_t a3)
{
  BOOL v3 = result;
  void v13[2] = *MEMORY[0x263EF8340];
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v4 = *((void *)result + 2);
  if (!v4) {
    return (turi::iarchive *)std::istream::read();
  }
  uint64_t v5 = *((void *)result + 3);
  unint64_t v8 = *(void *)(v4 + v5);
  *((void *)result + 3) = v5 + 8;
  if (v8)
  {
    for (unint64_t i = 0; i < v8; ++i)
    {
      memset(v12, 0, 13);
      memset(v13, 0, 13);
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(v3, v12);
      turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(v3, v13);
      *(void *)&v10[5] = *(unint64_t *)((char *)v12 + 5);
      *(void *)uint64_t v10 = v12[0];
      v10[12] = BYTE4(v12[1]);
      if (BYTE4(v12[1]) <= 9u && ((1 << SBYTE4(v12[1])) & 0x33C) != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)v10, 1uLL);
      }
      *(void *)&v11[5] = *(unint64_t *)((char *)v13 + 5);
      *(void *)unsigned int v11 = v13[0];
      v11[12] = BYTE4(v13[1]);
      if (BYTE4(v13[1]) <= 9u && ((1 << SBYTE4(v13[1])) & 0x33C) != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)v11, 1uLL);
      }
      std::insert_iterator<std::map<turi::flexible_type,turi::flexible_type>>::operator=[abi:ne180100]((uint64_t)v9, (uint64_t *)v10, v7);
      std::pair<turi::flexible_type const,turi::flexible_type>::~pair((uint64_t)v10);
      uint64_t result = (turi::iarchive *)std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v12);
    }
  }
  return result;
}

void sub_22409DED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t std::insert_iterator<std::map<turi::flexible_type,turi::flexible_type>>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2, __n128 a3)
{
  uint64_t v4 = std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type>>(*(uint64_t ***)a1, *(void **)(a1 + 8), (uint64_t)a2, a2, a3);
  *(void *)(a1 + ++*(void *)(result + 8) = v4;
  uint64_t v5 = (uint64_t *)v4[1];
  if (v5)
  {
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      uint64_t v6 = (uint64_t *)v4[2];
      BOOL v7 = *v6 == (void)v4;
      uint64_t v4 = v6;
    }
    while (!v7);
  }
  *(void *)(a1 + ++*(void *)(result + 8) = v6;
  return a1;
}

uint64_t *std::__tree<std::__value_type<turi::flexible_type,turi::flexible_type>,std::__map_value_compare<turi::flexible_type,std::__value_type<turi::flexible_type,turi::flexible_type>,std::less<turi::flexible_type>,true>,std::allocator<std::__value_type<turi::flexible_type,turi::flexible_type>>>::__emplace_hint_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,turi::flexible_type>>(uint64_t **a1, void *a2, uint64_t a3, uint64_t *a4, __n128 a5)
{
  BOOL v7 = std::__tree<turi::flexible_type>::__find_equal<turi::flexible_type>(a1, a2, &v14, &v13, a3, a5);
  unint64_t v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    atomic_ullong *volatile v9 = (uint64_t **)v7;
    unint64_t v8 = (uint64_t *)operator new(0x40uLL);
    v11[1] = a1 + 1;
    std::pair<turi::flexible_type const,turi::flexible_type>::pair[abi:ne180100]((uint64_t)(v8 + 4), a4);
    char v12 = 1;
    std::__tree<std::__value_type<std::string,turi::neural_net::shared_float_array>,std::__map_value_compare<std::string,std::__value_type<std::string,turi::neural_net::shared_float_array>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,turi::neural_net::shared_float_array>>>::__insert_node_at(a1, v14, v9, v8);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<turi::flexible_type,turi::flexible_type>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__shared_ptr_emplace<turi::groupby_operators::zip_list>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::zip_list>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76B980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::zip_list>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::zip_list::new_instance(turi::groupby_operators::zip_list *this)
{
}

void turi::groupby_operators::zip_list::add_element_simple(turi::groupby_operators::zip_list *this, const turi::flexible_type *a2)
{
  switch(byte_268083A6C)
  {
    case 0:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == turi::FLEX_UNDEFINED) {
            goto LABEL_97;
          }
          goto LABEL_45;
        case 1:
          double v4 = *(double *)a2;
          uint64_t v5 = turi::FLEX_UNDEFINED;
          goto LABEL_87;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_45;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2)) {
            goto LABEL_97;
          }
          goto LABEL_45;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          double v4 = *(double *)&turi::FLEX_UNDEFINED;
          uint64_t v5 = *(void *)a2;
LABEL_87:
          double v53 = (double)v5;
          goto LABEL_88;
        case 1:
          double v4 = *(double *)a2;
          double v53 = *(double *)&turi::FLEX_UNDEFINED;
          goto LABEL_88;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_45;
        case 6:
          double v63 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_96;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v6 = *((unsigned __int8 *)a2 + 12);
      if (v6 - 3 < 7 || v6 < 2) {
        goto LABEL_45;
      }
      if (v6 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v8 = *(double *)a2;
      char v9 = *(unsigned char *)(*(void *)a2 + 31);
      size_t v10 = v9 < 0 ? *(void *)(*(void *)&v8 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
      uint64_t v64 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(void *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v10 != v64) {
        goto LABEL_45;
      }
      double v65 = (unsigned __int8 *)(*(void *)&v8 + 8);
      if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
        double v65 = *(unsigned __int8 **)v65;
      }
      double v66 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        double v66 = *(unsigned __int8 **)v66;
      }
      if (v9 < 0)
      {
        if (memcmp(v65, v66, v10)) {
          goto LABEL_45;
        }
      }
      else
      {
        if (!v10) {
          goto LABEL_97;
        }
        do
        {
          if (*v65 != *v66) {
            goto LABEL_45;
          }
          ++v65;
          ++v66;
          --v10;
        }
        while (v10);
      }
      goto LABEL_97;
    case 3:
      unsigned int v11 = *((unsigned __int8 *)a2 + 12);
      if (v11 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v11 != 3) {
        goto LABEL_45;
      }
      char v12 = *(double **)(*(void *)a2 + 8);
      uint64_t v13 = *(double **)(*(void *)a2 + 16);
      unint64_t v14 = v13 - v12;
      uint64_t v15 = *(double **)(turi::FLEX_UNDEFINED + 8);
      if (v14 != (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v15) >> 3) {
        goto LABEL_45;
      }
      if (v13 == v12) {
        goto LABEL_97;
      }
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      while (*v12 == *v15)
      {
        ++v12;
        ++v15;
        if (!--v14) {
          goto LABEL_97;
        }
      }
      goto LABEL_45;
    case 4:
      unsigned int v16 = *((unsigned __int8 *)a2 + 12);
      if (v16 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v16 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v67, (uint64_t *)(*(void *)a2 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        goto LABEL_97;
      }
      goto LABEL_45;
    case 5:
      unsigned int v17 = *((unsigned __int8 *)a2 + 12);
      if (v17 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v17 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&v67, (uint64_t **)(*(void *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        goto LABEL_97;
      }
      goto LABEL_45;
    case 6:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268083A68) {
            goto LABEL_97;
          }
          goto LABEL_45;
        case 1:
          double v63 = vabdd_f64(*(double *)a2, (double)dword_268083A68 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_96:
          if (v63 < 0.0000005) {
            goto LABEL_97;
          }
          goto LABEL_45;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_45;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_268083A68)
          {
            goto LABEL_97;
          }
          goto LABEL_45;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v18 = *((unsigned __int8 *)a2 + 12);
      if (v18 < 7 || v18 - 8 < 2) {
        goto LABEL_45;
      }
      if (v18 != 7) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      goto LABEL_97;
    case 8:
      unsigned int v19 = *((unsigned __int8 *)a2 + 12);
      if (v19 < 8) {
        goto LABEL_45;
      }
      if (v19 != 8)
      {
        if (v19 != 9) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        goto LABEL_45;
      }
      if (!turi::image_type::operator==(*(void *)a2 + 8, turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_45;
      }
      goto LABEL_97;
    case 9:
      unsigned int v20 = *((unsigned __int8 *)a2 + 12);
      if (v20 < 9) {
        goto LABEL_45;
      }
      if (v20 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v25 = turi::FLEX_UNDEFINED;
      atomic_ullong *volatile v26 = *(void **)a2;
      if (turi::FLEX_UNDEFINED == *(void *)a2) {
        goto LABEL_97;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v26 + 1), turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_45;
      }
      unsigned int v28 = (char *)v26[3];
      atomic_ullong *volatile v27 = (char *)v26[4];
      uint64_t v29 = v27 - v28;
      if (v27 == v28) {
        goto LABEL_97;
      }
      if (!v26[1]) {
        goto LABEL_97;
      }
      uint64_t v30 = 1;
      do
      {
        uint64_t v31 = *(void *)v28;
        v28 += 8;
        v30 *= v31;
      }
      while (v28 != v27);
      if (!v30) {
        goto LABEL_97;
      }
      uint64_t v68 = 0;
      std::vector<unsigned long>::vector(&v69, v29 >> 3, &v68);
      unsigned __int8 v32 = v69;
      std::string v33 = v70;
      uint64_t v34 = **(void **)(v25 + 8);
      uint64_t v35 = (char *)v70 - (char *)v69;
      unint64_t v36 = v70 - v69;
      unint64_t v37 = v36 - 1;
      if (v36 <= 1) {
        uint64_t v38 = 1;
      }
      else {
        uint64_t v38 = v70 - v69;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (v33 == v32)
    {
      uint64_t v46 = 0;
      double v4 = *(double *)(*(void *)v26[1] + 8 * v26[9]);
    }
    else
    {
      uint64_t v39 = 0;
      unint64_t v40 = (uint64_t *)v26[6];
      unint64_t v41 = v32;
      uint64_t v42 = v38;
      do
      {
        uint64_t v44 = *v41++;
        uint64_t v43 = v44;
        uint64_t v45 = *v40++;
        v39 += v45 * v43;
        --v42;
      }
      while (v42);
      uint64_t v46 = 0;
      double v4 = *(double *)(*(void *)v26[1] + 8 * (v26[9] + v39));
      size_t v47 = *(uint64_t **)(v25 + 48);
      unsigned int v48 = v32;
      uint64_t v49 = v38;
      do
      {
        uint64_t v51 = *v48++;
        uint64_t v50 = v51;
        uint64_t v52 = *v47++;
        v46 += v52 * v50;
        --v49;
      }
      while (v49);
    }
    double v53 = *(double *)(v34 + 8 * (*(void *)(v25 + 72) + v46));
    if (v4 != v53) {
      break;
    }
    uint64_t v54 = v36;
    uint64_t v55 = v36 - 1;
    if (v35 >= 1)
    {
      uint64_t v56 = v26[3];
      unint64_t v57 = v32[v37] + 1;
      v32[v37] = v57;
      unint64_t v58 = (v35 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v55 = v36 - 1;
      if (v57 >= *(void *)(v56 + 8 * v37))
      {
        while (1)
        {
          *(uint64_t *)((char *)v32 + v58 + ++*(void *)(result + 8) = 0;
          if (v55 <= 0) {
            break;
          }
          --v55;
          unint64_t v59 = *(uint64_t *)((char *)v32 + v58) + 1;
          *(uint64_t *)((char *)v32 + v5++*(void *)(result + 8) = v59;
          unint64_t v60 = *(void *)(v56 + v58);
          v58 -= 8;
          if (v59 < v60)
          {
            uint64_t v54 = 1;
            goto LABEL_79;
          }
        }
        uint64_t v70 = v32;
        operator delete(v32);
        goto LABEL_97;
      }
      uint64_t v54 = 1;
      uint64_t v55 = v36 - 1;
    }
LABEL_79:
    ;
  }
  while ((v55 & 0x8000000000000000) == 0 && v54);
  if (!v32)
  {
LABEL_88:
    if (v4 != v53) {
      goto LABEL_45;
    }
LABEL_97:
    *((unsigned char *)this + 32) = 1;
    return;
  }
  uint64_t v70 = v32;
  double v61 = v4;
  double v62 = v53;
  operator delete(v32);
  if (v61 == v62) {
    goto LABEL_97;
  }
LABEL_45:
  unint64_t v21 = *((void *)this + 2);
  if (v21 >= *((void *)this + 3))
  {
    uint64_t v24 = std::vector<turi::flexible_type>::__push_back_slow_path<turi::flexible_type const&>((uint64_t *)this + 1, (atomic_ullong *volatile *)a2);
  }
  else
  {
    *(void *)unint64_t v21 = 0;
    *(_DWORD *)(v21 + ++*(void *)(result + 8) = 0;
    *(unsigned char *)(v21 + 12) = 0;
    if ((const turi::flexible_type *)v21 != a2)
    {
      double v22 = *(double *)a2;
      *(void *)(v21 + 5) = *(void *)((char *)a2 + 5);
      *(double *)unint64_t v21 = v22;
      unsigned int v23 = *((unsigned __int8 *)a2 + 12);
      *(unsigned char *)(v21 + 12) = v23;
      if (v23 <= 9 && ((1 << v23) & 0x33C) != 0) {
        atomic_fetch_add(*(atomic_ullong *volatile *)v21, 1uLL);
      }
    }
    uint64_t v24 = v21 + 16;
  }
  *((void *)this + 2) = v24;
}

void turi::groupby_operators::zip_list::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  double v4 = v3;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v5, v3[1], v3[2], ((char *)v3[2] - (char *)v3[1]) >> 4);
  __int16 v8 = *((_WORD *)v4 + 16);
  *(unsigned char *)(a1 + 32) |= v8;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<turi::flexible_type *>,std::__wrap_iter<turi::flexible_type *>,std::back_insert_iterator<std::vector<turi::flexible_type>>,0>(v5, v6, (uint64_t *)(a1 + 8));
  char v9 = (void **)&v5;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_22409E9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::zip_list::emit(turi::groupby_operators::zip_list *this@<X0>, uint64_t a2@<X8>)
{
  if (!*((unsigned char *)this + 32) || *((void *)this + 2) != *((void *)this + 1))
  {
    if (*((unsigned char *)this + 33))
    {
      BOOL v3 = (int *)*((void *)this + 1);
      double v4 = (int *)*((void *)this + 2);
      uint64_t v6 = 0;
      long long v5 = 0uLL;
      std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(&v5, v3, v4, ((char *)v4 - (char *)v3) >> 4);
      *(void *)(a2 + 5) = 0;
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 12) = 3;
      operator new();
    }
    long long v5 = 0uLL;
    uint64_t v6 = 0;
    std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(&v5, *((uint64_t **)this + 1), *((uint64_t **)this + 2), (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4);
    *(void *)(a2 + 5) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 12) = 4;
    operator new();
  }
  if (*((unsigned char *)this + 33))
  {
    *(void *)(a2 + 5) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 12) = 3;
    operator new();
  }
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 4;
  operator new();
}

void sub_22409F918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void **p_p)
{
  MEMORY[0x22A614FA0](v13, 0x1030C407B73B9F7);
  switch(*((unsigned char *)v12 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v15 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      if (*((char *)v15 + 31) < 0) {
        operator delete((void *)v15[1]);
      }
      unsigned int v16 = v15;
      uint64_t v17 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v18 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      unsigned int v19 = (void *)v18[1];
      if (v19)
      {
        uint64_t v18[2] = (atomic_ullong)v19;
        operator delete(v19);
      }
      unsigned int v16 = v18;
      uint64_t v17 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      p_p = (void **)(v20 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      goto LABEL_18;
    case 5:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      p_p = (void **)(v20 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&p_p);
LABEL_18:
      unsigned int v16 = v20;
      uint64_t v17 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v21 = *v12;
      if (!*v12) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
      unsigned int v16 = v21;
      unsigned int v22 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v12, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v12) {
        goto LABEL_27;
      }
      unsigned int v16 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v12);
      unsigned int v22 = 2071181815;
LABEL_25:
      uint64_t v17 = v22 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v16, v17);
LABEL_27:
      *char v12 = 0;
LABEL_28:
      *char v12 = 0;
      *((_DWORD *)v12 + 2) = 0;
      *((unsigned char *)v12 + 12) = 0;
      p_p = &__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&p_p);
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

uint64_t turi::groupby_operators::zip_list::set_input_types(uint64_t a1, unsigned char **a2)
{
  BOOL v2 = **a2 == 1;
  *(unsigned char *)(a1 + 33) = v2;
  if (v2) {
    return 3;
  }
  else {
    return 4;
  }
}

void *turi::groupby_operators::zip_list::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "List");
}

uint64_t turi::groupby_operators::zip_list::save(turi::groupby_operators::zip_list *this, turi::oarchive *a2)
{
  double v4 = (char *)this + 32;
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v5)
    {
      size_t v10 = 2 * v5 + 2;
      *((void *)a2 + 5) = v10;
      unsigned int v11 = (void *)*((void *)a2 + 2);
      if (v11)
      {
        uint64_t v6 = (unsigned char *)*v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v14);
          uint64_t v6 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v13)
        {
          v11[1] = &v6[v10];
        }
      }
      else
      {
        uint64_t v6 = malloc_type_realloc(*((void **)a2 + 3), v10, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v6;
    }
    else
    {
      uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    }
    v6[(*((void *)a2 + 4))++] = *v4;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v7 = *((void *)a2 + 5);
    if (*((void *)a2 + 4) + 1 > v7)
    {
      size_t v15 = 2 * v7 + 2;
      *((void *)a2 + 5) = v15;
      unsigned int v16 = (void *)*((void *)a2 + 2);
      if (v16)
      {
        __int16 v8 = (unsigned char *)*v16;
        size_t v17 = v16[1] - *v16;
        BOOL v18 = v15 >= v17;
        std::vector<char>::size_type v19 = v15 - v17;
        if (v19 != 0 && v18)
        {
          std::vector<char>::__append(*((std::vector<char> **)a2 + 2), v19);
          __int16 v8 = (unsigned char *)**((void **)a2 + 2);
        }
        else if (!v18)
        {
          v16[1] = &v8[v15];
        }
      }
      else
      {
        __int16 v8 = malloc_type_realloc(*((void **)a2 + 3), v15, 0xF6EA6B1uLL);
      }
      *((void *)a2 + 3) = v8;
    }
    else
    {
      __int16 v8 = (unsigned char *)*((void *)a2 + 3);
    }
    v8[(*((void *)a2 + 4))++] = *((unsigned char *)this + 33);
  }
  return turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::flexible_type,false>::exec((uint64_t)a2, (uint64_t *)this + 1);
}

void turi::groupby_operators::zip_list::load(turi::groupby_operators::zip_list *this, turi::iarchive *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (v4) {
    *((unsigned char *)this + 32) = *(unsigned char *)(v4 + (*((void *)a2 + 3))++);
  }
  else {
    std::istream::read();
  }
  uint64_t v5 = *((void *)a2 + 2);
  if (v5) {
    *((unsigned char *)this + 33) = *(unsigned char *)(v5 + (*((void *)a2 + 3))++);
  }
  else {
    std::istream::read();
  }
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::flexible_type,false>::exec(a2, (uint64_t *)this + 1);
}

void turi::groupby_operators::zip_list::~zip_list(turi::groupby_operators::zip_list *this)
{
  *(void *)this = &unk_26D76B9D0;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26D76B9D0;
  BOOL v2 = (void **)((char *)this + 8);
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x22A614FA0](this, 0x10A1C405B464BD3);
}

void turi::groupby_operators::zip_list::set_input_type()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = "set_input_type is not supported for zip_list";
  __cxa_throw(exception, MEMORY[0x263F8C1D8], 0);
}

void std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(void *a1, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a4);
    std::vector<double>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>((uint64_t)a1, a2, a3);
  }
}

void sub_2240A050C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::__construct_at_end<std::__wrap_iter<turi::flexible_type const*>,std::__wrap_iter<turi::flexible_type const*>>(uint64_t a1, int *a2, int *a3)
{
  if (a2 == a3)
  {
    uint64_t v6 = *(double **)(a1 + 8);
  }
  else
  {
    uint64_t v5 = a2;
    uint64_t v6 = *(double **)(a1 + 8);
    do
    {
      std::allocator<double>::construct[abi:ne180100]<double,turi::flexible_type const&>(a1 + 16, v6, v5);
      v5 += 4;
      ++v6;
    }
    while (v5 != a3);
  }
  *(void *)(a1 + ++*(void *)(result + 8) = v6;
}

void sub_2240A05A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(result + 8) = v2;
  _Unwind_Resume(a1);
}

void std::allocator<double>::construct[abi:ne180100]<double,turi::flexible_type const&>(uint64_t a1, double *a2, int *a3)
{
  double v4 = 0.0;
  switch(*((unsigned char *)a3 + 12))
  {
    case 0:
      double v4 = (double)*(uint64_t *)a3;
      break;
    case 1:
      double v4 = *(double *)a3;
      break;
    case 2:
      uint64_t v6 = *(void *)a3;
      unint64_t v7 = (char **)(*(void *)a3 + 8);
      size_t __idx = 0;
      __int16 v8 = (char *)v7;
      if (*(char *)(v6 + 31) < 0) {
        __int16 v8 = *v7;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v8);
      double v9 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v22[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(v6 + 31) < 0) {
        uint64_t v10 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v10 = *(unsigned __int8 *)(v6 + 31);
      }
      if (__idx != v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::vector<char>::size_type v19 = std::string::append(&v25, " cannot be interpreted as a float");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v22[0] = (void *)v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v17 = v9;
      double v4 = v17;
      break;
    case 3:
      uint64_t v5 = *(void *)a3;
      __p[1] = 0;
      v22[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      uint64_t v11 = *(void *)a3;
      __p[1] = 0;
      v22[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(v11 + 8), *(uint64_t **)(v11 + 16), (uint64_t)(*(void *)(v11 + 16) - *(void *)(v11 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      break;
    case 5:
      uint64_t v12 = *(void *)a3;
      __p[1] = 0;
      v22[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(v12 + 8), *(uint64_t **)(v12 + 16), (uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v25.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
      break;
    case 6:
      double v4 = (double)a3[2] / 1000000.0 + (double)((uint64_t)(*(void *)a3 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      uint64_t v13 = *(void *)a3;
      std::vector<char>::size_type v14 = *(atomic_uint **)(*(void *)a3 + 16);
      __p[0] = *(void **)(*(void *)a3 + 8);
      __p[1] = v14;
      if (v14) {
        atomic_fetch_add_explicit(v14 + 2, 1u, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(v13 + 24);
      long long v16 = *(_OWORD *)(v13 + 56);
      long long v23 = *(_OWORD *)(v13 + 40);
      long long v24 = v16;
      *(_OWORD *)unsigned int v22 = v15;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a3 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v23 + 1))
      {
        *(void *)&long long v24 = *((void *)&v23 + 1);
        operator delete(*((void **)&v23 + 1));
      }
      if (v22[0])
      {
        v22[1] = v22[0];
        operator delete(v22[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  *a2 = v4;
}

void sub_2240A0888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void *_ZNSt3__115allocate_sharedB8ne180100IN4turi17groupby_operators8quantileENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0xC8uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4turi17groupby_operators8quantileENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_2240A09BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN4turi17groupby_operators8quantileENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D76BA70;
  std::allocator<turi::groupby_operators::quantile>::construct[abi:ne180100]<turi::groupby_operators::quantile>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_2240A0A28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<turi::groupby_operators::quantile>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::quantile>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::quantile>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

uint64_t std::allocator<turi::groupby_operators::quantile>::construct[abi:ne180100]<turi::groupby_operators::quantile>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 12++*(void *)(result + 8) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 4++*(void *)(result + 8) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)a2 = &unk_26D76BAC0;
  *(void *)(a2 + ++*(void *)(result + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch(a2 + 32, 0.005);
}

void sub_2240A0B54(_Unwind_Exception *exception_object)
{
  char v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void turi::groupby_operators::quantile::new_instance(turi::groupby_operators::quantile *this)
{
}

void sub_2240A0C1C(_Unwind_Exception *a1)
{
  double v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x22A614FA0](v1, 0x10A1C40473C5AE8);
  _Unwind_Resume(a1);
}

void turi::groupby_operators::quantile::add_element_simple(turi::groupby_operators::quantile *this, const turi::flexible_type *a2, __n128 a3)
{
  switch(byte_268083A6C)
  {
    case 0:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == turi::FLEX_UNDEFINED) {
            return;
          }
          goto LABEL_81;
        case 1:
          double v61 = *(double *)a2;
          uint64_t v62 = turi::FLEX_UNDEFINED;
          goto LABEL_120;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          if (turi::FLEX_UNDEFINED == (uint64_t)(*(void *)a2 << 8) >> 8 && !*((_DWORD *)a2 + 2)) {
            return;
          }
          goto LABEL_81;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 1:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          double v61 = *(double *)&turi::FLEX_UNDEFINED;
          uint64_t v62 = *(void *)a2;
LABEL_120:
          double v81 = (double)v62;
          goto LABEL_121;
        case 1:
          double v61 = *(double *)a2;
          double v81 = *(double *)&turi::FLEX_UNDEFINED;
LABEL_121:
          if (v61 != v81) {
            goto LABEL_81;
          }
          return;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          double v80 = vabdd_f64((double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8), *(double *)&turi::FLEX_UNDEFINED);
          goto LABEL_125;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 2:
      unsigned int v45 = *((unsigned __int8 *)a2 + 12);
      if (v45 - 3 < 7 || v45 < 2) {
        goto LABEL_81;
      }
      if (v45 != 2) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      double v47 = *(double *)a2;
      char v48 = *(unsigned char *)(*(void *)a2 + 31);
      size_t v49 = v48 < 0 ? *(void *)(*(void *)&v47 + 16) : *(unsigned __int8 *)(*(void *)a2 + 31);
      uint64_t v82 = *(char *)(turi::FLEX_UNDEFINED + 31) < 0
          ? *(void *)(turi::FLEX_UNDEFINED + 16)
          : *(unsigned __int8 *)(turi::FLEX_UNDEFINED + 31);
      if (v49 != v82) {
        goto LABEL_81;
      }
      uint64_t v83 = (unsigned __int8 *)(*(void *)&v47 + 8);
      if ((*(unsigned char *)(*(void *)a2 + 31) & 0x80) != 0) {
        uint64_t v83 = *(unsigned __int8 **)v83;
      }
      double v84 = (unsigned __int8 *)(turi::FLEX_UNDEFINED + 8);
      if ((*(unsigned char *)(turi::FLEX_UNDEFINED + 31) & 0x80) != 0) {
        double v84 = *(unsigned __int8 **)v84;
      }
      if (v48 < 0)
      {
        if (memcmp(v83, v84, v49)) {
          goto LABEL_81;
        }
      }
      else
      {
        if (!v49) {
          return;
        }
        do
        {
          if (*v83 != *v84) {
            goto LABEL_81;
          }
          ++v83;
          ++v84;
          --v49;
        }
        while (v49);
      }
      return;
    case 3:
      unsigned int v50 = *((unsigned __int8 *)a2 + 12);
      if (v50 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v50 == 3)
      {
        uint64_t v51 = *(double **)(*(void *)a2 + 8);
        uint64_t v52 = *(double **)(*(void *)a2 + 16);
        unint64_t v53 = v52 - v51;
        uint64_t v54 = *(double **)(turi::FLEX_UNDEFINED + 8);
        if (v53 == (uint64_t)(*(void *)(turi::FLEX_UNDEFINED + 16) - (void)v54) >> 3)
        {
          if (v52 == v51) {
            return;
          }
          uint64_t v55 = v53 <= 1 ? 1 : v52 - v51;
          if (*v51 == *v54)
          {
            uint64_t v56 = 1;
            do
            {
              unint64_t v57 = v56;
              if (v55 == v56) {
                break;
              }
              double v58 = v51[v56];
              double v59 = v54[v56++];
            }
            while (v58 == v59);
            if (v57 >= v53) {
              return;
            }
          }
        }
      }
      goto LABEL_81;
    case 4:
      unsigned int v5 = *((unsigned __int8 *)a2 + 12);
      if (v5 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v5 == 4
        && (turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t *)(*(void *)a2 + 8), (void *)(turi::FLEX_UNDEFINED + 8)) & 1) != 0)
      {
        return;
      }
      goto LABEL_81;
    case 5:
      unsigned int v63 = *((unsigned __int8 *)a2 + 12);
      if (v63 > 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      if (v63 == 5
        && turi::flexible_type_impl::approx_equality_operator::operator()((uint64_t)&__idx, (uint64_t **)(*(void *)a2 + 8), (uint64_t **)(turi::FLEX_UNDEFINED + 8)))
      {
        return;
      }
      goto LABEL_81;
    case 6:
      switch(*((unsigned char *)a2 + 12))
      {
        case 0:
          if (*(void *)a2 == turi::FLEX_UNDEFINED << 8 >> 8 && !dword_268083A68) {
            return;
          }
          goto LABEL_81;
        case 1:
          double v80 = vabdd_f64(*(double *)a2, (double)dword_268083A68 / 1000000.0 + (double)(turi::FLEX_UNDEFINED << 8 >> 8));
LABEL_125:
          if (v80 < 0.0000005) {
            return;
          }
          goto LABEL_81;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 9:
          goto LABEL_81;
        case 6:
          if (((turi::FLEX_UNDEFINED ^ *(void *)a2) & 0xFFFFFFFFFFFFFFLL) == 0
            && *((_DWORD *)a2 + 2) == dword_268083A68)
          {
            return;
          }
          goto LABEL_81;
        default:
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
    case 7:
      unsigned int v60 = *((unsigned __int8 *)a2 + 12);
      if (v60 < 7 || v60 - 8 < 2) {
        goto LABEL_81;
      }
      if (v60 != 7) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      return;
    case 8:
      unsigned int v64 = *((unsigned __int8 *)a2 + 12);
      if (v64 >= 8 && v64 != 9)
      {
        if (v64 != 8) {
          turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
        }
        if (turi::image_type::operator==(*(void *)a2 + 8, turi::FLEX_UNDEFINED + 8)) {
          return;
        }
      }
      goto LABEL_81;
    case 9:
      unsigned int v6 = *((unsigned __int8 *)a2 + 12);
      if (v6 < 9) {
        goto LABEL_81;
      }
      if (v6 != 9) {
        turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
      }
      uint64_t v7 = turi::FLEX_UNDEFINED;
      __int16 v8 = *(void **)a2;
      if (turi::FLEX_UNDEFINED == *(void *)a2) {
        return;
      }
      if (!turi::flexible_type_impl::ndarray<double>::same_shape((uint64_t)(v8 + 1), turi::FLEX_UNDEFINED + 8)) {
        goto LABEL_81;
      }
      uint64_t v10 = (char *)v8[3];
      double v9 = (char *)v8[4];
      uint64_t v11 = v9 - v10;
      if (v9 == v10) {
        return;
      }
      if (!v8[1]) {
        return;
      }
      uint64_t v12 = 1;
      do
      {
        uint64_t v13 = *(void *)v10;
        v10 += 8;
        v12 *= v13;
      }
      while (v10 != v9);
      if (!v12) {
        return;
      }
      v92.__r_.__value_.__r.__words[0] = 0;
      std::vector<unsigned long>::vector(__p, v11 >> 3, &v92);
      std::vector<char>::size_type v14 = (uint64_t *)__p[0];
      long long v15 = (uint64_t *)__p[1];
      uint64_t v16 = **(void **)(v7 + 8);
      int64_t v17 = (char *)__p[1] - (char *)__p[0];
      unint64_t v18 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      unint64_t v19 = v18 - 1;
      if (v18 <= 1) {
        int64_t v20 = 1;
      }
      else {
        int64_t v20 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  do
  {
    if (v15 == v14)
    {
      uint64_t v28 = 0;
      double v29 = *(double *)(*(void *)v8[1] + 8 * v8[9]);
    }
    else
    {
      uint64_t v21 = 0;
      unsigned int v22 = (uint64_t *)v8[6];
      long long v23 = v14;
      int64_t v24 = v20;
      do
      {
        uint64_t v26 = *v23++;
        uint64_t v25 = v26;
        uint64_t v27 = *v22++;
        v21 += v27 * v25;
        --v24;
      }
      while (v24);
      uint64_t v28 = 0;
      double v29 = *(double *)(*(void *)v8[1] + 8 * (v8[9] + v21));
      uint64_t v30 = *(uint64_t **)(v7 + 48);
      uint64_t v31 = v14;
      int64_t v32 = v20;
      do
      {
        uint64_t v34 = *v31++;
        uint64_t v33 = v34;
        uint64_t v35 = *v30++;
        v28 += v35 * v33;
        --v32;
      }
      while (v32);
    }
    double v36 = *(double *)(v16 + 8 * (*(void *)(v7 + 72) + v28));
    if (v29 != v36) {
      break;
    }
    uint64_t v37 = v18;
    uint64_t v38 = v18 - 1;
    if (v17 >= 1)
    {
      uint64_t v39 = v8[3];
      unint64_t v40 = v14[v19] + 1;
      v14[v19] = v40;
      unint64_t v41 = (v17 & 0xFFFFFFFFFFFFFFF8) - 16;
      uint64_t v38 = v18 - 1;
      if (v40 >= *(void *)(v39 + 8 * v19))
      {
        while (1)
        {
          *(uint64_t *)((char *)v14 + v41 + ++*(void *)(result + 8) = 0;
          if (v38 <= 0) {
            break;
          }
          --v38;
          unint64_t v42 = *(uint64_t *)((char *)v14 + v41) + 1;
          *(uint64_t *)((char *)v14 + v41) = v42;
          unint64_t v43 = *(void *)(v39 + v41);
          v41 -= 8;
          if (v42 < v43)
          {
            uint64_t v37 = 1;
            goto LABEL_36;
          }
        }
        __p[1] = v14;
        operator delete(v14);
        return;
      }
      uint64_t v37 = 1;
      uint64_t v38 = v18 - 1;
    }
LABEL_36:
    ;
  }
  while ((v38 & 0x8000000000000000) == 0 && v37);
  if (v14)
  {
    __p[1] = v14;
    double v44 = v36;
    operator delete(v14);
    if (v29 == v44) {
      return;
    }
  }
  else if (v29 == v36)
  {
    return;
  }
LABEL_81:
  double v66 = 0.0;
  switch(*((unsigned char *)a2 + 12))
  {
    case 0:
      double v66 = (double)*(uint64_t *)a2;
      break;
    case 1:
      double v66 = *(double *)a2;
      break;
    case 2:
      double v68 = *(double *)a2;
      double v69 = (char **)(*(void *)a2 + 8);
      size_t __idx = 0;
      uint64_t v70 = (char *)v69;
      if (*(char *)(*(void *)&v68 + 31) < 0) {
        uint64_t v70 = *v69;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v70);
      double v71 = std::stod((const std::string *)__p, &__idx);
      if (SHIBYTE(v89[0]) < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(*(void *)&v68 + 31) < 0) {
        uint64_t v72 = *(void *)(*(void *)&v68 + 16);
      }
      else {
        uint64_t v72 = *(unsigned __int8 *)(*(void *)&v68 + 31);
      }
      if (__idx != v72)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        double v86 = std::string::append(&v92, " cannot be interpreted as a float");
        long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v89[0] = (void *)v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)__p);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      float v79 = v71;
      double v66 = v79;
      break;
    case 3:
      double v67 = *(double *)a2;
      __p[1] = 0;
      v89[0] = 0;
      __p[0] = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, *(const void **)(*(void *)&v67 + 8), *(void *)(*(void *)&v67 + 16), (uint64_t)(*(void *)(*(void *)&v67 + 16) - *(void *)(*(void *)&v67 + 8)) >> 3);
      turi::flexible_type_fail(0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      break;
    case 4:
      double v73 = *(double *)a2;
      __p[1] = 0;
      v89[0] = 0;
      __p[0] = 0;
      std::vector<turi::flexible_type>::__init_with_size[abi:ne180100]<turi::flexible_type*,turi::flexible_type*>(__p, *(uint64_t **)(*(void *)&v73 + 8), *(uint64_t **)(*(void *)&v73 + 16), (uint64_t)(*(void *)(*(void *)&v73 + 16) - *(void *)(*(void *)&v73 + 8)) >> 4);
      turi::flexible_type_fail(0);
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      break;
    case 5:
      double v74 = *(double *)a2;
      __p[1] = 0;
      v89[0] = 0;
      __p[0] = 0;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<turi::flexible_type,turi::flexible_type>*,std::pair<turi::flexible_type,turi::flexible_type>*>(__p, *(uint64_t **)(*(void *)&v74 + 8), *(uint64_t **)(*(void *)&v74 + 16), (uint64_t)(*(void *)(*(void *)&v74 + 16) - *(void *)(*(void *)&v74 + 8)) >> 5);
      turi::flexible_type_fail(0);
      v92.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
      break;
    case 6:
      double v66 = (double)*((int *)a2 + 2) / 1000000.0 + (double)((uint64_t)(*(void *)a2 << 8) >> 8);
      break;
    case 7:
      break;
    case 8:
      double v75 = *(double *)a2;
      long long v76 = *(atomic_uint **)(*(void *)a2 + 16);
      __p[0] = *(void **)(*(void *)a2 + 8);
      __p[1] = v76;
      if (v76) {
        atomic_fetch_add_explicit(v76 + 2, 1u, memory_order_relaxed);
      }
      long long v77 = *(_OWORD *)(*(void *)&v75 + 24);
      long long v78 = *(_OWORD *)(*(void *)&v75 + 56);
      long long v90 = *(_OWORD *)(*(void *)&v75 + 40);
      long long v91 = v78;
      *(_OWORD *)uint64_t v89 = v77;
      turi::flexible_type_fail(0);
      boost::detail::shared_count::~shared_count((atomic_uint **)&__p[1]);
      break;
    case 9:
      turi::flexible_type_impl::ndarray<double>::ndarray(__p, *(void *)a2 + 8);
      turi::flexible_type_fail(0);
      if (*((void *)&v90 + 1))
      {
        *(void *)&long long v91 = *((void *)&v90 + 1);
        operator delete(*((void **)&v90 + 1));
      }
      if (v89[0])
      {
        v89[1] = v89[0];
        operator delete(v89[0]);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      break;
    default:
      turi::flexible_type_internals::ft_converter<3>::set<turi::flexible_type>();
  }
  a3.n128_f64[0] = v66;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::add((uint64_t)this + 32, a3);
}

void sub_2240A155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v28 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void turi::groupby_operators::quantile::partial_finalize(turi::groupby_operators::quantile *this)
{
}

void turi::groupby_operators::quantile::combine(uint64_t a1, void *lpsrc)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  double v4 = v3;
  long long v7 = *((_OWORD *)v3 + 2);
  uint64_t v5 = v3[7];
  uint64_t v8 = v3[6];
  memset(v9, 0, sizeof(v9));
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>(v9, v5, v3[8], 0x2E8BA2E8BA2E8BA3 * ((v3[8] - v5) >> 3));
  long long v6 = *((_OWORD *)v4 + 6);
  long long v10 = *((_OWORD *)v4 + 5);
  long long v11 = v6;
  memset(v12, 0, sizeof(v12));
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(v12, v4[14], v4[15], 0xAAAAAAAAAAAAAAABLL * ((v4[15] - v4[14]) >> 3));
  std::string __p = 0;
  std::vector<char>::size_type v14 = 0;
  uint64_t v15 = 0;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(&__p, (const void *)v4[17], v4[18], 0xAAAAAAAAAAAAAAABLL * ((v4[18] - v4[17]) >> 3));
  char v16 = *((unsigned char *)v4 + 160);
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::combine(a1 + 32, (uint64_t)&v7);
  if (__p)
  {
    std::vector<char>::size_type v14 = __p;
    operator delete(__p);
  }
  int64_t v17 = v12;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
  int64_t v17 = (void **)v9;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void sub_2240A1860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void turi::groupby_operators::quantile::emit(turi::groupby_operators::quantile *this@<X0>, uint64_t a2@<X8>)
{
  double v4 = ceil(1.0 / (*((double *)this + 4) / 3.0) + 1.0 / (*((double *)this + 4) / 3.0)) + 1.0;
  if ((unint64_t)v4 <= 2) {
    unint64_t v5 = 2;
  }
  else {
    unint64_t v5 = (unint64_t)v4;
  }
  turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size((uint64_t)this + 80, (uint64_t *)this + 17, v5);
  *((void *)this + 12) = *((void *)this + 5);
  *((void *)this + 13) = *((void *)this + 4);
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 3;
  operator new();
}

void sub_2240A1F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  MEMORY[0x22A614FA0](v15, 0x1012C404EF22A49);
  switch(*((unsigned char *)v14 + 12))
  {
    case 2:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v17 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      if (*((char *)v17 + 31) < 0) {
        operator delete((void *)v17[1]);
      }
      unint64_t v18 = v17;
      uint64_t v19 = 0x1012C404EF22A49;
      goto LABEL_26;
    case 3:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v22 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      long long v23 = (void *)v22[1];
      if (v23)
      {
        v22[2] = (atomic_ullong)v23;
        operator delete(v23);
      }
      unint64_t v18 = v22;
      uint64_t v19 = 0x1080C409938AC02;
      goto LABEL_26;
    case 4:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = (void **)(v20 + 1);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a14);
      goto LABEL_21;
    case 5:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v20 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      a14 = (void **)(v20 + 1);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a14);
LABEL_21:
      unint64_t v18 = v20;
      uint64_t v19 = 0x1020C405E66F15BLL;
      goto LABEL_26;
    case 8:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      atomic_ullong *volatile v24 = *v14;
      if (!*v14) {
        goto LABEL_27;
      }
      boost::detail::shared_count::~shared_count((atomic_uint **)v24 + 2);
      unint64_t v18 = v24;
      unsigned int v21 = -235920773;
      goto LABEL_25;
    case 9:
      if (atomic_fetch_add(*v14, 0xFFFFFFFFFFFFFFFFLL) != 1) {
        goto LABEL_28;
      }
      if (!*v14) {
        goto LABEL_27;
      }
      unint64_t v18 = std::pair<turi::atomic<unsigned long>,turi::flexible_type_impl::ndarray<double>>::~pair(*(void **)v14);
      unsigned int v21 = 2071181815;
LABEL_25:
      uint64_t v19 = v21 | 0x1030C4000000000;
LABEL_26:
      MEMORY[0x22A614FA0](v18, v19);
LABEL_27:
      atomic_ullong *volatile *v14 = 0;
LABEL_28:
      atomic_ullong *volatile *v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      *((unsigned char *)v14 + 12) = 0;
      _Unwind_Resume(a1);
      return;
    default:
      goto LABEL_28;
  }
}

void *turi::groupby_operators::quantile::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Quantiles");
}

void *turi::groupby_operators::quantile::save(const void **this, turi::oarchive *a2)
{
  turi::archive_detail::vector_serialize_impl<turi::oarchive,double,true>::exec((uint64_t)a2, this + 1);
  return turi::sketches::streaming_quantile_sketch<double,std::less<double>>::save(this + 4, (uint64_t)a2);
}

void *turi::groupby_operators::quantile::load(turi::groupby_operators::quantile *this, turi::iarchive *a2)
{
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,double,true>::exec((uint64_t)a2, (void *)this + 1);
  return turi::sketches::streaming_quantile_sketch<double,std::less<double>>::load((void *)this + 4, (uint64_t)a2);
}

void turi::groupby_operators::quantile::~quantile(turi::groupby_operators::quantile *this)
{
  *(void *)this = &unk_26D76BAC0;
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 1++*(void *)(result + 8) = v2;
    operator delete(v2);
  }
  double v4 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  double v4 = (void **)((char *)this + 56);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  char v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_26D76BAC0;
  uint64_t v2 = (void *)*((void *)this + 17);
  if (v2)
  {
    *((void *)this + 1++*(void *)(result + 8) = v2;
    operator delete(v2);
  }
  double v4 = (void **)((char *)this + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  double v4 = (void **)((char *)this + 56);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  char v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  MEMORY[0x22A614FA0](this, 0x10A1C40473C5AE8);
}

uint64_t turi::sketches::streaming_quantile_sketch<double,std::less<double>>::streaming_quantile_sketch(uint64_t a1, double a2)
{
  *(void *)a1 = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + ++*(void *)(result + 8) = xmmword_2246CD910;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  turi::sketches::streaming_quantile_sketch<double,std::less<double>>::init(a1, a2);
  return a1;
}

void sub_2240A23CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  turi::sketches::quantile_sketch<double,std::less<double>>::~quantile_sketch(v10 + 48);
  a10 = v12;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void turi::sketches::streaming_quantile_sketch<double,std::less<double>>::init(uint64_t a1, double a2)
{
  *(double *)a1 = a2;
  *(void *)(a1 + ++*(void *)(result + 8) = 0;
  char v3 = (uint64_t *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)(a1 + 32);
        i != v4;
        std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 88;
  }
  *(void *)(a1 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = v4;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::resize(v3, 1uLL);
  double v6 = *(double *)a1;
  double v7 = 1.0 / *(double *)a1;
  if ((unint64_t)v7 <= 1) {
    unint64_t v8 = 1;
  }
  else {
    unint64_t v8 = (unint64_t)v7;
  }
  *(void *)(a1 + 16) = v8;
  turi::sketches::quantile_sketch<double,std::less<double>>::init(*(void *)(a1 + 24), v8, v6 / 3.0);
  unint64_t v9 = *(void *)(a1 + 16);
  double v10 = *(double *)a1;
  turi::sketches::quantile_sketch<double,std::less<double>>::init(a1 + 48, v9, v10);
}

uint64_t turi::sketches::quantile_sketch<double,std::less<double>>::~quantile_sketch(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 88 * a2;
    while (v3 != v7)
    {
      v3 -= 88;
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void turi::sketches::quantile_sketch<double,std::less<double>>::init(uint64_t a1, unint64_t a2, double a3)
{
  unint64_t v6 = (unint64_t)((double)a2 * a3);
  *(void *)a1 = a2;
  if (!v6) {
    unint64_t v6 = 2;
  }
  double v7 = floor(log2((double)v6) / a3);
  unint64_t v8 = (unint64_t)(v7 + v7);
  *(double *)(a1 + 24) = a3;
  if (!v8) {
    unint64_t v8 = a2;
  }
  *(void *)(a1 + ++*(void *)(result + 8) = v8;
  *(void *)(a1 + 16) = 0;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 32));
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::resize((uint64_t *)(a1 + 32), 1uLL);
  *(void *)(a1 + 64) = *(void *)(a1 + 56);
}

void std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void **)(a2 + 32);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void **std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = (uint64_t)*(result - 1);
  if (0x2E8BA2E8BA2E8BA3 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 88 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + ++*(void *)(result + 8) = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0x3F847AE147AE147BLL;
        *(_OWORD *)(v7 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = 0uLL;
        *(_OWORD *)(v7 + 4++*(void *)(result + 8) = 0uLL;
        *(_OWORD *)(v7 + 64) = 0uLL;
        v7 += 88;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>>((uint64_t)result, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    std::vector<char>::size_type v14 = &v12[88 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[88 * v11];
    uint64_t v15 = &v14[88 * a2];
    do
    {
      *(void *)std::vector<char>::size_type v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *((void *)v14 + 3) = 0x3F847AE147AE147BLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *((_OWORD *)v14 + 3) = 0uLL;
      *((_OWORD *)v14 + 4) = 0uLL;
      v14 += 88;
    }
    while (v14 != v15);
    unint64_t v16[2] = v15;
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer(v16);
  }
  return result;
}

void sub_2240A2810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 88);
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(_OWORD *)(v7 - 8++*(void *)(result + 8) = v8;
      *(void *)(v7 - 4++*(void *)(result + 8) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 4++*(void *)(result + 8) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(v7 - turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(void *)(a3 - turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = 0;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(unsigned char *)(v7 - ++*(void *)(result + 8) = *(unsigned char *)(a3 - 8);
      uint64_t v7 = *((void *)&v14 + 1) - 88;
      *((void *)&v14 + 1) -= 88;
      a3 -= 88;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,std::reverse_iterator<turi::sketches::quantile_sketch<double,std::less<double>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](v4, i - 88);
  }
}

void std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        unint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        uint64_t v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      char v12 = 0;
    }
    uint64_t v15 = v12;
    char v16 = &v12[24 * v8];
    unint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    atomic_ullong *volatile v17 = &v16[v14];
    std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_2240A2CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - ++*(void *)(result + 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - ++*(void *)(result + 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::reverse_iterator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void turi::sketches::streaming_quantile_sketch<double,std::less<double>>::add(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - v6) >> 3);
  if (*(void *)(v6 + 88 * (v7 - 1) + 16) >= (unint64_t)(*(v4 - 1) << (v7 - 1)))
  {
    long long v11 = 0uLL;
    *(void *)&long long v12 = 0;
    *((void *)&v12 + 1) = 0x3F847AE147AE147BLL;
    long long v13 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v15 = 0u;
    if (v5 >= *(void *)(a1 + 40))
    {
      uint64_t v9 = std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__push_back_slow_path<turi::sketches::quantile_sketch<double,std::less<double>>>(v4, (uint64_t)&v11);
      unint64_t v10 = __p[1];
      *(void *)(a1 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = v9;
      if (v10)
      {
        *(void *)&long long v15 = v10;
        operator delete(v10);
      }
    }
    else
    {
      long long v8 = v12;
      *(_OWORD *)unint64_t v5 = v11;
      *(_OWORD *)(v5 + 16) = v8;
      *(void *)(v5 + 4++*(void *)(result + 8) = 0;
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = 0;
      *(void *)(v5 + 40) = 0;
      long long v13 = 0uLL;
      __p[0] = 0;
      *(void *)(v5 + 64) = 0;
      *(void *)(v5 + 72) = 0;
      long long v15 = 0uLL;
      __p[1] = 0;
      *(void *)(a1 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = v5 + 88;
    }
    char v16 = (void **)&v13;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v16);
    turi::sketches::quantile_sketch<double,std::less<double>>::init(*(void *)(a1 + 24) + 88 * v7, *(void *)(a1 + 16) << v7, *(double *)a1 / 3.0);
    uint64_t v6 = *(void *)(a1 + 24);
  }
  else
  {
    --v7;
  }
  a2.n128_u64[0] = v2;
  turi::sketches::quantile_sketch<double,std::less<double>>::add(v6 + 88 * v7, a2);
  ++*(void *)(a1 + 8);
}

void sub_2240A302C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void turi::sketches::quantile_sketch<double,std::less<double>>::add(uint64_t a1, __n128 a2)
{
  unint64_t v2 = a2.n128_u64[0];
  uint64_t v4 = *(void ***)(a1 + 32);
  unint64_t v5 = v4[1];
  unint64_t v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (unsigned char *)*v4) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*v4) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)(v4 + 2), v11);
    }
    else {
      long long v12 = 0;
    }
    long long v13 = (unint64_t *)&v12[24 * v8];
    long long v14 = &v12[24 * v11];
    *long long v13 = v2;
    v13[1] = -1;
    void v13[2] = -1;
    uint64_t v7 = v13 + 3;
    char v16 = (char *)*v4;
    long long v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        a2 = *(__n128 *)(v15 - 24);
        *(v13 - 1) = *((void *)v15 - 1);
        *(__n128 *)(v13 - 3) = a2;
        v13 -= 3;
        v15 -= 24;
      }
      while (v15 != v16);
      long long v15 = (char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    void *v5 = a2.n128_u64[0];
    v5[1] = -1;
    v5[2] = -1;
    uint64_t v7 = v5 + 3;
  }
  v4[1] = v7;
  uint64_t v17 = *(void *)(a1 + 8);
  ++*(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*(void *)(a1 + 32) + 8) - **(void **)(a1 + 32)) >> 3) == v17)
  {
    turi::sketches::quantile_sketch<double,std::less<double>>::sort_level_0(a1, a2);
    double v18 = 1.0 / (1.0 / (double)*(unint64_t *)(a1 + 8));
    double v19 = ceil(v18 + v18) + 1.0;
    if ((unint64_t)v19 <= 2) {
      unint64_t v20 = 2;
    }
    else {
      unint64_t v20 = (unint64_t)v19;
    }
    turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size(a1, *(uint64_t **)(a1 + 32), v20);
    uint64_t v21 = *(void *)(a1 + 32);
    *(_OWORD *)std::string __p = *(_OWORD *)v21;
    uint64_t v23 = *(void *)(v21 + 16);
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + ++*(void *)(result + 8) = 0;
    *(void *)(v21 + 16) = 0;
    *(void *)(*(void *)(a1 + 32) + ++*(void *)(result + 8) = **(void **)(a1 + 32);
    turi::sketches::quantile_sketch<double,std::less<double>>::compact((unint64_t *)a1, (__n128 *)__p, 1uLL);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_2240A3234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__push_back_slow_path<turi::sketches::quantile_sketch<double,std::less<double>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>>(v7, v9);
  unint64_t v11 = &v10[88 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[88 * v12];
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4++*(void *)(result + 8) = 0;
  *((void *)v11 + ++*(void *)(result + 8) = 0;
  *((void *)v11 + 9) = 0;
  *((void *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  v11[80] = *(unsigned char *)(a2 + 80);
  unint64_t v16[2] = v11 + 88;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer(v16);
  return v14;
}

void sub_2240A3390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<turi::sketches::quantile_sketch<double,std::less<double>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

int64x2_t turi::sketches::quantile_sketch<double,std::less<double>>::sort_level_0(uint64_t a1, __n128 a2)
{
  uint64_t v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  unint64_t v5 = (__n128 *)v3[1];
  unint64_t v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *v3) >> 3));
  char v15 = *(unsigned char *)(a1 + 80);
  if (v5 == (__n128 *)v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,false>(v4, v5, (uint64_t)&v15, v7, 1, a2);
  unint64_t v9 = *(uint64_t **)(a1 + 32);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1] - *v9;
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = v11 / 24;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    uint64_t v14 = (int64x2_t *)(v10 + 8);
    do
    {
      int64x2_t result = vdupq_n_s64(++v12);
      int64x2_t *v14 = result;
      uint64_t v14 = (int64x2_t *)((char *)v14 + 24);
    }
    while (v13 != v12);
  }
  return result;
}

void turi::sketches::quantile_sketch<double,std::less<double>>::compact(unint64_t *a1, __n128 *__c, unint64_t a3)
{
  unint64_t v5 = a1[4];
  unint64_t v7 = a1[5];
  unint64_t v6 = (uint64_t *)(a1 + 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v5) >> 3) <= a3)
  {
LABEL_10:
    if (v7 >= a1[6])
    {
      uint64_t v15 = std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__push_back_slow_path<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> const&>(v6, (uint64_t)__c);
    }
    else
    {
      std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> const&>((uint64_t)v6, (uint64_t)__c);
      uint64_t v15 = v7 + 24;
    }
    a1[5] = v15;
  }
  else
  {
    unint64_t v8 = a3;
    uint64_t v9 = 24 * a3;
    while (1)
    {
      uint64_t v10 = (double **)(v5 + v9);
      if (*(void *)(v5 + v9 + 8) == *(void *)(v5 + v9)) {
        break;
      }
      turi::sketches::quantile_sketch<double,std::less<double>>::merge((uint64_t)__c, v10, &v16);
      uint64_t v11 = (int *)__c->n128_u64[0];
      if (__c->n128_u64[0])
      {
        __c->n128_u64[1] = (unint64_t)v11;
        operator delete(v11);
      }
      *__c = v16;
      __c[1].n128_u64[0] = (unint64_t)v17;
      double v12 = 1.0 / (1.0 / (double)a1[1]);
      double v13 = ceil(v12 + v12) + 1.0;
      if ((unint64_t)v13 <= 2) {
        unint64_t v14 = 2;
      }
      else {
        unint64_t v14 = (unint64_t)v13;
      }
      turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size((uint64_t)a1, (uint64_t *)__c, v14);
      unint64_t v5 = a1[4];
      *(void *)(v5 + v9 + ++*(void *)(result + 8) = *(void *)(v5 + v9);
      ++v8;
      unint64_t v7 = a1[5];
      v9 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v5) >> 3)) {
        goto LABEL_10;
      }
    }
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)v10, __c);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,false>(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5, __n128 a6)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        double v6 = *(double *)(v4 + 24);
        if (v6 < *(double *)v4)
        {
          long long v10 = *(_OWORD *)(v4 + 32);
          uint64_t v7 = v3;
          while (1)
          {
            uint64_t v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(void *)(v8 + 40) = *(void *)(result + v7 + 16);
            if (!v7) {
              break;
            }
            v7 -= 24;
            if (v6 >= *(double *)(v8 - 24))
            {
              uint64_t v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v9 = result;
LABEL_10:
          *(double *)uint64_t v9 = v6;
          *(_OWORD *)(v9 + ++*(void *)(result + 8) = v10;
        }
        uint64_t v2 = v5 + 24;
        v3 += 24;
        uint64_t v4 = v5;
      }
      while (v5 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(long long *a1, long long *a2, long long *a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)a3;
  if (*(double *)a2 < *(double *)a1)
  {
    if (v4 < v3)
    {
      uint64_t v5 = *((void *)a1 + 2);
      long long v6 = *a1;
      uint64_t v7 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v7;
      *a3 = v6;
      *((void *)a3 + 2) = v5;
      return 1;
    }
    uint64_t v14 = *((void *)a1 + 2);
    long long v15 = *a1;
    uint64_t v16 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v16;
    *a2 = v15;
    *((void *)a2 + 2) = v14;
    if (*(double *)a3 >= *(double *)a2) {
      return 1;
    }
    uint64_t v17 = *((void *)a2 + 2);
    long long v18 = *a2;
    uint64_t v19 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v19;
    *a3 = v18;
    *((void *)a3 + 2) = v17;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v8 = *((void *)a2 + 2);
    long long v9 = *a2;
    uint64_t v10 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v10;
    *a3 = v9;
    *((void *)a3 + 2) = v8;
    if (*(double *)a2 >= *(double *)a1) {
      return 1;
    }
    uint64_t v11 = *((void *)a1 + 2);
    long long v12 = *a1;
    uint64_t v13 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v13;
    *a2 = v12;
    *((void *)a2 + 2) = v11;
    return 2;
  }
  return 0;
}

double *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &>(double *a1, double *a2)
{
  double v2 = *a1;
  if (*a1 >= *(a2 - 3))
  {
    uint64_t v5 = (long long *)(a1 + 3);
    do
    {
      double v3 = (double *)v5;
      if (v5 >= (long long *)a2) {
        break;
      }
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v2 >= *v3);
  }
  else
  {
    double v3 = a1;
    do
    {
      double v4 = v3[3];
      v3 += 3;
    }
    while (v2 >= v4);
  }
  if (v3 < a2)
  {
    do
    {
      double v6 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v6);
  }
  while (v3 < a2)
  {
    uint64_t v14 = *((void *)v3 + 2);
    long long v13 = *(_OWORD *)v3;
    long long v7 = *(_OWORD *)a2;
    v3[2] = a2[2];
    *(_OWORD *)double v3 = v7;
    *((void *)a2 + 2) = v14;
    *(_OWORD *)a2 = v13;
    do
    {
      double v8 = v3[3];
      v3 += 3;
    }
    while (v2 >= v8);
    do
    {
      double v9 = *(a2 - 3);
      a2 -= 3;
    }
    while (v2 < v9);
  }
  if (v3 - 3 != a1)
  {
    long long v10 = *(_OWORD *)(v3 - 3);
    a1[2] = *(v3 - 1);
    *(_OWORD *)a1 = v10;
  }
  *(v3 - 3) = v2;
  *((_OWORD *)v3 - 1) = v12;
  return v3;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  double v3 = *(double *)a1;
  do
  {
    double v4 = *(double *)(a1 + v2 + 24);
    v2 += 24;
  }
  while (v4 < v3);
  unint64_t v5 = a1 + v2;
  if (v2 == 24)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      double v7 = *(double *)(a2 - 24);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
  else
  {
    do
    {
      double v6 = *(double *)(a2 - 24);
      a2 -= 24;
    }
    while (v6 >= v3);
  }
  double v8 = (long long *)(a1 + v2);
  if (v5 < a2)
  {
    unint64_t v9 = a2;
    do
    {
      long long v10 = *v8;
      uint64_t v11 = *((void *)v8 + 2);
      uint64_t v12 = *(void *)(v9 + 16);
      *double v8 = *(_OWORD *)v9;
      *((void *)v8 + 2) = v12;
      *(void *)(v9 + 16) = v11;
      *(_OWORD *)unint64_t v9 = v10;
      do
      {
        double v13 = *((double *)v8 + 3);
        double v8 = (long long *)((char *)v8 + 24);
      }
      while (v13 < v3);
      do
      {
        double v14 = *(double *)(v9 - 24);
        v9 -= 24;
      }
      while (v14 >= v3);
    }
    while ((unint64_t)v8 < v9);
  }
  if ((long long *)((char *)v8 - 24) != (long long *)a1)
  {
    long long v15 = *(long long *)((char *)v8 - 24);
    *(void *)(a1 + 16) = *((void *)v8 - 1);
    *(_OWORD *)a1 = v15;
  }
  *((double *)v8 - 3) = v3;
  *(v8 - 1) = v17;
  return (uint64_t)v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      double v6 = (long long *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        uint64_t v9 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(void *)(a1 + 16) = v9;
        *double v6 = v8;
        *(void *)(a2 - ++*(void *)(result + 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (unint64_t *)(a1 + 72), (unint64_t *)(a2 - 24));
      return 1;
    default:
      long long v10 = (double *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48));
      uint64_t v11 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    double v14 = *(double *)v11;
    if (*(double *)v11 < *v10)
    {
      long long v18 = *(_OWORD *)(v11 + 8);
      uint64_t v15 = v12;
      while (1)
      {
        uint64_t v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(void *)(v16 + 8++*(void *)(result + 8) = *(void *)(a1 + v15 + 64);
        if (v15 == -48) {
          break;
        }
        v15 -= 24;
        if (v14 >= *(double *)(v16 + 24))
        {
          uint64_t v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(double *)uint64_t v17 = v14;
      *(_OWORD *)(v17 + ++*(void *)(result + 8) = v18;
      if (++v13 == 8) {
        return v11 + 24 == a2;
      }
    }
    long long v10 = (double *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((long long *)a1, (long long *)a2, (long long *)a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    unint64_t v9 = *(void *)(a3 + 16);
    __n128 result = *(__n128 *)a3;
    unint64_t v10 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    a4[2] = v9;
    result.n128_u64[0] = *(void *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      uint64_t v11 = *(void *)(a2 + 16);
      __n128 result = *(__n128 *)a2;
      uint64_t v12 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(void *)(a3 + 16) = v11;
      result.n128_u64[0] = *(void *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        uint64_t v13 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v14 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(__n128 *a1, __n128 *a2, __n128 *a3, unint64_t *a4, unint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, a4);
  result.n128_u64[0] = *a5;
  if (*(double *)a5 < *(double *)a4)
  {
    unint64_t v11 = a4[2];
    __n128 result = *(__n128 *)a4;
    unint64_t v12 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v12;
    *(__n128 *)a5 = result;
    a5[2] = v11;
    result.n128_u64[0] = *a4;
    if (*(double *)a4 < a3->n128_f64[0])
    {
      unint64_t v13 = a3[1].n128_u64[0];
      __n128 result = *a3;
      unint64_t v14 = a4[2];
      *a3 = *(__n128 *)a4;
      a3[1].n128_u64[0] = v14;
      *(__n128 *)a4 = result;
      a4[2] = v13;
      result.n128_u64[0] = a3->n128_u64[0];
      if (a3->n128_f64[0] < a2->n128_f64[0])
      {
        unint64_t v15 = a2[1].n128_u64[0];
        __n128 result = *a2;
        unint64_t v16 = a3[1].n128_u64[0];
        *a2 = *a3;
        a2[1].n128_u64[0] = v16;
        *a3 = result;
        a3[1].n128_u64[0] = v15;
        result.n128_u64[0] = a2->n128_u64[0];
        if (a2->n128_f64[0] < a1->n128_f64[0])
        {
          unint64_t v17 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v18 = a2[1].n128_u64[0];
          *a1 = *a2;
          a1[1].n128_u64[0] = v18;
          *a2 = result;
          a2[1].n128_u64[0] = v17;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, __n128 *a2, __n128 *a3, uint64_t a4, __n128 a5)
{
  if ((__n128 *)a1 != a2)
  {
    uint64_t v7 = a2;
    uint64_t v9 = (uint64_t)a2 - a1;
    uint64_t v10 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      unint64_t v13 = (long long *)(a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, a5, a4, v10, v13);
        unint64_t v13 = (long long *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    unint64_t v14 = v7;
    if (v7 != a3)
    {
      unint64_t v15 = v7;
      do
      {
        if (v15->n128_f64[0] < *(double *)a1)
        {
          unint64_t v16 = v15[1].n128_u64[0];
          __n128 v17 = *v15;
          unint64_t v18 = *(void *)(a1 + 16);
          *unint64_t v15 = *(__n128 *)a1;
          v15[1].n128_u64[0] = v18;
          *(__n128 *)a1 = v17;
          *(void *)(a1 + 16) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, v17, a4, v10, (long long *)a1);
        }
        unint64_t v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      unint64_t v14 = a3;
    }
    if (v9 >= 25)
    {
      int64_t v19 = v9 / 0x18uLL;
      do
      {
        uint64_t v20 = 0;
        __n128 v29 = *(__n128 *)a1;
        unint64_t v30 = *(void *)(a1 + 16);
        uint64_t v21 = a1;
        do
        {
          uint64_t v22 = v21;
          v21 += 24 * v20 + 24;
          uint64_t v23 = 2 * v20;
          uint64_t v20 = (2 * v20) | 1;
          int64_t v24 = v23 + 2;
          if (v24 < v19 && *(double *)v21 < *(double *)(v21 + 24))
          {
            v21 += 24;
            uint64_t v20 = v24;
          }
          long long v25 = *(_OWORD *)v21;
          *(void *)(v22 + 16) = *(void *)(v21 + 16);
          *(_OWORD *)uint64_t v22 = v25;
        }
        while (v20 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        uint64_t v7 = (__n128 *)((char *)v7 - 24);
        if ((__n128 *)v21 == v7)
        {
          *(void *)(v21 + 16) = v30;
          *(__n128 *)uint64_t v21 = v29;
        }
        else
        {
          __n128 v26 = *v7;
          *(void *)(v21 + 16) = v7[1].n128_u64[0];
          *(__n128 *)uint64_t v21 = v26;
          __n128 *v7 = v29;
          v7[1].n128_u64[0] = v30;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(a1, v21 + 24, v29, a4, 0xAAAAAAAAAAAAAAABLL * ((v21 + 24 - a1) >> 3));
        }
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, long long *a5)
{
  if (a4 >= 2)
  {
    int64_t v5 = (unint64_t)(a4 - 2) >> 1;
    if (v5 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a5 - a1) >> 3)))
    {
      uint64_t v6 = (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3)) | 1;
      uint64_t v7 = (long long *)(a1 + 24 * v6);
      if (0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2 < a4 && *(double *)v7 < *((double *)v7 + 3))
      {
        uint64_t v7 = (long long *)((char *)v7 + 24);
        uint64_t v6 = 0x5555555555555556 * (((uint64_t)a5 - a1) >> 3) + 2;
      }
      result.n128_u64[0] = *(void *)a5;
      if (*(double *)v7 >= *(double *)a5)
      {
        __n128 v12 = *(__n128 *)((char *)a5 + 8);
        do
        {
          long long v8 = a5;
          a5 = v7;
          long long v9 = *v7;
          *((void *)v8 + 2) = *((void *)v7 + 2);
          *long long v8 = v9;
          if (v5 < v6) {
            break;
          }
          uint64_t v10 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (long long *)(a1 + 24 * v6);
          uint64_t v11 = v10 + 2;
          if (v11 < a4 && *(double *)v7 < *((double *)v7 + 3))
          {
            uint64_t v7 = (long long *)((char *)v7 + 24);
            uint64_t v6 = v11;
          }
        }
        while (*(double *)v7 >= result.n128_f64[0]);
        *(void *)a5 = result.n128_u64[0];
        __n128 result = v12;
        *(long long *)((char *)a5 + ++*(void *)(result + 8) = (__int128)v12;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element_less_than &,turi::sketches::quantile_sketch<double,std::less<double>>::element *>(uint64_t a1, uint64_t a2, __n128 result, uint64_t a4, uint64_t a5)
{
  if (a5 >= 2)
  {
    unint64_t v5 = (unint64_t)(a5 - 2) >> 1;
    uint64_t v6 = (long long *)(a1 + 24 * v5);
    uint64_t v7 = (long long *)(a2 - 24);
    result.n128_u64[0] = *(void *)(a2 - 24);
    if (*(double *)v6 < result.n128_f64[0])
    {
      __n128 v10 = *(__n128 *)(a2 - 16);
      do
      {
        long long v8 = v7;
        uint64_t v7 = v6;
        long long v9 = *v6;
        *((void *)v8 + 2) = *((void *)v6 + 2);
        *long long v8 = v9;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (long long *)(a1 + 24 * v5);
      }
      while (*(double *)v6 < result.n128_f64[0]);
      *(void *)uint64_t v7 = result.n128_u64[0];
      __n128 result = v10;
      *(long long *)((char *)v7 + ++*(void *)(result + 8) = (__int128)v10;
    }
  }
  return result;
}

__n128 turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (v4 > a3)
  {
    unint64_t v5 = a3 - 1;
    if (a3 != 1)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        unint64_t v8 = (unint64_t)((double)v4 / (double)a3 * (double)v7);
        uint64_t v9 = *a2;
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
        if (v10 <= v8) {
          unint64_t v8 = v10 - 1;
        }
        uint64_t v11 = (long long *)(v9 + 24 * v8);
        uint64_t v12 = v9 + v6;
        long long v13 = *v11;
        *(void *)(v12 + 16) = *((void *)v11 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        ++v7;
        v6 += 24;
      }
      while (v5 != v7);
      uint64_t v3 = *a2;
      unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
    }
    uint64_t v14 = v3 + 24 * v4;
    long long v15 = *(_OWORD *)(v14 - 24);
    uint64_t v16 = v3 + 24 * v5;
    *(void *)(v16 + 16) = *(void *)(v14 - 8);
    *(_OWORD *)uint64_t v16 = v15;
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::resize((uint64_t)a2, a3);
  }
  return result;
}

void std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + ++*(void *)(result + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-v7] >> 3) >= a2)
  {
    if (a2)
    {
      long long v13 = (void *)(v7 + 24 * a2);
      uint64_t v14 = 24 * a2;
      long long v15 = (void *)(v7 + 8);
      do
      {
        *long long v15 = -1;
        v15[1] = -1;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      long long v13 = *(void **)(v4 - 8);
    }
    a1[1] = v13;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v16 = &v12[24 * v8];
    __n128 v17 = &v16[24 * a2];
    uint64_t v18 = 24 * a2;
    int64_t v19 = v16 + 8;
    do
    {
      void *v19 = -1;
      v19[1] = -1;
      v19 += 3;
      v18 -= 24;
    }
    while (v18);
    uint64_t v20 = &v12[24 * v11];
    uint64_t v22 = (char *)*a1;
    uint64_t v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *(_OWORD *)(v21 - 24);
        *((void *)v16 - 1) = *((void *)v21 - 1);
        *(_OWORD *)(v16 - 24) = v23;
        v16 -= 24;
        v21 -= 24;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

double turi::sketches::quantile_sketch<double,std::less<double>>::merge@<D0>(uint64_t a1@<X1>, double **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = *(double **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  if ((double *)v7 == v6)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)a2[1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a2) >> 3);
  }
  else
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v6) >> 3);
    uint64_t v10 = (char *)a2[1] - (char *)*a2;
    if (v10)
    {
      unint64_t v11 = std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::vector(a3, v9 - 0x5555555555555555 * (v10 >> 3));
      long long v13 = *(double **)a1;
      uint64_t v14 = *(void *)(a1 + 8);
      if (v14 == *(void *)a1)
      {
        unint64_t v17 = 0;
        unint64_t v18 = 0;
        uint64_t v20 = 0;
        long long v13 = *(double **)(a1 + 8);
      }
      else
      {
        long long v15 = *a2;
        if (a2[1] == *a2)
        {
          unint64_t v17 = 0;
          unint64_t v18 = 0;
          uint64_t v20 = 0;
        }
        else
        {
          uint64_t v16 = 0;
          unint64_t v17 = 0;
          unint64_t v18 = 0;
          uint64_t v19 = 1;
          do
          {
            uint64_t v20 = v19;
            double result = v13[3 * v17];
            double v21 = v15[3 * v18];
            if (result <= v21)
            {
              if (v18) {
                double v23 = v15[3 * v18 - 2];
              }
              else {
                double v23 = 0.0;
              }
              uint64_t v30 = *(void *)&v23 + *(void *)&v13[3 * v17 + 1];
              double v31 = v13[3 * v17 + 2];
              double v32 = v15[3 * v18 + 2];
              BOOL v27 = *(void *)&v32 != 0;
              uint64_t v33 = *(void *)&v32 - 1;
              if (!v27) {
                uint64_t v33 = 0;
              }
              uint64_t v34 = *v11 + v16;
              *(double *)uint64_t v34 = result;
              *(void *)(v34 + ++*(void *)(result + 8) = v30;
              *(void *)(v34 + 16) = v33 + *(void *)&v31;
              ++v17;
            }
            else
            {
              if (v17) {
                double v22 = v13[3 * v17 - 2];
              }
              else {
                double v22 = 0.0;
              }
              uint64_t v24 = *(void *)&v22 + *(void *)&v15[3 * v18 + 1];
              double v25 = v15[3 * v18 + 2];
              double v26 = v13[3 * v17 + 2];
              BOOL v27 = *(void *)&v26 != 0;
              uint64_t v28 = *(void *)&v26 - 1;
              if (!v27) {
                uint64_t v28 = 0;
              }
              uint64_t v29 = *v11 + v16;
              *(double *)uint64_t v29 = v21;
              *(void *)(v29 + ++*(void *)(result + 8) = v24;
              *(void *)(v29 + 16) = v28 + *(void *)&v25;
              ++v18;
            }
            long long v13 = *(double **)a1;
            uint64_t v14 = *(void *)(a1 + 8);
            if (v17 >= 0xAAAAAAAAAAAAAAABLL * ((v14 - *(void *)a1) >> 3)) {
              break;
            }
            long long v15 = *a2;
            v16 += 24;
            uint64_t v19 = v20 + 1;
          }
          while (v18 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
        }
      }
      if (v17 < 0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v13) >> 3))
      {
        uint64_t v35 = 24 * v20;
        uint64_t v36 = 3 * v17;
        do
        {
          uint64_t v37 = &v13[v36];
          double result = *v37;
          uint64_t v38 = *v11 + v35;
          int64x2_t v39 = vaddq_s64(*(int64x2_t *)&(*a2)[3 * v18 - 2], *(int64x2_t *)(v37 + 1));
          *(double *)uint64_t v38 = *v37;
          *(int64x2_t *)(v38 + ++*(void *)(result + 8) = v39;
          ++v17;
          ++v20;
          long long v13 = *(double **)a1;
          v35 += 24;
          v36 += 3;
        }
        while (v17 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
      }
      unint64_t v40 = *a2;
      if (v18 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2))
      {
        unint64_t v41 = v17 - 1;
        uint64_t v42 = 24 * v20;
        uint64_t v43 = 3 * v18;
        do
        {
          double v44 = (char *)&v40[v43];
          double result = *(double *)v44;
          uint64_t v45 = *v11 + v42;
          int64x2_t v46 = vaddq_s64(*(int64x2_t *)(*(void *)a1 + 24 * v41 + 8), *(int64x2_t *)(v44 + 8));
          *(void *)uint64_t v45 = *(void *)v44;
          *(int64x2_t *)(v45 + ++*(void *)(result + 8) = v46;
          ++v18;
          unint64_t v40 = *a2;
          v42 += 24;
          v43 += 3;
        }
        while (v18 < 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
      }
      return result;
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(a3, v6, v7, v9);
  return result;
}

void *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2240A4AF4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 24 * a2;
    uint64_t v6 = 24 * a2;
    uint64_t v7 = (void *)(v4 + 8);
    do
    {
      void *v7 = -1;
      v7[1] = -1;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2240A4B74(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + ++*(void *)(result + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__construct_one_at_end[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> const&>(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  double result = std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v3, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + ++*(void *)(result + 8) = v3 + 3;
  return result;
}

void sub_2240A4BE8(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(result + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__push_back_slow_path<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v11, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  v15 += 24;
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_2240A4D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  turi::sketches::quantile_sketch<double,std::less<double>>::init(a1 + 48, *(void *)(a1 + 8), *(double *)a1 / 3.0);
  turi::sketches::quantile_sketch<double,std::less<double>>::finalize(v2, v3);
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) != v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      turi::sketches::quantile_sketch<double,std::less<double>>::finalize(v5 + v6, v4);
      ++v7;
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v8 = *(void *)(a1 + 32);
      v6 += 88;
    }
    while (v7 < 0x2E8BA2E8BA2E8BA3 * ((v8 - v5) >> 3));
    if (v8 != v5)
    {
      unint64_t v9 = 0;
      uint64_t v10 = (void **)(a1 + 104);
      uint64_t v11 = 56;
      do
      {
        turi::sketches::quantile_sketch<double,std::less<double>>::merge(a1 + 104, (double **)(v5 + v11), &v17);
        uint64_t v12 = *v10;
        if (*v10)
        {
          *(void *)(a1 + 112) = v12;
          operator delete(v12);
        }
        *(_OWORD *)(a1 + 104) = v17;
        *(void *)(a1 + 120) = v18;
        ++v9;
        uint64_t v5 = *(void *)(a1 + 24);
        v11 += 88;
      }
      while (v9 < 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 32) - v5) >> 3));
    }
  }
  double v13 = ceil(1.0 / (*(double *)a1 / 3.0) + 1.0 / (*(double *)a1 / 3.0)) + 1.0;
  if ((unint64_t)v13 <= 2) {
    unint64_t v14 = 2;
  }
  else {
    unint64_t v14 = (unint64_t)v13;
  }
  turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size(v2, (uint64_t *)(a1 + 104), v14);
  *(void *)(a1 + 64) = *(void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)(a1 + 32);
        i != v16;
        std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](a1 + 40, i))
  {
    i -= 88;
  }
  *(void *)(a1 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = v16;
}

void turi::sketches::quantile_sketch<double,std::less<double>>::finalize(uint64_t a1, __n128 a2)
{
  turi::sketches::quantile_sketch<double,std::less<double>>::sort_level_0(a1, a2);
  turi::sketches::quantile_sketch<double,std::less<double>>::recursive_merge_of_all_levels(a1, 0, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 3), &v11);
  __n128 v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 72) = v12;
  double v4 = ceil(1.0 / (*(double *)(a1 + 24) * 0.5) + 1.0 / (*(double *)(a1 + 24) * 0.5)) + 1.0;
  if ((unint64_t)v4 <= 2) {
    unint64_t v5 = 2;
  }
  else {
    unint64_t v5 = (unint64_t)v4;
  }
  __n128 v6 = turi::sketches::quantile_sketch<double,std::less<double>>::compress_to_size(a1, (uint64_t *)(a1 + 56), v5);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(__n128 **)(a1 + 64);
  unint64_t v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7) >> 3));
  *(void *)&long long v11 = turi::sketches::quantile_sketch<double,std::less<double>>::rank_center_comparator;
  if (v8 == (__n128 *)v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = v9;
  }
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,false>(v7, v8, (uint64_t (**)(long long *, long long *))&v11, v10, 1, v6);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)(a1 + 32));
  *(void *)a1 = *(void *)(a1 + 16);
}

void turi::sketches::quantile_sketch<double,std::less<double>>::recursive_merge_of_all_levels(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (a3 - a2 == 2)
  {
    uint64_t v7 = *(void *)(a1 + 32) + 24 * a2;
    turi::sketches::quantile_sketch<double,std::less<double>>::merge(v7, (double **)(v7 + 24), a4);
  }
  else if (a3 - a2 == 1)
  {
    uint64_t v6 = *(void *)(a1 + 32) + 24 * a2;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    *(_OWORD *)a4 = *(_OWORD *)v6;
    a4[2] = *(void *)(v6 + 16);
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + ++*(void *)(result + 8) = 0;
    *(void *)(v6 + 16) = 0;
  }
  else
  {
    turi::sketches::quantile_sketch<double,std::less<double>>::recursive_merge_of_all_levels(v9, a1);
    turi::sketches::quantile_sketch<double,std::less<double>>::recursive_merge_of_all_levels(__p, a1);
    turi::sketches::quantile_sketch<double,std::less<double>>::merge((uint64_t)v9, (double **)__p, a4);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
  }
}

void sub_2240A50D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL turi::sketches::quantile_sketch<double,std::less<double>>::rank_center_comparator(uint64_t a1, uint64_t a2)
{
  return (float)((float)((float)*(unint64_t *)(a1 + 8) + (float)*(unint64_t *)(a1 + 16)) * 0.5) < (float)((float)((float)*(unint64_t *)(a2 + 8) + (float)*(unint64_t *)(a2 + 16)) * 0.5);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,false>(uint64_t a1, __n128 *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v17 = v3;
    uint64_t v18 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = result;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        double result = (*a3)(v7, v11);
        if (result)
        {
          long long v15 = *(_OWORD *)v10;
          uint64_t v16 = *(void *)(v10 + 16);
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = v6 + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(v6 + v12);
            *(void *)(v13 + 40) = *(void *)(v6 + v12 + 16);
            if (!v12) {
              break;
            }
            v12 -= 24;
            double result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              uint64_t v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          uint64_t v14 = v6;
LABEL_10:
          *(_OWORD *)uint64_t v14 = v15;
          *(void *)(v14 + 16) = v16;
        }
        uint64_t v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if (result != a2)
  {
    uint64_t v14 = v3;
    uint64_t v15 = v4;
    uint64_t v6 = result;
    uint64_t v7 = result + 24;
    if (result + 24 != a2)
    {
      uint64_t v9 = result - 24;
      do
      {
        uint64_t v10 = v6;
        uint64_t v6 = v7;
        double result = (*a3)(v7, v10);
        if (result)
        {
          long long v12 = *(_OWORD *)v6;
          uint64_t v13 = *(void *)(v6 + 16);
          uint64_t v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 4++*(void *)(result + 8) = *(_OWORD *)(v11 + 24);
            *(void *)(v11 + 64) = *(void *)(v11 + 40);
            double result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 4++*(void *)(result + 8) = v12;
          *(void *)(v11 + 64) = v13;
        }
        uint64_t v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v13 = *((void *)a2 + 2);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v15;
    *a3 = v14;
    *((void *)a3 + 2) = v13;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    uint64_t v16 = *((void *)a1 + 2);
    long long v17 = *a1;
    uint64_t v18 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v18;
    *a2 = v17;
    *((void *)a2 + 2) = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = *((void *)a1 + 2);
    long long v20 = *a1;
    uint64_t v21 = *((void *)a2 + 2);
    *a1 = *a2;
    *((void *)a1 + 2) = v21;
    *a2 = v20;
    *((void *)a2 + 2) = v19;
    if (!(*a4)(a3, a2)) {
      return 1;
    }
    uint64_t v22 = *((void *)a2 + 2);
    long long v23 = *a2;
    uint64_t v24 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v24;
    *a3 = v23;
    *((void *)a3 + 2) = v22;
    return 2;
  }
  uint64_t v10 = *((void *)a1 + 2);
  long long v11 = *a1;
  uint64_t v12 = *((void *)a3 + 2);
  *a1 = *a3;
  *((void *)a1 + 2) = v12;
  *a3 = v11;
  *((void *)a3 + 2) = v10;
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&)>(long long *a1, long long *a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v4 = a2;
  long long v16 = *a1;
  uint64_t v17 = *((void *)a1 + 2);
  if ((*a3)(&v16, (long long *)((char *)a2 - 24)))
  {
    uint64_t v6 = a1;
    do
      uint64_t v6 = (long long *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = (long long *)((char *)a1 + 24);
    do
    {
      uint64_t v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v16, v7);
      uint64_t v7 = (long long *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      uint64_t v4 = (long long *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    long long v9 = *v6;
    uint64_t v19 = *((void *)v6 + 2);
    long long v18 = v9;
    long long v10 = *v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *uint64_t v6 = v10;
    long long v11 = v18;
    *((void *)v4 + 2) = v19;
    *uint64_t v4 = v11;
    do
      uint64_t v6 = (long long *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      uint64_t v4 = (long long *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  uint64_t v12 = (long long *)((char *)v6 - 24);
  if ((long long *)((char *)v6 - 24) != a1)
  {
    long long v13 = *v12;
    *((void *)a1 + 2) = *((void *)v6 - 1);
    *a1 = v13;
  }
  long long v14 = v16;
  *((void *)v6 - 1) = v17;
  *uint64_t v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,turi::sketches::quantile_sketch<double,std::less<double>>::element *,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&)>(long long *a1, unint64_t a2, uint64_t (**a3)(char *, long long *))
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  unint64_t v7 = (unint64_t)a1 + v6;
  uint64_t v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    long long v9 = (long long *)((char *)a1 + v6);
    unint64_t v10 = a2;
    do
    {
      long long v19 = *v9;
      long long v11 = v19;
      uint64_t v20 = *((void *)v9 + 2);
      uint64_t v12 = v20;
      uint64_t v13 = *(void *)(v10 + 16);
      long long *v9 = *(_OWORD *)v10;
      *((void *)v9 + 2) = v13;
      *(void *)(v10 + 16) = v12;
      *(_OWORD *)unint64_t v10 = v11;
      do
        long long v9 = (long long *)((char *)v9 + 24);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 24;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    uint64_t v8 = (uint64_t)v9 - 24;
  }
  if ((long long *)v8 != a1)
  {
    long long v14 = *(_OWORD *)v8;
    *((void *)a1 + 2) = *(void *)(v8 + 16);
    *a1 = v14;
  }
  long long v15 = v17;
  *(void *)(v8 + 16) = v18;
  *(_OWORD *)uint64_t v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *uint64_t v8 = v10;
        *(void *)(a2 - ++*(void *)(result + 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      uint64_t v12 = (long long *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v19 = *(_OWORD *)v13;
      uint64_t v20 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 8++*(void *)(result + 8) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v19, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v18 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v18 = v19;
      *(void *)(v18 + 16) = v20;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(void *)(a3 + 16) = v14;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  __n128 v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    uint64_t v14 = *(void *)(a4 + 16);
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(void *)(a5 + 16) = v14;
    if ((*a6)((long long *)a4, (long long *)a3))
    {
      uint64_t v17 = *(void *)(a3 + 16);
      long long v18 = *(_OWORD *)a3;
      uint64_t v19 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(void *)(a4 + 16) = v17;
      if ((*a6)((long long *)a3, (long long *)a2))
      {
        uint64_t v20 = *(void *)(a2 + 16);
        __n128 v21 = *(__n128 *)a2;
        uint64_t v22 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(void *)(a3 + 16) = v20;
        if ((*a6)((long long *)a2, (long long *)a1))
        {
          unint64_t v23 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v24 = *(void *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(void *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  if (a1 != a2)
  {
    unint64_t v7 = a2;
    uint64_t v9 = (char *)a2 - (char *)a1;
    uint64_t v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      uint64_t v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)a1, a4, v10, v13);
        uint64_t v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if (v7 != a3)
    {
      long long v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          unint64_t v16 = v15[1].n128_u64[0];
          __n128 v17 = *v15;
          unint64_t v18 = a1[1].n128_u64[0];
          *long long v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)a1, a4, v10, a1);
        }
        long long v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      uint64_t v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      long long v29 = v14;
      int64_t v19 = v9 / 0x18uLL;
      do
      {
        long long v30 = v7;
        uint64_t v20 = 0;
        __n128 v31 = *a1;
        unint64_t v32 = a1[1].n128_u64[0];
        uint64_t v21 = (uint64_t)a1;
        do
        {
          uint64_t v22 = v21 + 24 * v20 + 24;
          uint64_t v23 = (2 * v20) | 1;
          uint64_t v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            uint64_t v23 = v24;
          }
          long long v25 = *(_OWORD *)v22;
          *(void *)(v21 + 16) = *(void *)(v22 + 16);
          *(_OWORD *)uint64_t v21 = v25;
          uint64_t v21 = v22;
          uint64_t v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        unint64_t v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(void *)(v22 + 16) = v32;
          *(__n128 *)uint64_t v22 = v31;
        }
        else
        {
          __n128 v26 = *v7;
          *(void *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)uint64_t v22 = v26;
          __n128 *v7 = v31;
          v30[-1].n128_u64[1] = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>((uint64_t)a1, v22 + 24, (uint64_t (**)(long long *, long long *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = (__n128 *)(a1 + 24 * v12);
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        uint64_t v13 = (__n128 *)((char *)v13 + 24);
        uint64_t v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        do
        {
          unint64_t v16 = v13;
          __n128 v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          __n128 *v7 = v17;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = (__n128 *)(a1 + 24 * v18);
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              uint64_t v13 = (__n128 *)((char *)v13 + 24);
              uint64_t v18 = v19;
            }
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *unint64_t v16 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(turi::sketches::quantile_sketch<double,std::less<double>>::element const&,turi::sketches::quantile_sketch<double,std::less<double>>::element const&),turi::sketches::quantile_sketch<double,std::less<double>>::element*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v17 = v4;
    uint64_t v18 = v5;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (long long *)(a1 + 24 * (v6 >> 1));
    unint64_t v11 = (long long *)(a2 - 24);
    if ((*a3)(v10, (long long *)(a2 - 24)))
    {
      long long v15 = *v11;
      uint64_t v16 = *((void *)v11 + 2);
      do
      {
        uint64_t v13 = v10;
        long long v14 = *v10;
        *((void *)v11 + 2) = *((void *)v10 + 2);
        *unint64_t v11 = v14;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (long long *)(a1 + 24 * v9);
        unint64_t v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      double result = *(double *)&v15;
      *uint64_t v13 = v15;
      *((void *)v13 + 2) = v16;
    }
  }
  return result;
}

void turi::sketches::streaming_quantile_sketch<double,std::less<double>>::combine(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a1 + 48);
  if (v4)
  {
    turi::sketches::quantile_sketch<double,std::less<double>>::merge(a1 + 104, (double **)(a2 + 104), &v8);
    unint64_t v6 = *(void **)(a1 + 104);
    if (v6)
    {
      *(void *)(a1 + 112) = v6;
      operator delete(v6);
    }
    *(_OWORD *)(a1 + 104) = v8;
    *(void *)(a1 + 120) = v9;
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 64);
    _OWORD *v5 = *(_OWORD *)(a2 + 48);
    v5[1] = v7;
    if (a1 != a2)
    {
      std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__assign_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(a1 + 80, *(void *)(a2 + 80), *(void *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
      std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>((char *)(a1 + 104), *(char **)(a2 + 104), *(void *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
    }
    *(unsigned char *)(a1 + 12++*(void *)(result + 8) = *(unsigned char *)(a2 + 128);
  }
  *(void *)(a1 + 8) += *(void *)(a2 + 8);
}

uint64_t turi::sketches::streaming_quantile_sketch<double,std::less<double>>::~streaming_quantile_sketch(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(void *)(a1 + 112) = v2;
    operator delete(v2);
  }
  uint64_t v4 = (void **)(a1 + 80);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)(a1 + 24);
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__assign_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *>((int)&v20, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + ++*(void *)(result + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      uint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      uint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + ++*(void *)(result + 8) = v15;
}

void sub_2240A6688(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(result + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2240A6690(_Unwind_Exception *a1)
{
  *(void *)(v1 + ++*(void *)(result + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(v4, *(const void **)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2240A6780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned long>>,std::vector<unsigned long>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(a4, *(char **)v5, *(void *)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3));
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__assign_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = std::vector<std::string>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    char v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    char v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

void *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2240A69EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + ++*(void *)(result + 8) = v10;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::vector<float>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*,turi::sketches::quantile_sketch<double,std::less<double>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>,turi::sketches::quantile_sketch<double,std::less<double>>&>(a1, v4, v6);
      v6 += 88;
      uint64_t v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2240A6AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::construct[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>,turi::sketches::quantile_sketch<double,std::less<double>>&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4++*(void *)(result + 8) = 0;
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>((void *)(a2 + 32), *(void *)(a3 + 32), *(void *)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  double result = std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::__init_with_size[abi:ne180100]<turi::sketches::quantile_sketch<double,std::less<double>>::element*,turi::sketches::quantile_sketch<double,std::less<double>>::element*>((void *)(a2 + 56), *(const void **)(a3 + 56), *(void *)(a3 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3));
  *(unsigned char *)(a2 + 80) = *(unsigned char *)(a3 + 80);
  return result;
}

void sub_2240A6BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>,turi::sketches::quantile_sketch<double,std::less<double>>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void *std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::__init_with_size[abi:ne180100]<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2240A6CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + ++*(void *)(result + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t turi::sketches::quantile_sketch<double,std::less<double>>::query(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 56;
  uint64_t result = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(v4 + 8) - result;
  if (!v5) {
    return result;
  }
  unint64_t v6 = a2 + 1;
  if ((unint64_t)(a2 + 1) < 2) {
    return result;
  }
  unint64_t v7 = *(void *)(a1 + 16);
  if (v6 >= v7) {
    return result + 8 * (v5 >> 3) - 24;
  }
  double v8 = *(double *)(a1 + 24);
  uint64_t result = turi::sketches::quantile_sketch<double,std::less<double>>::fast_query_iterator((void *)a1, a2);
  unint64_t v9 = *(void *)(result + 8);
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_24;
  }
  int v10 = (int)((double)(int)v6 + (double)v7 * v8);
  unint64_t v11 = (int)((double)(int)v6 - (double)v7 * v8) & ~((int)((double)(int)v6 - (double)v7 * v8) >> 31);
  if (v9 >= v11)
  {
    uint64_t v12 = *(void *)(result + 16);
    if ((v12 & 0x8000000000000000) == 0)
    {
      if (v12 <= v10) {
        return result;
      }
      goto LABEL_8;
    }
LABEL_24:
    truncate_check_impl<long long,unsigned long,0>::operator()(unsigned long)::{lambda(void)#1}::operator()();
  }
LABEL_8:
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = v14 - v13;
  if (v14 != v13)
  {
    uint64_t v16 = 0;
    unint64_t v17 = v15 / 24;
    if (v17 <= 1) {
      unint64_t v17 = 1;
    }
    uint64_t v18 = (uint64_t *)(v13 + 16);
    unint64_t v19 = -1;
    uint64_t v20 = -1;
    do
    {
      uint64_t v21 = *(v18 - 1);
      if (v21 < 0) {
        goto LABEL_24;
      }
      if (v21 >= (uint64_t)v11)
      {
        uint64_t v22 = *v18;
        if (*v18 < 0) {
          goto LABEL_24;
        }
        if (v22 <= v10)
        {
          double v23 = (double)(((unint64_t)(v21 + v22) >> 1) - v6);
          if (v23 < (double)v19)
          {
            unint64_t v19 = (unint64_t)v23;
            uint64_t v20 = v16;
          }
        }
      }
      v18 += 3;
      ++v16;
    }
    while (v17 != v16);
    if (v20 != -1) {
      return v13 + 24 * v20;
    }
  }
  return result;
}

uint64_t turi::sketches::quantile_sketch<double,std::less<double>>::fast_query_iterator(void *a1, uint64_t a2)
{
  unint64_t v3 = a2 + 1;
  if ((unint64_t)(a2 + 1) <= 1) {
    return a1[7];
  }
  if (v3 >= a1[2])
  {
    uint64_t v15 = a1[8];
    return v15 - 24;
  }
  uint64_t result = a1[7];
  uint64_t v5 = a1[8];
  if (v5 == result)
  {
    unint64_t v6 = 0;
LABEL_19:
    uint64_t v15 = result + 24 * v6;
    return v15 - 24;
  }
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - result) >> 3);
  float v7 = (float)v3;
  uint64_t v8 = a1[7];
  unint64_t v9 = v6;
  do
  {
    unint64_t v10 = v9 >> 1;
    uint64_t v11 = v8 + 24 * (v9 >> 1);
    float v12 = (float)((float)*(unint64_t *)(v11 + 8) + (float)*(unint64_t *)(v11 + 16)) * 0.5;
    uint64_t v13 = v11 + 24;
    v9 += ~(v9 >> 1);
    if (v12 < (float)((float)(v7 + v7) * 0.5)) {
      uint64_t v8 = v13;
    }
    else {
      unint64_t v9 = v10;
    }
  }
  while (v9);
  if (v8 == v5) {
    goto LABEL_19;
  }
  if (v8 != result)
  {
    if (vabds_f32((float)((float)*(unint64_t *)(v8 - 16) + (float)*(unint64_t *)(v8 - 8)) * 0.5, v7) >= vabds_f32((float)((float)*(unint64_t *)(v8 + 8) + (float)*(unint64_t *)(v8 + 16)) * 0.5, v7)) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = -1;
    }
    return v8 + 24 * v14;
  }
  return result;
}

void *turi::sketches::streaming_quantile_sketch<double,std::less<double>>::save(void *a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v4)
    {
      size_t v11 = 2 * v4 + 16;
      *(void *)(a2 + 40) = v11;
      float v12 = *(char ***)(a2 + 16);
      if (v12)
      {
        uint64_t v5 = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v15);
          uint64_t v5 = **(char ***)(a2 + 16);
        }
        else if (!v14)
        {
          v12[1] = &v5[v11];
        }
      }
      else
      {
        uint64_t v5 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v11, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v5;
    }
    else
    {
      uint64_t v5 = *(char **)(a2 + 24);
    }
    *(void *)&v5[*(void *)(a2 + 32)] = *a1;
    *(void *)(a2 + 32) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v6)
    {
      size_t v16 = 2 * v6 + 16;
      *(void *)(a2 + 40) = v16;
      unint64_t v17 = *(char ***)(a2 + 16);
      if (v17)
      {
        float v7 = *v17;
        size_t v18 = v17[1] - *v17;
        BOOL v19 = v16 >= v18;
        std::vector<char>::size_type v20 = v16 - v18;
        if (v20 != 0 && v19)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v20);
          float v7 = **(char ***)(a2 + 16);
        }
        else if (!v19)
        {
          v17[1] = &v7[v16];
        }
      }
      else
      {
        float v7 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v16, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v7;
    }
    else
    {
      float v7 = *(char **)(a2 + 24);
    }
    *(void *)&v7[*(void *)(a2 + 32)] = a1[1];
    *(void *)(a2 + 32) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v8 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v8)
    {
      size_t v21 = 2 * v8 + 16;
      *(void *)(a2 + 40) = v21;
      uint64_t v22 = *(char ***)(a2 + 16);
      if (v22)
      {
        unint64_t v9 = *v22;
        size_t v23 = v22[1] - *v22;
        BOOL v24 = v21 >= v23;
        std::vector<char>::size_type v25 = v21 - v23;
        if (v25 != 0 && v24)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v25);
          unint64_t v9 = **(char ***)(a2 + 16);
        }
        else if (!v24)
        {
          v22[1] = &v9[v21];
        }
      }
      else
      {
        unint64_t v9 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v21, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v9;
    }
    else
    {
      unint64_t v9 = *(char **)(a2 + 24);
    }
    *(void *)&v9[*(void *)(a2 + 32)] = a1[2];
    *(void *)(a2 + 32) += 8;
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>,false>::exec(a2, a1 + 3);
  return turi::sketches::quantile_sketch<double,std::less<double>>::save((uint64_t)(a1 + 6), a2);
}

void *turi::sketches::quantile_sketch<double,std::less<double>>::save(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v4)
    {
      size_t v13 = 2 * v4 + 16;
      *(void *)(a2 + 40) = v13;
      BOOL v14 = *(char ***)(a2 + 16);
      if (v14)
      {
        uint64_t v5 = *v14;
        size_t v15 = v14[1] - *v14;
        BOOL v16 = v13 >= v15;
        std::vector<char>::size_type v17 = v13 - v15;
        if (v17 != 0 && v16)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v17);
          uint64_t v5 = **(char ***)(a2 + 16);
        }
        else if (!v16)
        {
          v14[1] = &v5[v13];
        }
      }
      else
      {
        uint64_t v5 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v13, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v5;
    }
    else
    {
      uint64_t v5 = *(char **)(a2 + 24);
    }
    *(void *)&v5[*(void *)(a2 + 32)] = *(void *)a1;
    *(void *)(a2 + 32) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v6)
    {
      size_t v18 = 2 * v6 + 16;
      *(void *)(a2 + 40) = v18;
      BOOL v19 = *(char ***)(a2 + 16);
      if (v19)
      {
        float v7 = *v19;
        size_t v20 = v19[1] - *v19;
        BOOL v21 = v18 >= v20;
        std::vector<char>::size_type v22 = v18 - v20;
        if (v22 != 0 && v21)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v22);
          float v7 = **(char ***)(a2 + 16);
        }
        else if (!v21)
        {
          v19[1] = &v7[v18];
        }
      }
      else
      {
        float v7 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v18, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v7;
    }
    else
    {
      float v7 = *(char **)(a2 + 24);
    }
    *(void *)&v7[*(void *)(a2 + 32)] = *(void *)(a1 + 8);
    *(void *)(a2 + 32) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v8 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v8)
    {
      size_t v23 = 2 * v8 + 16;
      *(void *)(a2 + 40) = v23;
      BOOL v24 = *(char ***)(a2 + 16);
      if (v24)
      {
        unint64_t v9 = *v24;
        size_t v25 = v24[1] - *v24;
        BOOL v26 = v23 >= v25;
        std::vector<char>::size_type v27 = v23 - v25;
        if (v27 != 0 && v26)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v27);
          unint64_t v9 = **(char ***)(a2 + 16);
        }
        else if (!v26)
        {
          v24[1] = &v9[v23];
        }
      }
      else
      {
        unint64_t v9 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v23, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v9;
    }
    else
    {
      unint64_t v9 = *(char **)(a2 + 24);
    }
    *(void *)&v9[*(void *)(a2 + 32)] = *(void *)(a1 + 16);
    *(void *)(a2 + 32) += 8;
  }
  if (*(void *)a2)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v10 = *(void *)(a2 + 40);
    if (*(void *)(a2 + 32) + 8 > v10)
    {
      size_t v28 = 2 * v10 + 16;
      *(void *)(a2 + 40) = v28;
      long long v29 = *(char ***)(a2 + 16);
      if (v29)
      {
        size_t v11 = *v29;
        size_t v30 = v29[1] - *v29;
        BOOL v31 = v28 >= v30;
        std::vector<char>::size_type v32 = v28 - v30;
        if (v32 != 0 && v31)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a2 + 16), v32);
          size_t v11 = **(char ***)(a2 + 16);
        }
        else if (!v31)
        {
          v29[1] = &v11[v28];
        }
      }
      else
      {
        size_t v11 = (char *)malloc_type_realloc(*(void **)(a2 + 24), v28, 0xF6EA6B1uLL);
      }
      *(void *)(a2 + 24) = v11;
    }
    else
    {
      size_t v11 = *(char **)(a2 + 24);
    }
    *(void *)&v11[*(void *)(a2 + 32)] = *(void *)(a1 + 24);
    *(void *)(a2 + 32) += 8;
  }
  turi::archive_detail::vector_serialize_impl<turi::oarchive,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>,false>::exec(a2, (uint64_t *)(a1 + 32));
  return turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(a2, (const void **)(a1 + 56));
}

void *turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(uint64_t a1, const void **a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a2[1] - (unsigned char *)*a2) >> 3);
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v5)
    {
      size_t v12 = 2 * v5 + 16;
      *(void *)(a1 + 40) = v12;
      size_t v13 = *(char ***)(a1 + 16);
      if (v13)
      {
        unint64_t v6 = *v13;
        size_t v14 = v13[1] - *v13;
        BOOL v15 = v12 >= v14;
        std::vector<char>::size_type v16 = v12 - v14;
        if (v16 != 0 && v15)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v16);
          unint64_t v6 = **(char ***)(a1 + 16);
        }
        else if (!v15)
        {
          v13[1] = &v6[v12];
        }
      }
      else
      {
        unint64_t v6 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v12, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v6;
    }
    else
    {
      unint64_t v6 = *(char **)(a1 + 24);
    }
    *(void *)&v6[*(void *)(a1 + 32)] = v4;
    *(void *)(a1 + 32) += 8;
  }
  float v7 = *a2;
  size_t v8 = (unsigned char *)a2[1] - (unsigned char *)*a2;
  if (*(void *)a1) {
    return (void *)std::ostream::write();
  }
  size_t v10 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) + v8 > v10)
  {
    size_t v17 = 2 * (v10 + v8);
    *(void *)(a1 + 40) = v17;
    size_t v18 = *(char ***)(a1 + 16);
    if (v18)
    {
      size_t v11 = *v18;
      size_t v19 = v18[1] - *v18;
      BOOL v20 = v17 >= v19;
      std::vector<char>::size_type v21 = v17 - v19;
      if (v21 != 0 && v20)
      {
        std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v21);
        size_t v11 = **(char ***)(a1 + 16);
      }
      else if (!v20)
      {
        v18[1] = &v11[v17];
      }
    }
    else
    {
      size_t v11 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v17, 0xF6EA6B1uLL);
    }
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    size_t v11 = *(char **)(a1 + 24);
  }
  uint64_t result = memcpy(&v11[*(void *)(a1 + 32)], v7, v8);
  *(void *)(a1 + 32) += v8;
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v10 = 2 * v6 + 16;
      *(void *)(a1 + 40) = v10;
      size_t v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        uint64_t result = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(a1, (const void **)(v7 + v8));
      ++v9;
      uint64_t v7 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

uint64_t turi::archive_detail::vector_serialize_impl<turi::oarchive,turi::sketches::quantile_sketch<double,std::less<double>>,false>::exec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v10 = 2 * v6 + 16;
      *(void *)(a1 + 40) = v10;
      size_t v11 = *(uint64_t **)(a1 + 16);
      if (v11)
      {
        uint64_t result = *v11;
        size_t v12 = v11[1] - *v11;
        BOOL v13 = v10 >= v12;
        std::vector<char>::size_type v14 = v10 - v12;
        if (v14 != 0 && v13)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v14);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v13)
        {
          v11[1] = result + v10;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v10, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = v4;
    *(void *)(a1 + 32) += 8;
  }
  uint64_t v7 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::sketches::quantile_sketch<double,std::less<double>>::save(v7 + v8, a1);
      ++v9;
      uint64_t v7 = *a2;
      v8 += 88;
    }
    while (v9 < 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void *turi::sketches::streaming_quantile_sketch<double,std::less<double>>::load(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    *a1 = *(void *)(v4 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    a1[1] = *(void *)(v5 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    a1[2] = *(void *)(v6 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>,false>::exec(a2, a1 + 3);
  return turi::sketches::quantile_sketch<double,std::less<double>>::load(a1 + 6, a2);
}

void *turi::sketches::quantile_sketch<double,std::less<double>>::load(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    *a1 = *(void *)(v4 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    a1[1] = *(void *)(v5 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    a1[2] = *(void *)(v6 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    a1[3] = *(void *)(v7 + *(void *)(a2 + 24));
    *(void *)(a2 + 24) += 8;
  }
  else
  {
    std::istream::read();
  }
  turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>,false>::exec(a2, a1 + 4);
  return turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(a2, a1 + 7);
}

void *turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v6 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
    unint64_t v6 = 0;
  }
  a2[1] = *a2;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>::resize((uint64_t)a2, v6);
  uint64_t v7 = (void *)*a2;
  size_t v8 = a2[1] - *a2;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return (void *)std::istream::read();
  }
  uint64_t result = memcpy(v7, (const void *)(v9 + *(void *)(a1 + 24)), v8);
  *(void *)(a1 + 24) += v8;
  return result;
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v8 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  std::vector<std::vector<float>>::__clear[abi:ne180100](a2);
  std::vector<std::vector<turi::sketches::quantile_sketch<double,std::less<double>>::element,std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>::element>>>::resize(a2, v8);
  if (v8)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v8; ++i)
    {
      turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>::element,true>::exec(a1, (void *)(*a2 + v6));
      v6 += 24;
    }
  }
}

void turi::archive_detail::vector_deserialize_impl<turi::iarchive,turi::sketches::quantile_sketch<double,std::less<double>>,false>::exec(uint64_t a1, uint64_t *a2)
{
  unint64_t v10 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unint64_t v10 = *(void *)(v4 + v5);
    *(void *)(a1 + 24) = v5 + 8;
  }
  else
  {
    std::istream::read();
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    do
    {
      v6 -= 88;
      std::allocator<turi::sketches::quantile_sketch<double,std::less<double>>>::destroy[abi:ne180100]((uint64_t)(a2 + 2), v6);
    }
    while (v6 != v7);
  }
  a2[1] = v7;
  std::vector<turi::sketches::quantile_sketch<double,std::less<double>>>::resize(a2, v10);
  if (v10)
  {
    uint64_t v8 = 0;
    for (unint64_t i = 0; i < v10; ++i)
    {
      turi::sketches::quantile_sketch<double,std::less<double>>::load((void *)(*a2 + v8), a1);
      v8 += 88;
    }
  }
}

void std::__shared_ptr_emplace<turi::groupby_operators::count_distinct>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::count_distinct>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BB60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::count_distinct>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::count_distinct::new_instance(turi::groupby_operators::count_distinct *this)
{
}

unsigned __int8 *turi::groupby_operators::count_distinct::add_element_simple(turi::groupby_operators::count_distinct *this, const turi::flexible_type *a2)
{
  return std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>((uint64_t)this + 8, (unsigned __int8 *)a2, (uint64_t)a2);
}

void *turi::groupby_operators::count_distinct::combine(uint64_t a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (unsigned __int8 *)result[3];
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      uint64_t result = std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(v5, v4 + 16, (uint64_t)(v4 + 16));
      uint64_t v4 = *(unsigned __int8 **)v4;
    }
    while (v4);
  }
  return result;
}

uint64_t turi::groupby_operators::count_distinct::emit@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 32);
  *(_DWORD *)(a2 + ++*(void *)(result + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  *(void *)a2 = v2;
  return this;
}

void *turi::groupby_operators::count_distinct::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Count Distinct");
}

void turi::groupby_operators::count_distinct::save(turi::groupby_operators::count_distinct *this, turi::oarchive *a2)
{
}

void turi::groupby_operators::count_distinct::load(turi::groupby_operators::count_distinct *this, turi::iarchive *a2)
{
}

void turi::groupby_operators::count_distinct::~count_distinct(turi::groupby_operators::count_distinct *this)
{
  *(void *)this = &unk_26D76BBB0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D76BBB0;
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x22A614FA0);
}

unsigned __int8 *std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    size_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__construct_node_hash<turi::flexible_type const&>(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  std::vector<char>::size_type v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *std::vector<char>::size_type v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<turi::flexible_type,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<turi::flexible_type,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_2240A8228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<turi::flexible_type,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<turi::flexible_type,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__construct_node_hash<turi::flexible_type const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)a4 = result;
  *(void *)(a4 + ++*(void *)(result + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = a2;
  *((void *)result + 2) = 0;
  unint64_t v9 = (atomic_ullong *volatile *)(result + 16);
  *((_DWORD *)result + 6) = 0;
  result[28] = 0;
  if (result + 16 != (char *)a3)
  {
    *(void *)(result + 21) = *(void *)(a3 + 5);
    atomic_ullong *volatile *v9 = *(atomic_ullong *volatile *)a3;
    unsigned int v10 = *(unsigned __int8 *)(a3 + 12);
    result[28] = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0) {
      atomic_fetch_add(*v9, 1uLL);
    }
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<turi::flexible_type,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<turi::flexible_type,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<turi::flexible_type,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void turi::serialize_iterator<turi::oarchive,std::__hash_const_iterator<std::__hash_node<turi::flexible_type,void *> *>>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v8)
    {
      size_t v11 = 2 * v8 + 16;
      *(void *)(a1 + 40) = v11;
      size_t v12 = *(char ***)(a1 + 16);
      if (v12)
      {
        unint64_t v9 = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          unint64_t v9 = **(char ***)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = &v9[v11];
        }
      }
      else
      {
        unint64_t v9 = (char *)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = v9;
    }
    else
    {
      unint64_t v9 = *(char **)(a1 + 24);
    }
    *(void *)&v9[*(void *)(a1 + 32)] = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2 + 2);
      ++v10;
      a2 = (void *)*a2;
    }
    while (a2 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::unordered_set<turi::flexible_type>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::clear(a2);
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v19 = *(void *)(v4 + v5);
    *((void *)a1 + 3) = v5 + 8;
    if (v19)
    {
      for (unint64_t i = 0; i < v19; ++i)
      {
        std::vector<char>::size_type v21 = 0;
        int v22 = 0;
        char v23 = 0;
        turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1, (unint64_t *)&v21);
        std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__emplace_unique_key_args<turi::flexible_type,turi::flexible_type const&>(a2, (unsigned __int8 *)&v21, (uint64_t)&v21);
        switch(v23)
        {
          case 2:
            if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v7 = v21;
              if (v21)
              {
                if (*((char *)v21 + 31) < 0) {
                  operator delete((void *)v21[1]);
                }
                unint64_t v8 = v7;
                uint64_t v9 = 0x1012C404EF22A49;
                goto LABEL_37;
              }
            }
            break;
          case 3:
            if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              uint64_t v10 = v21;
              if (v21)
              {
                size_t v11 = (void *)v21[1];
                if (v11)
                {
                  _OWORD v21[2] = (atomic_ullong)v11;
                  operator delete(v11);
                }
                unint64_t v8 = v10;
                uint64_t v9 = 0x1080C409938AC02;
                goto LABEL_37;
              }
            }
            break;
          case 4:
            if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              size_t v12 = v21;
              if (v21)
              {
                size_t v20 = (void **)(v21 + 1);
                std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v20);
                goto LABEL_23;
              }
            }
            break;
          case 5:
            if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              size_t v12 = v21;
              if (v21)
              {
                size_t v20 = (void **)(v21 + 1);
                std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v20);
LABEL_23:
                unint64_t v8 = v12;
                uint64_t v9 = 0x1020C405E66F15BLL;
                goto LABEL_37;
              }
            }
            break;
          case 8:
            if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              size_t v13 = v21;
              if (v21)
              {
                boost::detail::shared_count::~shared_count((atomic_uint **)v21 + 2);
                unint64_t v8 = v13;
                unsigned int v14 = -235920773;
                goto LABEL_36;
              }
            }
            break;
          case 9:
            if (atomic_fetch_add(v21, 0xFFFFFFFFFFFFFFFFLL) == 1)
            {
              std::vector<char>::size_type v15 = v21;
              if (v21)
              {
                float v16 = (void *)v21[6];
                if (v16)
                {
                  v21[7] = (atomic_ullong)v16;
                  operator delete(v16);
                }
                BOOL v17 = (void *)v15[3];
                if (v17)
                {
                  v15[4] = (atomic_ullong)v17;
                  operator delete(v17);
                }
                unint64_t v18 = (std::__shared_weak_count *)v15[2];
                if (v18) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                }
                unint64_t v8 = v15;
                unsigned int v14 = 2071181815;
LABEL_36:
                uint64_t v9 = v14 | 0x1030C4000000000;
LABEL_37:
                MEMORY[0x22A614FA0](v8, v9);
              }
            }
            break;
          default:
            continue;
        }
      }
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_2240A8714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_ullong *volatile a12, int a13, char a14)
{
  switch(a14)
  {
    case 2:
      turi::gl_sarray::clip(&a12);
      break;
    case 3:
      turi::gl_sarray::clip(&a12);
      break;
    case 4:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    case 5:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    case 8:
      turi::gl_sarray::clip(&a12);
      break;
    case 9:
      turi::full_type_name<turi::flexible_type>(&a12);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<turi::flexible_type,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<turi::flexible_type,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,std::allocator<turi::flexible_type>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<turi::groupby_operators::distinct>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::distinct>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::distinct>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::distinct::new_instance(turi::groupby_operators::distinct *this)
{
}

void turi::groupby_operators::distinct::emit(turi::groupby_operators::distinct *this@<X0>, uint64_t a2@<X8>)
{
  std::vector<turi::flexible_type>::vector(&v23, *((void *)this + 4));
  uint64_t v4 = (uint64_t *)*((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v23 + v5;
      if ((uint64_t *)(v23 + v5) != v4 + 2)
      {
        switch(*(unsigned char *)(v6 + 12))
        {
          case 2:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)v6;
            if (!*(void *)v6) {
              goto LABEL_36;
            }
            if (*((char *)v7 + 31) < 0) {
              operator delete((void *)v7[1]);
            }
            atomic_ullong *volatile v8 = v7;
            uint64_t v9 = 0x1012C404EF22A49;
            goto LABEL_35;
          case 3:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)v6;
            if (!*(void *)v6) {
              goto LABEL_36;
            }
            size_t v11 = (void *)v10[1];
            if (v11)
            {
              void v10[2] = (atomic_ullong)v11;
              operator delete(v11);
            }
            atomic_ullong *volatile v8 = v10;
            uint64_t v9 = 0x1080C409938AC02;
            goto LABEL_35;
          case 4:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v6;
            if (!*(void *)v6) {
              goto LABEL_36;
            }
            uint64_t v24 = (void **)(v12 + 1);
            std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v24);
            goto LABEL_21;
          case 5:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v12 = *(atomic_ullong *volatile *)v6;
            if (!*(void *)v6) {
              goto LABEL_36;
            }
            uint64_t v24 = (void **)(v12 + 1);
            std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v24);
LABEL_21:
            atomic_ullong *volatile v8 = v12;
            uint64_t v9 = 0x1020C405E66F15BLL;
            goto LABEL_35;
          case 8:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v13 = *(atomic_ullong *volatile *)v6;
            if (!*(void *)v6) {
              goto LABEL_36;
            }
            boost::detail::shared_count::~shared_count((atomic_uint **)v13 + 2);
            atomic_ullong *volatile v8 = v13;
            unsigned int v14 = -235920773;
            goto LABEL_34;
          case 9:
            if (atomic_fetch_add(*(atomic_ullong *volatile *)v6, 0xFFFFFFFFFFFFFFFFLL) != 1) {
              goto LABEL_37;
            }
            atomic_ullong *volatile v15 = *(atomic_ullong *volatile *)v6;
            if (!*(void *)v6) {
              goto LABEL_36;
            }
            float v16 = (void *)v15[6];
            if (v16)
            {
              v15[7] = (atomic_ullong)v16;
              operator delete(v16);
            }
            BOOL v17 = (void *)v15[3];
            if (v17)
            {
              v15[4] = (atomic_ullong)v17;
              operator delete(v17);
            }
            unint64_t v18 = (std::__shared_weak_count *)v15[2];
            if (v18) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v18);
            }
            atomic_ullong *volatile v8 = v15;
            unsigned int v14 = 2071181815;
LABEL_34:
            uint64_t v9 = v14 | 0x1030C4000000000;
LABEL_35:
            MEMORY[0x22A614FA0](v8, v9);
LABEL_36:
            *(void *)uint64_t v6 = 0;
LABEL_37:
            uint64_t v19 = v4[2];
            *(void *)(v6 + 5) = *(uint64_t *)((char *)v4 + 21);
            *(void *)uint64_t v6 = v19;
            LODWORD(v19) = *((unsigned __int8 *)v4 + 28);
            *(unsigned char *)(v6 + 12) = v19;
            BOOL v20 = v19 > 9;
            int v21 = (1 << v19) & 0x33C;
            if (!v20 && v21 != 0) {
              atomic_fetch_add(*(atomic_ullong *volatile *)v6, 1uLL);
            }
            break;
          default:
            goto LABEL_37;
        }
      }
      uint64_t v4 = (uint64_t *)*v4;
      v5 += 16;
    }
    while (v4);
  }
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 4;
  operator new();
}

void sub_2240A8D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v15 = v14;
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v17 = *v12;
    if (*v12)
    {
      a12 = (void **)(v17 + 8);
      std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
      MEMORY[0x22A614FA0](v17, 0x1020C405E66F15BLL);
    }
    *atomic_ullong *volatile v12 = 0;
  }
  *atomic_ullong *volatile v12 = 0;
  *((_DWORD *)v12 + 2) = 0;
  *((unsigned char *)v12 + 12) = 0;
  a12 = (void **)&a9;
  std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void *turi::groupby_operators::distinct::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Distinct");
}

void std::__shared_ptr_emplace<turi::groupby_operators::frequency_count>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BD40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<turi::groupby_operators::frequency_count>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D76BD40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x22A614FA0);
}

uint64_t std::__shared_ptr_emplace<turi::groupby_operators::frequency_count>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 88))();
}

void turi::groupby_operators::frequency_count::new_instance(turi::groupby_operators::frequency_count *this)
{
}

unsigned __int8 *turi::groupby_operators::frequency_count::add_element_simple(turi::groupby_operators::frequency_count *this, const turi::flexible_type *a2)
{
  unint64_t v3 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)this + 8, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v3);
  ++*((void *)result + 4);
  return result;
}

void *turi::groupby_operators::frequency_count::combine(uint64_t a1, void *lpsrc)
{
  if (!result) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (unsigned __int8 *)result[3];
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 8);
    do
    {
      if (std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(v5, v4 + 16))
      {
        uint64_t v6 = *((void *)v4 + 4);
        atomic_ullong *volatile v7 = v4 + 16;
        uint64_t result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>((uint64_t)v5, v4 + 16, (uint64_t)&std::piecewise_construct, &v7);
        result[4] += v6;
      }
      else
      {
        uint64_t result = std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,unsigned long> const&>((uint64_t)v5, v4 + 16, (uint64_t)(v4 + 16));
      }
      uint64_t v4 = *(unsigned __int8 **)v4;
    }
    while (v4);
  }
  return result;
}

void turi::groupby_operators::frequency_count::emit(turi::groupby_operators::frequency_count *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(&v8, *((void *)this + 4));
  uint64_t v4 = (uint64_t *)*((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4[4];
      memset(v9, 0, 13);
      if (v4 + 2 != v9)
      {
        *(uint64_t *)((char *)v9 + 5) = *(uint64_t *)((char *)v4 + 21);
        v9[0] = v4[2];
        BYTE4(v9[1]) = *((unsigned char *)v4 + 28);
        if (BYTE4(v9[1]) <= 9u && ((1 << SBYTE4(v9[1])) & 0x33C) != 0) {
          atomic_fetch_add((atomic_ullong *volatile)v9[0], 1uLL);
        }
      }
      char v11 = 0;
      int v10 = 0;
      void v9[2] = v6;
      std::pair<turi::flexible_type,turi::flexible_type>::operator=[abi:ne180100](v8 + v5, v9);
      std::pair<turi::flexible_type,turi::flexible_type>::~pair((uint64_t)v9);
      uint64_t v4 = (uint64_t *)*v4;
      v5 += 32;
    }
    while (v4);
  }
  *(void *)(a2 + 5) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 12) = 5;
  operator new();
}

void sub_2240A923C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v15 = v14;
  MEMORY[0x22A614FA0](v15, 0x1020C405E66F15BLL);
  if (atomic_fetch_add(v13, 0xFFFFFFFFFFFFFFFFLL) == 1)
  {
    uint64_t v17 = *v12;
    if (*v12)
    {
      a12 = (void **)(v17 + 8);
      std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
      MEMORY[0x22A614FA0](v17, 0x1020C405E66F15BLL);
    }
    *uint64_t v12 = 0;
  }
  *uint64_t v12 = 0;
  *((_DWORD *)v12 + 2) = 0;
  *((unsigned char *)v12 + 12) = 0;
  a12 = (void **)&a9;
  std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL turi::groupby_operators::frequency_count::support_type(uint64_t a1, char a2)
{
  return (a2 & 0xFD) == 0;
}

void *turi::groupby_operators::frequency_count::name@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "Frequency Count");
}

uint64_t turi::groupby_operators::frequency_count::save(turi::groupby_operators::frequency_count *this, turi::oarchive *a2)
{
  return turi::serialize_iterator<turi::oarchive,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>>((uint64_t)a2, *((void **)this + 3), 0, *((void *)this + 4));
}

void turi::groupby_operators::frequency_count::load(turi::groupby_operators::frequency_count *this, turi::iarchive *a2)
{
}

void turi::groupby_operators::frequency_count::~frequency_count(turi::groupby_operators::frequency_count *this)
{
  *(void *)this = &unk_26D76BD90;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D76BD90;
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table((uint64_t)this + 8);
  JUMPOUT(0x22A614FA0);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    atomic_ullong *volatile v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_2240A963C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a4 = result;
  *(void *)(a4 + ++*(void *)(result + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = a2;
  *((void *)result + 2) = 0;
  unint64_t v9 = (atomic_ullong *volatile *)(result + 16);
  unint64_t v10 = (char *)*a3;
  *((_DWORD *)result + 6) = 0;
  result[28] = 0;
  if (v10 != result + 16)
  {
    uint8x8_t v11 = *(atomic_ullong **)v10;
    *(void *)(result + 21) = *(void *)(v10 + 5);
    atomic_ullong *volatile *v9 = v11;
    unsigned int v12 = v10[12];
    result[28] = v12;
    BOOL v13 = v12 > 9;
    int v14 = (1 << v12) & 0x33C;
    if (!v13 && v14 != 0) {
      atomic_fetch_add(*v9, 1uLL);
    }
  }
  *((void *)result + 4) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::pair<turi::flexible_type const,unsigned long>::~pair((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::pair<turi::flexible_type const,unsigned long>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          uint8x8_t v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          unsigned int v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          BOOL v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + ++*(void *)(result + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::find<turi::flexible_type>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  atomic_ullong *volatile v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](v12, v11 + 16, (uint64_t)a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::pair<turi::flexible_type const,unsigned long> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = turi::flexible_type::apply_visitor<turi::flexible_type_impl::city_hash_visitor>(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<turi::flexible_type>::operator()[abi:ne180100](a1 + 32, i + 16, (uint64_t)a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::pair<turi::flexible_type const,unsigned long> const&>(a1, v8, a3, (uint64_t)v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MPSMatrix * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MPSMatrix * {__strong}>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  size_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *size_t v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_2240A9CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__construct_node_hash<std::pair<turi::flexible_type const,unsigned long> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)a4 = result;
  *(void *)(a4 + ++*(void *)(result + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = a2;
  *((void *)result + 2) = 0;
  unint64_t v9 = (atomic_ullong *volatile *)(result + 16);
  *((_DWORD *)result + 6) = 0;
  result[28] = 0;
  if (result + 16 != (char *)a3)
  {
    *(void *)(result + 21) = *(void *)(a3 + 5);
    atomic_ullong *volatile *v9 = *(atomic_ullong *volatile *)a3;
    unsigned int v10 = *(unsigned __int8 *)(a3 + 12);
    result[28] = v10;
    if (v10 <= 9 && ((1 << v10) & 0x33C) != 0) {
      atomic_fetch_add(*v9, 1uLL);
    }
  }
  *((void *)result + 4) = *(void *)(a3 + 16);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void *std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(_DWORD *)(v4 + ++*(void *)(result + 8) = 0;
      *(unsigned char *)(v4 + 12) = 0;
      *(void *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 24) = 0;
      *(unsigned char *)(v4 + 2++*(void *)(result + 8) = 0;
      v4 += 32;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2240A9E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t turi::serialize_iterator<turi::oarchive,std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<turi::flexible_type,unsigned long>,void *> *>>>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (*(void *)a1)
  {
    uint64_t result = std::ostream::write();
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v9)
    {
      size_t v11 = 2 * v9 + 16;
      *(void *)(a1 + 40) = v11;
      uint64_t v12 = *(uint64_t **)(a1 + 16);
      if (v12)
      {
        uint64_t result = *v12;
        size_t v13 = v12[1] - *v12;
        BOOL v14 = v11 >= v13;
        std::vector<char>::size_type v15 = v11 - v13;
        if (v15 != 0 && v14)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v15);
          uint64_t result = **(void **)(a1 + 16);
        }
        else if (!v14)
        {
          v12[1] = result + v11;
        }
      }
      else
      {
        uint64_t result = (uint64_t)malloc_type_realloc(*(void **)(a1 + 24), v11, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(void *)(a1 + 24);
    }
    *(void *)(result + *(void *)(a1 + 32)) = a4;
    *(void *)(a1 + 32) += 8;
  }
  if (a2 == a3)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t result = (uint64_t)turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,unsigned long>,false,void>::exec(a1, a2 + 2);
      ++v10;
      a2 = (void *)*a2;
    }
    while (a2 != a3);
  }
  if (v10 != a4) {
    turi::serialize_iterator<turi::oarchive,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(turi::oarchive &,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>,unsigned long)::{lambda(void)#1}::operator()();
  }
  return result;
}

char *turi::archive_detail::serialize_impl<turi::oarchive,std::pair<turi::flexible_type const,unsigned long>,false,void>::exec(uint64_t a1, uint64_t *a2)
{
  turi::archive_detail::serialize_hard_or_soft_fail<turi::oarchive,turi::flexible_type>::exec(a1, a2);
  uint64_t v4 = a2 + 2;
  if (*(void *)a1)
  {
    return (char *)std::ostream::write();
  }
  else
  {
    unint64_t v6 = *(void *)(a1 + 40);
    if (*(void *)(a1 + 32) + 8 > v6)
    {
      size_t v7 = 2 * v6 + 16;
      *(void *)(a1 + 40) = v7;
      unint64_t v8 = *(char ***)(a1 + 16);
      if (v8)
      {
        uint64_t result = *v8;
        size_t v9 = v8[1] - *v8;
        BOOL v10 = v7 >= v9;
        std::vector<char>::size_type v11 = v7 - v9;
        if (v11 != 0 && v10)
        {
          std::vector<char>::__append(*(std::vector<char> **)(a1 + 16), v11);
          uint64_t result = **(char ***)(a1 + 16);
        }
        else if (!v10)
        {
          v8[1] = &result[v7];
        }
      }
      else
      {
        uint64_t result = (char *)malloc_type_realloc(*(void **)(a1 + 24), v7, 0xF6EA6B1uLL);
      }
      *(void *)(a1 + 24) = result;
    }
    else
    {
      uint64_t result = *(char **)(a1 + 24);
    }
    *(void *)&result[*(void *)(a1 + 32)] = *v4;
    *(void *)(a1 + 32) += 8;
  }
  return result;
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::unordered_map<turi::flexible_type,unsigned long>,false,void>::exec(turi::iarchive *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::clear(a2);
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)a1 + 3);
    unint64_t v8 = *(void *)(v4 + v5);
    *((void *)a1 + 3) = v5 + 8;
    if (v8)
    {
      for (unint64_t i = 0; i < v8; ++i)
      {
        unint64_t v10 = 0;
        int v11 = 0;
        char v12 = 0;
        uint64_t v13 = 0;
        turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,unsigned long>,false,void>::exec(a1, &v10);
        uint64_t v7 = v13;
        size_t v9 = &v10;
        *((void *)std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__emplace_unique_key_args<turi::flexible_type,std::piecewise_construct_t const&,std::tuple<turi::flexible_type const&>,std::tuple<>>(a2, (unsigned __int8 *)&v10, (uint64_t)&std::piecewise_construct, (void **)&v9)+ 4) = v7;
        std::pair<turi::flexible_type,unsigned long>::~pair((uint64_t)&v10);
      }
    }
  }
  else
  {
    std::istream::read();
  }
}

void sub_2240AA16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::pair<turi::flexible_type const,unsigned long>::~pair((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void turi::archive_detail::deserialize_impl<turi::iarchive,std::pair<turi::flexible_type,unsigned long>,false,void>::exec(turi::iarchive *a1, unint64_t *a2)
{
  turi::archive_detail::deserialize_hard_or_soft_fail<turi::iarchive,turi::flexible_type>::exec(a1, a2);
  uint64_t v4 = *((void *)a1 + 2);
  if (v4)
  {
    a2[2] = *(void *)(v4 + *((void *)a1 + 3));
    *((void *)a1 + 3) += 8;
  }
  else
  {
    std::istream::read();
  }
}

uint64_t std::pair<turi::flexible_type,unsigned long>::~pair(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 12))
  {
    case 2:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v2 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          if (*((char *)v2 + 31) < 0) {
            operator delete((void *)v2[1]);
          }
          atomic_ullong *volatile v3 = v2;
          uint64_t v4 = 0x1012C404EF22A49;
          goto LABEL_32;
        }
      }
      break;
    case 3:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v5 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          unint64_t v6 = (void *)v5[1];
          if (v6)
          {
            v5[2] = (atomic_ullong)v6;
            operator delete(v6);
          }
          atomic_ullong *volatile v3 = v5;
          uint64_t v4 = 0x1080C409938AC02;
          goto LABEL_32;
        }
      }
      break;
    case 4:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          std::vector<char>::size_type v15 = (void **)(v7 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v15);
          goto LABEL_18;
        }
      }
      break;
    case 5:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v7 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          std::vector<char>::size_type v15 = (void **)(v7 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v15);
LABEL_18:
          atomic_ullong *volatile v3 = v7;
          uint64_t v4 = 0x1020C405E66F15BLL;
          goto LABEL_32;
        }
      }
      break;
    case 8:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v8 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          boost::detail::shared_count::~shared_count((atomic_uint **)v8 + 2);
          atomic_ullong *volatile v3 = v8;
          unsigned int v9 = -235920773;
          goto LABEL_31;
        }
      }
      break;
    case 9:
      if (atomic_fetch_add(*(atomic_ullong *volatile *)a1, 0xFFFFFFFFFFFFFFFFLL) == 1)
      {
        atomic_ullong *volatile v10 = *(atomic_ullong *volatile *)a1;
        if (*(void *)a1)
        {
          int v11 = (void *)v10[6];
          if (v11)
          {
            v10[7] = (atomic_ullong)v11;
            operator delete(v11);
          }
          char v12 = (void *)v10[3];
          if (v12)
          {
            void v10[4] = (atomic_ullong)v12;
            operator delete(v12);
          }
          uint64_t v13 = (std::__shared_weak_count *)v10[2];
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          atomic_ullong *volatile v3 = v10;
          unsigned int v9 = 2071181815;
LABEL_31:
          uint64_t v4 = v9 | 0x1030C4000000000;
LABEL_32:
          MEMORY[0x22A614FA0](v3, v4);
        }
      }
      break;
    default:
      break;
  }
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + ++*(void *)(result + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<turi::flexible_type,unsigned long>,std::__unordered_map_hasher<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::hash<turi::flexible_type>,std::equal_to<turi::flexible_type>,true>,std::__unordered_map_equal<turi::flexible_type,std::__hash_value_type<turi::flexible_type,unsigned long>,std::equal_to<turi::flexible_type>,std::hash<turi::flexible_type>,true>,std::allocator<std::__hash_value_type<turi::flexible_type,unsigned long>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  atomic_ullong *volatile v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *turi::sframe_function_output_iterator<std::string,std::function<void ()(std::string const&)>,std::function<void ()(std::string&&)>,std::function<void ()(turi::sframe_rows const&)>>::~sframe_function_output_iterator(void *a1)
{
  std::__function::__value_func<void ()(turi::sframe_rows const&)>::~__value_func[abi:ne180100](a1 + 8);
  std::__function::__value_func<void ()(std::string &&)>::~__value_func[abi:ne180100](a1 + 4);
  return std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](a1);
}

void **std::vector<std::vector<turi::flexible_type>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 24 * v6;
    std::vector<std::vector<turi::flexible_type>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer(v7);
  }
  return result;
}

void sub_2240AA5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<turi::flexible_type>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void turi::sarray<std::string>::get_reader(uint64_t a1)
{
  assert_msg(*(unsigned char *)(a1 + 249) == 0, "Cannot open an SArraying which is still writing.");
  operator new();
}

void sub_2240AA688(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<turi::flexible_type,unsigned long>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<float>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>>(result, v13);
    std::vector<char>::size_type v15 = &v14[24 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[24 * v16];
    *(void *)std::vector<char>::size_type v15 = 0;
    *((_DWORD *)v15 + 2) = 0;
    v15[12] = 0;
    uint64_t v17 = *a2;
    *(void *)(v15 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)std::vector<char>::size_type v15 = v17;
    v15[12] = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
    *((void *)v15 + 2) = a2[2];
    uint64_t v18[2] = v15 + 24;
    std::vector<std::pair<turi::flexible_type,unsigned long>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::pair<turi::flexible_type,unsigned long>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *(void *)unint64_t v7 = 0;
    *(_DWORD *)(v7 + ++*(void *)(result + 8) = 0;
    *(unsigned char *)(v7 + 12) = 0;
    uint64_t v8 = *a2;
    *(void *)(v7 + 5) = *(uint64_t *)((char *)a2 + 5);
    *(void *)unint64_t v7 = v8;
    *(unsigned char *)(v7 + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = 0;
    *(void *)(v7 + 16) = a2[2];
    uint64_t v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_2240AA82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<turi::flexible_type,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t turi::sarray_reader_buffer<std::string>::next(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *a1;
  if (v2 == 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3))
  {
    uint64_t v4 = a1[8];
    if (a1[10] >= (unint64_t)(a1[9] - v4)) {
      uint64_t v5 = a1[9] - v4;
    }
    else {
      uint64_t v5 = a1[10];
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1[5] + 48))(a1[5], v4, v5 + v4, a1);
    uint64_t v2 = 0;
    a1[8] += v5;
    uint64_t v3 = *a1;
  }
  ++a1[11];
  a1[6] = v2 + 1;
  return v3 + 24 * v2;
}

uint64_t **std::tuple<turi::flexible_type &,unsigned long &>::operator=[abi:ne180100]<turi::flexible_type,unsigned long,0>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1 != a2)
  {
    switch(*((unsigned char *)v4 + 12))
    {
      case 2:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v5 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          if (*((char *)v5 + 31) < 0) {
            operator delete((void *)v5[1]);
          }
          atomic_ullong *volatile v6 = v5;
          uint64_t v7 = 0x1012C404EF22A49;
          goto LABEL_33;
        }
        break;
      case 3:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v8 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          uint64_t v9 = (void *)v8[1];
          if (v9)
          {
            void v8[2] = (atomic_ullong)v9;
            operator delete(v9);
          }
          atomic_ullong *volatile v6 = v8;
          uint64_t v7 = 0x1080C409938AC02;
          goto LABEL_33;
        }
        break;
      case 4:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          unint64_t v22 = (void **)(v10 + 1);
          std::vector<turi::flexible_type>::__destroy_vector::operator()[abi:ne180100](&v22);
          goto LABEL_19;
        }
        break;
      case 5:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v10 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          unint64_t v22 = (void **)(v10 + 1);
          std::vector<std::pair<turi::flexible_type,turi::flexible_type>>::__destroy_vector::operator()[abi:ne180100](&v22);
LABEL_19:
          atomic_ullong *volatile v6 = v10;
          uint64_t v7 = 0x1020C405E66F15BLL;
          goto LABEL_33;
        }
        break;
      case 8:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v11 = (atomic_ullong *volatile)*v4;
          if (!*v4) {
            goto LABEL_34;
          }
          boost::detail::shared_count::~shared_count((atomic_uint **)v11 + 2);
          atomic_ullong *volatile v6 = v11;
          unsigned int v12 = -235920773;
          goto LABEL_32;
        }
        break;
      case 9:
        if (atomic_fetch_add((atomic_ullong *volatile)*v4, 0xFFFFFFFFFFFFFFFFLL) == 1)
        {
          atomic_ullong *volatile v13 = (atomic_ullong *volatile)*v4;
          if (*v4)
          {
            uint64_t v14 = (void *)v13[6];
            if (v14)
            {
              v13[7] = (atomic_ullong)v14;
              operator delete(v14);
            }
            std::vector<char>::size_type v15 = (void *)v13[3];
            if (v15)
            {
              uint64_t v13[4] = (atomic_ullong)v15;
              operator delete(v15);
            }
            uint64_t v16 = (std::__shared_weak_count *)v13[2];
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            atomic_ullong *volatile v6 = v13;
            unsigned int v12 = 2071181815;
LABEL_32:
            uint64_t v7 = v12 | 0x1030C4000000000;
LABEL_33:
            MEMORY[0x22A614FA0](v6, v7);
          }
LABEL_34:
          *uint64_t v4 = 0;
        }
        break;
      default:
        break;
    }
    uint64_t v17 = *a2;
    *(uint64_t *)((char *)v4 + 5) = *(uint64_t *)((char *)a2 + 5);
    *uint64_t v4 = v17;
    LODWORD(v17) = *((unsigned __int8 *)a2 + 12);
    *((unsigned char *)v4 + 12) = v17;
    BOOL v18 = v17 > 9;
    int v19 = (1 << v17) & 0x33C;
    if (!v18 && v19 != 0) {
      atomic_fetch_add((atomic_ullong *volatile)*v4, 1uLL);
    }
  }
  *a1[1] = a2[2];
  return a1;
}

void turi::sarray<std::string>::open_for_write(uint64_t a1)
{
  uint64_t v2 = (turi::fileio::fixed_size_cache_manager *)assert_msg(*(unsigned char *)(a1 + 248) == 0, "Attempting to init an SArray which has already been inited");
  uint64_t instance = turi::fileio::fixed_size_cache_manager::get_instance(v2);
  std::string::basic_string[abi:ne180100]<0>(__p, ".sidx");
  turi::fileio::fixed_size_cache_manager::get_temp_cache_id(instance, (uint64_t)__p, &__str);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 152), &__str);
  operator new();
}

void sub_2240AAE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t turi::sarray<std::string>::sarray(uint64_t a1)
{
  *(void *)a1 = &unk_26D767B30;
  *(void *)(a1 + ++*(void *)(result + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + turi::sketches::streaming_quantile_sketch<double,std::less<double>>::substream_finalize((uint64_t)this + 32) = -1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8++*(void *)(result + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12++*(void *)(result + 8) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16++*(void *)(result + 8) = 0u;
  int v2 = pthread_mutex_init((pthread_mutex_t *)(a1 + 184), 0);
  assert_msg(v2 == 0, "Mutex create error %d", v2);
  *(_WORD *)(a1 + 24++*(void *)(result + 8) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  return a1;
}

void sub_2240AAF8C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v3);
  }
  turi::index_file_information::~index_file_information(v2);
  _Unwind_Resume(a1);
}